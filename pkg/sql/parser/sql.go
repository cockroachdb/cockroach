// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readOnly() ReadOnly {
	return u.val.(ReadOnly)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:466
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const LATERAL = 57494
const LC_CTYPE = 57495
const LC_COLLATE = 57496
const LEADING = 57497
const LEAST = 57498
const LEFT = 57499
const LEVEL = 57500
const LIKE = 57501
const LIMIT = 57502
const LOCAL = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const LOW = 57506
const LSHIFT = 57507
const MATCH = 57508
const MINUTE = 57509
const MONTH = 57510
const NAN = 57511
const NAME = 57512
const NAMES = 57513
const NATURAL = 57514
const NEXT = 57515
const NO = 57516
const NO_INDEX_JOIN = 57517
const NORMAL = 57518
const NOT = 57519
const NOTHING = 57520
const NULL = 57521
const NULLIF = 57522
const NULLS = 57523
const NUMERIC = 57524
const OF = 57525
const OFF = 57526
const OFFSET = 57527
const OID = 57528
const ON = 57529
const ONLY = 57530
const OPTIONS = 57531
const OR = 57532
const ORDER = 57533
const ORDINALITY = 57534
const OUT = 57535
const OUTER = 57536
const OVER = 57537
const OVERLAPS = 57538
const OVERLAY = 57539
const PARENT = 57540
const PARTIAL = 57541
const PARTITION = 57542
const PASSWORD = 57543
const PLACING = 57544
const POSITION = 57545
const PRECEDING = 57546
const PRECISION = 57547
const PREPARE = 57548
const PRIMARY = 57549
const PRIORITY = 57550
const QUERIES = 57551
const RANGE = 57552
const READ = 57553
const REAL = 57554
const RECURSIVE = 57555
const REF = 57556
const REFERENCES = 57557
const REGCLASS = 57558
const REGPROC = 57559
const REGPROCEDURE = 57560
const REGNAMESPACE = 57561
const REGTYPE = 57562
const RENAME = 57563
const REPEATABLE = 57564
const RELEASE = 57565
const RESET = 57566
const RESTORE = 57567
const RESTRICT = 57568
const RETURNING = 57569
const REVOKE = 57570
const RIGHT = 57571
const ROLLBACK = 57572
const ROLLUP = 57573
const ROW = 57574
const ROWS = 57575
const RSHIFT = 57576
const SAVEPOINT = 57577
const SCATTER = 57578
const SEARCH = 57579
const SECOND = 57580
const SELECT = 57581
const SERIAL = 57582
const SERIALIZABLE = 57583
const SESSION = 57584
const SESSIONS = 57585
const SESSION_USER = 57586
const SET = 57587
const SETTING = 57588
const SETTINGS = 57589
const SHOW = 57590
const SIMILAR = 57591
const SIMPLE = 57592
const SMALLINT = 57593
const SMALLSERIAL = 57594
const SNAPSHOT = 57595
const SOME = 57596
const SPLIT = 57597
const SQL = 57598
const START = 57599
const STATUS = 57600
const STDIN = 57601
const STRICT = 57602
const STRING = 57603
const STORING = 57604
const SUBSTRING = 57605
const SYMMETRIC = 57606
const SYSTEM = 57607
const TABLE = 57608
const TABLES = 57609
const TEMPLATE = 57610
const TESTING_RANGES = 57611
const TESTING_RELOCATE = 57612
const TEXT = 57613
const THEN = 57614
const TIME = 57615
const TIMESTAMP = 57616
const TIMESTAMPTZ = 57617
const TO = 57618
const TRAILING = 57619
const TRANSACTION = 57620
const TREAT = 57621
const TRIM = 57622
const TRUE = 57623
const TRUNCATE = 57624
const TYPE = 57625
const UNBOUNDED = 57626
const UNCOMMITTED = 57627
const UNION = 57628
const UNIQUE = 57629
const UNKNOWN = 57630
const UPDATE = 57631
const UPSERT = 57632
const USE = 57633
const USER = 57634
const USERS = 57635
const USING = 57636
const UUID = 57637
const VALID = 57638
const VALIDATE = 57639
const VALUE = 57640
const VALUES = 57641
const VARCHAR = 57642
const VARIADIC = 57643
const VIEW = 57644
const VARYING = 57645
const WHEN = 57646
const WHERE = 57647
const WINDOW = 57648
const WITH = 57649
const WITHIN = 57650
const WITHOUT = 57651
const WRITE = 57652
const YEAR = 57653
const ZONE = 57654
const NOT_LA = 57655
const WITH_LA = 57656
const AS_LA = 57657
const POSTFIXOP = 57658
const UMINUS = 57659

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5611

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 32,
	336, 32,
	-2, 446,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 53,
	1, 419,
	187, 419,
	227, 419,
	332, 419,
	334, 419,
	336, 419,
	-2, 429,
	-1, 68,
	1, 422,
	187, 422,
	227, 422,
	332, 422,
	334, 422,
	336, 422,
	-2, 428,
	-1, 77,
	1, 32,
	336, 32,
	-2, 446,
	-1, 445,
	1, 177,
	336, 177,
	-2, 1021,
	-1, 512,
	108, 456,
	160, 456,
	185, 456,
	-2, 425,
	-1, 515,
	108, 455,
	160, 455,
	185, 455,
	-2, 423,
	-1, 660,
	108, 455,
	160, 455,
	185, 455,
	-2, 426,
	-1, 720,
	333, 953,
	-2, 946,
	-1, 721,
	333, 954,
	-2, 947,
	-1, 727,
	5, 622,
	333, 622,
	-2, 1134,
	-1, 751,
	5, 583,
	-2, 1108,
	-1, 752,
	5, 616,
	333, 616,
	-2, 1110,
	-1, 753,
	5, 591,
	-2, 1111,
	-1, 754,
	5, 590,
	-2, 1112,
	-1, 755,
	5, 616,
	333, 616,
	-2, 1115,
	-1, 756,
	5, 616,
	333, 616,
	-2, 1116,
	-1, 757,
	5, 617,
	-2, 1119,
	-1, 758,
	5, 577,
	-2, 1120,
	-1, 759,
	5, 577,
	-2, 1121,
	-1, 760,
	5, 598,
	-2, 1125,
	-1, 761,
	5, 578,
	-2, 1130,
	-1, 762,
	5, 579,
	-2, 1131,
	-1, 763,
	5, 580,
	-2, 1132,
	-1, 764,
	5, 581,
	-2, 1133,
	-1, 765,
	5, 577,
	-2, 1138,
	-1, 766,
	5, 584,
	-2, 1143,
	-1, 767,
	5, 582,
	-2, 1146,
	-1, 768,
	5, 614,
	333, 614,
	-2, 1148,
	-1, 769,
	5, 618,
	-2, 1151,
	-1, 770,
	5, 620,
	-2, 1152,
	-1, 771,
	5, 613,
	333, 613,
	-2, 1157,
	-1, 1031,
	99, 429,
	108, 429,
	144, 429,
	160, 429,
	185, 429,
	191, 429,
	286, 429,
	-2, 741,
	-1, 1040,
	333, 930,
	-2, 918,
	-1, 1253,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 657,
	-1, 1254,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 658,
	-1, 1255,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 659,
	-1, 1259,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 663,
	-1, 1260,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 664,
	-1, 1261,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 665,
	-1, 1264,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 670,
	-1, 1270,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 672,
	-1, 1272,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 676,
	-1, 1273,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 677,
	-1, 1274,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 678,
	-1, 1275,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 679,
	-1, 1302,
	196, 812,
	-2, 815,
	-1, 1331,
	117, 852,
	333, 953,
	-2, 946,
	-1, 1332,
	117, 853,
	-2, 1104,
	-1, 1333,
	117, 854,
	-2, 1020,
	-1, 1334,
	117, 855,
	-2, 988,
	-1, 1335,
	117, 856,
	-2, 1004,
	-1, 1336,
	117, 857,
	-2, 1019,
	-1, 1337,
	117, 858,
	-2, 1067,
	-1, 1497,
	99, 429,
	108, 429,
	144, 429,
	160, 429,
	185, 429,
	191, 429,
	286, 429,
	-2, 512,
	-1, 1501,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 671,
	-1, 1502,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 673,
	-1, 1507,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 674,
	-1, 1525,
	196, 811,
	-2, 814,
	-1, 1717,
	1, 513,
	69, 513,
	99, 513,
	108, 513,
	118, 513,
	122, 513,
	124, 513,
	137, 513,
	144, 513,
	149, 513,
	157, 513,
	160, 513,
	172, 513,
	185, 513,
	187, 513,
	191, 513,
	227, 513,
	229, 513,
	286, 513,
	294, 513,
	305, 513,
	306, 513,
	315, 513,
	332, 513,
	334, 513,
	336, 513,
	337, 513,
	-2, 512,
	-1, 1719,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 675,
	-1, 1724,
	147, 0,
	-2, 691,
	-1, 1734,
	196, 813,
	-2, 816,
	-1, 1768,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 718,
	-1, 1769,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 719,
	-1, 1770,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 720,
	-1, 1774,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 724,
	-1, 1775,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 725,
	-1, 1776,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 726,
	-1, 1897,
	147, 0,
	-2, 692,
	-1, 1900,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 695,
	-1, 1901,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 697,
	-1, 2007,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 696,
	-1, 2008,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 698,
	-1, 2015,
	147, 0,
	-2, 727,
	-1, 2071,
	147, 0,
	-2, 728,
	-1, 2136,
	36, 0,
	131, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 1107,
}

const sqlPrivate = 57344

const sqlLast = 30550

var sqlAct = [...]int{

	721, 2113, 2135, 2160, 1712, 2077, 2114, 2134, 1671, 2115,
	1133, 1862, 1941, 1888, 1217, 1745, 946, 1125, 1495, 1987,
	1188, 1713, 843, 296, 711, 1618, 1225, 1681, 1819, 516,
	952, 1873, 1805, 1967, 90, 90, 90, 537, 1492, 1468,
	827, 1619, 697, 561, 1206, 1192, 314, 90, 90, 90,
	523, 67, 90, 1867, 1470, 90, 1187, 498, 812, 579,
	1418, 52, 1689, 90, 1536, 719, 503, 1232, 1586, 1585,
	1036, 1482, 90, 90, 718, 1698, 90, 1165, 1300, 90,
	90, 90, 90, 1191, 948, 90, 90, 784, 680, 787,
	1412, 1477, 1224, 1357, 1310, 67, 691, 1085, 1134, 1094,
	1287, 1230, 305, 22, 1284, 1149, 552, 303, 30, 1213,
	1117, 302, 16, 1181, 972, 909, 304, 8, 602, 813,
	789, 1328, 1158, 1027, 497, 816, 1227, 690, 67, 573,
	601, 681, 521, 580, 515, 1195, 1820, 1127, 574, 571,
	977, 1066, 526, 68, 444, 664, 312, 441, 663, 1070,
	489, 440, 662, 430, 820, 713, 86, 82, 907, 421,
	567, 524, 668, 643, 644, 433, 1524, 520, 298, 20,
	494, 829, 69, 2000, 714, 1126, 2001, 520, 311, 2151,
	22, 487, 809, 311, 2130, 30, 829, 1818, 32, 16,
	2125, 829, 284, 1168, 8, 2124, 1493, 803, 1168, 33,
	57, 2121, 534, 2111, 809, 540, 1155, 1429, 547, 543,
	2106, 513, 2102, 809, 1168, 809, 480, 1556, 1557, 2073,
	2055, 2067, 1155, 66, 809, 59, 2049, 2045, 66, 1818,
	809, 35, 1162, 66, 528, 2040, 2009, 1528, 2039, 1155,
	512, 1997, 1529, 1430, 838, 1130, 20, 1994, 1981, 43,
	1995, 1818, 48, 1978, 43, 1118, 809, 979, 44, 43,
	1360, 1121, 60, 44, 980, 981, 47, 1976, 44, 774,
	1818, 773, 1556, 1557, 73, 1952, 1163, 1480, 809, 1951,
	45, 1480, 1818, 1923, 49, 45, 1168, 983, 1902, 978,
	45, 1168, 90, 90, 90, 90, 90, 1899, 503, 1891,
	1155, 75, 1168, 1839, 1838, 1817, 1168, 1168, 1818, 1728,
	982, 1657, 1168, 1168, 1124, 1527, 1164, 1161, 91, 1562,
	1168, 1652, 1603, 1535, 1124, 1604, 1601, 1600, 1599, 1168,
	1168, 1168, 1525, 1457, 76, 1168, 809, 1221, 1172, 1118,
	809, 1168, 71, 1781, 1731, 1167, 980, 981, 1168, 72,
	830, 1154, 1454, 1123, 1155, 581, 1124, 1082, 1083, 521,
	1081, 1121, 1458, 1304, 315, 830, 988, 1216, 70, 983,
	830, 46, 1572, 837, 1562, 1179, 838, 676, 898, 809,
	550, 592, 533, 77, 504, 556, 1881, 1166, 62, 63,
	34, 1821, 982, 50, 73, 61, 1496, 73, 73, 73,
	51, 500, 921, 56, 73, 616, 2149, 2133, 56, 2120,
	54, 2082, 2068, 56, 1979, 1928, 675, 90, 568, 980,
	981, 75, 58, 560, 75, 75, 75, 1572, 1924, 1916,
	1915, 75, 90, 1914, 577, 90, 90, 1556, 1557, 576,
	576, 1573, 983, 1910, 1909, 1908, 503, 64, 988, 772,
	1853, 1847, 1796, 503, 76, 1791, 65, 76, 76, 76,
	1160, 833, 71, 1429, 76, 982, 71, 71, 1790, 72,
	1789, 997, 71, 72, 72, 1739, 828, 978, 1044, 72,
	90, 944, 1159, 558, 1717, 1688, 90, 1661, 70, 1460,
	1608, 70, 1129, 1705, 951, 316, 1573, 1605, 70, 2132,
	1593, 998, 1584, 1555, 1552, 1551, 1549, 90, 90, 90,
	1541, 90, 1540, 780, 1456, 505, 1374, 1325, 1324, 675,
	1494, 988, 1037, 1296, 70, 1747, 90, 674, 1567, 1565,
	1566, 1558, 1559, 1560, 1561, 1563, 1564, 90, 2094, 1562,
	1037, 2052, 661, 2038, 2037, 2036, 2028, 2026, 1556, 1557,
	503, 90, 2017, 2004, 1990, 1974, 1938, 314, 503, 1921,
	90, 612, 1893, 1856, 1844, 90, 90, 90, 1824, 90,
	999, 779, 618, 1723, 998, 1703, 1679, 660, 984, 985,
	986, 987, 989, 990, 90, 90, 1558, 1559, 1560, 1561,
	1563, 1564, 90, 1677, 90, 1659, 1676, 1846, 1674, 90,
	595, 597, 1627, 600, 818, 1626, 1583, 1545, 1544, 503,
	503, 1521, 649, 1516, 1289, 832, 504, 314, 835, 778,
	1445, 1403, 90, 619, 1297, 90, 1401, 90, 90, 90,
	90, 90, 90, 647, 1388, 90, 1387, 1367, 645, 1323,
	90, 90, 1220, 999, 1071, 1074, 1078, 90, 1064, 1063,
	1562, 653, 1062, 656, 1061, 980, 981, 1060, 90, 992,
	984, 985, 986, 987, 989, 990, 1059, 513, 1439, 807,
	556, 1058, 684, 950, 1057, 1056, 1055, 90, 983, 1054,
	90, 671, 672, 1053, 1052, 1051, 1050, 677, 1388, 943,
	1049, 568, 1048, 1041, 1030, 70, 512, 945, 538, 559,
	976, 982, 679, 810, 599, 588, 586, 808, 2104, 1999,
	839, 610, 1904, 1879, 841, 1882, 1878, 1852, 501, 1212,
	619, 822, 1851, 1706, 1438, 819, 1028, 1211, 619, 780,
	993, 991, 992, 984, 985, 986, 987, 989, 990, 608,
	797, 1556, 1557, 955, 2042, 1496, 896, 505, 2002, 891,
	895, 893, 892, 1560, 1561, 1563, 1564, 521, 1471, 795,
	1850, 850, 917, 922, 504, 1431, 924, 916, 910, 1118,
	1607, 504, 926, 1606, 796, 930, 931, 932, 933, 934,
	1076, 609, 1500, 90, 929, 1077, 920, 937, 938, 1162,
	635, 90, 611, 1046, 905, 90, 949, 1413, 915, 914,
	942, 500, 495, 90, 90, 1868, 1043, 90, 1126, 958,
	90, 1748, 513, 959, 957, 513, 513, 1532, 1311, 974,
	1067, 639, 1425, 1614, 90, 2085, 90, 90, 2146, 90,
	780, 2147, 90, 1163, 90, 90, 1088, 90, 790, 503,
	791, 968, 1095, 1040, 969, 970, 2044, 292, 1832, 889,
	80, 790, 790, 791, 791, 1171, 877, 640, 876, 473,
	897, 1146, 1558, 1559, 1560, 1561, 1563, 1564, 504, 474,
	608, 510, 1451, 1164, 1161, 315, 504, 479, 1962, 478,
	918, 1087, 1207, 1961, 1960, 1959, 1642, 1638, 67, 1099,
	1101, 1641, 1611, 67, 1610, 505, 581, 1068, 1069, 1503,
	1444, 293, 505, 1443, 79, 1098, 1442, 980, 981, 1072,
	1441, 792, 609, 1271, 1169, 1075, 906, 1115, 1114, 1079,
	1658, 1104, 314, 1120, 792, 792, 1091, 504, 504, 90,
	983, 1111, 1112, 1116, 646, 315, 549, 288, 1843, 883,
	90, 90, 90, 1087, 1166, 90, 90, 1371, 1370, 1086,
	1152, 1242, 90, 982, 1151, 919, 1033, 2043, 1141, 1153,
	1132, 941, 980, 981, 486, 1106, 940, 706, 1109, 1343,
	1645, 1142, 1147, 1144, 990, 1145, 1286, 1943, 1143, 576,
	90, 576, 1286, 314, 1647, 983, 289, 1415, 584, 1128,
	519, 1128, 814, 1556, 1557, 1222, 1097, 923, 598, 505,
	2092, 87, 87, 286, 823, 2157, 316, 505, 982, 988,
	632, 1150, 1629, 636, 413, 414, 415, 1160, 314, 432,
	1166, 1072, 446, 1075, 2168, 1489, 1311, 1069, 1068, 1173,
	432, 2146, 2163, 294, 1419, 518, 78, 1408, 1399, 527,
	527, 1556, 1557, 286, 633, 1571, 286, 286, 546, 286,
	1405, 788, 87, 553, 829, 800, 1268, 506, 505, 505,
	1564, 805, 998, 1666, 988, 804, 316, 2108, 1180, 295,
	1184, 1186, 81, 637, 798, 2031, 1096, 801, 511, 1556,
	1557, 2117, 520, 507, 818, 90, 90, 90, 1210, 799,
	2109, 90, 800, 508, 90, 1562, 1450, 1373, 939, 1636,
	90, 90, 90, 90, 90, 1663, 481, 622, 1308, 844,
	1223, 798, 90, 1452, 793, 90, 90, 1065, 501, 496,
	583, 1490, 503, 638, 605, 90, 799, 793, 793, 1241,
	90, 999, 90, 1423, 1166, 1293, 1381, 291, 290, 90,
	1291, 623, 1202, 1562, 621, 1664, 1214, 1215, 1572, 90,
	1298, 1266, 1269, 1295, 1975, 850, 850, 504, 2156, 2161,
	2013, 1084, 2118, 1630, 1294, 1175, 1025, 1319, 1543, 1375,
	90, 90, 1944, 1419, 1699, 1338, 1177, 517, 1716, 1265,
	503, 1562, 482, 1433, 606, 1434, 1435, 607, 1421, 520,
	1646, 521, 1686, 1427, 1398, 1178, 1572, 90, 2116, 90,
	2145, 90, 2143, 2169, 1376, 90, 1861, 1176, 1505, 90,
	1204, 2162, 626, 2119, 1285, 593, 1166, 1573, 993, 991,
	992, 984, 985, 986, 987, 989, 990, 1459, 591, 1461,
	2164, 667, 90, 830, 1572, 1777, 1411, 1485, 1954, 1953,
	315, 1414, 1919, 726, 1936, 776, 2174, 1828, 2023, 2155,
	877, 877, 876, 876, 1813, 1424, 1488, 1613, 1499, 286,
	569, 286, 446, 446, 1432, 1573, 56, 850, 1697, 1267,
	666, 67, 1384, 484, 1400, 1436, 1486, 1402, 986, 987,
	989, 990, 1380, 1447, 1448, 1205, 956, 1814, 505, 947,
	1449, 1301, 619, 521, 1662, 1453, 1455, 2078, 1305, 936,
	964, 315, 1313, 1573, 1567, 1565, 1566, 1558, 1559, 1560,
	1561, 1563, 1564, 1330, 1330, 1341, 899, 1352, 1682, 1473,
	1863, 1778, 665, 1364, 1365, 1366, 1476, 1779, 1152, 1491,
	850, 1475, 1151, 1498, 1920, 1479, 315, 1153, 1827, 2173,
	967, 1481, 1937, 1534, 1390, 1463, 483, 667, 1487, 666,
	903, 521, 1889, 1565, 1566, 1558, 1559, 1560, 1561, 1563,
	1564, 1389, 877, 965, 876, 850, 1876, 1292, 1462, 419,
	1506, 316, 1465, 1504, 1831, 1694, 1693, 605, 1809, 566,
	1810, 1830, 565, 518, 589, 657, 1672, 1520, 901, 1150,
	1485, 1854, 1566, 1558, 1559, 1560, 1561, 1563, 1564, 594,
	902, 665, 446, 446, 1531, 775, 1934, 1410, 1812, 1488,
	521, 1690, 1890, 1625, 1478, 422, 1815, 2016, 1322, 1918,
	1587, 1483, 1722, 1644, 1550, 877, 1515, 876, 1935, 1486,
	90, 90, 316, 1416, 1170, 1633, 427, 1635, 1122, 1110,
	504, 423, 1107, 642, 1484, 641, 1653, 432, 1590, 1591,
	1592, 634, 631, 286, 1624, 90, 630, 1481, 629, 90,
	877, 90, 876, 1623, 1588, 1609, 424, 316, 90, 628,
	627, 503, 1829, 624, 446, 655, 446, 564, 658, 557,
	1678, 90, 1047, 1650, 90, 426, 1616, 928, 1811, 1321,
	2112, 1675, 2075, 527, 314, 1802, 90, 1637, 504, 1634,
	1643, 1487, 1632, 1612, 286, 1467, 1485, 1692, 1648, 1208,
	1695, 1707, 1200, 1148, 1704, 836, 834, 831, 87, 1656,
	1665, 1667, 1668, 1655, 1683, 1488, 1398, 286, 1654, 826,
	806, 802, 286, 286, 286, 794, 824, 1483, 1736, 1725,
	1469, 67, 1673, 1969, 90, 1486, 1218, 669, 2147, 531,
	1519, 286, 286, 309, 25, 912, 1696, 1685, 1522, 87,
	1484, 87, 1700, 1701, 83, 563, 446, 1741, 1742, 1743,
	723, 505, 562, 1971, 1103, 1875, 1538, 1539, 2033, 308,
	24, 307, 23, 306, 11, 3, 425, 310, 10, 446,
	300, 9, 446, 1651, 87, 446, 446, 446, 446, 446,
	1735, 1821, 935, 1732, 617, 1219, 2070, 446, 446, 1582,
	1749, 90, 90, 90, 432, 1751, 670, 1487, 532, 472,
	1595, 1087, 1691, 1754, 1756, 954, 1087, 1102, 90, 505,
	418, 25, 1100, 90, 673, 90, 428, 90, 90, 90,
	1708, 1684, 90, 90, 527, 503, 1108, 553, 1826, 551,
	1822, 1625, 1825, 554, 1784, 1105, 1785, 24, 1801, 23,
	555, 11, 1639, 539, 1640, 10, 299, 7, 9, 301,
	4, 2056, 1798, 980, 981, 1859, 1203, 90, 90, 475,
	476, 429, 1874, 1199, 503, 1131, 975, 980, 981, 894,
	842, 850, 1624, 696, 90, 90, 983, 1857, 90, 1625,
	1855, 1623, 1157, 1842, 1625, 1860, 503, 2171, 90, 2172,
	1556, 1557, 1885, 1906, 1849, 90, 980, 981, 2105, 982,
	1871, 1872, 850, 850, 1877, 1884, 651, 650, 1344, 285,
	1866, 850, 850, 982, 1858, 2059, 1894, 1864, 1886, 1797,
	1624, 1669, 1660, 1602, 7, 1624, 1898, 4, 90, 1623,
	286, 651, 1440, 1372, 1623, 1711, 1369, 1368, 1092, 1318,
	1034, 652, 286, 581, 850, 1883, 2091, 521, 1968, 535,
	286, 1113, 542, 545, 286, 535, 1744, 1119, 1464, 1044,
	1042, 485, 1729, 1942, 420, 927, 877, 625, 876, 504,
	1880, 286, 1702, 1139, 1140, 2107, 286, 1911, 1542, 286,
	1986, 446, 446, 90, 446, 90, 2012, 314, 90, 1320,
	1045, 42, 315, 1621, 700, 619, 90, 877, 877, 876,
	876, 1848, 314, 1917, 1803, 1615, 877, 877, 876, 876,
	849, 1194, 879, 1193, 1946, 317, 913, 1948, 722, 488,
	1329, 1234, 777, 1625, 1782, 724, 847, 90, 1930, 725,
	848, 1073, 1929, 712, 1865, 1792, 845, 1135, 1290, 877,
	1945, 876, 90, 1309, 818, 503, 1530, 1970, 1964, 90,
	1038, 692, 704, 703, 1957, 1958, 1306, 90, 585, 1887,
	443, 1625, 1977, 55, 1624, 90, 1963, 439, 1972, 1998,
	1422, 1845, 963, 1623, 90, 90, 1182, 1209, 850, 960,
	1631, 1996, 509, 1992, 1989, 1553, 1985, 286, 286, 286,
	2003, 587, 286, 1190, 2005, 1350, 2006, 1993, 1983, 553,
	505, 1342, 1624, 1339, 648, 783, 1026, 1136, 615, 1428,
	1156, 1623, 678, 971, 530, 90, 529, 2011, 1189, 613,
	904, 900, 1174, 316, 2018, 1019, 1016, 286, 477, 2025,
	2027, 604, 1870, 1932, 603, 1201, 1383, 1344, 1344, 2167,
	90, 90, 2032, 504, 2021, 2022, 1628, 2084, 1947, 74,
	2041, 1966, 90, 1409, 31, 29, 90, 26, 2029, 21,
	2030, 19, 18, 28, 503, 535, 17, 545, 2050, 2048,
	27, 90, 878, 877, 2051, 876, 15, 90, 14, 13,
	12, 2060, 504, 314, 90, 90, 41, 850, 2065, 40,
	39, 2057, 2058, 2054, 2062, 38, 37, 36, 1344, 1344,
	1344, 2061, 6, 5, 504, 2066, 2, 90, 1980, 90,
	1, 0, 90, 0, 314, 1984, 521, 0, 0, 0,
	2072, 0, 2069, 890, 2081, 0, 0, 0, 67, 2080,
	0, 0, 286, 1378, 1379, 0, 90, 2095, 1092, 90,
	2097, 1386, 2096, 2093, 0, 0, 2099, 1391, 1392, 1394,
	1396, 1397, 2101, 2090, 0, 2100, 0, 1625, 2098, 1404,
	2103, 0, 1406, 286, 0, 1950, 0, 0, 0, 0,
	1233, 1240, 286, 90, 505, 90, 850, 286, 0, 1426,
	2122, 0, 877, 2127, 876, 2129, 286, 0, 0, 0,
	0, 0, 0, 90, 0, 2128, 286, 2140, 1624, 2126,
	422, 0, 2144, 2131, 2142, 315, 0, 1623, 2148, 1282,
	0, 0, 90, 505, 0, 0, 2153, 1182, 1182, 2154,
	315, 427, 0, 2152, 1280, 2150, 423, 0, 0, 2063,
	2166, 2165, 0, 0, 2053, 505, 0, 846, 0, 0,
	0, 2170, 0, 0, 954, 0, 954, 0, 446, 0,
	0, 424, 286, 0, 2175, 0, 1472, 1344, 1344, 535,
	2086, 0, 0, 504, 0, 0, 0, 0, 0, 0,
	426, 877, 850, 876, 1513, 0, 0, 0, 0, 286,
	0, 0, 1385, 0, 0, 0, 0, 1276, 0, 1511,
	0, 0, 0, 0, 0, 1277, 0, 1278, 0, 0,
	0, 1283, 0, 0, 849, 849, 879, 879, 0, 0,
	781, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
	1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
	0, 1344, 0, 817, 1517, 1518, 316, 0, 535, 821,
	821, 0, 0, 0, 0, 1437, 0, 0, 0, 0,
	1813, 316, 1508, 1806, 0, 0, 0, 542, 545, 0,
	0, 1804, 1509, 0, 0, 1808, 1514, 877, 0, 876,
	0, 425, 0, 0, 0, 0, 0, 2087, 2088, 2089,
	1385, 0, 504, 1814, 0, 0, 0, 0, 0, 0,
	701, 53, 0, 0, 505, 1579, 1580, 1581, 0, 1279,
	0, 315, 0, 0, 1807, 0, 1281, 0, 0, 0,
	0, 2110, 0, 0, 0, 0, 849, 0, 879, 0,
	311, 428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 53, 1620, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 514, 0,
	0, 522, 0, 0, 1510, 66, 878, 878, 53, 0,
	0, 1512, 0, 0, 1809, 0, 1810, 286, 286, 849,
	0, 879, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 1670, 0, 1812, 0, 1092, 0, 954, 0,
	0, 0, 1815, 505, 849, 1680, 879, 0, 0, 0,
	0, 0, 45, 0, 0, 0, 0, 0, 286, 0,
	0, 286, 316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1715, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1720, 1721, 1080, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 1344, 535, 0,
	0, 0, 0, 0, 0, 0, 545, 0, 878, 0,
	535, 0, 0, 0, 1811, 0, 0, 0, 0, 0,
	0, 1746, 0, 0, 0, 0, 0, 1137, 0, 0,
	0, 0, 545, 0, 0, 545, 0, 0, 1758, 1759,
	1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
	1770, 1771, 1772, 1773, 1774, 1775, 1776, 0, 1780, 0,
	0, 846, 846, 0, 0, 0, 73, 0, 0, 0,
	0, 878, 0, 0, 0, 56, 1556, 1557, 0, 1574,
	1575, 1576, 0, 682, 682, 0, 0, 0, 1799, 1800,
	1092, 0, 785, 75, 0, 0, 0, 0, 0, 0,
	0, 1344, 0, 0, 1620, 553, 878, 0, 0, 0,
	1833, 0, 1834, 0, 286, 1836, 1837, 0, 522, 1840,
	286, 0, 0, 0, 0, 0, 76, 0, 1571, 0,
	0, 0, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 72, 0, 1183, 545, 1185, 0, 0, 535, 0,
	0, 0, 1620, 0, 553, 1190, 0, 1620, 0, 0,
	297, 0, 0, 0, 0, 0, 0, 1233, 1752, 0,
	0, 286, 286, 846, 0, 286, 1233, 1757, 1562, 0,
	0, 0, 0, 1228, 0, 1715, 0, 0, 0, 0,
	0, 0, 1892, 0, 0, 0, 0, 0, 1578, 1344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1788,
	0, 0, 0, 1577, 0, 0, 0, 0, 0, 961,
	0, 966, 0, 0, 0, 1912, 0, 973, 0, 0,
	0, 1572, 0, 0, 0, 0, 846, 0, 0, 1020,
	1021, 1022, 1023, 1024, 0, 0, 0, 0, 0, 1032,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1039,
	0, 980, 981, 0, 0, 0, 0, 0, 0, 0,
	849, 846, 879, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 1931, 0, 983, 1933, 0, 0, 1377, 0,
	0, 0, 0, 286, 1939, 0, 1620, 0, 0, 0,
	1573, 849, 849, 879, 879, 0, 0, 982, 0, 0,
	849, 849, 879, 879, 0, 0, 0, 0, 0, 1407,
	0, 1965, 0, 0, 553, 0, 0, 0, 1417, 0,
	0, 0, 0, 817, 1620, 0, 0, 0, 0, 286,
	0, 0, 817, 849, 514, 879, 1988, 0, 0, 0,
	0, 0, 535, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 1715, 988, 0, 0, 0, 0, 0, 0,
	0, 553, 1715, 0, 980, 981, 0, 0, 0, 0,
	0, 0, 1568, 1569, 1570, 0, 0, 1567, 1565, 1566,
	1558, 1559, 1560, 1561, 1563, 1564, 0, 983, 2015, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1466, 0,
	0, 0, 954, 0, 0, 0, 998, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 1228, 0, 2034, 2035, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2046,
	0, 0, 1956, 2047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 878, 0, 0, 0, 553, 0,
	0, 0, 878, 878, 1715, 0, 988, 849, 0, 879,
	0, 1715, 553, 0, 0, 999, 0, 0, 0, 514,
	0, 0, 514, 514, 0, 0, 2071, 0, 0, 0,
	0, 0, 0, 0, 2079, 878, 553, 0, 0, 286,
	0, 0, 0, 0, 1029, 0, 1031, 0, 0, 0,
	0, 0, 0, 1035, 0, 0, 0, 0, 0, 998,
	1620, 0, 682, 1988, 0, 0, 1715, 0, 1243, 1244,
	1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254,
	1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
	0, 1270, 0, 1272, 1273, 1274, 1275, 0, 0, 0,
	286, 0, 553, 991, 992, 984, 985, 986, 987, 989,
	990, 0, 1299, 0, 0, 0, 849, 0, 879, 0,
	2141, 0, 0, 0, 0, 0, 0, 846, 999, 0,
	0, 0, 0, 0, 1326, 1327, 0, 0, 1340, 1715,
	1351, 1353, 1358, 1361, 1362, 1363, 0, 53, 0, 0,
	53, 0, 0, 0, 0, 0, 0, 0, 846, 846,
	0, 0, 0, 1137, 1228, 785, 0, 846, 846, 878,
	0, 53, 0, 53, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 0, 0, 53, 0, 0, 0, 0, 0, 0,
	846, 0, 0, 0, 0, 849, 0, 879, 0, 0,
	1420, 0, 0, 0, 1228, 0, 0, 1228, 984, 985,
	986, 987, 989, 990, 0, 0, 0, 0, 0, 1556,
	1557, 0, 1574, 1575, 1576, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	980, 981, 1446, 1000, 1001, 1002, 1010, 1011, 1012, 0,
	0, 0, 0, 0, 0, 0, 1003, 0, 0, 0,
	0, 0, 0, 983, 0, 0, 1014, 0, 878, 0,
	0, 1571, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1474, 982, 0, 0, 0,
	973, 849, 997, 879, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1229, 1562, 0, 0, 846, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	1502, 0, 988, 0, 0, 1507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 878, 0, 0,
	1835, 1007, 1015, 0, 980, 981, 1841, 0, 0, 0,
	1010, 1011, 1012, 0, 1572, 0, 0, 1013, 1526, 0,
	0, 0, 0, 0, 0, 1533, 0, 983, 1537, 1005,
	1014, 0, 0, 0, 0, 998, 0, 1546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 997, 1228, 1228, 0,
	1004, 1228, 1032, 0, 0, 0, 0, 0, 1358, 1358,
	1358, 0, 0, 846, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1573, 0, 0, 53, 0, 0, 53,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 1617, 0, 0, 999, 0, 988, 0, 1556, 1557,
	522, 1574, 1575, 1576, 0, 0, 0, 0, 0, 1008,
	0, 0, 0, 0, 1896, 1007, 1015, 0, 0, 0,
	0, 0, 0, 682, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 785, 0, 0, 0, 0,
	0, 0, 0, 1005, 0, 0, 0, 0, 0, 998,
	1571, 0, 846, 0, 0, 1568, 1569, 1570, 0, 0,
	1567, 1565, 1566, 1558, 1559, 1560, 1561, 1563, 1564, 1940,
	53, 0, 0, 1006, 53, 0, 994, 995, 996, 1009,
	0, 993, 991, 992, 984, 985, 986, 987, 989, 990,
	0, 53, 0, 0, 0, 0, 0, 1925, 0, 0,
	1562, 0, 1497, 0, 1718, 0, 0, 1719, 0, 0,
	0, 0, 0, 0, 0, 1982, 0, 0, 999, 1724,
	0, 0, 0, 0, 0, 0, 0, 0, 1733, 0,
	1228, 0, 0, 1008, 0, 1577, 1737, 0, 0, 1446,
	1288, 0, 0, 0, 0, 0, 0, 0, 846, 0,
	0, 0, 0, 1572, 1753, 0, 0, 0, 1755, 0,
	1031, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1786, 1787, 0, 0, 0, 0, 1006, 0, 0,
	1793, 1794, 1795, 1009, 0, 993, 991, 992, 984, 985,
	986, 987, 989, 990, 0, 0, 0, 0, 0, 1031,
	0, 0, 1573, 0, 0, 0, 1823, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 980, 981, 0, 1000, 1001, 1002, 1010,
	1011, 1012, 0, 0, 0, 0, 0, 0, 0, 1003,
	0, 0, 0, 0, 0, 0, 983, 0, 0, 1014,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2083, 0, 0, 0, 982,
	0, 0, 0, 0, 1869, 997, 0, 0, 0, 0,
	0, 1229, 0, 0, 1568, 1569, 1570, 0, 0, 1567,
	1565, 1566, 1558, 1559, 1560, 1561, 1563, 1564, 0, 0,
	0, 0, 0, 0, 0, 0, 1897, 0, 0, 0,
	1900, 1901, 0, 0, 0, 1903, 0, 0, 0, 0,
	0, 0, 1905, 0, 1907, 988, 1137, 0, 0, 0,
	0, 1229, 1913, 0, 1229, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 1007, 1015, 0, 980, 981, 0,
	1000, 1001, 1002, 1010, 1011, 1012, 0, 0, 0, 0,
	1013, 0, 0, 1003, 0, 1922, 0, 0, 0, 0,
	983, 0, 1005, 1014, 0, 0, 0, 0, 998, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 0, 0, 0, 997,
	0, 0, 0, 1004, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1955, 0, 0, 0, 1556, 1557,
	0, 1574, 1575, 1576, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 999, 0, 988,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1991,
	1556, 1557, 1008, 1574, 1575, 1576, 0, 0, 1007, 1015,
	1571, 0, 0, 0, 0, 0, 1727, 0, 0, 2007,
	2008, 0, 0, 0, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1556, 1557, 1005, 1574, 1575, 1576,
	0, 0, 998, 53, 0, 0, 0, 0, 0, 2020,
	1726, 0, 1571, 0, 0, 0, 0, 0, 0, 0,
	1562, 0, 2024, 0, 0, 0, 1006, 1004, 0, 994,
	995, 996, 1009, 0, 993, 991, 992, 984, 985, 986,
	987, 989, 990, 0, 1229, 1229, 1571, 0, 1229, 0,
	1598, 0, 0, 0, 0, 1577, 522, 0, 785, 0,
	0, 0, 1562, 0, 0, 0, 0, 0, 0, 0,
	0, 999, 0, 1572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1008, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1562, 1577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1573, 0, 0, 0, 0, 0, 0, 1572,
	1006, 0, 0, 994, 995, 996, 1009, 0, 993, 991,
	992, 984, 985, 986, 987, 989, 990, 0, 0, 2123,
	0, 0, 0, 0, 1597, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1573, 0, 0, 0, 0, 0,
	0, 0, 2139, 2139, 0, 0, 0, 0, 0, 0,
	0, 1973, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 0, 0, 0, 0, 0, 1573, 0,
	2139, 0, 0, 0, 1568, 1569, 1570, 1229, 0, 1567,
	1565, 1566, 1558, 1559, 1560, 1561, 1563, 1564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1568, 1569, 1570, 0,
	0, 1567, 1565, 1566, 1558, 1559, 1560, 1561, 1563, 1564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1568, 1569, 1570, 0, 0, 1567, 1565, 1566, 1558, 1559,
	1560, 1561, 1563, 1564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1031, 0, 0, 0, 0,
	0, 0, 0, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 92,
	93, 332, 94, 333, 334, 335, 336, 232, 337, 338,
	339, 340, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 341, 99, 239, 240, 100, 342, 343, 241,
	242, 243, 344, 101, 244, 345, 318, 346, 102, 103,
	104, 0, 105, 347, 106, 107, 108, 348, 319, 109,
	110, 349, 350, 351, 352, 353, 354, 111, 112, 287,
	113, 245, 114, 246, 247, 355, 115, 356, 116, 357,
	358, 359, 117, 118, 360, 119, 361, 0, 362, 248,
	120, 121, 122, 249, 250, 363, 364, 365, 123, 124,
	251, 0, 125, 366, 126, 367, 368, 320, 369, 127,
	252, 370, 253, 371, 128, 129, 130, 131, 254, 255,
	322, 372, 135, 373, 132, 374, 321, 133, 256, 134,
	257, 258, 259, 375, 260, 376, 323, 136, 324, 137,
	138, 377, 140, 139, 378, 261, 325, 141, 326, 379,
	142, 380, 381, 143, 0, 144, 145, 146, 148, 262,
	147, 327, 149, 150, 152, 151, 382, 383, 384, 263,
	153, 264, 154, 155, 385, 156, 386, 387, 157, 388,
	389, 158, 265, 328, 159, 329, 266, 160, 161, 162,
	163, 390, 267, 164, 268, 165, 391, 166, 167, 168,
	169, 269, 170, 171, 392, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 393, 183, 330, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 394, 271,
	194, 195, 196, 395, 197, 187, 188, 198, 331, 199,
	272, 273, 200, 396, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 397, 207, 398, 208, 209, 210, 211,
	212, 399, 276, 277, 278, 400, 401, 213, 279, 280,
	402, 214, 215, 216, 217, 403, 404, 218, 219, 220,
	221, 405, 222, 406, 281, 223, 224, 225, 282, 283,
	407, 408, 226, 409, 410, 411, 412, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 313, 0, 0, 0, 0, 0, 0,
	1709, 0, 0, 0, 0, 0, 0, 0, 1710, 92,
	93, 332, 94, 333, 334, 335, 336, 232, 337, 338,
	339, 340, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 341, 99, 239, 240, 100, 342, 343, 241,
	242, 243, 344, 101, 244, 345, 318, 346, 102, 103,
	104, 0, 105, 347, 106, 107, 108, 348, 319, 109,
	110, 349, 350, 351, 352, 353, 354, 111, 112, 287,
	113, 245, 114, 246, 247, 355, 115, 356, 116, 357,
	358, 359, 117, 118, 360, 119, 361, 0, 362, 248,
	120, 121, 122, 249, 250, 363, 364, 365, 123, 124,
	251, 0, 125, 366, 126, 367, 368, 320, 369, 127,
	252, 370, 253, 371, 128, 129, 130, 131, 254, 255,
	322, 372, 135, 373, 132, 374, 321, 133, 256, 134,
	257, 258, 259, 375, 260, 376, 323, 136, 324, 137,
	138, 377, 140, 139, 378, 261, 325, 141, 326, 379,
	142, 380, 381, 143, 0, 144, 145, 146, 148, 262,
	147, 327, 149, 150, 152, 151, 382, 383, 384, 263,
	153, 264, 154, 155, 385, 156, 386, 387, 157, 388,
	389, 158, 265, 328, 159, 329, 266, 160, 161, 162,
	163, 390, 267, 164, 268, 165, 391, 166, 167, 168,
	169, 269, 170, 171, 392, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 393, 183, 330, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 394, 271,
	194, 195, 196, 395, 197, 187, 188, 198, 331, 199,
	272, 273, 200, 396, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 397, 207, 398, 208, 209, 210, 211,
	212, 399, 276, 277, 278, 400, 401, 213, 279, 280,
	402, 214, 215, 216, 217, 403, 404, 218, 219, 220,
	221, 405, 222, 406, 281, 223, 224, 225, 282, 283,
	407, 408, 226, 409, 410, 411, 412, 227, 228, 229,
	230, 231, 0, 0, 0, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2064, 92, 93, 332, 94, 333, 334, 335, 336, 232,
	337, 338, 339, 340, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 341, 99, 239, 240, 100, 342,
	343, 241, 242, 243, 344, 101, 244, 345, 318, 346,
	102, 103, 104, 0, 105, 347, 106, 107, 108, 348,
	319, 109, 110, 349, 350, 351, 352, 353, 354, 111,
	112, 287, 113, 245, 114, 246, 247, 355, 115, 356,
	116, 357, 358, 359, 117, 118, 360, 119, 361, 0,
	362, 248, 120, 121, 122, 249, 250, 363, 364, 365,
	123, 124, 251, 0, 125, 366, 126, 367, 368, 320,
	369, 127, 252, 370, 253, 371, 128, 129, 130, 131,
	254, 255, 322, 372, 135, 373, 132, 374, 321, 133,
	256, 134, 257, 258, 259, 375, 260, 376, 323, 136,
	324, 137, 138, 377, 140, 139, 378, 261, 325, 141,
	326, 379, 142, 380, 381, 143, 0, 144, 145, 146,
	148, 262, 147, 327, 149, 150, 152, 151, 382, 383,
	384, 263, 153, 264, 154, 155, 385, 156, 386, 387,
	157, 388, 389, 158, 265, 328, 159, 329, 266, 160,
	161, 162, 163, 390, 267, 164, 268, 165, 391, 166,
	167, 168, 169, 269, 170, 171, 392, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 393, 183,
	330, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	394, 271, 194, 195, 196, 395, 197, 187, 188, 198,
	331, 199, 272, 273, 200, 396, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 397, 207, 398, 208, 209,
	210, 211, 212, 399, 276, 277, 278, 400, 401, 213,
	279, 280, 402, 214, 215, 216, 217, 403, 404, 218,
	219, 220, 221, 405, 222, 406, 281, 223, 224, 225,
	282, 283, 407, 408, 226, 409, 410, 411, 412, 227,
	228, 229, 230, 231, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 811, 0, 0,
	92, 93, 332, 94, 333, 334, 335, 336, 232, 337,
	338, 339, 340, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 341, 99, 239, 240, 100, 342, 343,
	241, 242, 243, 344, 101, 244, 345, 318, 346, 102,
	103, 104, 0, 105, 347, 106, 107, 108, 348, 319,
	109, 110, 349, 350, 351, 352, 353, 354, 111, 112,
	287, 113, 245, 114, 246, 247, 355, 115, 356, 116,
	357, 358, 359, 117, 118, 360, 119, 361, 0, 362,
	248, 120, 121, 122, 249, 250, 363, 364, 365, 123,
	124, 251, 0, 125, 366, 126, 367, 368, 320, 369,
	127, 252, 370, 253, 371, 128, 129, 130, 131, 254,
	255, 322, 372, 135, 373, 132, 374, 321, 133, 256,
	134, 257, 258, 259, 375, 260, 376, 323, 136, 324,
	137, 138, 377, 140, 139, 378, 261, 325, 141, 326,
	379, 142, 380, 381, 143, 0, 144, 145, 146, 148,
	262, 147, 327, 149, 150, 152, 151, 382, 383, 384,
	263, 153, 264, 154, 155, 385, 156, 386, 387, 157,
	388, 389, 158, 265, 328, 159, 329, 266, 160, 161,
	162, 163, 390, 267, 164, 268, 165, 391, 166, 167,
	168, 169, 269, 170, 171, 392, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 393, 183, 330,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 394,
	271, 194, 195, 196, 395, 197, 187, 188, 198, 331,
	199, 272, 273, 200, 396, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 397, 207, 398, 208, 209, 210,
	211, 212, 399, 276, 277, 278, 400, 401, 213, 279,
	280, 402, 214, 215, 216, 217, 403, 404, 218, 219,
	220, 221, 405, 222, 406, 281, 223, 224, 225, 282,
	283, 407, 408, 226, 409, 410, 411, 412, 227, 228,
	229, 230, 231, 720, 709, 710, 707, 708, 699, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 736, 702, 0,
	0, 0, 95, 96, 97, 233, 751, 235, 752, 98,
	753, 754, 0, 99, 239, 240, 100, 705, 735, 755,
	756, 243, 0, 101, 747, 0, 728, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 319, 109,
	110, 0, 729, 731, 0, 730, 732, 111, 112, 287,
	113, 757, 114, 758, 759, 786, 115, 0, 116, 0,
	0, 0, 750, 118, 0, 119, 0, 0, 0, 693,
	120, 121, 122, 737, 738, 716, 0, 0, 123, 124,
	760, 0, 125, 0, 126, 0, 0, 320, 0, 127,
	748, 0, 253, 0, 128, 129, 130, 131, 744, 746,
	322, 0, 135, 0, 132, 0, 321, 133, 761, 134,
	762, 763, 764, 0, 727, 0, 323, 136, 324, 137,
	138, 0, 140, 139, 0, 749, 325, 141, 326, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 327, 149, 150, 152, 151, 688, 0, 717, 745,
	153, 765, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 328, 159, 329, 739, 160, 161, 162,
	163, 0, 740, 164, 268, 165, 0, 166, 167, 168,
	169, 766, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 330, 184,
	185, 694, 186, 0, 190, 191, 192, 193, 73, 271,
	194, 195, 196, 733, 197, 187, 188, 198, 331, 199,
	767, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	768, 204, 741, 0, 207, 75, 208, 209, 210, 211,
	212, 0, 276, 769, 770, 0, 0, 213, 742, 743,
	715, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 734, 222, 0, 281, 223, 224, 225, 582, 771,
	0, 0, 226, 0, 0, 0, 71, 227, 228, 229,
	230, 231, 689, 72, 0, 0, 0, 0, 687, 0,
	0, 0, 0, 685, 686, 720, 709, 710, 707, 708,
	699, 0, 695, 0, 0, 0, 0, 698, 0, 0,
	0, 92, 93, 1315, 94, 0, 0, 0, 0, 736,
	702, 0, 0, 0, 95, 96, 97, 233, 751, 235,
	752, 98, 753, 754, 0, 99, 239, 240, 100, 705,
	735, 755, 756, 243, 0, 101, 747, 0, 728, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	319, 109, 110, 0, 729, 731, 0, 730, 732, 111,
	112, 287, 113, 757, 114, 758, 759, 0, 115, 0,
	116, 0, 1316, 0, 750, 118, 0, 119, 0, 0,
	0, 693, 120, 121, 122, 737, 738, 716, 0, 0,
	123, 124, 760, 0, 125, 0, 126, 0, 0, 320,
	0, 127, 748, 0, 253, 0, 128, 129, 130, 131,
	744, 746, 322, 0, 135, 0, 132, 0, 321, 133,
	761, 134, 762, 763, 764, 0, 727, 0, 323, 136,
	324, 137, 138, 0, 140, 139, 0, 749, 325, 141,
	326, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 327, 149, 150, 152, 151, 688, 0,
	717, 745, 153, 765, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 328, 159, 329, 739, 160,
	161, 162, 163, 0, 740, 164, 268, 165, 0, 166,
	167, 168, 169, 766, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	330, 184, 185, 694, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 733, 197, 187, 188, 198,
	331, 199, 767, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 768, 204, 741, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 769, 770, 0, 0, 213,
	742, 743, 715, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 734, 222, 0, 281, 223, 224, 225,
	282, 771, 1314, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 689, 0, 0, 0, 0, 0,
	687, 0, 0, 0, 0, 685, 686, 1317, 720, 709,
	710, 707, 708, 699, 695, 1312, 0, 0, 0, 698,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 736, 702, 0, 0, 0, 95, 96, 97,
	233, 751, 235, 752, 98, 753, 754, 0, 99, 239,
	240, 100, 705, 735, 755, 756, 243, 0, 101, 747,
	0, 728, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 319, 109, 110, 0, 729, 731, 0,
	730, 732, 111, 112, 287, 113, 757, 114, 758, 759,
	0, 115, 0, 116, 0, 0, 0, 750, 118, 0,
	119, 0, 0, 0, 693, 120, 121, 122, 737, 738,
	716, 0, 0, 123, 124, 760, 0, 125, 0, 126,
	0, 0, 320, 0, 127, 748, 0, 253, 0, 128,
	129, 130, 131, 744, 746, 322, 0, 135, 0, 132,
	0, 321, 133, 761, 134, 762, 763, 764, 0, 727,
	0, 323, 136, 324, 137, 138, 0, 140, 139, 0,
	749, 325, 141, 326, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 327, 149, 150, 152,
	151, 688, 0, 717, 745, 153, 765, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 328, 159,
	329, 739, 160, 161, 162, 163, 0, 740, 164, 268,
	165, 0, 166, 167, 168, 169, 766, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 330, 184, 185, 694, 186, 0, 190,
	191, 192, 193, 73, 271, 194, 195, 196, 733, 197,
	187, 188, 198, 331, 199, 767, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 768, 204, 741, 0, 207,
	75, 208, 209, 210, 211, 212, 0, 276, 769, 770,
	0, 0, 213, 742, 743, 715, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 734, 222, 0, 281,
	223, 224, 225, 582, 771, 0, 0, 226, 0, 0,
	0, 71, 227, 228, 229, 230, 231, 689, 72, 0,
	0, 0, 0, 687, 0, 0, 0, 0, 685, 686,
	720, 709, 710, 707, 708, 699, 0, 695, 0, 0,
	0, 0, 698, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 736, 702, 0, 0, 0, 95,
	96, 97, 233, 751, 235, 752, 98, 753, 754, 1354,
	99, 239, 240, 100, 705, 735, 755, 756, 243, 0,
	101, 747, 0, 728, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 319, 109, 110, 0, 729,
	731, 0, 730, 732, 111, 112, 287, 113, 757, 114,
	758, 759, 0, 115, 0, 116, 0, 0, 0, 750,
	118, 0, 119, 0, 0, 0, 693, 120, 121, 122,
	737, 738, 716, 0, 0, 123, 124, 760, 0, 125,
	0, 126, 0, 1359, 320, 0, 127, 748, 0, 253,
	0, 128, 129, 130, 131, 744, 746, 322, 0, 135,
	0, 132, 0, 321, 133, 761, 134, 762, 763, 764,
	0, 727, 0, 323, 136, 324, 137, 138, 0, 140,
	139, 1355, 749, 325, 141, 326, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 327, 149,
	150, 152, 151, 688, 0, 717, 745, 153, 765, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	328, 159, 329, 739, 160, 161, 162, 163, 0, 740,
	164, 268, 165, 0, 166, 167, 168, 169, 766, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 330, 184, 185, 694, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	733, 197, 187, 188, 198, 331, 199, 767, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 768, 204, 741,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	769, 770, 0, 1356, 213, 742, 743, 715, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 734, 222,
	0, 281, 223, 224, 225, 282, 771, 0, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 689,
	0, 0, 0, 0, 0, 687, 0, 0, 0, 0,
	685, 686, 720, 709, 710, 707, 708, 699, 0, 695,
	0, 0, 0, 0, 698, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 736, 702, 0, 0,
	0, 95, 96, 97, 233, 751, 235, 752, 98, 753,
	754, 0, 99, 239, 240, 100, 705, 735, 755, 756,
	243, 0, 101, 747, 0, 728, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 319, 109, 110,
	0, 729, 731, 0, 730, 732, 111, 112, 287, 113,
	757, 114, 758, 759, 0, 115, 0, 116, 0, 0,
	0, 750, 118, 0, 119, 0, 0, 0, 693, 120,
	121, 122, 737, 738, 716, 0, 0, 123, 124, 760,
	0, 125, 0, 126, 0, 0, 320, 0, 127, 748,
	0, 253, 0, 128, 129, 130, 131, 744, 746, 322,
	0, 135, 0, 132, 0, 321, 133, 761, 134, 762,
	763, 764, 0, 727, 0, 323, 136, 324, 137, 138,
	0, 140, 139, 0, 749, 325, 141, 326, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	327, 149, 150, 152, 151, 688, 1649, 717, 745, 153,
	765, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 328, 159, 329, 739, 160, 161, 162, 163,
	0, 740, 164, 268, 165, 0, 166, 167, 168, 169,
	766, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 330, 184, 185,
	694, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 733, 197, 187, 188, 198, 331, 199, 767,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 768,
	204, 741, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 769, 770, 0, 0, 213, 742, 743, 715,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	734, 222, 0, 281, 223, 224, 225, 282, 771, 0,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 689, 0, 0, 0, 0, 0, 687, 0, 0,
	0, 0, 685, 686, 683, 720, 709, 710, 707, 708,
	699, 695, 0, 0, 0, 0, 698, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 736,
	702, 0, 0, 0, 95, 96, 97, 233, 751, 235,
	752, 98, 753, 754, 0, 99, 239, 240, 100, 705,
	735, 755, 756, 243, 0, 101, 747, 0, 728, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	319, 109, 110, 0, 729, 731, 0, 730, 732, 111,
	112, 287, 113, 757, 114, 758, 759, 0, 115, 0,
	116, 0, 0, 0, 750, 118, 0, 119, 0, 0,
	0, 693, 120, 121, 122, 737, 738, 716, 0, 0,
	123, 124, 760, 0, 125, 0, 126, 0, 0, 320,
	0, 127, 748, 0, 253, 0, 128, 129, 130, 131,
	744, 746, 322, 0, 135, 0, 132, 0, 321, 133,
	761, 134, 762, 763, 764, 0, 727, 0, 323, 136,
	324, 137, 138, 0, 140, 139, 0, 749, 325, 141,
	326, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 327, 149, 150, 152, 151, 688, 0,
	717, 745, 153, 765, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 328, 159, 329, 739, 160,
	161, 162, 163, 0, 740, 164, 268, 165, 0, 166,
	167, 168, 169, 766, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	330, 184, 185, 694, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 733, 197, 187, 188, 198,
	331, 199, 767, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 768, 204, 741, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 769, 770, 0, 0, 213,
	742, 743, 715, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 734, 222, 0, 281, 223, 224, 225,
	282, 771, 0, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 689, 0, 0, 0, 0, 0,
	687, 0, 0, 0, 0, 685, 686, 0, 0, 0,
	0, 0, 1037, 1307, 695, 0, 0, 0, 0, 698,
	720, 709, 710, 707, 708, 699, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 736, 702, 0, 0, 0, 95,
	96, 97, 233, 751, 235, 752, 98, 753, 754, 0,
	99, 239, 240, 100, 705, 735, 755, 756, 243, 0,
	101, 747, 0, 728, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 319, 109, 110, 0, 729,
	731, 0, 730, 732, 111, 112, 287, 113, 757, 114,
	758, 759, 0, 115, 0, 116, 0, 0, 0, 750,
	118, 0, 119, 0, 0, 0, 693, 120, 121, 122,
	737, 738, 716, 0, 0, 123, 124, 760, 0, 125,
	0, 126, 0, 0, 320, 0, 127, 748, 0, 253,
	0, 128, 129, 130, 131, 744, 746, 322, 0, 135,
	0, 132, 0, 321, 133, 761, 134, 762, 763, 764,
	0, 727, 0, 323, 136, 324, 137, 138, 0, 140,
	139, 0, 749, 325, 141, 326, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 327, 149,
	150, 152, 151, 688, 0, 717, 745, 153, 765, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	328, 159, 329, 739, 160, 161, 162, 163, 0, 740,
	164, 268, 165, 0, 166, 167, 168, 169, 766, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 330, 184, 185, 694, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	733, 197, 187, 188, 198, 331, 199, 767, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 768, 204, 741,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	769, 770, 0, 0, 213, 742, 743, 715, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 734, 222,
	0, 281, 223, 224, 225, 282, 771, 0, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 689,
	0, 0, 0, 0, 0, 687, 0, 0, 0, 0,
	685, 686, 720, 709, 710, 707, 708, 699, 0, 695,
	1783, 0, 0, 0, 698, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 736, 702, 0, 0,
	0, 95, 96, 97, 233, 751, 235, 752, 98, 753,
	754, 0, 99, 239, 240, 100, 705, 735, 755, 756,
	243, 0, 101, 747, 0, 728, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 319, 109, 110,
	0, 729, 731, 0, 730, 732, 111, 112, 287, 113,
	757, 114, 758, 759, 0, 115, 0, 116, 0, 0,
	0, 750, 118, 0, 119, 0, 0, 0, 693, 120,
	121, 122, 737, 738, 716, 0, 0, 123, 124, 760,
	0, 125, 0, 126, 0, 0, 320, 0, 127, 748,
	0, 253, 0, 128, 129, 130, 131, 744, 746, 322,
	0, 135, 0, 132, 0, 321, 133, 761, 134, 762,
	763, 764, 0, 727, 0, 323, 136, 324, 137, 138,
	0, 140, 139, 0, 749, 325, 141, 326, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	327, 149, 150, 152, 151, 688, 0, 717, 745, 153,
	765, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 328, 159, 329, 739, 160, 161, 162, 163,
	0, 740, 164, 268, 165, 0, 166, 167, 168, 169,
	766, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 330, 184, 185,
	694, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 733, 197, 187, 188, 198, 331, 199, 767,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 768,
	204, 741, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 769, 770, 0, 0, 213, 742, 743, 715,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	734, 222, 0, 281, 223, 224, 225, 282, 771, 1740,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 689, 0, 0, 0, 0, 0, 687, 0, 0,
	0, 0, 685, 686, 720, 709, 710, 707, 708, 699,
	0, 695, 0, 0, 0, 0, 698, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 736, 702,
	0, 0, 0, 95, 96, 97, 233, 751, 235, 752,
	98, 753, 754, 0, 99, 239, 240, 100, 705, 735,
	755, 756, 243, 0, 101, 747, 0, 728, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 319,
	109, 110, 0, 729, 731, 0, 730, 732, 111, 112,
	287, 113, 757, 114, 758, 759, 0, 115, 0, 116,
	0, 0, 0, 750, 118, 0, 119, 0, 0, 0,
	693, 120, 121, 122, 737, 738, 716, 0, 0, 123,
	124, 760, 0, 125, 0, 126, 0, 0, 320, 0,
	127, 748, 0, 253, 0, 128, 129, 130, 131, 744,
	746, 322, 0, 135, 0, 132, 0, 321, 133, 761,
	134, 762, 763, 764, 0, 727, 0, 323, 136, 324,
	137, 138, 0, 140, 139, 0, 749, 325, 141, 326,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 327, 149, 150, 152, 151, 688, 0, 717,
	745, 153, 765, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 328, 159, 329, 739, 160, 161,
	162, 163, 0, 740, 164, 268, 165, 0, 166, 167,
	168, 169, 766, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 330,
	184, 185, 694, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 733, 197, 187, 188, 198, 331,
	199, 767, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 768, 204, 741, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 769, 770, 0, 0, 213, 742,
	743, 715, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 734, 222, 0, 281, 223, 224, 225, 282,
	771, 0, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 689, 0, 0, 0, 0, 0, 687,
	0, 0, 0, 0, 685, 686, 720, 709, 710, 707,
	708, 699, 0, 695, 1730, 0, 0, 0, 698, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	736, 702, 0, 0, 0, 95, 96, 97, 233, 751,
	235, 752, 98, 753, 754, 0, 99, 239, 240, 100,
	705, 735, 755, 756, 243, 0, 101, 747, 0, 728,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 319, 109, 110, 0, 729, 731, 0, 730, 732,
	111, 112, 287, 113, 757, 114, 758, 759, 786, 115,
	0, 116, 0, 0, 0, 750, 118, 0, 119, 0,
	0, 0, 693, 120, 121, 122, 737, 738, 716, 0,
	0, 123, 124, 760, 0, 125, 0, 126, 0, 0,
	320, 0, 127, 748, 0, 253, 0, 128, 129, 130,
	131, 744, 746, 322, 0, 135, 0, 132, 0, 321,
	133, 761, 134, 762, 763, 764, 0, 727, 0, 323,
	136, 324, 137, 138, 0, 140, 139, 0, 749, 325,
	141, 326, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 327, 149, 150, 152, 151, 688,
	0, 717, 745, 153, 765, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 328, 159, 329, 739,
	160, 161, 162, 163, 0, 740, 164, 268, 165, 0,
	166, 167, 168, 169, 766, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 330, 184, 185, 694, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 733, 197, 187, 188,
	198, 331, 199, 767, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 768, 204, 741, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 769, 770, 0, 0,
	213, 742, 743, 715, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 734, 222, 0, 281, 223, 224,
	225, 282, 771, 0, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 689, 0, 0, 0, 0,
	0, 687, 0, 0, 0, 0, 685, 686, 720, 709,
	710, 707, 708, 699, 0, 695, 0, 0, 0, 0,
	698, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 736, 702, 0, 0, 0, 95, 96, 97,
	233, 751, 235, 752, 98, 753, 754, 0, 99, 239,
	240, 100, 705, 735, 755, 756, 243, 0, 101, 747,
	0, 728, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 319, 109, 110, 0, 729, 731, 0,
	730, 732, 111, 112, 287, 113, 757, 114, 758, 759,
	0, 115, 0, 116, 0, 0, 0, 750, 118, 0,
	119, 0, 0, 0, 693, 120, 121, 122, 737, 738,
	716, 0, 0, 123, 124, 760, 0, 125, 0, 126,
	0, 1359, 320, 0, 127, 748, 0, 253, 0, 128,
	129, 130, 131, 744, 746, 322, 0, 135, 0, 132,
	0, 321, 133, 761, 134, 762, 763, 764, 0, 727,
	0, 323, 136, 324, 137, 138, 0, 140, 139, 0,
	749, 325, 141, 326, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 327, 149, 150, 152,
	151, 688, 0, 717, 745, 153, 765, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 328, 159,
	329, 739, 160, 161, 162, 163, 0, 740, 164, 268,
	165, 0, 166, 167, 168, 169, 766, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 330, 184, 185, 694, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 733, 197,
	187, 188, 198, 331, 199, 767, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 768, 204, 741, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 769, 770,
	0, 0, 213, 742, 743, 715, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 734, 222, 0, 281,
	223, 224, 225, 282, 771, 0, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 689, 0, 0,
	0, 0, 0, 687, 0, 0, 0, 0, 685, 686,
	720, 709, 710, 707, 708, 699, 0, 695, 0, 0,
	0, 0, 698, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 736, 702, 0, 0, 0, 95,
	96, 97, 233, 751, 235, 752, 98, 753, 754, 0,
	99, 239, 240, 100, 705, 735, 755, 756, 243, 0,
	101, 747, 0, 728, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 319, 109, 110, 0, 729,
	731, 0, 730, 732, 111, 112, 287, 113, 757, 114,
	758, 759, 0, 115, 0, 116, 0, 0, 0, 750,
	118, 0, 119, 0, 0, 0, 693, 120, 121, 122,
	737, 738, 716, 0, 0, 123, 124, 760, 0, 125,
	0, 126, 0, 0, 320, 0, 127, 748, 0, 253,
	0, 128, 129, 130, 131, 744, 746, 322, 0, 135,
	0, 132, 0, 321, 133, 761, 134, 762, 763, 764,
	0, 727, 0, 323, 136, 324, 137, 138, 0, 140,
	139, 0, 749, 325, 141, 326, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 327, 149,
	150, 152, 151, 688, 0, 717, 745, 153, 765, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	328, 159, 329, 739, 160, 161, 162, 163, 0, 740,
	164, 268, 165, 0, 166, 167, 168, 169, 766, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 330, 184, 185, 694, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	733, 197, 187, 188, 198, 331, 199, 767, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 768, 204, 741,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	769, 770, 0, 0, 213, 742, 743, 715, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 734, 222,
	0, 281, 223, 224, 225, 282, 771, 0, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 689,
	0, 0, 0, 0, 0, 687, 0, 0, 0, 0,
	685, 686, 720, 709, 710, 707, 708, 699, 0, 695,
	1302, 0, 0, 0, 698, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 736, 702, 0, 0,
	0, 95, 96, 97, 233, 751, 235, 752, 98, 753,
	754, 0, 99, 239, 240, 100, 705, 735, 755, 756,
	243, 0, 101, 747, 0, 728, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 319, 109, 110,
	0, 729, 731, 0, 730, 732, 111, 112, 287, 113,
	757, 114, 758, 759, 0, 115, 0, 116, 0, 0,
	0, 750, 118, 0, 119, 0, 0, 0, 693, 120,
	121, 122, 737, 738, 716, 0, 0, 123, 124, 760,
	0, 125, 0, 126, 0, 0, 320, 0, 127, 748,
	0, 253, 0, 128, 129, 130, 131, 744, 746, 322,
	0, 135, 0, 132, 0, 321, 133, 761, 134, 762,
	763, 764, 0, 727, 0, 323, 136, 324, 137, 138,
	0, 140, 139, 0, 749, 325, 141, 326, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	327, 149, 150, 152, 151, 688, 0, 717, 745, 153,
	765, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 328, 159, 329, 739, 160, 161, 162, 163,
	0, 740, 164, 268, 165, 0, 166, 167, 168, 169,
	766, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 330, 184, 185,
	694, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 733, 197, 187, 188, 198, 331, 199, 767,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 768,
	204, 741, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 769, 770, 0, 0, 213, 742, 743, 715,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	734, 222, 0, 281, 223, 224, 225, 282, 771, 0,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 689, 0, 0, 0, 0, 0, 687, 0, 0,
	0, 0, 685, 686, 683, 720, 709, 710, 707, 708,
	699, 695, 0, 0, 0, 0, 698, 0, 0, 0,
	0, 92, 93, 962, 94, 0, 0, 0, 0, 736,
	702, 0, 0, 0, 95, 96, 97, 233, 751, 235,
	752, 98, 753, 754, 0, 99, 239, 240, 100, 705,
	735, 755, 756, 243, 0, 101, 747, 0, 728, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	319, 109, 110, 0, 729, 731, 0, 730, 732, 111,
	112, 287, 113, 757, 114, 758, 759, 0, 115, 0,
	116, 0, 0, 0, 750, 118, 0, 119, 0, 0,
	0, 693, 120, 121, 122, 737, 738, 716, 0, 0,
	123, 124, 760, 0, 125, 0, 126, 0, 0, 320,
	0, 127, 748, 0, 253, 0, 128, 129, 130, 131,
	744, 746, 322, 0, 135, 0, 132, 0, 321, 133,
	761, 134, 762, 763, 764, 0, 727, 0, 323, 136,
	324, 137, 138, 0, 140, 139, 0, 749, 325, 141,
	326, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 327, 149, 150, 152, 151, 688, 0,
	717, 745, 153, 765, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 328, 159, 329, 739, 160,
	161, 162, 163, 0, 740, 164, 268, 165, 0, 166,
	167, 168, 169, 766, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	330, 184, 185, 694, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 733, 197, 187, 188, 198,
	331, 199, 767, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 768, 204, 741, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 769, 770, 0, 0, 213,
	742, 743, 715, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 734, 222, 0, 281, 223, 224, 225,
	282, 771, 0, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 689, 0, 0, 0, 0, 0,
	687, 0, 0, 0, 0, 685, 686, 720, 709, 710,
	707, 708, 699, 0, 695, 0, 0, 0, 0, 698,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 736, 702, 0, 0, 0, 95, 96, 97, 233,
	751, 235, 752, 98, 753, 754, 0, 99, 239, 240,
	100, 705, 735, 755, 756, 243, 0, 101, 747, 0,
	728, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 319, 109, 2138, 0, 729, 731, 0, 730,
	732, 111, 112, 287, 113, 757, 114, 758, 759, 0,
	115, 0, 116, 0, 0, 0, 750, 118, 0, 119,
	0, 0, 0, 693, 120, 121, 122, 737, 738, 716,
	0, 0, 123, 124, 760, 0, 125, 0, 126, 0,
	0, 320, 0, 127, 748, 0, 253, 0, 128, 129,
	130, 131, 744, 746, 322, 0, 135, 0, 132, 0,
	321, 133, 761, 134, 762, 763, 764, 0, 727, 0,
	323, 136, 324, 137, 138, 0, 140, 139, 0, 749,
	325, 141, 326, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 327, 149, 150, 152, 151,
	688, 0, 717, 745, 153, 765, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 328, 159, 329,
	739, 160, 161, 162, 163, 0, 740, 164, 268, 165,
	0, 166, 167, 168, 169, 766, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 330, 184, 185, 694, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 733, 197, 187,
	188, 198, 331, 199, 767, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 768, 204, 741, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 769, 770, 0,
	0, 213, 742, 743, 715, 214, 215, 2137, 217, 0,
	0, 218, 219, 220, 221, 734, 222, 0, 281, 223,
	224, 225, 282, 771, 0, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 689, 0, 0, 0,
	0, 0, 687, 0, 0, 0, 0, 685, 686, 720,
	709, 710, 707, 708, 699, 0, 695, 0, 0, 0,
	0, 698, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 736, 702, 0, 0, 0, 95, 96,
	97, 2136, 751, 235, 752, 98, 753, 754, 0, 99,
	239, 240, 100, 705, 735, 755, 756, 243, 0, 101,
	747, 0, 728, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 319, 109, 2138, 0, 729, 731,
	0, 730, 732, 111, 112, 287, 113, 757, 114, 758,
	759, 0, 115, 0, 116, 0, 0, 0, 750, 118,
	0, 119, 0, 0, 0, 693, 120, 121, 122, 737,
	738, 716, 0, 0, 123, 124, 760, 0, 125, 0,
	126, 0, 0, 320, 0, 127, 748, 0, 253, 0,
	128, 129, 130, 131, 744, 746, 322, 0, 135, 0,
	132, 0, 321, 133, 761, 134, 762, 763, 764, 0,
	727, 0, 323, 136, 324, 137, 138, 0, 140, 139,
	0, 749, 325, 141, 326, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 327, 149, 150,
	152, 151, 688, 0, 717, 745, 153, 765, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 328,
	159, 329, 739, 160, 161, 162, 163, 0, 740, 164,
	268, 165, 0, 166, 167, 168, 169, 766, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 330, 184, 185, 694, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 733,
	197, 187, 188, 198, 331, 199, 767, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 768, 204, 741, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 769,
	770, 0, 0, 213, 742, 743, 715, 214, 215, 2137,
	217, 0, 0, 218, 219, 220, 221, 734, 222, 0,
	281, 223, 224, 225, 282, 771, 0, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 689, 0,
	0, 0, 0, 0, 687, 0, 0, 0, 0, 685,
	686, 720, 709, 710, 707, 708, 699, 0, 695, 0,
	0, 0, 0, 698, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 736, 702, 0, 0, 0,
	95, 96, 97, 233, 751, 235, 752, 98, 753, 754,
	0, 99, 239, 240, 100, 705, 735, 755, 756, 243,
	0, 101, 747, 0, 728, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 319, 109, 110, 0,
	729, 731, 0, 730, 732, 111, 112, 287, 113, 757,
	114, 758, 759, 0, 115, 0, 116, 0, 0, 0,
	750, 118, 0, 119, 0, 0, 0, 693, 120, 121,
	122, 737, 738, 716, 0, 0, 123, 124, 760, 0,
	125, 0, 126, 0, 0, 320, 0, 127, 748, 0,
	253, 0, 128, 129, 130, 131, 744, 746, 322, 0,
	135, 0, 132, 0, 321, 133, 761, 134, 762, 763,
	764, 0, 727, 0, 323, 136, 324, 137, 138, 0,
	140, 139, 0, 749, 325, 141, 326, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 327,
	149, 150, 152, 151, 688, 0, 717, 745, 153, 765,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 328, 159, 329, 739, 160, 161, 162, 163, 0,
	740, 164, 268, 165, 0, 166, 167, 168, 169, 766,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 330, 184, 185, 694,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 733, 197, 187, 188, 198, 331, 199, 767, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 768, 204,
	741, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 769, 770, 0, 0, 213, 742, 743, 715, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 734,
	222, 0, 281, 223, 224, 225, 282, 771, 0, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	689, 0, 0, 0, 0, 0, 687, 0, 0, 0,
	0, 685, 686, 1331, 709, 710, 707, 708, 699, 0,
	695, 0, 0, 0, 0, 698, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 736, 702, 0,
	0, 0, 95, 96, 97, 233, 751, 235, 752, 98,
	753, 754, 0, 99, 239, 240, 100, 705, 735, 755,
	756, 243, 0, 101, 747, 0, 728, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 319, 109,
	110, 0, 729, 731, 0, 730, 732, 111, 112, 287,
	113, 757, 1334, 758, 759, 0, 115, 0, 116, 0,
	0, 0, 750, 118, 0, 119, 0, 0, 0, 693,
	120, 121, 122, 737, 738, 716, 0, 0, 123, 124,
	760, 0, 125, 0, 126, 0, 0, 320, 0, 127,
	748, 0, 253, 0, 128, 129, 1335, 131, 744, 746,
	322, 0, 135, 0, 132, 0, 321, 133, 761, 134,
	762, 763, 764, 0, 727, 0, 323, 136, 324, 137,
	138, 0, 140, 139, 0, 749, 325, 141, 326, 0,
	142, 0, 0, 143, 0, 144, 1336, 1333, 148, 262,
	147, 327, 149, 150, 152, 151, 688, 0, 717, 745,
	153, 765, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 328, 159, 329, 739, 160, 161, 162,
	163, 0, 740, 164, 268, 165, 0, 166, 167, 168,
	169, 766, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 330, 184,
	185, 694, 186, 0, 190, 191, 192, 1337, 0, 271,
	194, 195, 196, 733, 197, 187, 188, 198, 331, 199,
	767, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	768, 204, 741, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 769, 770, 0, 0, 213, 742, 743,
	715, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 734, 222, 0, 281, 223, 224, 225, 282, 771,
	0, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	1332, 231, 689, 0, 0, 0, 0, 0, 687, 0,
	0, 0, 0, 685, 686, 720, 709, 710, 707, 708,
	699, 0, 695, 0, 0, 0, 0, 698, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 736,
	702, 0, 0, 0, 95, 96, 97, 233, 751, 235,
	752, 98, 753, 754, 0, 99, 239, 240, 100, 705,
	735, 755, 756, 243, 0, 101, 747, 0, 728, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	319, 109, 110, 0, 729, 731, 0, 730, 732, 111,
	112, 287, 113, 757, 114, 758, 759, 0, 115, 0,
	116, 0, 0, 0, 750, 118, 0, 119, 0, 0,
	0, 693, 120, 121, 122, 737, 738, 716, 0, 0,
	123, 124, 760, 0, 125, 0, 126, 0, 0, 320,
	0, 127, 748, 0, 253, 0, 128, 129, 130, 131,
	744, 746, 322, 0, 135, 0, 132, 0, 321, 133,
	761, 134, 762, 763, 764, 0, 727, 0, 323, 136,
	324, 137, 138, 0, 140, 139, 0, 749, 325, 141,
	326, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 327, 149, 150, 152, 151, 0, 0,
	717, 745, 153, 765, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 328, 159, 329, 739, 160,
	161, 162, 163, 0, 740, 164, 268, 165, 0, 166,
	167, 168, 169, 766, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	330, 184, 185, 1349, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 733, 197, 187, 188, 198,
	331, 199, 767, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 768, 204, 741, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 769, 770, 0, 0, 213,
	742, 743, 715, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 734, 222, 0, 281, 223, 224, 225,
	282, 771, 0, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	1347, 0, 0, 0, 0, 1345, 1346, 720, 709, 710,
	707, 708, 699, 0, 1348, 0, 0, 0, 0, 698,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 736, 702, 0, 0, 0, 95, 96, 97, 233,
	751, 235, 752, 98, 753, 754, 0, 99, 239, 240,
	100, 0, 735, 755, 756, 243, 0, 101, 747, 0,
	728, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 319, 109, 110, 0, 729, 731, 0, 730,
	732, 111, 112, 287, 113, 757, 114, 758, 759, 0,
	115, 0, 116, 0, 0, 0, 750, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 737, 738, 716,
	0, 0, 123, 124, 760, 0, 125, 0, 126, 0,
	0, 320, 0, 127, 748, 0, 253, 0, 128, 129,
	130, 131, 744, 746, 322, 0, 135, 0, 132, 0,
	321, 133, 761, 134, 762, 763, 764, 0, 727, 0,
	323, 136, 324, 137, 138, 0, 140, 139, 0, 749,
	325, 141, 326, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 327, 149, 150, 152, 151,
	0, 0, 717, 745, 153, 765, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 328, 159, 329,
	739, 160, 161, 162, 163, 0, 740, 164, 268, 165,
	0, 166, 167, 168, 169, 766, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 330, 184, 185, 1349, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 733, 197, 187,
	188, 198, 331, 199, 767, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 768, 204, 741, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 769, 770, 0,
	0, 213, 742, 743, 715, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 734, 222, 0, 281, 223,
	224, 225, 282, 771, 0, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 0, 720, 709,
	710, 707, 708, 699, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 1348, 94, 0, 0,
	0, 698, 736, 702, 0, 0, 0, 95, 96, 97,
	0, 751, 235, 752, 98, 753, 754, 0, 99, 239,
	240, 100, 705, 735, 755, 756, 243, 0, 101, 747,
	0, 728, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 319, 109, 2138, 0, 729, 731, 0,
	730, 732, 111, 112, 287, 113, 757, 114, 758, 759,
	0, 115, 0, 116, 0, 0, 0, 750, 118, 0,
	119, 0, 0, 0, 693, 120, 121, 122, 737, 738,
	716, 0, 0, 123, 124, 760, 0, 125, 0, 126,
	0, 0, 320, 0, 127, 748, 0, 253, 0, 128,
	129, 130, 131, 744, 746, 0, 0, 135, 0, 132,
	0, 321, 133, 761, 134, 762, 763, 764, 0, 727,
	0, 0, 136, 324, 137, 138, 0, 140, 139, 0,
	749, 325, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 327, 149, 150, 152,
	151, 688, 0, 717, 745, 153, 765, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 328, 159,
	329, 739, 160, 161, 162, 163, 0, 740, 164, 268,
	165, 0, 166, 167, 168, 169, 766, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 330, 184, 185, 694, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 733, 197,
	187, 188, 198, 0, 199, 767, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 768, 204, 741, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 769, 770,
	0, 0, 213, 742, 743, 715, 214, 215, 2137, 217,
	0, 0, 218, 219, 220, 221, 734, 222, 0, 281,
	223, 224, 225, 282, 771, 0, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 720, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 685, 686,
	0, 0, 0, 92, 93, 0, 94, 695, 0, 0,
	0, 736, 698, 0, 0, 0, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 0, 99, 239, 240,
	100, 0, 735, 241, 242, 243, 0, 101, 747, 0,
	728, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 319, 109, 110, 0, 729, 731, 0, 730,
	732, 111, 112, 287, 113, 245, 114, 246, 247, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 737, 738, 0,
	0, 0, 123, 124, 251, 0, 125, 0, 126, 0,
	0, 320, 0, 127, 748, 0, 253, 0, 128, 129,
	130, 131, 744, 746, 322, 0, 135, 0, 132, 0,
	321, 133, 256, 134, 257, 258, 259, 0, 260, 0,
	323, 136, 324, 137, 138, 0, 140, 139, 0, 749,
	325, 141, 326, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 327, 149, 150, 152, 151,
	0, 0, 0, 745, 153, 264, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 328, 159, 329,
	739, 160, 161, 162, 163, 0, 740, 164, 268, 165,
	0, 166, 167, 168, 169, 269, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 330, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 733, 197, 187,
	188, 198, 331, 199, 272, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 274, 204, 741, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 277, 278, 0,
	0, 213, 742, 743, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 734, 222, 0, 281, 223,
	224, 225, 282, 283, 0, 0, 226, 0, 502, 0,
	0, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 232, 0, 0, 0, 1622, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 318, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 319, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 287, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 320, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 254, 255, 322, 0, 135, 0, 132,
	0, 321, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 323, 136, 324, 137, 138, 0, 140, 139, 0,
	261, 325, 141, 326, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 327, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 328, 159,
	329, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 330, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 73, 271, 194, 195, 196, 0, 197,
	187, 188, 198, 331, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	75, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 582, 283, 0, 0, 226, 0, 0,
	0, 71, 227, 228, 229, 230, 231, 0, 72, 502,
	499, 0, 500, 495, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 70, 94, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 318, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 319, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 911, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 492, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 320, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 254, 255, 322, 0, 135, 0,
	132, 0, 321, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 323, 136, 324, 137, 138, 0, 140, 139,
	0, 261, 325, 141, 326, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 327, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 493, 0, 157, 0, 0, 158, 265, 328,
	159, 329, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 330, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 331, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 491, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 0, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 502, 499,
	0, 500, 495, 490, 0, 0, 0, 0, 0, 501,
	496, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 232, 0, 0, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 318, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 319, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 287, 113, 245, 114, 246, 247,
	908, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	492, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 320, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 254, 255, 322, 0, 135, 0, 132,
	0, 321, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 323, 136, 324, 137, 138, 0, 140, 139, 0,
	261, 325, 141, 326, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 327, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 493, 0, 157, 0, 0, 158, 265, 328, 159,
	329, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 330, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 0, 197,
	187, 188, 198, 331, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 491, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 282, 283, 0, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 502, 499, 0,
	500, 495, 490, 0, 0, 0, 0, 0, 501, 496,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 0, 99, 239, 240,
	100, 0, 0, 241, 242, 243, 0, 101, 244, 0,
	318, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 319, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 287, 113, 245, 114, 246, 247, 614,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 249, 250, 492,
	0, 0, 123, 124, 251, 0, 125, 0, 126, 0,
	0, 320, 0, 127, 252, 0, 253, 0, 128, 129,
	130, 131, 254, 255, 322, 0, 135, 0, 132, 0,
	321, 133, 256, 134, 257, 258, 259, 0, 260, 0,
	323, 136, 324, 137, 138, 0, 140, 139, 0, 261,
	325, 141, 326, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 327, 149, 150, 152, 151,
	0, 0, 0, 263, 153, 264, 154, 155, 0, 156,
	493, 0, 157, 0, 0, 158, 265, 328, 159, 329,
	266, 160, 161, 162, 163, 0, 267, 164, 268, 165,
	0, 166, 167, 168, 169, 269, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 330, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 0, 197, 187,
	188, 198, 331, 199, 272, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 277, 278, 0,
	0, 213, 279, 280, 491, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 281, 223,
	224, 225, 282, 283, 0, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 502, 499, 0, 500,
	495, 490, 0, 0, 0, 0, 0, 501, 496, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	232, 0, 0, 0, 0, 95, 96, 97, 233, 234,
	235, 236, 98, 237, 238, 0, 99, 239, 240, 100,
	0, 0, 241, 242, 243, 0, 101, 244, 0, 318,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 319, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 287, 113, 245, 114, 246, 247, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 248, 120, 121, 122, 249, 250, 492, 0,
	0, 123, 124, 251, 0, 125, 0, 126, 0, 0,
	320, 0, 127, 252, 0, 253, 0, 128, 129, 130,
	131, 254, 255, 322, 0, 135, 0, 132, 0, 321,
	133, 256, 134, 257, 258, 259, 0, 260, 0, 323,
	136, 324, 137, 138, 0, 140, 139, 0, 261, 325,
	141, 326, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 327, 149, 150, 152, 151, 0,
	0, 0, 263, 153, 264, 154, 155, 0, 156, 493,
	0, 157, 0, 0, 158, 265, 328, 159, 329, 266,
	160, 161, 162, 163, 0, 267, 164, 268, 165, 0,
	166, 167, 168, 169, 269, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 330, 184, 185, 270, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 0, 197, 187, 188,
	198, 331, 199, 272, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 274, 204, 275, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 277, 278, 0, 0,
	213, 279, 280, 491, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 281, 223, 224,
	225, 282, 283, 0, 89, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 501, 496, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 254,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 536, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 73,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 75, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 582,
	283, 0, 0, 226, 0, 89, 0, 71, 227, 228,
	229, 230, 231, 0, 72, 0, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 232,
	0, 1226, 0, 1231, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	254, 255, 0, 0, 135, 0, 132, 0, 0, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 261, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 0, 159, 0, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	73, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 75, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	582, 283, 0, 0, 226, 0, 89, 0, 71, 227,
	228, 229, 230, 231, 0, 72, 0, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	232, 0, 0, 0, 70, 95, 96, 97, 233, 234,
	235, 236, 98, 237, 238, 0, 99, 239, 240, 100,
	0, 0, 241, 242, 243, 0, 101, 244, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 287, 113, 245, 114, 246, 247, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 248, 120, 121, 122, 249, 250, 0, 0,
	0, 123, 124, 251, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 252, 0, 253, 0, 128, 129, 130,
	131, 254, 255, 0, 0, 135, 0, 132, 0, 0,
	133, 256, 134, 257, 258, 259, 0, 260, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 261, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 263, 153, 264, 154, 155, 0, 156, 0,
	536, 157, 0, 0, 158, 265, 0, 159, 0, 266,
	160, 161, 162, 163, 0, 267, 164, 268, 165, 0,
	166, 167, 168, 169, 269, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 270, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 272, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 274, 204, 275, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 277, 278, 0, 0,
	213, 279, 280, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 281, 223, 224,
	225, 282, 283, 0, 0, 226, 0, 89, 0, 0,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 232, 0, 1226, 0, 1231, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 0, 99, 239, 240,
	100, 0, 0, 241, 242, 243, 0, 101, 244, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 287, 113, 245, 114, 246, 247, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 249, 250, 0,
	0, 0, 123, 124, 251, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 252, 0, 253, 0, 128, 129,
	130, 131, 254, 255, 0, 0, 135, 0, 132, 0,
	0, 133, 256, 134, 257, 258, 259, 0, 260, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 261,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 263, 153, 264, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 0, 159, 0,
	266, 160, 161, 162, 163, 0, 267, 164, 268, 165,
	0, 166, 167, 168, 169, 269, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 272, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 277, 278, 0,
	0, 213, 279, 280, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 281, 223,
	224, 225, 282, 283, 0, 0, 226, 0, 0, 89,
	0, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 232, 0, 0, 0, 815, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 254, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 0, 0, 226, 0,
	89, 0, 0, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 232, 0, 0, 0, 1138, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 254, 255, 0, 0, 135,
	0, 132, 0, 0, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 261, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	0, 159, 0, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 0, 0, 226,
	0, 89, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 1747,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 254, 255, 0, 0,
	135, 0, 132, 0, 0, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 261, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 0, 159, 0, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 0, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	720, 709, 710, 707, 708, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 0, 94,
	782, 0, 0, 0, 232, 0, 0, 0, 0, 95,
	96, 97, 233, 751, 235, 752, 98, 753, 754, 0,
	99, 239, 240, 100, 0, 0, 755, 756, 243, 0,
	101, 244, 0, 318, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 319, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 757, 114,
	758, 759, 0, 115, 0, 116, 0, 0, 0, 750,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 716, 0, 0, 123, 124, 760, 0, 125,
	0, 126, 0, 0, 320, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 254, 255, 322, 0, 135,
	0, 132, 0, 321, 133, 761, 134, 762, 763, 764,
	0, 727, 0, 323, 136, 324, 137, 138, 0, 140,
	139, 0, 261, 325, 141, 326, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 327, 149,
	150, 152, 151, 0, 0, 717, 263, 153, 765, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	328, 159, 329, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 766, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 330, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 331, 199, 767, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 768, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	769, 770, 0, 0, 213, 279, 280, 715, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 771, 502, 499, 226,
	0, 0, 620, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 0, 99, 239, 240,
	100, 0, 0, 241, 242, 243, 0, 101, 244, 0,
	318, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 319, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 287, 113, 245, 114, 246, 247, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 249, 250, 0,
	0, 0, 123, 124, 251, 0, 125, 0, 126, 0,
	0, 320, 0, 127, 252, 0, 253, 0, 128, 129,
	130, 131, 254, 255, 322, 0, 135, 0, 132, 0,
	321, 133, 256, 134, 257, 258, 259, 0, 260, 0,
	323, 136, 324, 137, 138, 0, 140, 139, 0, 261,
	325, 141, 326, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 327, 149, 150, 152, 151,
	0, 0, 0, 263, 153, 264, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 328, 159, 329,
	266, 160, 161, 162, 163, 0, 267, 164, 268, 165,
	0, 166, 167, 168, 169, 269, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 330, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 0, 197, 187,
	188, 198, 331, 199, 272, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 277, 278, 0,
	0, 213, 279, 280, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 281, 223,
	224, 225, 282, 283, 89, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	85, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 254,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 84, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 502, 499, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 88, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 318, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 319, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 320, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 254, 255, 322, 0,
	135, 0, 132, 0, 321, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 323, 136, 324, 137, 138, 0,
	140, 139, 0, 261, 325, 141, 326, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 327,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 328, 159, 329, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 330, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 331, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 232, 0, 0, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 287, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 254, 255, 0, 0, 135, 0, 132,
	0, 0, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	261, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 0, 159,
	0, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 282, 283, 502, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 232,
	88, 0, 0, 0, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 318, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	319, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 320,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	254, 255, 322, 0, 135, 0, 132, 0, 321, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 323, 136,
	324, 137, 138, 0, 140, 139, 0, 261, 325, 141,
	326, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 327, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 328, 159, 329, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	330, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	331, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 1095, 101, 244, 0, 0, 0, 102, 103, 104,
	0, 105, 1093, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 1198, 0, 123, 124, 251,
	0, 125, 0, 126, 1098, 0, 0, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 254, 255, 0,
	0, 135, 1196, 132, 0, 0, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 261, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 0, 159, 0, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 1097, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 0,
	214, 215, 216, 217, 0, 1197, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 89,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 1095, 101,
	244, 0, 0, 1090, 102, 103, 104, 0, 105, 1093,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 1098, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 1089, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 165, 1097, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 1096, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 89, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	232, 0, 1714, 0, 0, 95, 96, 97, 233, 234,
	235, 236, 98, 237, 238, 0, 99, 239, 240, 100,
	0, 0, 241, 242, 243, 0, 101, 244, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 287, 113, 245, 114, 246, 247, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 248, 120, 121, 122, 249, 250, 0, 0,
	0, 123, 124, 251, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 252, 0, 253, 0, 128, 129, 130,
	131, 254, 255, 0, 0, 135, 0, 132, 0, 0,
	133, 256, 134, 257, 258, 259, 0, 260, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 261, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 263, 153, 264, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 0, 159, 0, 266,
	160, 161, 162, 163, 0, 267, 164, 268, 165, 0,
	166, 167, 168, 169, 269, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 270, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 272, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 274, 204, 275, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 277, 278, 0, 0,
	213, 279, 280, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 281, 223, 224,
	225, 282, 283, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 254, 255,
	0, 0, 135, 0, 132, 0, 0, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 261, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 536, 157, 0,
	0, 158, 265, 0, 159, 0, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	89, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 92, 93, 925, 94,
	0, 0, 0, 0, 232, 0, 0, 0, 0, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 254, 255, 0, 0, 135,
	0, 132, 0, 0, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 261, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	0, 159, 0, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 89, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 0, 99, 239, 240,
	100, 0, 0, 241, 242, 243, 0, 101, 244, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 287, 113, 245, 114, 246, 247, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 249, 250, 0,
	0, 0, 123, 124, 251, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 252, 0, 253, 0, 128, 129,
	130, 131, 840, 255, 0, 0, 135, 0, 132, 0,
	0, 133, 256, 134, 257, 258, 259, 0, 260, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 261,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 263, 153, 264, 154, 155, 0, 156,
	0, 536, 157, 0, 0, 158, 265, 0, 159, 0,
	266, 160, 161, 162, 163, 0, 267, 164, 268, 165,
	0, 166, 167, 168, 169, 269, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 272, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 277, 278, 0,
	0, 213, 279, 280, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 281, 223,
	224, 225, 282, 283, 89, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	92, 93, 590, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 254,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 89, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 548, 255, 0, 0,
	135, 0, 132, 0, 0, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 261, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 536, 157, 0, 0, 158,
	265, 0, 159, 0, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 232, 0, 0, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 287, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 541, 255, 0, 0, 135, 0, 132,
	0, 0, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	261, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 536, 157, 0, 0, 158, 265, 0, 159,
	0, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 282, 283, 89, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 92, 93, 417, 94, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	254, 255, 0, 0, 135, 0, 132, 0, 0, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 261, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 0, 159, 0, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 416, 0, 166,
	167, 168, 169, 269, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 254, 255, 0,
	0, 135, 0, 132, 0, 0, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 261, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 0, 159, 0, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 89,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 1395, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 89, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	232, 0, 0, 0, 0, 95, 96, 97, 233, 234,
	235, 236, 98, 237, 238, 0, 99, 239, 240, 100,
	0, 0, 241, 242, 243, 0, 101, 244, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 287, 113, 245, 114, 246, 247, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 248, 120, 121, 122, 249, 250, 0, 0,
	0, 123, 124, 251, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 252, 0, 253, 0, 128, 129, 130,
	131, 1393, 255, 0, 0, 135, 0, 132, 0, 0,
	133, 256, 134, 257, 258, 259, 0, 260, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 261, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 263, 153, 264, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 0, 159, 0, 266,
	160, 161, 162, 163, 0, 267, 164, 268, 165, 0,
	166, 167, 168, 169, 269, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 270, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 272, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 274, 204, 275, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 277, 278, 0, 0,
	213, 279, 280, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 281, 223, 224,
	225, 282, 283, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 1382, 255,
	0, 0, 135, 0, 132, 0, 0, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 261, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 0, 159, 0, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	89, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 232, 0, 0, 0, 0, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 953, 255, 0, 0, 135,
	0, 132, 0, 0, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 261, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	0, 159, 0, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 89, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 0, 99, 239, 240,
	100, 0, 0, 241, 242, 243, 0, 101, 244, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 287, 113, 245, 114, 246, 247, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 249, 250, 0,
	0, 0, 123, 124, 251, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 252, 0, 253, 0, 128, 129,
	130, 131, 254, 255, 0, 0, 135, 0, 132, 0,
	0, 133, 256, 134, 257, 258, 259, 0, 260, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 261,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 263, 153, 264, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 0, 159, 0,
	266, 160, 161, 162, 163, 0, 267, 164, 268, 165,
	0, 166, 167, 168, 169, 269, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 270, 186, 0, 431, 191,
	192, 193, 0, 271, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 272, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 277, 278, 0,
	0, 213, 279, 280, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 281, 223,
	224, 225, 282, 283, 89, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 232, 0,
	825, 0, 0, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 254,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 0, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 89, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 659, 255, 0, 0,
	135, 0, 132, 0, 0, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 261, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 0, 159, 0, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 232, 0, 0, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 287, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 654, 255, 0, 0, 135, 0, 132,
	0, 0, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	261, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 0, 159,
	0, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 282, 283, 89, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 596, 0, 101, 244, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	254, 255, 0, 0, 135, 0, 132, 0, 0, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 261, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 445, 0, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 0, 159, 0, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 442, 277, 278, 0, 0, 438,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 254, 255, 0,
	0, 135, 0, 132, 0, 0, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 261, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 445,
	0, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 0, 159, 0, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 442, 277, 278, 0, 0, 438, 279, 280, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 89,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 578, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 89, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	232, 0, 0, 0, 0, 95, 96, 97, 233, 234,
	235, 236, 98, 237, 238, 0, 99, 239, 240, 100,
	0, 0, 241, 242, 243, 0, 101, 244, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 287, 113, 245, 114, 246, 247, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 248, 120, 121, 122, 249, 250, 0, 0,
	0, 123, 124, 251, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 252, 0, 253, 0, 128, 129, 130,
	131, 575, 255, 0, 0, 135, 0, 132, 0, 0,
	133, 256, 134, 257, 258, 259, 0, 260, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 261, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 263, 153, 264, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 0, 159, 0, 266,
	160, 161, 162, 163, 0, 267, 164, 268, 165, 0,
	166, 167, 168, 169, 269, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 270, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 272, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 274, 204, 275, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 277, 278, 0, 0,
	213, 279, 280, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 281, 223, 224,
	225, 282, 283, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 572, 255,
	0, 0, 135, 0, 132, 0, 0, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 261, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 0, 159, 0, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	89, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 232, 0, 0, 0, 0, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 570, 255, 0, 0, 135,
	0, 132, 0, 0, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 261, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	0, 159, 0, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 89, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 0, 99, 239, 240,
	100, 0, 0, 241, 242, 243, 0, 101, 244, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 287, 113, 245, 114, 246, 247, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 249, 250, 0,
	0, 0, 123, 124, 251, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 252, 0, 253, 0, 128, 129,
	130, 131, 544, 255, 0, 0, 135, 0, 132, 0,
	0, 133, 256, 134, 257, 258, 259, 0, 260, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 261,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 263, 153, 264, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 0, 159, 0,
	266, 160, 161, 162, 163, 0, 267, 164, 268, 165,
	0, 166, 167, 168, 169, 269, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 272, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 277, 278, 0,
	0, 213, 279, 280, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 281, 223,
	224, 225, 282, 283, 89, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 254,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 525, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 89, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 436, 244, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 254, 255, 0, 0,
	135, 0, 132, 0, 0, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 261, 0, 141, 0, 0, 434, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 445, 0,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 0, 159, 0, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 437,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 435,
	196, 0, 197, 187, 188, 198, 0, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	442, 277, 278, 0, 0, 438, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 232, 0, 0, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 287, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 254, 255, 0, 0, 135, 0, 132,
	0, 0, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	261, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 0, 159,
	0, 266, 160, 161, 0, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 0, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 270, 0, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 282, 283, 0, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 980, 981, 0,
	1000, 1001, 1002, 1010, 1011, 1012, 0, 0, 0, 0,
	0, 0, 0, 1003, 0, 0, 0, 0, 0, 0,
	983, 0, 0, 1014, 0, 0, 0, 0, 0, 980,
	981, 0, 1000, 1001, 1002, 1010, 1011, 1012, 0, 0,
	0, 0, 0, 982, 0, 1003, 0, 0, 0, 997,
	0, 0, 983, 0, 0, 1014, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 997, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 988,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1556,
	1557, 0, 1574, 1575, 1576, 0, 0, 0, 1007, 1015,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 988, 0, 0, 1013, 0, 0, 980, 981, 0,
	1000, 1001, 1002, 1010, 1011, 1012, 1005, 0, 0, 0,
	1007, 1015, 998, 1003, 0, 0, 0, 0, 0, 0,
	983, 1571, 0, 1014, 0, 0, 1013, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1004, 1005, 0,
	0, 0, 0, 982, 998, 0, 0, 0, 0, 997,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1004,
	0, 1562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 999, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1008, 0, 0, 988,
	0, 0, 0, 0, 0, 0, 1577, 0, 0, 0,
	0, 0, 0, 999, 0, 0, 0, 0, 1007, 1015,
	0, 0, 0, 0, 1572, 0, 0, 0, 1008, 0,
	0, 0, 0, 0, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1005, 0, 0, 0,
	0, 0, 998, 0, 0, 0, 0, 0, 0, 0,
	1006, 0, 0, 994, 995, 996, 1009, 0, 993, 991,
	992, 984, 985, 986, 987, 989, 990, 1004, 0, 0,
	0, 0, 0, 0, 1596, 0, 0, 0, 0, 0,
	0, 0, 1006, 1573, 0, 994, 995, 996, 1009, 0,
	993, 991, 992, 984, 985, 986, 987, 989, 990, 0,
	0, 0, 0, 0, 0, 0, 1548, 0, 0, 0,
	0, 999, 980, 981, 0, 1000, 1001, 1002, 1010, 1011,
	1012, 0, 0, 0, 0, 0, 1008, 0, 1003, 0,
	0, 0, 0, 0, 0, 983, 980, 981, 1014, 1000,
	1001, 1002, 1010, 1011, 1012, 0, 0, 0, 0, 0,
	0, 0, 1003, 0, 0, 0, 0, 0, 982, 983,
	0, 0, 1014, 0, 997, 1568, 1569, 1570, 0, 0,
	1567, 1565, 1566, 1558, 1559, 1560, 1561, 1563, 1564, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 997, 0,
	1006, 0, 0, 994, 995, 996, 1009, 0, 993, 991,
	992, 984, 985, 986, 987, 989, 990, 0, 0, 0,
	0, 2076, 0, 0, 988, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1007, 1015, 0, 0, 0, 988, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1013,
	0, 0, 0, 0, 0, 0, 0, 1007, 1015, 0,
	0, 1005, 0, 0, 0, 0, 0, 998, 0, 0,
	0, 0, 0, 1013, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1005, 0, 0, 0, 0,
	0, 998, 1004, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1004, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 999, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1008, 0, 0, 0, 0, 0, 0, 0, 0,
	999, 980, 981, 0, 1000, 1001, 1002, 1010, 1011, 1012,
	0, 0, 0, 0, 0, 1008, 0, 1003, 0, 0,
	0, 0, 0, 0, 983, 0, 0, 1014, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 997, 0, 1006, 0, 0, 994, 995,
	996, 1009, 0, 993, 991, 992, 984, 985, 986, 987,
	989, 990, 0, 0, 0, 0, 2074, 0, 0, 1006,
	0, 0, 994, 995, 996, 1009, 0, 993, 991, 992,
	984, 985, 986, 987, 989, 990, 0, 0, 0, 0,
	2019, 0, 0, 988, 0, 980, 981, 0, 1000, 1001,
	1002, 1010, 1011, 1012, 0, 0, 0, 0, 0, 0,
	0, 1003, 1007, 1015, 0, 0, 0, 0, 983, 0,
	0, 1014, 0, 0, 0, 0, 0, 0, 1013, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1005, 982, 0, 0, 0, 0, 998, 997, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1004, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 988, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 999, 1007, 1015, 0, 980,
	981, 0, 1000, 1001, 1002, 1010, 1011, 1012, 0, 0,
	1008, 0, 1013, 0, 0, 1003, 0, 0, 0, 0,
	0, 0, 983, 0, 1005, 1014, 0, 0, 0, 0,
	998, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 997, 0, 0, 0, 1004, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1006, 0, 0, 994, 995, 996,
	1009, 0, 993, 991, 992, 984, 985, 986, 987, 989,
	990, 0, 0, 0, 0, 2014, 0, 0, 0, 999,
	0, 988, 0, 980, 981, 0, 1000, 1001, 1002, 1010,
	1011, 1012, 0, 0, 1008, 0, 0, 0, 0, 1003,
	1007, 1015, 0, 0, 0, 0, 983, 0, 0, 1014,
	0, 0, 0, 0, 0, 0, 1013, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1005, 982,
	0, 0, 0, 0, 998, 997, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1006, 1004,
	0, 994, 995, 996, 1009, 0, 993, 991, 992, 984,
	985, 986, 987, 989, 990, 0, 0, 0, 0, 2010,
	0, 0, 0, 0, 0, 988, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 999, 1007, 1015, 0, 980, 981, 0,
	1000, 1001, 1002, 1010, 1011, 1012, 0, 0, 1008, 0,
	1013, 0, 0, 1003, 0, 0, 0, 0, 0, 0,
	983, 0, 1005, 1014, 0, 0, 0, 0, 998, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 0, 0, 0, 997,
	0, 0, 0, 1004, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1006, 0, 0, 994, 995, 996, 1009, 0,
	993, 991, 992, 984, 985, 986, 987, 989, 990, 0,
	0, 0, 0, 1949, 0, 0, 0, 999, 0, 988,
	0, 980, 981, 0, 1000, 1001, 1002, 1010, 1011, 1012,
	0, 0, 1008, 0, 0, 0, 0, 1003, 1007, 1015,
	0, 0, 0, 0, 983, 0, 0, 1014, 0, 0,
	0, 0, 0, 0, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1005, 982, 0, 0,
	0, 0, 998, 997, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1006, 1004, 0, 994,
	995, 996, 1009, 0, 993, 991, 992, 984, 985, 986,
	987, 989, 990, 0, 0, 0, 0, 1927, 0, 0,
	0, 0, 0, 988, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 999, 1007, 1015, 0, 980, 981, 0, 1000, 1001,
	1002, 1010, 1011, 1012, 0, 0, 1008, 0, 1013, 0,
	0, 1003, 0, 0, 0, 0, 0, 0, 983, 0,
	1005, 1014, 0, 0, 0, 0, 998, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 982, 0, 0, 0, 0, 0, 997, 0, 0,
	0, 1004, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1006, 0, 0, 994, 995, 996, 1009, 0, 993, 991,
	992, 984, 985, 986, 987, 989, 990, 0, 0, 0,
	0, 1926, 0, 0, 0, 999, 0, 988, 0, 980,
	981, 0, 1000, 1001, 1002, 1010, 1011, 1012, 0, 0,
	1008, 0, 0, 0, 0, 1003, 1007, 1015, 0, 0,
	0, 0, 983, 0, 0, 1014, 0, 0, 0, 0,
	0, 0, 1013, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1005, 982, 0, 0, 0, 0,
	998, 997, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1006, 1004, 0, 994, 995, 996,
	1009, 0, 993, 991, 992, 984, 985, 986, 987, 989,
	990, 0, 0, 0, 0, 1816, 0, 0, 0, 0,
	0, 988, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 999,
	1007, 1015, 0, 980, 981, 0, 1000, 1001, 1002, 1010,
	1011, 1012, 0, 0, 1008, 0, 1013, 0, 0, 1003,
	0, 0, 0, 0, 0, 0, 983, 0, 1005, 1014,
	0, 0, 0, 0, 998, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 997, 0, 0, 0, 1004,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1006, 0,
	0, 994, 995, 996, 1009, 0, 993, 991, 992, 984,
	985, 986, 987, 989, 990, 0, 0, 0, 0, 1750,
	0, 0, 0, 999, 0, 988, 0, 980, 981, 0,
	1000, 1001, 1002, 1010, 1011, 1012, 0, 0, 1008, 0,
	0, 0, 0, 1003, 1007, 1015, 0, 0, 0, 0,
	983, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	1013, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1005, 982, 0, 0, 0, 0, 998, 997,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1006, 1004, 0, 994, 995, 996, 1009, 0,
	993, 991, 992, 984, 985, 986, 987, 989, 990, 0,
	0, 0, 0, 1734, 0, 0, 0, 0, 0, 988,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 999, 1007, 1015,
	0, 980, 981, 0, 1000, 1001, 1002, 1010, 1011, 1012,
	0, 0, 1008, 0, 1013, 0, 0, 1003, 0, 0,
	0, 0, 0, 0, 983, 0, 1005, 1014, 0, 0,
	0, 0, 998, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 997, 0, 0, 0, 1004, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1006, 0, 0, 994,
	995, 996, 1009, 0, 993, 991, 992, 984, 985, 986,
	987, 989, 990, 0, 0, 0, 0, 1687, 0, 0,
	0, 999, 0, 988, 0, 980, 981, 0, 1000, 1001,
	1002, 1010, 1011, 1012, 0, 0, 1008, 0, 0, 0,
	0, 1003, 1007, 1015, 0, 0, 0, 0, 983, 0,
	0, 1014, 0, 0, 0, 0, 0, 0, 1013, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1005, 982, 0, 0, 0, 0, 998, 997, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1006, 1004, 0, 994, 995, 996, 1009, 0, 993, 991,
	992, 984, 985, 986, 987, 989, 990, 0, 0, 0,
	0, 1303, 0, 0, 0, 0, 0, 988, 2159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 999, 1007, 1015, 0, 980,
	981, 0, 1000, 1001, 1002, 1010, 1011, 1012, 0, 0,
	1008, 0, 1013, 0, 0, 1003, 0, 0, 0, 0,
	0, 0, 983, 0, 1005, 1014, 0, 0, 0, 0,
	998, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 997, 0, 0, 0, 1004, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2158,
	0, 0, 0, 0, 1006, 0, 0, 994, 995, 996,
	1009, 0, 993, 991, 992, 984, 985, 986, 987, 989,
	990, 0, 0, 1523, 0, 0, 0, 0, 0, 999,
	0, 988, 0, 1588, 0, 0, 1587, 0, 0, 0,
	0, 0, 0, 0, 1008, 0, 0, 0, 0, 0,
	1007, 1015, 0, 980, 981, 0, 1000, 1001, 1002, 1010,
	1011, 1012, 0, 0, 0, 0, 1013, 0, 0, 1003,
	0, 0, 0, 0, 1218, 0, 983, 0, 1005, 1014,
	0, 0, 0, 0, 998, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 997, 0, 0, 1006, 1004,
	0, 994, 995, 996, 1009, 0, 993, 991, 992, 984,
	985, 986, 987, 989, 990, 0, 0, 0, 0, 0,
	0, 0, 0, 1219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1018, 0, 999, 0, 988, 0, 980, 981, 0,
	1000, 1001, 1002, 1010, 1011, 1012, 0, 0, 1008, 0,
	0, 0, 0, 1003, 1007, 1015, 0, 1017, 0, 0,
	983, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	1013, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1005, 982, 0, 0, 0, 0, 998, 997,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1006, 1004, 0, 994, 995, 996, 1009, 0,
	993, 991, 992, 984, 985, 986, 987, 989, 990, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 988,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 999, 1007, 1015,
	0, 980, 981, 0, 1000, 1001, 1002, 1010, 1011, 1012,
	0, 0, 1008, 0, 1013, 0, 0, 1003, 0, 0,
	0, 0, 0, 0, 983, 0, 1005, 1014, 0, 0,
	0, 0, 998, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 997, 0, 0, 0, 1004, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1006, 0, 0, 994,
	995, 996, 1009, 0, 993, 991, 992, 984, 985, 986,
	987, 989, 990, 0, 0, 0, 0, 0, 0, 0,
	0, 999, 0, 988, 0, 980, 981, 0, 1000, 1001,
	1002, 1010, 1011, 1012, 0, 0, 1008, 0, 0, 0,
	0, 1003, 1007, 1015, 0, 0, 0, 0, 983, 0,
	0, 1014, 0, 0, 0, 0, 0, 0, 1013, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1005, 982, 0, 0, 0, 0, 998, 997, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1006, 1004, 520, 994, 995, 996, 1009, 0, 993, 991,
	992, 984, 985, 986, 987, 989, 990, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 988, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 999, 1007, 1015, 0, 980,
	981, 0, 1000, 1001, 1002, 1010, 1011, 1012, 0, 0,
	1008, 0, 1013, 0, 0, 1003, 0, 0, 0, 0,
	0, 0, 983, 0, 1005, 1014, 0, 0, 0, 0,
	998, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 997, 0, 0, 0, 1004, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1006, 0, 0, 994, 995, 996,
	1009, 0, 993, 991, 992, 984, 985, 986, 987, 989,
	990, 0, 0, 0, 0, 0, 0, 0, 0, 999,
	0, 988, 0, 0, 0, 0, 1594, 0, 0, 0,
	0, 0, 0, 0, 1008, 0, 0, 0, 0, 0,
	1007, 1015, 0, 980, 981, 0, 1000, 1001, 1002, 1010,
	1011, 1012, 0, 0, 0, 0, 1013, 1738, 0, 1003,
	0, 0, 0, 1589, 0, 0, 983, 0, 1005, 1014,
	0, 0, 0, 0, 998, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 997, 0, 0, 1006, 1004,
	0, 994, 995, 996, 1009, 0, 993, 991, 992, 984,
	985, 986, 987, 989, 990, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 999, 0, 988, 0, 980, 981, 0,
	1000, 1001, 1002, 1010, 1011, 1012, 0, 0, 1008, 0,
	0, 0, 0, 1003, 1007, 1015, 0, 0, 0, 0,
	983, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	1013, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1005, 982, 0, 0, 0, 0, 998, 997,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1006, 1004, 0, 994, 995, 996, 1009, 0,
	993, 991, 992, 984, 985, 986, 987, 989, 990, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 988,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 999, 1007, 1015,
	0, 980, 981, 0, 1000, 1001, 1002, 1010, 1011, 1012,
	0, 0, 1008, 0, 1013, 0, 0, 1003, 0, 0,
	0, 1547, 0, 0, 983, 0, 1005, 1014, 0, 0,
	0, 0, 998, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 997, 0, 0, 0, 1004, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1554,
	0, 0, 0, 0, 0, 0, 1006, 0, 0, 994,
	995, 996, 1009, 0, 993, 991, 992, 984, 985, 986,
	987, 989, 990, 0, 0, 0, 0, 0, 0, 0,
	0, 999, 0, 988, 0, 980, 981, 0, 1000, 1001,
	1002, 1010, 1011, 1012, 0, 0, 1008, 0, 0, 0,
	0, 1003, 1007, 1015, 0, 0, 0, 0, 983, 0,
	0, 1014, 0, 0, 0, 0, 0, 0, 1013, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1005, 982, 0, 0, 0, 0, 998, 997, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1006, 1004, 0, 994, 995, 996, 1009, 0, 993, 991,
	992, 984, 985, 986, 987, 989, 990, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 988, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 999, 1007, 1015, 0, 980,
	981, 0, 1000, 1001, 1002, 1010, 1011, 1012, 0, 0,
	1008, 0, 1013, 0, 0, 1003, 0, 0, 0, 0,
	0, 0, 983, 0, 1005, 1014, 0, 0, 0, 0,
	998, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 997, 0, 0, 0, 1004, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1006, 0, 0, 994, 995, 996,
	1009, 0, 993, 991, 992, 984, 985, 986, 987, 989,
	990, 0, 0, 0, 0, 0, 0, 0, 0, 999,
	0, 988, 0, 980, 981, 0, 1000, 1001, 1002, 1010,
	1011, 1012, 0, 0, 1008, 0, 0, 0, 0, 0,
	1007, 1015, 0, 0, 0, 0, 983, 980, 981, 1014,
	1000, 1001, 1002, 1010, 1011, 1012, 1013, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1005, 982,
	983, 0, 0, 1014, 998, 997, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 0, 0, 1006, 997,
	0, 994, 995, 996, 1009, 0, 993, 991, 992, 984,
	985, 986, 987, 989, 990, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 988, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 999, 1007, 1015, 0, 0, 0, 988,
	0, 0, 0, 0, 0, 0, 0, 0, 1008, 0,
	1013, 0, 0, 0, 0, 0, 0, 0, 1007, 1015,
	0, 0, 1005, 0, 0, 0, 0, 0, 998, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1005, 0, 0, 0,
	0, 0, 998, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1006, 0, 0, 994, 995, 996, 1009, 0,
	993, 991, 992, 984, 985, 986, 987, 989, 990, 0,
	0, 0, 0, 0, 0, 0, 0, 999, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1008, 0, 0, 0, 0, 0, 0, 0,
	0, 999, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1008, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 859, 884, 851, 875, 874, 0, 0, 853,
	852, 0, 0, 0, 886, 885, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1006, 0, 0, 994,
	995, 996, 1009, 0, 993, 991, 992, 984, 985, 986,
	987, 989, 990, 0, 0, 0, 880, 0, 872, 871,
	1006, 0, 0, 994, 995, 996, 1009, 870, 993, 991,
	992, 984, 985, 986, 987, 989, 990, 0, 0, 867,
	859, 884, 851, 875, 874, 869, 0, 853, 852, 0,
	447, 0, 886, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 862, 861, 863, 864, 865, 0, 883,
	452, 0, 0, 0, 880, 0, 872, 871, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 0, 0, 0,
	453, 0, 0, 0, 855, 454, 0, 0, 0, 0,
	459, 460, 0, 869, 468, 0, 873, 0, 0, 0,
	860, 0, 0, 0, 0, 0, 450, 455, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 862, 861, 863, 864, 865, 868, 883, 471, 0,
	1237, 1235, 1236, 1239, 1238, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 456, 0, 0, 0,
	0, 0, 855, 0, 856, 0, 0, 0, 0, 0,
	457, 458, 0, 0, 873, 866, 857, 0, 860, 0,
	0, 0, 0, 0, 0, 888, 0, 461, 0, 0,
	0, 0, 0, 0, 0, 854, 0, 463, 881, 882,
	0, 0, 0, 0, 868, 0, 0, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 887, 0, 0, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 866, 857, 462, 0, 0, 0, 0,
	0, 0, 0, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 854, 0, 0, 881, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 464,
	449, 0, 0, 0, 0, 0, 0, 858, 0, 0,
	0, 0, 887, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 465, 0, 470, 0, 0, 0, 466,
	0, 0, 0, 0, 467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 469,
}
var sqlPact = [...]int{

	165, -1000, 47, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 770, 16840, 16840, 20998, -1000, -1000, -1000, -1000,
	-1000, -1000, 848, 767, 2317, 5230, 20998, 20998, 20701, 1347,
	1347, 22483, -1000, -1000, 26047, -1000, 30256, 581, 591, 581,
	581, 601, 22483, 1102, 698, 13832, 791, 158, -1000, 891,
	35, 25750, 20998, 1527, 45, 18919, 365, 165, 20404, 25453,
	20998, 20107, 660, 43, 17434, 20998, -1000, 50, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1362, 366, 50, -1000, 1360, 1236,
	1233, 18919, 25156, 24859, 24562, 24265, -1000, 12594, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 854, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 373, 372, -1000, 19810, -1000, 1041, -1000,
	44, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1028,
	-1000, 20998, -1000, -1000, 23968, 23671, 752, 371, 976, -1000,
	-1000, 594, 480, -1000, -1000, 13523, 70, -1000, -1000, -1000,
	-1000, 1550, 16543, 898, 1356, -1000, 1025, 1353, 1352, 1341,
	1339, 1335, -1000, 801, -1000, 1334, 478, 865, 555, -1000,
	1328, 1326, 976, -1000, 976, -1000, -1000, -1000, 658, 22483,
	-1000, -1000, -1000, -1000, -1000, 18919, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1719, -1000, -1000, -1000,
	-1000, 1754, -1000, -1000, -1000, -1000, 23374, 20998, 20998, 1251,
	23077, -1000, 891, -1000, -1000, -1000, 1162, 1525, 1525, 1525,
	1590, 193, 185, 158, 40, 20998, -1000, 369, 40, 9418,
	9418, -1000, -1000, 365, -1000, 403, 15937, -1000, 8452, -1000,
	830, 1435, 504, 856, 1431, -141, 844, 840, 1430, 16543,
	17434, 43, 42, -1000, -1000, -1000, 4921, 16543, 733, 15033,
	50, -1000, -1000, -1000, 18919, 20998, 20998, 759, 22780, -1000,
	1429, 139, 1417, -1000, 124, 1416, -1000, 124, 1415, 39,
	-1000, -1000, 365, 19513, 20998, 1660, 30212, -1000, 10707, -1000,
	-1000, 16840, 2052, 16840, -1000, -1000, 1659, -1000, 20998, 10707,
	41, -1000, -1000, -1000, -1000, 1158, 1224, 606, 13214, 12905,
	1484, 794, -1000, -1000, -1000, 67, 5230, 750, -1000, -1000,
	-1000, 19216, -1000, -1000, 20998, 1373, 16840, 20998, 20998, 20998,
	20998, 20998, -1000, -1000, 20998, -1000, 1141, -1000, -1000, 20998,
	20998, 832, 695, -1000, 41, -1000, 22483, -1000, 144, -1000,
	-1000, -1000, -1000, 364, 1112, 489, 161, 22186, 489, 1109,
	-1000, 1162, -1000, 1046, 1241, 9741, 1190, 10707, 158, -1000,
	-1000, 158, 158, 10707, -1000, -1000, 20998, 40, 1656, 20998,
	140, -1000, 28857, -1000, -1000, 10707, 10707, 10707, 10707, 10707,
	970, 395, -1000, 362, 361, 6184, -1000, -1000, 1753, -1000,
	-1000, -1000, 191, -1000, -1000, 10707, 50, -1000, -1000, -1000,
	-1000, 360, 1775, -1000, 473, -1000, -1000, -1000, 485, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1368, 359,
	357, -1000, -1000, -1000, -1000, 353, 352, 351, 350, 346,
	343, 342, 341, 338, 333, 324, 321, 319, 316, 315,
	912, -1000, 517, -1000, -1000, 517, 517, -1000, 311, 311,
	312, -1000, -1000, -1000, -1000, 311, -1000, -1000, -1000, 471,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 313, 140, -1000,
	-1000, -1000, 20998, 23, -1000, 29665, -1000, 21, 885, -1000,
	18325, 1568, 1563, 1510, 18919, 1622, 35, 1325, 1613, 35,
	1322, 655, 20998, 20998, 642, 641, 18919, 454, -1000, 20998,
	-1000, -1000, 24, -1000, -1000, 1321, 19, -1000, -1000, 503,
	159, 1655, 159, 15335, -1000, 20998, 20998, -1000, 20998, -1000,
	-1000, 20998, -1000, 20998, 20998, -1000, 20998, 155, 17731, 831,
	1413, 819, 35, 17, -1000, 1673, -1000, -1000, -1000, -1000,
	149, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 312,
	912, 311, 311, 311, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 471, -1000, -1000, 517, 517, 517, -1000, -1000, 11,
	29665, 638, -1000, 1317, 577, -1000, 463, 4, 976, 954,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 38, -1000, -1000,
	38, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1774, 5230, -1000, -1000, -1000, -1000, -1000, -1000, 20998, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 20998,
	20998, 20998, -1000, -1000, 18919, 18028, 1653, 1412, 941, -1000,
	1646, 20998, 1023, 1108, -1000, 614, 1409, -1000, -1000, -1000,
	-1000, 29665, -1000, 394, -1000, -1000, 29665, 914, 1239, -1000,
	1239, 30, -1000, 28753, -1000, 309, 3, 503, 9418, 14732,
	30144, 30212, 5230, 678, 10707, 10707, 10707, 10707, 10707, 10707,
	10707, 10707, 10707, 10707, 10707, 10707, 10707, 10707, 10707, 10707,
	10707, 10707, 10707, 10707, 10707, 10707, 1020, 10707, 637, 10707,
	10707, 10707, 10707, 2038, 950, 281, 1113, 5230, -1000, -1000,
	1706, 1706, 1706, 29893, 29893, 291, 395, -1000, 10707, -1000,
	9096, 185, 28277, 26, -1000, -1000, -1000, 7151, 514, 29665,
	50, 5861, -1000, 1752, 706, 1380, 1296, 306, 184, 183,
	10707, 10707, 11029, 11029, 10707, 11351, 10707, 10707, 6506, 10707,
	10707, 10707, 10707, 10707, 10707, -1000, 304, -1000, -1000, -1000,
	-1000, 1750, -1000, -1000, 1749, -1000, 675, 674, 1746, 503,
	182, 8452, -1000, 831, 20998, 20998, 20998, -1000, -1000, 1105,
	21889, 1095, 30212, 20998, -1000, 303, 301, 1211, 1194, 20998,
	20998, 21592, 21295, 20998, 817, 35, -1000, 293, 35, -1000,
	288, 20998, 829, -1000, 20998, 20998, 816, 1279, 1053, -1000,
	490, 16543, 728, 1316, 20998, 807, 10707, 946, -1000, 14431,
	523, 20998, 807, 126, -1000, -1000, -1000, 447, 20998, -1000,
	-1000, -1000, 139, -1000, 124, 124, -1000, -1000, 18919, -1000,
	-1000, -1000, -1000, -1000, -1000, 30212, 393, 337, -1000, 1745,
	634, -1000, 630, 627, 624, -1000, 287, -1000, 10707, 20998,
	20998, 1229, -1000, -1000, -1000, 811, -1000, 902, -1000, 13832,
	-1000, 15, -1000, -1000, -1000, 454, -1000, 180, -1, 25,
	30212, -1000, -1000, -1000, -1000, -1000, 20998, 355, 20998, 35,
	20998, -1000, 1773, 35, 20998, 1405, 1444, 440, 20998, 914,
	-1000, 10707, 1744, -1000, -1000, -1000, 10707, -1000, -1000, -1000,
	35, -1000, 1292, -1000, -60, 1272, 1018, -142, 187, 431,
	-1000, 14130, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 470, 952, 952, 645, 645, 645, 645, 1663,
	336, 2854, 2741, 3324, 3324, 3324, 897, 254, 254, 3324,
	3324, 3324, 29893, 29789, 409, 10707, 10707, 623, 944, 281,
	409, 10707, 409, 409, 409, 409, -1000, 2103, -1000, -1000,
	-1000, -1000, 1309, 280, 11351, 11351, -1000, -1000, -1000, 6184,
	11673, -1000, -1000, -1000, -1000, -1000, 278, 10707, -1000, 28401,
	-175, -2, -1000, -1000, 10707, -17, -95, -1000, -1000, 722,
	-1000, 10707, -1000, -14, 10707, 10707, 10707, 178, 176, -1000,
	973, 275, 274, 10707, -1000, -1000, 29561, 26679, 172, 1307,
	-123, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 171, 170,
	29437, -123, 169, 2556, -1000, 11351, 11351, 11351, 6184, 273,
	168, 28629, -123, 29333, 8774, 8774, 8774, 166, 29209, 10707,
	-123, 26647, 3797, 3673, -6, -7, -8, 1736, -12, 163,
	461, 458, 156, 1292, -1000, -1000, -1000, -1000, 618, 616,
	1403, -1000, 1080, -1000, 527, -1000, 789, 10707, 12293, 272,
	269, 918, -1000, 1402, 1007, 1399, 1007, -1000, 21, 823,
	-1000, 10707, -1000, 10707, -1000, 615, -1000, -1000, 610, 490,
	1306, 705, -1000, 1001, -1000, -1000, 725, -1000, -1000, 6828,
	29665, -1000, 807, 1530, -13, -1000, -1000, -1000, 503, 15335,
	14732, 8452, -23, -1000, -1000, -1000, 831, -1000, 588, 1735,
	153, 1126, 978, 896, 782, 1734, 29665, 15, 15, -1000,
	-1000, -1000, -1000, -1000, 20998, -1000, 1253, -1000, 18028, 265,
	20998, 263, -1000, 260, -1000, -1000, 243, 20998, 1164, 440,
	17137, -1000, 489, 1004, 28173, -1000, 151, 1287, 1578, -1000,
	14732, 1227, 1226, 14732, 1119, 980, 980, 980, -1000, 242,
	160, 391, 431, 4289, 10707, 18622, 986, 82, 150, 1272,
	10707, 409, 409, 10707, 11351, 11351, -1000, 409, -1000, -1000,
	-1000, -1000, -1000, 1305, 240, 10707, 30212, 3944, 3910, -25,
	-1000, 8130, 7, -1000, 10707, -1000, 28049, -1000, -1000, 209,
	1441, -1000, 10707, 29085, 141, 7808, -1000, 28981, -24, -24,
	-1000, 1771, -1000, 15636, 506, 998, 27945, 30144, 30212, -1000,
	10707, -1000, -1000, 1303, 10707, -1000, 30144, 30212, 11351, 11351,
	11351, 11351, 11351, 11351, 11351, 11351, 11351, 11351, 11351, 11351,
	11351, 11351, 11351, 11351, 11351, 11351, 11351, 1144, 11351, 1700,
	1700, 1700, 6, 7486, -1000, 1350, 1303, 10707, 10707, 30212,
	136, 134, 121, -1000, 10707, -123, 10707, 10707, 10707, -1000,
	-1000, -1000, 118, -1000, 1732, -1000, -1000, -1000, -1000, 1287,
	20998, 20998, 20998, 1395, -1000, 2217, -1000, 27821, -29, -1000,
	335, 1545, 10707, -1000, -1000, 235, 12293, 20998, -1000, 1161,
	1295, 565, 20998, -1000, 20998, -1000, 20998, 20998, 20998, -30,
	-31, 20998, 20998, -1000, 16543, 665, 231, -1000, -48, -1000,
	-1000, 264, 35, 807, -1000, -56, -1000, 442, -1000, 390,
	385, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 116,
	-1000, -1000, 1259, -1000, 12293, 230, 20998, 18028, 1645, 12293,
	1019, 1167, 440, 17137, -1000, 614, -1000, -1000, -1000, 499,
	10707, 10707, 1272, 14732, 14732, 1388, 1217, 14732, -1000, -1000,
	-1000, -1000, 384, 379, 383, 12594, 431, 18622, -1000, 1731,
	1237, -35, -1000, -1000, 20998, 229, -1000, 431, 1677, 409,
	3868, 3428, 10707, 30212, 29917, -37, 10707, 10707, -1000, -46,
	-1000, 10707, 380, 29665, -1000, -1000, -1000, 29665, 10707, 1708,
	10707, 111, 110, 109, -1000, -1000, -1000, 26344, 10707, 99,
	-1000, 96, 95, 29665, 1350, 29665, -1000, -1000, 427, 427,
	731, 731, 731, 731, 1700, 1069, 262, 1031, 983, 983,
	983, 207, 538, 538, 983, 983, 983, 1302, 1151, 226,
	26759, 10707, -51, -1000, -1000, -1000, 29665, 29665, 94, -1000,
	-1000, -1000, -123, 3200, 27717, 27593, -1000, 81, 499, -1000,
	-1000, -1000, 20998, -1000, 20998, -1000, 5230, 20998, 1299, 1065,
	-1000, -1000, 1192, 223, 11351, 20998, -1000, 910, 12293, 1515,
	50, 5230, 1515, 27489, 5861, -55, -59, 1060, -1000, 1059,
	10707, -1000, 30212, 1007, 1007, -1000, 609, 608, 607, 602,
	-1000, -1000, -76, 16246, 1763, 1451, 20998, 1509, -1000, -1000,
	222, -1000, -1000, -1000, 956, -67, 12293, -81, 80, 35,
	-86, 20998, -1000, 440, 17137, -1000, 1444, -1000, 20998, 29665,
	-123, -1000, 1388, -1000, 221, 10707, 14732, -1000, -142, -1000,
	-87, -1000, 431, -93, 18622, -1000, 377, -164, -1000, 430,
	-1000, 431, 220, 20998, 18622, 10707, 10707, 29917, -98, -1000,
	409, 409, -1000, 27365, -1000, 29665, -1000, 28981, -1000, -1000,
	-1000, 960, -1000, 27261, -1000, -1000, -1000, -1000, 11351, 1300,
	219, 30212, 27036, -1000, -1000, 10707, -1000, -1000, -1000, -1000,
	-1000, 1201, -1000, -1000, 20998, 1071, -1000, -1000, 10707, 26759,
	214, 1253, 213, -1000, -1000, -1000, -1000, -1000, -1000, 1545,
	-14, -1000, 860, -1000, -1000, 29665, 1522, -1000, -1000, 20998,
	20998, 212, 211, -1000, 210, 50, -99, -1000, 426, 668,
	-107, 20998, -1000, -1000, 5539, 20998, 910, -108, -1000, 1253,
	-1000, 910, 208, 17137, -1000, 1164, -117, -1000, 1641, -1000,
	20998, 29665, -1000, 431, -1000, 1728, 18622, 155, -1000, -1000,
	1237, -1000, 4609, 18622, 20998, -113, -1000, 409, 409, -1000,
	-1000, 78, 998, 1562, -1000, 3179, 11351, 30212, -115, -1000,
	27012, -1000, -1000, 1392, 26787, 1131, 20998, -1000, 20998, 1515,
	77, 20998, 531, 5230, -1000, -1000, 10707, 10707, 10707, 1763,
	-1000, -1000, 1761, 755, -1000, 503, -1000, 205, 1253, 910,
	-1000, 1253, 12293, -1000, 1167, 20998, 192, -122, 18622, -1000,
	-1000, 376, -1000, -1000, 1711, -1000, -124, -1000, -1000, 857,
	10707, 3179, -131, -1000, -1000, 1383, -1000, 1011, 963, 75,
	-133, -1000, -1000, 161, -1000, 10707, -1000, -139, -144, -24,
	-1000, -1000, 15335, -1000, 20998, -1000, 1253, -1000, -150, -1000,
	-1000, -1000, -1000, -1000, 431, 167, -1000, 73, 10385, 10385,
	-123, -1000, 20998, -1000, 1015, 1013, 742, -1000, -1000, -1000,
	-1000, -1000, 1131, 29665, -1000, -1000, 72, -130, -155, -1000,
	910, 18622, -1000, -1000, -1000, -1000, 11984, 1045, 773, 28505,
	-1000, -1000, -1000, 1459, -1000, 539, 985, 985, 1011, 1708,
	-1000, 977, 1253, -1000, 1681, -1000, -1000, -1000, -1000, -1000,
	-1000, 1689, -1000, -1000, 1160, -1000, -1000, -1000, -1000, -1000,
	-1000, 10063, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2030, 2026, 1585, 1669, 2023, 2022, 1666, 2017, 2016,
	2015, 2010, 2009, 2006, 116, 1590, 1587, 23, 1583, 2000,
	105, 1999, 1998, 1996, 111, 1990, 1986, 1983, 1982, 168,
	1981, 1979, 102, 1581, 1579, 1553, 1977, 1975, 107, 1974,
	1973, 33, 1971, 90, 1970, 61, 172, 2310, 143, 1969,
	1967, 1966, 14, 120, 89, 1962, 40, 1959, 1956, 44,
	39, 27, 11, 1955, 118, 1954, 1951, 967, 30, 1949,
	1948, 153, 1946, 24, 28, 1693, 156, 154, 129, 139,
	1945, 1942, 1941, 1940, 1939, 56, 1938, 8, 1936, 1934,
	16, 64, 29, 1933, 25, 20, 1932, 1930, 140, 1929,
	92, 125, 1564, 144, 138, 260, 1928, 88, 10, 98,
	1927, 1926, 136, 43, 1925, 37, 91, 152, 1924, 60,
	162, 75, 31, 71, 121, 1923, 1921, 1915, 93, 1911,
	122, 77, 1905, 1902, 97, 1900, 148, 145, 1899, 1897,
	109, 1892, 137, 1891, 1890, 151, 165, 1887, 163, 1883,
	1880, 164, 130, 12, 45, 83, 17, 1572, 1565, 123,
	78, 38, 13, 1879, 2043, 969, 672, 42, 96, 69,
	68, 100, 62, 70, 155, 22, 1878, 1876, 127, 1873,
	1872, 1871, 1870, 1866, 94, 1863, 1858, 87, 150, 21,
	4, 18, 114, 41, 26, 101, 126, 160, 131, 1857,
	110, 133, 59, 1109, 1856, 1853, 1570, 149, 1851, 1850,
	1849, 1405, 1245, 1243, 174, 1846, 1845, 271, 269, 1842,
	1841, 67, 1840, 141, 124, 1839, 158, 147, 146, 1838,
	57, 170, 115, 1836, 119, 58, 0, 449, 318, 1835,
	135, 99, 1833, 1831, 1825, 1824, 32, 1, 9, 5,
	6, 3, 74, 65, 1814, 1813, 142, 50, 84, 1811,
	161, 1810, 1809, 1806, 53, 1800, 19, 1798, 15, 1797,
	1795, 7, 2, 1792, 1790, 157, 1787, 113, 1785, 1630,
	1784, 159, 1783, 1781, 1619, 54, 104,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 54, 54, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 51, 51, 56, 56, 56, 58, 58, 55,
	55, 50, 50, 5, 5, 234, 234, 235, 235, 40,
	40, 44, 44, 41, 42, 42, 43, 43, 6, 6,
	6, 7, 7, 7, 7, 7, 7, 14, 15, 15,
	15, 15, 15, 15, 15, 15, 104, 104, 103, 103,
	106, 106, 16, 16, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 202, 202, 201,
	19, 176, 176, 20, 20, 20, 20, 21, 129, 129,
	22, 22, 22, 22, 23, 28, 275, 275, 275, 279,
	279, 280, 280, 281, 281, 281, 281, 281, 281, 281,
	277, 277, 27, 27, 27, 27, 39, 31, 31, 31,
	31, 31, 31, 149, 146, 146, 145, 145, 145, 145,
	147, 147, 147, 147, 150, 150, 84, 84, 227, 226,
	226, 232, 232, 232, 81, 81, 81, 81, 81, 82,
	82, 82, 83, 83, 225, 225, 225, 225, 233, 233,
	233, 233, 233, 233, 231, 231, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 18, 276, 276, 278, 278, 33, 33, 34, 34,
	35, 35, 35, 35, 10, 10, 11, 11, 85, 85,
	86, 86, 155, 155, 155, 155, 87, 87, 57, 57,
	57, 154, 244, 244, 245, 245, 245, 245, 245, 245,
	246, 246, 246, 246, 246, 246, 246, 242, 242, 243,
	240, 240, 241, 241, 241, 241, 282, 282, 153, 153,
	90, 90, 249, 249, 249, 249, 247, 247, 247, 247,
	247, 250, 248, 251, 251, 251, 251, 251, 188, 188,
	188, 37, 12, 63, 63, 13, 9, 9, 133, 133,
	94, 94, 193, 193, 193, 74, 74, 52, 52, 52,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 134, 134, 135, 135, 25, 30, 36, 36, 36,
	36, 36, 284, 284, 70, 70, 70, 70, 71, 71,
	148, 148, 151, 151, 152, 152, 152, 65, 64, 66,
	8, 8, 59, 59, 60, 60, 61, 61, 62, 62,
	285, 285, 24, 24, 24, 77, 77, 142, 142, 142,
	144, 144, 143, 143, 143, 119, 119, 119, 38, 99,
	99, 108, 108, 109, 109, 199, 110, 110, 29, 29,
	47, 47, 45, 45, 45, 45, 45, 45, 46, 46,
	48, 48, 48, 48, 48, 48, 48, 257, 257, 257,
	260, 260, 256, 258, 258, 259, 259, 283, 283, 120,
	120, 120, 89, 88, 88, 92, 92, 91, 93, 93,
	192, 117, 117, 117, 117, 136, 136, 137, 137, 138,
	138, 139, 139, 139, 140, 140, 141, 141, 116, 116,
	172, 172, 49, 49, 98, 98, 100, 100, 162, 162,
	162, 163, 163, 161, 161, 161, 161, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 273, 273, 273, 274,
	274, 191, 191, 195, 195, 195, 195, 195, 195, 189,
	189, 189, 189, 190, 190, 200, 200, 123, 123, 123,
	123, 121, 121, 122, 122, 196, 196, 196, 196, 118,
	118, 197, 197, 197, 156, 156, 203, 203, 203, 221,
	221, 97, 97, 97, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 205, 205, 205, 205, 207, 207, 207, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 220, 220, 220, 220, 220, 208, 208, 215,
	215, 216, 216, 217, 218, 209, 209, 210, 210, 211,
	212, 219, 219, 219, 219, 223, 223, 213, 213, 213,
	213, 213, 214, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 131, 131, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 166, 166, 166, 166, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 252, 252, 252, 252,
	252, 252, 252, 254, 254, 255, 255, 253, 253, 253,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 253, 253, 261, 261, 262, 262, 264, 264,
	265, 265, 266, 267, 267, 267, 268, 269, 269, 263,
	263, 270, 270, 270, 271, 271, 272, 272, 272, 272,
	272, 178, 178, 178, 179, 179, 180, 186, 186, 186,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 72, 72, 72, 72,
	72, 105, 105, 175, 175, 173, 173, 173, 177, 177,
	124, 124, 222, 222, 222, 222, 222, 222, 222, 125,
	125, 125, 132, 126, 126, 127, 127, 127, 127, 127,
	127, 169, 170, 128, 128, 128, 171, 171, 181, 185,
	185, 184, 183, 183, 182, 182, 159, 159, 160, 160,
	158, 157, 113, 113, 112, 112, 111, 111, 286, 286,
	187, 187, 114, 114, 115, 107, 107, 198, 198, 198,
	198, 101, 101, 79, 79, 102, 102, 75, 75, 78,
	78, 76, 76, 76, 76, 95, 95, 96, 96, 73,
	73, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 224, 224, 224, 174, 67, 67, 67, 68,
	68, 69, 69, 229, 229, 229, 230, 230, 230, 230,
	228, 228, 228, 228, 228, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 7, 6, 1, 1, 1, 3, 3,
	0, 2, 0, 2, 1, 3, 5, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	5, 3, 0, 1, 1, 1, 1, 3, 3, 0,
	2, 3, 2, 3, 6, 6, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 3, 6,
	3, 4, 1, 5, 2, 1, 3, 3, 3, 3,
	1, 3, 3, 1, 2, 2, 1, 0, 1, 1,
	3, 1, 1, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 3, 4, 4, 4, 4, 2, 4, 4, 4,
	4, 4, 4, 2, 3, 3, 2, 3, 3, 4,
	2, 3, 4, 3, 3, 4, 4, 2, 5, 5,
	6, 2, 2, 0, 2, 0, 6, 6, 5, 5,
	4, 12, 4, 12, 7, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 5, 2, 0, 6, 11, 14, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 6, 8, 8, 10, 8,
	10, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 1, 1, 2, 3, 2,
	8, 11, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 6, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 3, 3, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 7, 4, 6,
	3, 1, 5, 6, 9, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 2, 1, 3,
	1, 1, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 1, 1, 1, 6, 6, 4, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 4, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, -39, 23, 34, 225, 66, -8, -9, -10, -11,
	-12, -13, -259, 94, 103, 125, 206, 101, 87, 119,
	228, 235, -45, -47, 245, -149, 248, 35, 257, 60,
	97, 230, 223, 224, 282, 291, 68, -257, -48, -46,
	333, 307, 314, 239, -49, 266, 299, 336, 266, 134,
	80, 302, -275, -102, 266, 80, -76, -67, 326, 4,
	-236, -238, 20, 21, 23, 33, 34, 35, 40, 44,
	47, 54, 59, 60, 61, 63, 65, 66, 67, 70,
	71, 78, 79, 81, 83, 87, 89, 93, 94, 96,
	101, 102, 103, 109, 110, 113, 115, 120, 125, 126,
	127, 128, 135, 138, 140, 133, 148, 150, 151, 154,
	153, 158, 161, 164, 166, 167, 168, 171, 169, 173,
	174, 176, 175, 181, 183, 184, 186, 189, 192, 195,
	198, 199, 200, 201, 204, 206, 208, 209, 210, 211,
	213, 214, 216, 217, 218, 219, 220, 223, 221, 222,
	224, 225, 226, 228, 230, 231, 233, 246, 247, 258,
	235, 236, 237, 238, 241, 242, 243, 245, 248, 250,
	253, 256, 257, 259, 262, 260, 255, 265, 267, 268,
	269, 270, 271, 278, 282, 283, 284, 285, 288, 289,
	290, 291, 293, 296, 297, 298, 303, 308, 309, 310,
	311, 312, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 50, 51, 52, 55, 82, 84, 85, 100, 104,
	105, 111, 121, 123, 129, 130, 139, 141, 142, 143,
	145, 156, 170, 180, 182, 193, 197, 203, 205, 212,
	232, 240, 251, 252, 261, 263, 273, 274, 275, 279,
	280, 295, 299, 300, -275, -75, -67, 80, 89, 138,
	290, 289, 80, 134, 266, 302, -17, 333, -29, -7,
	-15, -4, -24, -38, -14, -32, -18, -33, -34, -35,
	-16, 23, -228, 4, -236, -238, -237, -239, 57, 69,
	118, 137, 131, 147, 149, 157, 159, 172, 194, 196,
	229, 249, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 43, 48, 49, 53, 56, 58, 64, 68, 72,
	73, 74, 75, 76, 77, 86, 88, 90, 91, 92,
	95, 97, 99, 106, 107, 108, 114, 116, 117, 119,
	122, 124, 132, 134, 136, 144, 146, 152, 155, 160,
	162, 163, 177, 178, 179, 185, 187, 188, 190, 191,
	202, 207, 215, 227, 239, 244, 254, 264, 266, 272,
	276, 277, 281, 286, 287, 292, 294, 301, 302, 304,
	305, 306, 307, -67, -67, -67, 206, 22, -279, 22,
	-280, -281, 68, 94, 119, 239, 138, 89, 289, -279,
	-71, 235, -67, -146, 161, 242, 54, 232, 278, -147,
	-145, -227, 273, -150, -103, 171, -67, 4, 171, 244,
	80, 22, 34, 54, 59, 81, 120, 134, 135, 64,
	65, 151, 209, 161, 243, 267, 273, 278, 68, 293,
	269, 102, -284, 278, 278, -284, -284, -70, 278, 276,
	-71, 4, 80, 244, 171, -283, 266, -232, -225, -188,
	9, 281, 106, 187, -231, 8, 325, -224, -230, 5,
	7, 324, 4, -236, -238, -237, 266, 292, 302, -133,
	80, 287, -46, -48, -47, -91, -92, 286, 144, 99,
	191, -45, -47, -257, -260, 213, -256, -67, -260, -88,
	-89, 22, 91, 337, -196, -75, 188, -115, 333, -3,
	-196, 129, -75, -78, 129, -75, -67, -196, 129, 276,
	337, -102, -95, -67, -158, -157, 335, 117, 117, 333,
	-112, -113, -157, -158, 117, 146, 146, -197, -196, -67,
	129, -79, 129, -78, -104, 129, -103, -104, 129, -202,
	-201, -230, 299, 266, 134, -176, 333, -129, 333, -67,
	22, 187, 337, 187, -67, -146, 52, -146, 246, 333,
	-151, -152, -64, -65, -66, 148, 208, 211, 276, 318,
	117, 312, -232, -84, 86, -106, 335, 54, -234, -231,
	9, 246, 209, 243, 117, -276, 187, 117, 117, 117,
	117, 117, 209, 243, 117, 312, 148, 208, 258, 266,
	302, 117, 117, -148, -151, -148, 276, -71, -118, -196,
	8, 7, 7, -103, 129, -67, -103, 134, -67, 129,
	-91, -92, -117, -136, -137, 160, 108, 185, -120, 22,
	91, -120, -120, 44, 334, 334, 337, -260, -96, 333,
	-107, -198, -164, 326, -166, 324, 325, 319, 177, 313,
	-178, -168, -181, 100, 232, 333, -75, -167, 338, 9,
	-254, -47, 29, -179, -180, 48, -67, 7, 8, 5,
	6, -73, -205, -174, -214, 281, 106, 179, -252, -253,
	4, -236, -229, -206, -216, -210, -213, 145, 57, 73,
	76, 74, 77, 244, 292, 49, 28, 104, 105, 197,
	203, 263, 279, 280, 129, 180, 130, 55, 121, 156,
	93, 37, 39, 41, 42, 50, 51, 82, 84, 85,
	111, 139, 141, 142, 143, 182, 212, 251, 261, 274,
	275, 300, -237, -217, -218, -211, -212, -219, -107, -115,
	326, -75, 333, -114, -187, -164, 86, -54, 221, -53,
	21, 23, 94, 297, 100, 255, 270, 236, 255, 270,
	236, 221, 100, 338, 221, 221, 100, -234, -76, 337,
	-228, 326, -235, -234, 259, 334, -101, -75, -113, -197,
	-77, -75, -77, 245, -67, 30, 100, -56, 337, 47,
	226, 100, -56, 337, 100, -56, 100, 334, 337, -196,
	129, -78, 30, -175, -203, -204, -206, -215, -209, -213,
	-214, 40, 46, 45, 271, 170, 240, 252, 295, 38,
	186, 140, 139, 141, 142, 143, 251, 37, 212, 111,
	93, 85, 84, 182, 42, 41, -217, -218, -211, -212,
	82, 274, 275, 145, 39, 51, 50, 300, 261, -105,
	-164, -275, -281, -275, 30, -145, -227, -105, 337, 158,
	-82, 164, 176, 126, -83, 188, 310, -226, 86, -232,
	-226, 86, 71, -233, 5, 4, -174, -188, 86, 161,
	-214, 335, -228, 247, -103, 22, -227, -278, 114, -275,
	-227, -227, -227, -227, -227, -67, 158, -227, -227, 266,
	134, 266, -71, -56, 337, 333, -90, 177, -258, 307,
	-90, 333, -68, 129, -67, -258, 177, -117, -137, -136,
	-138, -164, 22, -141, 110, 173, -164, -166, -46, -46,
	-46, -93, -192, -164, -256, 30, -95, -98, 337, 117,
	10, 11, 56, 33, 324, 325, 326, 327, 112, 328,
	329, 322, 323, 321, 316, 317, 318, 62, 165, 234,
	13, 14, 15, 26, 190, 159, 313, 131, 249, 319,
	16, 17, 18, 147, 36, 132, -72, 30, 4, -80,
	-164, -164, -164, -164, -164, 196, -111, -159, 331, -47,
	333, -47, -164, -105, 7, -47, -173, 331, -182, -164,
	-112, 333, 5, 333, 5, -261, 308, 114, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 205, -223, 303, -223, -223,
	-207, 333, -207, -208, 333, -207, 309, 314, 333, -98,
	-75, 337, 334, 337, 276, -134, 64, 58, -154, 129,
	58, -240, -67, 64, -241, 53, 287, 207, 116, -134,
	64, -134, 64, 64, -196, 33, -29, 117, 33, -29,
	117, 276, -78, -67, 276, 276, -196, -200, 315, -67,
	-200, 337, 117, 334, 337, -156, 305, -142, -29, 333,
	86, 30, -142, -108, -109, -199, -110, -75, 333, -67,
	-67, -78, -79, -103, -104, -104, -17, -201, 100, -20,
	-29, -24, -38, -14, 334, 337, -97, 29, -130, 333,
	311, 168, 83, 127, 167, -131, 238, 334, 337, 276,
	117, 278, 334, -152, -81, 211, 253, 222, 241, 337,
	-228, -277, -67, -75, -78, -75, -196, -85, -95, -86,
	-67, -155, -154, -242, -243, -240, 134, 287, 107, 30,
	100, -63, 201, 30, 187, 177, -59, 268, 100, -139,
	-224, 333, 325, -140, 232, 233, 337, -52, 31, 90,
	333, 334, -156, -198, -100, -194, 331, -196, -75, -47,
	-195, 333, -221, -203, -220, 217, 218, 216, 220, 219,
	-203, -228, 273, -164, -164, -164, -164, -164, -164, -164,
	-164, -164, -164, -164, -164, -164, -164, -164, -164, -164,
	-164, -164, -164, -164, -164, 159, 131, 249, 36, 132,
	-164, 276, -164, -164, -164, -164, 169, 177, 179, 281,
	106, 288, 91, 183, -286, 264, 32, -171, -47, 333,
	-186, 27, 254, 22, -228, -178, 232, 333, -159, -164,
	-160, -105, 334, 334, 337, -105, -177, 332, -173, -185,
	-184, 304, 334, -105, 301, 22, 91, 326, 7, -130,
	-262, 109, 122, 333, 334, 334, -164, -164, -124, -222,
	-105, 4, 311, 168, 83, 127, 167, 238, -124, -125,
	-164, -105, -126, -165, -166, 324, 325, 319, 333, 232,
	-127, -164, -105, -164, 43, 155, 277, -128, -164, 117,
	-105, -164, -164, -164, -105, -105, -105, 333, 7, 7,
	273, 273, 7, -156, 334, -187, -53, -75, -67, -67,
	177, -154, 129, -58, 177, -203, -67, 333, 333, 150,
	150, -67, -67, 129, -67, 129, -67, -67, -54, 221,
	-29, 333, -29, 333, -67, 221, -67, -75, 221, -40,
	128, 183, -43, 307, -234, 259, 117, -75, -119, 227,
	-164, -119, -144, 187, -101, 299, -67, -119, -99, 337,
	117, 318, -101, -56, -56, -56, -196, -203, 331, 331,
	7, 276, 276, 276, 276, 333, -164, -277, -277, -64,
	285, 61, 211, -232, 337, -200, 334, 334, 337, -68,
	134, -68, -29, -103, 5, -29, -75, 100, -60, 96,
	-285, 318, -67, -140, -164, -192, -20, -116, 122, -200,
	337, 69, -123, 149, 172, 118, 157, 229, 137, 7,
	103, -32, -161, 338, 333, -191, 314, -47, -195, -194,
	312, -164, -164, 276, -286, 264, -171, -164, 169, 179,
	281, 106, 288, 91, 183, 117, 333, -165, -165, -105,
	-168, 333, -105, 332, 341, 334, -164, 332, 332, 337,
	-183, -184, 95, -164, -92, 337, -91, -164, -105, -105,
	334, 334, -267, 195, 333, 333, -164, 30, 337, 334,
	117, 334, 334, -132, 202, 334, 10, 11, 324, 325,
	326, 327, 112, 328, 329, 322, 323, 321, 316, 317,
	318, 62, 165, 234, 13, 14, 15, 147, 132, -165,
	-165, -165, -105, 333, 334, -169, -170, 117, 114, 30,
	-128, -128, -128, 334, 117, -105, 337, 337, 337, 334,
	334, 334, 7, 334, 337, 334, 312, 312, 334, -116,
	276, 276, 100, 177, 296, -244, -241, -164, -94, -193,
	-67, -255, 333, -252, -253, -73, 333, 333, -51, 94,
	245, -135, 100, -56, 100, -56, 276, -134, 64, -105,
	-105, 276, 276, -43, 117, 265, 189, 259, -107, 178,
	-119, 63, 334, -156, -109, -100, -187, 334, 332, 7,
	7, 334, 168, 127, 167, -131, 167, -131, -131, 7,
	-67, -87, 133, -155, 333, -68, 333, 333, -90, 333,
	-67, -61, 154, -285, -231, -258, 188, 334, 334, -172,
	124, 44, -194, 149, 149, -194, -123, 149, -121, 194,
	-121, -121, -273, 333, -17, 333, 332, -191, -228, 331,
	339, -105, -190, -189, 30, -67, 192, 334, -164, -164,
	-165, -165, 117, 333, -164, -175, 26, 26, 334, -105,
	334, 337, -160, -164, 334, -173, 97, -164, 272, 334,
	301, -92, -92, -92, 5, -268, -67, 333, 305, -91,
	334, -221, -203, -164, -169, -164, -221, -203, -165, -165,
	-165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
	-165, -165, -165, -165, -165, -165, -165, 91, 177, 183,
	-165, 337, -105, 334, -170, -169, -164, -164, -203, 334,
	334, 334, -105, -164, -164, -164, 334, 7, -172, -67,
	-67, -154, 100, -245, 64, -246, 56, 107, 68, 177,
	179, 287, 207, 53, 86, 215, 334, 334, 337, -74,
	-112, 56, -74, -164, 333, -94, -95, 177, 86, 177,
	86, 79, 283, -67, -67, -75, -67, -67, 334, 334,
	-67, -75, -235, 273, 333, -143, 333, 187, -29, -119,
	318, 332, 332, 334, 132, -94, 333, -95, -85, 30,
	-94, 187, -62, 153, -285, -231, -59, -264, 306, -164,
	-105, -194, -194, -122, 294, 187, 149, -194, 332, 334,
	-274, 7, 332, -202, -191, -190, 7, -163, -162, 115,
	175, 334, -67, 333, -191, 26, 26, -164, -175, 334,
	-164, -164, 334, -164, 332, -164, 5, -164, 334, 334,
	334, -269, -67, -164, 334, 334, 334, -170, 117, 91,
	183, 333, -164, 334, 334, 337, 334, 334, 334, -264,
	-154, -67, -228, -67, 107, 129, 179, 150, 333, -165,
	-75, -153, -282, 67, 262, -193, -52, -228, -52, 334,
	-105, 334, 334, 179, 179, -164, -203, -56, -56, 276,
	276, 276, 276, -167, -73, -67, -42, -41, 5, 92,
	-95, 64, -115, -47, 333, 198, 334, -94, 334, 334,
	-29, 334, -75, -285, -231, -60, -265, -266, -67, -122,
	333, -164, -194, -161, 334, 337, -191, 334, -190, 332,
	337, 340, 318, -191, 333, -95, -189, -164, -164, 334,
	334, -92, -263, 200, 334, -165, 117, 333, -175, 334,
	-164, -246, -68, 177, -164, -69, 333, -87, 333, -74,
	-92, 215, -55, 56, -67, -67, 333, 333, 333, 337,
	334, -44, 318, 289, 178, 334, -67, -67, -153, 334,
	-87, -153, 333, -231, -61, 337, 30, -95, -191, 7,
	-190, -17, -162, -228, 331, -190, -95, 334, 334, -92,
	44, -165, -175, 334, 334, 100, 334, -249, 166, -67,
	-95, -52, 334, -75, -50, 294, -228, -105, -105, -105,
	-41, 5, 245, -156, 333, -87, -153, -87, -94, -62,
	-266, -268, 334, -189, 332, 7, 334, -270, 210, 233,
	-105, 334, 107, -247, -250, -248, 187, 118, 199, 250,
	334, 334, -90, -164, 334, 334, -92, -108, -95, -87,
	334, -191, 332, 334, -271, -272, 36, 284, 71, -164,
	-271, -67, -248, 187, -250, 187, 289, 89, -249, 334,
	-156, 334, -153, -190, -272, 204, 113, 232, 204, 113,
	-251, 174, 226, 47, 245, -251, -247, -57, 47, 226,
	-87, 26, 20, 179, 86, -272,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 0, 0, 0, 0, 81, 82, 83, 84,
	85, 86, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 418, -2, 0, 162, 0, 363, 0, 363,
	363, 367, 0, 0, 448, 0, 329, 445, -2, 456,
	0, 0, 0, 454, 432, 0, 0, -2, 0, 0,
	0, 0, 0, 136, 0, 986, 915, 921, 922, 946,
	947, 948, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
	1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
	1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
	1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
	1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
	1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
	1154, 1155, 1156, 1157, 0, 0, 917, 986, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 0, 241, 960, 961, 962, 963, 964, 1158, 1159,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
	1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
	1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
	1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 122, 129, 130, 1039, 132, 0, 139,
	140, 141, 143, 144, 145, 146, 147, 148, 149, 0,
	356, 1064, 369, 157, 1016, 1069, 974, 1144, 1087, 165,
	170, 0, 1150, 173, 178, -2, 98, 206, 207, 208,
	209, 210, 0, 0, 0, 216, 243, 0, 0, 0,
	0, 0, 223, 0, 226, 230, 0, 0, 0, 237,
	0, 0, 371, 362, 371, 359, 360, 361, 364, 0,
	355, 152, 153, 154, 155, 0, 447, 156, 181, 182,
	183, 194, 195, 196, 197, 318, 0, 320, 204, 205,
	942, 0, 956, 957, 958, 959, 0, 0, 0, 0,
	0, 328, -2, 428, 429, -2, 0, 451, 451, 451,
	0, 0, 429, 0, 437, 1044, 440, 928, 438, 0,
	0, 453, 452, 0, 433, 535, 0, 482, 0, 2,
	0, 1128, 535, 0, 1128, 920, 0, 0, 1128, 0,
	0, 137, 138, 925, 923, 924, 0, 0, 0, 0,
	918, 894, 892, 893, 0, 0, 0, 0, 541, 88,
	1128, 56, 1128, 913, 56, 1128, 96, 56, 1128, 0,
	117, 119, 1156, 0, 0, 0, 0, 127, 0, 131,
	133, 0, 0, 0, 368, 158, 1117, 160, 0, 0,
	164, 372, 374, 375, 376, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 176, 99, 0, 0, 211, 65,
	66, 0, 224, 227, 0, 245, 0, 0, 0, 0,
	0, 0, 225, 228, 0, 231, 0, 233, 234, 0,
	0, 0, 0, 357, 370, 358, 0, 366, 56, 539,
	319, 944, 943, 301, 1128, 444, 301, 950, 444, 1128,
	-2, 0, 424, 463, 464, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 420, 421, 0, 439, 0, 0,
	485, 905, 909, 910, 639, 0, 0, 0, 0, 0,
	0, 731, 733, 1122, 1144, 0, 735, 736, 0, 738,
	740, 741, 0, 744, 745, 885, 917, 931, 932, 933,
	934, 0, 0, 937, 0, 939, 940, 941, 785, 754,
	-2, -2, 929, 571, 572, 573, 574, -2, 1158, 758,
	760, 762, 763, 764, 765, 0, 1106, 1123, 1124, 1140,
	1141, 1149, 1153, 1154, 1128, 1137, 1129, 1118, 1126, 1135,
	991, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 955, 601, 602, 607, 608, 610, 485, 483,
	536, 537, 0, 0, 902, 900, 901, 33, 352, 35,
	0, 352, 352, 0, 0, 0, 0, 250, 0, 0,
	252, 0, 0, 0, 0, 0, 0, 526, 916, 0,
	890, 891, 526, 67, 78, 0, 0, 911, 895, 545,
	0, 395, 0, 0, 542, 0, 0, 90, 0, 54,
	55, 0, 92, 0, 0, 94, 0, 446, 0, 0,
	1128, 0, 446, 0, 843, 553, 554, 555, 556, 557,
	636, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 578, 579, 580, 581, 582, 583, 584, 598,
	0, 577, 577, 577, 590, 591, 599, 600, 605, 606,
	617, 618, 620, 622, 616, 616, 616, 613, 614, 0,
	841, 0, 142, 0, 0, 161, 0, 0, 0, 0,
	377, 189, 190, 191, 379, 192, 193, 166, 168, 179,
	167, 169, 171, 172, 198, 199, 200, 201, 202, 203,
	0, 0, 100, 214, 212, 213, 215, 217, 0, 242,
	218, 219, 220, 221, 222, 229, 232, 235, 236, 0,
	0, 0, 365, 321, 0, 259, 0, 0, 324, 443,
	0, 0, 0, 1128, 949, 383, 0, 427, 461, 462,
	465, 469, 470, 473, 476, 477, 467, 639, 434, 435,
	436, 457, 458, 339, 441, 0, 0, 545, 0, 0,
	0, 0, 0, 0, 820, 821, 822, 823, 824, 825,
	828, 829, 826, 827, 830, 831, 832, 0, 0, 0,
	833, 834, 835, 0, 0, 837, 0, 839, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 908, 836,
	644, 645, 646, 668, 669, 0, 732, 896, 889, 734,
	0, -2, 841, 0, 737, 742, 743, 0, 0, 884,
	-2, 0, 936, 0, 636, 787, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 864, 870, 0, 0, 0,
	0, 0, 0, 0, 0, 586, 604, 615, 612, 611,
	588, 0, 587, 585, 0, 589, 0, 0, 0, 545,
	0, 0, 904, 0, 0, 0, 0, 351, 37, 1128,
	0, 58, 0, 0, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 249,
	0, 0, 0, 919, 0, 0, 0, 70, 0, 926,
	77, 0, 0, 0, 0, 407, 0, 407, 397, 0,
	0, 0, 407, 410, 411, 413, 414, 0, 0, 543,
	89, 914, 56, 97, 56, 56, 103, 118, 0, 120,
	123, 124, 125, 126, 121, 0, 546, 548, 558, 0,
	623, 624, 625, 626, 627, 628, 637, 128, 0, 0,
	0, 0, 163, 373, 378, 0, 186, 0, 188, 0,
	101, 244, 150, 238, 239, 526, 540, 0, 0, 258,
	925, 260, 262, 263, 264, 265, 950, 0, 950, 0,
	0, 322, 0, 0, 0, 0, 385, 391, 0, 0,
	471, 0, 0, 468, 474, 475, 0, 460, 337, 338,
	446, 927, 479, 906, 526, 486, 0, 496, 535, 512,
	501, 0, 640, 549, 550, 592, 593, 594, 595, 596,
	641, 642, 0, 647, 648, 649, 650, 651, 652, 653,
	654, 655, 656, -2, -2, -2, 660, 661, 662, -2,
	-2, -2, 666, 667, -2, 838, 840, 0, 899, 0,
	-2, 0, -2, -2, -2, -2, 680, 0, 682, 685,
	687, 689, 0, 0, 0, 0, 898, 699, 876, 0,
	0, 817, 818, 819, 907, 684, 0, 0, 897, 888,
	0, 0, -2, 739, 0, 0, 0, 847, 848, 883,
	879, 0, 746, 456, 0, 0, 0, 0, 0, 945,
	795, 0, 0, 0, 759, 761, 0, 0, 0, 0,
	851, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	841, 861, 0, 0, 702, 0, 0, 0, 0, 1144,
	0, 841, 869, 0, 0, 0, 0, 0, 841, 0,
	875, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 479, 538, 903, 36, 341, 0, 0,
	0, 39, 1128, 47, 0, 273, 0, 0, 0, 0,
	0, 354, 48, 1128, 56, 1128, 56, 49, 34, 352,
	246, 0, 247, 0, 345, 0, 340, 343, 0, 77,
	0, 0, 64, 0, 68, 79, 0, 912, 87, 0,
	544, 392, 407, 0, 0, 399, 396, 394, 545, 0,
	0, 0, 0, 91, 93, 95, 0, 844, 0, 0,
	0, 0, 0, 0, 0, 0, 842, 134, 135, 159,
	184, 185, 187, 180, 0, 240, 267, 300, 0, 0,
	950, 0, 256, 301, 323, 325, 0, 0, 387, 391,
	0, 390, 444, 0, 0, 459, 0, 481, 0, 484,
	0, 0, 0, 0, 0, 532, 532, 532, 530, 506,
	446, 0, 512, 0, 0, 524, 0, -2, 501, 0,
	0, -2, -2, 0, 0, 0, 700, -2, 681, 683,
	686, 688, 690, 0, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 886, 889, -2, 842, 845, 846, 0,
	0, 880, 0, 0, 0, 0, 455, 456, 456, 456,
	752, 0, 753, 0, 0, 0, 0, 0, 0, 768,
	0, 769, 770, 0, 0, 771, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 705,
	706, 707, 0, 0, 772, 867, 868, 0, 0, 0,
	0, 0, 0, 777, 0, 874, 0, 0, 0, 781,
	782, 783, 0, 575, 0, 597, 619, 621, 609, 481,
	0, 0, 0, 0, 57, 271, 290, 0, 0, 330,
	336, 336, 0, 755, 756, 0, 0, 0, 41, 0,
	0, 0, 0, 45, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 0, 80, 405, 406,
	393, 404, 0, 407, 412, 409, 415, 0, 551, 0,
	0, 559, 629, 630, 631, 632, 633, 634, 635, 0,
	151, 254, 0, 261, 0, 0, 0, 259, 0, 0,
	0, 389, 391, 0, 382, 383, 466, 472, 442, 789,
	0, 0, 487, 0, 0, 0, 0, 0, 527, 531,
	528, 529, 0, 0, 0, 0, 512, 524, 493, 0,
	0, 0, 500, 523, 0, 522, 511, -2, 643, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 877, 0,
	812, 0, 0, 888, -2, 849, 878, 882, 0, 747,
	0, 0, 0, 0, 938, 793, 794, 798, 0, 0,
	757, 0, 0, 850, 860, 862, 703, 704, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, -2, -2,
	-2, 721, 722, 723, -2, -2, -2, 0, 0, 0,
	863, 0, 0, 815, 865, 866, 871, 872, 0, 774,
	775, 776, 873, 0, 0, 0, 603, 0, 789, 347,
	349, 38, 0, 272, 0, 275, 0, 0, 0, 0,
	281, 282, 0, 0, 0, 0, 292, 299, 0, 339,
	930, 0, 339, 0, 0, 0, 0, 0, 53, 0,
	0, 353, 0, 56, 56, 342, 0, 0, 0, 0,
	346, 344, 69, 0, 0, 0, 0, 0, 398, 408,
	0, 552, 547, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 380, 391, 0, 384, 385, 430, 0, 480,
	478, 514, 0, 516, 0, 0, 0, 518, 496, 507,
	0, 509, 512, 0, 524, 498, 0, 0, 491, 0,
	490, 512, 520, 0, 0, 0, 0, -2, 0, 693,
	-2, -2, 811, 842, 887, 881, 935, 456, 748, 750,
	751, 800, 797, 0, 784, 766, 767, 859, 0, 0,
	0, 0, 842, 814, 773, 0, 779, 780, 576, 431,
	40, 0, 276, 277, 950, 0, 280, 283, 0, 285,
	952, 267, 0, 296, 297, 331, 332, 335, 333, 336,
	456, 294, 0, 42, 43, 52, 60, 44, 50, 0,
	0, 0, 0, 525, 0, 0, 0, 74, 72, 0,
	0, 0, 416, 417, 0, 0, 299, 0, 289, 267,
	257, 299, 0, 0, 386, 387, 788, 790, 0, 515,
	0, 534, 517, 512, 508, 0, 524, 446, 505, 494,
	0, 495, 0, 524, 0, 0, 502, -2, -2, 694,
	813, 0, 456, 0, 786, -2, 0, 0, 0, 816,
	0, 274, 278, 0, 0, 305, 0, 293, 0, 339,
	0, 0, 62, 0, 348, 350, 0, 0, 0, 0,
	76, 73, 0, 0, 401, 545, 403, 0, 267, 299,
	255, 267, 0, 388, 389, 0, 0, 0, 0, 510,
	503, 0, 492, 488, 0, 499, 0, 521, 749, 803,
	0, -2, 0, 729, 778, 0, 284, 310, 0, 0,
	0, 334, 747, 301, 46, 0, 59, 0, 0, 456,
	75, 71, 0, 402, 0, 287, 267, 326, 0, 381,
	791, 792, 533, 497, 512, 0, 519, 0, 0, 0,
	799, 730, 0, 286, 306, 307, 0, 302, 303, 304,
	951, 298, 305, 61, 251, 253, 0, 545, 0, 288,
	299, 524, 489, 796, 801, 804, -2, 1090, 983, 0,
	802, 279, 308, 0, 309, 0, 0, 0, 310, 0,
	400, 270, 267, 504, 0, 806, 807, 808, 809, 810,
	311, 0, 314, 315, 0, 312, 295, 266, 268, 269,
	327, 0, 313, 316, 317, 805,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 322, 3, 328, 323, 3,
	333, 334, 326, 324, 337, 325, 335, 327, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 341, 336,
	316, 318, 317, 3, 338, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 331, 3, 332, 329, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 339, 321, 340, 319,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 320, 57659, 330,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:793
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:799
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:805
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:846
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:902
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:925
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:935
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = nil
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = DropCascade
		}
	case 55:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = DropRestrict
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = DropDefault
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:997
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:998
		{
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1001
		{
			return unimplemented(sqllex, "alter using")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1002
		{
		}
	case 63:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 67:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 70:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 72:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.str = ""
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 76:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1075
		{
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1207
		{ /* SKIP DOC */
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1332
		{
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1394
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1398
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1404
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1411
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			return unimplemented(sqllex, "set local")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1437
		{ /* SKIP DOC */
		}
	case 163:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			return unimplemented(sqllex, "set from current")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1478
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1495
		{
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1495
		{
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = Low
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = Normal
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = High
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = Only
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = Write
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1629
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1633
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1721
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1725
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1729
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1733
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1749
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1753
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1757
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1800
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1804
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1810
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1814
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1818
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1822
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1893
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1897
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = DropDefault
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1907
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1936
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return unimplemented(sqllex, "match full")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return unimplemented(sqllex, "match partial")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			return unimplemented(sqllex, "match simple")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2115
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2121
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2124
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2125
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2128
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2131
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2134
		{
			return unimplemented(sqllex, "no action")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2137
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2138
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2139
		{
			return unimplemented(sqllex, "action set null")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2140
		{
			return unimplemented(sqllex, "action set default")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2172
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = true
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = false
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2247
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2248
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2252
		{
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = Ascending
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = Descending
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2306
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2307
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = true
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = false
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2320
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2321
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2354
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2363
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2364
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.str = ""
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.str = ""
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2410
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			if b.Isolation != UnspecifiedIsolation {
				if a.Isolation != UnspecifiedIsolation {
					sqllex.Error("isolation level specified multiple times")
					return 1
				}
				a.Isolation = b.Isolation
			}
			if b.UserPriority != UnspecifiedUserPriority {
				if a.UserPriority != UnspecifiedUserPriority {
					sqllex.Error("user priority specified multiple times")
					return 1
				}
				a.UserPriority = b.UserPriority
			}
			if b.ReadOnly != UnspecifiedReadOnly {
				if a.ReadOnly != UnspecifiedReadOnly {
					sqllex.Error("read mode specified multiple times")
					return 1
				}
				a.ReadOnly = b.ReadOnly
			}
			sqlVAL.union.val = a
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = TransactionModes{ReadOnly: sqlDollar[1].union.readOnly()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = sqlDollar[2].union.readOnly()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.str = ""
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.str = ""
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.str = ""
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.str = ""
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2533
		{
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2534
		{
		}
	case 392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2598
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2602
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 408:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2632
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2633
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2860
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2861
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2862
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2865
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2866
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2869
		{
			return unimplemented(sqllex, "cte")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2872
		{
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2873
		{
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2876
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2877
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2880
		{
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2881
		{
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = true
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = false
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = false
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = true
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2905
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2943
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2963
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3015
		{
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3016
		{
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3019
		{
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3074
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = &From{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3110
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3128
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3155
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3172
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = nil
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3239
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = true
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = false
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.str = astFullJoin
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.str = astLeftJoin
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.str = astRightJoin
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.str = astInnerJoin
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3356
		{
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3357
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3443
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3456
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3457
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3471
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3480
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3543
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3552
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = nil
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3601
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3697
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3729
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3768
		{
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3769
		{
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = year
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = month
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = day
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = hour
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = minute
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = month
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = hour
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = minute
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = minute
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = nil
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = second
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3864
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3899
		{
			return unimplemented(sqllex, "at tz")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4133
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4306
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4359
		{
			return unimplemented(sqllex, "variadic")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4360
		{
			return unimplemented(sqllex, "variadic")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4383
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4399
		{
			return unimplemented(sqllex, "func_application")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4400
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4404
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4421
		{
			return unimplemented(sqllex, "current role")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4422
		{
			return unimplemented(sqllex, "current user")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4423
		{
			return unimplemented(sqllex, "session user")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4424
		{
			return unimplemented(sqllex, "user")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4453
		{
			return unimplemented(sqllex, "treat")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4497
		{
			return unimplemented(sqllex, "within group")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4498
		{
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = Window(nil)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4533
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.str = ""
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4595
		{
			return unimplemented(sqllex, "frame range")
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4596
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4597
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4600
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4601
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4607
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4608
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4609
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4610
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4611
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = Any
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = Some
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = All
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = Plus
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = Minus
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = Mult
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = Div
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = FloorDiv
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = Mod
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = Bitand
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = Bitor
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = Pow
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = Bitxor
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = LT
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = GT
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = EQ
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = LE
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = GE
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = NE
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = Like
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = NotLike
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = ILike
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = NotILike
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 881:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4975
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4976
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5094
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5138
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5174
		{
			return unimplemented(sqllex, "func const")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5183
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = DNull
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5204
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5210
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.str = ""
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
