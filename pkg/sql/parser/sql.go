// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const LATERAL = 57494
const LC_CTYPE = 57495
const LC_COLLATE = 57496
const LEADING = 57497
const LEAST = 57498
const LEFT = 57499
const LEVEL = 57500
const LIKE = 57501
const LIMIT = 57502
const LOCAL = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const LOW = 57506
const LSHIFT = 57507
const MATCH = 57508
const MINUTE = 57509
const MONTH = 57510
const NAN = 57511
const NAME = 57512
const NAMES = 57513
const NATURAL = 57514
const NEXT = 57515
const NO = 57516
const NO_INDEX_JOIN = 57517
const NORMAL = 57518
const NOT = 57519
const NOTHING = 57520
const NULL = 57521
const NULLIF = 57522
const NULLS = 57523
const NUMERIC = 57524
const OF = 57525
const OFF = 57526
const OFFSET = 57527
const OID = 57528
const ON = 57529
const ONLY = 57530
const OPTIONS = 57531
const OR = 57532
const ORDER = 57533
const ORDINALITY = 57534
const OUT = 57535
const OUTER = 57536
const OVER = 57537
const OVERLAPS = 57538
const OVERLAY = 57539
const PARENT = 57540
const PARTIAL = 57541
const PARTITION = 57542
const PASSWORD = 57543
const PLACING = 57544
const POSITION = 57545
const PRECEDING = 57546
const PRECISION = 57547
const PREPARE = 57548
const PRIMARY = 57549
const PRIORITY = 57550
const QUERIES = 57551
const RANGE = 57552
const READ = 57553
const REAL = 57554
const RECURSIVE = 57555
const REF = 57556
const REFERENCES = 57557
const REGCLASS = 57558
const REGPROC = 57559
const REGPROCEDURE = 57560
const REGNAMESPACE = 57561
const REGTYPE = 57562
const RENAME = 57563
const REPEATABLE = 57564
const RELEASE = 57565
const RESET = 57566
const RESTORE = 57567
const RESTRICT = 57568
const RETURNING = 57569
const REVOKE = 57570
const RIGHT = 57571
const ROLLBACK = 57572
const ROLLUP = 57573
const ROW = 57574
const ROWS = 57575
const RSHIFT = 57576
const SAVEPOINT = 57577
const SCATTER = 57578
const SEARCH = 57579
const SECOND = 57580
const SELECT = 57581
const SERIAL = 57582
const SERIALIZABLE = 57583
const SESSION = 57584
const SESSIONS = 57585
const SESSION_USER = 57586
const SET = 57587
const SETTING = 57588
const SETTINGS = 57589
const SHOW = 57590
const SIMILAR = 57591
const SIMPLE = 57592
const SMALLINT = 57593
const SMALLSERIAL = 57594
const SNAPSHOT = 57595
const SOME = 57596
const SPLIT = 57597
const SQL = 57598
const START = 57599
const STATUS = 57600
const STDIN = 57601
const STRICT = 57602
const STRING = 57603
const STORING = 57604
const SUBSTRING = 57605
const SYMMETRIC = 57606
const SYSTEM = 57607
const TABLE = 57608
const TABLES = 57609
const TEMPLATE = 57610
const TESTING_RANGES = 57611
const TESTING_RELOCATE = 57612
const TEXT = 57613
const THEN = 57614
const TIME = 57615
const TIMESTAMP = 57616
const TIMESTAMPTZ = 57617
const TO = 57618
const TRAILING = 57619
const TRANSACTION = 57620
const TREAT = 57621
const TRIM = 57622
const TRUE = 57623
const TRUNCATE = 57624
const TYPE = 57625
const UNBOUNDED = 57626
const UNCOMMITTED = 57627
const UNION = 57628
const UNIQUE = 57629
const UNKNOWN = 57630
const UPDATE = 57631
const UPSERT = 57632
const USER = 57633
const USERS = 57634
const USING = 57635
const VALID = 57636
const VALIDATE = 57637
const VALUE = 57638
const VALUES = 57639
const VARCHAR = 57640
const VARIADIC = 57641
const VIEW = 57642
const VARYING = 57643
const WHEN = 57644
const WHERE = 57645
const WINDOW = 57646
const WITH = 57647
const WITHIN = 57648
const WITHOUT = 57649
const YEAR = 57650
const ZONE = 57651
const NOT_LA = 57652
const WITH_LA = 57653
const AS_LA = 57654
const POSTFIXOP = 57655
const UMINUS = 57656

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5507

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 31,
	333, 31,
	-2, 437,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	99, 420,
	144, 420,
	160, 420,
	185, 420,
	191, 420,
	286, 420,
	-2, 410,
	-1, 66,
	99, 419,
	144, 419,
	160, 419,
	185, 419,
	191, 419,
	286, 419,
	-2, 413,
	-1, 75,
	1, 31,
	333, 31,
	-2, 437,
	-1, 438,
	1, 200,
	333, 200,
	-2, 1005,
	-1, 482,
	160, 447,
	185, 447,
	-2, 416,
	-1, 485,
	160, 446,
	185, 446,
	-2, 414,
	-1, 626,
	160, 446,
	185, 446,
	-2, 417,
	-1, 685,
	330, 937,
	-2, 930,
	-1, 686,
	330, 938,
	-2, 931,
	-1, 692,
	5, 606,
	330, 606,
	-2, 1116,
	-1, 716,
	5, 567,
	-2, 1090,
	-1, 717,
	5, 600,
	330, 600,
	-2, 1092,
	-1, 718,
	5, 575,
	-2, 1093,
	-1, 719,
	5, 574,
	-2, 1094,
	-1, 720,
	5, 600,
	330, 600,
	-2, 1097,
	-1, 721,
	5, 600,
	330, 600,
	-2, 1098,
	-1, 722,
	5, 601,
	-2, 1101,
	-1, 723,
	5, 561,
	-2, 1102,
	-1, 724,
	5, 561,
	-2, 1103,
	-1, 725,
	5, 582,
	-2, 1107,
	-1, 726,
	5, 562,
	-2, 1112,
	-1, 727,
	5, 563,
	-2, 1113,
	-1, 728,
	5, 564,
	-2, 1114,
	-1, 729,
	5, 565,
	-2, 1115,
	-1, 730,
	5, 561,
	-2, 1120,
	-1, 731,
	5, 568,
	-2, 1125,
	-1, 732,
	5, 566,
	-2, 1128,
	-1, 733,
	5, 598,
	330, 598,
	-2, 1130,
	-1, 734,
	5, 602,
	-2, 1133,
	-1, 735,
	5, 604,
	-2, 1134,
	-1, 736,
	5, 597,
	330, 597,
	-2, 1138,
	-1, 1008,
	99, 420,
	144, 420,
	160, 420,
	185, 420,
	191, 420,
	286, 420,
	-2, 725,
	-1, 1017,
	330, 914,
	-2, 902,
	-1, 1232,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 641,
	-1, 1233,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 642,
	-1, 1234,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 643,
	-1, 1238,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 647,
	-1, 1239,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 648,
	-1, 1240,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 649,
	-1, 1243,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 654,
	-1, 1249,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 656,
	-1, 1251,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 660,
	-1, 1252,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 661,
	-1, 1253,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 662,
	-1, 1254,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 663,
	-1, 1281,
	196, 796,
	-2, 799,
	-1, 1310,
	117, 836,
	330, 937,
	-2, 930,
	-1, 1311,
	117, 837,
	-2, 1086,
	-1, 1312,
	117, 838,
	-2, 1004,
	-1, 1313,
	117, 839,
	-2, 972,
	-1, 1314,
	117, 840,
	-2, 988,
	-1, 1315,
	117, 841,
	-2, 1003,
	-1, 1316,
	117, 842,
	-2, 1051,
	-1, 1474,
	99, 420,
	144, 420,
	160, 420,
	185, 420,
	191, 420,
	286, 420,
	-2, 497,
	-1, 1478,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 655,
	-1, 1479,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 657,
	-1, 1484,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 658,
	-1, 1502,
	196, 795,
	-2, 798,
	-1, 1692,
	1, 498,
	69, 498,
	99, 498,
	118, 498,
	122, 498,
	124, 498,
	137, 498,
	144, 498,
	149, 498,
	157, 498,
	160, 498,
	172, 498,
	185, 498,
	187, 498,
	191, 498,
	227, 498,
	229, 498,
	286, 498,
	293, 498,
	303, 498,
	304, 498,
	312, 498,
	329, 498,
	331, 498,
	333, 498,
	334, 498,
	-2, 497,
	-1, 1694,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 659,
	-1, 1699,
	147, 0,
	-2, 675,
	-1, 1709,
	196, 797,
	-2, 800,
	-1, 1743,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 702,
	-1, 1744,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 703,
	-1, 1745,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 704,
	-1, 1749,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 708,
	-1, 1750,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 709,
	-1, 1751,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 710,
	-1, 1872,
	147, 0,
	-2, 676,
	-1, 1875,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 679,
	-1, 1876,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 681,
	-1, 1982,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 680,
	-1, 1983,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 682,
	-1, 1990,
	147, 0,
	-2, 711,
	-1, 2046,
	147, 0,
	-2, 712,
	-1, 2111,
	36, 0,
	131, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 1089,
}

const sqlPrivate = 57344

const sqlLast = 29239

var sqlAct = [...]int{

	686, 2110, 2088, 1687, 2135, 2052, 1648, 2089, 2109, 2090,
	926, 1110, 1688, 1720, 1472, 1863, 1916, 486, 1962, 291,
	1171, 51, 1837, 493, 65, 684, 1658, 676, 1942, 507,
	932, 773, 1469, 88, 88, 88, 683, 1794, 1780, 1848,
	1204, 1102, 662, 1595, 1596, 309, 88, 88, 88, 1447,
	1842, 88, 775, 1196, 88, 1449, 1189, 549, 1563, 1664,
	1562, 1175, 88, 88, 1513, 781, 812, 65, 1013, 1170,
	88, 88, 1211, 1673, 88, 1279, 1174, 88, 88, 88,
	88, 1397, 1459, 88, 88, 1142, 796, 293, 20, 928,
	491, 749, 531, 1203, 752, 1454, 1111, 1391, 1062, 65,
	645, 1071, 1289, 656, 522, 1266, 1209, 1336, 813, 1263,
	300, 22, 298, 30, 1094, 297, 16, 949, 875, 299,
	8, 1126, 612, 785, 754, 1307, 782, 1135, 1004, 1206,
	1162, 655, 485, 544, 646, 613, 543, 550, 439, 541,
	954, 1104, 1047, 1043, 1795, 496, 1178, 66, 630, 629,
	877, 80, 678, 873, 628, 425, 435, 307, 416, 789,
	84, 494, 537, 20, 633, 611, 436, 1975, 1501, 798,
	1976, 2126, 490, 89, 778, 67, 428, 798, 1139, 306,
	306, 1103, 798, 490, 2105, 279, 22, 1793, 30, 1107,
	2100, 16, 1470, 1145, 2099, 8, 2096, 1145, 1095, 778,
	957, 958, 2086, 504, 2081, 1132, 510, 778, 2077, 517,
	1505, 778, 1408, 483, 513, 1506, 2048, 472, 310, 1132,
	1457, 1409, 1140, 960, 64, 64, 71, 2042, 2024, 473,
	778, 1793, 498, 2020, 2015, 1984, 778, 2014, 1132, 1972,
	1969, 482, 807, 1970, 1956, 1953, 959, 1793, 778, 1951,
	42, 42, 1793, 73, 1927, 768, 956, 778, 31, 43,
	43, 1926, 1141, 1138, 1793, 1898, 1145, 2030, 1145, 32,
	56, 1877, 1874, 1866, 1145, 1132, 1145, 1814, 679, 306,
	1145, 44, 44, 1813, 74, 1098, 1145, 88, 88, 88,
	88, 88, 69, 553, 1792, 58, 1703, 1793, 70, 1145,
	1457, 34, 965, 64, 1634, 1629, 1580, 1101, 1101, 1581,
	1578, 955, 1756, 1145, 491, 1145, 1577, 68, 1706, 1145,
	1576, 75, 47, 1145, 64, 1504, 1512, 1433, 1502, 42,
	1145, 1145, 59, 1143, 1436, 1095, 46, 778, 43, 1060,
	1200, 1149, 71, 778, 1145, 551, 1144, 1437, 799, 1145,
	42, 1283, 1131, 1195, 48, 1132, 799, 1098, 1157, 43,
	44, 799, 1100, 1059, 806, 1101, 1058, 807, 641, 73,
	921, 920, 867, 866, 778, 520, 566, 503, 526, 1796,
	899, 44, 1473, 587, 2124, 2108, 2095, 2057, 2043, 1954,
	1903, 1856, 1899, 1891, 71, 71, 71, 957, 958, 1890,
	74, 1889, 640, 1137, 55, 55, 1885, 1884, 69, 1883,
	1828, 1771, 88, 1766, 70, 1765, 538, 1822, 1764, 1714,
	960, 73, 73, 73, 547, 1136, 530, 88, 546, 546,
	88, 88, 1692, 1106, 1439, 528, 1663, 1638, 1408, 1585,
	1582, 45, 1570, 959, 1561, 1532, 1529, 1528, 1526, 974,
	1518, 1517, 74, 74, 74, 1435, 802, 1353, 61, 62,
	33, 69, 69, 49, 797, 60, 554, 70, 70, 924,
	50, 1304, 88, 955, 71, 88, 1303, 88, 88, 88,
	53, 88, 745, 55, 640, 68, 68, 1680, 931, 1471,
	1021, 1275, 57, 639, 1722, 71, 88, 2069, 2027, 965,
	627, 73, 2013, 1014, 55, 68, 2012, 88, 957, 958,
	2011, 961, 962, 963, 964, 966, 967, 63, 957, 958,
	553, 88, 73, 2003, 2001, 1992, 1979, 309, 553, 1965,
	88, 960, 74, 744, 1949, 88, 88, 88, 1913, 88,
	69, 960, 1896, 1868, 1831, 1819, 70, 626, 1799, 1698,
	1678, 1656, 975, 74, 959, 1654, 575, 1653, 88, 88,
	1821, 69, 1651, 1604, 959, 68, 88, 70, 88, 576,
	1603, 1560, 1636, 88, 1522, 1521, 1498, 1533, 1534, 1493,
	553, 553, 1268, 1424, 1382, 1380, 292, 1367, 309, 1276,
	88, 1366, 1346, 88, 1302, 88, 88, 88, 88, 88,
	88, 743, 1199, 88, 618, 1048, 569, 571, 88, 88,
	965, 882, 882, 1051, 1055, 619, 88, 622, 1041, 1040,
	965, 976, 1039, 787, 88, 1038, 1037, 616, 1036, 1035,
	1367, 801, 614, 930, 804, 1034, 1033, 1032, 1031, 957,
	958, 483, 88, 957, 958, 88, 772, 1030, 529, 1029,
	1533, 1534, 1028, 636, 637, 526, 1027, 642, 1026, 739,
	1025, 1018, 960, 975, 538, 953, 960, 1007, 68, 482,
	925, 508, 644, 573, 562, 560, 2107, 2079, 1974, 1539,
	1879, 777, 491, 1857, 779, 959, 1853, 808, 1827, 959,
	1826, 1681, 1014, 554, 1418, 810, 791, 788, 1533, 1534,
	310, 554, 1417, 1005, 923, 970, 968, 969, 961, 962,
	963, 964, 966, 967, 935, 1854, 745, 859, 2017, 861,
	1977, 1450, 1825, 762, 581, 860, 1410, 1095, 902, 863,
	1473, 579, 976, 895, 888, 894, 1053, 1584, 1023, 864,
	1054, 965, 760, 1583, 1477, 900, 907, 603, 88, 582,
	929, 1392, 1539, 554, 554, 1843, 88, 761, 1290, 904,
	88, 310, 908, 909, 910, 911, 912, 1103, 88, 88,
	580, 922, 88, 1723, 915, 916, 1044, 607, 938, 88,
	939, 483, 937, 287, 483, 483, 1404, 951, 78, 1591,
	2060, 2121, 649, 88, 975, 88, 88, 1807, 88, 2019,
	1509, 88, 1148, 88, 88, 1549, 88, 465, 553, 945,
	745, 608, 946, 947, 466, 1020, 1017, 1065, 969, 961,
	962, 963, 964, 966, 967, 1937, 1123, 2122, 1533, 1534,
	65, 963, 964, 966, 967, 65, 1936, 288, 755, 819,
	756, 1818, 77, 1350, 1139, 471, 1430, 470, 755, 1083,
	756, 1935, 1086, 1934, 480, 1076, 1078, 1619, 1618, 283,
	551, 898, 1788, 976, 1045, 1046, 1064, 1049, 738, 1588,
	1064, 1587, 1615, 1052, 1550, 1480, 1063, 1105, 1423, 1105,
	1548, 1422, 1421, 579, 1056, 1533, 1534, 1420, 1140, 1081,
	1537, 1538, 1540, 1541, 1635, 1789, 1097, 1490, 1250, 1127,
	309, 1093, 1068, 755, 1089, 756, 1146, 88, 284, 1349,
	2018, 757, 1488, 1092, 1091, 1088, 1221, 615, 88, 88,
	88, 757, 580, 519, 1129, 88, 88, 1128, 1141, 1138,
	1539, 1130, 88, 1109, 1118, 1190, 919, 1121, 475, 1122,
	1119, 1120, 546, 1622, 546, 1124, 1624, 970, 968, 969,
	961, 962, 963, 964, 966, 967, 1394, 88, 671, 967,
	309, 1535, 1536, 1537, 1538, 1540, 1541, 1918, 918, 289,
	1265, 1265, 783, 901, 76, 1485, 757, 572, 2067, 1606,
	792, 554, 1049, 1549, 1052, 1486, 1784, 1539, 1785, 1491,
	1151, 85, 85, 281, 1143, 309, 1201, 1046, 1045, 1143,
	765, 1466, 1150, 290, 408, 409, 410, 1290, 79, 427,
	2083, 1643, 440, 558, 1541, 604, 1787, 1398, 2132, 763,
	427, 440, 893, 892, 1790, 886, 883, 2121, 497, 497,
	2006, 489, 281, 2084, 764, 281, 281, 516, 281, 1431,
	476, 85, 523, 2092, 1168, 2138, 1193, 1194, 1378, 957,
	958, 1402, 1550, 1387, 1169, 1165, 1167, 1161, 1384, 286,
	285, 481, 88, 88, 88, 477, 1212, 1219, 88, 1137,
	1429, 88, 960, 310, 478, 605, 488, 88, 88, 88,
	88, 88, 1143, 1287, 1613, 957, 958, 1487, 1061, 88,
	1202, 1398, 88, 88, 1489, 959, 1786, 1467, 1352, 553,
	917, 770, 88, 753, 896, 1533, 1534, 88, 960, 88,
	787, 1072, 758, 769, 1272, 2143, 88, 1220, 798, 1270,
	766, 1247, 758, 490, 2093, 606, 88, 600, 491, 1360,
	1607, 959, 1277, 310, 1274, 765, 1544, 1542, 1543, 1535,
	1536, 1537, 1538, 1540, 1541, 557, 1042, 88, 88, 1298,
	1354, 965, 1273, 1153, 763, 577, 1317, 1339, 553, 414,
	578, 601, 1919, 851, 1155, 1185, 2131, 1988, 310, 764,
	1379, 1950, 2136, 1381, 1075, 2094, 1377, 758, 1364, 897,
	88, 1640, 88, 1156, 88, 1355, 1400, 965, 88, 882,
	1520, 1406, 88, 1002, 1674, 1154, 1535, 1536, 1537, 1538,
	1540, 1541, 1482, 1264, 975, 417, 1412, 1539, 1413, 1414,
	1438, 88, 1440, 1691, 490, 578, 1245, 1248, 487, 1462,
	845, 1641, 1623, 65, 2137, 1393, 422, 2091, 2120, 2118,
	1403, 418, 491, 1836, 1187, 594, 819, 819, 1465, 1411,
	975, 1416, 55, 2139, 1244, 281, 539, 281, 440, 440,
	1672, 1476, 590, 567, 565, 1415, 419, 2130, 1463, 631,
	1549, 632, 1390, 1929, 1752, 1074, 858, 1928, 1911, 631,
	1441, 1428, 554, 976, 1444, 421, 1432, 1426, 1427, 1894,
	1998, 1434, 1364, 1803, 632, 417, 591, 1127, 2149, 589,
	491, 1590, 1143, 1363, 2144, 1359, 1188, 799, 936, 927,
	1639, 2053, 914, 868, 1458, 1659, 422, 1806, 1864, 976,
	1511, 418, 1129, 1452, 1805, 1128, 1468, 1475, 1456, 1130,
	1838, 1453, 1442, 536, 1912, 1369, 1368, 1851, 1669, 1550,
	1464, 554, 1668, 1322, 1246, 577, 419, 872, 535, 887,
	884, 623, 488, 1649, 1829, 1073, 1271, 1909, 819, 491,
	1753, 1389, 1455, 1462, 1483, 421, 1754, 1481, 968, 969,
	961, 962, 963, 964, 966, 967, 1665, 1301, 1865, 1910,
	563, 1895, 1465, 1497, 1802, 870, 420, 1991, 1893, 1564,
	1697, 2148, 1621, 1527, 1460, 568, 1492, 871, 440, 440,
	1395, 1508, 1463, 1601, 1147, 1602, 961, 962, 963, 964,
	966, 967, 1099, 1087, 1600, 1804, 1084, 1461, 610, 88,
	88, 819, 609, 1544, 1542, 1543, 1535, 1536, 1537, 1538,
	1540, 1541, 1850, 602, 599, 944, 423, 598, 597, 844,
	427, 596, 595, 281, 88, 440, 621, 440, 88, 624,
	88, 1567, 1568, 1569, 592, 534, 527, 88, 1586, 1630,
	553, 1565, 819, 1655, 497, 1024, 420, 906, 88, 1300,
	1610, 88, 1612, 2087, 1464, 281, 2050, 1593, 1777, 1611,
	1652, 309, 1609, 88, 1589, 1446, 1191, 1614, 1183, 85,
	1125, 1661, 805, 1627, 1682, 803, 1620, 1679, 281, 800,
	795, 65, 771, 281, 281, 281, 767, 793, 1667, 1625,
	759, 1670, 1633, 1632, 1660, 1631, 423, 1642, 1644, 1645,
	1377, 1711, 1448, 1944, 1650, 634, 281, 281, 2122, 1197,
	584, 88, 533, 501, 85, 532, 85, 890, 1849, 1064,
	81, 440, 1716, 1717, 1718, 1079, 1064, 1675, 1676, 1946,
	1080, 1662, 1077, 1628, 1671, 2008, 1796, 2045, 440, 1261,
	3, 440, 588, 85, 440, 440, 440, 440, 440, 413,
	1700, 913, 304, 25, 1259, 1666, 440, 440, 638, 1085,
	1082, 2031, 691, 1834, 427, 1710, 741, 1707, 1198, 1186,
	1182, 1108, 934, 952, 635, 862, 811, 1724, 88, 88,
	88, 1729, 502, 740, 1134, 303, 24, 1726, 2146, 2147,
	497, 585, 2080, 523, 2034, 88, 1731, 1861, 524, 424,
	88, 525, 88, 521, 88, 88, 88, 845, 845, 88,
	88, 1759, 553, 554, 1760, 1801, 509, 1255, 1683, 1601,
	1772, 1602, 1646, 1212, 1727, 1256, 1797, 1257, 25, 1637,
	1600, 1262, 1212, 1732, 310, 1788, 1773, 1800, 1781, 302,
	23, 1776, 301, 11, 88, 88, 1779, 1579, 305, 10,
	1783, 553, 464, 688, 295, 9, 294, 7, 1419, 88,
	88, 24, 1351, 88, 1832, 1763, 1348, 1601, 1789, 1602,
	1347, 553, 1601, 88, 1602, 1297, 1860, 1817, 1600, 1160,
	88, 1011, 1840, 1600, 1881, 1830, 1859, 296, 4, 1782,
	1835, 2066, 491, 957, 958, 1943, 281, 1869, 1719, 1846,
	1847, 1443, 1824, 1852, 1069, 1839, 1021, 1823, 281, 1841,
	857, 467, 468, 88, 1833, 23, 281, 1090, 11, 845,
	281, 865, 1019, 551, 10, 957, 958, 1096, 1858, 1258,
	9, 474, 7, 1533, 1534, 1917, 1260, 957, 958, 959,
	415, 281, 905, 1116, 1117, 593, 281, 1855, 960, 281,
	1677, 440, 440, 2082, 440, 1873, 647, 647, 1886, 1784,
	1519, 1785, 819, 4, 1961, 750, 1159, 1158, 88, 1987,
	88, 959, 309, 88, 1299, 1022, 41, 1598, 1892, 665,
	1778, 88, 845, 1592, 1177, 554, 737, 309, 1176, 1787,
	312, 891, 687, 819, 819, 876, 885, 1790, 1308, 1213,
	742, 689, 819, 819, 816, 690, 817, 1050, 1010, 1601,
	677, 1602, 88, 814, 1904, 1323, 844, 844, 1112, 1269,
	1600, 1288, 1507, 845, 554, 1015, 657, 88, 1920, 1905,
	553, 311, 1945, 669, 88, 819, 1939, 668, 1921, 1285,
	559, 1923, 88, 1862, 554, 1947, 54, 1601, 574, 1602,
	88, 1938, 434, 1973, 1401, 1163, 1820, 1192, 1600, 88,
	88, 1959, 1971, 940, 1608, 1952, 281, 281, 281, 1786,
	479, 1978, 1981, 281, 1173, 1530, 1968, 1964, 787, 1980,
	523, 1960, 1967, 561, 1958, 1932, 1933, 1329, 941, 943,
	1986, 1321, 1318, 617, 748, 950, 1003, 1113, 586, 1407,
	88, 1133, 643, 948, 500, 281, 1931, 997, 998, 999,
	1000, 1001, 1955, 2002, 499, 1172, 583, 1009, 869, 1152,
	996, 993, 469, 2000, 661, 88, 88, 1016, 844, 1907,
	1997, 1184, 1362, 2005, 2142, 1996, 2007, 88, 1605, 2059,
	72, 88, 2016, 1941, 1922, 310, 1388, 29, 26, 553,
	21, 2025, 2004, 1993, 19, 18, 88, 28, 2023, 280,
	310, 491, 88, 2026, 17, 2035, 27, 819, 309, 88,
	88, 15, 2040, 2033, 14, 13, 2032, 2029, 12, 40,
	2028, 2037, 2036, 39, 38, 37, 65, 36, 35, 6,
	2041, 844, 88, 5, 88, 2044, 2, 88, 505, 309,
	1, 512, 515, 554, 505, 0, 0, 0, 0, 0,
	281, 1357, 1358, 0, 2055, 0, 1069, 0, 0, 1365,
	2070, 88, 0, 2072, 88, 1370, 1371, 1373, 1375, 1376,
	0, 2071, 844, 2065, 0, 2076, 2078, 1383, 0, 2075,
	1385, 281, 2074, 1601, 0, 1602, 1323, 1323, 2056, 2047,
	281, 0, 2068, 0, 1600, 281, 0, 1405, 88, 2097,
	88, 2073, 0, 0, 281, 0, 0, 0, 2104, 2102,
	0, 0, 2101, 0, 281, 0, 819, 0, 88, 555,
	2103, 0, 0, 2115, 2106, 0, 0, 0, 2119, 2117,
	0, 0, 0, 2123, 0, 1163, 1163, 88, 0, 0,
	2128, 0, 0, 2129, 0, 0, 0, 1323, 1323, 1323,
	0, 0, 2127, 0, 1458, 0, 2141, 2140, 0, 0,
	0, 0, 554, 818, 2145, 2038, 0, 847, 934, 0,
	934, 0, 440, 0, 2125, 0, 281, 0, 2150, 0,
	1451, 310, 0, 845, 846, 0, 0, 0, 0, 0,
	0, 0, 1533, 1534, 0, 1280, 2061, 0, 0, 281,
	0, 0, 1284, 1462, 0, 819, 1292, 0, 0, 0,
	0, 0, 310, 0, 845, 845, 0, 1309, 1309, 1320,
	0, 1331, 1465, 845, 845, 0, 0, 1343, 1344, 1345,
	0, 0, 0, 0, 1460, 0, 0, 0, 0, 1533,
	1534, 0, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 505, 647, 515, 815, 0, 845, 1461, 1222, 1223,
	1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233,
	1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243,
	0, 1249, 0, 1251, 1252, 1253, 1254, 0, 0, 0,
	0, 0, 0, 0, 1539, 0, 0, 0, 0, 0,
	0, 819, 1278, 0, 1323, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1305, 1306, 0, 0, 1319, 0,
	1330, 1332, 1337, 1340, 1341, 1342, 0, 0, 0, 0,
	0, 1539, 0, 0, 0, 0, 555, 1549, 0, 0,
	0, 0, 0, 311, 555, 750, 1597, 0, 1323, 1323,
	1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
	1323, 1323, 1323, 1323, 1323, 1323, 1323, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 845, 0,
	0, 0, 844, 0, 1549, 0, 0, 281, 281, 0,
	1399, 0, 0, 0, 0, 0, 555, 555, 0, 0,
	0, 0, 0, 0, 311, 0, 1550, 0, 0, 0,
	0, 0, 1647, 844, 844, 0, 1069, 0, 934, 0,
	0, 0, 844, 844, 0, 1657, 0, 0, 0, 505,
	0, 0, 1425, 0, 666, 52, 281, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 1690, 0, 1550, 1499, 844, 0, 0, 0, 0,
	0, 746, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 1516, 0, 0, 0, 0, 52, 0,
	0, 0, 950, 0, 786, 0, 0, 845, 0, 505,
	790, 790, 1543, 1535, 1536, 1537, 1538, 1540, 1541, 1721,
	484, 0, 0, 492, 0, 1559, 0, 0, 0, 0,
	52, 0, 512, 515, 0, 0, 1572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1478, 1479, 0, 0, 0, 0, 1484, 1542, 1543,
	1535, 1536, 1537, 1538, 1540, 1541, 0, 0, 0, 0,
	818, 818, 0, 0, 847, 847, 0, 0, 1616, 0,
	1617, 0, 0, 0, 0, 0, 1774, 1775, 1069, 0,
	1503, 846, 846, 0, 0, 0, 845, 1510, 0, 0,
	1514, 0, 1597, 523, 0, 0, 0, 844, 1808, 1523,
	1809, 0, 281, 1811, 1812, 0, 0, 1815, 281, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1009, 0, 0, 1494, 1495, 0,
	1337, 1337, 1337, 0, 555, 0, 0, 0, 0, 0,
	1597, 0, 523, 1173, 0, 1597, 0, 0, 0, 0,
	0, 815, 815, 0, 0, 0, 0, 281, 281, 1686,
	0, 281, 0, 1594, 0, 0, 0, 0, 0, 0,
	0, 1690, 818, 0, 0, 0, 847, 0, 1867, 0,
	0, 0, 845, 0, 0, 0, 1704, 0, 1556, 1557,
	1558, 0, 0, 846, 0, 647, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 844, 750, 0, 0,
	0, 1887, 1057, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 505, 0, 311, 0, 0, 0,
	0, 0, 515, 0, 0, 818, 505, 492, 0, 847,
	0, 0, 0, 0, 0, 0, 0, 0, 1757, 0,
	0, 0, 0, 0, 0, 0, 846, 1114, 0, 1767,
	0, 0, 515, 815, 0, 515, 1069, 0, 1906, 0,
	0, 1908, 0, 0, 1693, 0, 818, 1694, 0, 281,
	847, 0, 1597, 0, 0, 0, 311, 0, 0, 1699,
	0, 0, 0, 0, 0, 844, 0, 846, 1708, 0,
	0, 0, 0, 0, 0, 0, 1712, 1940, 0, 1425,
	523, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	1597, 311, 0, 0, 1728, 281, 815, 0, 1730, 0,
	0, 0, 1963, 0, 0, 0, 0, 0, 0, 0,
	281, 0, 0, 0, 0, 1695, 1696, 0, 1690, 0,
	0, 0, 0, 0, 1845, 0, 0, 523, 1690, 0,
	0, 1761, 1762, 0, 0, 0, 0, 815, 0, 0,
	1768, 1769, 1770, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1164, 515, 1166, 0, 0, 0, 0, 505,
	0, 844, 0, 0, 0, 0, 1798, 0, 934, 1733,
	1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 0, 1755,
	0, 1207, 0, 2009, 2010, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2021, 0, 0, 484, 2022,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 523, 0, 0, 0, 0, 0,
	1690, 0, 1844, 0, 0, 0, 0, 1690, 523, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 0, 0, 1925, 0, 0,
	2054, 0, 523, 0, 1872, 281, 0, 0, 1875, 1876,
	0, 0, 0, 1878, 0, 0, 0, 0, 0, 0,
	1880, 0, 1882, 0, 0, 0, 1597, 0, 0, 1963,
	1888, 0, 1690, 957, 958, 0, 1356, 0, 0, 987,
	988, 989, 0, 0, 0, 0, 0, 1533, 1534, 0,
	1551, 1552, 1553, 0, 0, 0, 960, 0, 0, 991,
	0, 0, 0, 1897, 0, 0, 281, 1386, 523, 0,
	0, 0, 0, 0, 0, 0, 1396, 0, 0, 959,
	0, 786, 0, 0, 0, 974, 2116, 0, 484, 0,
	786, 484, 484, 0, 0, 0, 0, 0, 0, 1548,
	505, 0, 0, 0, 0, 1690, 818, 0, 0, 0,
	847, 0, 1930, 1006, 0, 1008, 0, 0, 0, 0,
	0, 0, 1012, 0, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 0, 0, 965, 0, 818, 818, 0,
	0, 847, 847, 0, 0, 0, 818, 818, 0, 1539,
	847, 847, 0, 0, 984, 992, 0, 1966, 846, 846,
	0, 0, 1445, 1914, 0, 0, 0, 846, 846, 1555,
	0, 0, 0, 0, 0, 0, 0, 1982, 1983, 818,
	0, 0, 982, 847, 1554, 1207, 0, 0, 975, 0,
	0, 0, 0, 0, 0, 0, 0, 815, 0, 0,
	846, 0, 1549, 0, 0, 0, 0, 1995, 0, 2062,
	2063, 2064, 0, 0, 0, 0, 52, 0, 0, 52,
	1999, 0, 0, 0, 0, 0, 0, 0, 815, 815,
	0, 0, 0, 0, 0, 0, 0, 815, 815, 0,
	0, 0, 0, 2085, 52, 0, 52, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 750, 976, 0, 0,
	0, 52, 0, 0, 0, 0, 52, 1990, 0, 0,
	815, 1550, 985, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 0, 0,
	0, 818, 0, 0, 0, 847, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 846, 983, 0, 0, 0, 0, 0, 986,
	0, 970, 968, 969, 961, 962, 963, 964, 966, 967,
	1545, 1546, 1547, 0, 0, 1544, 1542, 1543, 1535, 1536,
	1537, 1538, 1540, 1541, 0, 2046, 0, 2098, 0, 957,
	958, 0, 977, 978, 979, 987, 988, 989, 0, 0,
	0, 0, 0, 1114, 1207, 980, 0, 0, 0, 0,
	2114, 2114, 960, 0, 0, 991, 0, 0, 0, 0,
	0, 0, 815, 0, 0, 0, 0, 0, 0, 0,
	0, 1208, 0, 0, 0, 959, 0, 0, 2114, 0,
	818, 974, 0, 0, 847, 0, 1533, 1534, 0, 1551,
	1552, 1553, 1207, 0, 0, 1207, 0, 0, 0, 0,
	0, 846, 1871, 0, 0, 0, 0, 1267, 0, 0,
	0, 0, 0, 2114, 0, 0, 0, 0, 555, 0,
	0, 0, 0, 0, 1533, 1534, 0, 1551, 1552, 1553,
	0, 965, 0, 0, 0, 0, 0, 0, 1548, 0,
	1870, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	984, 992, 0, 0, 0, 0, 0, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 990, 0, 0, 818,
	0, 815, 0, 847, 0, 0, 1548, 555, 982, 0,
	0, 0, 0, 0, 975, 0, 0, 0, 1539, 0,
	846, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	52, 0, 0, 0, 0, 0, 0, 1533, 1534, 981,
	1551, 1552, 1553, 0, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 1554, 0, 0, 1539, 0, 0, 957,
	958, 0, 977, 978, 979, 987, 988, 989, 0, 0,
	0, 1549, 0, 0, 0, 980, 0, 0, 1810, 0,
	0, 0, 960, 976, 1816, 991, 0, 0, 0, 1548,
	815, 1554, 0, 0, 0, 818, 0, 0, 985, 847,
	0, 0, 0, 0, 0, 959, 0, 0, 311, 1549,
	0, 974, 0, 0, 0, 0, 846, 0, 0, 0,
	0, 0, 0, 311, 0, 0, 0, 52, 0, 0,
	0, 52, 0, 1207, 1207, 0, 0, 1207, 0, 1539,
	1550, 0, 1533, 1534, 52, 1551, 1552, 1553, 0, 0,
	0, 0, 0, 0, 0, 1474, 0, 0, 1702, 983,
	0, 965, 971, 972, 973, 986, 555, 970, 968, 969,
	961, 962, 963, 964, 966, 967, 0, 0, 1550, 0,
	984, 992, 0, 1900, 0, 0, 815, 0, 0, 0,
	0, 0, 1549, 1267, 1548, 0, 990, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 1008, 975, 0, 0, 0, 0, 1545,
	1546, 1547, 0, 0, 1544, 1542, 1543, 1535, 1536, 1537,
	1538, 1540, 1541, 0, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 1539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1915, 0, 1545, 1546, 1547,
	0, 1550, 1544, 1542, 1543, 1535, 1536, 1537, 1538, 1540,
	1541, 0, 1008, 0, 0, 0, 0, 0, 0, 1554,
	0, 0, 0, 976, 0, 555, 957, 958, 0, 977,
	978, 979, 987, 988, 989, 0, 0, 1549, 985, 0,
	0, 1957, 980, 0, 311, 0, 0, 0, 0, 960,
	0, 0, 991, 0, 0, 0, 1207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 311, 0, 0, 974, 0,
	1545, 1546, 1547, 0, 0, 1544, 1542, 1543, 1535, 1536,
	1537, 1538, 1540, 1541, 1208, 0, 0, 0, 0, 983,
	0, 0, 971, 972, 973, 986, 1550, 970, 968, 969,
	961, 962, 963, 964, 966, 967, 0, 0, 0, 0,
	0, 1533, 1534, 1575, 1551, 1552, 1553, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 1701, 0, 0,
	0, 0, 1208, 0, 0, 1208, 0, 984, 992, 0,
	0, 0, 52, 957, 958, 0, 977, 978, 979, 987,
	988, 989, 0, 990, 0, 0, 0, 0, 0, 980,
	0, 0, 0, 1548, 0, 982, 960, 0, 0, 991,
	0, 975, 0, 0, 0, 1545, 1546, 1547, 0, 0,
	1544, 1542, 1543, 1535, 1536, 1537, 1538, 1540, 1541, 959,
	0, 0, 0, 0, 0, 974, 981, 0, 0, 0,
	0, 2058, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	976, 0, 0, 0, 0, 965, 0, 0, 1554, 1533,
	1534, 0, 1551, 1552, 1553, 985, 0, 0, 0, 0,
	0, 0, 1114, 0, 984, 992, 1549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	990, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 975, 0,
	0, 1548, 0, 0, 52, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 983, 0, 0, 971,
	972, 973, 986, 981, 970, 968, 969, 961, 962, 963,
	964, 966, 967, 0, 441, 1550, 0, 0, 0, 0,
	1574, 0, 0, 1208, 1208, 0, 0, 1208, 0, 0,
	0, 1539, 442, 0, 0, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 985, 0, 443, 0, 1554, 0, 0, 446,
	0, 0, 0, 0, 451, 452, 0, 0, 460, 0,
	0, 0, 0, 0, 1549, 0, 0, 0, 0, 0,
	445, 447, 0, 0, 1545, 1546, 1547, 0, 0, 1544,
	1542, 1543, 1535, 1536, 1537, 1538, 1540, 1541, 0, 0,
	0, 0, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 983, 0, 0, 971, 972, 973, 986,
	448, 970, 968, 969, 961, 962, 963, 964, 966, 967,
	0, 0, 0, 0, 449, 450, 0, 1573, 0, 0,
	0, 0, 0, 1550, 0, 0, 0, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 455, 0, 0, 0, 0, 0, 0, 0, 0,
	1948, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1545, 1546, 1547, 0, 0, 1544, 1542, 1543,
	1535, 1536, 1537, 1538, 1540, 1541, 0, 0, 0, 0,
	0, 0, 0, 456, 444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 457, 0, 462,
	0, 0, 0, 458, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 461, 0, 1008, 0, 0, 0, 0, 0,
	0, 0, 308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 90, 91,
	327, 92, 328, 329, 330, 331, 228, 332, 333, 334,
	335, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 336, 97, 235, 236, 98, 337, 338, 237, 238,
	239, 339, 99, 240, 340, 313, 341, 100, 101, 102,
	0, 103, 342, 104, 105, 106, 343, 314, 107, 108,
	344, 345, 346, 347, 348, 349, 109, 110, 282, 111,
	241, 112, 242, 243, 350, 113, 351, 114, 352, 353,
	354, 115, 116, 355, 117, 356, 0, 357, 244, 118,
	119, 120, 245, 246, 358, 359, 360, 121, 122, 247,
	0, 123, 361, 124, 362, 363, 315, 364, 125, 248,
	365, 249, 366, 126, 127, 128, 129, 250, 251, 317,
	367, 133, 368, 130, 369, 316, 131, 252, 132, 253,
	254, 255, 370, 256, 371, 318, 134, 319, 135, 136,
	372, 138, 137, 373, 257, 320, 139, 321, 374, 140,
	375, 376, 141, 0, 142, 143, 144, 146, 258, 145,
	322, 147, 148, 150, 149, 377, 378, 379, 259, 151,
	260, 152, 153, 380, 154, 381, 382, 155, 383, 384,
	156, 261, 323, 157, 324, 262, 158, 159, 160, 161,
	385, 263, 162, 264, 163, 386, 164, 165, 166, 167,
	265, 168, 169, 387, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 388, 181, 325, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 389, 267, 192,
	193, 194, 390, 195, 185, 186, 196, 326, 197, 268,
	269, 198, 391, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 392, 205, 393, 206, 207, 208, 209, 210,
	394, 272, 273, 274, 395, 396, 211, 275, 276, 397,
	212, 213, 214, 215, 398, 399, 216, 217, 218, 400,
	219, 401, 220, 221, 222, 277, 278, 402, 403, 223,
	404, 405, 406, 407, 224, 225, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 308,
	0, 0, 0, 0, 0, 0, 1684, 0, 0, 0,
	0, 0, 0, 0, 1685, 90, 91, 327, 92, 328,
	329, 330, 331, 228, 332, 333, 334, 335, 93, 94,
	95, 229, 230, 231, 232, 96, 233, 234, 336, 97,
	235, 236, 98, 337, 338, 237, 238, 239, 339, 99,
	240, 340, 313, 341, 100, 101, 102, 0, 103, 342,
	104, 105, 106, 343, 314, 107, 108, 344, 345, 346,
	347, 348, 349, 109, 110, 282, 111, 241, 112, 242,
	243, 350, 113, 351, 114, 352, 353, 354, 115, 116,
	355, 117, 356, 0, 357, 244, 118, 119, 120, 245,
	246, 358, 359, 360, 121, 122, 247, 0, 123, 361,
	124, 362, 363, 315, 364, 125, 248, 365, 249, 366,
	126, 127, 128, 129, 250, 251, 317, 367, 133, 368,
	130, 369, 316, 131, 252, 132, 253, 254, 255, 370,
	256, 371, 318, 134, 319, 135, 136, 372, 138, 137,
	373, 257, 320, 139, 321, 374, 140, 375, 376, 141,
	0, 142, 143, 144, 146, 258, 145, 322, 147, 148,
	150, 149, 377, 378, 379, 259, 151, 260, 152, 153,
	380, 154, 381, 382, 155, 383, 384, 156, 261, 323,
	157, 324, 262, 158, 159, 160, 161, 385, 263, 162,
	264, 163, 386, 164, 165, 166, 167, 265, 168, 169,
	387, 170, 171, 172, 173, 174, 176, 177, 175, 178,
	179, 180, 388, 181, 325, 182, 183, 266, 184, 0,
	188, 189, 190, 191, 389, 267, 192, 193, 194, 390,
	195, 185, 186, 196, 326, 197, 268, 269, 198, 391,
	204, 199, 200, 187, 201, 203, 270, 202, 271, 392,
	205, 393, 206, 207, 208, 209, 210, 394, 272, 273,
	274, 395, 396, 211, 275, 276, 397, 212, 213, 214,
	215, 398, 399, 216, 217, 218, 400, 219, 401, 220,
	221, 222, 277, 278, 402, 403, 223, 404, 405, 406,
	407, 224, 225, 226, 227, 0, 0, 0, 308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2039, 90, 91, 327, 92, 328, 329,
	330, 331, 228, 332, 333, 334, 335, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 336, 97, 235,
	236, 98, 337, 338, 237, 238, 239, 339, 99, 240,
	340, 313, 341, 100, 101, 102, 0, 103, 342, 104,
	105, 106, 343, 314, 107, 108, 344, 345, 346, 347,
	348, 349, 109, 110, 282, 111, 241, 112, 242, 243,
	350, 113, 351, 114, 352, 353, 354, 115, 116, 355,
	117, 356, 0, 357, 244, 118, 119, 120, 245, 246,
	358, 359, 360, 121, 122, 247, 0, 123, 361, 124,
	362, 363, 315, 364, 125, 248, 365, 249, 366, 126,
	127, 128, 129, 250, 251, 317, 367, 133, 368, 130,
	369, 316, 131, 252, 132, 253, 254, 255, 370, 256,
	371, 318, 134, 319, 135, 136, 372, 138, 137, 373,
	257, 320, 139, 321, 374, 140, 375, 376, 141, 0,
	142, 143, 144, 146, 258, 145, 322, 147, 148, 150,
	149, 377, 378, 379, 259, 151, 260, 152, 153, 380,
	154, 381, 382, 155, 383, 384, 156, 261, 323, 157,
	324, 262, 158, 159, 160, 161, 385, 263, 162, 264,
	163, 386, 164, 165, 166, 167, 265, 168, 169, 387,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 388, 181, 325, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 389, 267, 192, 193, 194, 390, 195,
	185, 186, 196, 326, 197, 268, 269, 198, 391, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 392, 205,
	393, 206, 207, 208, 209, 210, 394, 272, 273, 274,
	395, 396, 211, 275, 276, 397, 212, 213, 214, 215,
	398, 399, 216, 217, 218, 400, 219, 401, 220, 221,
	222, 277, 278, 402, 403, 223, 404, 405, 406, 407,
	224, 225, 226, 227, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 780, 0, 0,
	90, 91, 327, 92, 328, 329, 330, 331, 228, 332,
	333, 334, 335, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 336, 97, 235, 236, 98, 337, 338,
	237, 238, 239, 339, 99, 240, 340, 313, 341, 100,
	101, 102, 0, 103, 342, 104, 105, 106, 343, 314,
	107, 108, 344, 345, 346, 347, 348, 349, 109, 110,
	282, 111, 241, 112, 242, 243, 350, 113, 351, 114,
	352, 353, 354, 115, 116, 355, 117, 356, 0, 357,
	244, 118, 119, 120, 245, 246, 358, 359, 360, 121,
	122, 247, 0, 123, 361, 124, 362, 363, 315, 364,
	125, 248, 365, 249, 366, 126, 127, 128, 129, 250,
	251, 317, 367, 133, 368, 130, 369, 316, 131, 252,
	132, 253, 254, 255, 370, 256, 371, 318, 134, 319,
	135, 136, 372, 138, 137, 373, 257, 320, 139, 321,
	374, 140, 375, 376, 141, 0, 142, 143, 144, 146,
	258, 145, 322, 147, 148, 150, 149, 377, 378, 379,
	259, 151, 260, 152, 153, 380, 154, 381, 382, 155,
	383, 384, 156, 261, 323, 157, 324, 262, 158, 159,
	160, 161, 385, 263, 162, 264, 163, 386, 164, 165,
	166, 167, 265, 168, 169, 387, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 388, 181, 325,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 389,
	267, 192, 193, 194, 390, 195, 185, 186, 196, 326,
	197, 268, 269, 198, 391, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 392, 205, 393, 206, 207, 208,
	209, 210, 394, 272, 273, 274, 395, 396, 211, 275,
	276, 397, 212, 213, 214, 215, 398, 399, 216, 217,
	218, 400, 219, 401, 220, 221, 222, 277, 278, 402,
	403, 223, 404, 405, 406, 407, 224, 225, 226, 227,
	685, 674, 675, 672, 673, 664, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 701, 667, 0, 0, 0, 93,
	94, 95, 229, 716, 231, 717, 96, 718, 719, 0,
	97, 235, 236, 98, 670, 700, 720, 721, 239, 0,
	99, 712, 0, 693, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 314, 107, 108, 0, 694,
	696, 0, 695, 697, 109, 110, 282, 111, 722, 112,
	723, 724, 751, 113, 0, 114, 0, 0, 0, 715,
	116, 0, 117, 0, 0, 0, 658, 118, 119, 120,
	702, 703, 681, 0, 0, 121, 122, 725, 0, 123,
	0, 124, 0, 0, 315, 0, 125, 713, 0, 249,
	0, 126, 127, 128, 129, 709, 711, 317, 0, 133,
	0, 130, 0, 316, 131, 726, 132, 727, 728, 729,
	0, 692, 0, 318, 134, 319, 135, 136, 0, 138,
	137, 0, 714, 320, 139, 321, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 322, 147,
	148, 150, 149, 653, 0, 682, 710, 151, 730, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	323, 157, 324, 704, 158, 159, 160, 161, 0, 705,
	162, 264, 163, 0, 164, 165, 166, 167, 731, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 325, 182, 183, 659, 184,
	0, 188, 189, 190, 191, 71, 267, 192, 193, 194,
	698, 195, 185, 186, 196, 326, 197, 732, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 733, 202, 706,
	0, 205, 73, 206, 207, 208, 209, 210, 0, 272,
	734, 735, 0, 0, 211, 707, 708, 680, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 699, 219, 0,
	220, 221, 222, 556, 736, 0, 0, 223, 0, 0,
	0, 69, 224, 225, 226, 227, 654, 70, 0, 0,
	0, 0, 652, 0, 0, 0, 0, 650, 651, 685,
	674, 675, 672, 673, 664, 0, 660, 0, 0, 0,
	0, 663, 0, 0, 0, 90, 91, 1294, 92, 0,
	0, 0, 0, 701, 667, 0, 0, 0, 93, 94,
	95, 229, 716, 231, 717, 96, 718, 719, 0, 97,
	235, 236, 98, 670, 700, 720, 721, 239, 0, 99,
	712, 0, 693, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 314, 107, 108, 0, 694, 696,
	0, 695, 697, 109, 110, 282, 111, 722, 112, 723,
	724, 0, 113, 0, 114, 0, 1295, 0, 715, 116,
	0, 117, 0, 0, 0, 658, 118, 119, 120, 702,
	703, 681, 0, 0, 121, 122, 725, 0, 123, 0,
	124, 0, 0, 315, 0, 125, 713, 0, 249, 0,
	126, 127, 128, 129, 709, 711, 317, 0, 133, 0,
	130, 0, 316, 131, 726, 132, 727, 728, 729, 0,
	692, 0, 318, 134, 319, 135, 136, 0, 138, 137,
	0, 714, 320, 139, 321, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 258, 145, 322, 147, 148,
	150, 149, 653, 0, 682, 710, 151, 730, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 261, 323,
	157, 324, 704, 158, 159, 160, 161, 0, 705, 162,
	264, 163, 0, 164, 165, 166, 167, 731, 168, 169,
	0, 170, 171, 172, 173, 174, 176, 177, 175, 178,
	179, 180, 0, 181, 325, 182, 183, 659, 184, 0,
	188, 189, 190, 191, 0, 267, 192, 193, 194, 698,
	195, 185, 186, 196, 326, 197, 732, 269, 198, 0,
	204, 199, 200, 187, 201, 203, 733, 202, 706, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 272, 734,
	735, 0, 0, 211, 707, 708, 680, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 699, 219, 0, 220,
	221, 222, 277, 736, 1293, 0, 223, 0, 0, 0,
	0, 224, 225, 226, 227, 654, 0, 0, 0, 0,
	0, 652, 0, 0, 0, 0, 650, 651, 1296, 685,
	674, 675, 672, 673, 664, 660, 1291, 0, 0, 0,
	663, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 701, 667, 0, 0, 0, 93, 94,
	95, 229, 716, 231, 717, 96, 718, 719, 0, 97,
	235, 236, 98, 670, 700, 720, 721, 239, 0, 99,
	712, 0, 693, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 314, 107, 108, 0, 694, 696,
	0, 695, 697, 109, 110, 282, 111, 722, 112, 723,
	724, 0, 113, 0, 114, 0, 0, 0, 715, 116,
	0, 117, 0, 0, 0, 658, 118, 119, 120, 702,
	703, 681, 0, 0, 121, 122, 725, 0, 123, 0,
	124, 0, 0, 315, 0, 125, 713, 0, 249, 0,
	126, 127, 128, 129, 709, 711, 317, 0, 133, 0,
	130, 0, 316, 131, 726, 132, 727, 728, 729, 0,
	692, 0, 318, 134, 319, 135, 136, 0, 138, 137,
	0, 714, 320, 139, 321, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 258, 145, 322, 147, 148,
	150, 149, 653, 0, 682, 710, 151, 730, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 261, 323,
	157, 324, 704, 158, 159, 160, 161, 0, 705, 162,
	264, 163, 0, 164, 165, 166, 167, 731, 168, 169,
	0, 170, 171, 172, 173, 174, 176, 177, 175, 178,
	179, 180, 0, 181, 325, 182, 183, 659, 184, 0,
	188, 189, 190, 191, 71, 267, 192, 193, 194, 698,
	195, 185, 186, 196, 326, 197, 732, 269, 198, 0,
	204, 199, 200, 187, 201, 203, 733, 202, 706, 0,
	205, 73, 206, 207, 208, 209, 210, 0, 272, 734,
	735, 0, 0, 211, 707, 708, 680, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 699, 219, 0, 220,
	221, 222, 556, 736, 0, 0, 223, 0, 0, 0,
	69, 224, 225, 226, 227, 654, 70, 0, 0, 0,
	0, 652, 0, 0, 0, 0, 650, 651, 685, 674,
	675, 672, 673, 664, 0, 660, 0, 0, 0, 0,
	663, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 701, 667, 0, 0, 0, 93, 94, 95,
	229, 716, 231, 717, 96, 718, 719, 1333, 97, 235,
	236, 98, 670, 700, 720, 721, 239, 0, 99, 712,
	0, 693, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 314, 107, 108, 0, 694, 696, 0,
	695, 697, 109, 110, 282, 111, 722, 112, 723, 724,
	0, 113, 0, 114, 0, 0, 0, 715, 116, 0,
	117, 0, 0, 0, 658, 118, 119, 120, 702, 703,
	681, 0, 0, 121, 122, 725, 0, 123, 0, 124,
	0, 1338, 315, 0, 125, 713, 0, 249, 0, 126,
	127, 128, 129, 709, 711, 317, 0, 133, 0, 130,
	0, 316, 131, 726, 132, 727, 728, 729, 0, 692,
	0, 318, 134, 319, 135, 136, 0, 138, 137, 1334,
	714, 320, 139, 321, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 322, 147, 148, 150,
	149, 653, 0, 682, 710, 151, 730, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 323, 157,
	324, 704, 158, 159, 160, 161, 0, 705, 162, 264,
	163, 0, 164, 165, 166, 167, 731, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 325, 182, 183, 659, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 698, 195,
	185, 186, 196, 326, 197, 732, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 733, 202, 706, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 734, 735,
	0, 1335, 211, 707, 708, 680, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 699, 219, 0, 220, 221,
	222, 277, 736, 0, 0, 223, 0, 0, 0, 0,
	224, 225, 226, 227, 654, 0, 0, 0, 0, 0,
	652, 0, 0, 0, 0, 650, 651, 685, 674, 675,
	672, 673, 664, 0, 660, 0, 0, 0, 0, 663,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 701, 667, 0, 0, 0, 93, 94, 95, 229,
	716, 231, 717, 96, 718, 719, 0, 97, 235, 236,
	98, 670, 700, 720, 721, 239, 0, 99, 712, 0,
	693, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 314, 107, 108, 0, 694, 696, 0, 695,
	697, 109, 110, 282, 111, 722, 112, 723, 724, 0,
	113, 0, 114, 0, 0, 0, 715, 116, 0, 117,
	0, 0, 0, 658, 118, 119, 120, 702, 703, 681,
	0, 0, 121, 122, 725, 0, 123, 0, 124, 0,
	0, 315, 0, 125, 713, 0, 249, 0, 126, 127,
	128, 129, 709, 711, 317, 0, 133, 0, 130, 0,
	316, 131, 726, 132, 727, 728, 729, 0, 692, 0,
	318, 134, 319, 135, 136, 0, 138, 137, 0, 714,
	320, 139, 321, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 258, 145, 322, 147, 148, 150, 149,
	653, 1626, 682, 710, 151, 730, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 261, 323, 157, 324,
	704, 158, 159, 160, 161, 0, 705, 162, 264, 163,
	0, 164, 165, 166, 167, 731, 168, 169, 0, 170,
	171, 172, 173, 174, 176, 177, 175, 178, 179, 180,
	0, 181, 325, 182, 183, 659, 184, 0, 188, 189,
	190, 191, 0, 267, 192, 193, 194, 698, 195, 185,
	186, 196, 326, 197, 732, 269, 198, 0, 204, 199,
	200, 187, 201, 203, 733, 202, 706, 0, 205, 0,
	206, 207, 208, 209, 210, 0, 272, 734, 735, 0,
	0, 211, 707, 708, 680, 212, 213, 214, 215, 0,
	0, 216, 217, 218, 699, 219, 0, 220, 221, 222,
	277, 736, 0, 0, 223, 0, 0, 0, 0, 224,
	225, 226, 227, 654, 0, 0, 0, 0, 0, 652,
	0, 0, 0, 0, 650, 651, 648, 685, 674, 675,
	672, 673, 664, 660, 0, 0, 0, 0, 663, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 701, 667, 0, 0, 0, 93, 94, 95, 229,
	716, 231, 717, 96, 718, 719, 0, 97, 235, 236,
	98, 670, 700, 720, 721, 239, 0, 99, 712, 0,
	693, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 314, 107, 108, 0, 694, 696, 0, 695,
	697, 109, 110, 282, 111, 722, 112, 723, 724, 0,
	113, 0, 114, 0, 0, 0, 715, 116, 0, 117,
	0, 0, 0, 658, 118, 119, 120, 702, 703, 681,
	0, 0, 121, 122, 725, 0, 123, 0, 124, 0,
	0, 315, 0, 125, 713, 0, 249, 0, 126, 127,
	128, 129, 709, 711, 317, 0, 133, 0, 130, 0,
	316, 131, 726, 132, 727, 728, 729, 0, 692, 0,
	318, 134, 319, 135, 136, 0, 138, 137, 0, 714,
	320, 139, 321, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 258, 145, 322, 147, 148, 150, 149,
	653, 0, 682, 710, 151, 730, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 261, 323, 157, 324,
	704, 158, 159, 160, 161, 0, 705, 162, 264, 163,
	0, 164, 165, 166, 167, 731, 168, 169, 0, 170,
	171, 172, 173, 174, 176, 177, 175, 178, 179, 180,
	0, 181, 325, 182, 183, 659, 184, 0, 188, 189,
	190, 191, 0, 267, 192, 193, 194, 698, 195, 185,
	186, 196, 326, 197, 732, 269, 198, 0, 204, 199,
	200, 187, 201, 203, 733, 202, 706, 0, 205, 0,
	206, 207, 208, 209, 210, 0, 272, 734, 735, 0,
	0, 211, 707, 708, 680, 212, 213, 214, 215, 0,
	0, 216, 217, 218, 699, 219, 0, 220, 221, 222,
	277, 736, 0, 0, 223, 0, 0, 0, 0, 224,
	225, 226, 227, 654, 0, 0, 0, 0, 0, 652,
	0, 0, 0, 0, 650, 651, 0, 0, 0, 0,
	0, 1014, 1286, 660, 0, 0, 0, 0, 663, 685,
	674, 675, 672, 673, 664, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 701, 667, 0, 0, 0, 93, 94,
	95, 229, 716, 231, 717, 96, 718, 719, 0, 97,
	235, 236, 98, 670, 700, 720, 721, 239, 0, 99,
	712, 0, 693, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 314, 107, 108, 0, 694, 696,
	0, 695, 697, 109, 110, 282, 111, 722, 112, 723,
	724, 0, 113, 0, 114, 0, 0, 0, 715, 116,
	0, 117, 0, 0, 0, 658, 118, 119, 120, 702,
	703, 681, 0, 0, 121, 122, 725, 0, 123, 0,
	124, 0, 0, 315, 0, 125, 713, 0, 249, 0,
	126, 127, 128, 129, 709, 711, 317, 0, 133, 0,
	130, 0, 316, 131, 726, 132, 727, 728, 729, 0,
	692, 0, 318, 134, 319, 135, 136, 0, 138, 137,
	0, 714, 320, 139, 321, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 258, 145, 322, 147, 148,
	150, 149, 653, 0, 682, 710, 151, 730, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 261, 323,
	157, 324, 704, 158, 159, 160, 161, 0, 705, 162,
	264, 163, 0, 164, 165, 166, 167, 731, 168, 169,
	0, 170, 171, 172, 173, 174, 176, 177, 175, 178,
	179, 180, 0, 181, 325, 182, 183, 659, 184, 0,
	188, 189, 190, 191, 0, 267, 192, 193, 194, 698,
	195, 185, 186, 196, 326, 197, 732, 269, 198, 0,
	204, 199, 200, 187, 201, 203, 733, 202, 706, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 272, 734,
	735, 0, 0, 211, 707, 708, 680, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 699, 219, 0, 220,
	221, 222, 277, 736, 0, 0, 223, 0, 0, 0,
	0, 224, 225, 226, 227, 654, 0, 0, 0, 0,
	0, 652, 0, 0, 0, 0, 650, 651, 685, 674,
	675, 672, 673, 664, 0, 660, 1758, 0, 0, 0,
	663, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 701, 667, 0, 0, 0, 93, 94, 95,
	229, 716, 231, 717, 96, 718, 719, 0, 97, 235,
	236, 98, 670, 700, 720, 721, 239, 0, 99, 712,
	0, 693, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 314, 107, 108, 0, 694, 696, 0,
	695, 697, 109, 110, 282, 111, 722, 112, 723, 724,
	0, 113, 0, 114, 0, 0, 0, 715, 116, 0,
	117, 0, 0, 0, 658, 118, 119, 120, 702, 703,
	681, 0, 0, 121, 122, 725, 0, 123, 0, 124,
	0, 0, 315, 0, 125, 713, 0, 249, 0, 126,
	127, 128, 129, 709, 711, 317, 0, 133, 0, 130,
	0, 316, 131, 726, 132, 727, 728, 729, 0, 692,
	0, 318, 134, 319, 135, 136, 0, 138, 137, 0,
	714, 320, 139, 321, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 322, 147, 148, 150,
	149, 653, 0, 682, 710, 151, 730, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 323, 157,
	324, 704, 158, 159, 160, 161, 0, 705, 162, 264,
	163, 0, 164, 165, 166, 167, 731, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 325, 182, 183, 659, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 698, 195,
	185, 186, 196, 326, 197, 732, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 733, 202, 706, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 734, 735,
	0, 0, 211, 707, 708, 680, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 699, 219, 0, 220, 221,
	222, 277, 736, 1715, 0, 223, 0, 0, 0, 0,
	224, 225, 226, 227, 654, 0, 0, 0, 0, 0,
	652, 0, 0, 0, 0, 650, 651, 685, 674, 675,
	672, 673, 664, 0, 660, 0, 0, 0, 0, 663,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 701, 667, 0, 0, 0, 93, 94, 95, 229,
	716, 231, 717, 96, 718, 719, 0, 97, 235, 236,
	98, 670, 700, 720, 721, 239, 0, 99, 712, 0,
	693, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 314, 107, 108, 0, 694, 696, 0, 695,
	697, 109, 110, 282, 111, 722, 112, 723, 724, 0,
	113, 0, 114, 0, 0, 0, 715, 116, 0, 117,
	0, 0, 0, 658, 118, 119, 120, 702, 703, 681,
	0, 0, 121, 122, 725, 0, 123, 0, 124, 0,
	0, 315, 0, 125, 713, 0, 249, 0, 126, 127,
	128, 129, 709, 711, 317, 0, 133, 0, 130, 0,
	316, 131, 726, 132, 727, 728, 729, 0, 692, 0,
	318, 134, 319, 135, 136, 0, 138, 137, 0, 714,
	320, 139, 321, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 258, 145, 322, 147, 148, 150, 149,
	653, 0, 682, 710, 151, 730, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 261, 323, 157, 324,
	704, 158, 159, 160, 161, 0, 705, 162, 264, 163,
	0, 164, 165, 166, 167, 731, 168, 169, 0, 170,
	171, 172, 173, 174, 176, 177, 175, 178, 179, 180,
	0, 181, 325, 182, 183, 659, 184, 0, 188, 189,
	190, 191, 0, 267, 192, 193, 194, 698, 195, 185,
	186, 196, 326, 197, 732, 269, 198, 0, 204, 199,
	200, 187, 201, 203, 733, 202, 706, 0, 205, 0,
	206, 207, 208, 209, 210, 0, 272, 734, 735, 0,
	0, 211, 707, 708, 680, 212, 213, 214, 215, 0,
	0, 216, 217, 218, 699, 219, 0, 220, 221, 222,
	277, 736, 0, 0, 223, 0, 0, 0, 0, 224,
	225, 226, 227, 654, 0, 0, 0, 0, 0, 652,
	0, 0, 0, 0, 650, 651, 685, 674, 675, 672,
	673, 664, 0, 660, 1705, 0, 0, 0, 663, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	701, 667, 0, 0, 0, 93, 94, 95, 229, 716,
	231, 717, 96, 718, 719, 0, 97, 235, 236, 98,
	670, 700, 720, 721, 239, 0, 99, 712, 0, 693,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 314, 107, 108, 0, 694, 696, 0, 695, 697,
	109, 110, 282, 111, 722, 112, 723, 724, 751, 113,
	0, 114, 0, 0, 0, 715, 116, 0, 117, 0,
	0, 0, 658, 118, 119, 120, 702, 703, 681, 0,
	0, 121, 122, 725, 0, 123, 0, 124, 0, 0,
	315, 0, 125, 713, 0, 249, 0, 126, 127, 128,
	129, 709, 711, 317, 0, 133, 0, 130, 0, 316,
	131, 726, 132, 727, 728, 729, 0, 692, 0, 318,
	134, 319, 135, 136, 0, 138, 137, 0, 714, 320,
	139, 321, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 322, 147, 148, 150, 149, 653,
	0, 682, 710, 151, 730, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 323, 157, 324, 704,
	158, 159, 160, 161, 0, 705, 162, 264, 163, 0,
	164, 165, 166, 167, 731, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 325, 182, 183, 659, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 698, 195, 185, 186,
	196, 326, 197, 732, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 733, 202, 706, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 734, 735, 0, 0,
	211, 707, 708, 680, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 699, 219, 0, 220, 221, 222, 277,
	736, 0, 0, 223, 0, 0, 0, 0, 224, 225,
	226, 227, 654, 0, 0, 0, 0, 0, 652, 0,
	0, 0, 0, 650, 651, 685, 674, 675, 672, 673,
	664, 0, 660, 0, 0, 0, 0, 663, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 701,
	667, 0, 0, 0, 93, 94, 95, 229, 716, 231,
	717, 96, 718, 719, 0, 97, 235, 236, 98, 670,
	700, 720, 721, 239, 0, 99, 712, 0, 693, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	314, 107, 108, 0, 694, 696, 0, 695, 697, 109,
	110, 282, 111, 722, 112, 723, 724, 0, 113, 0,
	114, 0, 0, 0, 715, 116, 0, 117, 0, 0,
	0, 658, 118, 119, 120, 702, 703, 681, 0, 0,
	121, 122, 725, 0, 123, 0, 124, 0, 1338, 315,
	0, 125, 713, 0, 249, 0, 126, 127, 128, 129,
	709, 711, 317, 0, 133, 0, 130, 0, 316, 131,
	726, 132, 727, 728, 729, 0, 692, 0, 318, 134,
	319, 135, 136, 0, 138, 137, 0, 714, 320, 139,
	321, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 258, 145, 322, 147, 148, 150, 149, 653, 0,
	682, 710, 151, 730, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 261, 323, 157, 324, 704, 158,
	159, 160, 161, 0, 705, 162, 264, 163, 0, 164,
	165, 166, 167, 731, 168, 169, 0, 170, 171, 172,
	173, 174, 176, 177, 175, 178, 179, 180, 0, 181,
	325, 182, 183, 659, 184, 0, 188, 189, 190, 191,
	0, 267, 192, 193, 194, 698, 195, 185, 186, 196,
	326, 197, 732, 269, 198, 0, 204, 199, 200, 187,
	201, 203, 733, 202, 706, 0, 205, 0, 206, 207,
	208, 209, 210, 0, 272, 734, 735, 0, 0, 211,
	707, 708, 680, 212, 213, 214, 215, 0, 0, 216,
	217, 218, 699, 219, 0, 220, 221, 222, 277, 736,
	0, 0, 223, 0, 0, 0, 0, 224, 225, 226,
	227, 654, 0, 0, 0, 0, 0, 652, 0, 0,
	0, 0, 650, 651, 685, 674, 675, 672, 673, 664,
	0, 660, 0, 0, 0, 0, 663, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 701, 667,
	0, 0, 0, 93, 94, 95, 229, 716, 231, 717,
	96, 718, 719, 0, 97, 235, 236, 98, 670, 700,
	720, 721, 239, 0, 99, 712, 0, 693, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 314,
	107, 108, 0, 694, 696, 0, 695, 697, 109, 110,
	282, 111, 722, 112, 723, 724, 0, 113, 0, 114,
	0, 0, 0, 715, 116, 0, 117, 0, 0, 0,
	658, 118, 119, 120, 702, 703, 681, 0, 0, 121,
	122, 725, 0, 123, 0, 124, 0, 0, 315, 0,
	125, 713, 0, 249, 0, 126, 127, 128, 129, 709,
	711, 317, 0, 133, 0, 130, 0, 316, 131, 726,
	132, 727, 728, 729, 0, 692, 0, 318, 134, 319,
	135, 136, 0, 138, 137, 0, 714, 320, 139, 321,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 322, 147, 148, 150, 149, 653, 0, 682,
	710, 151, 730, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 323, 157, 324, 704, 158, 159,
	160, 161, 0, 705, 162, 264, 163, 0, 164, 165,
	166, 167, 731, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 325,
	182, 183, 659, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 698, 195, 185, 186, 196, 326,
	197, 732, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 733, 202, 706, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 734, 735, 0, 0, 211, 707,
	708, 680, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 699, 219, 0, 220, 221, 222, 277, 736, 0,
	0, 223, 0, 0, 0, 0, 224, 225, 226, 227,
	654, 0, 0, 0, 0, 0, 652, 0, 0, 0,
	0, 650, 651, 685, 674, 675, 672, 673, 664, 0,
	660, 1281, 0, 0, 0, 663, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 701, 667, 0,
	0, 0, 93, 94, 95, 229, 716, 231, 717, 96,
	718, 719, 0, 97, 235, 236, 98, 670, 700, 720,
	721, 239, 0, 99, 712, 0, 693, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 314, 107,
	108, 0, 694, 696, 0, 695, 697, 109, 110, 282,
	111, 722, 112, 723, 724, 0, 113, 0, 114, 0,
	0, 0, 715, 116, 0, 117, 0, 0, 0, 658,
	118, 119, 120, 702, 703, 681, 0, 0, 121, 122,
	725, 0, 123, 0, 124, 0, 0, 315, 0, 125,
	713, 0, 249, 0, 126, 127, 128, 129, 709, 711,
	317, 0, 133, 0, 130, 0, 316, 131, 726, 132,
	727, 728, 729, 0, 692, 0, 318, 134, 319, 135,
	136, 0, 138, 137, 0, 714, 320, 139, 321, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 258,
	145, 322, 147, 148, 150, 149, 653, 0, 682, 710,
	151, 730, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 261, 323, 157, 324, 704, 158, 159, 160,
	161, 0, 705, 162, 264, 163, 0, 164, 165, 166,
	167, 731, 168, 169, 0, 170, 171, 172, 173, 174,
	176, 177, 175, 178, 179, 180, 0, 181, 325, 182,
	183, 659, 184, 0, 188, 189, 190, 191, 0, 267,
	192, 193, 194, 698, 195, 185, 186, 196, 326, 197,
	732, 269, 198, 0, 204, 199, 200, 187, 201, 203,
	733, 202, 706, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 272, 734, 735, 0, 0, 211, 707, 708,
	680, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	699, 219, 0, 220, 221, 222, 277, 736, 0, 0,
	223, 0, 0, 0, 0, 224, 225, 226, 227, 654,
	0, 0, 0, 0, 0, 652, 0, 0, 0, 0,
	650, 651, 648, 685, 674, 675, 672, 673, 664, 660,
	0, 0, 0, 0, 663, 0, 0, 0, 0, 90,
	91, 942, 92, 0, 0, 0, 0, 701, 667, 0,
	0, 0, 93, 94, 95, 229, 716, 231, 717, 96,
	718, 719, 0, 97, 235, 236, 98, 670, 700, 720,
	721, 239, 0, 99, 712, 0, 693, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 314, 107,
	108, 0, 694, 696, 0, 695, 697, 109, 110, 282,
	111, 722, 112, 723, 724, 0, 113, 0, 114, 0,
	0, 0, 715, 116, 0, 117, 0, 0, 0, 658,
	118, 119, 120, 702, 703, 681, 0, 0, 121, 122,
	725, 0, 123, 0, 124, 0, 0, 315, 0, 125,
	713, 0, 249, 0, 126, 127, 128, 129, 709, 711,
	317, 0, 133, 0, 130, 0, 316, 131, 726, 132,
	727, 728, 729, 0, 692, 0, 318, 134, 319, 135,
	136, 0, 138, 137, 0, 714, 320, 139, 321, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 258,
	145, 322, 147, 148, 150, 149, 653, 0, 682, 710,
	151, 730, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 261, 323, 157, 324, 704, 158, 159, 160,
	161, 0, 705, 162, 264, 163, 0, 164, 165, 166,
	167, 731, 168, 169, 0, 170, 171, 172, 173, 174,
	176, 177, 175, 178, 179, 180, 0, 181, 325, 182,
	183, 659, 184, 0, 188, 189, 190, 191, 0, 267,
	192, 193, 194, 698, 195, 185, 186, 196, 326, 197,
	732, 269, 198, 0, 204, 199, 200, 187, 201, 203,
	733, 202, 706, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 272, 734, 735, 0, 0, 211, 707, 708,
	680, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	699, 219, 0, 220, 221, 222, 277, 736, 0, 0,
	223, 0, 0, 0, 0, 224, 225, 226, 227, 654,
	0, 0, 0, 0, 0, 652, 0, 0, 0, 0,
	650, 651, 685, 674, 675, 672, 673, 664, 0, 660,
	0, 0, 0, 0, 663, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 701, 667, 0, 0,
	0, 93, 94, 95, 229, 716, 231, 717, 96, 718,
	719, 0, 97, 235, 236, 98, 670, 700, 720, 721,
	239, 0, 99, 712, 0, 693, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 314, 107, 2113,
	0, 694, 696, 0, 695, 697, 109, 110, 282, 111,
	722, 112, 723, 724, 0, 113, 0, 114, 0, 0,
	0, 715, 116, 0, 117, 0, 0, 0, 658, 118,
	119, 120, 702, 703, 681, 0, 0, 121, 122, 725,
	0, 123, 0, 124, 0, 0, 315, 0, 125, 713,
	0, 249, 0, 126, 127, 128, 129, 709, 711, 317,
	0, 133, 0, 130, 0, 316, 131, 726, 132, 727,
	728, 729, 0, 692, 0, 318, 134, 319, 135, 136,
	0, 138, 137, 0, 714, 320, 139, 321, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	322, 147, 148, 150, 149, 653, 0, 682, 710, 151,
	730, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 323, 157, 324, 704, 158, 159, 160, 161,
	0, 705, 162, 264, 163, 0, 164, 165, 166, 167,
	731, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 325, 182, 183,
	659, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 698, 195, 185, 186, 196, 326, 197, 732,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 733,
	202, 706, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 734, 735, 0, 0, 211, 707, 708, 680,
	212, 213, 2112, 215, 0, 0, 216, 217, 218, 699,
	219, 0, 220, 221, 222, 277, 736, 0, 0, 223,
	0, 0, 0, 0, 224, 225, 226, 227, 654, 0,
	0, 0, 0, 0, 652, 0, 0, 0, 0, 650,
	651, 685, 674, 675, 672, 673, 664, 0, 660, 0,
	0, 0, 0, 663, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 701, 667, 0, 0, 0,
	93, 94, 95, 2111, 716, 231, 717, 96, 718, 719,
	0, 97, 235, 236, 98, 670, 700, 720, 721, 239,
	0, 99, 712, 0, 693, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 314, 107, 2113, 0,
	694, 696, 0, 695, 697, 109, 110, 282, 111, 722,
	112, 723, 724, 0, 113, 0, 114, 0, 0, 0,
	715, 116, 0, 117, 0, 0, 0, 658, 118, 119,
	120, 702, 703, 681, 0, 0, 121, 122, 725, 0,
	123, 0, 124, 0, 0, 315, 0, 125, 713, 0,
	249, 0, 126, 127, 128, 129, 709, 711, 317, 0,
	133, 0, 130, 0, 316, 131, 726, 132, 727, 728,
	729, 0, 692, 0, 318, 134, 319, 135, 136, 0,
	138, 137, 0, 714, 320, 139, 321, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 322,
	147, 148, 150, 149, 653, 0, 682, 710, 151, 730,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 323, 157, 324, 704, 158, 159, 160, 161, 0,
	705, 162, 264, 163, 0, 164, 165, 166, 167, 731,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 325, 182, 183, 659,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 698, 195, 185, 186, 196, 326, 197, 732, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 733, 202,
	706, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 734, 735, 0, 0, 211, 707, 708, 680, 212,
	213, 2112, 215, 0, 0, 216, 217, 218, 699, 219,
	0, 220, 221, 222, 277, 736, 0, 0, 223, 0,
	0, 0, 0, 224, 225, 226, 227, 654, 0, 0,
	0, 0, 0, 652, 0, 0, 0, 0, 650, 651,
	685, 674, 675, 672, 673, 664, 0, 660, 0, 0,
	0, 0, 663, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 701, 667, 0, 0, 0, 93,
	94, 95, 229, 716, 231, 717, 96, 718, 719, 0,
	97, 235, 236, 98, 670, 700, 720, 721, 239, 0,
	99, 712, 0, 693, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 314, 107, 108, 0, 694,
	696, 0, 695, 697, 109, 110, 282, 111, 722, 112,
	723, 724, 0, 113, 0, 114, 0, 0, 0, 715,
	116, 0, 117, 0, 0, 0, 658, 118, 119, 120,
	702, 703, 681, 0, 0, 121, 122, 725, 0, 123,
	0, 124, 0, 0, 315, 0, 125, 713, 0, 249,
	0, 126, 127, 128, 129, 709, 711, 317, 0, 133,
	0, 130, 0, 316, 131, 726, 132, 727, 728, 729,
	0, 692, 0, 318, 134, 319, 135, 136, 0, 138,
	137, 0, 714, 320, 139, 321, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 322, 147,
	148, 150, 149, 653, 0, 682, 710, 151, 730, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	323, 157, 324, 704, 158, 159, 160, 161, 0, 705,
	162, 264, 163, 0, 164, 165, 166, 167, 731, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 325, 182, 183, 659, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	698, 195, 185, 186, 196, 326, 197, 732, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 733, 202, 706,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	734, 735, 0, 0, 211, 707, 708, 680, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 699, 219, 0,
	220, 221, 222, 277, 736, 0, 0, 223, 0, 0,
	0, 0, 224, 225, 226, 227, 654, 0, 0, 0,
	0, 0, 652, 0, 0, 0, 0, 650, 651, 1310,
	674, 675, 672, 673, 664, 0, 660, 0, 0, 0,
	0, 663, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 701, 667, 0, 0, 0, 93, 94,
	95, 229, 716, 231, 717, 96, 718, 719, 0, 97,
	235, 236, 98, 670, 700, 720, 721, 239, 0, 99,
	712, 0, 693, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 314, 107, 108, 0, 694, 696,
	0, 695, 697, 109, 110, 282, 111, 722, 1313, 723,
	724, 0, 113, 0, 114, 0, 0, 0, 715, 116,
	0, 117, 0, 0, 0, 658, 118, 119, 120, 702,
	703, 681, 0, 0, 121, 122, 725, 0, 123, 0,
	124, 0, 0, 315, 0, 125, 713, 0, 249, 0,
	126, 127, 1314, 129, 709, 711, 317, 0, 133, 0,
	130, 0, 316, 131, 726, 132, 727, 728, 729, 0,
	692, 0, 318, 134, 319, 135, 136, 0, 138, 137,
	0, 714, 320, 139, 321, 0, 140, 0, 0, 141,
	0, 142, 1315, 1312, 146, 258, 145, 322, 147, 148,
	150, 149, 653, 0, 682, 710, 151, 730, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 261, 323,
	157, 324, 704, 158, 159, 160, 161, 0, 705, 162,
	264, 163, 0, 164, 165, 166, 167, 731, 168, 169,
	0, 170, 171, 172, 173, 174, 176, 177, 175, 178,
	179, 180, 0, 181, 325, 182, 183, 659, 184, 0,
	188, 189, 190, 1316, 0, 267, 192, 193, 194, 698,
	195, 185, 186, 196, 326, 197, 732, 269, 198, 0,
	204, 199, 200, 187, 201, 203, 733, 202, 706, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 272, 734,
	735, 0, 0, 211, 707, 708, 680, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 699, 219, 0, 220,
	221, 222, 277, 736, 0, 0, 223, 0, 0, 0,
	0, 224, 225, 1311, 227, 654, 0, 0, 0, 0,
	0, 652, 0, 0, 0, 0, 650, 651, 685, 674,
	675, 672, 673, 664, 0, 660, 0, 0, 0, 0,
	663, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 701, 667, 0, 0, 0, 93, 94, 95,
	229, 716, 231, 717, 96, 718, 719, 0, 97, 235,
	236, 98, 670, 700, 720, 721, 239, 0, 99, 712,
	0, 693, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 314, 107, 108, 0, 694, 696, 0,
	695, 697, 109, 110, 282, 111, 722, 112, 723, 724,
	0, 113, 0, 114, 0, 0, 0, 715, 116, 0,
	117, 0, 0, 0, 658, 118, 119, 120, 702, 703,
	681, 0, 0, 121, 122, 725, 0, 123, 0, 124,
	0, 0, 315, 0, 125, 713, 0, 249, 0, 126,
	127, 128, 129, 709, 711, 317, 0, 133, 0, 130,
	0, 316, 131, 726, 132, 727, 728, 729, 0, 692,
	0, 318, 134, 319, 135, 136, 0, 138, 137, 0,
	714, 320, 139, 321, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 322, 147, 148, 150,
	149, 0, 0, 682, 710, 151, 730, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 323, 157,
	324, 704, 158, 159, 160, 161, 0, 705, 162, 264,
	163, 0, 164, 165, 166, 167, 731, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 325, 182, 183, 1328, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 698, 195,
	185, 186, 196, 326, 197, 732, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 733, 202, 706, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 734, 735,
	0, 0, 211, 707, 708, 680, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 699, 219, 0, 220, 221,
	222, 277, 736, 0, 0, 223, 0, 0, 0, 0,
	224, 225, 226, 227, 0, 0, 0, 0, 0, 0,
	1326, 0, 0, 0, 0, 1324, 1325, 685, 674, 675,
	672, 673, 664, 0, 1327, 0, 0, 0, 0, 663,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 701, 667, 0, 0, 0, 93, 94, 95, 229,
	716, 231, 717, 96, 718, 719, 0, 97, 235, 236,
	98, 0, 700, 720, 721, 239, 0, 99, 712, 0,
	693, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 314, 107, 108, 0, 694, 696, 0, 695,
	697, 109, 110, 282, 111, 722, 112, 723, 724, 0,
	113, 0, 114, 0, 0, 0, 715, 116, 0, 117,
	0, 0, 0, 244, 118, 119, 120, 702, 703, 681,
	0, 0, 121, 122, 725, 0, 123, 0, 124, 0,
	0, 315, 0, 125, 713, 0, 249, 0, 126, 127,
	128, 129, 709, 711, 317, 0, 133, 0, 130, 0,
	316, 131, 726, 132, 727, 728, 729, 0, 692, 0,
	318, 134, 319, 135, 136, 0, 138, 137, 0, 714,
	320, 139, 321, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 258, 145, 322, 147, 148, 150, 149,
	0, 0, 682, 710, 151, 730, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 261, 323, 157, 324,
	704, 158, 159, 160, 161, 0, 705, 162, 264, 163,
	0, 164, 165, 166, 167, 731, 168, 169, 0, 170,
	171, 172, 173, 174, 176, 177, 175, 178, 179, 180,
	0, 181, 325, 182, 183, 1328, 184, 0, 188, 189,
	190, 191, 0, 267, 192, 193, 194, 698, 195, 185,
	186, 196, 326, 197, 732, 269, 198, 0, 204, 199,
	200, 187, 201, 203, 733, 202, 706, 0, 205, 0,
	206, 207, 208, 209, 210, 0, 272, 734, 735, 0,
	0, 211, 707, 708, 680, 212, 213, 214, 215, 0,
	0, 216, 217, 218, 699, 219, 0, 220, 221, 222,
	277, 736, 0, 0, 223, 0, 0, 0, 0, 224,
	225, 226, 227, 0, 0, 685, 674, 675, 672, 673,
	664, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 1327, 92, 0, 0, 0, 663, 701,
	667, 0, 0, 0, 93, 94, 95, 0, 716, 231,
	717, 96, 718, 719, 0, 97, 235, 236, 98, 670,
	700, 720, 721, 239, 0, 99, 712, 0, 693, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	314, 107, 2113, 0, 694, 696, 0, 695, 697, 109,
	110, 282, 111, 722, 112, 723, 724, 0, 113, 0,
	114, 0, 0, 0, 715, 116, 0, 117, 0, 0,
	0, 658, 118, 119, 120, 702, 703, 681, 0, 0,
	121, 122, 725, 0, 123, 0, 124, 0, 0, 315,
	0, 125, 713, 0, 249, 0, 126, 127, 128, 129,
	709, 711, 0, 0, 133, 0, 130, 0, 316, 131,
	726, 132, 727, 728, 729, 0, 692, 0, 0, 134,
	319, 135, 136, 0, 138, 137, 0, 714, 320, 139,
	0, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 258, 145, 322, 147, 148, 150, 149, 653, 0,
	682, 710, 151, 730, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 261, 323, 157, 324, 704, 158,
	159, 160, 161, 0, 705, 162, 264, 163, 0, 164,
	165, 166, 167, 731, 168, 169, 0, 170, 171, 172,
	173, 174, 176, 177, 175, 178, 179, 180, 0, 181,
	325, 182, 183, 659, 184, 0, 188, 189, 190, 191,
	0, 267, 192, 193, 194, 698, 195, 185, 186, 196,
	0, 197, 732, 269, 198, 0, 204, 199, 200, 187,
	201, 203, 733, 202, 706, 0, 205, 0, 206, 207,
	208, 209, 210, 0, 272, 734, 735, 0, 0, 211,
	707, 708, 680, 212, 213, 2112, 215, 0, 0, 216,
	217, 218, 699, 219, 0, 220, 221, 222, 277, 736,
	0, 0, 223, 0, 0, 0, 0, 224, 225, 226,
	227, 685, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 650, 651, 0, 0, 0, 90, 91, 0,
	92, 660, 0, 0, 0, 701, 663, 0, 0, 0,
	93, 94, 95, 229, 230, 231, 232, 96, 233, 234,
	0, 97, 235, 236, 98, 0, 700, 237, 238, 239,
	0, 99, 712, 0, 693, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 314, 107, 108, 0,
	694, 696, 0, 695, 697, 109, 110, 282, 111, 241,
	112, 242, 243, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 244, 118, 119,
	120, 702, 703, 0, 0, 0, 121, 122, 247, 0,
	123, 0, 124, 0, 0, 315, 0, 125, 713, 0,
	249, 0, 126, 127, 128, 129, 709, 711, 317, 0,
	133, 0, 130, 0, 316, 131, 252, 132, 253, 254,
	255, 0, 256, 0, 318, 134, 319, 135, 136, 0,
	138, 137, 0, 714, 320, 139, 321, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 322,
	147, 148, 150, 149, 0, 0, 0, 710, 151, 260,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 323, 157, 324, 704, 158, 159, 160, 161, 0,
	705, 162, 264, 163, 0, 164, 165, 166, 167, 265,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 325, 182, 183, 266,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 698, 195, 185, 186, 196, 326, 197, 268, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 270, 202,
	706, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 273, 274, 0, 0, 211, 707, 708, 0, 212,
	213, 214, 215, 552, 0, 216, 217, 218, 699, 219,
	0, 220, 221, 222, 277, 278, 0, 0, 223, 90,
	91, 0, 92, 224, 225, 226, 227, 228, 0, 0,
	0, 0, 93, 94, 95, 229, 230, 231, 232, 96,
	233, 234, 0, 97, 235, 236, 98, 1599, 0, 237,
	238, 239, 0, 99, 240, 0, 313, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 314, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 282,
	111, 241, 112, 242, 243, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 244,
	118, 119, 120, 245, 246, 0, 0, 0, 121, 122,
	247, 0, 123, 0, 124, 0, 0, 315, 0, 125,
	248, 0, 249, 0, 126, 127, 128, 129, 250, 251,
	317, 0, 133, 0, 130, 0, 316, 131, 252, 132,
	253, 254, 255, 0, 256, 0, 318, 134, 319, 135,
	136, 0, 138, 137, 0, 257, 320, 139, 321, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 258,
	145, 322, 147, 148, 150, 149, 0, 0, 0, 259,
	151, 260, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 261, 323, 157, 324, 262, 158, 159, 160,
	161, 0, 263, 162, 264, 163, 0, 164, 165, 166,
	167, 265, 168, 169, 0, 170, 171, 172, 173, 174,
	176, 177, 175, 178, 179, 180, 0, 181, 325, 182,
	183, 266, 184, 0, 188, 189, 190, 191, 71, 267,
	192, 193, 194, 0, 195, 185, 186, 196, 326, 197,
	268, 269, 198, 0, 204, 199, 200, 187, 201, 203,
	270, 202, 271, 0, 205, 73, 206, 207, 208, 209,
	210, 0, 272, 273, 274, 0, 0, 211, 275, 276,
	0, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	0, 219, 0, 220, 221, 222, 556, 278, 0, 0,
	223, 0, 0, 0, 69, 224, 225, 226, 227, 0,
	70, 552, 776, 0, 886, 883, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 68,
	92, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	93, 94, 95, 229, 230, 231, 232, 96, 233, 234,
	0, 97, 235, 236, 98, 0, 0, 237, 238, 239,
	0, 99, 240, 0, 313, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 314, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 282, 111, 241,
	112, 242, 243, 889, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 244, 118, 119,
	120, 245, 246, 880, 0, 0, 121, 122, 247, 0,
	123, 0, 124, 0, 0, 315, 0, 125, 248, 0,
	249, 0, 126, 127, 128, 129, 250, 251, 317, 0,
	133, 0, 130, 0, 316, 131, 252, 132, 253, 254,
	255, 0, 256, 0, 318, 134, 319, 135, 136, 0,
	138, 137, 0, 257, 320, 139, 321, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 322,
	147, 148, 150, 149, 0, 0, 0, 259, 151, 260,
	152, 153, 0, 154, 881, 0, 155, 0, 0, 156,
	261, 323, 157, 324, 262, 158, 159, 160, 161, 0,
	263, 162, 264, 163, 0, 164, 165, 166, 167, 265,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 325, 182, 183, 266,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 0, 195, 185, 186, 196, 326, 197, 268, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 270, 202,
	271, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 273, 274, 0, 0, 211, 275, 276, 879, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 0, 219,
	0, 220, 221, 222, 277, 278, 552, 776, 223, 886,
	883, 878, 0, 224, 225, 226, 227, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 887, 884,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 313,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 314, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 874, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 880, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	315, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 317, 0, 133, 0, 130, 0, 316,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 318,
	134, 319, 135, 136, 0, 138, 137, 0, 257, 320,
	139, 321, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 322, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 881,
	0, 155, 0, 0, 156, 261, 323, 157, 324, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 325, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 326, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 879, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 552, 776, 223, 886, 883, 878, 0, 224, 225,
	226, 227, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 887, 884, 228, 0, 0, 0, 0,
	93, 94, 95, 229, 230, 231, 232, 96, 233, 234,
	0, 97, 235, 236, 98, 0, 0, 237, 238, 239,
	0, 99, 240, 0, 313, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 314, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 282, 111, 241,
	112, 242, 243, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 244, 118, 119,
	120, 245, 246, 880, 0, 0, 121, 122, 247, 0,
	123, 0, 124, 0, 0, 315, 0, 125, 248, 0,
	249, 0, 126, 127, 128, 129, 250, 251, 317, 0,
	133, 0, 130, 0, 316, 131, 252, 132, 253, 254,
	255, 0, 256, 0, 318, 134, 319, 135, 136, 0,
	138, 137, 0, 257, 320, 139, 321, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 322,
	147, 148, 150, 149, 0, 0, 0, 259, 151, 260,
	152, 153, 0, 154, 881, 0, 155, 0, 0, 156,
	261, 323, 157, 324, 262, 158, 159, 160, 161, 0,
	263, 162, 264, 163, 0, 164, 165, 166, 167, 265,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 325, 182, 183, 266,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 0, 195, 185, 186, 196, 326, 197, 268, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 270, 202,
	271, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 273, 274, 0, 0, 211, 275, 276, 879, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 0, 219,
	0, 220, 221, 222, 277, 278, 87, 0, 223, 0,
	0, 0, 0, 224, 225, 226, 227, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 887, 884,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	506, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 71, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 73, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 556,
	278, 0, 0, 223, 87, 0, 0, 69, 224, 225,
	226, 227, 0, 70, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 228, 0,
	1205, 0, 1210, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 71,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 73, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 556, 278, 0,
	0, 223, 87, 0, 0, 69, 224, 225, 226, 227,
	0, 70, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 228, 0, 0, 0,
	68, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 282, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 250, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 506, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 0,
	219, 0, 220, 221, 222, 277, 278, 0, 0, 223,
	87, 0, 0, 0, 224, 225, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 228, 0, 1205, 0, 1210, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 282, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 250, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 0, 212, 213,
	214, 215, 87, 0, 216, 217, 218, 0, 219, 0,
	220, 221, 222, 277, 278, 0, 0, 223, 90, 91,
	0, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 784, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 282, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 250, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 87, 0, 216, 217, 218, 0,
	219, 0, 220, 221, 222, 277, 278, 0, 0, 223,
	90, 91, 0, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 1115, 0,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 87, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	1722, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 0, 0, 0, 0, 224, 225,
	226, 227, 685, 674, 675, 672, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 747, 0, 0, 0, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 716, 231, 717, 96, 718,
	719, 0, 97, 235, 236, 98, 0, 0, 720, 721,
	239, 0, 99, 240, 0, 313, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 314, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 282, 111,
	722, 112, 723, 724, 0, 113, 0, 114, 0, 0,
	0, 715, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 681, 0, 0, 121, 122, 725,
	0, 123, 0, 124, 0, 0, 315, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 250, 251, 317,
	0, 133, 0, 130, 0, 316, 131, 726, 132, 727,
	728, 729, 0, 692, 0, 318, 134, 319, 135, 136,
	0, 138, 137, 0, 257, 320, 139, 321, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	322, 147, 148, 150, 149, 0, 0, 682, 259, 151,
	730, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 323, 157, 324, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	731, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 325, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 326, 197, 732,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 733,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 734, 735, 0, 0, 211, 275, 276, 680,
	212, 213, 214, 215, 552, 776, 216, 217, 218, 774,
	219, 0, 220, 221, 222, 277, 736, 0, 0, 223,
	90, 91, 0, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 313, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 314,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 315, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 317, 0, 133, 0, 130, 0, 316, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 318, 134, 319,
	135, 136, 0, 138, 137, 0, 257, 320, 139, 321,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 322, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 323, 157, 324, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 325,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 326,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 87, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 83, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 82, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 552, 776, 0, 0, 224, 225,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 86, 0, 0, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 313, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 314,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 315, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 317, 0, 133, 0, 130, 0, 316, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 318, 134, 319,
	135, 136, 0, 138, 137, 0, 257, 320, 139, 321,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 322, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 323, 157, 324, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 325,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 326,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 87, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 552, 223, 0, 0, 0, 0, 224, 225,
	226, 227, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 86, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 313, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 314, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 282, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 315, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 250, 251, 317,
	0, 133, 0, 130, 0, 316, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 318, 134, 319, 135, 136,
	0, 138, 137, 0, 257, 320, 139, 321, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	322, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 323, 157, 324, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 325, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 326, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 87, 0, 216, 217, 218, 0,
	219, 0, 220, 221, 222, 277, 278, 0, 0, 223,
	90, 91, 0, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 1072, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 1070, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 1181, 0, 121,
	122, 247, 0, 123, 0, 124, 1075, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 0, 0, 133, 1179, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 1074, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 87, 1180, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 1072, 99, 240, 0, 0,
	1067, 100, 101, 102, 0, 103, 1070, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 1075, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 1066, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 1074,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 87, 1073,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 1689, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 282, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 250, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	87, 0, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 277, 278, 0, 0, 223, 90, 91, 0, 92,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 282, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 250, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 506, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 0, 212, 213,
	214, 215, 87, 0, 216, 217, 218, 0, 219, 0,
	220, 221, 222, 277, 278, 0, 0, 223, 90, 91,
	903, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 282, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 250, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 87, 0, 216, 217, 218, 0,
	219, 0, 220, 221, 222, 277, 278, 0, 0, 223,
	90, 91, 0, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 809,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 506, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 87, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 90, 91, 564, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 87, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 282, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 518, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 506, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	87, 0, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 277, 278, 0, 0, 223, 90, 91, 0, 92,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 282, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 511, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 506, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 0, 212, 213,
	214, 215, 87, 0, 216, 217, 218, 0, 219, 0,
	220, 221, 222, 277, 278, 0, 0, 223, 90, 91,
	412, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 282, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 250, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 411, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 87, 0, 216, 217, 218, 0,
	219, 0, 220, 221, 222, 277, 278, 0, 0, 223,
	90, 91, 0, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 87, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 1374, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 87, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 282, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 1372, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	87, 0, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 277, 278, 0, 0, 223, 90, 91, 0, 92,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 282, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 1361, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 0, 212, 213,
	214, 215, 87, 0, 216, 217, 218, 0, 219, 0,
	220, 221, 222, 277, 278, 0, 0, 223, 90, 91,
	0, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 282, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 933, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 87, 0, 216, 217, 218, 0,
	219, 0, 220, 221, 222, 277, 278, 0, 0, 223,
	90, 91, 0, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 426, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 87, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 794, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 0, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 87, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 282, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 625, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	87, 0, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 277, 278, 0, 0, 223, 90, 91, 0, 92,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 282, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 620, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 0, 212, 213,
	214, 215, 87, 0, 216, 217, 218, 0, 219, 0,
	220, 221, 222, 277, 278, 0, 0, 223, 90, 91,
	0, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	570, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 282, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 250, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 438,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 437, 273, 274, 0, 0, 433, 275, 276, 0,
	212, 213, 214, 215, 87, 0, 216, 217, 218, 0,
	219, 0, 220, 221, 222, 277, 278, 0, 0, 223,
	90, 91, 0, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 438, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 437, 273, 274, 0, 0, 433, 275,
	276, 0, 212, 213, 214, 215, 87, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 548, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 87, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 282, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 545, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	87, 0, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 277, 278, 0, 0, 223, 90, 91, 0, 92,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 282, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 542, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 0, 212, 213,
	214, 215, 87, 0, 216, 217, 218, 0, 219, 0,
	220, 221, 222, 277, 278, 0, 0, 223, 90, 91,
	0, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 282, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 540, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 87, 0, 216, 217, 218, 0,
	219, 0, 220, 221, 222, 277, 278, 0, 0, 223,
	90, 91, 0, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 514,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 87, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 495, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 87, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 431, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 282, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 250, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 429, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 438, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 432, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 430, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 437, 273, 274,
	0, 0, 433, 275, 276, 0, 212, 213, 214, 215,
	87, 0, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 277, 278, 0, 0, 223, 90, 91, 0, 92,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 282, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 250, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 0, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 0, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 266, 0,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 0, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 0, 219, 0,
	220, 221, 222, 277, 278, 0, 0, 223, 0, 0,
	0, 0, 224, 225, 226, 227, 957, 958, 0, 977,
	978, 979, 987, 988, 989, 0, 0, 0, 0, 0,
	0, 0, 980, 0, 0, 0, 0, 0, 0, 960,
	0, 0, 991, 0, 0, 0, 0, 0, 957, 958,
	0, 977, 978, 979, 987, 988, 989, 0, 0, 0,
	0, 0, 959, 0, 980, 0, 0, 0, 974, 0,
	0, 960, 0, 0, 991, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 992, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 990, 0, 0, 957, 958, 0, 977,
	978, 979, 987, 988, 989, 982, 0, 0, 0, 984,
	992, 975, 980, 0, 0, 0, 0, 0, 0, 960,
	0, 0, 991, 0, 0, 990, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 981, 982, 0, 0,
	0, 0, 959, 975, 0, 0, 0, 0, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 981, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 985, 0, 0, 965, 0,
	0, 0, 0, 957, 958, 0, 977, 978, 979, 987,
	988, 989, 976, 0, 0, 0, 0, 984, 992, 980,
	0, 0, 0, 0, 0, 0, 960, 985, 0, 991,
	0, 0, 0, 990, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 959,
	0, 975, 0, 0, 0, 974, 983, 0, 0, 971,
	972, 973, 986, 0, 970, 968, 969, 961, 962, 963,
	964, 966, 967, 0, 0, 0, 981, 0, 0, 0,
	1525, 0, 0, 0, 0, 0, 0, 0, 983, 0,
	0, 971, 972, 973, 986, 0, 970, 968, 969, 961,
	962, 963, 964, 966, 967, 965, 0, 0, 0, 2051,
	0, 957, 958, 0, 977, 978, 979, 987, 988, 989,
	976, 0, 0, 0, 984, 992, 0, 980, 0, 0,
	0, 0, 0, 0, 960, 985, 0, 991, 0, 0,
	990, 0, 0, 957, 958, 0, 977, 978, 979, 987,
	988, 989, 982, 0, 0, 0, 0, 959, 975, 980,
	0, 0, 0, 974, 0, 0, 960, 0, 0, 991,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 981, 0, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 974, 983, 0, 0, 971,
	972, 973, 986, 0, 970, 968, 969, 961, 962, 963,
	964, 966, 967, 965, 0, 0, 0, 2049, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
	0, 0, 984, 992, 0, 0, 0, 0, 0, 0,
	0, 0, 985, 0, 0, 965, 0, 0, 990, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	982, 0, 0, 0, 984, 992, 975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	990, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 981, 982, 0, 0, 0, 0, 0, 975, 0,
	0, 0, 0, 983, 0, 0, 971, 972, 973, 986,
	0, 970, 968, 969, 961, 962, 963, 964, 966, 967,
	0, 0, 0, 981, 1994, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 976, 0, 0, 0, 957,
	958, 0, 977, 978, 979, 987, 988, 989, 0, 0,
	985, 0, 0, 0, 0, 980, 0, 0, 0, 0,
	0, 0, 960, 0, 0, 991, 0, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 985, 0, 0, 959, 0, 0, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 983, 0, 0, 971, 972, 973, 986, 0, 970,
	968, 969, 961, 962, 963, 964, 966, 967, 0, 0,
	0, 0, 1989, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 0, 983, 0, 0, 971, 972, 973, 986,
	0, 970, 968, 969, 961, 962, 963, 964, 966, 967,
	984, 992, 0, 0, 1985, 0, 957, 958, 0, 977,
	978, 979, 987, 988, 989, 0, 990, 0, 0, 0,
	0, 0, 980, 0, 0, 0, 0, 0, 982, 960,
	0, 0, 991, 0, 975, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 974, 981,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 0, 0, 957, 958, 965, 977,
	978, 979, 987, 988, 989, 0, 0, 0, 985, 0,
	0, 0, 980, 0, 0, 0, 0, 984, 992, 960,
	0, 0, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 990, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 982, 0, 0, 974, 0,
	0, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 983,
	0, 0, 971, 972, 973, 986, 981, 970, 968, 969,
	961, 962, 963, 964, 966, 967, 0, 0, 0, 0,
	1924, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 992, 0,
	976, 0, 0, 957, 958, 0, 977, 978, 979, 987,
	988, 989, 0, 990, 0, 985, 0, 0, 0, 980,
	0, 0, 0, 0, 0, 982, 960, 0, 0, 991,
	0, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 974, 981, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 983, 0, 0, 971,
	972, 973, 986, 0, 970, 968, 969, 961, 962, 963,
	964, 966, 967, 0, 0, 0, 0, 1902, 0, 0,
	976, 0, 0, 957, 958, 965, 977, 978, 979, 987,
	988, 989, 0, 0, 0, 985, 0, 0, 0, 980,
	0, 0, 0, 0, 984, 992, 960, 0, 0, 991,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	990, 0, 0, 0, 0, 0, 0, 0, 0, 959,
	0, 0, 982, 0, 0, 974, 0, 0, 975, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 983, 0, 0, 971,
	972, 973, 986, 981, 970, 968, 969, 961, 962, 963,
	964, 966, 967, 0, 0, 0, 0, 1901, 0, 0,
	0, 0, 0, 0, 0, 965, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 984, 992, 0, 976, 0, 0,
	957, 958, 0, 977, 978, 979, 987, 988, 989, 0,
	990, 0, 985, 0, 0, 0, 980, 0, 0, 0,
	0, 0, 982, 960, 0, 0, 991, 0, 975, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 0,
	0, 0, 974, 981, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 983, 0, 0, 971, 972, 973, 986,
	0, 970, 968, 969, 961, 962, 963, 964, 966, 967,
	0, 0, 0, 0, 1791, 0, 0, 976, 0, 0,
	957, 958, 965, 977, 978, 979, 987, 988, 989, 0,
	0, 0, 985, 0, 0, 0, 980, 0, 0, 0,
	0, 984, 992, 960, 0, 0, 991, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 990, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 982,
	0, 0, 974, 0, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 983, 0, 0, 971, 972, 973, 986,
	981, 970, 968, 969, 961, 962, 963, 964, 966, 967,
	0, 0, 0, 0, 1725, 0, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 984, 992, 0, 976, 0, 0, 957, 958, 0,
	977, 978, 979, 987, 988, 989, 0, 990, 0, 985,
	0, 0, 0, 980, 0, 0, 0, 0, 0, 982,
	960, 0, 0, 991, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 974,
	981, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	983, 0, 0, 971, 972, 973, 986, 0, 970, 968,
	969, 961, 962, 963, 964, 966, 967, 0, 0, 0,
	0, 1709, 0, 0, 976, 0, 0, 957, 958, 965,
	977, 978, 979, 987, 988, 989, 0, 0, 0, 985,
	0, 0, 0, 980, 0, 0, 0, 0, 984, 992,
	960, 0, 0, 991, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 990, 0, 0, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 982, 0, 0, 974,
	0, 0, 975, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	983, 0, 0, 971, 972, 973, 986, 981, 970, 968,
	969, 961, 962, 963, 964, 966, 967, 0, 0, 0,
	0, 1282, 0, 0, 0, 0, 0, 0, 0, 965,
	2134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 984, 992,
	0, 976, 0, 0, 957, 958, 0, 977, 978, 979,
	987, 988, 989, 0, 990, 0, 985, 0, 0, 0,
	980, 0, 0, 0, 0, 0, 982, 960, 0, 0,
	991, 0, 975, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 0, 0, 0, 974, 981, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2133, 0, 0, 0, 0, 0, 983, 0, 0,
	971, 972, 973, 986, 0, 970, 968, 969, 961, 962,
	963, 964, 966, 967, 0, 0, 1500, 0, 0, 0,
	0, 976, 0, 0, 0, 0, 965, 0, 1565, 0,
	0, 1564, 0, 0, 957, 958, 985, 977, 978, 979,
	987, 988, 989, 0, 0, 984, 992, 0, 0, 0,
	980, 0, 0, 0, 0, 1197, 0, 960, 0, 0,
	991, 990, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 0, 0, 0, 975,
	959, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 983, 0, 0,
	971, 972, 973, 986, 981, 970, 968, 969, 961, 962,
	963, 964, 966, 967, 1198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 0, 0, 0,
	995, 0, 0, 0, 0, 0, 957, 958, 976, 977,
	978, 979, 987, 988, 989, 984, 992, 0, 0, 0,
	0, 0, 980, 985, 0, 0, 994, 0, 0, 960,
	0, 990, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 0, 0, 0, 975,
	0, 0, 959, 0, 0, 0, 0, 0, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 981, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 983, 0, 0, 971, 972, 973,
	986, 0, 970, 968, 969, 961, 962, 963, 964, 966,
	967, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 957, 958, 976, 977,
	978, 979, 987, 988, 989, 0, 0, 984, 992, 0,
	0, 0, 980, 985, 0, 0, 0, 0, 0, 960,
	0, 0, 991, 990, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 975, 959, 0, 0, 0, 0, 0, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 981, 0, 0, 0,
	0, 0, 0, 0, 983, 0, 0, 971, 972, 973,
	986, 0, 970, 968, 969, 961, 962, 963, 964, 966,
	967, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 957, 958,
	976, 977, 978, 979, 987, 988, 989, 984, 992, 0,
	0, 0, 0, 0, 980, 985, 0, 0, 0, 0,
	0, 960, 0, 990, 991, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 975, 0, 0, 959, 0, 0, 0, 0, 0,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 981, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 983, 0, 0, 971,
	972, 973, 986, 0, 970, 968, 969, 961, 962, 963,
	964, 966, 967, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 0, 0, 957, 958,
	976, 977, 978, 979, 987, 988, 989, 0, 0, 984,
	992, 0, 0, 0, 980, 985, 0, 0, 0, 0,
	0, 960, 0, 0, 991, 990, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 975, 959, 0, 0, 0, 0, 0,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 981, 0,
	0, 0, 0, 0, 0, 0, 983, 0, 0, 971,
	972, 973, 986, 0, 970, 968, 969, 961, 962, 963,
	964, 966, 967, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 1571, 0, 0, 0, 0,
	957, 958, 976, 977, 978, 979, 987, 988, 989, 984,
	992, 0, 0, 0, 0, 0, 980, 985, 0, 0,
	1566, 0, 0, 960, 0, 990, 991, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	1713, 0, 0, 975, 0, 0, 959, 0, 0, 0,
	0, 0, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 981, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 983, 0,
	0, 971, 972, 973, 986, 0, 970, 968, 969, 961,
	962, 963, 964, 966, 967, 0, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 0, 0,
	957, 958, 976, 977, 978, 979, 987, 988, 989, 0,
	0, 984, 992, 0, 0, 0, 980, 985, 0, 0,
	0, 0, 0, 960, 0, 0, 991, 990, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 975, 959, 0, 0, 0,
	0, 0, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 0, 0, 983, 0,
	0, 971, 972, 973, 986, 0, 970, 968, 969, 961,
	962, 963, 964, 966, 967, 0, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 957, 958, 976, 977, 978, 979, 987, 988,
	989, 984, 992, 0, 0, 0, 0, 0, 980, 985,
	0, 0, 1524, 0, 0, 960, 0, 990, 991, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 975, 0, 0, 959, 0,
	0, 0, 0, 0, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	983, 0, 1531, 971, 972, 973, 986, 0, 970, 968,
	969, 961, 962, 963, 964, 966, 967, 0, 0, 0,
	0, 0, 0, 0, 965, 0, 0, 0, 0, 0,
	0, 0, 957, 958, 976, 977, 978, 979, 987, 988,
	989, 0, 0, 984, 992, 0, 0, 0, 980, 985,
	0, 0, 0, 0, 0, 960, 0, 0, 991, 990,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 982, 0, 0, 0, 0, 0, 975, 959, 0,
	0, 0, 0, 0, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 981, 0, 0, 0, 0, 0, 0, 0,
	983, 0, 0, 971, 972, 973, 986, 0, 970, 968,
	969, 961, 962, 963, 964, 966, 967, 0, 0, 0,
	0, 0, 0, 0, 965, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 957, 958, 976, 977, 978, 979,
	987, 988, 989, 984, 992, 0, 0, 0, 0, 0,
	980, 985, 0, 0, 0, 0, 0, 960, 0, 990,
	991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 982, 0, 0, 0, 0, 0, 975, 0, 0,
	959, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 981, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 0, 0, 971, 972, 973, 986, 0,
	970, 968, 969, 961, 962, 963, 964, 966, 967, 0,
	0, 0, 0, 0, 0, 0, 965, 0, 0, 0,
	0, 0, 0, 0, 957, 958, 976, 977, 978, 979,
	987, 988, 989, 0, 0, 984, 992, 0, 0, 0,
	0, 985, 0, 0, 0, 0, 0, 960, 0, 0,
	991, 990, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 0, 0, 0, 975,
	959, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 0, 0, 971, 972, 973, 986, 0,
	970, 968, 969, 961, 962, 963, 964, 966, 967, 0,
	0, 0, 0, 0, 0, 0, 965, 0, 0, 957,
	958, 0, 977, 978, 979, 987, 988, 989, 976, 0,
	0, 0, 0, 0, 0, 984, 992, 0, 0, 0,
	0, 0, 960, 985, 0, 991, 0, 0, 0, 0,
	0, 990, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 959, 0, 0, 0, 975,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 983, 0, 0, 971, 972, 973,
	986, 0, 970, 968, 969, 961, 962, 963, 964, 966,
	967, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 976, 0,
	984, 992, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 985, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 975, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 835, 827, 852, 820, 843, 842, 0,
	0, 822, 821, 0, 0, 0, 854, 853, 0, 0,
	0, 0, 0, 0, 983, 0, 0, 971, 972, 973,
	986, 0, 970, 968, 969, 961, 962, 963, 964, 966,
	967, 0, 0, 0, 0, 0, 0, 0, 848, 0,
	840, 839, 0, 976, 0, 0, 0, 0, 0, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 830, 829, 831, 832, 833,
	0, 851, 0, 0, 0, 0, 0, 835, 827, 852,
	820, 843, 842, 0, 0, 822, 821, 0, 0, 983,
	854, 853, 971, 972, 973, 986, 824, 970, 968, 969,
	961, 962, 963, 964, 966, 967, 0, 0, 841, 0,
	0, 0, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 848, 0, 840, 839, 0, 0, 0, 0,
	0, 0, 0, 838, 0, 0, 0, 0, 836, 0,
	0, 0, 1216, 1214, 1215, 1218, 1217, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 825, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 826, 830,
	829, 831, 832, 833, 0, 851, 0, 856, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 823, 0, 0,
	849, 850, 0, 0, 0, 0, 0, 0, 0, 0,
	824, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 841, 0, 855, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	825, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 834, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 823, 0, 0, 849, 850, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 855,
}
var sqlPact = [...]int{

	235, -1000, -12, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 708, 16382, 16382, 20360, -1000, -1000, -1000, -1000, -1000,
	-1000, 770, 703, 256, 5300, 20360, 20360, 20078, 1137, 1137,
	21770, -1000, -1000, 25154, -1000, 4070, 529, 536, 529, 529,
	569, 21770, 20360, 672, 774, 155, -1000, 932, -13, 24872,
	20360, 1501, 43, 18386, 341, 235, 19796, 24590, 20360, 19514,
	647, 41, 16962, 20360, -1000, 46, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1329,
	318, 46, -1000, 1328, 1192, 1177, 18386, 24308, 24026, 23744,
	23462, -1000, 12579, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 879, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 345, 344,
	-1000, 19232, -1000, 1067, -1000, 42, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1066, -1000, 20360, -1000, -1000, 23180,
	22898, 731, 343, 1007, -1000, -1000, 607, 440, 1515, -1000,
	51, -1000, 1498, 1043, -1000, -1000, 1327, -1000, 1048, 1315,
	1314, 1311, 1310, 1307, -1000, 918, -1000, 1306, 438, 867,
	511, -1000, 1295, 1291, 1007, -1000, 1007, -1000, -1000, -1000,
	641, 21770, -1000, -1000, 18386, -1000, 22616, 20360, 20360, 1207,
	22334, -1000, 932, -1000, -1000, -1000, 1099, 1493, 1493, 1493,
	1524, 162, 153, 155, 34, 20360, -1000, 342, 34, 9449,
	9449, -1000, -1000, 341, -1000, 393, 15512, -1000, 8492, -1000,
	882, 1400, 487, 899, 1396, -80, 892, 880, 1392, 16100,
	16962, 41, 40, -1000, -1000, -1000, 4994, 16100, 713, 14666,
	46, -1000, -1000, -1000, 18386, 20360, 20360, 735, 22052, -1000,
	1390, 130, 1389, -1000, 122, 1385, -1000, 122, 1382, 33,
	-1000, -1000, -1000, -1000, -1000, -1000, 341, 18950, 20360, 1556,
	28940, -1000, 10726, -1000, -1000, 16382, 1217, 16382, -1000, -1000,
	1555, -1000, 20360, 10726, -1000, 39, 38, 1145, 1211, 13182,
	12887, 1456, 1018, -1000, -1000, -1000, 48, 5300, 726, 18668,
	-1000, -1000, 20360, 1343, 16382, 20360, 20360, 20360, 20360, 20360,
	-1000, -1000, 20360, -1000, 1144, -1000, -1000, 20360, 20360, 834,
	670, -1000, 37, 36, -1000, 21770, -1000, 135, -1000, 340,
	1122, 445, 158, 21488, 445, 1121, -1000, 1099, -1000, 1076,
	1109, 9769, 10726, 155, -1000, -1000, 155, 155, 10726, -1000,
	-1000, 20360, 34, 1553, 20360, 139, -1000, 27576, -1000, -1000,
	10726, 10726, 10726, 10726, 10726, 997, 375, -1000, 338, 337,
	6245, -1000, -1000, 1684, -1000, -1000, -1000, 175, -1000, -1000,
	10726, 46, -1000, -1000, -1000, -1000, 331, 1727, -1000, 485,
	-1000, -1000, -1000, 432, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1341, 330, 328, -1000, -1000, -1000, -1000,
	326, 322, 319, 317, 308, 307, 306, 305, 299, 298,
	296, 295, 292, 289, 288, 941, -1000, 475, -1000, -1000,
	475, 475, -1000, 275, 275, 283, -1000, -1000, -1000, -1000,
	275, -1000, -1000, -1000, 429, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 284, 139, -1000, -1000, -1000, 20360, 32, -1000,
	28352, -1000, 5, 812, -1000, 17822, 1478, 1471, 1476, 18386,
	1537, -13, 1289, 1536, -13, 1286, 639, 20360, 20360, 638,
	637, 18386, 415, -1000, -1000, -1000, -1000, -1000, 20360, -1000,
	-1000, 23, -1000, -1000, 1285, 31, -1000, -1000, 464, 103,
	1551, 103, 14948, -1000, 20360, 20360, -1000, 20360, -1000, -1000,
	20360, -1000, 20360, 20360, -1000, 20360, 156, 17258, 817, 1380,
	764, -13, 21, -1000, 1565, -1000, -1000, -1000, -1000, 95,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 283, 941, 275,
	275, 275, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 429,
	-1000, -1000, 475, 475, 475, -1000, -1000, 15, 28352, 630,
	-1000, 1277, 524, -1000, 455, 10, 952, 1187, 942, -1000,
	-1000, -1000, -1000, 24, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1769, -1000, -1000, 1682, 24, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1711, 5300,
	-1000, -1000, -1000, -1000, -1000, -1000, 20360, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 20360, 20360, 20360,
	952, 1187, -1000, -1000, 18386, 17540, 1550, 1378, 964, -1000,
	1549, 20360, 1047, 1119, -1000, 667, 1376, -1000, -1000, -1000,
	-1000, 28352, -1000, 28352, 814, 1198, -1000, 1198, 19, -1000,
	27464, -1000, 272, 9, 464, 9449, 14368, 28826, 28940, 5300,
	643, 10726, 10726, 10726, 10726, 10726, 10726, 10726, 10726, 10726,
	10726, 10726, 10726, 10726, 10726, 10726, 10726, 10726, 10726, 10726,
	10726, 10726, 10726, 1085, 10726, 622, 10726, 10726, 10726, 10726,
	1458, 939, 252, 1092, 5300, -1000, -1000, 1737, 1737, 1737,
	28574, 28574, 259, 375, -1000, 10726, -1000, 9130, 153, 27000,
	17, -1000, -1000, -1000, 7203, 456, 28352, 46, 5925, -1000,
	1678, 761, 1350, 1245, 264, 145, 140, 10726, 10726, 11045,
	11045, 10726, 11364, 10726, 10726, 6564, 10726, 10726, 10726, 10726,
	10726, 10726, -1000, 262, -1000, -1000, -1000, -1000, 1673, -1000,
	-1000, 1669, -1000, 636, 570, 1665, 464, 126, 8492, -1000,
	817, 20360, 20360, 20360, -1000, -1000, 1118, 21206, 1116, 28940,
	20360, -1000, 261, 257, 1176, 1175, 20360, 20360, 20924, 20642,
	20360, 827, -13, -1000, 255, -13, -1000, 254, 20360, 837,
	-1000, 20360, 20360, 832, 1223, 1079, -1000, 446, 16100, 697,
	1273, 20360, 790, 10726, 864, -1000, 14070, 489, 20360, 790,
	104, -1000, -1000, -1000, 411, 20360, -1000, -1000, -1000, 130,
	-1000, 122, 122, -1000, -1000, 18386, -1000, -1000, -1000, -1000,
	-1000, -1000, 28940, 374, 366, -1000, 1661, 611, -1000, 606,
	605, 602, -1000, 253, -1000, 10726, 20360, 20360, 1187, -1000,
	-1000, -1000, -1000, 785, -1000, 828, -1000, 13477, -1000, -1000,
	-1000, -1000, -7, -1000, -1000, -1000, 415, -1000, -1000, -1000,
	124, 3, 13, 28940, -1000, -1000, -1000, -1000, -1000, 20360,
	300, 20360, -13, 20360, -1000, 1706, -13, 20360, 1375, 1416,
	406, 20360, -1000, -1000, -1000, 10726, -1000, -1000, -1000, -13,
	-1000, 1230, -1000, -114, 2055, 994, -143, 159, 419, -1000,
	13772, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 435, 508, 508, 633, 633, 633, 633, 1725, 498,
	1075, 1039, 2983, 2983, 2983, 629, 190, 190, 2983, 2983,
	2983, 28574, 28464, 387, 10726, 10726, 599, 938, 252, 387,
	10726, 387, 387, 387, 387, -1000, 806, -1000, -1000, -1000,
	-1000, 1269, 249, 11364, 11364, -1000, -1000, -1000, 6245, 11683,
	-1000, -1000, -1000, -1000, -1000, 246, 10726, -1000, 27127, -170,
	-3, -1000, -1000, 10726, -4, -119, -1000, -1000, 705, -1000,
	10726, -1000, -8, 10726, 10726, 10726, 120, 119, -1000, 995,
	245, 244, 10726, -1000, -1000, 28242, 25736, 117, 1266, -68,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 116, 115, 28130,
	-68, 114, 2997, -1000, 11364, 11364, 11364, 6245, 241, 113,
	27354, -68, 28020, 8811, 8811, 8811, 111, 27908, 10726, -68,
	3873, 3746, 3519, -11, -15, -21, 1650, -25, 109, 434,
	428, 108, 1230, -1000, -1000, -1000, -1000, 595, 593, 1374,
	-1000, 1114, -1000, 495, -1000, 1058, 10726, 12297, 240, 233,
	885, -1000, 1372, 1071, 1369, 1071, -1000, 5, 808, -1000,
	10726, -1000, 10726, -1000, 582, -1000, -1000, 581, 446, 1265,
	678, -1000, 1033, -1000, -1000, 687, -1000, -1000, 6883, 28352,
	-1000, 790, 1480, -26, -1000, -1000, -1000, 464, 14948, 14368,
	8492, -27, -1000, -1000, -1000, 817, -1000, 565, 1632, 106,
	1132, 1054, 844, 756, 1625, 28352, -7, -7, -1000, -1000,
	-1000, -1000, -1000, 20360, -1000, 1210, -1000, 17540, 232, 20360,
	227, -1000, 225, -1000, -1000, 221, 20360, 1151, 406, 16680,
	-1000, 445, -1000, 105, 1242, 1521, -1000, 14368, 1183, 1179,
	14368, 1101, 1000, 1000, 1000, -1000, 220, 157, 362, 419,
	4368, 10726, 18104, 1021, 71, 101, 2055, 10726, 387, 387,
	10726, 11364, 11364, -1000, 387, -1000, -1000, -1000, -1000, -1000,
	1263, 219, 10726, 28940, 3841, 3602, -35, -1000, 8173, -16,
	-1000, 10726, -1000, 26900, -1000, -1000, 364, 1414, -1000, 10726,
	27798, 88, 7854, -1000, 27686, -19, -19, -1000, 1703, -1000,
	15230, 470, 1023, 26773, 28826, 28940, -1000, 10726, -1000, -1000,
	1262, 10726, -1000, 28826, 28940, 11364, 11364, 11364, 11364, 11364,
	11364, 11364, 11364, 11364, 11364, 11364, 11364, 11364, 11364, 11364,
	11364, 11364, 11364, 11364, 1173, 11364, 1733, 1733, 1733, -22,
	7535, -1000, 1337, 1262, 10726, 10726, 28940, 87, 84, 82,
	-1000, 10726, -68, 10726, 10726, 10726, -1000, -1000, -1000, 80,
	-1000, 1623, -1000, -1000, -1000, -1000, 1242, 20360, 20360, 20360,
	1368, -1000, 1592, -1000, 26673, -37, -1000, 323, 1490, 10726,
	-1000, -1000, 218, 12297, 20360, -1000, 1197, 1228, 514, 20360,
	-1000, 20360, -1000, 20360, 20360, 20360, -48, -54, 20360, 20360,
	-1000, 16100, 568, 215, -1000, -23, -1000, -1000, 230, -13,
	790, -1000, -34, -1000, 407, -1000, 361, 359, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 79, -1000, -1000, 1212,
	-1000, 12297, 214, 20360, 17540, 1543, 12297, 1046, 1167, 406,
	16680, -1000, 667, -1000, 451, 10726, 10726, 2055, 14368, 14368,
	1235, 1178, 14368, -1000, -1000, -1000, -1000, 357, 384, 354,
	12579, 419, 18104, -1000, 1600, 1193, -58, -1000, -1000, 20360,
	213, -1000, 419, 1693, 387, 3414, 3376, 10726, 28940, 28679,
	-59, 10726, 10726, -1000, -60, -1000, 10726, 351, 28352, -1000,
	-1000, -1000, 28352, 10726, 1689, 10726, 78, 76, 75, -1000,
	-1000, -1000, 25436, 10726, 70, -1000, 68, 62, 28352, 1337,
	28352, -1000, -1000, 567, 567, 688, 688, 688, 688, 1733,
	2152, 640, 2199, 818, 818, 818, 1095, 875, 875, 818,
	818, 818, 1261, 1188, 212, 3979, 10726, -66, -1000, -1000,
	-1000, 28352, 28352, 61, -1000, -1000, -1000, -68, 3319, 26546,
	26446, -1000, 59, 451, -1000, -1000, -1000, 20360, -1000, 20360,
	-1000, 5300, 20360, 1240, 1089, -1000, -1000, 1174, 208, 11364,
	20360, -1000, 900, 12297, 1488, 46, 5300, 1488, 26319, 5925,
	-70, -77, 1088, -1000, 1084, 10726, -1000, 28940, 1071, 1071,
	-1000, 577, 575, 560, 549, -1000, -1000, -49, 15818, 1700,
	1421, 20360, 1475, -1000, -1000, 204, -1000, -1000, -1000, 973,
	-82, 12297, -86, 58, -13, -87, 20360, -1000, 406, 16680,
	-1000, 1416, -1000, 20360, 28352, -68, -1000, 1235, -1000, 199,
	10726, 14368, -1000, -143, -1000, -91, -1000, 419, -92, 18104,
	-1000, 349, -167, -1000, 405, -1000, 419, 196, 20360, 18104,
	10726, 10726, 28679, -96, -1000, 387, 387, -1000, 26123, -1000,
	28352, -1000, 27686, -1000, -1000, -1000, 967, -1000, 26091, -1000,
	-1000, -1000, -1000, 11364, 1260, 195, 28940, 25983, -1000, -1000,
	10726, -1000, -1000, -1000, -1000, -1000, 809, -1000, -1000, 20360,
	1103, -1000, -1000, 10726, 3979, 194, 1210, 193, -1000, -1000,
	-1000, -1000, -1000, -1000, 1490, -8, -1000, 815, -1000, -1000,
	28352, 1489, -1000, -1000, 20360, 20360, 180, 176, -1000, 172,
	46, -97, -1000, 403, 621, -98, 20360, -1000, -1000, 5606,
	20360, 900, -103, -1000, 1210, -1000, 900, 168, 16680, -1000,
	1151, -67, -1000, 1541, -1000, 20360, 28352, -1000, 419, -1000,
	1597, 18104, 156, -1000, -1000, 1193, -1000, 4685, 18104, 20360,
	-104, -1000, 387, 387, -1000, -1000, 57, 1023, 1503, -1000,
	3497, 11364, 28940, -115, -1000, 25876, -1000, -1000, 1366, 25768,
	1135, 20360, -1000, 20360, 1488, 56, 20360, 497, 5300, -1000,
	-1000, 10726, 10726, 10726, 1700, -1000, -1000, 1696, 733, -1000,
	464, -1000, 167, 1210, 900, -1000, 1210, 12297, -1000, 1167,
	20360, 164, -123, 18104, -1000, -1000, 348, -1000, -1000, 1595,
	-1000, -127, -1000, -1000, 800, 10726, 3497, -129, -1000, -1000,
	1356, -1000, 1040, 925, 55, -135, -1000, -1000, 158, -1000,
	10726, -1000, -137, -141, -19, -1000, -1000, 14948, -1000, 20360,
	-1000, 1210, -1000, -147, -1000, -1000, -1000, -1000, -1000, 419,
	347, -1000, 54, 10407, 10407, -68, -1000, 20360, -1000, 1042,
	1041, 738, -1000, -1000, -1000, -1000, -1000, 1135, 28352, -1000,
	-1000, 53, -122, -160, -1000, 900, 18104, -1000, -1000, -1000,
	-1000, 11991, 1053, 786, 27227, -1000, -1000, -1000, 1429, -1000,
	502, 998, 998, 1040, 1689, -1000, 1068, 1210, -1000, 1572,
	-1000, -1000, -1000, -1000, -1000, -1000, 1579, -1000, -1000, 1202,
	-1000, -1000, -1000, -1000, -1000, -1000, 10088, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 2010, 2006, 1550, 1697, 2003, 1999, 1666, 1998, 1997,
	1995, 1994, 1993, 1989, 119, 1664, 1658, 19, 1652, 1988,
	121, 1985, 1984, 1981, 115, 1976, 1974, 1967, 1965, 87,
	1964, 1960, 110, 1649, 1595, 1562, 1958, 1957, 112, 1956,
	28, 1953, 97, 1952, 21, 175, 2414, 147, 1950, 1949,
	1948, 53, 124, 94, 1946, 86, 1944, 1942, 56, 49,
	26, 22, 1941, 122, 135, 958, 30, 1933, 1932, 155,
	1931, 27, 37, 1934, 160, 159, 136, 139, 1930, 1929,
	1928, 1926, 69, 1925, 6, 1924, 1914, 10, 64, 17,
	1913, 43, 20, 1912, 1911, 140, 1909, 93, 123, 1530,
	138, 133, 1157, 1908, 100, 11, 96, 1907, 1906, 144,
	92, 1904, 29, 95, 154, 1903, 81, 164, 73, 39,
	82, 125, 1902, 1901, 1897, 107, 1893, 127, 85, 1885,
	1880, 98, 1874, 149, 148, 1873, 1867, 141, 1866, 1864,
	156, 176, 1862, 1858, 165, 1856, 16, 61, 76, 41,
	1525, 1522, 128, 75, 32, 15, 1853, 1266, 1333, 792,
	42, 103, 60, 58, 105, 59, 68, 152, 66, 1850,
	1849, 131, 1847, 1843, 1836, 1835, 1832, 102, 1831, 1829,
	91, 150, 12, 3, 14, 117, 44, 40, 106, 129,
	162, 134, 1828, 114, 137, 57, 108, 1823, 1820, 1663,
	142, 1817, 1816, 1815, 1593, 1576, 1572, 278, 1814, 1811,
	868, 659, 1810, 1809, 72, 1808, 143, 1806, 1805, 153,
	166, 157, 1802, 52, 31, 118, 1801, 126, 65, 0,
	1796, 173, 1800, 146, 101, 1798, 1794, 1793, 1790, 38,
	2, 9, 5, 7, 4, 36, 25, 1789, 1787, 145,
	23, 89, 1786, 161, 1785, 1784, 1779, 50, 1774, 18,
	1770, 13, 1768, 1763, 8, 1, 1760, 1757, 151, 1755,
	130, 1752, 1559, 1750, 158, 1745, 1741, 1662, 55, 109,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 53, 53, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 50, 50, 55, 55, 55, 57, 57, 54, 54,
	49, 49, 5, 5, 227, 227, 228, 228, 39, 39,
	43, 43, 40, 41, 41, 42, 42, 6, 6, 6,
	7, 7, 7, 7, 7, 7, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 101, 101, 100, 100, 103,
	103, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 195, 195, 194, 19,
	169, 169, 20, 20, 20, 20, 21, 126, 126, 22,
	22, 22, 22, 23, 28, 268, 268, 268, 272, 272,
	273, 273, 274, 274, 274, 274, 274, 274, 274, 270,
	270, 27, 31, 31, 31, 31, 31, 31, 145, 141,
	141, 143, 143, 143, 143, 64, 140, 140, 140, 140,
	142, 142, 142, 142, 220, 219, 219, 225, 225, 225,
	79, 79, 79, 79, 79, 80, 80, 80, 218, 218,
	218, 218, 226, 226, 226, 226, 226, 226, 81, 81,
	81, 224, 224, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 18, 269, 269, 271,
	271, 33, 33, 34, 34, 35, 35, 35, 35, 10,
	10, 11, 11, 82, 82, 83, 83, 148, 148, 148,
	148, 84, 84, 56, 56, 56, 147, 237, 237, 238,
	238, 238, 238, 238, 238, 239, 239, 239, 239, 239,
	239, 239, 235, 235, 236, 233, 233, 234, 234, 234,
	234, 275, 275, 146, 146, 87, 87, 242, 242, 242,
	242, 240, 240, 240, 240, 240, 243, 241, 244, 244,
	244, 244, 244, 181, 181, 181, 37, 12, 62, 62,
	13, 9, 9, 130, 130, 91, 91, 186, 186, 186,
	72, 72, 51, 51, 51, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 131, 131, 132, 132,
	25, 30, 36, 36, 36, 36, 36, 277, 277, 68,
	68, 68, 68, 69, 69, 144, 144, 144, 144, 144,
	63, 8, 8, 58, 58, 59, 59, 60, 60, 61,
	61, 278, 278, 24, 24, 24, 75, 75, 137, 137,
	137, 139, 139, 138, 138, 138, 116, 116, 116, 38,
	96, 96, 105, 105, 106, 106, 192, 107, 107, 29,
	29, 46, 46, 44, 44, 44, 44, 44, 44, 45,
	45, 47, 47, 47, 47, 47, 47, 47, 250, 250,
	250, 253, 253, 249, 251, 251, 252, 252, 276, 276,
	117, 117, 117, 86, 85, 85, 89, 89, 88, 90,
	90, 185, 114, 114, 114, 114, 133, 134, 134, 135,
	135, 136, 136, 113, 113, 165, 165, 48, 48, 95,
	95, 97, 97, 155, 155, 155, 156, 156, 154, 154,
	154, 154, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 266, 266, 266, 267, 267, 184, 184, 188, 188,
	188, 188, 188, 188, 182, 182, 182, 182, 183, 183,
	193, 193, 120, 120, 120, 120, 118, 118, 119, 119,
	189, 189, 189, 189, 115, 115, 190, 190, 190, 149,
	149, 196, 196, 196, 214, 214, 94, 94, 94, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 198, 198, 198, 198, 200,
	200, 200, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 213, 213, 213, 213,
	213, 201, 201, 208, 208, 209, 209, 210, 211, 202,
	202, 203, 203, 204, 205, 212, 212, 212, 212, 216,
	216, 206, 206, 206, 206, 206, 207, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 128, 128, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 159, 159, 159, 159, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	245, 245, 245, 245, 245, 245, 245, 247, 247, 248,
	248, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 254, 254,
	255, 255, 257, 257, 258, 258, 259, 260, 260, 260,
	261, 262, 262, 256, 256, 263, 263, 263, 264, 264,
	265, 265, 265, 265, 265, 171, 171, 171, 172, 172,
	173, 179, 179, 179, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	70, 70, 70, 70, 70, 102, 102, 168, 168, 166,
	166, 166, 170, 170, 121, 121, 215, 215, 215, 215,
	215, 215, 215, 122, 122, 122, 129, 123, 123, 124,
	124, 124, 124, 124, 124, 162, 163, 125, 125, 125,
	164, 164, 174, 178, 178, 177, 176, 176, 175, 175,
	152, 152, 153, 153, 151, 150, 110, 110, 109, 109,
	108, 108, 279, 279, 180, 180, 111, 111, 112, 104,
	104, 191, 191, 191, 191, 98, 98, 77, 77, 99,
	99, 73, 73, 76, 76, 74, 74, 74, 74, 92,
	92, 93, 93, 71, 71, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 217, 217, 217, 167,
	65, 65, 65, 66, 66, 67, 67, 222, 222, 222,
	223, 223, 223, 223, 221, 221, 221, 221, 221, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 6, 1, 1, 1, 3, 3, 0,
	2, 0, 2, 1, 3, 5, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 3, 6, 3, 4, 1, 5, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 4, 4, 4, 2, 2,
	4, 2, 4, 4, 4, 4, 4, 4, 2, 3,
	3, 2, 3, 3, 4, 2, 3, 4, 3, 3,
	4, 4, 2, 5, 5, 6, 2, 2, 0, 2,
	0, 6, 6, 5, 5, 4, 12, 4, 12, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 5, 2, 0,
	6, 11, 14, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 8, 11, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 6, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 2, 4, 4, 4, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 2, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 3, 3,
	0, 1, 3, 3, 5, 1, 1, 3, 2, 4,
	4, 0, 7, 4, 6, 3, 1, 5, 6, 9,
	5, 0, 2, 3, 1, 3, 2, 0, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 3, 4, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 6, 4, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 2, 2, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 1, 2, 2, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, 23, 34, 225, 66, -8, -9, -10, -11, -12,
	-13, -252, 94, 103, 125, 206, 101, 87, 119, 228,
	235, -44, -46, 245, -145, 248, 35, 257, 60, 97,
	230, 223, 224, 282, 68, -250, -47, -45, 330, 305,
	311, 239, -48, 266, 297, 333, 266, 134, 80, 300,
	-268, -99, 266, 80, -74, -65, 323, 4, -229, -231,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 54,
	59, 60, 61, 63, 65, 66, 67, 70, 71, 78,
	79, 81, 83, 87, 89, 93, 94, 96, 101, 102,
	103, 109, 110, 113, 115, 120, 125, 126, 127, 128,
	135, 138, 140, 133, 148, 150, 151, 154, 153, 158,
	161, 164, 166, 167, 168, 171, 169, 173, 174, 176,
	175, 181, 183, 184, 186, 189, 192, 195, 198, 199,
	200, 201, 204, 206, 208, 209, 210, 211, 213, 214,
	216, 217, 218, 219, 220, 223, 221, 222, 224, 225,
	226, 228, 230, 231, 233, 246, 247, 258, 235, 236,
	237, 238, 241, 242, 243, 245, 248, 250, 253, 256,
	257, 259, 262, 260, 255, 265, 267, 268, 269, 270,
	271, 278, 282, 283, 284, 285, 288, 289, 290, 292,
	294, 295, 296, 301, 306, 307, 308, 309, 28, 36,
	37, 38, 39, 41, 42, 45, 46, 50, 51, 52,
	55, 82, 84, 85, 100, 104, 105, 111, 121, 123,
	129, 130, 139, 141, 142, 143, 145, 156, 170, 180,
	182, 193, 197, 203, 205, 212, 232, 240, 251, 252,
	261, 263, 273, 274, 275, 279, 280, 297, 298, -268,
	-73, -65, 80, 89, 138, 290, 289, 80, 134, 266,
	300, -17, 330, -29, -7, -15, -4, -24, -38, -14,
	-32, -18, -33, -34, -35, -16, 23, -221, 4, -229,
	-231, -230, -232, 57, 69, 118, 137, 131, 147, 149,
	157, 159, 172, 194, 196, 229, 249, 22, 24, 25,
	26, 27, 29, 30, 31, 32, 43, 48, 49, 53,
	56, 58, 64, 68, 72, 73, 74, 75, 76, 77,
	86, 88, 90, 91, 92, 95, 97, 99, 106, 107,
	108, 114, 116, 117, 119, 122, 124, 132, 134, 136,
	144, 146, 152, 155, 160, 162, 163, 177, 178, 179,
	185, 187, 188, 190, 191, 202, 207, 215, 227, 239,
	244, 254, 264, 266, 272, 276, 277, 281, 286, 287,
	291, 293, 299, 300, 302, 303, 304, 305, -65, -65,
	-65, 206, 22, -272, 22, -273, -274, 68, 94, 119,
	239, 138, 89, 289, -272, -69, 235, -65, -141, 161,
	242, 54, 232, 278, -142, -140, -220, 273, 171, -100,
	-65, 4, 22, 54, 244, 80, 59, 81, 120, 134,
	135, 64, 65, 151, 209, 161, 243, 267, 273, 278,
	68, 292, 269, 102, -277, 278, 278, -277, -277, -68,
	278, 276, -69, -220, -276, 266, 266, 291, 300, -130,
	80, 287, -45, -47, -46, -88, -89, 286, 144, 99,
	191, -44, -46, -250, -253, 213, -249, -65, -253, -85,
	-86, 22, 91, 334, -189, -73, 188, -112, 330, -3,
	-189, 129, -73, -76, 129, -73, -65, -189, 129, 276,
	334, -99, -92, -65, -151, -150, 332, 117, 117, 330,
	-109, -110, -150, -151, 117, 146, 146, -190, -189, -65,
	129, -77, 129, -76, -101, 129, -100, -101, 129, -195,
	-194, -223, 4, -229, -231, -230, 297, 266, 134, -169,
	330, -126, 330, -65, 22, 187, 334, 187, -65, -141,
	52, -141, 246, 330, -143, -63, -64, 148, 208, 276,
	315, 117, 309, -81, 5, 86, -103, 332, 54, 246,
	209, 243, 117, -269, 187, 117, 117, 117, 117, 117,
	209, 243, 117, 309, 148, 208, 258, 266, 300, 117,
	117, -144, -63, -64, -144, 276, -69, -115, -189, -100,
	129, -65, -100, 134, -65, 129, -88, -89, -114, -133,
	-134, 160, 185, -117, 22, 91, -117, -117, 44, 331,
	331, 334, -253, -93, 330, -104, -191, -157, 323, -159,
	321, 322, 316, 177, 310, -171, -161, -174, 100, 232,
	330, -73, -160, 335, 9, -247, -46, 29, -172, -173,
	48, -65, 7, 8, 5, 6, -71, -198, -167, -207,
	281, 106, 179, -245, -246, 4, -229, -222, -199, -209,
	-203, -206, 145, 57, 73, 76, 74, 77, 244, 291,
	49, 28, 104, 105, 197, 203, 263, 279, 280, 129,
	180, 130, 55, 121, 156, 93, 37, 39, 41, 42,
	50, 51, 82, 84, 85, 111, 139, 141, 142, 143,
	182, 212, 251, 261, 274, 275, 298, -230, -210, -211,
	-204, -205, -212, -104, -112, 323, -73, 330, -111, -180,
	-157, 86, -53, 221, -52, 21, 23, 94, 295, 100,
	255, 270, 236, 255, 270, 236, 221, 100, 335, 221,
	221, 100, -227, -224, 9, -223, 5, -74, 334, -221,
	323, -228, -227, 259, 331, -98, -73, -110, -190, -75,
	-73, -75, 245, -65, 30, 100, -55, 334, 47, 226,
	100, -55, 334, 100, -55, 100, 331, 334, -189, 129,
	-76, 30, -168, -196, -197, -199, -208, -202, -206, -207,
	40, 46, 45, 271, 170, 240, 252, 38, 186, 140,
	139, 141, 142, 143, 251, 37, 212, 111, 93, 85,
	84, 182, 42, 41, -210, -211, -204, -205, 82, 274,
	275, 145, 39, 51, 50, 298, 261, -102, -157, -268,
	-274, -268, 30, -140, -220, -102, 334, 334, 158, -80,
	164, 176, 126, -219, 86, -225, -218, -181, 9, 281,
	106, 187, -224, 8, 322, -217, 7, 321, -219, 86,
	71, -226, 5, 4, -167, -181, 86, 161, -207, 332,
	-221, 247, -100, 22, -220, -271, 114, -268, -220, -220,
	-220, -220, -220, -65, 158, -220, -220, 266, 134, 266,
	334, 334, -69, -55, 334, 330, -87, 177, -251, 305,
	-87, 330, -66, 129, -65, -251, 177, -114, -134, -133,
	-135, -157, 22, -157, -159, -45, -45, -45, -90, -185,
	-157, -249, 30, -92, -95, 334, 117, 10, 11, 56,
	33, 321, 322, 323, 324, 112, 325, 326, 319, 320,
	318, 313, 314, 315, 62, 165, 234, 13, 14, 15,
	26, 190, 159, 310, 131, 249, 316, 16, 17, 18,
	147, 36, 132, -70, 30, 4, -78, -157, -157, -157,
	-157, -157, 196, -108, -152, 328, -46, 330, -46, -157,
	-102, 7, -46, -166, 328, -175, -157, -109, 330, 5,
	330, 5, -254, 306, 114, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 205, -216, 301, -216, -216, -200, 330, -200,
	-201, 330, -200, 307, 311, 330, -95, -73, 334, 331,
	334, 276, -131, 64, 58, -147, 129, 58, -233, -65,
	64, -234, 53, 287, 207, 116, -131, 64, -131, 64,
	64, -189, 33, -29, 117, 33, -29, 117, 276, -76,
	-65, 276, 276, -189, -193, 312, -65, -193, 334, 117,
	331, 334, -149, 303, -137, -29, 330, 86, 30, -137,
	-105, -106, -192, -107, -73, 330, -65, -65, -76, -77,
	-100, -101, -101, -17, -194, 100, -20, -29, -24, -38,
	-14, 331, 334, -94, 29, -127, 330, 308, 168, 83,
	127, 167, -128, 238, 331, 334, 276, 117, 278, 331,
	-64, -63, -79, 211, 253, 222, 241, 334, 8, 7,
	7, -221, -270, -65, -73, -76, -73, -64, -63, -189,
	-82, -92, -83, -65, -148, -147, -235, -236, -233, 134,
	287, 107, 30, 100, -62, 201, 30, 187, 177, -58,
	268, 100, -136, 232, 233, 334, -51, 31, 90, 330,
	331, -149, -191, -97, -187, 328, -189, -73, -46, -188,
	330, -214, -196, -213, 217, 218, 216, 220, 219, -196,
	-221, 273, -157, -157, -157, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, 159, 131, 249, 36, 132, -157,
	276, -157, -157, -157, -157, 169, 177, 179, 281, 106,
	288, 91, 183, -279, 264, 32, -164, -46, 330, -179,
	27, 254, 22, -221, -171, 232, 330, -152, -157, -153,
	-102, 331, 331, 334, -102, -170, 329, -166, -178, -177,
	302, 331, -102, 299, 22, 91, 323, 7, -127, -255,
	109, 122, 330, 331, 331, -157, -157, -121, -215, -102,
	4, 308, 168, 83, 127, 167, 238, -121, -122, -157,
	-102, -123, -158, -159, 321, 322, 316, 330, 232, -124,
	-157, -102, -157, 43, 155, 277, -125, -157, 117, -102,
	-157, -157, -157, -102, -102, -102, 330, 7, 7, 273,
	273, 7, -149, 331, -180, -52, -73, -65, -65, 177,
	-147, 129, -57, 177, -196, -65, 330, 330, 150, 150,
	-65, -65, 129, -65, 129, -65, -65, -53, 221, -29,
	330, -29, 330, -65, 221, -65, -73, 221, -39, 128,
	183, -42, 305, -227, 259, 117, -73, -116, 227, -157,
	-116, -139, 187, -98, 297, -65, -116, -96, 334, 117,
	315, -98, -55, -55, -55, -189, -196, 328, 328, 7,
	276, 276, 276, 276, 330, -157, -270, -270, -63, 285,
	61, 211, -225, 334, -193, 331, 331, 334, -66, 134,
	-66, -29, -100, 5, -29, -73, 100, -59, 96, -278,
	315, -65, -185, -20, -113, 122, -193, 334, 69, -120,
	149, 172, 118, 157, 229, 137, 7, 103, -32, -154,
	335, 330, -184, 311, -46, -188, -187, 309, -157, -157,
	276, -279, 264, -164, -157, 169, 179, 281, 106, 288,
	91, 183, 117, 330, -158, -158, -102, -161, 330, -102,
	329, 338, 331, -157, 329, 329, 334, -176, -177, 95,
	-157, -89, 334, -88, -157, -102, -102, 331, 331, -260,
	195, 330, 330, -157, 30, 334, 331, 117, 331, 331,
	-129, 202, 331, 10, 11, 321, 322, 323, 324, 112,
	325, 326, 319, 320, 318, 313, 314, 315, 62, 165,
	234, 13, 14, 15, 147, 132, -158, -158, -158, -102,
	330, 331, -162, -163, 117, 114, 30, -125, -125, -125,
	331, 117, -102, 334, 334, 334, 331, 331, 331, 7,
	331, 334, 331, 309, 309, 331, -113, 276, 276, 100,
	177, 294, -237, -234, -157, -91, -186, -65, -248, 330,
	-245, -246, -71, 330, 330, -50, 94, 245, -132, 100,
	-55, 100, -55, 276, -131, 64, -102, -102, 276, 276,
	-42, 117, 265, 189, 259, -104, 178, -116, 63, 331,
	-149, -106, -97, -180, 331, 329, 7, 7, 331, 168,
	127, 167, -128, 167, -128, -128, 7, -65, -84, 133,
	-148, 330, -66, 330, 330, -87, 330, -65, -60, 154,
	-278, -224, -251, 331, -165, 124, 44, -187, 149, 149,
	-187, -120, 149, -118, 194, -118, -118, -266, 330, -17,
	330, 329, -184, -221, 328, 336, -102, -183, -182, 30,
	-65, 192, 331, -157, -157, -158, -158, 117, 330, -157,
	-168, 26, 26, 331, -102, 331, 334, -153, -157, 331,
	-166, 97, -157, 272, 331, 299, -89, -89, -89, 5,
	-261, -65, 330, 303, -88, 331, -214, -196, -157, -162,
	-157, -214, -196, -158, -158, -158, -158, -158, -158, -158,
	-158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
	-158, -158, 91, 177, 183, -158, 334, -102, 331, -163,
	-162, -157, -157, -196, 331, 331, 331, -102, -157, -157,
	-157, 331, 7, -165, -65, -65, -147, 100, -238, 64,
	-239, 56, 107, 68, 177, 179, 287, 207, 53, 86,
	215, 331, 331, 334, -72, -109, 56, -72, -157, 330,
	-91, -92, 177, 86, 177, 86, 79, 283, -65, -65,
	-73, -65, -65, 331, 331, -65, -73, -228, 273, 330,
	-138, 330, 187, -29, -116, 315, 329, 329, 331, 132,
	-91, 330, -92, -82, 30, -91, 187, -61, 153, -278,
	-224, -58, -257, 304, -157, -102, -187, -187, -119, 293,
	187, 149, -187, 329, 331, -267, 7, 329, -195, -184,
	-183, 7, -156, -155, 115, 175, 331, -65, 330, -184,
	26, 26, -157, -168, 331, -157, -157, 331, -157, 329,
	-157, 5, -157, 331, 331, 331, -262, -65, -157, 331,
	331, 331, -163, 117, 91, 183, 330, -157, 331, 331,
	334, 331, 331, 331, -257, -147, -65, -221, -65, 107,
	129, 179, 150, 330, -158, -73, -146, -275, 67, 262,
	-186, -51, -221, -51, 331, -102, 331, 331, 179, 179,
	-157, -196, -55, -55, 276, 276, 276, 276, -160, -71,
	-65, -41, -40, 5, 92, -92, 64, -112, -46, 330,
	198, 331, -91, 331, 331, -29, 331, -73, -278, -224,
	-59, -258, -259, -65, -119, 330, -157, -187, -154, 331,
	334, -184, 331, -183, 329, 334, 337, 315, -184, 330,
	-92, -182, -157, -157, 331, 331, -89, -256, 200, 331,
	-158, 117, 330, -168, 331, -157, -239, -66, 177, -157,
	-67, 330, -84, 330, -72, -89, 215, -54, 56, -65,
	-65, 330, 330, 330, 334, 331, -43, 315, 289, 178,
	331, -65, -65, -146, 331, -84, -146, 330, -224, -60,
	334, 30, -92, -184, 7, -183, -17, -155, -221, 328,
	-183, -92, 331, 331, -89, 44, -158, -168, 331, 331,
	100, 331, -242, 166, -65, -92, -51, 331, -73, -49,
	293, -221, -102, -102, -102, -40, 5, 245, -149, 330,
	-84, -146, -84, -91, -61, -259, -261, 331, -182, 329,
	7, 331, -263, 210, 233, -102, 331, 107, -240, -243,
	-241, 187, 118, 199, 250, 331, 331, -87, -157, 331,
	331, -89, -105, -92, -84, 331, -184, 329, 331, -264,
	-265, 36, 284, 71, -157, -264, -65, -241, 187, -243,
	187, 289, 89, -242, 331, -149, 331, -146, -183, -265,
	204, 113, 232, 204, 113, -244, 174, 226, 47, 245,
	-244, -240, -56, 47, 226, -84, 26, 20, 179, 86,
	-265,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 0, 0, 0, 0, 80, 81, 82, 83, 84,
	85, 0, 0, 437, 0, 0, 0, 0, 0, 0,
	0, 409, -2, 0, 157, 0, 358, 0, 358, 358,
	362, 0, 0, 439, 324, 436, -2, 447, 0, 0,
	0, 445, 423, 0, 0, -2, 0, 0, 0, 0,
	0, 135, 0, 970, 899, 905, 906, 930, 931, 932,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
	1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 0,
	0, 901, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 0, 236, 944, 945,
	946, 947, 948, 1139, 1140, 1141, 1142, 1143, 1144, 1145,
	1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,
	1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165,
	1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
	1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185,
	1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
	1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 121, 128,
	129, 1023, 131, 0, 138, 139, 140, 142, 143, 144,
	145, 146, 147, 148, 0, 351, 1048, 364, 152, 1000,
	1053, 958, 1126, 1071, 160, 170, 0, 1132, -2, 174,
	97, 203, 204, 0, 208, 209, 0, 211, 238, 0,
	0, 0, 0, 0, 218, 0, 221, 225, 0, 0,
	0, 232, 0, 0, 369, 357, 369, 354, 355, 356,
	359, 0, 350, 151, 0, 438, 0, 0, 0, 0,
	0, 323, -2, 419, 420, -2, 0, 442, 442, 442,
	0, 0, 420, 0, 428, 1028, 431, 912, 429, 0,
	0, 444, 443, 0, 424, 520, 0, 467, 0, 2,
	0, 1110, 520, 0, 1110, 904, 0, 0, 1110, 0,
	0, 136, 137, 909, 907, 908, 0, 0, 0, 0,
	902, 878, 876, 877, 0, 0, 0, 0, 526, 87,
	1110, 55, 1110, 897, 55, 1110, 95, 55, 1110, 0,
	116, 118, 940, 941, 942, 943, 1137, 0, 0, 0,
	0, 126, 0, 130, 132, 0, 0, 0, 363, 153,
	1099, 155, 0, 0, 159, 161, 162, 0, 0, 0,
	0, 0, 0, 173, 198, 199, 98, 0, 0, 0,
	219, 222, 0, 240, 0, 0, 0, 0, 0, 0,
	220, 223, 0, 226, 0, 228, 229, 0, 0, 0,
	0, 352, 365, 366, 353, 0, 361, 55, 524, 296,
	1110, 435, 296, 934, 435, 1110, -2, 0, 415, 454,
	455, 0, 0, 0, 440, 441, 0, 0, 0, 411,
	412, 0, 430, 0, 0, 470, 889, 893, 894, 623,
	0, 0, 0, 0, 0, 0, 715, 717, 1104, 1126,
	0, 719, 720, 0, 722, 724, 725, 0, 728, 729,
	869, 901, 915, 916, 917, 918, 0, 0, 921, 0,
	923, 924, 925, 769, 738, -2, -2, 913, 555, 556,
	557, 558, -2, 1139, 742, 744, 746, 747, 748, 749,
	0, 1088, 1105, 1106, 1122, 1123, 1131, 1135, 1136, 1110,
	1119, 1111, 1100, 1108, 1117, 975, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 939, 585, 586,
	591, 592, 594, 470, 468, 521, 522, 0, 0, 886,
	884, 885, 32, 347, 34, 0, 347, 347, 0, 0,
	0, 0, 245, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 511, 64, 65, 201, 202, 900, 0, 874,
	875, 511, 66, 77, 0, 0, 895, 879, 530, 0,
	386, 0, 0, 527, 0, 0, 89, 0, 53, 54,
	0, 91, 0, 0, 93, 0, 437, 0, 0, 1110,
	0, 437, 0, 827, 538, 539, 540, 541, 542, 620,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	562, 563, 564, 565, 566, 567, 568, 582, 0, 561,
	561, 561, 574, 575, 583, 584, 589, 590, 601, 602,
	604, 606, 600, 600, 600, 597, 598, 0, 825, 0,
	141, 0, 0, 156, 0, 0, 0, 0, 0, 165,
	185, 186, 187, 166, 168, 175, 177, 178, 179, 188,
	189, 190, 191, 313, 0, 315, 926, 0, 167, 169,
	171, 172, 192, 193, 194, 195, 196, 197, 0, 0,
	99, 207, 205, 206, 210, 212, 0, 237, 213, 214,
	215, 216, 217, 224, 227, 230, 231, 0, 0, 0,
	0, 0, 360, 316, 0, 254, 0, 0, 319, 434,
	0, 0, 0, 1110, 933, 374, 0, 418, 452, 453,
	456, 459, 460, 457, 623, 425, 426, 427, 448, 449,
	334, 432, 0, 0, 530, 0, 0, 0, 0, 0,
	0, 804, 805, 806, 807, 808, 809, 812, 813, 810,
	811, 814, 815, 816, 0, 0, 0, 817, 818, 819,
	0, 0, 821, 0, 823, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 0, 892, 820, 628, 629, 630,
	652, 653, 0, 716, 880, 873, 718, 0, -2, 825,
	0, 721, 726, 727, 0, 0, 868, -2, 0, 920,
	0, 620, 771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 848, 854, 0, 0, 0, 0, 0, 0,
	0, 0, 570, 588, 599, 596, 595, 572, 0, 571,
	569, 0, 573, 0, 0, 0, 530, 0, 0, 888,
	0, 0, 0, 0, 346, 36, 1110, 0, 57, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 0, 0, 244, 0, 0, 0,
	903, 0, 0, 0, 69, 0, 910, 76, 0, 0,
	0, 0, 398, 0, 398, 388, 0, 0, 0, 398,
	401, 402, 404, 405, 0, 0, 528, 88, 898, 55,
	96, 55, 55, 102, 117, 0, 119, 122, 123, 124,
	125, 120, 0, 531, 533, 543, 0, 607, 608, 609,
	610, 611, 612, 621, 127, 0, 0, 0, 0, 158,
	163, 164, 370, 0, 182, 0, 184, 0, 314, 928,
	927, 100, 239, 149, 233, 234, 511, 367, 368, 525,
	0, 0, 253, 909, 255, 257, 258, 259, 260, 934,
	0, 934, 0, 0, 317, 0, 0, 0, 0, 376,
	382, 0, 458, 461, 462, 0, 451, 332, 333, 437,
	911, 464, 890, 511, 471, 0, 481, 520, 497, 486,
	0, 624, 534, 535, 576, 577, 578, 579, 580, 625,
	626, 0, 631, 632, 633, 634, 635, 636, 637, 638,
	639, 640, -2, -2, -2, 644, 645, 646, -2, -2,
	-2, 650, 651, -2, 822, 824, 0, 883, 0, -2,
	0, -2, -2, -2, -2, 664, 0, 666, 669, 671,
	673, 0, 0, 0, 0, 882, 683, 860, 0, 0,
	801, 802, 803, 891, 668, 0, 0, 881, 872, 0,
	0, -2, 723, 0, 0, 0, 831, 832, 867, 863,
	0, 730, 447, 0, 0, 0, 0, 0, 929, 779,
	0, 0, 0, 743, 745, 0, 0, 0, 0, 835,
	-2, -2, -2, -2, -2, -2, -2, 0, 0, 825,
	845, 0, 0, 686, 0, 0, 0, 0, 1126, 0,
	825, 853, 0, 0, 0, 0, 0, 825, 0, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 464, 523, 887, 35, 336, 0, 0, 0,
	38, 1110, 46, 0, 268, 0, 0, 0, 0, 0,
	349, 47, 1110, 55, 1110, 55, 48, 33, 347, 241,
	0, 242, 0, 340, 0, 335, 338, 0, 76, 0,
	0, 63, 0, 67, 78, 0, 896, 86, 0, 529,
	383, 398, 0, 0, 390, 387, 385, 530, 0, 0,
	0, 0, 90, 92, 94, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 0, 826, 133, 134, 154, 180,
	181, 183, 176, 0, 235, 262, 295, 0, 0, 934,
	0, 251, 296, 318, 320, 0, 0, 378, 382, 0,
	381, 435, 450, 0, 466, 0, 469, 0, 0, 0,
	0, 0, 517, 517, 517, 515, 491, 437, 0, 497,
	0, 0, 509, 0, -2, 486, 0, 0, -2, -2,
	0, 0, 0, 684, -2, 665, 667, 670, 672, 674,
	0, 0, 0, 0, 0, 0, 0, 685, 0, 0,
	870, 873, -2, 826, 829, 830, 0, 0, 864, 0,
	0, 0, 0, 446, 447, 447, 447, 736, 0, 737,
	0, 0, 0, 0, 0, 0, 752, 0, 753, 754,
	0, 0, 755, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 689, 690, 691, 0,
	0, 756, 851, 852, 0, 0, 0, 0, 0, 0,
	761, 0, 858, 0, 0, 0, 765, 766, 767, 0,
	559, 0, 581, 603, 605, 593, 466, 0, 0, 0,
	0, 56, 266, 285, 0, 0, 325, 331, 331, 0,
	739, 740, 0, 0, 0, 40, 0, 0, 0, 0,
	44, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 79, 396, 397, 384, 395, 0,
	398, 403, 400, 406, 0, 536, 0, 0, 544, 613,
	614, 615, 616, 617, 618, 619, 0, 150, 249, 0,
	256, 0, 0, 0, 254, 0, 0, 0, 380, 382,
	0, 373, 374, 433, 773, 0, 0, 472, 0, 0,
	0, 0, 0, 512, 516, 513, 514, 0, 0, 0,
	0, 497, 509, 478, 0, 0, 0, 485, 508, 0,
	507, 496, -2, 627, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 861, 0, 796, 0, 0, 872, -2,
	833, 862, 866, 0, 731, 0, 0, 0, 0, 922,
	777, 778, 782, 0, 0, 741, 0, 0, 834, 844,
	846, 687, 688, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, -2, -2, -2, 705, 706, 707, -2,
	-2, -2, 0, 0, 0, 847, 0, 0, 799, 849,
	850, 855, 856, 0, 758, 759, 760, 857, 0, 0,
	0, 587, 0, 773, 342, 344, 37, 0, 267, 0,
	270, 0, 0, 0, 0, 276, 277, 0, 0, 0,
	0, 287, 294, 0, 334, 914, 0, 334, 0, 0,
	0, 0, 0, 52, 0, 0, 348, 0, 55, 55,
	337, 0, 0, 0, 0, 341, 339, 68, 0, 0,
	0, 0, 0, 389, 399, 0, 537, 532, 622, 0,
	0, 0, 0, 0, 0, 0, 0, 371, 382, 0,
	375, 376, 421, 0, 465, 463, 499, 0, 501, 0,
	0, 0, 503, 481, 492, 0, 494, 497, 0, 509,
	483, 0, 0, 476, 0, 475, 497, 505, 0, 0,
	0, 0, -2, 0, 677, -2, -2, 795, 826, 871,
	865, 919, 447, 732, 734, 735, 784, 781, 0, 768,
	750, 751, 843, 0, 0, 0, 0, 826, 798, 757,
	0, 763, 764, 560, 422, 39, 0, 271, 272, 934,
	0, 275, 278, 0, 280, 936, 262, 0, 291, 292,
	326, 327, 330, 328, 331, 447, 289, 0, 41, 42,
	51, 59, 43, 49, 0, 0, 0, 0, 510, 0,
	0, 0, 73, 71, 0, 0, 0, 407, 408, 0,
	0, 294, 0, 284, 262, 252, 294, 0, 0, 377,
	378, 772, 774, 0, 500, 0, 519, 502, 497, 493,
	0, 509, 437, 490, 479, 0, 480, 0, 509, 0,
	0, 487, -2, -2, 678, 797, 0, 447, 0, 770,
	-2, 0, 0, 0, 800, 0, 269, 273, 0, 0,
	300, 0, 288, 0, 334, 0, 0, 61, 0, 343,
	345, 0, 0, 0, 0, 75, 72, 0, 0, 392,
	530, 394, 0, 262, 294, 250, 262, 0, 379, 380,
	0, 0, 0, 0, 495, 488, 0, 477, 473, 0,
	484, 0, 506, 733, 787, 0, -2, 0, 713, 762,
	0, 279, 305, 0, 0, 0, 329, 731, 296, 45,
	0, 58, 0, 0, 447, 74, 70, 0, 393, 0,
	282, 262, 321, 0, 372, 775, 776, 518, 482, 497,
	0, 504, 0, 0, 0, 783, 714, 0, 281, 301,
	302, 0, 297, 298, 299, 935, 293, 300, 60, 246,
	248, 0, 530, 0, 283, 294, 509, 474, 780, 785,
	788, -2, 1074, 967, 0, 786, 274, 303, 0, 304,
	0, 0, 0, 305, 0, 391, 265, 262, 489, 0,
	790, 791, 792, 793, 794, 306, 0, 309, 310, 0,
	307, 290, 261, 263, 264, 322, 0, 308, 311, 312,
	789,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 319, 3, 325, 320, 3,
	330, 331, 323, 321, 334, 322, 332, 324, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 338, 333,
	313, 315, 314, 3, 335, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 328, 3, 329, 326, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 336, 318, 337, 316,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 317, 57656, 327, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:781
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:787
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:793
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:860
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:889
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:912
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:922
		{
			return unimplemented(sqllex)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = nil
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = DropCascade
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = DropRestrict
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = DropDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:984
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:985
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return unimplemented(sqllex)
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:989
		{
		}
	case 62:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.str = ""
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1062
		{
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{ /* SKIP DOC */
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1388
		{
			return unimplemented(sqllex)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1402
		{ /* SKIP DOC */
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1465
		{
			return unimplemented(sqllex)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1468
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1471
		{
			return unimplemented(sqllex)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = Low
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = Normal
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = High
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1580
		{
			return unimplemented(sqllex)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1581
		{
			return unimplemented(sqllex)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1582
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1610
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1614
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true, ScopeSpecified: false}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true, ScopeSpecified: true}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false, ScopeSpecified: true}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true, ScopeSpecified: false}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true, ScopeSpecified: true}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false, ScopeSpecified: true}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1682
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1686
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1690
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1710
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1714
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1718
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1761
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1765
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1771
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1775
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1779
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1783
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1854
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1858
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = DropDefault
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1868
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			return unimplemented(sqllex)
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2074
		{
			return unimplemented(sqllex)
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2075
		{
			return unimplemented(sqllex)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2076
		{
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2083
		{
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2084
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2085
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2086
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2089
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2092
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			return unimplemented(sqllex)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2098
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2099
		{
			return unimplemented(sqllex)
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return unimplemented(sqllex)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return unimplemented(sqllex)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2133
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = true
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = false
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2208
		{
			return unimplemented(sqllex)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2209
		{
			return unimplemented(sqllex)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2212
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2213
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = Ascending
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = Descending
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2267
		{
			return unimplemented(sqllex)
		}
	case 345:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2268
		{
			return unimplemented(sqllex)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = true
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = false
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2281
		{
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2282
		{
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2315
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2324
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2325
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.str = ""
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.str = ""
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.str = ""
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.str = ""
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.str = ""
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.str = ""
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2447
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2448
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2512
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2516
		{
			return unimplemented(sqllex)
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2524
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 399:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2546
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2547
		{
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2774
		{
			return unimplemented(sqllex)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2775
		{
			return unimplemented(sqllex)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2776
		{
			return unimplemented(sqllex)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2779
		{
			return unimplemented(sqllex)
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2780
		{
			return unimplemented(sqllex)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2783
		{
			return unimplemented(sqllex)
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2786
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2787
		{
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2790
		{
			return unimplemented(sqllex)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2791
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2794
		{
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2795
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = true
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = false
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = false
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = true
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2818
		{
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2819
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2857
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2877
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2918
		{
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2919
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2977
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = &From{}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3013
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3031
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3058
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3075
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = nil
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3148
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = true
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = false
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.str = astFullJoin
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.str = astLeftJoin
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.str = astRightJoin
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.str = astInnerJoin
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3259
		{
		}
	case 517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3260
		{
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3346
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3359
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3360
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3374
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3383
		{
			return unimplemented(sqllex)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3442
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3451
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = nil
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3500
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3596
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3628
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3668
		{
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = year
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = month
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = day
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = hour
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = minute
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = month
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = hour
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = minute
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = minute
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = nil
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = second
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3763
		{
			return unimplemented(sqllex)
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3798
		{
			return unimplemented(sqllex)
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3966
		{
			return unimplemented(sqllex)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4032
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4205
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4258
		{
			return unimplemented(sqllex)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4259
		{
			return unimplemented(sqllex)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4282
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4298
		{
			return unimplemented(sqllex)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4299
		{
			return unimplemented(sqllex)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4303
		{
			return unimplemented(sqllex)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4320
		{
			return unimplemented(sqllex)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4321
		{
			return unimplemented(sqllex)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4322
		{
			return unimplemented(sqllex)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4323
		{
			return unimplemented(sqllex)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4352
		{
			return unimplemented(sqllex)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4396
		{
			return unimplemented(sqllex)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4397
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = Window(nil)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4432
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.str = ""
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4494
		{
			return unimplemented(sqllex)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4495
		{
			return unimplemented(sqllex)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4496
		{
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4499
		{
			return unimplemented(sqllex)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4500
		{
			return unimplemented(sqllex)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4506
		{
			return unimplemented(sqllex)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4507
		{
			return unimplemented(sqllex)
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4508
		{
			return unimplemented(sqllex)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4509
		{
			return unimplemented(sqllex)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4510
		{
			return unimplemented(sqllex)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = Any
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = Some
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = All
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = Plus
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = Minus
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = Mult
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = Div
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = FloorDiv
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = Mod
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = Bitand
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = Bitor
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = Pow
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = Bitxor
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = LT
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = GT
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = EQ
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = LE
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = GE
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = NE
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = Like
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4584
		{
			sqlVAL.union.val = NotLike
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = ILike
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = NotILike
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4875
		{
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4993
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5037
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5073
		{
			return unimplemented(sqllex)
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 922:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5082
		{
			return unimplemented(sqllex)
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = DNull
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5109
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 934:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.str = ""
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
