// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:314
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT8 = 57480
const INT64 = 57481
const INTEGER = 57482
const INTERSECT = 57483
const INTERVAL = 57484
const INTO = 57485
const IS = 57486
const ISOLATION = 57487
const JOIN = 57488
const KEY = 57489
const KEYS = 57490
const LATERAL = 57491
const LC_CTYPE = 57492
const LC_COLLATE = 57493
const LEADING = 57494
const LEAST = 57495
const LEFT = 57496
const LEVEL = 57497
const LIKE = 57498
const LIMIT = 57499
const LOCAL = 57500
const LOCALTIME = 57501
const LOCALTIMESTAMP = 57502
const LOW = 57503
const LSHIFT = 57504
const MATCH = 57505
const MINUTE = 57506
const MONTH = 57507
const NAME = 57508
const NAMES = 57509
const NATURAL = 57510
const NEXT = 57511
const NO = 57512
const NO_INDEX_JOIN = 57513
const NORMAL = 57514
const NOT = 57515
const NOTHING = 57516
const NULL = 57517
const NULLIF = 57518
const NULLS = 57519
const NUMERIC = 57520
const OF = 57521
const OFF = 57522
const OFFSET = 57523
const OID = 57524
const ON = 57525
const ONLY = 57526
const OR = 57527
const ORDER = 57528
const ORDINALITY = 57529
const OUT = 57530
const OUTER = 57531
const OVER = 57532
const OVERLAPS = 57533
const OVERLAY = 57534
const PARENT = 57535
const PARTIAL = 57536
const PARTITION = 57537
const PASSWORD = 57538
const PLACING = 57539
const POSITION = 57540
const PRECEDING = 57541
const PRECISION = 57542
const PREPARE = 57543
const PRIMARY = 57544
const PRIORITY = 57545
const RANGE = 57546
const READ = 57547
const REAL = 57548
const RECURSIVE = 57549
const REF = 57550
const REFERENCES = 57551
const REGCLASS = 57552
const REGPROC = 57553
const REGPROCEDURE = 57554
const REGNAMESPACE = 57555
const REGTYPE = 57556
const RENAME = 57557
const REPEATABLE = 57558
const RELEASE = 57559
const RESTORE = 57560
const RESTRICT = 57561
const RETURNING = 57562
const REVOKE = 57563
const RIGHT = 57564
const ROLLBACK = 57565
const ROLLUP = 57566
const ROW = 57567
const ROWS = 57568
const RSHIFT = 57569
const STATUS = 57570
const SAVEPOINT = 57571
const SEARCH = 57572
const SECOND = 57573
const SELECT = 57574
const SERIAL = 57575
const SERIALIZABLE = 57576
const SESSION = 57577
const SESSION_USER = 57578
const SET = 57579
const SHOW = 57580
const SIMILAR = 57581
const SIMPLE = 57582
const SMALLINT = 57583
const SMALLSERIAL = 57584
const SNAPSHOT = 57585
const SOME = 57586
const SPLIT = 57587
const SQL = 57588
const START = 57589
const STDIN = 57590
const STRICT = 57591
const STRING = 57592
const STORING = 57593
const SUBSTRING = 57594
const SYMMETRIC = 57595
const SYSTEM = 57596
const TABLE = 57597
const TABLES = 57598
const TEMPLATE = 57599
const TEXT = 57600
const THEN = 57601
const TIME = 57602
const TIMESTAMP = 57603
const TIMESTAMPTZ = 57604
const TO = 57605
const TRAILING = 57606
const TRANSACTION = 57607
const TREAT = 57608
const TRIM = 57609
const TRUE = 57610
const TRUNCATE = 57611
const TYPE = 57612
const UNBOUNDED = 57613
const UNCOMMITTED = 57614
const UNION = 57615
const UNIQUE = 57616
const UNKNOWN = 57617
const UPDATE = 57618
const UPSERT = 57619
const USER = 57620
const USERS = 57621
const USING = 57622
const VALID = 57623
const VALIDATE = 57624
const VALUE = 57625
const VALUES = 57626
const VARCHAR = 57627
const VARIADIC = 57628
const VIEW = 57629
const VARYING = 57630
const WHEN = 57631
const WHERE = 57632
const WINDOW = 57633
const WITH = 57634
const WITHIN = 57635
const WITHOUT = 57636
const YEAR = 57637
const ZONE = 57638
const NOT_LA = 57639
const WITH_LA = 57640
const AS_LA = 57641
const POSTFIXOP = 57642
const UMINUS = 57643

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5129

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	320, 28,
	-2, 401,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	1, 374,
	183, 374,
	220, 374,
	318, 374,
	320, 374,
	-2, 384,
	-1, 62,
	1, 377,
	183, 377,
	220, 377,
	318, 377,
	320, 377,
	-2, 383,
	-1, 71,
	1, 28,
	320, 28,
	-2, 401,
	-1, 412,
	1, 182,
	320, 182,
	-2, 928,
	-1, 448,
	157, 411,
	181, 411,
	-2, 380,
	-1, 451,
	157, 410,
	181, 410,
	-2, 378,
	-1, 577,
	157, 410,
	181, 410,
	-2, 381,
	-1, 635,
	317, 862,
	-2, 855,
	-1, 636,
	317, 863,
	-2, 856,
	-1, 642,
	5, 557,
	317, 557,
	-2, 1030,
	-1, 666,
	5, 517,
	-2, 1004,
	-1, 667,
	5, 551,
	317, 551,
	-2, 1006,
	-1, 668,
	5, 525,
	-2, 1007,
	-1, 669,
	5, 524,
	-2, 1008,
	-1, 670,
	5, 551,
	317, 551,
	-2, 1011,
	-1, 671,
	5, 551,
	317, 551,
	-2, 1012,
	-1, 672,
	5, 552,
	-2, 1015,
	-1, 673,
	5, 511,
	-2, 1016,
	-1, 674,
	5, 511,
	-2, 1017,
	-1, 675,
	5, 533,
	-2, 1021,
	-1, 676,
	5, 512,
	-2, 1026,
	-1, 677,
	5, 513,
	-2, 1027,
	-1, 678,
	5, 514,
	-2, 1028,
	-1, 679,
	5, 515,
	-2, 1029,
	-1, 680,
	5, 511,
	-2, 1033,
	-1, 681,
	5, 518,
	-2, 1038,
	-1, 682,
	5, 516,
	-2, 1041,
	-1, 683,
	5, 549,
	317, 549,
	-2, 1043,
	-1, 684,
	5, 553,
	-2, 1046,
	-1, 685,
	5, 555,
	-2, 1047,
	-1, 686,
	5, 548,
	317, 548,
	-2, 1051,
	-1, 942,
	98, 384,
	141, 384,
	157, 384,
	181, 384,
	186, 384,
	273, 384,
	-2, 673,
	-1, 951,
	317, 840,
	-2, 828,
	-1, 1163,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 592,
	-1, 1164,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 593,
	-1, 1165,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 594,
	-1, 1169,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 598,
	-1, 1170,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 599,
	-1, 1171,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 600,
	-1, 1174,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 605,
	-1, 1180,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 607,
	-1, 1183,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 612,
	-1, 1184,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 613,
	-1, 1185,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 614,
	-1, 1207,
	191, 744,
	-2, 747,
	-1, 1236,
	115, 760,
	317, 862,
	-2, 855,
	-1, 1237,
	115, 761,
	-2, 1000,
	-1, 1238,
	115, 762,
	-2, 926,
	-1, 1239,
	115, 763,
	-2, 896,
	-1, 1240,
	115, 764,
	-2, 911,
	-1, 1241,
	115, 765,
	-2, 925,
	-1, 1242,
	115, 766,
	-2, 968,
	-1, 1394,
	98, 384,
	141, 384,
	157, 384,
	181, 384,
	186, 384,
	273, 384,
	-2, 450,
	-1, 1398,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 606,
	-1, 1399,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 608,
	-1, 1404,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 609,
	-1, 1420,
	191, 743,
	-2, 746,
	-1, 1595,
	1, 451,
	68, 451,
	98, 451,
	116, 451,
	120, 451,
	122, 451,
	135, 451,
	141, 451,
	146, 451,
	154, 451,
	157, 451,
	168, 451,
	181, 451,
	183, 451,
	186, 451,
	220, 451,
	222, 451,
	273, 451,
	280, 451,
	290, 451,
	291, 451,
	299, 451,
	318, 451,
	320, 451,
	321, 451,
	-2, 450,
	-1, 1597,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 610,
	-1, 1602,
	144, 0,
	-2, 624,
	-1, 1612,
	191, 745,
	-2, 748,
	-1, 1646,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 650,
	-1, 1647,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 651,
	-1, 1648,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 652,
	-1, 1652,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 656,
	-1, 1653,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 657,
	-1, 1654,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 658,
	-1, 1767,
	144, 0,
	-2, 625,
	-1, 1770,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 628,
	-1, 1771,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 630,
	-1, 1864,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 629,
	-1, 1865,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 631,
	-1, 1872,
	144, 0,
	-2, 659,
	-1, 1923,
	144, 0,
	-2, 660,
	-1, 1979,
	36, 0,
	129, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 1003,
}

const sqlNprod = 1146
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 26008

var sqlAct = [...]int{

	636, 1978, 1556, 1958, 1929, 2002, 1959, 1977, 1960, 1037,
	861, 1850, 1029, 1811, 1126, 1739, 613, 751, 1725, 1623,
	627, 1590, 1758, 1566, 867, 452, 1591, 1751, 1368, 1834,
	490, 1726, 81, 1683, 752, 1392, 1744, 48, 1100, 1481,
	1105, 1370, 285, 81, 81, 81, 1572, 634, 81, 1119,
	1317, 81, 473, 1480, 1431, 947, 1582, 1141, 863, 81,
	596, 1205, 1382, 1069, 1104, 1038, 81, 81, 702, 699,
	81, 996, 413, 81, 81, 81, 81, 81, 81, 283,
	1134, 1376, 1215, 1005, 1196, 1135, 633, 1101, 1262, 1193,
	1139, 27, 612, 1053, 1062, 815, 884, 82, 563, 799,
	687, 735, 457, 722, 459, 61, 704, 20, 16, 938,
	492, 8, 1233, 606, 597, 1095, 564, 491, 451, 796,
	504, 1031, 977, 826, 78, 510, 981, 269, 1108, 23,
	1835, 22, 276, 11, 10, 462, 9, 7, 501, 286,
	580, 4, 287, 581, 579, 61, 890, 795, 271, 275,
	817, 813, 277, 400, 391, 503, 497, 728, 1136, 460,
	584, 562, 471, 403, 1857, 478, 481, 1858, 471, 1419,
	280, 62, 278, 63, 279, 281, 61, 273, 272, 456,
	737, 282, 274, 737, 1034, 1993, 1451, 1452, 1130, 1469,
	1470, 1471, 737, 1030, 1974, 1966, 1956, 1833, 1130, 1059,
	1951, 1066, 1766, 1130, 1950, 1390, 1925, 1130, 456, 1059,
	489, 1919, 439, 1903, 1130, 410, 1833, 1893, 1866, 1844,
	1130, 1059, 1833, 1329, 1328, 60, 464, 1423, 470, 479,
	67, 476, 1424, 449, 483, 448, 1841, 1466, 1832, 1130,
	1816, 1833, 1815, 1130, 1067, 1130, 1793, 1772, 714, 1072,
	1072, 39, 1769, 69, 1761, 1059, 1072, 1072, 1710, 40,
	1709, 1072, 629, 1072, 892, 81, 81, 81, 81, 81,
	1695, 513, 1606, 1130, 1542, 1072, 1909, 1028, 893, 894,
	891, 41, 70, 1068, 1065, 1536, 1457, 1380, 1028, 1498,
	65, 1496, 1499, 1379, 1072, 1495, 66, 1494, 1072, 1422,
	1072, 896, 1420, 1357, 1072, 1072, 1130, 1131, 457, 1379,
	1130, 1659, 1609, 1081, 1072, 64, 1072, 1355, 1071, 1058,
	1472, 1072, 1059, 895, 1027, 993, 745, 1028, 992, 746,
	994, 67, 1358, 1130, 1074, 1209, 1125, 1089, 1467, 592,
	506, 506, 856, 1430, 855, 807, 806, 526, 469, 1836,
	1070, 1265, 738, 71, 69, 738, 493, 471, 840, 481,
	1393, 546, 2013, 67, 738, 893, 894, 1976, 514, 1972,
	1965, 515, 1920, 1842, 1798, 1794, 1786, 1785, 901, 1784,
	591, 1780, 1779, 70, 1778, 1723, 69, 81, 896, 507,
	67, 65, 1674, 1669, 511, 1717, 52, 66, 1668, 1667,
	1617, 1595, 81, 1468, 1571, 81, 81, 1546, 1503, 1500,
	895, 1488, 1479, 69, 1064, 70, 1033, 1360, 1450, 1447,
	1446, 1444, 1436, 498, 1435, 695, 893, 894, 1356, 1328,
	1279, 1230, 1391, 1201, 1229, 591, 1063, 954, 948, 81,
	64, 81, 70, 81, 81, 81, 590, 81, 64, 896,
	65, 866, 1949, 487, 741, 1625, 66, 736, 1939, 1906,
	1885, 1883, 81, 1874, 1861, 901, 859, 1854, 1839, 1830,
	891, 895, 1808, 81, 578, 64, 1463, 1464, 1465, 1791,
	1462, 1459, 1460, 1461, 1453, 1454, 1455, 1456, 1458, 81,
	1763, 893, 894, 1774, 285, 81, 81, 81, 1733, 81,
	1601, 1564, 1562, 577, 1561, 1559, 534, 1544, 1515, 1514,
	1478, 1440, 1439, 1416, 1412, 570, 1198, 573, 81, 81,
	724, 1344, 694, 1306, 535, 1202, 81, 693, 81, 1716,
	1305, 1293, 1292, 471, 1272, 1228, 895, 1129, 982, 513,
	513, 985, 989, 975, 974, 973, 972, 285, 81, 971,
	81, 81, 81, 81, 81, 81, 81, 970, 969, 968,
	967, 81, 81, 966, 965, 696, 964, 81, 529, 531,
	963, 962, 961, 725, 960, 81, 897, 898, 899, 900,
	902, 723, 922, 959, 865, 948, 952, 471, 729, 729,
	941, 286, 567, 81, 287, 565, 81, 64, 860, 569,
	474, 595, 1293, 532, 522, 520, 740, 1722, 1721, 743,
	478, 481, 1338, 493, 1337, 587, 588, 893, 894, 939,
	710, 593, 695, 600, 540, 1859, 841, 1371, 1720, 1330,
	1393, 449, 1502, 448, 870, 1501, 514, 514, 987, 515,
	515, 1397, 988, 1066, 286, 556, 541, 287, 864, 457,
	957, 727, 1745, 498, 730, 488, 1030, 1626, 1216, 978,
	1324, 560, 689, 265, 1509, 899, 900, 902, 1935, 922,
	858, 1427, 1892, 1989, 749, 803, 747, 1703, 438, 1351,
	437, 802, 1080, 888, 432, 695, 1067, 433, 1451, 1452,
	1824, 830, 837, 561, 1823, 1852, 1530, 845, 81, 1248,
	261, 705, 1990, 706, 1529, 1506, 81, 1505, 1400, 1343,
	81, 1342, 1341, 1340, 81, 81, 266, 1181, 81, 705,
	857, 706, 874, 872, 873, 1068, 1065, 1073, 886, 1022,
	922, 74, 81, 1021, 81, 81, 1018, 81, 446, 718,
	81, 566, 81, 81, 998, 81, 999, 513, 262, 955,
	1526, 1276, 1275, 951, 1152, 705, 449, 706, 880, 449,
	449, 881, 882, 842, 1120, 998, 846, 847, 848, 849,
	850, 997, 538, 707, 1891, 518, 853, 854, 1010, 1012,
	441, 1748, 1532, 758, 73, 1451, 1452, 1195, 1457, 1314,
	991, 707, 1070, 979, 980, 922, 1195, 720, 81, 81,
	712, 983, 471, 711, 836, 1937, 481, 986, 1813, 1517,
	471, 539, 731, 1070, 1047, 506, 1543, 506, 1123, 1124,
	1006, 1999, 1318, 1534, 1041, 1326, 1953, 707, 1311, 481,
	711, 1308, 481, 716, 1002, 715, 1032, 276, 1032, 267,
	990, 285, 1056, 1551, 514, 81, 1886, 515, 1954, 1352,
	61, 536, 1036, 271, 275, 61, 1064, 277, 1054, 1055,
	81, 81, 1057, 1048, 282, 1049, 1216, 81, 1015, 1019,
	511, 268, 1051, 1050, 793, 280, 1023, 278, 1046, 279,
	281, 1009, 273, 272, 805, 1457, 1076, 274, 264, 263,
	1989, 1350, 1045, 81, 1322, 1304, 81, 2010, 517, 537,
	622, 1178, 983, 1132, 986, 976, 1083, 72, 60, 537,
	1070, 1077, 980, 979, 442, 1115, 1870, 1075, 1078, 1548,
	1094, 922, 455, 1082, 1831, 1438, 737, 936, 1142, 1150,
	285, 1318, 79, 447, 39, 1583, 1998, 443, 286, 75,
	1594, 287, 40, 383, 384, 385, 444, 456, 402, 703,
	1524, 414, 471, 1518, 1961, 1098, 893, 894, 1549, 402,
	1988, 1986, 708, 944, 41, 454, 463, 463, 1151, 1008,
	79, 995, 1097, 79, 79, 482, 79, 485, 486, 896,
	708, 1738, 724, 1962, 1117, 1137, 1453, 1454, 1455, 1456,
	1458, 549, 527, 1814, 1176, 1179, 81, 81, 81, 525,
	557, 895, 81, 1278, 1213, 81, 1133, 910, 1402, 1199,
	456, 81, 81, 81, 81, 81, 708, 1194, 1099, 81,
	582, 1175, 81, 81, 1997, 1070, 583, 286, 1655, 81,
	287, 392, 1576, 2017, 81, 1818, 81, 1817, 1290, 1789,
	1930, 1007, 1286, 81, 583, 1806, 1880, 1203, 1508, 1223,
	1200, 1289, 397, 81, 1699, 1285, 901, 393, 558, 582,
	1691, 1963, 1280, 1118, 1191, 1702, 871, 862, 812, 2011,
	688, 457, 1701, 67, 81, 81, 1381, 1243, 1189, 52,
	81, 394, 1320, 559, 1303, 1455, 1456, 1458, 1282, 1547,
	513, 1085, 1692, 1567, 1336, 2005, 69, 453, 738, 1807,
	396, 1281, 1087, 1759, 1177, 810, 852, 1964, 911, 808,
	81, 1656, 81, 1740, 81, 1310, 811, 1657, 81, 1295,
	1088, 1316, 81, 2016, 1385, 70, 723, 1294, 1790, 1086,
	1754, 81, 1578, 65, 1359, 723, 1361, 1323, 1290, 66,
	1577, 81, 1698, 1388, 536, 471, 1331, 1187, 1332, 1186,
	1333, 1334, 496, 1192, 1383, 495, 758, 758, 270, 454,
	1700, 1760, 1386, 574, 1557, 79, 499, 79, 414, 414,
	1724, 641, 1804, 912, 1347, 691, 1384, 1313, 457, 1349,
	1687, 1573, 1688, 781, 1377, 1353, 1363, 514, 1354, 1346,
	515, 1753, 1227, 1873, 1805, 1348, 395, 1788, 1381, 835,
	834, 1482, 828, 823, 1600, 1531, 1445, 879, 1411, 1690,
	1366, 1335, 1451, 1452, 1315, 1079, 1693, 1026, 2003, 719,
	1362, 1056, 1373, 1374, 1365, 555, 1396, 554, 553, 552,
	1387, 1395, 551, 1137, 61, 550, 457, 1054, 1055, 547,
	398, 1057, 1188, 494, 1429, 1483, 1385, 958, 844, 1190,
	906, 903, 904, 905, 897, 898, 899, 900, 902, 1226,
	922, 1957, 1927, 1680, 1403, 1388, 758, 2004, 1401, 1522,
	1520, 1385, 1507, 1367, 1121, 1113, 1383, 1052, 744, 742,
	838, 1689, 739, 734, 1386, 2006, 717, 523, 1752, 713,
	1388, 457, 709, 1206, 81, 1614, 1369, 1426, 1384, 1825,
	1210, 1581, 528, 1990, 1218, 414, 414, 77, 543, 1386,
	585, 1127, 1457, 690, 467, 1235, 1235, 1246, 76, 1257,
	3, 832, 758, 1827, 1535, 1269, 1270, 1271, 998, 81,
	81, 1014, 1836, 1888, 1013, 1922, 998, 787, 638, 402,
	1538, 79, 1011, 414, 572, 414, 1574, 575, 1485, 1486,
	1487, 1409, 1387, 839, 589, 388, 81, 431, 1017, 81,
	1504, 81, 463, 1016, 1467, 1407, 758, 1910, 81, 1128,
	1736, 389, 1116, 79, 1563, 1511, 1525, 1387, 586, 1533,
	81, 1513, 468, 1112, 81, 1560, 1035, 1537, 544, 79,
	887, 285, 475, 81, 1539, 79, 79, 79, 804, 732,
	1541, 1521, 399, 1523, 1303, 1550, 1552, 1553, 750, 1061,
	1540, 1568, 2014, 434, 435, 2015, 392, 1675, 79, 79,
	1554, 1041, 1137, 1558, 1545, 1586, 800, 1497, 800, 1468,
	1603, 1570, 1451, 1452, 893, 894, 1405, 397, 1339, 81,
	1410, 1277, 393, 1584, 1585, 1091, 1090, 1580, 414, 1274,
	800, 414, 414, 414, 414, 414, 851, 1273, 1619, 1620,
	1621, 414, 414, 1224, 1092, 1575, 394, 402, 945, 1579,
	1587, 1776, 1137, 1907, 1847, 869, 1137, 1142, 1630, 1742,
	1613, 1610, 1713, 1622, 1364, 396, 1142, 1635, 286, 1093,
	1025, 287, 1024, 463, 953, 1627, 889, 1569, 440, 1812,
	1629, 390, 1632, 829, 824, 843, 81, 81, 81, 1634,
	1453, 1454, 1455, 1456, 1458, 81, 81, 548, 1952, 1666,
	1662, 81, 1781, 81, 1437, 81, 81, 81, 1849, 1406,
	81, 81, 1869, 1225, 956, 1663, 1408, 38, 1728, 616,
	1681, 1510, 1107, 1106, 288, 833, 822, 637, 1679, 816,
	1415, 1676, 825, 1234, 1417, 1143, 781, 781, 692, 639,
	755, 640, 81, 81, 756, 984, 628, 753, 509, 1378,
	1039, 1214, 1433, 1434, 1425, 949, 608, 620, 81, 81,
	1732, 395, 81, 1737, 619, 1732, 1211, 81, 519, 1719,
	1249, 780, 607, 81, 1757, 1714, 1389, 51, 79, 533,
	408, 1735, 1696, 1697, 409, 1477, 1003, 1731, 1756, 1741,
	79, 1321, 1731, 1715, 79, 1020, 1490, 1706, 79, 1768,
	1743, 1122, 875, 1712, 1519, 398, 81, 445, 1448, 521,
	1255, 1764, 79, 1247, 1043, 1044, 1244, 79, 568, 698,
	79, 937, 414, 414, 1718, 414, 1730, 1040, 545, 1734,
	1327, 1730, 1060, 594, 883, 466, 465, 1527, 1528, 1102,
	542, 809, 1084, 1749, 1750, 436, 781, 1755, 1882, 1114,
	1137, 1137, 1787, 1288, 1137, 758, 2009, 1887, 1516, 1934,
	68, 81, 1312, 81, 26, 81, 81, 24, 21, 19,
	18, 17, 757, 25, 81, 15, 783, 14, 800, 889,
	13, 12, 37, 36, 35, 758, 758, 34, 33, 32,
	6, 5, 2, 1799, 758, 758, 1, 81, 617, 49,
	0, 1800, 781, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1820, 81,
	0, 0, 0, 1589, 0, 1096, 81, 758, 0, 0,
	0, 0, 1840, 0, 1732, 81, 0, 1802, 1837, 49,
	79, 1103, 0, 0, 81, 81, 781, 889, 1607, 0,
	0, 0, 1848, 1828, 0, 0, 0, 794, 1853, 0,
	450, 1731, 1846, 458, 0, 0, 1810, 0, 0, 0,
	49, 1863, 0, 79, 0, 0, 414, 1860, 0, 0,
	0, 0, 0, 1868, 1826, 81, 1821, 1822, 0, 1875,
	0, 0, 0, 0, 1884, 0, 0, 1249, 1249, 0,
	1730, 0, 0, 0, 81, 81, 0, 0, 81, 1879,
	1660, 1845, 81, 0, 782, 1878, 0, 81, 0, 0,
	1856, 1670, 0, 0, 1843, 1904, 1896, 1137, 0, 1898,
	0, 1862, 1900, 0, 1732, 81, 0, 0, 1905, 754,
	285, 81, 81, 0, 758, 1897, 724, 0, 457, 1911,
	0, 0, 1908, 1912, 1249, 1249, 1249, 0, 0, 0,
	1915, 1731, 1917, 0, 81, 0, 81, 81, 0, 81,
	0, 0, 1924, 1413, 1414, 1921, 79, 1283, 1284, 1940,
	0, 0, 1003, 0, 0, 1291, 1938, 0, 1944, 1899,
	81, 1296, 1297, 1299, 1301, 1302, 0, 1943, 0, 1307,
	1730, 1947, 1309, 79, 1946, 1945, 1747, 1732, 1942, 79,
	1948, 1941, 0, 0, 79, 0, 1325, 0, 81, 1916,
	81, 0, 1914, 79, 1967, 0, 1973, 1969, 0, 1918,
	1474, 1475, 1476, 79, 1731, 0, 1971, 286, 81, 0,
	287, 1936, 1983, 0, 780, 780, 758, 1987, 1985, 0,
	0, 0, 1991, 1932, 1096, 800, 0, 0, 0, 1933,
	1096, 1996, 1992, 0, 0, 0, 0, 0, 1994, 458,
	0, 0, 0, 1730, 0, 2008, 2007, 2012, 893, 894,
	0, 1995, 0, 0, 0, 0, 0, 0, 0, 0,
	869, 0, 869, 0, 414, 0, 2018, 0, 79, 0,
	0, 896, 1372, 0, 0, 1249, 1249, 1970, 0, 0,
	1041, 1375, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 895, 0, 0, 0, 0, 0, 1451,
	1452, 0, 0, 0, 758, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 757, 0, 0, 783,
	783, 0, 0, 0, 780, 781, 0, 1249, 1249, 1249,
	1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
	1249, 1249, 1249, 1249, 1249, 1249, 0, 1249, 901, 0,
	1466, 1598, 1599, 1451, 1452, 781, 781, 0, 0, 0,
	0, 0, 0, 0, 781, 781, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	780, 0, 0, 0, 0, 0, 0, 758, 1451, 1452,
	0, 0, 0, 0, 0, 0, 0, 781, 0, 1457,
	911, 0, 0, 1636, 1637, 1638, 1639, 1640, 1641, 1642,
	1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652,
	1653, 1654, 0, 1658, 780, 757, 0, 0, 450, 783,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1902, 0, 0, 889, 0, 0, 0, 0, 0,
	0, 1467, 0, 1457, 0, 893, 894, 782, 782, 0,
	0, 0, 0, 0, 0, 912, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 896, 79,
	79, 757, 754, 754, 0, 783, 0, 0, 1457, 0,
	0, 0, 0, 598, 598, 0, 0, 0, 0, 0,
	895, 0, 700, 0, 0, 1467, 1555, 0, 0, 1003,
	0, 869, 0, 0, 781, 0, 1468, 0, 1565, 0,
	0, 0, 0, 0, 1955, 757, 0, 0, 0, 783,
	79, 0, 0, 0, 79, 0, 0, 0, 0, 0,
	1467, 893, 894, 1593, 0, 905, 897, 898, 899, 900,
	902, 1975, 922, 450, 0, 901, 450, 450, 0, 0,
	0, 0, 0, 0, 896, 0, 1249, 782, 0, 0,
	1468, 0, 0, 0, 1691, 0, 1684, 0, 940, 0,
	942, 0, 0, 0, 1682, 0, 895, 946, 1686, 1624,
	0, 0, 754, 1462, 1459, 1460, 1461, 1453, 1454, 1455,
	1456, 1458, 0, 0, 0, 1468, 1692, 911, 0, 0,
	876, 878, 0, 0, 0, 0, 781, 885, 0, 0,
	0, 0, 0, 782, 0, 0, 1685, 0, 0, 931,
	932, 933, 934, 935, 0, 0, 0, 0, 0, 943,
	0, 901, 1809, 0, 0, 0, 415, 0, 754, 950,
	1461, 1453, 1454, 1455, 1456, 1458, 1677, 1678, 1003, 0,
	0, 0, 1249, 0, 416, 889, 889, 782, 0, 0,
	0, 1704, 912, 1705, 0, 79, 1707, 1708, 0, 0,
	1711, 79, 1462, 1459, 1460, 1461, 1453, 1454, 1455, 1456,
	1458, 0, 754, 911, 1687, 0, 1688, 49, 0, 49,
	418, 0, 0, 0, 781, 423, 424, 0, 0, 429,
	1727, 0, 889, 1103, 49, 1727, 0, 0, 0, 49,
	0, 417, 419, 1690, 0, 0, 0, 0, 79, 79,
	1693, 0, 79, 780, 0, 0, 0, 1593, 1872, 0,
	0, 0, 0, 1762, 0, 0, 0, 1249, 0, 906,
	903, 904, 905, 897, 898, 899, 900, 902, 912, 922,
	420, 0, 0, 780, 780, 0, 893, 894, 0, 0,
	0, 0, 780, 780, 421, 422, 1782, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 781, 0, 896,
	425, 0, 0, 0, 0, 1689, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 780, 0, 0, 0, 0,
	0, 895, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1923, 0, 0, 0, 0, 0, 0,
	0, 1003, 0, 1801, 757, 414, 1803, 0, 783, 897,
	898, 899, 900, 902, 79, 922, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1138, 0, 0, 757, 757, 901, 889, 783, 783,
	0, 0, 0, 757, 757, 0, 0, 783, 783, 0,
	0, 0, 0, 0, 1727, 0, 0, 0, 0, 79,
	0, 0, 0, 0, 0, 0, 1851, 1197, 426, 0,
	0, 0, 427, 0, 0, 79, 757, 428, 0, 0,
	783, 0, 0, 0, 889, 1593, 0, 0, 911, 598,
	0, 430, 780, 0, 0, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, 1174, 0, 1180, 0,
	1182, 1183, 1184, 1185, 0, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1204, 0, 0,
	0, 0, 0, 0, 1889, 1890, 782, 0, 1894, 0,
	0, 0, 1895, 912, 1727, 0, 0, 414, 0, 1231,
	1232, 0, 0, 1245, 0, 1256, 1258, 1263, 1266, 1267,
	1268, 754, 458, 1913, 0, 889, 782, 782, 0, 0,
	0, 1593, 889, 0, 0, 782, 782, 0, 0, 0,
	700, 0, 0, 757, 780, 0, 0, 783, 0, 0,
	0, 754, 754, 0, 1931, 0, 889, 79, 0, 414,
	754, 754, 1451, 1452, 0, 1469, 1470, 1471, 782, 0,
	0, 0, 0, 0, 0, 0, 0, 1727, 1319, 0,
	1851, 903, 904, 905, 897, 898, 899, 900, 902, 0,
	922, 0, 0, 754, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 49, 0, 0, 79, 0,
	889, 0, 0, 1466, 0, 0, 893, 894, 49, 0,
	1345, 0, 923, 924, 925, 0, 0, 0, 1984, 1394,
	0, 0, 780, 0, 0, 0, 0, 0, 0, 896,
	0, 0, 927, 0, 0, 757, 0, 0, 0, 783,
	0, 0, 0, 0, 1451, 1452, 0, 0, 0, 0,
	0, 895, 1457, 0, 0, 0, 0, 910, 1197, 0,
	0, 0, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 0, 782, 0, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	754, 0, 0, 0, 1467, 780, 901, 0, 0, 0,
	0, 0, 0, 1398, 1399, 0, 0, 0, 0, 1404,
	0, 0, 0, 757, 0, 920, 928, 783, 0, 0,
	0, 0, 942, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 1421, 0, 0,
	0, 0, 918, 0, 1428, 0, 0, 1432, 911, 0,
	0, 0, 0, 0, 0, 0, 1441, 0, 0, 1468,
	0, 0, 0, 0, 0, 0, 0, 782, 0, 0,
	0, 0, 0, 0, 0, 1451, 1452, 0, 1469, 1470,
	1471, 943, 0, 0, 0, 0, 1467, 1263, 1263, 1263,
	0, 1765, 754, 0, 0, 0, 757, 0, 1138, 0,
	783, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 912, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 0, 0, 921, 1466, 0, 0, 0,
	0, 0, 1463, 1464, 1465, 0, 1462, 1459, 1460, 1461,
	1453, 1454, 1455, 1456, 1458, 0, 598, 0, 1138, 0,
	0, 1468, 1138, 0, 598, 782, 0, 0, 700, 0,
	0, 893, 894, 0, 913, 914, 915, 923, 924, 925,
	0, 0, 0, 0, 0, 1457, 0, 916, 0, 0,
	754, 0, 0, 919, 896, 0, 0, 927, 0, 0,
	906, 903, 904, 905, 897, 898, 899, 900, 902, 0,
	922, 0, 0, 0, 0, 0, 895, 0, 0, 1472,
	0, 0, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1596, 0, 1467, 1597, 1459,
	1460, 1461, 1453, 1454, 1455, 1456, 1458, 0, 782, 1602,
	0, 0, 0, 0, 0, 0, 0, 1611, 0, 0,
	0, 0, 0, 0, 0, 1615, 0, 0, 1345, 0,
	0, 901, 0, 754, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1631, 0, 0, 0, 1633, 0, 0,
	920, 928, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1468, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 918, 0, 0,
	1664, 1665, 0, 911, 0, 0, 0, 0, 0, 1671,
	1672, 1673, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 917, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1138, 1138, 0, 0,
	1138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 0, 0, 1463, 1464, 1465, 0, 1462,
	1459, 1460, 1461, 1453, 1454, 1455, 1456, 1458, 912, 893,
	894, 0, 913, 914, 915, 923, 924, 925, 0, 0,
	921, 0, 0, 0, 0, 916, 0, 0, 0, 0,
	0, 1746, 896, 0, 0, 927, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 1452, 0, 1469,
	1470, 1471, 0, 0, 895, 0, 0, 0, 1767, 0,
	910, 0, 1770, 1771, 0, 0, 0, 1773, 0, 0,
	0, 0, 0, 0, 1775, 0, 1777, 0, 919, 0,
	0, 907, 908, 909, 1783, 906, 903, 904, 905, 897,
	898, 899, 900, 902, 0, 922, 0, 1466, 0, 0,
	893, 894, 1795, 913, 914, 915, 923, 924, 925, 901,
	0, 0, 0, 0, 0, 0, 916, 1792, 0, 1829,
	0, 0, 0, 896, 0, 0, 927, 0, 920, 928,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 926, 0, 895, 1457, 0, 0, 0,
	0, 910, 0, 1138, 0, 918, 0, 0, 0, 1819,
	0, 911, 0, 0, 1451, 1452, 0, 1469, 1470, 1471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1605, 0, 0, 0, 917, 0, 0, 1838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 0,
	901, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1855, 0, 0, 0, 1466, 0, 0, 0, 920,
	928, 0, 0, 1864, 1865, 0, 912, 0, 0, 942,
	0, 0, 0, 0, 926, 0, 0, 0, 921, 0,
	0, 0, 0, 0, 0, 0, 918, 0, 0, 0,
	0, 0, 911, 1877, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1468, 1457, 0, 1881, 0, 0, 0,
	0, 0, 0, 0, 0, 917, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 700, 0,
	0, 0, 0, 0, 0, 0, 919, 0, 1472, 907,
	908, 909, 0, 906, 903, 904, 905, 897, 898, 899,
	900, 902, 0, 922, 0, 0, 1467, 912, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 921,
	0, 0, 0, 0, 0, 0, 1463, 1464, 1465, 0,
	1462, 1459, 1460, 1461, 1453, 1454, 1455, 1456, 1458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 0, 0, 0, 0, 0, 919, 0, 0,
	907, 908, 909, 1968, 906, 903, 904, 905, 897, 898,
	899, 900, 902, 0, 922, 0, 0, 0, 1928, 0,
	0, 1982, 1982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1982, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1463, 1464, 1465, 284, 1462, 1459,
	1460, 1461, 1453, 1454, 1455, 1456, 1458, 0, 0, 0,
	0, 0, 1982, 83, 84, 303, 85, 304, 305, 306,
	307, 211, 308, 309, 310, 311, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 312, 90, 218, 219,
	91, 313, 314, 220, 221, 222, 315, 223, 316, 289,
	317, 92, 93, 94, 0, 95, 318, 96, 97, 98,
	319, 290, 99, 100, 320, 321, 322, 323, 324, 325,
	101, 102, 103, 104, 224, 105, 225, 226, 326, 106,
	327, 107, 328, 329, 330, 108, 109, 331, 110, 332,
	0, 333, 227, 111, 112, 228, 229, 334, 335, 336,
	113, 114, 230, 0, 115, 337, 116, 338, 339, 291,
	340, 117, 231, 341, 232, 342, 118, 119, 120, 121,
	233, 234, 293, 343, 124, 344, 122, 345, 292, 123,
	235, 236, 237, 238, 346, 239, 347, 294, 125, 295,
	126, 127, 348, 129, 128, 349, 240, 296, 130, 297,
	350, 131, 351, 352, 132, 0, 133, 134, 135, 136,
	137, 298, 138, 139, 142, 140, 353, 141, 354, 241,
	143, 242, 144, 145, 355, 146, 356, 357, 358, 359,
	147, 243, 299, 148, 300, 244, 149, 150, 151, 152,
	360, 245, 153, 246, 154, 361, 155, 156, 157, 247,
	158, 159, 362, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 363, 170, 301, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 364, 249, 178, 179, 365,
	180, 181, 302, 182, 250, 251, 183, 366, 189, 184,
	185, 186, 188, 252, 187, 253, 367, 190, 368, 191,
	192, 193, 369, 254, 255, 256, 370, 371, 194, 257,
	258, 372, 195, 196, 197, 198, 373, 374, 199, 200,
	201, 375, 202, 376, 203, 204, 205, 259, 260, 377,
	378, 206, 379, 380, 381, 382, 207, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 284, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1588, 83, 84, 303,
	85, 304, 305, 306, 307, 211, 308, 309, 310, 311,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	312, 90, 218, 219, 91, 313, 314, 220, 221, 222,
	315, 223, 316, 289, 317, 92, 93, 94, 0, 95,
	318, 96, 97, 98, 319, 290, 99, 100, 320, 321,
	322, 323, 324, 325, 101, 102, 103, 104, 224, 105,
	225, 226, 326, 106, 327, 107, 328, 329, 330, 108,
	109, 331, 110, 332, 0, 333, 227, 111, 112, 228,
	229, 334, 335, 336, 113, 114, 230, 0, 115, 337,
	116, 338, 339, 291, 340, 117, 231, 341, 232, 342,
	118, 119, 120, 121, 233, 234, 293, 343, 124, 344,
	122, 345, 292, 123, 235, 236, 237, 238, 346, 239,
	347, 294, 125, 295, 126, 127, 348, 129, 128, 349,
	240, 296, 130, 297, 350, 131, 351, 352, 132, 0,
	133, 134, 135, 136, 137, 298, 138, 139, 142, 140,
	353, 141, 354, 241, 143, 242, 144, 145, 355, 146,
	356, 357, 358, 359, 147, 243, 299, 148, 300, 244,
	149, 150, 151, 152, 360, 245, 153, 246, 154, 361,
	155, 156, 157, 247, 158, 159, 362, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 363, 170, 301,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 364,
	249, 178, 179, 365, 180, 181, 302, 182, 250, 251,
	183, 366, 189, 184, 185, 186, 188, 252, 187, 253,
	367, 190, 368, 191, 192, 193, 369, 254, 255, 256,
	370, 371, 194, 257, 258, 372, 195, 196, 197, 198,
	373, 374, 199, 200, 201, 375, 202, 376, 203, 204,
	205, 259, 260, 377, 378, 206, 379, 380, 381, 382,
	207, 208, 209, 210, 284, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 726, 0, 0,
	83, 84, 303, 85, 304, 305, 306, 307, 211, 308,
	309, 310, 311, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 312, 90, 218, 219, 91, 313, 314,
	220, 221, 222, 315, 223, 316, 289, 317, 92, 93,
	94, 0, 95, 318, 96, 97, 98, 319, 290, 99,
	100, 320, 321, 322, 323, 324, 325, 101, 102, 103,
	104, 224, 105, 225, 226, 326, 106, 327, 107, 328,
	329, 330, 108, 109, 331, 110, 332, 0, 333, 227,
	111, 112, 228, 229, 334, 335, 336, 113, 114, 230,
	0, 115, 337, 116, 338, 339, 291, 340, 117, 231,
	341, 232, 342, 118, 119, 120, 121, 233, 234, 293,
	343, 124, 344, 122, 345, 292, 123, 235, 236, 237,
	238, 346, 239, 347, 294, 125, 295, 126, 127, 348,
	129, 128, 349, 240, 296, 130, 297, 350, 131, 351,
	352, 132, 0, 133, 134, 135, 136, 137, 298, 138,
	139, 142, 140, 353, 141, 354, 241, 143, 242, 144,
	145, 355, 146, 356, 357, 358, 359, 147, 243, 299,
	148, 300, 244, 149, 150, 151, 152, 360, 245, 153,
	246, 154, 361, 155, 156, 157, 247, 158, 159, 362,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	363, 170, 301, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 364, 249, 178, 179, 365, 180, 181, 302,
	182, 250, 251, 183, 366, 189, 184, 185, 186, 188,
	252, 187, 253, 367, 190, 368, 191, 192, 193, 369,
	254, 255, 256, 370, 371, 194, 257, 258, 372, 195,
	196, 197, 198, 373, 374, 199, 200, 201, 375, 202,
	376, 203, 204, 205, 259, 260, 377, 378, 206, 379,
	380, 381, 382, 207, 208, 209, 210, 635, 625, 626,
	623, 624, 615, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 84, 1220, 85, 0, 0, 0,
	0, 651, 618, 0, 0, 0, 86, 87, 88, 212,
	666, 214, 667, 89, 668, 669, 0, 90, 218, 219,
	91, 621, 650, 670, 671, 222, 0, 662, 0, 643,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 290, 99, 100, 0, 644, 646, 0, 645, 647,
	101, 102, 103, 104, 672, 105, 673, 674, 0, 106,
	0, 107, 0, 1221, 0, 665, 109, 0, 110, 0,
	0, 0, 609, 111, 112, 652, 653, 631, 0, 0,
	113, 114, 675, 0, 115, 0, 116, 0, 0, 291,
	0, 117, 663, 0, 232, 0, 118, 119, 120, 121,
	659, 661, 293, 0, 124, 0, 122, 0, 292, 123,
	676, 677, 678, 679, 0, 642, 0, 294, 125, 295,
	126, 127, 0, 129, 128, 0, 664, 296, 130, 297,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 298, 138, 139, 142, 140, 604, 141, 632, 660,
	143, 680, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 299, 148, 300, 654, 149, 150, 151, 152,
	0, 655, 153, 246, 154, 0, 155, 156, 157, 681,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 301, 171, 172, 610, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 648,
	180, 181, 302, 182, 682, 251, 183, 0, 189, 184,
	185, 186, 188, 683, 187, 656, 0, 190, 0, 191,
	192, 193, 0, 254, 684, 685, 0, 0, 194, 657,
	658, 630, 195, 196, 197, 198, 0, 0, 199, 200,
	201, 649, 202, 0, 203, 204, 205, 259, 686, 1219,
	0, 206, 0, 0, 0, 0, 207, 208, 209, 210,
	605, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 602, 1222, 0, 0, 0, 603, 0, 0,
	611, 1217, 0, 0, 0, 614, 635, 625, 626, 623,
	624, 615, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 84, 0, 85, 0, 0, 0, 0,
	651, 618, 0, 0, 0, 86, 87, 88, 212, 666,
	214, 667, 89, 668, 669, 0, 90, 218, 219, 91,
	621, 650, 670, 671, 222, 0, 662, 0, 643, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	290, 99, 100, 0, 644, 646, 0, 645, 647, 101,
	102, 103, 104, 672, 105, 673, 674, 701, 106, 0,
	107, 0, 0, 0, 665, 109, 0, 110, 0, 0,
	0, 609, 111, 112, 652, 653, 631, 0, 0, 113,
	114, 675, 0, 115, 0, 116, 0, 0, 291, 0,
	117, 663, 0, 232, 0, 118, 119, 120, 121, 659,
	661, 293, 0, 124, 0, 122, 0, 292, 123, 676,
	677, 678, 679, 0, 642, 0, 294, 125, 295, 126,
	127, 0, 129, 128, 0, 664, 296, 130, 297, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	298, 138, 139, 142, 140, 604, 141, 632, 660, 143,
	680, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 299, 148, 300, 654, 149, 150, 151, 152, 0,
	655, 153, 246, 154, 0, 155, 156, 157, 681, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 301, 171, 172, 610, 173, 0,
	174, 175, 176, 177, 67, 249, 178, 179, 648, 180,
	181, 302, 182, 682, 251, 183, 0, 189, 184, 185,
	186, 188, 683, 187, 656, 0, 190, 69, 191, 192,
	193, 0, 254, 684, 685, 0, 0, 194, 657, 658,
	630, 195, 196, 197, 198, 0, 0, 199, 200, 201,
	649, 202, 0, 203, 204, 205, 516, 686, 0, 0,
	206, 0, 0, 0, 65, 207, 208, 209, 210, 605,
	66, 635, 625, 626, 623, 624, 615, 0, 0, 0,
	601, 602, 0, 0, 0, 0, 603, 83, 84, 611,
	85, 0, 0, 0, 614, 651, 618, 0, 0, 0,
	86, 87, 88, 212, 666, 214, 667, 89, 668, 669,
	0, 90, 218, 219, 91, 621, 650, 670, 671, 222,
	0, 662, 0, 643, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 290, 99, 100, 0, 644,
	646, 0, 645, 647, 101, 102, 103, 104, 672, 105,
	673, 674, 0, 106, 0, 107, 0, 0, 0, 665,
	109, 0, 110, 0, 0, 0, 609, 111, 112, 652,
	653, 631, 0, 0, 113, 114, 675, 0, 115, 0,
	116, 0, 0, 291, 0, 117, 663, 0, 232, 0,
	118, 119, 120, 121, 659, 661, 293, 0, 124, 0,
	122, 0, 292, 123, 676, 677, 678, 679, 0, 642,
	0, 294, 125, 295, 126, 127, 0, 129, 128, 0,
	664, 296, 130, 297, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 298, 138, 139, 142, 140,
	604, 141, 632, 660, 143, 680, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 299, 148, 300, 654,
	149, 150, 151, 152, 0, 655, 153, 246, 154, 0,
	155, 156, 157, 681, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 301,
	171, 172, 610, 173, 0, 174, 175, 176, 177, 67,
	249, 178, 179, 648, 180, 181, 302, 182, 682, 251,
	183, 0, 189, 184, 185, 186, 188, 683, 187, 656,
	0, 190, 69, 191, 192, 193, 0, 254, 684, 685,
	0, 0, 194, 657, 658, 630, 195, 196, 197, 198,
	0, 0, 199, 200, 201, 649, 202, 0, 203, 204,
	205, 516, 686, 0, 0, 206, 0, 0, 0, 65,
	207, 208, 209, 210, 605, 66, 635, 625, 626, 623,
	624, 615, 0, 0, 0, 601, 602, 0, 0, 0,
	0, 603, 83, 84, 611, 85, 0, 0, 0, 614,
	651, 618, 0, 0, 0, 86, 87, 88, 212, 666,
	214, 667, 89, 668, 669, 1259, 90, 218, 219, 91,
	621, 650, 670, 671, 222, 0, 662, 0, 643, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	290, 99, 100, 0, 644, 646, 0, 645, 647, 101,
	102, 103, 104, 672, 105, 673, 674, 0, 106, 0,
	107, 0, 0, 0, 665, 109, 0, 110, 0, 0,
	0, 609, 111, 112, 652, 653, 631, 0, 0, 113,
	114, 675, 0, 115, 0, 116, 0, 1264, 291, 0,
	117, 663, 0, 232, 0, 118, 119, 120, 121, 659,
	661, 293, 0, 124, 0, 122, 0, 292, 123, 676,
	677, 678, 679, 0, 642, 0, 294, 125, 295, 126,
	127, 0, 129, 128, 1260, 664, 296, 130, 297, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	298, 138, 139, 142, 140, 604, 141, 632, 660, 143,
	680, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 299, 148, 300, 654, 149, 150, 151, 152, 0,
	655, 153, 246, 154, 0, 155, 156, 157, 681, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 301, 171, 172, 610, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 648, 180,
	181, 302, 182, 682, 251, 183, 0, 189, 184, 185,
	186, 188, 683, 187, 656, 0, 190, 0, 191, 192,
	193, 0, 254, 684, 685, 0, 1261, 194, 657, 658,
	630, 195, 196, 197, 198, 0, 0, 199, 200, 201,
	649, 202, 0, 203, 204, 205, 259, 686, 0, 0,
	206, 0, 0, 0, 0, 207, 208, 209, 210, 605,
	0, 635, 625, 626, 623, 624, 615, 0, 0, 0,
	601, 602, 0, 0, 0, 0, 603, 83, 84, 611,
	85, 0, 0, 0, 614, 651, 618, 0, 0, 0,
	86, 87, 88, 212, 666, 214, 667, 89, 668, 669,
	0, 90, 218, 219, 91, 621, 650, 670, 671, 222,
	0, 662, 0, 643, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 290, 99, 100, 0, 644,
	646, 0, 645, 647, 101, 102, 103, 104, 672, 105,
	673, 674, 0, 106, 0, 107, 0, 0, 0, 665,
	109, 0, 110, 0, 0, 0, 609, 111, 112, 652,
	653, 631, 0, 0, 113, 114, 675, 0, 115, 0,
	116, 0, 0, 291, 0, 117, 663, 0, 232, 0,
	118, 119, 120, 121, 659, 661, 293, 0, 124, 0,
	122, 0, 292, 123, 676, 677, 678, 679, 0, 642,
	0, 294, 125, 295, 126, 127, 0, 129, 128, 0,
	664, 296, 130, 297, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 298, 138, 139, 142, 140,
	604, 141, 632, 660, 143, 680, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 299, 148, 300, 654,
	149, 150, 151, 152, 0, 655, 153, 246, 154, 0,
	155, 156, 157, 681, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 301,
	171, 172, 610, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 648, 180, 181, 302, 182, 682, 251,
	183, 0, 189, 184, 185, 186, 188, 683, 187, 656,
	0, 190, 0, 191, 192, 193, 0, 254, 684, 685,
	0, 0, 194, 657, 658, 630, 195, 196, 197, 198,
	0, 0, 199, 200, 201, 649, 202, 0, 203, 204,
	205, 259, 686, 0, 0, 206, 0, 0, 0, 0,
	207, 208, 209, 210, 605, 0, 0, 0, 0, 635,
	625, 626, 623, 624, 615, 601, 602, 0, 0, 0,
	0, 603, 948, 1212, 611, 83, 84, 0, 85, 614,
	0, 0, 0, 651, 618, 0, 0, 0, 86, 87,
	88, 212, 666, 214, 667, 89, 668, 669, 0, 90,
	218, 219, 91, 621, 650, 670, 671, 222, 0, 662,
	0, 643, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 290, 99, 100, 0, 644, 646, 0,
	645, 647, 101, 102, 103, 104, 672, 105, 673, 674,
	0, 106, 0, 107, 0, 0, 0, 665, 109, 0,
	110, 0, 0, 0, 609, 111, 112, 652, 653, 631,
	0, 0, 113, 114, 675, 0, 115, 0, 116, 0,
	0, 291, 0, 117, 663, 0, 232, 0, 118, 119,
	120, 121, 659, 661, 293, 0, 124, 0, 122, 0,
	292, 123, 676, 677, 678, 679, 0, 642, 0, 294,
	125, 295, 126, 127, 0, 129, 128, 0, 664, 296,
	130, 297, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 298, 138, 139, 142, 140, 604, 141,
	632, 660, 143, 680, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 299, 148, 300, 654, 149, 150,
	151, 152, 0, 655, 153, 246, 154, 0, 155, 156,
	157, 681, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 301, 171, 172,
	610, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 648, 180, 181, 302, 182, 682, 251, 183, 0,
	189, 184, 185, 186, 188, 683, 187, 656, 0, 190,
	0, 191, 192, 193, 0, 254, 684, 685, 0, 0,
	194, 657, 658, 630, 195, 196, 197, 198, 0, 0,
	199, 200, 201, 649, 202, 0, 203, 204, 205, 259,
	686, 0, 0, 206, 0, 0, 0, 0, 207, 208,
	209, 210, 605, 0, 635, 625, 626, 623, 624, 615,
	0, 0, 0, 601, 602, 599, 0, 0, 0, 603,
	83, 84, 611, 85, 0, 0, 0, 614, 651, 618,
	0, 0, 0, 86, 87, 88, 212, 666, 214, 667,
	89, 668, 669, 0, 90, 218, 219, 91, 621, 650,
	670, 671, 222, 0, 662, 0, 643, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 290, 99,
	100, 0, 644, 646, 0, 645, 647, 101, 102, 103,
	104, 672, 105, 673, 674, 0, 106, 0, 107, 0,
	0, 0, 665, 109, 0, 110, 0, 0, 0, 609,
	111, 112, 652, 653, 631, 0, 0, 113, 114, 675,
	0, 115, 0, 116, 0, 0, 291, 0, 117, 663,
	0, 232, 0, 118, 119, 120, 121, 659, 661, 293,
	0, 124, 0, 122, 0, 292, 123, 676, 677, 678,
	679, 0, 642, 0, 294, 125, 295, 126, 127, 0,
	129, 128, 0, 664, 296, 130, 297, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 298, 138,
	139, 142, 140, 604, 141, 632, 660, 143, 680, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 299,
	148, 300, 654, 149, 150, 151, 152, 0, 655, 153,
	246, 154, 0, 155, 156, 157, 681, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 301, 171, 172, 610, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 648, 180, 181, 302,
	182, 682, 251, 183, 0, 189, 184, 185, 186, 188,
	683, 187, 656, 0, 190, 0, 191, 192, 193, 0,
	254, 684, 685, 0, 0, 194, 657, 658, 630, 195,
	196, 197, 198, 0, 0, 199, 200, 201, 649, 202,
	0, 203, 204, 205, 259, 686, 0, 0, 206, 0,
	0, 0, 0, 207, 208, 209, 210, 605, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 602,
	0, 0, 0, 0, 603, 0, 0, 611, 1661, 0,
	0, 0, 614, 635, 625, 626, 623, 624, 615, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	84, 0, 85, 0, 0, 0, 0, 651, 618, 0,
	0, 0, 86, 87, 88, 212, 666, 214, 667, 89,
	668, 669, 0, 90, 218, 219, 91, 621, 650, 670,
	671, 222, 0, 662, 0, 643, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 290, 99, 100,
	0, 644, 646, 0, 645, 647, 101, 102, 103, 104,
	672, 105, 673, 674, 0, 106, 0, 107, 0, 0,
	0, 665, 109, 0, 110, 0, 0, 0, 609, 111,
	112, 652, 653, 631, 0, 0, 113, 114, 675, 0,
	115, 0, 116, 0, 0, 291, 0, 117, 663, 0,
	232, 0, 118, 119, 120, 121, 659, 661, 293, 0,
	124, 0, 122, 0, 292, 123, 676, 677, 678, 679,
	0, 642, 0, 294, 125, 295, 126, 127, 0, 129,
	128, 0, 664, 296, 130, 297, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 298, 138, 139,
	142, 140, 604, 141, 632, 660, 143, 680, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 299, 148,
	300, 654, 149, 150, 151, 152, 0, 655, 153, 246,
	154, 0, 155, 156, 157, 681, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 301, 171, 172, 610, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 648, 180, 181, 302, 182,
	682, 251, 183, 0, 189, 184, 185, 186, 188, 683,
	187, 656, 0, 190, 0, 191, 192, 193, 0, 254,
	684, 685, 0, 0, 194, 657, 658, 630, 195, 196,
	197, 198, 0, 0, 199, 200, 201, 649, 202, 0,
	203, 204, 205, 259, 686, 1618, 0, 206, 0, 0,
	0, 0, 207, 208, 209, 210, 605, 0, 635, 625,
	626, 623, 624, 615, 0, 0, 0, 601, 602, 0,
	0, 0, 0, 603, 83, 84, 611, 85, 0, 0,
	0, 614, 651, 618, 0, 0, 0, 86, 87, 88,
	212, 666, 214, 667, 89, 668, 669, 0, 90, 218,
	219, 91, 621, 650, 670, 671, 222, 0, 662, 0,
	643, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 290, 99, 100, 0, 644, 646, 0, 645,
	647, 101, 102, 103, 104, 672, 105, 673, 674, 0,
	106, 0, 107, 0, 0, 0, 665, 109, 0, 110,
	0, 0, 0, 609, 111, 112, 652, 653, 631, 0,
	0, 113, 114, 675, 0, 115, 0, 116, 0, 0,
	291, 0, 117, 663, 0, 232, 0, 118, 119, 120,
	121, 659, 661, 293, 0, 124, 0, 122, 0, 292,
	123, 676, 677, 678, 679, 0, 642, 0, 294, 125,
	295, 126, 127, 0, 129, 128, 0, 664, 296, 130,
	297, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 298, 138, 139, 142, 140, 604, 141, 632,
	660, 143, 680, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 299, 148, 300, 654, 149, 150, 151,
	152, 0, 655, 153, 246, 154, 0, 155, 156, 157,
	681, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 301, 171, 172, 610,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	648, 180, 181, 302, 182, 682, 251, 183, 0, 189,
	184, 185, 186, 188, 683, 187, 656, 0, 190, 0,
	191, 192, 193, 0, 254, 684, 685, 0, 0, 194,
	657, 658, 630, 195, 196, 197, 198, 0, 0, 199,
	200, 201, 649, 202, 0, 203, 204, 205, 259, 686,
	0, 0, 206, 0, 0, 0, 0, 207, 208, 209,
	210, 605, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 602, 0, 0, 0, 0, 603, 0,
	0, 611, 1608, 0, 0, 0, 614, 635, 625, 626,
	623, 624, 615, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 84, 0, 85, 0, 0, 0,
	0, 651, 618, 0, 0, 0, 86, 87, 88, 212,
	666, 214, 667, 89, 668, 669, 0, 90, 218, 219,
	91, 621, 650, 670, 671, 222, 0, 662, 0, 643,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 290, 99, 100, 0, 644, 646, 0, 645, 647,
	101, 102, 103, 104, 672, 105, 673, 674, 701, 106,
	0, 107, 0, 0, 0, 665, 109, 0, 110, 0,
	0, 0, 609, 111, 112, 652, 653, 631, 0, 0,
	113, 114, 675, 0, 115, 0, 116, 0, 0, 291,
	0, 117, 663, 0, 232, 0, 118, 119, 120, 121,
	659, 661, 293, 0, 124, 0, 122, 0, 292, 123,
	676, 677, 678, 679, 0, 642, 0, 294, 125, 295,
	126, 127, 0, 129, 128, 0, 664, 296, 130, 297,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 298, 138, 139, 142, 140, 604, 141, 632, 660,
	143, 680, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 299, 148, 300, 654, 149, 150, 151, 152,
	0, 655, 153, 246, 154, 0, 155, 156, 157, 681,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 301, 171, 172, 610, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 648,
	180, 181, 302, 182, 682, 251, 183, 0, 189, 184,
	185, 186, 188, 683, 187, 656, 0, 190, 0, 191,
	192, 193, 0, 254, 684, 685, 0, 0, 194, 657,
	658, 630, 195, 196, 197, 198, 0, 0, 199, 200,
	201, 649, 202, 0, 203, 204, 205, 259, 686, 0,
	0, 206, 0, 0, 0, 0, 207, 208, 209, 210,
	605, 0, 635, 625, 626, 623, 624, 615, 0, 0,
	0, 601, 602, 0, 0, 0, 0, 603, 83, 84,
	611, 85, 0, 0, 0, 614, 651, 618, 0, 0,
	0, 86, 87, 88, 212, 666, 214, 667, 89, 668,
	669, 0, 90, 218, 219, 91, 621, 650, 670, 671,
	222, 0, 662, 0, 643, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 290, 99, 100, 0,
	644, 646, 0, 645, 647, 101, 102, 103, 104, 672,
	105, 673, 674, 0, 106, 0, 107, 0, 0, 0,
	665, 109, 0, 110, 0, 0, 0, 609, 111, 112,
	652, 653, 631, 0, 0, 113, 114, 675, 0, 115,
	0, 116, 0, 1264, 291, 0, 117, 663, 0, 232,
	0, 118, 119, 120, 121, 659, 661, 293, 0, 124,
	0, 122, 0, 292, 123, 676, 677, 678, 679, 0,
	642, 0, 294, 125, 295, 126, 127, 0, 129, 128,
	0, 664, 296, 130, 297, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 298, 138, 139, 142,
	140, 604, 141, 632, 660, 143, 680, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 299, 148, 300,
	654, 149, 150, 151, 152, 0, 655, 153, 246, 154,
	0, 155, 156, 157, 681, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	301, 171, 172, 610, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 648, 180, 181, 302, 182, 682,
	251, 183, 0, 189, 184, 185, 186, 188, 683, 187,
	656, 0, 190, 0, 191, 192, 193, 0, 254, 684,
	685, 0, 0, 194, 657, 658, 630, 195, 196, 197,
	198, 0, 0, 199, 200, 201, 649, 202, 0, 203,
	204, 205, 259, 686, 0, 0, 206, 0, 0, 0,
	0, 207, 208, 209, 210, 605, 0, 635, 625, 626,
	623, 624, 615, 0, 0, 0, 601, 602, 0, 0,
	0, 0, 603, 83, 84, 611, 85, 0, 0, 0,
	614, 651, 618, 0, 0, 0, 86, 87, 88, 212,
	666, 214, 667, 89, 668, 669, 0, 90, 218, 219,
	91, 621, 650, 670, 671, 222, 0, 662, 0, 643,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 290, 99, 100, 0, 644, 646, 0, 645, 647,
	101, 102, 103, 104, 672, 105, 673, 674, 0, 106,
	0, 107, 0, 0, 0, 665, 109, 0, 110, 0,
	0, 0, 609, 111, 112, 652, 653, 631, 0, 0,
	113, 114, 675, 0, 115, 0, 116, 0, 0, 291,
	0, 117, 663, 0, 232, 0, 118, 119, 120, 121,
	659, 661, 293, 0, 124, 0, 122, 0, 292, 123,
	676, 677, 678, 679, 0, 642, 0, 294, 125, 295,
	126, 127, 0, 129, 128, 0, 664, 296, 130, 297,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 298, 138, 139, 142, 140, 604, 141, 632, 660,
	143, 680, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 299, 148, 300, 654, 149, 150, 151, 152,
	0, 655, 153, 246, 154, 0, 155, 156, 157, 681,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 301, 171, 172, 610, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 648,
	180, 181, 302, 182, 682, 251, 183, 0, 189, 184,
	185, 186, 188, 683, 187, 656, 0, 190, 0, 191,
	192, 193, 0, 254, 684, 685, 0, 0, 194, 657,
	658, 630, 195, 196, 197, 198, 0, 0, 199, 200,
	201, 649, 202, 0, 203, 204, 205, 259, 686, 0,
	0, 206, 0, 0, 0, 0, 207, 208, 209, 210,
	605, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 602, 0, 0, 0, 0, 603, 0, 0,
	611, 1207, 0, 0, 0, 614, 635, 625, 626, 623,
	624, 615, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 84, 877, 85, 0, 0, 0, 0,
	651, 618, 0, 0, 0, 86, 87, 88, 212, 666,
	214, 667, 89, 668, 669, 0, 90, 218, 219, 91,
	621, 650, 670, 671, 222, 0, 662, 0, 643, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	290, 99, 100, 0, 644, 646, 0, 645, 647, 101,
	102, 103, 104, 672, 105, 673, 674, 0, 106, 0,
	107, 0, 0, 0, 665, 109, 0, 110, 0, 0,
	0, 609, 111, 112, 652, 653, 631, 0, 0, 113,
	114, 675, 0, 115, 0, 116, 0, 0, 291, 0,
	117, 663, 0, 232, 0, 118, 119, 120, 121, 659,
	661, 293, 0, 124, 0, 122, 0, 292, 123, 676,
	677, 678, 679, 0, 642, 0, 294, 125, 295, 126,
	127, 0, 129, 128, 0, 664, 296, 130, 297, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	298, 138, 139, 142, 140, 604, 141, 632, 660, 143,
	680, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 299, 148, 300, 654, 149, 150, 151, 152, 0,
	655, 153, 246, 154, 0, 155, 156, 157, 681, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 301, 171, 172, 610, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 648, 180,
	181, 302, 182, 682, 251, 183, 0, 189, 184, 185,
	186, 188, 683, 187, 656, 0, 190, 0, 191, 192,
	193, 0, 254, 684, 685, 0, 0, 194, 657, 658,
	630, 195, 196, 197, 198, 0, 0, 199, 200, 201,
	649, 202, 0, 203, 204, 205, 259, 686, 0, 0,
	206, 0, 0, 0, 0, 207, 208, 209, 210, 605,
	0, 635, 625, 626, 623, 624, 615, 0, 0, 0,
	601, 602, 0, 0, 0, 0, 603, 83, 84, 611,
	85, 0, 0, 0, 614, 651, 618, 0, 0, 0,
	86, 87, 88, 212, 666, 214, 667, 89, 668, 669,
	0, 90, 218, 219, 91, 621, 650, 670, 671, 222,
	0, 662, 0, 643, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 290, 99, 1981, 0, 644,
	646, 0, 645, 647, 101, 102, 103, 104, 672, 105,
	673, 674, 0, 106, 0, 107, 0, 0, 0, 665,
	109, 0, 110, 0, 0, 0, 609, 111, 112, 652,
	653, 631, 0, 0, 113, 114, 675, 0, 115, 0,
	116, 0, 0, 291, 0, 117, 663, 0, 232, 0,
	118, 119, 120, 121, 659, 661, 293, 0, 124, 0,
	122, 0, 292, 123, 676, 677, 678, 679, 0, 642,
	0, 294, 125, 295, 126, 127, 0, 129, 128, 0,
	664, 296, 130, 297, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 298, 138, 139, 142, 140,
	604, 141, 632, 660, 143, 680, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 299, 148, 300, 654,
	149, 150, 151, 152, 0, 655, 153, 246, 154, 0,
	155, 156, 157, 681, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 301,
	171, 172, 610, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 648, 180, 181, 302, 182, 682, 251,
	183, 0, 189, 184, 185, 186, 188, 683, 187, 656,
	0, 190, 0, 191, 192, 193, 0, 254, 684, 685,
	0, 0, 194, 657, 658, 630, 195, 196, 1980, 198,
	0, 0, 199, 200, 201, 649, 202, 0, 203, 204,
	205, 259, 686, 0, 0, 206, 0, 0, 0, 0,
	207, 208, 209, 210, 605, 0, 635, 625, 626, 623,
	624, 615, 0, 0, 0, 601, 602, 0, 0, 0,
	0, 603, 83, 84, 611, 85, 0, 0, 0, 614,
	651, 618, 0, 0, 0, 86, 87, 88, 1979, 666,
	214, 667, 89, 668, 669, 0, 90, 218, 219, 91,
	621, 650, 670, 671, 222, 0, 662, 0, 643, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	290, 99, 1981, 0, 644, 646, 0, 645, 647, 101,
	102, 103, 104, 672, 105, 673, 674, 0, 106, 0,
	107, 0, 0, 0, 665, 109, 0, 110, 0, 0,
	0, 609, 111, 112, 652, 653, 631, 0, 0, 113,
	114, 675, 0, 115, 0, 116, 0, 0, 291, 0,
	117, 663, 0, 232, 0, 118, 119, 120, 121, 659,
	661, 293, 0, 124, 0, 122, 0, 292, 123, 676,
	677, 678, 679, 0, 642, 0, 294, 125, 295, 126,
	127, 0, 129, 128, 0, 664, 296, 130, 297, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	298, 138, 139, 142, 140, 604, 141, 632, 660, 143,
	680, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 299, 148, 300, 654, 149, 150, 151, 152, 0,
	655, 153, 246, 154, 0, 155, 156, 157, 681, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 301, 171, 172, 610, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 648, 180,
	181, 302, 182, 682, 251, 183, 0, 189, 184, 185,
	186, 188, 683, 187, 656, 0, 190, 0, 191, 192,
	193, 0, 254, 684, 685, 0, 0, 194, 657, 658,
	630, 195, 196, 1980, 198, 0, 0, 199, 200, 201,
	649, 202, 0, 203, 204, 205, 259, 686, 0, 0,
	206, 0, 0, 0, 0, 207, 208, 209, 210, 605,
	0, 635, 625, 626, 623, 624, 615, 0, 0, 0,
	601, 602, 0, 0, 0, 0, 603, 83, 84, 611,
	85, 0, 0, 0, 614, 651, 618, 0, 0, 0,
	86, 87, 88, 212, 666, 214, 667, 89, 668, 669,
	0, 90, 218, 219, 91, 621, 650, 670, 671, 222,
	0, 662, 0, 643, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 290, 99, 100, 0, 644,
	646, 0, 645, 647, 101, 102, 103, 104, 672, 105,
	673, 674, 0, 106, 0, 107, 0, 0, 0, 665,
	109, 0, 110, 0, 0, 0, 609, 111, 112, 652,
	653, 631, 0, 0, 113, 114, 675, 0, 115, 0,
	116, 0, 0, 291, 0, 117, 663, 0, 232, 0,
	118, 119, 120, 121, 659, 661, 293, 0, 124, 0,
	122, 0, 292, 123, 676, 677, 678, 679, 0, 642,
	0, 294, 125, 295, 126, 127, 0, 129, 128, 0,
	664, 296, 130, 297, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 298, 138, 139, 142, 140,
	604, 141, 632, 660, 143, 680, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 299, 148, 300, 654,
	149, 150, 151, 152, 0, 655, 153, 246, 154, 0,
	155, 156, 157, 681, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 301,
	171, 172, 610, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 648, 180, 181, 302, 182, 682, 251,
	183, 0, 189, 184, 185, 186, 188, 683, 187, 656,
	0, 190, 0, 191, 192, 193, 0, 254, 684, 685,
	0, 0, 194, 657, 658, 630, 195, 196, 197, 198,
	0, 0, 199, 200, 201, 649, 202, 0, 203, 204,
	205, 259, 686, 0, 0, 206, 0, 0, 0, 0,
	207, 208, 209, 210, 605, 0, 1236, 625, 626, 623,
	624, 615, 0, 0, 0, 601, 602, 0, 0, 0,
	0, 603, 83, 84, 611, 85, 0, 0, 0, 614,
	651, 618, 0, 0, 0, 86, 87, 88, 212, 666,
	214, 667, 89, 668, 669, 0, 90, 218, 219, 91,
	621, 650, 670, 671, 222, 0, 662, 0, 643, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	290, 99, 100, 0, 644, 646, 0, 645, 647, 101,
	102, 103, 104, 672, 1239, 673, 674, 0, 106, 0,
	107, 0, 0, 0, 665, 109, 0, 110, 0, 0,
	0, 609, 111, 112, 652, 653, 631, 0, 0, 113,
	114, 675, 0, 115, 0, 116, 0, 0, 291, 0,
	117, 663, 0, 232, 0, 118, 119, 1240, 121, 659,
	661, 293, 0, 124, 0, 122, 0, 292, 123, 676,
	677, 678, 679, 0, 642, 0, 294, 125, 295, 126,
	127, 0, 129, 128, 0, 664, 296, 130, 297, 0,
	131, 0, 0, 132, 0, 133, 1241, 1238, 136, 137,
	298, 138, 139, 142, 140, 604, 141, 632, 660, 143,
	680, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 299, 148, 300, 654, 149, 150, 151, 152, 0,
	655, 153, 246, 154, 0, 155, 156, 157, 681, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 301, 171, 172, 610, 173, 0,
	174, 175, 176, 1242, 0, 249, 178, 179, 648, 180,
	181, 302, 182, 682, 251, 183, 0, 189, 184, 185,
	186, 188, 683, 187, 656, 0, 190, 0, 191, 192,
	193, 0, 254, 684, 685, 0, 0, 194, 657, 658,
	630, 195, 196, 197, 198, 0, 0, 199, 200, 201,
	649, 202, 0, 203, 204, 205, 259, 686, 0, 0,
	206, 0, 0, 0, 0, 207, 208, 1237, 210, 605,
	0, 635, 625, 626, 623, 624, 615, 0, 0, 0,
	601, 602, 0, 0, 0, 0, 603, 83, 84, 611,
	85, 0, 0, 0, 614, 651, 618, 0, 0, 0,
	86, 87, 88, 212, 666, 214, 667, 89, 668, 669,
	0, 90, 218, 219, 91, 621, 650, 670, 671, 222,
	0, 662, 0, 643, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 290, 99, 100, 0, 644,
	646, 0, 645, 647, 101, 102, 103, 104, 672, 105,
	673, 674, 0, 106, 0, 107, 0, 0, 0, 665,
	109, 0, 110, 0, 0, 0, 609, 111, 112, 652,
	653, 631, 0, 0, 113, 114, 675, 0, 115, 0,
	116, 0, 0, 291, 0, 117, 663, 0, 232, 0,
	118, 119, 120, 121, 659, 661, 293, 0, 124, 0,
	122, 0, 292, 123, 676, 677, 678, 679, 0, 642,
	0, 294, 125, 295, 126, 127, 0, 129, 128, 0,
	664, 296, 130, 297, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 298, 138, 139, 142, 140,
	0, 141, 632, 660, 143, 680, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 299, 148, 300, 654,
	149, 150, 151, 152, 0, 655, 153, 246, 154, 0,
	155, 156, 157, 681, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 301,
	171, 172, 1254, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 648, 180, 181, 302, 182, 682, 251,
	183, 0, 189, 184, 185, 186, 188, 683, 187, 656,
	0, 190, 0, 191, 192, 193, 0, 254, 684, 685,
	0, 0, 194, 657, 658, 630, 195, 196, 197, 198,
	0, 0, 199, 200, 201, 649, 202, 0, 203, 204,
	205, 259, 686, 0, 0, 206, 0, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 635, 625, 626, 623,
	624, 615, 0, 0, 0, 1250, 1251, 0, 0, 0,
	0, 1252, 83, 84, 1253, 85, 0, 0, 0, 614,
	651, 618, 0, 0, 0, 86, 87, 88, 0, 666,
	214, 667, 89, 668, 669, 0, 90, 218, 219, 91,
	621, 650, 670, 671, 222, 0, 662, 0, 643, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	290, 99, 1981, 0, 644, 646, 0, 645, 647, 101,
	102, 103, 104, 672, 105, 673, 674, 0, 106, 0,
	107, 0, 0, 0, 665, 109, 0, 110, 0, 0,
	0, 609, 111, 112, 652, 653, 631, 0, 0, 113,
	114, 675, 0, 115, 0, 116, 0, 0, 291, 0,
	117, 663, 0, 232, 0, 118, 119, 120, 121, 659,
	661, 0, 0, 124, 0, 122, 0, 292, 123, 676,
	677, 678, 679, 0, 642, 0, 0, 125, 295, 126,
	127, 0, 129, 128, 0, 664, 296, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	298, 138, 139, 142, 140, 604, 141, 632, 660, 143,
	680, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 299, 148, 300, 654, 149, 150, 151, 152, 0,
	655, 153, 246, 154, 0, 155, 156, 157, 681, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 301, 171, 172, 610, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 648, 180,
	181, 0, 182, 682, 251, 183, 0, 189, 184, 185,
	186, 188, 683, 187, 656, 0, 190, 0, 191, 192,
	193, 0, 254, 684, 685, 0, 0, 194, 657, 658,
	630, 195, 196, 1980, 198, 0, 0, 199, 200, 201,
	649, 202, 0, 203, 204, 205, 259, 686, 0, 0,
	206, 0, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 635, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 602, 0, 0, 0, 0, 603, 83, 84, 611,
	85, 0, 0, 0, 614, 651, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 650, 220, 221, 222,
	0, 662, 0, 643, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 290, 99, 100, 0, 644,
	646, 0, 645, 647, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 652,
	653, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 291, 0, 117, 663, 0, 232, 0,
	118, 119, 120, 121, 659, 661, 293, 0, 124, 0,
	122, 0, 292, 123, 235, 236, 237, 238, 0, 239,
	0, 294, 125, 295, 126, 127, 0, 129, 128, 0,
	664, 296, 130, 297, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 298, 138, 139, 142, 140,
	0, 141, 0, 660, 143, 242, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 299, 148, 300, 654,
	149, 150, 151, 152, 0, 655, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 301,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 648, 180, 181, 302, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 656,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 657, 658, 0, 195, 196, 197, 198,
	512, 0, 199, 200, 201, 649, 202, 0, 203, 204,
	205, 259, 260, 0, 0, 206, 83, 84, 0, 85,
	207, 208, 209, 210, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 1729, 0, 220, 221, 222, 0,
	223, 0, 289, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 290, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	0, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 291, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 233, 234, 293, 0, 124, 0, 122,
	0, 292, 123, 235, 236, 237, 238, 0, 239, 0,
	294, 125, 295, 126, 127, 0, 129, 128, 0, 240,
	296, 130, 297, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 298, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 299, 148, 300, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 301, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 67, 249,
	178, 179, 0, 180, 181, 302, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 69, 191, 192, 193, 0, 254, 255, 256, 0,
	0, 194, 257, 258, 0, 195, 196, 197, 198, 0,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	516, 260, 0, 0, 206, 0, 0, 0, 65, 207,
	208, 209, 210, 0, 66, 512, 827, 0, 828, 823,
	818, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 84, 64, 85, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 86, 87, 88, 212, 213, 214,
	215, 89, 216, 217, 0, 90, 218, 219, 91, 0,
	0, 220, 221, 222, 0, 223, 0, 289, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 290,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 224, 105, 225, 226, 831, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	227, 111, 112, 228, 229, 820, 0, 0, 113, 114,
	230, 0, 115, 0, 116, 0, 0, 291, 0, 117,
	231, 0, 232, 0, 118, 119, 120, 121, 233, 234,
	293, 0, 124, 0, 122, 0, 292, 123, 235, 236,
	237, 238, 0, 239, 0, 294, 125, 295, 126, 127,
	0, 129, 128, 0, 240, 296, 130, 297, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 298,
	138, 139, 142, 140, 0, 141, 0, 241, 143, 242,
	144, 145, 0, 146, 821, 0, 0, 0, 147, 243,
	299, 148, 300, 244, 149, 150, 151, 152, 0, 245,
	153, 246, 154, 0, 155, 156, 157, 247, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 301, 171, 172, 248, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 0, 180, 181,
	302, 182, 250, 251, 183, 0, 189, 184, 185, 186,
	188, 252, 187, 253, 0, 190, 0, 191, 192, 193,
	0, 254, 255, 256, 0, 0, 194, 257, 258, 819,
	195, 196, 197, 198, 0, 0, 199, 200, 201, 0,
	202, 0, 203, 204, 205, 259, 260, 512, 827, 206,
	828, 823, 818, 0, 207, 208, 209, 210, 0, 0,
	0, 0, 0, 83, 84, 0, 85, 0, 0, 829,
	824, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 0, 220, 221, 222, 0, 223, 0, 289,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 290, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 814, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 820, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 291,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	233, 234, 293, 0, 124, 0, 122, 0, 292, 123,
	235, 236, 237, 238, 0, 239, 0, 294, 125, 295,
	126, 127, 0, 129, 128, 0, 240, 296, 130, 297,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 298, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 821, 0, 0, 0,
	147, 243, 299, 148, 300, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 0, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 301, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 302, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 254, 255, 256, 0, 0, 194, 257,
	258, 819, 195, 196, 197, 198, 0, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 512,
	827, 206, 828, 823, 818, 0, 207, 208, 209, 210,
	0, 0, 0, 0, 0, 83, 84, 0, 85, 0,
	0, 829, 824, 211, 0, 0, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 0, 220, 221, 222, 0, 223,
	0, 289, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 290, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 820,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 291, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 233, 234, 293, 0, 124, 0, 122, 0,
	292, 123, 235, 236, 237, 238, 0, 239, 0, 294,
	125, 295, 126, 127, 0, 129, 128, 0, 240, 296,
	130, 297, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 298, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 821, 0,
	0, 0, 147, 243, 299, 148, 300, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 154, 0, 155, 156,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 301, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 0, 180, 181, 302, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	0, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 819, 195, 196, 197, 198, 0, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 80, 0, 206, 0, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 0, 0, 83, 84, 0,
	85, 0, 0, 829, 824, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 233, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 472, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 67,
	249, 178, 179, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 69, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	0, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 516, 260, 0, 0, 206, 80, 0, 0, 65,
	207, 208, 209, 210, 0, 66, 0, 0, 0, 0,
	0, 0, 83, 84, 0, 85, 0, 0, 0, 0,
	211, 0, 0, 0, 1140, 86, 87, 88, 212, 213,
	214, 215, 89, 216, 217, 0, 90, 218, 219, 91,
	0, 0, 220, 221, 222, 0, 223, 0, 0, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 224, 105, 225, 226, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 227, 111, 112, 228, 229, 0, 0, 0, 113,
	114, 230, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 231, 0, 232, 0, 118, 119, 120, 121, 233,
	234, 0, 0, 124, 0, 122, 0, 0, 123, 235,
	236, 237, 238, 0, 239, 0, 0, 125, 0, 126,
	127, 0, 129, 128, 0, 240, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 241, 143,
	242, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 0, 148, 0, 244, 149, 150, 151, 152, 0,
	245, 153, 246, 154, 0, 155, 156, 157, 247, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 0, 171, 172, 248, 173, 0,
	174, 175, 176, 177, 67, 249, 178, 179, 0, 180,
	181, 0, 182, 250, 251, 183, 0, 189, 184, 185,
	186, 188, 252, 187, 253, 0, 190, 69, 191, 192,
	193, 0, 254, 255, 256, 0, 0, 194, 257, 258,
	0, 195, 196, 197, 198, 0, 0, 199, 200, 201,
	0, 202, 0, 203, 204, 205, 516, 260, 0, 0,
	206, 80, 0, 0, 65, 207, 208, 209, 210, 0,
	66, 0, 0, 0, 0, 0, 0, 83, 84, 0,
	85, 0, 0, 0, 0, 211, 0, 0, 0, 64,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 233, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 472, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	80, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 0, 206, 83, 84, 0, 85,
	207, 208, 209, 210, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 1140, 0, 220, 221, 222, 0,
	223, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	0, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 233, 234, 0, 0, 124, 0, 122,
	0, 0, 123, 235, 236, 237, 238, 0, 239, 0,
	0, 125, 0, 126, 127, 0, 129, 128, 0, 240,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 0, 148, 0, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 0, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 0, 180, 181, 0, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 254, 255, 256, 0,
	0, 194, 257, 258, 0, 195, 196, 197, 198, 80,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 260, 0, 0, 206, 83, 84, 0, 85, 207,
	208, 209, 210, 211, 0, 0, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 721, 220, 221, 222, 0, 223,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 0,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 233, 234, 0, 0, 124, 0, 122, 0,
	0, 123, 235, 236, 237, 238, 0, 239, 0, 0,
	125, 0, 126, 127, 0, 129, 128, 0, 240, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 0, 148, 0, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 154, 0, 155, 156,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 0, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 0, 180, 181, 0, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	0, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 0, 195, 196, 197, 198, 80, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 0, 0, 206, 83, 84, 0, 85, 207, 208,
	209, 210, 211, 0, 0, 0, 0, 86, 87, 88,
	212, 213, 214, 215, 89, 216, 217, 0, 90, 218,
	219, 91, 1042, 0, 220, 221, 222, 0, 223, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 224, 105, 225, 226, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 0, 0,
	0, 113, 114, 230, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 233, 234, 0, 0, 124, 0, 122, 0, 0,
	123, 235, 236, 237, 238, 0, 239, 0, 0, 125,
	0, 126, 127, 0, 129, 128, 0, 240, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	241, 143, 242, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 0, 148, 0, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 154, 0, 155, 156, 157,
	247, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 0, 171, 172, 248,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	0, 180, 181, 0, 182, 250, 251, 183, 0, 189,
	184, 185, 186, 188, 252, 187, 253, 0, 190, 0,
	191, 192, 193, 0, 254, 255, 256, 0, 0, 194,
	257, 258, 0, 195, 196, 197, 198, 80, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 259, 260,
	0, 0, 206, 83, 84, 0, 85, 207, 208, 209,
	210, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 1625, 0, 220, 221, 222, 0, 223, 0, 0,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 0, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	233, 234, 0, 0, 124, 0, 122, 0, 0, 123,
	235, 236, 237, 238, 0, 239, 0, 0, 125, 0,
	126, 127, 0, 129, 128, 0, 240, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 0, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 0, 148, 0, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 0, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 0, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 0, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 254, 255, 256, 0, 0, 194, 257,
	258, 0, 195, 196, 197, 198, 0, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 0,
	0, 206, 0, 0, 0, 0, 207, 208, 209, 210,
	635, 625, 626, 623, 624, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 84, 0, 85,
	697, 0, 0, 0, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 666, 214, 667, 89, 668, 669, 0,
	90, 218, 219, 91, 0, 0, 670, 671, 222, 0,
	223, 0, 289, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 290, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 672, 105, 673,
	674, 0, 106, 0, 107, 0, 0, 0, 665, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	631, 0, 0, 113, 114, 675, 0, 115, 0, 116,
	0, 0, 291, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 233, 234, 293, 0, 124, 0, 122,
	0, 292, 123, 676, 677, 678, 679, 0, 642, 0,
	294, 125, 295, 126, 127, 0, 129, 128, 0, 240,
	296, 130, 297, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 298, 138, 139, 142, 140, 0,
	141, 632, 241, 143, 680, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 299, 148, 300, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 681, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 301, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 0, 180, 181, 302, 182, 682, 251, 183,
	0, 189, 184, 185, 186, 188, 683, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 254, 684, 685, 0,
	0, 194, 257, 258, 630, 195, 196, 197, 198, 80,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 686, 0, 0, 206, 83, 84, 0, 85, 207,
	208, 209, 210, 211, 0, 0, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 0, 220, 221, 222, 0, 223,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 798, 104, 224, 105, 225, 226,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 0,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 233, 234, 0, 0, 124, 0, 122, 0,
	0, 123, 235, 236, 237, 238, 0, 239, 0, 0,
	125, 0, 126, 127, 0, 129, 128, 0, 240, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 0, 148, 0, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 154, 0, 155, 156,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 0, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 0, 180, 181, 0, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	797, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 0, 195, 196, 197, 198, 0, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 0, 80, 206, 0, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 83, 84,
	0, 85, 0, 0, 0, 801, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 0, 220, 221,
	222, 0, 223, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 233, 234, 0, 0, 124,
	0, 122, 0, 0, 123, 235, 236, 237, 238, 0,
	239, 0, 0, 125, 0, 126, 127, 0, 129, 128,
	0, 240, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 0, 148, 0,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	0, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 0, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 0, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 512, 206, 0, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 83, 84, 0, 85, 0, 0, 0, 801, 211,
	0, 0, 0, 0, 86, 87, 88, 212, 213, 214,
	215, 89, 216, 217, 0, 90, 218, 219, 91, 0,
	0, 220, 221, 222, 0, 223, 0, 289, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 290,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 224, 105, 225, 226, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	227, 111, 112, 228, 229, 0, 0, 0, 113, 114,
	230, 0, 115, 0, 116, 0, 0, 291, 0, 117,
	231, 0, 232, 0, 118, 119, 120, 121, 233, 234,
	293, 0, 124, 0, 122, 0, 292, 123, 235, 236,
	237, 238, 0, 239, 0, 294, 125, 295, 126, 127,
	0, 129, 128, 0, 240, 296, 130, 297, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 298,
	138, 139, 142, 140, 0, 141, 0, 241, 143, 242,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	299, 148, 300, 244, 149, 150, 151, 152, 0, 245,
	153, 246, 154, 0, 155, 156, 157, 247, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 301, 171, 172, 248, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 0, 180, 181,
	302, 182, 250, 251, 183, 0, 189, 184, 185, 186,
	188, 252, 187, 253, 0, 190, 0, 191, 192, 193,
	0, 254, 255, 256, 0, 0, 194, 257, 258, 0,
	195, 196, 197, 198, 80, 0, 199, 200, 201, 0,
	202, 0, 203, 204, 205, 259, 260, 0, 0, 206,
	83, 84, 0, 85, 207, 208, 209, 210, 211, 0,
	0, 0, 0, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 0, 90, 218, 219, 91, 0, 0,
	220, 221, 222, 1006, 223, 0, 0, 0, 92, 93,
	94, 0, 95, 1004, 96, 97, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 224, 105, 225, 226, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 228, 229, 0, 1111, 0, 113, 114, 230,
	0, 115, 0, 116, 1009, 0, 0, 0, 117, 231,
	0, 232, 0, 118, 119, 120, 121, 233, 234, 0,
	0, 124, 1109, 122, 0, 0, 123, 235, 236, 237,
	238, 0, 239, 0, 0, 125, 0, 126, 127, 0,
	129, 128, 0, 240, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 241, 143, 242, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 0,
	148, 0, 244, 149, 150, 151, 152, 0, 245, 153,
	246, 154, 1008, 155, 156, 157, 247, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 0, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 0, 180, 181, 0,
	182, 250, 251, 183, 0, 189, 184, 185, 186, 188,
	252, 187, 253, 0, 190, 0, 191, 192, 193, 0,
	254, 255, 256, 0, 0, 194, 257, 258, 0, 195,
	196, 197, 198, 80, 1110, 199, 200, 201, 0, 202,
	0, 203, 204, 205, 259, 260, 0, 0, 206, 83,
	84, 0, 85, 207, 208, 209, 210, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 0, 220,
	221, 222, 1006, 223, 0, 0, 1001, 92, 93, 94,
	0, 95, 1004, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 1009, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 1000, 234, 0, 0,
	124, 0, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 1008, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 80, 1007, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 83, 84,
	0, 85, 207, 208, 209, 210, 211, 0, 1592, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 0, 220, 221,
	222, 0, 223, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 233, 234, 0, 0, 124,
	0, 122, 0, 0, 123, 235, 236, 237, 238, 0,
	239, 0, 0, 125, 0, 126, 127, 0, 129, 128,
	0, 240, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 0, 148, 0,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	0, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 0, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 80, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 0, 206, 83, 84, 0,
	85, 207, 208, 209, 210, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 233, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 472, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	80, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 0, 206, 83, 84, 0, 85,
	207, 208, 209, 210, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 0, 0, 220, 221, 222, 0,
	223, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	0, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 748, 234, 0, 0, 124, 0, 122,
	0, 0, 123, 235, 236, 237, 238, 0, 239, 0,
	0, 125, 0, 126, 127, 0, 129, 128, 0, 240,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 0,
	472, 0, 0, 147, 243, 0, 148, 0, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 0, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 0, 180, 181, 0, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 254, 255, 256, 0,
	0, 194, 257, 258, 0, 195, 196, 197, 198, 80,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 260, 0, 0, 206, 83, 84, 524, 85, 207,
	208, 209, 210, 211, 0, 0, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 0, 220, 221, 222, 0, 223,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 0,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 233, 234, 0, 0, 124, 0, 122, 0,
	0, 123, 235, 236, 237, 238, 0, 239, 0, 0,
	125, 0, 126, 127, 0, 129, 128, 0, 240, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 0, 148, 0, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 154, 0, 155, 156,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 0, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 0, 180, 181, 0, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	0, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 0, 195, 196, 197, 198, 80, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 0, 0, 206, 83, 84, 0, 85, 207, 208,
	209, 210, 211, 0, 0, 0, 0, 86, 87, 88,
	212, 213, 214, 215, 89, 216, 217, 0, 90, 218,
	219, 91, 0, 0, 220, 221, 222, 0, 223, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 224, 105, 225, 226, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 0, 0,
	0, 113, 114, 230, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 484, 234, 0, 0, 124, 0, 122, 0, 0,
	123, 235, 236, 237, 238, 0, 239, 0, 0, 125,
	0, 126, 127, 0, 129, 128, 0, 240, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	241, 143, 242, 144, 145, 0, 146, 0, 472, 0,
	0, 147, 243, 0, 148, 0, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 154, 0, 155, 156, 157,
	247, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 0, 171, 172, 248,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	0, 180, 181, 0, 182, 250, 251, 183, 0, 189,
	184, 185, 186, 188, 252, 187, 253, 0, 190, 0,
	191, 192, 193, 0, 254, 255, 256, 0, 0, 194,
	257, 258, 0, 195, 196, 197, 198, 80, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 259, 260,
	0, 0, 206, 83, 84, 0, 85, 207, 208, 209,
	210, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 0, 220, 221, 222, 0, 223, 0, 0,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 0, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	477, 234, 0, 0, 124, 0, 122, 0, 0, 123,
	235, 236, 237, 238, 0, 239, 0, 0, 125, 0,
	126, 127, 0, 129, 128, 0, 240, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 0, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 0, 472, 0, 0,
	147, 243, 0, 148, 0, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 0, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 0, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 0, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 254, 255, 256, 0, 0, 194, 257,
	258, 0, 195, 196, 197, 198, 80, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 0,
	0, 206, 83, 84, 387, 85, 207, 208, 209, 210,
	211, 0, 0, 0, 0, 86, 87, 88, 212, 213,
	214, 215, 89, 216, 217, 0, 90, 218, 219, 91,
	0, 0, 220, 221, 222, 0, 223, 0, 0, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 224, 105, 225, 226, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 227, 111, 112, 228, 229, 0, 0, 0, 113,
	114, 230, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 231, 0, 232, 0, 118, 119, 120, 121, 233,
	234, 0, 0, 124, 0, 122, 0, 0, 123, 235,
	236, 237, 238, 0, 239, 0, 0, 125, 0, 126,
	127, 0, 129, 128, 0, 240, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 241, 143,
	242, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 0, 148, 0, 244, 149, 150, 151, 152, 0,
	245, 153, 246, 386, 0, 155, 156, 157, 247, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 0, 171, 172, 248, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 0, 180,
	181, 0, 182, 250, 251, 183, 0, 189, 184, 185,
	186, 188, 252, 187, 253, 0, 190, 0, 191, 192,
	193, 0, 254, 255, 256, 0, 0, 194, 257, 258,
	0, 195, 196, 197, 198, 80, 0, 199, 200, 201,
	0, 202, 0, 203, 204, 205, 259, 260, 0, 0,
	206, 83, 84, 0, 85, 207, 208, 209, 210, 211,
	0, 0, 0, 0, 86, 87, 88, 212, 213, 214,
	215, 89, 216, 217, 0, 90, 218, 219, 91, 0,
	0, 220, 221, 222, 0, 223, 0, 0, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 224, 105, 225, 226, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	227, 111, 112, 228, 229, 0, 0, 0, 113, 114,
	230, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	231, 0, 232, 0, 118, 119, 120, 121, 233, 234,
	0, 0, 124, 0, 122, 0, 0, 123, 235, 236,
	237, 238, 0, 239, 0, 0, 125, 0, 126, 127,
	0, 129, 128, 0, 240, 0, 130, 0, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 0,
	138, 139, 142, 140, 0, 141, 0, 241, 143, 242,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	0, 148, 0, 244, 149, 150, 151, 152, 0, 245,
	153, 246, 154, 0, 155, 156, 157, 247, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 0, 171, 172, 248, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 0, 180, 181,
	0, 182, 250, 251, 183, 0, 189, 184, 185, 186,
	188, 252, 187, 253, 0, 190, 0, 191, 192, 193,
	0, 254, 255, 256, 0, 0, 194, 257, 258, 0,
	195, 196, 197, 198, 80, 0, 199, 200, 201, 0,
	202, 0, 203, 204, 205, 259, 260, 0, 0, 206,
	83, 84, 0, 85, 207, 208, 209, 210, 211, 0,
	0, 0, 0, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 0, 90, 218, 219, 91, 0, 0,
	220, 221, 222, 0, 223, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 224, 105, 225, 226, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 228, 229, 0, 0, 0, 113, 114, 230,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 231,
	0, 232, 0, 118, 119, 120, 121, 1300, 234, 0,
	0, 124, 0, 122, 0, 0, 123, 235, 236, 237,
	238, 0, 239, 0, 0, 125, 0, 126, 127, 0,
	129, 128, 0, 240, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 241, 143, 242, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 0,
	148, 0, 244, 149, 150, 151, 152, 0, 245, 153,
	246, 154, 0, 155, 156, 157, 247, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 0, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 0, 180, 181, 0,
	182, 250, 251, 183, 0, 189, 184, 185, 186, 188,
	252, 187, 253, 0, 190, 0, 191, 192, 193, 0,
	254, 255, 256, 0, 0, 194, 257, 258, 0, 195,
	196, 197, 198, 80, 0, 199, 200, 201, 0, 202,
	0, 203, 204, 205, 259, 260, 0, 0, 206, 83,
	84, 0, 85, 207, 208, 209, 210, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 0, 220,
	221, 222, 0, 223, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 1298, 234, 0, 0,
	124, 0, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 80, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 83, 84,
	0, 85, 207, 208, 209, 210, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 0, 220, 221,
	222, 0, 223, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 1287, 234, 0, 0, 124,
	0, 122, 0, 0, 123, 235, 236, 237, 238, 0,
	239, 0, 0, 125, 0, 126, 127, 0, 129, 128,
	0, 240, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 0, 148, 0,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	0, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 0, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 80, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 0, 206, 83, 84, 0,
	85, 207, 208, 209, 210, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 868, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	80, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 0, 206, 83, 84, 0, 85,
	207, 208, 209, 210, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 0, 0, 220, 221, 222, 0,
	223, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	0, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 233, 234, 0, 0, 124, 0, 122,
	0, 0, 123, 235, 236, 237, 238, 0, 239, 0,
	0, 125, 0, 126, 127, 0, 129, 128, 0, 240,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 0, 148, 0, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 0, 171,
	172, 248, 173, 0, 174, 401, 176, 177, 0, 249,
	178, 179, 0, 180, 181, 0, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 254, 255, 256, 0,
	0, 194, 257, 258, 0, 195, 196, 197, 198, 80,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 260, 0, 0, 206, 83, 84, 0, 85, 207,
	208, 209, 210, 211, 0, 733, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 0, 220, 221, 222, 0, 223,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 0,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 233, 234, 0, 0, 124, 0, 122, 0,
	0, 123, 235, 236, 237, 238, 0, 239, 0, 0,
	125, 0, 126, 127, 0, 129, 128, 0, 240, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 0, 148, 0, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 154, 0, 155, 156,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 0, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 0, 0, 181, 0, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	0, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 0, 195, 196, 197, 198, 80, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 0, 0, 206, 83, 84, 0, 85, 207, 208,
	209, 210, 211, 0, 0, 0, 0, 86, 87, 88,
	212, 213, 214, 215, 89, 216, 217, 0, 90, 218,
	219, 91, 0, 0, 220, 221, 222, 0, 223, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 224, 105, 225, 226, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 0, 0,
	0, 113, 114, 230, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 576, 234, 0, 0, 124, 0, 122, 0, 0,
	123, 235, 236, 237, 238, 0, 239, 0, 0, 125,
	0, 126, 127, 0, 129, 128, 0, 240, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	241, 143, 242, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 0, 148, 0, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 154, 0, 155, 156, 157,
	247, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 0, 171, 172, 248,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	0, 180, 181, 0, 182, 250, 251, 183, 0, 189,
	184, 185, 186, 188, 252, 187, 253, 0, 190, 0,
	191, 192, 193, 0, 254, 255, 256, 0, 0, 194,
	257, 258, 0, 195, 196, 197, 198, 80, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 259, 260,
	0, 0, 206, 83, 84, 0, 85, 207, 208, 209,
	210, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 0, 220, 221, 222, 0, 223, 0, 0,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 0, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	571, 234, 0, 0, 124, 0, 122, 0, 0, 123,
	235, 236, 237, 238, 0, 239, 0, 0, 125, 0,
	126, 127, 0, 129, 128, 0, 240, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 0, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 0, 148, 0, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 0, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 0, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 0, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 254, 255, 256, 0, 0, 194, 257,
	258, 0, 195, 196, 197, 198, 80, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 0,
	0, 206, 83, 84, 0, 85, 207, 208, 209, 210,
	211, 0, 0, 0, 0, 86, 87, 88, 212, 213,
	214, 215, 89, 216, 217, 0, 90, 218, 219, 91,
	0, 0, 220, 221, 530, 0, 223, 0, 0, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 224, 105, 225, 226, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 227, 111, 112, 228, 229, 0, 0, 0, 113,
	114, 230, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 231, 0, 232, 0, 118, 119, 120, 121, 233,
	234, 0, 0, 124, 0, 122, 0, 0, 123, 235,
	236, 237, 238, 0, 239, 0, 0, 125, 0, 126,
	127, 0, 129, 128, 0, 240, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 412,
	0, 138, 139, 142, 140, 0, 141, 0, 241, 143,
	242, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 0, 148, 0, 244, 149, 150, 151, 152, 0,
	245, 153, 246, 154, 0, 155, 156, 157, 247, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 0, 171, 172, 248, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 0, 180,
	181, 0, 182, 250, 251, 183, 0, 189, 184, 185,
	186, 188, 252, 187, 253, 0, 190, 0, 191, 192,
	193, 0, 411, 255, 256, 0, 0, 407, 257, 258,
	0, 195, 196, 197, 198, 80, 0, 199, 200, 201,
	0, 202, 0, 203, 204, 205, 259, 260, 0, 0,
	206, 83, 84, 0, 85, 207, 208, 209, 210, 211,
	0, 0, 0, 0, 86, 87, 88, 212, 213, 214,
	215, 89, 216, 217, 0, 90, 218, 219, 91, 0,
	0, 220, 221, 222, 0, 223, 0, 0, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 224, 105, 225, 226, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	227, 111, 112, 228, 229, 0, 0, 0, 113, 114,
	230, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	231, 0, 232, 0, 118, 119, 120, 121, 233, 234,
	0, 0, 124, 0, 122, 0, 0, 123, 235, 236,
	237, 238, 0, 239, 0, 0, 125, 0, 126, 127,
	0, 129, 128, 0, 240, 0, 130, 0, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 412, 0,
	138, 139, 142, 140, 0, 141, 0, 241, 143, 242,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	0, 148, 0, 244, 149, 150, 151, 152, 0, 245,
	153, 246, 154, 0, 155, 156, 157, 247, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 0, 171, 172, 248, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 0, 180, 181,
	0, 182, 250, 251, 183, 0, 189, 184, 185, 186,
	188, 252, 187, 253, 0, 190, 0, 191, 192, 193,
	0, 411, 255, 256, 0, 0, 407, 257, 258, 0,
	195, 196, 197, 198, 80, 0, 199, 200, 201, 0,
	202, 0, 203, 204, 205, 259, 260, 0, 0, 206,
	83, 84, 0, 85, 207, 208, 209, 210, 211, 0,
	0, 0, 0, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 0, 90, 218, 219, 91, 0, 0,
	220, 221, 222, 0, 223, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 224, 105, 225, 226, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 228, 229, 0, 0, 0, 113, 114, 230,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 231,
	0, 232, 0, 118, 119, 120, 121, 508, 234, 0,
	0, 124, 0, 122, 0, 0, 123, 235, 236, 237,
	238, 0, 239, 0, 0, 125, 0, 126, 127, 0,
	129, 128, 0, 240, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 241, 143, 242, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 0,
	148, 0, 244, 149, 150, 151, 152, 0, 245, 153,
	246, 154, 0, 155, 156, 157, 247, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 0, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 0, 180, 181, 0,
	182, 250, 251, 183, 0, 189, 184, 185, 186, 188,
	252, 187, 253, 0, 190, 0, 191, 192, 193, 0,
	254, 255, 256, 0, 0, 194, 257, 258, 0, 195,
	196, 197, 198, 80, 0, 199, 200, 201, 0, 202,
	0, 203, 204, 205, 259, 260, 0, 0, 206, 83,
	84, 0, 85, 207, 208, 209, 210, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 0, 220,
	221, 222, 0, 223, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 505, 234, 0, 0,
	124, 0, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 80, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 83, 84,
	0, 85, 207, 208, 209, 210, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 0, 220, 221,
	222, 0, 223, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 502, 234, 0, 0, 124,
	0, 122, 0, 0, 123, 235, 236, 237, 238, 0,
	239, 0, 0, 125, 0, 126, 127, 0, 129, 128,
	0, 240, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 0, 148, 0,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	0, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 0, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 80, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 0, 206, 83, 84, 0,
	85, 207, 208, 209, 210, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 500, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	80, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 0, 206, 83, 84, 0, 85,
	207, 208, 209, 210, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 0, 0, 220, 221, 222, 0,
	223, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	0, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 480, 234, 0, 0, 124, 0, 122,
	0, 0, 123, 235, 236, 237, 238, 0, 239, 0,
	0, 125, 0, 126, 127, 0, 129, 128, 0, 240,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 0, 148, 0, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 0, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 0, 180, 181, 0, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 254, 255, 256, 0,
	0, 194, 257, 258, 0, 195, 196, 197, 198, 80,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 260, 0, 0, 206, 83, 84, 0, 85, 207,
	208, 209, 210, 211, 0, 0, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 0, 220, 221, 222, 0, 223,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 0,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 233, 234, 0, 0, 124, 0, 122, 0,
	0, 123, 235, 236, 237, 238, 0, 239, 0, 0,
	125, 0, 126, 127, 0, 129, 128, 0, 240, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 0, 148, 0, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 154, 0, 155, 156,
	157, 247, 461, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 0, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 0, 180, 181, 0, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	0, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 0, 195, 196, 197, 198, 80, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 0, 0, 206, 83, 84, 0, 85, 207, 208,
	209, 210, 211, 0, 0, 0, 0, 86, 87, 88,
	212, 213, 214, 215, 89, 216, 217, 0, 90, 218,
	219, 91, 0, 0, 220, 221, 222, 0, 223, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 224, 105, 225, 226, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 0, 0,
	0, 113, 114, 230, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 233, 234, 0, 0, 124, 0, 122, 0, 0,
	123, 235, 236, 237, 238, 0, 239, 0, 0, 125,
	0, 126, 127, 0, 129, 128, 0, 240, 0, 130,
	0, 0, 404, 0, 0, 132, 0, 133, 134, 135,
	136, 412, 0, 138, 139, 142, 140, 0, 141, 0,
	241, 143, 242, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 0, 148, 0, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 154, 0, 155, 156, 157,
	247, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 0, 171, 172, 406,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 405,
	0, 180, 181, 0, 182, 250, 251, 183, 0, 189,
	184, 185, 186, 188, 252, 187, 253, 0, 190, 0,
	191, 192, 193, 0, 411, 255, 256, 0, 0, 407,
	257, 258, 0, 195, 196, 197, 198, 80, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 259, 260,
	0, 0, 206, 83, 84, 0, 85, 207, 208, 209,
	210, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 0, 220, 221, 222, 0, 223, 0, 0,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 0, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	233, 234, 0, 0, 124, 0, 122, 0, 0, 123,
	235, 236, 237, 238, 0, 239, 0, 0, 125, 0,
	126, 127, 0, 129, 128, 0, 240, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 0, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 0, 148, 0, 244, 149, 150, 0, 152,
	0, 245, 153, 246, 154, 0, 155, 0, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 0, 171, 172, 248, 0,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 0, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 254, 255, 256, 0, 0, 194, 257,
	258, 0, 195, 196, 197, 198, 0, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 0,
	0, 206, 0, 0, 0, 0, 207, 208, 209, 210,
	893, 894, 0, 913, 914, 915, 923, 924, 925, 0,
	0, 0, 0, 0, 0, 0, 916, 0, 0, 0,
	0, 0, 0, 896, 0, 0, 927, 0, 0, 0,
	893, 894, 0, 913, 914, 915, 923, 924, 925, 0,
	0, 0, 0, 0, 0, 895, 916, 0, 0, 0,
	0, 910, 0, 896, 0, 0, 927, 0, 0, 0,
	893, 894, 0, 913, 914, 915, 923, 924, 925, 0,
	0, 0, 0, 0, 0, 895, 916, 0, 0, 0,
	0, 910, 0, 896, 0, 0, 927, 0, 0, 0,
	893, 894, 0, 913, 914, 915, 923, 924, 925, 0,
	901, 0, 0, 0, 0, 895, 916, 0, 0, 0,
	0, 910, 0, 896, 0, 0, 927, 0, 0, 920,
	928, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 0, 926, 895, 0, 0, 0, 0,
	0, 910, 0, 0, 0, 0, 918, 0, 0, 920,
	928, 0, 911, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 0, 926, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 917, 918, 0, 0, 920,
	928, 0, 911, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 0, 926, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 917, 918, 0, 0, 920,
	928, 0, 911, 0, 0, 0, 0, 912, 0, 0,
	0, 0, 0, 0, 926, 0, 0, 0, 0, 921,
	0, 0, 0, 0, 0, 917, 918, 0, 0, 0,
	0, 0, 911, 0, 0, 0, 0, 912, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 921,
	0, 0, 0, 0, 0, 917, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 912, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 919, 0, 921,
	907, 908, 909, 0, 906, 903, 904, 905, 897, 898,
	899, 900, 902, 0, 922, 0, 0, 912, 0, 0,
	0, 1492, 0, 0, 0, 0, 0, 919, 0, 921,
	907, 908, 909, 0, 906, 903, 904, 905, 897, 898,
	899, 900, 902, 0, 922, 0, 0, 0, 0, 0,
	0, 1491, 0, 0, 0, 0, 0, 919, 0, 0,
	907, 908, 909, 0, 906, 903, 904, 905, 897, 898,
	899, 900, 902, 0, 922, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 919, 0, 0,
	907, 908, 909, 0, 906, 903, 904, 905, 897, 898,
	899, 900, 902, 0, 922, 0, 893, 894, 1926, 913,
	914, 915, 923, 924, 925, 0, 0, 0, 0, 0,
	0, 0, 916, 0, 0, 0, 0, 0, 0, 896,
	893, 894, 927, 913, 914, 915, 923, 924, 925, 0,
	0, 0, 0, 0, 0, 0, 916, 0, 0, 0,
	0, 895, 0, 896, 0, 0, 927, 910, 0, 0,
	0, 0, 0, 0, 0, 0, 893, 894, 0, 913,
	914, 915, 923, 924, 925, 895, 0, 0, 0, 0,
	0, 910, 916, 0, 0, 0, 0, 0, 0, 896,
	0, 0, 927, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 0, 0, 0,
	0, 895, 0, 0, 0, 0, 0, 910, 0, 0,
	0, 0, 0, 0, 0, 920, 928, 0, 0, 0,
	901, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	926, 0, 0, 0, 0, 0, 0, 0, 0, 920,
	928, 0, 918, 0, 0, 0, 0, 0, 911, 0,
	0, 0, 0, 0, 926, 0, 901, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 918, 0, 0, 0,
	0, 917, 911, 0, 0, 920, 928, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	926, 0, 0, 0, 0, 917, 0, 0, 0, 0,
	0, 0, 918, 0, 0, 0, 0, 0, 911, 0,
	0, 0, 0, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 921, 0, 0, 0, 0,
	0, 917, 0, 0, 0, 0, 0, 912, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 921,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 919, 0, 921, 907, 908, 909, 0,
	906, 903, 904, 905, 897, 898, 899, 900, 902, 0,
	922, 0, 0, 0, 1901, 0, 0, 919, 0, 0,
	907, 908, 909, 0, 906, 903, 904, 905, 897, 898,
	899, 900, 902, 0, 922, 0, 0, 0, 1876, 0,
	0, 0, 1451, 1452, 0, 1469, 1470, 1471, 0, 0,
	0, 0, 0, 919, 0, 0, 907, 908, 909, 0,
	906, 903, 904, 905, 897, 898, 899, 900, 902, 0,
	922, 0, 893, 894, 1871, 913, 914, 915, 923, 924,
	925, 0, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 0, 0, 1466, 0, 896, 893, 894, 927, 913,
	914, 915, 923, 924, 925, 0, 0, 0, 0, 0,
	0, 0, 916, 0, 0, 0, 0, 895, 0, 896,
	0, 0, 927, 910, 0, 0, 0, 0, 0, 0,
	0, 0, 893, 894, 0, 913, 914, 915, 923, 924,
	925, 895, 1457, 0, 0, 0, 0, 910, 916, 0,
	0, 0, 0, 0, 0, 896, 0, 0, 927, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 0, 1472, 895, 0, 0,
	0, 0, 0, 910, 0, 0, 0, 0, 0, 0,
	0, 920, 928, 0, 1467, 0, 901, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 926, 0, 0, 0,
	0, 0, 0, 0, 0, 920, 928, 0, 918, 0,
	0, 0, 0, 0, 911, 0, 0, 0, 0, 0,
	926, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 918, 0, 0, 0, 0, 917, 911, 0,
	0, 920, 928, 0, 0, 0, 0, 0, 0, 1468,
	0, 0, 0, 0, 0, 0, 926, 0, 0, 0,
	0, 917, 0, 0, 0, 0, 0, 0, 918, 0,
	0, 0, 0, 0, 911, 0, 0, 0, 0, 912,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 921, 0, 0, 0, 0, 0, 917, 0, 0,
	0, 0, 0, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 921, 0, 0, 0, 0,
	0, 0, 1463, 1464, 1465, 0, 1462, 1459, 1460, 1461,
	1453, 1454, 1455, 1456, 1458, 0, 0, 0, 0, 912,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 919,
	0, 921, 907, 908, 909, 0, 906, 903, 904, 905,
	897, 898, 899, 900, 902, 0, 922, 0, 0, 0,
	1867, 0, 0, 919, 0, 0, 907, 908, 909, 0,
	906, 903, 904, 905, 897, 898, 899, 900, 902, 0,
	922, 0, 0, 0, 1797, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 919,
	0, 0, 907, 908, 909, 0, 906, 903, 904, 905,
	897, 898, 899, 900, 902, 0, 922, 0, 893, 894,
	1796, 913, 914, 915, 923, 924, 925, 0, 0, 0,
	0, 0, 0, 0, 916, 0, 0, 0, 0, 0,
	0, 896, 893, 894, 927, 913, 914, 915, 923, 924,
	925, 0, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 0, 0, 895, 0, 896, 0, 0, 927, 910,
	0, 0, 0, 0, 0, 0, 0, 0, 893, 894,
	0, 913, 914, 915, 923, 924, 925, 895, 0, 0,
	0, 0, 0, 910, 916, 0, 0, 0, 0, 0,
	0, 896, 0, 0, 927, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	0, 0, 0, 895, 0, 0, 0, 0, 0, 910,
	0, 0, 0, 0, 0, 0, 0, 920, 928, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 0, 0, 0, 0,
	0, 920, 928, 0, 918, 0, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 0, 926, 0, 901, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 918, 0,
	0, 0, 0, 917, 911, 0, 0, 920, 928, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 0, 917, 0, 0,
	0, 0, 0, 0, 918, 0, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 912, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 921, 0, 0,
	0, 0, 0, 917, 0, 0, 0, 0, 0, 912,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 921, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 912, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 919, 0, 921, 907, 908,
	909, 0, 906, 903, 904, 905, 897, 898, 899, 900,
	902, 0, 922, 0, 0, 0, 1694, 0, 0, 919,
	0, 0, 907, 908, 909, 0, 906, 903, 904, 905,
	897, 898, 899, 900, 902, 0, 922, 0, 0, 0,
	1628, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 919, 0, 0, 907, 908,
	909, 0, 906, 903, 904, 905, 897, 898, 899, 900,
	902, 0, 922, 0, 893, 894, 1612, 913, 914, 915,
	923, 924, 925, 0, 0, 0, 0, 0, 0, 0,
	916, 0, 0, 0, 0, 0, 0, 896, 893, 894,
	927, 913, 914, 915, 923, 924, 925, 0, 0, 0,
	0, 0, 0, 0, 916, 0, 0, 0, 0, 895,
	0, 896, 0, 0, 927, 910, 0, 0, 0, 0,
	0, 0, 0, 0, 893, 894, 0, 913, 914, 915,
	923, 924, 925, 895, 0, 0, 0, 0, 0, 910,
	916, 0, 0, 0, 0, 0, 0, 896, 0, 0,
	927, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 0, 0, 895,
	0, 0, 0, 0, 0, 910, 0, 0, 0, 0,
	0, 0, 0, 920, 928, 0, 0, 0, 901, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 926, 0,
	0, 0, 0, 0, 0, 0, 0, 920, 928, 0,
	918, 0, 0, 0, 0, 0, 911, 0, 0, 0,
	0, 0, 926, 0, 901, 2001, 0, 0, 0, 0,
	0, 0, 0, 0, 918, 0, 0, 0, 0, 917,
	911, 0, 0, 920, 928, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 926, 0,
	0, 0, 0, 917, 0, 0, 0, 0, 0, 0,
	918, 0, 0, 0, 0, 0, 911, 0, 0, 0,
	0, 912, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 0, 0, 0, 0, 0, 917,
	0, 0, 0, 0, 0, 912, 0, 0, 0, 0,
	0, 0, 0, 2000, 0, 0, 0, 921, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 912, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 919, 0, 921, 907, 908, 909, 0, 906, 903,
	904, 905, 897, 898, 899, 900, 902, 0, 922, 0,
	0, 0, 1208, 0, 0, 919, 0, 0, 907, 908,
	909, 0, 906, 903, 904, 905, 897, 898, 899, 900,
	902, 0, 922, 0, 1418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 919, 0, 0, 907, 908, 909, 0, 906, 903,
	904, 905, 897, 898, 899, 900, 902, 0, 922, 893,
	894, 0, 913, 914, 915, 923, 924, 925, 0, 0,
	0, 0, 0, 0, 0, 916, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 927, 0, 0, 0, 0,
	893, 894, 0, 913, 914, 915, 923, 924, 925, 0,
	0, 0, 0, 0, 895, 0, 916, 0, 0, 0,
	910, 1127, 0, 896, 0, 0, 927, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 895, 0, 0, 0, 0,
	0, 910, 0, 0, 930, 0, 0, 0, 0, 0,
	893, 894, 0, 913, 914, 915, 923, 924, 925, 901,
	0, 1483, 0, 0, 1482, 0, 916, 0, 0, 1128,
	929, 0, 0, 896, 0, 0, 927, 0, 920, 928,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 926, 0, 895, 0, 0, 0, 0,
	0, 910, 0, 0, 0, 918, 0, 0, 0, 920,
	928, 911, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 926, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 917, 0, 918, 0, 0, 0,
	0, 0, 911, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 917, 0, 0, 0, 920,
	928, 0, 0, 0, 0, 0, 912, 0, 0, 0,
	0, 0, 0, 0, 926, 0, 0, 0, 921, 0,
	0, 0, 0, 0, 0, 0, 918, 0, 0, 0,
	0, 0, 911, 0, 0, 0, 0, 912, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 921,
	0, 0, 0, 0, 0, 917, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 919, 0, 0, 907,
	908, 909, 0, 906, 903, 904, 905, 897, 898, 899,
	900, 902, 0, 922, 0, 0, 0, 912, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 919, 0, 921,
	907, 908, 909, 0, 906, 903, 904, 905, 897, 898,
	899, 900, 902, 0, 922, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 893, 894,
	0, 913, 914, 915, 923, 924, 925, 0, 0, 0,
	0, 0, 0, 0, 916, 0, 0, 0, 0, 0,
	0, 896, 0, 0, 927, 0, 0, 919, 0, 0,
	907, 908, 909, 0, 906, 903, 904, 905, 897, 898,
	899, 900, 902, 895, 922, 0, 0, 0, 0, 910,
	0, 0, 0, 0, 0, 0, 0, 893, 894, 0,
	913, 914, 915, 923, 924, 925, 0, 0, 0, 0,
	0, 0, 0, 916, 0, 0, 0, 0, 0, 0,
	896, 0, 0, 927, 0, 0, 0, 0, 893, 894,
	0, 913, 914, 915, 923, 924, 925, 0, 901, 0,
	0, 0, 895, 0, 916, 0, 0, 0, 910, 0,
	0, 896, 0, 0, 927, 0, 0, 920, 928, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 895, 0, 0, 0, 0, 0, 910,
	0, 0, 0, 0, 918, 0, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 0, 0, 901, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 917, 456, 0, 920, 928, 1451, 1452,
	0, 1469, 1470, 1471, 0, 0, 0, 0, 901, 0,
	0, 926, 0, 1489, 1604, 0, 0, 0, 0, 0,
	0, 0, 0, 918, 0, 0, 0, 920, 928, 911,
	0, 0, 0, 0, 0, 912, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 0, 921, 0, 1466,
	0, 0, 917, 0, 918, 0, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 917, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 912, 0, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 919, 921, 0, 907, 908,
	909, 0, 906, 903, 904, 905, 897, 898, 899, 900,
	902, 0, 922, 0, 0, 912, 1616, 0, 0, 0,
	0, 0, 1472, 0, 0, 893, 894, 921, 913, 914,
	915, 923, 924, 925, 0, 0, 0, 0, 0, 0,
	1467, 916, 0, 0, 0, 1484, 0, 0, 896, 0,
	0, 927, 0, 0, 919, 0, 0, 907, 908, 909,
	0, 906, 903, 904, 905, 897, 898, 899, 900, 902,
	895, 922, 0, 0, 0, 0, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 919, 0, 0, 907, 908,
	909, 0, 906, 903, 904, 905, 897, 898, 899, 900,
	902, 0, 922, 0, 0, 1468, 0, 0, 0, 0,
	0, 893, 894, 0, 913, 914, 915, 923, 924, 925,
	0, 0, 0, 0, 0, 901, 0, 916, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 927, 0, 0,
	0, 0, 0, 0, 920, 928, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 895, 0, 0, 926,
	0, 0, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 918, 0, 0, 0, 0, 0, 911, 1463, 1464,
	1465, 0, 1462, 1459, 1460, 1461, 1453, 1454, 1455, 1456,
	1458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	917, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 901, 0, 893, 894, 0, 913, 914, 915, 923,
	924, 925, 0, 0, 0, 0, 0, 0, 0, 916,
	920, 928, 0, 1442, 0, 0, 896, 0, 0, 927,
	0, 0, 912, 893, 894, 926, 913, 914, 915, 923,
	924, 925, 0, 0, 921, 0, 0, 918, 895, 916,
	0, 0, 0, 911, 910, 0, 896, 0, 0, 927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 917, 0, 895, 0,
	0, 0, 0, 0, 910, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 919, 901, 0, 907, 908, 909, 0, 906,
	903, 904, 905, 897, 898, 899, 900, 902, 912, 922,
	0, 0, 920, 928, 0, 0, 0, 0, 0, 0,
	921, 0, 0, 901, 0, 893, 894, 926, 913, 914,
	915, 923, 924, 925, 0, 0, 0, 0, 0, 918,
	0, 916, 920, 928, 0, 911, 0, 0, 896, 0,
	0, 927, 0, 0, 0, 0, 0, 926, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 917, 918,
	895, 0, 0, 0, 0, 911, 910, 0, 919, 0,
	0, 907, 908, 909, 0, 906, 903, 904, 905, 897,
	898, 899, 900, 902, 0, 922, 0, 0, 917, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	912, 893, 894, 0, 913, 914, 915, 923, 924, 925,
	0, 0, 921, 0, 0, 901, 0, 0, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 927, 0, 0,
	912, 0, 0, 0, 920, 928, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 0, 895, 0, 0, 926,
	0, 0, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 918, 0, 0, 0, 0, 0, 911, 0, 0,
	919, 0, 0, 907, 908, 909, 0, 906, 903, 904,
	905, 897, 898, 899, 900, 902, 0, 922, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	919, 901, 0, 907, 908, 909, 0, 906, 903, 904,
	905, 897, 898, 899, 900, 902, 0, 922, 0, 0,
	920, 928, 893, 894, 0, 913, 914, 915, 923, 924,
	925, 0, 912, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 921, 896, 0, 918, 927, 0,
	0, 0, 0, 911, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 895, 0, 0,
	0, 0, 0, 910, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 919, 0, 0, 907, 908, 909, 0, 906,
	903, 904, 905, 897, 898, 899, 900, 902, 912, 922,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	921, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 920, 928, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 918, 0,
	28, 0, 0, 0, 911, 0, 0, 0, 0, 0,
	0, 29, 53, 0, 0, 0, 0, 0, 919, 0,
	0, 907, 908, 909, 0, 906, 903, 904, 905, 897,
	898, 899, 900, 902, 0, 922, 55, 0, 0, 0,
	0, 0, 31, 0, 60, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 912,
	39, 0, 0, 56, 0, 0, 0, 43, 40, 0,
	0, 921, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 45, 0, 0, 0, 0, 0,
	41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 919,
	0, 0, 907, 908, 909, 0, 906, 903, 904, 905,
	897, 898, 899, 900, 902, 0, 922, 771, 765, 788,
	759, 779, 778, 0, 0, 761, 760, 0, 0, 0,
	790, 789, 0, 0, 0, 0, 0, 0, 42, 771,
	765, 788, 759, 779, 778, 0, 0, 761, 760, 0,
	0, 0, 790, 789, 58, 30, 0, 0, 46, 0,
	57, 784, 0, 776, 775, 0, 47, 0, 0, 67,
	0, 0, 774, 0, 50, 52, 0, 0, 0, 0,
	0, 0, 0, 784, 54, 776, 775, 0, 0, 773,
	0, 0, 69, 0, 774, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	0, 773, 0, 0, 0, 0, 0, 766, 767, 768,
	769, 70, 787, 0, 0, 0, 0, 0, 0, 65,
	0, 0, 0, 0, 0, 66, 0, 0, 0, 766,
	767, 768, 769, 0, 787, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 777, 0,
	0, 0, 1144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	777, 0, 0, 0, 0, 0, 772, 0, 0, 0,
	1147, 1145, 1146, 1149, 1148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 772, 0,
	0, 0, 0, 763, 0, 0, 0, 0, 0, 0,
	0, 770, 764, 0, 0, 0, 0, 0, 0, 0,
	792, 0, 0, 0, 0, 763, 0, 0, 762, 0,
	0, 785, 786, 770, 764, 0, 0, 0, 0, 0,
	0, 0, 792, 0, 0, 0, 0, 0, 0, 0,
	762, 0, 0, 785, 786, 791, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 791,
}
var sqlPact = [...]int{

	25557, -1000, 33, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 652, 1239,
	1228, 17241, -1000, -1000, -1000, -1000, -1000, -1000, 612, 584,
	841, 4370, 17241, 17241, 16972, 1349, 1349, 18586, -1000, -1000,
	21814, -1000, 2392, 419, 422, 419, 419, 415, 18586, 525,
	659, 131, -1000, 824, -2, 21545, 17241, 1292, 27, 15627,
	283, 25557, 16703, 21276, 17241, 16434, 17241, 17241, 338, 37,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1128, 1012, 1009, 15627, 21007, 20738, 20469, 20200, -1000,
	10636, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 643, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 288, 287, -1000, 16165, -1000, 816, -1000,
	26, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 809,
	-1000, 17241, -1000, -1000, 19931, 19662, 286, 706, -1000, -1000,
	509, 350, 1303, -1000, 42, -1000, -1000, -1000, 1124, -1000,
	808, 1120, 1117, 1114, 1113, 1112, 1110, 349, 855, 406,
	-1000, 706, -1000, 706, -1000, -1000, -1000, 478, 18586, -1000,
	15627, -1000, 19393, 17241, 17241, 1031, 19124, -1000, 824, -1000,
	-1000, -1000, 863, 1288, 1288, 1288, 1310, 128, 117, 131,
	18, 17241, -1000, 284, 18, 6165, 6165, -1000, -1000, 283,
	-1000, 312, 13423, -1000, 7393, -1000, 734, 1193, 375, 585,
	1190, -74, 620, 618, 1187, 476, 1104, 549, 12616, 37,
	-1000, -1000, -1000, 4077, 15627, 17241, 17241, 575, 18855, -1000,
	1184, 136, 1183, -1000, 133, 1180, -1000, 133, 1179, 8,
	-1000, -1000, -1000, -1000, -1000, -1000, 283, 15896, 17241, 1378,
	25722, -1000, 9187, -1000, -1000, 13985, 964, 13985, -1000, -1000,
	1368, -1000, 9187, -1000, 25, 24, 954, 944, 11213, 10931,
	1251, 1195, -1000, -1000, -1000, 39, 4370, 17241, 1136, 13985,
	17241, 17241, 17241, 17241, 17241, 17241, -1000, 951, -1000, -1000,
	17241, 17241, -1000, 23, 21, -1000, 18586, -1000, 145, -1000,
	281, 894, 356, 134, 18317, 356, 893, -1000, 863, -1000,
	845, 902, 8302, 9187, 131, -1000, -1000, 131, 131, 9187,
	-1000, -1000, 17241, 18, 1360, 17241, 149, -1000, 24320, -1000,
	-1000, 9187, 9187, 9187, 9187, 9187, 736, 304, -1000, 280,
	273, 5277, -1000, -1000, 1461, -1000, -1000, -1000, 123, -1000,
	-1000, 9187, 37, -1000, -1000, -1000, -1000, 269, 1489, 432,
	-1000, -1000, -1000, 357, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1135, 266, 257, -1000, -1000, -1000, -1000,
	255, 254, 253, 249, 247, 246, 243, 242, 241, 240,
	232, 229, 228, 227, 226, 705, -1000, 371, -1000, -1000,
	371, 371, -1000, 221, 221, 224, -1000, -1000, -1000, -1000,
	221, -1000, -1000, -1000, 344, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 225, 149, -1000, -1000, -1000, 17241, 7, -1000,
	25113, -1000, 9, 708, -1000, 15089, 1279, 1271, 1268, 15627,
	1330, 1325, 473, 17241, 17241, 470, 466, 15627, 1487, 1485,
	-1000, 1102, 6, -1000, -1000, -1000, -1000, 366, 99, 1356,
	99, 12885, -1000, 17241, 17241, -1000, 17241, -1000, -1000, 17241,
	-1000, 17241, 17241, -1000, 17241, 158, 14551, 698, 1178, 558,
	-2, 1, -1000, 1380, -1000, -1000, -1000, -1000, 119, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 224, 705, 221, 221, 221, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 344, -1000, -1000, 371, 371,
	371, -1000, -1000, 0, 25113, 464, 13, 14268, 17241, -1000,
	37, -1000, -1000, 1100, 417, -5, 696, 999, 886, -1000,
	-1000, -1000, -1000, 16, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1438, -1000, -1000, -1000, -1000, 1457,
	16, -1000, -1000, -1000, -1000, -1000, 1484, -1000, -1000, -1000,
	4370, -1000, -1000, -1000, 17241, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 696, 999, -1000, -1000, 15627,
	14820, 1353, 1176, 719, -1000, 1342, 17241, 801, 890, -1000,
	507, 1175, -1000, -1000, -1000, -1000, 25113, -1000, 25113, 593,
	1018, -1000, 1018, 15, -1000, 24260, -1000, 220, -11, -1000,
	366, 6165, 12347, 25700, 25722, 17241, 494, 9187, 9187, 9187,
	9187, 9187, 9187, 9187, 9187, 9187, 9187, 9187, 9187, 9187,
	9187, 9187, 9187, 9187, 9187, 9187, 9187, 9187, 9187, 865,
	9187, 454, 9187, 9187, 9187, 9187, 974, 764, 199, 4370,
	-1000, 607, 607, 607, 25301, 25301, 208, 304, -1000, 9187,
	-1000, 7983, 117, 23864, 14, -1000, -1000, -1000, 5867, 369,
	25113, 37, 4663, -1000, 561, 1456, 1152, 1072, 218, 116,
	113, 9187, 9187, 9482, 9482, 9187, 9777, 9187, 9187, 5572,
	9187, 9187, 9187, 9187, 9187, 9187, -1000, 217, -1000, -1000,
	-1000, -1000, 1450, -1000, -1000, 1442, -1000, 492, 491, 1434,
	366, 112, 7393, -1000, 698, 17241, 17241, 17241, -1000, -1000,
	882, 18048, 878, 25722, 17241, -1000, 215, 214, 980, 972,
	17241, 17241, 17779, 17510, 17241, 680, 213, 206, 17241, 616,
	-1000, 17241, 17241, 613, 1051, -1000, 541, 1099, 17241, 602,
	9187, 711, -1000, 12062, 376, 17241, 605, 108, -1000, -1000,
	-1000, 327, 17241, -1000, -1000, -1000, 136, -1000, 133, 133,
	-1000, -1000, 15627, -1000, -1000, -1000, -1000, -1000, -1000, 25722,
	299, 297, -1000, 1431, 450, -1000, 449, 448, 446, -1000,
	204, -1000, 9187, 17241, 14268, 13, 12, -1000, -1000, 17241,
	999, -1000, -1000, -1000, -1000, 619, -1000, 644, -1000, 11495,
	-1000, -1000, -1000, 561, -1000, -4, -1000, -1000, -1000, -1000,
	110, -15, 11, 25722, -1000, -1000, -1000, -1000, -1000, 17241,
	285, 17241, -2, 17241, -1000, 1479, -2, 17241, 1174, 1201,
	325, 17241, -1000, -1000, -1000, 9187, -1000, -1000, -1000, -2,
	17241, -1000, 1064, -1000, -12, 1130, -117, 115, 332, -1000,
	11777, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 345, 355, 355, 416, 416, 416, 416, 1988,
	1988, 2281, 2506, 2836, 2836, 2836, 2195, 268, 268, 2836,
	2836, 2836, 25301, 25215, 946, 9187, 9187, 445, 755, 199,
	946, 9187, 1424, 946, 946, 946, -1000, 1261, -1000, -1000,
	-1000, 1093, 197, 9777, 9777, -1000, -1000, -1000, 5277, -1000,
	-1000, 196, 9187, -1000, 23888, -156, -16, -1000, -1000, 9187,
	-17, -89, -1000, -1000, 577, -1000, 9187, -1000, 22, 9187,
	9187, 9187, 106, -1000, 104, 735, 195, 194, 9187, -1000,
	-1000, 25083, 22430, 103, 1091, -65, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 102, 101, 24981, -65, 100, 2782, -1000,
	9777, 9777, 9777, 5277, 193, 94, 24229, -65, 24895, 7688,
	7688, 7688, 93, 24668, 9187, -65, 22400, 22370, 3319, -21,
	-23, -27, 1420, -29, 91, 339, 336, 90, 1064, -1000,
	-1000, -1000, -1000, 444, 442, 1173, -1000, 875, -1000, 383,
	-1000, 767, 9187, 17241, 192, 191, 716, -1000, 1171, 879,
	1170, 879, -1000, 9, 687, 9187, 9187, -1000, 441, -1000,
	-1000, 433, -1000, 1090, -1000, 534, -1000, -1000, 6165, 25113,
	-1000, 603, 1262, -33, -1000, -1000, 6165, 366, 12885, 12347,
	7393, -44, -1000, -1000, -1000, 698, -1000, 500, 1417, 89,
	924, 794, 679, 582, 1413, 25113, -4, -1000, -4, -1000,
	-1000, -1000, -1000, -1000, -1000, 17241, 1033, -1000, 14820, 188,
	17241, 187, -1000, 185, -1000, -1000, 184, 17241, 942, 325,
	1493, -1000, 356, -1000, 86, -1000, 1059, 1302, -1000, 12347,
	853, 994, 986, 12347, 1155, 746, 746, 746, -1000, 332,
	3773, 9187, 15358, 753, 62, 83, 1130, 9187, 946, 946,
	9187, 9777, 9777, -1000, 946, -1000, -1000, -1000, -1000, 1089,
	183, 9187, 25722, 24758, 3474, -46, 7074, -9, -1000, 9187,
	-1000, 23558, -1000, -1000, 270, 1199, -1000, 9187, 24637, 82,
	6779, -1000, 24578, -7, -7, -1000, 1478, -1000, 13154, 367,
	761, 23522, 25700, 25722, -1000, 9187, -1000, -1000, 1086, 9187,
	-1000, 25700, 25722, 9777, 9777, 9777, 9777, 9777, 9777, 9777,
	9777, 9777, 9777, 9777, 9777, 9777, 9777, 9777, 9777, 9777,
	9777, 9777, 938, 9777, 1422, 1422, 1422, -10, 6460, -1000,
	1133, 1086, 9187, 9187, 25722, 81, 80, 75, -1000, 9187,
	-65, 9187, 9187, 9187, -1000, -1000, -1000, 74, -1000, 1410,
	-1000, -1000, -1000, -1000, 1059, 17241, 17241, 17241, 1164, -1000,
	2271, -1000, 23498, -48, 17241, 17241, -1000, 969, 987, 407,
	17241, -1000, 17241, -1000, 17241, 17241, 17241, -58, -60, 17241,
	17241, 1477, -1000, -41, 6165, 212, -2, -41, 602, -1000,
	-28, -1000, 326, -1000, 292, 291, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 67, -1000, -1000, 1040, -1000, 10367,
	181, 17241, 14820, 1340, 10367, 798, 963, 325, 1474, -1000,
	507, -1000, 361, 9187, 9187, 1130, 527, 12347, 12347, 1008,
	984, 12347, -1000, -1000, -1000, -1000, 15358, -1000, 990, -64,
	-1000, -1000, 17241, 173, -1000, 332, 481, 946, 3015, 176,
	9187, 25722, 25422, -66, 9187, 9187, -1000, -71, -1000, 9187,
	177, 25113, -1000, -1000, -1000, 25113, 9187, 1466, 9187, 66,
	64, 63, -1000, -1000, -1000, 22083, 9187, 61, -1000, 59,
	58, 25113, 1133, 25113, -1000, -1000, 775, 775, 1422, 1422,
	1422, 1422, 2093, 2093, 1202, 2874, 2039, 2039, 2039, 2128,
	678, 678, 2039, 2039, 2039, 1082, 949, 162, 23102, 9187,
	-72, -1000, -1000, -1000, 25113, 25113, 57, -1000, -1000, -1000,
	-65, 3101, 23192, 23156, -1000, 56, 361, -1000, -1000, -1000,
	17241, -1000, 17241, -1000, 17241, 17241, 1067, 870, -1000, -1000,
	952, 155, 9777, 17241, -1000, 742, -76, -78, 862, -1000,
	860, 9187, -1000, 25722, 879, 879, -1000, 431, 427, -1000,
	-1000, -1000, -1000, -1000, -41, 1208, 17241, 1260, -1000, -1000,
	152, -1000, -1000, -1000, 731, -80, -1000, 294, 1277, 9187,
	-1000, -1000, 151, 10367, -82, 55, -2, -99, 17241, -1000,
	325, 1469, -1000, 1201, -1000, 17241, 25113, -65, 435, -1000,
	1008, -1000, 150, 9187, 12347, -1000, -1000, -157, -1000, 323,
	-1000, 332, 147, 17241, 15358, 9187, 9187, 25422, -100, -1000,
	946, 946, -1000, 23132, -1000, 25113, -1000, 24578, -1000, -1000,
	-1000, 721, -1000, 22826, -1000, -1000, -1000, -1000, 9777, 1078,
	146, 25722, 22790, -1000, -1000, 9187, -1000, -1000, -1000, -1000,
	-1000, 1007, -1000, -1000, 17241, 873, -1000, -1000, 9187, 23102,
	144, 1033, 143, -1000, -1000, -1000, 637, -1000, -1000, 25113,
	1278, -1000, -1000, 17241, 17241, 498, -101, 17241, -1000, -1000,
	4982, 17241, 742, 10367, 1280, 37, 17241, 1280, 22766, 4663,
	-105, -1000, 1033, -1000, 742, 142, 1468, -1000, 942, -45,
	-1000, 1337, 13716, -1000, 17241, 25113, -1000, 990, -1000, 4370,
	15358, 17241, -107, -1000, 946, 946, -1000, -1000, 54, 761,
	1291, -1000, 3356, 9777, 25722, -112, -1000, 22460, -1000, -1000,
	1163, 3410, 877, 17241, -1000, 17241, 17241, 388, 17241, -1000,
	-1000, 568, -1000, 366, -1000, 141, 1033, -1000, -1000, -1000,
	-1000, 1277, 22, 742, -1000, 1033, 10367, -1000, 963, 17241,
	138, -1000, 135, 37, -114, -1000, -1000, -1000, -118, -1000,
	-1000, 622, 9187, 3356, -122, -1000, -1000, 1156, -1000, 771,
	867, 52, -123, 134, -1000, 9187, -1000, 12885, -1000, 17241,
	-1000, 1280, 51, 1033, -1000, -124, -1000, -1000, -1000, 9187,
	-1000, -1000, 49, 8892, 8892, -65, -1000, 17241, -1000, 778,
	777, 614, -1000, -1000, -1000, -1000, -1000, 877, 25113, -97,
	-133, -1000, -1000, -1000, 742, -7, -1000, -1000, -1000, 10072,
	825, 596, 23924, -1000, -1000, -1000, 1215, -1000, 397, 1048,
	1048, 771, -1000, 850, 1033, 44, 1386, -1000, -1000, -1000,
	-1000, -1000, -1000, 1395, -1000, -1000, 948, -1000, -1000, -1000,
	-1000, -1000, -1000, 1466, 8597, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1716, 1712, 1320, 141, 1711, 1710, 137, 1709, 1708,
	1707, 1704, 1703, 1702, 111, 136, 134, 127, 133, 1701,
	93, 1700, 1697, 1695, 108, 1693, 1691, 1690, 107, 1689,
	1688, 131, 129, 1687, 1684, 91, 1682, 37, 173, 1718,
	171, 1680, 1679, 1678, 14, 106, 68, 1677, 101, 1676,
	1673, 49, 28, 23, 15, 1669, 98, 116, 900, 24,
	1668, 1665, 153, 20, 29, 92, 99, 157, 155, 138,
	1662, 1661, 1660, 38, 1659, 2, 1656, 1655, 10, 54,
	25, 1654, 18, 87, 1653, 1652, 146, 1650, 80, 103,
	119, 72, 120, 351, 1648, 60, 9, 65, 1647, 1641,
	1641, 130, 30, 1639, 52, 81, 144, 1638, 50, 160,
	56, 27, 62, 112, 1636, 1633, 1630, 88, 1629, 94,
	63, 1628, 1627, 71, 1624, 140, 143, 1622, 1621, 121,
	1613, 1611, 1604, 163, 1600, 1599, 161, 1597, 13, 40,
	64, 12, 117, 110, 109, 61, 1596, 22, 1594, 1777,
	699, 623, 16, 1592, 53, 39, 84, 46, 55, 17,
	1588, 1586, 113, 1584, 1577, 1576, 1575, 1574, 82, 1571,
	69, 150, 26, 21, 35, 96, 31, 85, 90, 158,
	156, 114, 1570, 1569, 125, 1568, 34, 1567, 1566, 1338,
	126, 1565, 1564, 1561, 1313, 1175, 1171, 262, 1560, 1559,
	1070, 662, 1558, 1555, 57, 1553, 122, 1552, 1549, 151,
	215, 79, 1547, 123, 1546, 95, 1545, 0, 100, 97,
	1544, 128, 83, 1543, 1542, 1541, 1540, 33, 3, 8,
	4, 6, 5, 86, 47, 1539, 1538, 135, 104, 58,
	1537, 159, 1534, 1533, 1532, 36, 1528, 11, 1524, 19,
	1522, 1518, 7, 1, 147, 1517, 115, 1505, 1355, 1501,
	154, 1499, 1498, 1357, 41, 89,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 46, 46, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 43, 43,
	48, 48, 48, 50, 50, 47, 47, 42, 42, 5,
	5, 36, 36, 6, 6, 6, 7, 7, 7, 7,
	7, 7, 14, 15, 15, 15, 15, 15, 15, 15,
	15, 92, 92, 91, 91, 94, 94, 16, 16, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	185, 185, 184, 19, 160, 160, 20, 20, 20, 20,
	21, 118, 118, 22, 22, 22, 22, 23, 27, 254,
	254, 254, 258, 258, 259, 259, 260, 260, 260, 260,
	260, 260, 260, 256, 256, 30, 30, 30, 30, 30,
	137, 133, 133, 135, 135, 135, 135, 57, 132, 132,
	132, 132, 134, 134, 134, 134, 210, 209, 209, 215,
	215, 215, 70, 70, 70, 70, 70, 71, 71, 71,
	208, 208, 208, 208, 216, 216, 216, 216, 216, 216,
	72, 72, 72, 214, 214, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 18, 255, 255, 257, 257,
	32, 32, 10, 10, 11, 11, 73, 73, 74, 74,
	140, 140, 140, 140, 75, 75, 49, 49, 49, 139,
	225, 225, 226, 226, 226, 226, 226, 226, 227, 227,
	227, 227, 227, 227, 227, 223, 223, 224, 221, 221,
	222, 222, 222, 222, 261, 261, 138, 138, 78, 78,
	230, 230, 230, 230, 228, 228, 228, 228, 228, 231,
	229, 232, 232, 232, 232, 232, 171, 171, 171, 34,
	12, 55, 55, 13, 9, 9, 122, 122, 82, 82,
	176, 176, 176, 64, 64, 44, 44, 44, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 123,
	123, 124, 124, 25, 29, 33, 33, 33, 33, 33,
	263, 263, 61, 61, 61, 61, 62, 62, 136, 136,
	136, 136, 136, 56, 8, 8, 51, 51, 52, 52,
	53, 53, 54, 54, 264, 264, 24, 24, 24, 24,
	24, 67, 67, 129, 129, 129, 131, 131, 130, 130,
	130, 108, 108, 35, 87, 87, 96, 96, 97, 97,
	182, 98, 98, 28, 28, 39, 39, 37, 37, 37,
	37, 37, 37, 38, 38, 40, 40, 40, 40, 40,
	40, 40, 238, 238, 238, 241, 241, 237, 239, 239,
	240, 240, 262, 262, 109, 109, 109, 77, 76, 76,
	80, 80, 79, 81, 81, 175, 106, 106, 106, 106,
	125, 126, 126, 127, 127, 128, 128, 105, 105, 157,
	157, 41, 41, 86, 86, 88, 88, 147, 147, 148,
	148, 146, 146, 146, 177, 177, 177, 177, 177, 174,
	174, 178, 178, 178, 178, 178, 178, 172, 172, 172,
	172, 173, 173, 183, 183, 112, 112, 112, 112, 110,
	110, 111, 111, 179, 179, 179, 179, 107, 107, 180,
	180, 180, 141, 141, 186, 186, 186, 204, 204, 85,
	85, 85, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 188, 188, 188, 188, 190,
	190, 190, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 203, 203, 203, 203,
	203, 203, 191, 191, 198, 198, 199, 199, 200, 201,
	192, 192, 193, 193, 194, 195, 202, 202, 202, 202,
	206, 206, 196, 196, 196, 196, 196, 197, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 120, 120, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 151, 151, 151, 151, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 233, 233,
	233, 233, 233, 233, 233, 235, 235, 236, 236, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 242, 242, 243, 243,
	245, 245, 246, 246, 247, 248, 248, 248, 249, 250,
	250, 244, 244, 251, 251, 251, 252, 252, 253, 253,
	253, 253, 253, 162, 162, 162, 163, 163, 164, 93,
	93, 159, 159, 158, 158, 158, 161, 161, 113, 113,
	205, 205, 205, 205, 205, 205, 205, 114, 114, 114,
	121, 115, 115, 116, 116, 116, 116, 116, 116, 154,
	155, 117, 117, 117, 156, 156, 165, 169, 169, 168,
	167, 167, 166, 166, 144, 144, 145, 145, 143, 142,
	102, 102, 101, 101, 99, 99, 100, 100, 265, 265,
	170, 170, 103, 103, 104, 95, 95, 181, 181, 181,
	181, 89, 89, 69, 69, 90, 90, 65, 65, 68,
	68, 66, 66, 66, 66, 83, 83, 84, 84, 63,
	63, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 207, 207, 207, 58, 58, 58, 59, 59,
	60, 60, 212, 212, 212, 213, 213, 213, 213, 211,
	211, 211, 211, 211, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 4,
	6, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 6,
	5, 3, 0, 4, 6, 7, 1, 1, 1, 1,
	1, 1, 6, 3, 5, 4, 6, 4, 6, 4,
	6, 1, 3, 1, 2, 2, 3, 2, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 5, 3, 0, 1, 1, 1, 1,
	3, 3, 0, 2, 3, 2, 3, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 3, 6, 3, 1,
	5, 2, 1, 1, 1, 3, 3, 2, 3, 3,
	3, 3, 1, 3, 3, 2, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 0, 1, 1, 2, 2, 2, 4, 2,
	4, 4, 4, 4, 4, 4, 4, 2, 3, 4,
	3, 3, 4, 4, 2, 2, 2, 0, 2, 0,
	8, 8, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	5, 2, 0, 6, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 8, 11, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 6, 8, 5,
	7, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 0, 8, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 3, 0, 1, 3, 3, 1, 1,
	3, 2, 4, 0, 4, 6, 3, 1, 5, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 2,
	1, 3, 1, 1, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 4, 1, 1, 1, 5,
	1, 3, 1, 3, 1, 1, 1, 1, 6, 6,
	4, 4, 4, 4, 4, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 4, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 0, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 3, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -27, -29,
	-28, -30, -31, -32, -33, -25, -34, -35, 23, 34,
	218, 65, -8, -9, -10, -11, -12, -13, -240, 93,
	101, 123, 201, 100, 86, 117, 221, 229, -37, -39,
	237, -137, 238, 35, 247, 59, 96, 223, 217, 269,
	67, -238, -40, -38, 317, 292, 298, 232, -41, 255,
	284, 320, 255, 132, 79, 287, 79, 79, -65, -58,
	4, -217, -219, 20, 21, 23, 33, 34, 35, 40,
	44, 47, 58, 59, 60, 62, 64, 65, 66, 69,
	70, 77, 78, 79, 80, 82, 86, 88, 92, 93,
	95, 100, 101, 107, 108, 111, 113, 118, 123, 124,
	125, 126, 133, 136, 131, 145, 147, 148, 151, 150,
	155, 158, 161, 163, 164, 165, 166, 167, 169, 170,
	172, 174, 171, 177, 179, 180, 182, 187, 190, 193,
	194, 195, 196, 199, 201, 203, 204, 205, 207, 208,
	210, 211, 212, 213, 214, 217, 215, 216, 218, 219,
	221, 223, 224, 226, 228, 229, 230, 231, 234, 235,
	237, 238, 240, 243, 246, 247, 248, 251, 249, 245,
	254, 256, 257, 258, 265, 269, 270, 271, 272, 275,
	276, 277, 279, 281, 282, 283, 288, 293, 294, 295,
	296, 28, 36, 37, 38, 39, 41, 42, 45, 46,
	50, 51, 52, 54, 81, 83, 84, 99, 102, 103,
	109, 119, 121, 127, 128, 137, 138, 139, 140, 142,
	153, 176, 178, 188, 192, 198, 200, 206, 225, 233,
	241, 242, 250, 252, 260, 261, 262, 266, 267, 284,
	285, 88, 136, 277, 276, 79, 132, 255, 287, -17,
	317, -28, -7, -15, -4, -24, -35, -14, -31, -18,
	-32, -16, 23, -211, 4, -217, -219, -218, -220, 56,
	68, 116, 135, 129, 144, 146, 154, 156, 168, 189,
	191, 222, 239, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 48, 49, 53, 55, 57, 63, 67,
	71, 72, 73, 74, 75, 76, 85, 87, 89, 90,
	91, 94, 96, 98, 104, 105, 106, 112, 114, 115,
	117, 120, 122, 130, 132, 134, 141, 143, 149, 152,
	157, 159, 160, 173, 175, 181, 183, 184, 185, 186,
	197, 202, 209, 220, 232, 236, 244, 253, 255, 259,
	263, 264, 268, 273, 274, 278, 280, 286, 287, 289,
	290, 291, 292, -58, -58, -58, 201, 22, -258, 22,
	-259, -260, 67, 93, 117, 232, 136, 88, 276, -258,
	-62, 229, -58, -133, 158, 235, 225, 265, -134, -132,
	-210, 260, 167, -91, -58, 4, 22, 79, 58, 80,
	118, 132, 133, 63, 64, 148, 256, 260, 265, 67,
	279, -263, 265, 265, -263, -263, -61, 265, 263, -62,
	-262, 255, 255, 278, 287, -122, 79, 274, -38, -40,
	-39, -79, -80, 273, 141, 98, 186, -37, -39, -238,
	-241, 207, -237, -58, -241, -76, -77, 22, 90, 321,
	-179, -65, 184, -104, 317, -3, -179, 127, -65, -68,
	127, -65, -58, -179, 127, -58, -58, 115, 317, -101,
	-102, -142, -143, 319, 115, 143, 143, -180, -179, -58,
	127, -69, 127, -68, -92, 127, -91, -92, 127, -185,
	-184, -213, 4, -217, -219, -218, 284, 255, 132, -160,
	317, -118, 317, -58, 22, 183, 321, 183, -58, -133,
	52, -133, 317, -135, -56, -57, 145, 203, 263, 302,
	115, 296, -72, 5, 85, -94, 319, 115, -255, 183,
	115, 115, 115, 115, 115, 115, 296, 145, 203, 228,
	255, 287, -136, -56, -57, -136, 263, -62, -107, -179,
	-91, 127, -58, -91, 132, -58, 127, -79, -80, -106,
	-125, -126, 157, 181, -109, 22, 90, -109, -109, 44,
	318, 318, 321, -241, -84, 317, -95, -181, -149, 310,
	-151, 308, 309, 314, 173, 297, -162, -153, -165, 99,
	225, 317, -65, -152, 322, 9, -235, -39, 29, -163,
	-164, 48, -58, 7, 8, 5, 6, -63, -188, -197,
	268, 104, 175, -233, -234, 4, -217, -212, -189, -199,
	-193, -196, 142, 56, 72, 75, 73, 76, 236, 278,
	49, 28, 102, 103, 192, 198, 252, 266, 267, 127,
	176, 128, 54, 119, 153, 92, 37, 39, 41, 42,
	50, 51, 81, 83, 84, 109, 137, 138, 139, 140,
	178, 206, 241, 250, 261, 262, 285, -218, -200, -201,
	-194, -195, -202, -95, -104, 310, -65, 317, -103, -170,
	-149, 85, -46, 215, -45, 21, 23, 93, 282, 99,
	245, 245, 215, 99, 322, 215, 215, 99, 263, 115,
	248, 318, -89, -65, -102, -211, 310, -180, -67, -65,
	-67, 237, -58, 30, 99, -48, 321, 47, 219, 99,
	-48, 321, 99, -48, 99, 318, 321, -179, 127, -68,
	30, -159, -186, -187, -189, -198, -192, -196, -197, 40,
	46, 45, 258, 233, 242, 38, 137, 138, 139, 140,
	241, 37, 206, 109, 92, 84, 83, 178, 42, 41,
	-200, -201, -194, -195, 81, 261, 262, 142, 39, 51,
	50, 285, 250, -93, -149, -254, -90, 255, 79, -66,
	-58, 310, -260, -254, 30, -93, 321, 321, 155, -71,
	161, 172, 124, -209, 85, -215, -208, -171, 9, 268,
	104, 183, -214, 8, 309, -207, -213, 5, 7, 308,
	-209, 85, 70, -216, 5, 4, -197, -171, 85, 158,
	319, -211, -210, -257, 112, -254, -210, -210, -210, -210,
	-210, -58, 155, -210, -210, 321, 321, -62, -48, 321,
	317, -78, 173, -239, 292, -78, 317, -59, 127, -58,
	-239, 173, -106, -126, -125, -127, -149, 22, -149, -151,
	-38, -38, -38, -81, -175, -149, -237, 30, -83, -58,
	-86, 321, 115, 10, 11, 55, 33, 308, 309, 310,
	311, 110, 312, 305, 306, 307, 304, 300, 301, 302,
	61, 162, 227, 13, 14, 15, 26, 185, 156, 297,
	129, 239, 314, 16, 17, 18, 144, 36, 130, 30,
	4, -149, -149, -149, -149, -149, 191, -99, -144, 315,
	-39, 317, -39, -149, -93, 7, -39, -158, 315, -166,
	-149, -101, 317, 5, 5, 317, -242, 293, 112, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 200, -206, 288, -206,
	-206, -190, 317, -190, -191, 317, -190, 294, 298, 317,
	-86, -65, 321, 318, 321, 263, -123, 63, 57, -139,
	127, 57, -221, -58, 63, -222, 53, 274, 202, 114,
	-123, 63, -123, 63, 63, -179, 33, 33, 263, -68,
	-58, 263, 263, -179, 5, 5, 115, 318, 321, -141,
	290, -129, -28, 317, 85, 30, -129, -96, -97, -182,
	-98, -65, 317, -58, -58, -68, -69, -91, -92, -92,
	-17, -184, 99, -20, -28, -24, -35, -14, 318, 321,
	-85, 29, -119, 317, 295, 165, 82, 125, 164, -120,
	231, 318, 321, 263, 321, -90, -83, -143, -142, 115,
	265, 318, -57, -56, -70, 205, 243, 216, 234, 321,
	8, 7, 7, 5, -211, -256, -58, -57, -56, -179,
	-73, -83, -74, -58, -140, -139, -223, -224, -221, 132,
	274, 105, 30, 99, -55, 196, 30, 183, 173, -51,
	257, 99, -128, 225, 226, 321, -44, 31, 89, 317,
	321, 318, -141, -181, -88, -177, -179, -65, -39, -178,
	317, -204, -186, -203, 182, 211, 212, 210, 214, 213,
	-186, -91, 260, -149, -149, -149, -149, -149, -149, -149,
	-149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
	-149, -149, -149, -149, -149, 156, 129, 239, 36, 130,
	-149, 263, -149, -149, -149, -149, 175, 173, 268, 104,
	275, 90, 179, -265, 253, 32, -156, -39, 317, -211,
	-162, 225, 317, -144, -149, -145, -93, 318, 318, 321,
	-93, -161, 316, -158, -169, -168, 289, 318, -93, 286,
	22, 90, 310, -119, 7, -243, 107, 120, 317, 318,
	318, -149, -149, -113, -205, -93, 4, 295, 165, 82,
	125, 164, 231, -113, -114, -149, -93, -115, -150, -151,
	308, 309, 314, 317, 225, -116, -149, -93, -149, 43,
	152, 264, -117, -149, 115, -93, -149, -149, -149, -93,
	-93, -93, 317, 7, 7, 260, 260, 7, -141, 318,
	-170, -45, -65, -58, -58, 173, -139, 127, -50, 173,
	-186, -58, 317, 317, 147, 147, -58, -58, 127, -58,
	127, -58, -58, -46, 215, 317, 317, -58, 215, -58,
	-65, 215, -36, 126, 248, 115, -65, -108, 220, -149,
	-108, -131, 183, -89, 284, -58, 220, -87, 321, 115,
	302, -89, -48, -48, -48, -179, -186, 315, 315, 7,
	263, 263, 263, 263, 317, -149, -256, -66, -256, -56,
	272, 60, 205, -215, -119, 321, 318, 318, 321, -59,
	132, -59, -28, -91, 5, -28, -65, 99, -52, 95,
	-264, 302, -58, -175, -20, -58, -105, 120, -183, 321,
	299, 68, -112, 146, 168, 116, 154, 222, 135, -146,
	322, 317, -174, 298, -39, -178, -177, 296, -149, -149,
	263, -265, 253, -156, -149, 175, 268, 104, 275, 90,
	179, 115, 317, -150, -150, -93, 317, -93, 316, 325,
	318, -149, 316, 316, 321, -167, -168, 94, -149, -80,
	321, -79, -149, -93, -93, 318, 318, -248, 190, 317,
	317, -149, 30, 321, 318, 115, 318, 318, -121, 197,
	318, 10, 11, 308, 309, 310, 311, 110, 312, 305,
	306, 307, 304, 300, 301, 302, 61, 162, 227, 13,
	14, 15, 144, 130, -150, -150, -150, -93, 317, 318,
	-154, -155, 115, 112, 30, -117, -117, -117, 318, 115,
	-93, 321, 321, 321, 318, 318, 318, 7, 318, 321,
	318, 296, 296, 318, -105, 263, 263, 99, 173, 281,
	-225, -222, -149, -83, 317, 317, -43, 93, 237, -124,
	99, -48, 99, -48, 263, -123, 63, -93, -93, 263,
	263, 115, 248, -95, 220, 62, 318, -95, -141, -97,
	-88, -170, 318, 316, 7, 7, 318, 165, 125, 164,
	-120, 164, -120, -120, 7, -58, -75, 131, -140, 317,
	-59, 317, 317, -78, 317, -58, -53, 151, -264, 4,
	-239, 318, -157, 122, 44, -177, 179, 146, 146, -177,
	-112, 146, -110, 189, -110, -110, -174, -211, 323, -93,
	-173, -172, 30, -58, 187, 318, -149, -149, -150, -150,
	115, 317, -149, -159, 26, 26, 318, -93, 318, 321,
	-145, -149, 318, -158, 96, -149, 259, 318, 286, -80,
	-80, -80, 5, -249, -58, 317, 290, -79, 318, -204,
	-186, -149, -154, -149, -204, -186, -150, -150, -150, -150,
	-150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
	-150, -150, -150, -150, -150, 90, 173, 179, -150, 321,
	-93, 318, -155, -154, -149, -149, -186, 318, 318, 318,
	-93, -149, -149, -149, 318, 7, -157, -58, -58, -139,
	99, -226, 63, -227, 55, 105, 67, 173, 175, 274,
	202, 53, 85, 209, 318, 318, -83, -83, 173, 85,
	173, 85, 78, 270, -58, -58, -65, -58, -58, 318,
	318, -58, -65, 5, -95, -130, 317, 183, -28, -108,
	302, 316, 316, 318, 130, -82, -176, -58, -236, 317,
	-233, -234, -63, 317, -83, -73, 30, -82, 183, -54,
	150, -264, 5, -51, -245, 291, -149, -93, 254, -177,
	-177, -111, 280, 183, 146, -177, -173, -148, -147, 113,
	171, 318, -58, 317, -174, 26, 26, -149, -159, 318,
	-149, -149, 318, -149, 316, -149, 5, -149, 318, 318,
	318, -250, -58, -149, 318, 318, 318, -155, 115, 90,
	179, 317, -149, 318, 318, 321, 318, 318, 318, -245,
	-139, -58, -91, -58, 105, 127, 175, 147, 317, -150,
	-65, -138, -261, 66, 251, 318, 318, 175, 175, -149,
	-186, -48, -48, 263, 263, 91, -83, 63, -104, -39,
	317, 193, 318, 321, -64, -101, 55, -64, -149, 317,
	-82, 318, 318, -28, 318, -65, -264, 5, -52, -246,
	-247, -58, 260, -111, 317, -149, -177, 321, 324, 302,
	-174, 317, -83, -172, -149, -149, 318, 318, -80, -244,
	195, 318, -150, 115, 317, -159, 318, -149, -227, -59,
	173, -149, -60, 317, -75, 317, 209, -47, 55, -58,
	-58, 276, 174, 318, -58, -58, -138, -176, -44, -91,
	-44, 318, -93, 318, -75, -138, 317, 5, -53, 321,
	30, -152, -63, -58, -83, -147, -211, -173, -83, 318,
	318, -80, 44, -150, -159, 318, 318, 99, 318, -230,
	163, -58, -83, -65, -42, 280, -91, 237, -141, 317,
	-75, -64, -80, -138, -75, -82, -54, -247, -249, 317,
	318, 318, -251, 204, 226, -93, 318, 105, -228, -231,
	-229, 183, 116, 194, 240, 318, 318, -78, -149, -96,
	-83, -44, 318, -75, 318, -93, 318, -252, -253, 36,
	271, 70, -149, -252, -58, -229, 183, -231, 183, 276,
	88, -230, -141, 318, -138, -80, -253, 199, 111, 225,
	199, 111, -232, 170, 219, 47, 237, -232, -228, -49,
	47, 219, -75, 318, 26, 20, 175, 85, -253,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 0, 0,
	0, 0, 66, 67, 68, 69, 70, 71, 0, 0,
	401, 0, 0, 0, 0, 0, 0, 0, 373, -2,
	0, 139, 0, 321, 0, 321, 321, 325, 0, 403,
	287, 400, -2, 411, 0, 0, 0, 409, 387, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 827,
	855, 856, 857, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 0, 205, 869, 870, 871, 872, 873, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
	1143, 1144, 1145, 105, 112, 113, 945, 115, 0, 122,
	123, 124, 126, 127, 128, 129, 130, 131, 132, 0,
	314, 966, 327, 135, 922, 970, 1039, 985, 142, 152,
	0, 1045, -2, 156, 83, 185, 186, 187, 0, 189,
	207, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	204, 332, 320, 332, 317, 318, 319, 322, 0, 313,
	0, 402, 0, 0, 0, 0, 0, 286, -2, 383,
	384, -2, 0, 406, 406, 406, 0, 0, 384, 0,
	392, 949, 395, 838, 393, 0, 0, 408, 407, 0,
	388, 473, 0, 431, 0, 2, 0, 1024, 473, 0,
	1024, 830, 0, 0, 1024, 0, 0, 0, 0, 828,
	802, 800, 801, 0, 0, 0, 0, 0, 479, 73,
	1024, 52, 1024, 823, 52, 1024, 81, 52, 1024, 0,
	100, 102, 865, 866, 867, 868, 1050, 0, 0, 0,
	0, 110, 0, 114, 116, 0, 0, 0, 326, 136,
	1013, 138, 0, 141, 143, 144, 0, 0, 0, 0,
	0, 0, 155, 180, 181, 84, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 198, 0, 200, 201,
	0, 0, 315, 328, 329, 316, 0, 324, 52, 477,
	259, 1024, 399, 259, 859, 399, 1024, -2, 0, 379,
	418, 419, 0, 0, 0, 404, 405, 0, 0, 0,
	375, 376, 0, 394, 0, 0, 434, 815, 819, 820,
	574, 0, 0, 0, 0, 0, 0, 663, 665, 1018,
	1039, 0, 667, 668, 0, 670, 672, 673, 0, 676,
	677, 793, 827, 841, 842, 843, 844, 0, 0, 0,
	849, 850, 851, 717, 686, -2, -2, 839, 505, 506,
	507, 508, -2, 1052, 690, 692, 694, 695, 696, 697,
	0, 1002, 1019, 1020, 1035, 1036, 1044, 1048, 1049, 1024,
	1032, 1025, 1014, 1022, 1031, 899, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 864, 536, 537,
	542, 543, 545, 434, 432, 474, 475, 0, 0, 812,
	810, 811, 29, 310, 31, 0, 310, 310, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 821, 803, 798, 799, 483, 0, 351,
	0, 0, 480, 0, 0, 75, 0, 50, 51, 0,
	77, 0, 0, 79, 0, 401, 0, 0, 1024, 0,
	401, 0, 751, 491, 492, 493, 494, 495, 571, 498,
	499, 500, 501, 502, 503, 504, 512, 513, 514, 515,
	516, 517, 518, 533, 0, 511, 511, 511, 524, 525,
	534, 535, 540, 541, 552, 553, 555, 557, 551, 551,
	551, 548, 549, 0, 749, 0, 119, 0, 894, 825,
	831, 832, 125, 0, 0, 0, 0, 0, 0, 147,
	167, 168, 169, 148, 150, 157, 159, 160, 161, 170,
	171, 172, 173, 276, 0, 278, 183, 184, 852, 0,
	149, 151, 153, 154, 174, 175, 0, 177, 178, 179,
	0, 85, 188, 190, 0, 206, 191, 192, 193, 194,
	195, 196, 199, 202, 203, 0, 0, 323, 279, 0,
	217, 0, 0, 282, 398, 0, 0, 0, 1024, 858,
	337, 0, 382, 416, 417, 420, 423, 424, 421, 574,
	389, 390, 391, 412, 413, 297, 396, 0, 0, 835,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 809, 0, 0,
	818, 579, 580, 581, 603, 604, 0, 664, 804, 797,
	666, 0, -2, 749, 0, 669, 674, 675, 0, 0,
	792, -2, 0, 846, 571, 0, 719, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 772, 778, 0, 0,
	0, 0, 0, 0, 0, 0, 520, 539, 550, 547,
	546, 522, 0, 521, 519, 0, 523, 0, 0, 0,
	483, 0, 0, 814, 0, 0, 0, 0, 309, 33,
	1024, 0, 54, 0, 0, 249, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	829, 0, 0, 0, 62, 60, 0, 0, 0, 362,
	0, 362, 353, 0, 0, 0, 349, 365, 366, 368,
	369, 0, 0, 481, 74, 824, 52, 82, 52, 52,
	88, 101, 0, 103, 106, 107, 108, 109, 104, 0,
	484, 486, 496, 0, 558, 559, 560, 561, 562, 563,
	572, 111, 0, 0, 0, 120, 121, 833, 834, 0,
	0, 140, 145, 146, 333, 0, 164, 0, 166, 0,
	277, 854, 853, 571, 86, 208, 133, 330, 331, 478,
	0, 0, 216, 835, 218, 220, 221, 222, 223, 859,
	0, 859, 0, 0, 280, 0, 0, 0, 0, 339,
	345, 0, 422, 425, 426, 0, 415, 295, 296, 401,
	0, 837, 428, 816, 464, 435, 443, 473, 450, 447,
	0, 575, 487, 488, 526, 527, 528, 529, 530, 531,
	576, 577, 0, 582, 583, 584, 585, 586, 587, 588,
	589, 590, 591, -2, -2, -2, 595, 596, 597, -2,
	-2, -2, 601, 602, -2, 0, 0, 0, 809, 0,
	-2, 0, 611, -2, -2, -2, 615, 0, 618, 620,
	622, 0, 0, 0, 0, 808, 632, 784, 0, 817,
	617, 0, 0, 805, 796, 0, 0, -2, 671, 0,
	0, 0, 755, 756, 791, 787, 0, 678, 411, 0,
	0, 0, 0, 847, 0, 727, 0, 0, 0, 691,
	693, 0, 0, 0, 0, 759, -2, -2, -2, -2,
	-2, -2, -2, 0, 0, 749, 769, 0, 0, 634,
	0, 0, 0, 0, 1039, 0, 749, 777, 0, 0,
	0, 0, 0, 749, 0, 783, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 428, 476,
	813, 32, 299, 0, 0, 0, 35, 1024, 43, 0,
	231, 0, 0, 0, 0, 0, 312, 44, 1024, 52,
	1024, 52, 45, 30, 310, 0, 0, 303, 0, 298,
	301, 0, 59, 0, 64, 0, 822, 72, 0, 482,
	346, 347, 0, 0, 355, 352, 0, 483, 0, 0,
	0, 0, 76, 78, 80, 0, 752, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 117, 826, 118, 137,
	162, 163, 165, 158, 176, 0, 225, 258, 0, 0,
	859, 0, 214, 259, 281, 283, 0, 0, 341, 345,
	0, 344, 399, 414, 0, 836, 430, 0, 433, 0,
	0, 0, 0, 0, 0, 470, 470, 470, 468, 450,
	0, 0, 462, 0, -2, 447, 0, 0, -2, -2,
	0, 0, 0, 633, -2, 616, 619, 621, 623, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 794, 797,
	-2, 750, 753, 754, 0, 0, 788, 0, 0, 0,
	0, 410, 411, 411, 411, 684, 0, 685, 0, 0,
	0, 0, 0, 0, 700, 0, 701, 702, 0, 0,
	703, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 637, 638, 639, 0, 0, 704,
	775, 776, 0, 0, 0, 0, 0, 0, 709, 0,
	782, 0, 0, 0, 713, 714, 715, 0, 509, 0,
	532, 554, 556, 544, 430, 0, 0, 0, 0, 53,
	229, 248, 0, 0, 0, 0, 37, 0, 0, 0,
	0, 41, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 65, 361, 0, 360, 0, 350, 362, 367,
	364, 370, 0, 489, 0, 0, 497, 564, 565, 566,
	567, 568, 569, 570, 0, 134, 212, 0, 219, 0,
	0, 0, 217, 0, 0, 0, 343, 345, 0, 336,
	337, 397, 721, 0, 0, 436, 0, 0, 0, 0,
	0, 0, 465, 469, 466, 467, 462, 441, 0, 0,
	446, 461, 0, 460, 449, -2, 578, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 785, 0, 744, 0,
	0, 796, -2, 757, 786, 790, 0, 679, 0, 0,
	0, 0, 848, 725, 726, 730, 0, 0, 689, 0,
	0, 758, 768, 770, 635, 636, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, -2, -2, -2, 653,
	654, 655, -2, -2, -2, 0, 0, 0, 771, 0,
	0, 747, 773, 774, 779, 780, 0, 706, 707, 708,
	781, 0, 0, 0, 538, 0, 721, 305, 307, 34,
	0, 230, 0, 233, 0, 0, 0, 0, 239, 240,
	0, 0, 0, 0, 250, 257, 0, 0, 0, 49,
	0, 0, 311, 0, 52, 52, 300, 0, 0, 210,
	211, 304, 302, 61, 348, 0, 0, 0, 354, 363,
	0, 490, 485, 573, 0, 0, 288, 294, 294, 0,
	687, 688, 0, 0, 0, 0, 0, 0, 0, 334,
	345, 0, 338, 339, 385, 0, 429, 427, 0, 452,
	0, 454, 0, 0, 0, 456, 444, 0, 439, 0,
	438, 450, 458, 0, 0, 0, 0, -2, 0, 626,
	-2, -2, 743, 750, 795, 789, 845, 411, 680, 682,
	683, 732, 729, 0, 716, 698, 699, 767, 0, 0,
	0, 0, 750, 746, 705, 0, 711, 712, 510, 386,
	36, 0, 234, 235, 859, 0, 238, 241, 0, 243,
	861, 225, 0, 254, 255, 252, 0, 38, 39, 48,
	56, 40, 46, 0, 0, 0, 0, 0, 371, 372,
	0, 0, 257, 0, 297, 840, 0, 297, 0, 0,
	0, 247, 225, 215, 257, 0, 0, 340, 341, 720,
	722, 0, 0, 453, 0, 472, 455, 0, 442, 0,
	462, 0, 0, 448, -2, -2, 627, 745, 0, 411,
	0, 718, -2, 0, 0, 0, 748, 0, 232, 236,
	0, 0, 263, 0, 251, 0, 0, 58, 0, 306,
	308, 0, 357, 483, 359, 0, 225, 289, 290, 293,
	291, 294, 411, 257, 213, 225, 0, 342, 343, 0,
	0, 463, 0, 0, 0, 440, 437, 445, 0, 459,
	681, 735, 0, -2, 0, 661, 710, 0, 242, 268,
	0, 0, 0, 259, 42, 0, 55, 0, 358, 0,
	245, 297, 0, 225, 284, 0, 335, 723, 724, 0,
	471, 457, 0, 0, 0, 731, 662, 0, 244, 264,
	265, 0, 260, 261, 262, 860, 256, 263, 57, 483,
	0, 292, 679, 246, 257, 411, 728, 733, 736, -2,
	988, 891, 0, 734, 237, 266, 0, 267, 0, 0,
	0, 268, 356, 228, 225, 0, 0, 738, 739, 740,
	741, 742, 269, 0, 272, 273, 0, 270, 253, 224,
	226, 227, 285, 0, 0, 271, 274, 275, 737,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 306, 3, 312, 307, 3,
	317, 318, 310, 308, 321, 309, 319, 311, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 325, 320,
	300, 302, 301, 3, 322, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 315, 3, 316, 305, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 323, 304, 324, 314,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 303, 57643, 313, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:739
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:745
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:751
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:777
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:788
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:808
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:815
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:825
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:840
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:844
		{
			return unimplemented(sqllex)
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:867
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:877
		{
			return unimplemented(sqllex)
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = nil
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = DropCascade
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = DropRestrict
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:924
		{
			sqlVAL.union.val = DropDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:940
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return unimplemented(sqllex)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:944
		{
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:949
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Database: Name(sqlDollar[3].str), To: &StrVal{s: sqlDollar[5].str}, IncrementalFrom: sqlDollar[6].union.strVal()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:953
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Database: Name(sqlDollar[3].str), From: &StrVal{s: sqlDollar[5].str}}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:962
		{
		}
	case 63:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 87:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1093
		{ /* SKIP DOC */
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1218
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			return unimplemented(sqllex)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1289
		{ /* SKIP DOC */
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1352
		{
			return unimplemented(sqllex)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1358
		{
			return unimplemented(sqllex)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = Low
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = Normal
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = High
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1469
		{
			return unimplemented(sqllex)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1470
		{
			return unimplemented(sqllex)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1471
		{
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 207:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1669
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1673
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = DropDefault
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1683
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1888
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1890
		{
			return unimplemented(sqllex)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1891
		{
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1898
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1899
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1900
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1901
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1902
		{
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1905
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			return unimplemented(sqllex)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1911
		{
			return unimplemented(sqllex)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1912
		{
			return unimplemented(sqllex)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1913
		{
			return unimplemented(sqllex)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1914
		{
			return unimplemented(sqllex)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1915
		{
			return unimplemented(sqllex)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = true
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = false
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2021
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2022
		{
			return unimplemented(sqllex)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			return unimplemented(sqllex)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2026
		{
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = Ascending
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = Descending
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2080
		{
			return unimplemented(sqllex)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2081
		{
			return unimplemented(sqllex)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = true
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = false
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2095
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2128
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2137
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2138
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.str = ""
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.str = ""
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].union.strVal(),
				Encoding: sqlDollar[6].union.strVal(),
				Collate:  sqlDollar[7].union.strVal(),
				CType:    sqlDollar[8].union.strVal(),
			}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].union.strVal(),
				Encoding:    sqlDollar[9].union.strVal(),
				Collate:     sqlDollar[10].union.strVal(),
				CType:       sqlDollar[11].union.strVal(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2260
		{
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2261
		{
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2280
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2287
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2329
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			return unimplemented(sqllex)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2358
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2359
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2586
		{
			return unimplemented(sqllex)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2587
		{
			return unimplemented(sqllex)
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2588
		{
			return unimplemented(sqllex)
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2591
		{
			return unimplemented(sqllex)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2592
		{
			return unimplemented(sqllex)
		}
	case 397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2595
		{
			return unimplemented(sqllex)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2598
		{
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2599
		{
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2602
		{
			return unimplemented(sqllex)
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2603
		{
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2607
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = true
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = false
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = false
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = true
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2630
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2631
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2669
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2689
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2730
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2731
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2789
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &From{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2837
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = true
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = false
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.str = astFullJoin
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.str = astLeftJoin
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.str = astRightJoin
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.str = astInnerJoin
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2997
		{
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2998
		{
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3084
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3097
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3098
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3112
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3121
		{
			return unimplemented(sqllex)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3177
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = nil
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3226
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = oidPseudoTypeOid
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = oidPseudoTypeRegProc
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = oidPseudoTypeRegProc
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = oidPseudoTypeRegClass
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = oidPseudoTypeRegType
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = oidPseudoTypeRegNamespace
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3325
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3357
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3396
		{
		}
	case 551:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3397
		{
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3428
		{
			return unimplemented(sqllex)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3429
		{
			return unimplemented(sqllex)
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3430
		{
			return unimplemented(sqllex)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3431
		{
			return unimplemented(sqllex)
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3432
		{
			return unimplemented(sqllex)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3433
		{
			return unimplemented(sqllex)
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3434
		{
			return unimplemented(sqllex)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3435
		{
			return unimplemented(sqllex)
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3436
		{
			return unimplemented(sqllex)
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3437
		{
			return unimplemented(sqllex)
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			return unimplemented(sqllex)
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3439
		{
			return unimplemented(sqllex)
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3440
		{
			return unimplemented(sqllex)
		}
	case 571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3441
		{
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3444
		{
			return unimplemented(sqllex)
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3445
		{
			return unimplemented(sqllex)
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3480
		{
			return unimplemented(sqllex)
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3640
		{
			return unimplemented(sqllex)
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3864
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3917
		{
			return unimplemented(sqllex)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3918
		{
			return unimplemented(sqllex)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3941
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3956
		{
			return unimplemented(sqllex)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3957
		{
			return unimplemented(sqllex)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3961
		{
			return unimplemented(sqllex)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3978
		{
			return unimplemented(sqllex)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3979
		{
			return unimplemented(sqllex)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3980
		{
			return unimplemented(sqllex)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3981
		{
			return unimplemented(sqllex)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4010
		{
			return unimplemented(sqllex)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4054
		{
			return unimplemented(sqllex)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4055
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4058
		{
			return unimplemented(sqllex)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4059
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = Window(nil)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.str = ""
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4146
		{
			return unimplemented(sqllex)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4147
		{
			return unimplemented(sqllex)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4148
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4151
		{
			return unimplemented(sqllex)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4152
		{
			return unimplemented(sqllex)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4158
		{
			return unimplemented(sqllex)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			return unimplemented(sqllex)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4160
		{
			return unimplemented(sqllex)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4161
		{
			return unimplemented(sqllex)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4162
		{
			return unimplemented(sqllex)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4528
		{
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4688
		{
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4724
		{
			return unimplemented(sqllex)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = DNull
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.str = ""
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
