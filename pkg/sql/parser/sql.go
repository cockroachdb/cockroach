// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

//line sql.y:482
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const JSON = 57515
const JSONB = 57516
const KEY = 57517
const KEYS = 57518
const KV = 57519
const LATERAL = 57520
const LC_CTYPE = 57521
const LC_COLLATE = 57522
const LEADING = 57523
const LEAST = 57524
const LEFT = 57525
const LESS = 57526
const LEVEL = 57527
const LIKE = 57528
const LIMIT = 57529
const LIST = 57530
const LOCAL = 57531
const LOCALTIME = 57532
const LOCALTIMESTAMP = 57533
const LOW = 57534
const LSHIFT = 57535
const MATCH = 57536
const MAXVALUE = 57537
const MINUTE = 57538
const MONTH = 57539
const NAN = 57540
const NAME = 57541
const NAMES = 57542
const NATURAL = 57543
const NEXT = 57544
const NO = 57545
const NO_INDEX_JOIN = 57546
const NORMAL = 57547
const NOT = 57548
const NOTHING = 57549
const NULL = 57550
const NULLIF = 57551
const NULLS = 57552
const NUMERIC = 57553
const OF = 57554
const OFF = 57555
const OFFSET = 57556
const OID = 57557
const ON = 57558
const ONLY = 57559
const OPTIONS = 57560
const OR = 57561
const ORDER = 57562
const ORDINALITY = 57563
const OUT = 57564
const OUTER = 57565
const OVER = 57566
const OVERLAPS = 57567
const OVERLAY = 57568
const PARENT = 57569
const PARTIAL = 57570
const PARTITION = 57571
const PASSWORD = 57572
const PAUSE = 57573
const PLACING = 57574
const PLANS = 57575
const POSITION = 57576
const PRECEDING = 57577
const PRECISION = 57578
const PREPARE = 57579
const PRIMARY = 57580
const PRIORITY = 57581
const QUERIES = 57582
const QUERY = 57583
const RANGE = 57584
const READ = 57585
const REAL = 57586
const RECURSIVE = 57587
const REF = 57588
const REFERENCES = 57589
const REGCLASS = 57590
const REGPROC = 57591
const REGPROCEDURE = 57592
const REGNAMESPACE = 57593
const REGTYPE = 57594
const REMOVE_PATH = 57595
const RENAME = 57596
const REPEATABLE = 57597
const RELEASE = 57598
const RESET = 57599
const RESTORE = 57600
const RESTRICT = 57601
const RESUME = 57602
const RETURNING = 57603
const REVOKE = 57604
const RIGHT = 57605
const ROLLBACK = 57606
const ROLLUP = 57607
const ROW = 57608
const ROWS = 57609
const RSHIFT = 57610
const SAVEPOINT = 57611
const SCATTER = 57612
const SCRUB = 57613
const SEARCH = 57614
const SECOND = 57615
const SELECT = 57616
const SEQUENCES = 57617
const SERIAL = 57618
const SERIALIZABLE = 57619
const SESSION = 57620
const SESSIONS = 57621
const SESSION_USER = 57622
const SET = 57623
const SETTING = 57624
const SETTINGS = 57625
const SHOW = 57626
const SIMILAR = 57627
const SIMPLE = 57628
const SMALLINT = 57629
const SMALLSERIAL = 57630
const SNAPSHOT = 57631
const SOME = 57632
const SPLIT = 57633
const SQL = 57634
const START = 57635
const STATUS = 57636
const STDIN = 57637
const STRICT = 57638
const STRING = 57639
const STORE = 57640
const STORING = 57641
const SUBSTRING = 57642
const SYMMETRIC = 57643
const SYSTEM = 57644
const TABLE = 57645
const TABLES = 57646
const TEMP = 57647
const TEMPLATE = 57648
const TEMPORARY = 57649
const TESTING_RANGES = 57650
const TESTING_RELOCATE = 57651
const TEXT = 57652
const THAN = 57653
const THEN = 57654
const TIME = 57655
const TIMESTAMP = 57656
const TIMESTAMPTZ = 57657
const TO = 57658
const TRAILING = 57659
const TRACE = 57660
const TRANSACTION = 57661
const TREAT = 57662
const TRIM = 57663
const TRUE = 57664
const TRUNCATE = 57665
const TYPE = 57666
const UNBOUNDED = 57667
const UNCOMMITTED = 57668
const UNION = 57669
const UNIQUE = 57670
const UNKNOWN = 57671
const UPDATE = 57672
const UPSERT = 57673
const USE = 57674
const USER = 57675
const USERS = 57676
const USING = 57677
const UUID = 57678
const VALID = 57679
const VALIDATE = 57680
const VALUE = 57681
const VALUES = 57682
const VARCHAR = 57683
const VARIADIC = 57684
const VIEW = 57685
const VARYING = 57686
const WHEN = 57687
const WHERE = 57688
const WINDOW = 57689
const WITH = 57690
const WITHIN = 57691
const WITHOUT = 57692
const WRITE = 57693
const YEAR = 57694
const ZONE = 57695
const NOT_LA = 57696
const WITH_LA = 57697
const AS_LA = 57698
const CONTAINED_BY = 57699
const HAS_SOME_KEY = 57700
const HAS_ALL_KEYS = 57701
const POSTFIXOP = 57702
const UMINUS = 57703
const HELPTOKEN = 57704

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6875

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	382, 54,
	-2, 709,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	153, 559,
	-2, 0,
	-1, 64,
	96, 709,
	157, 709,
	330, 709,
	331, 709,
	-2, 0,
	-1, 74,
	1, 671,
	216, 671,
	261, 671,
	377, 671,
	379, 671,
	381, 671,
	382, 671,
	-2, 684,
	-1, 107,
	4, 711,
	20, 711,
	21, 711,
	23, 711,
	28, 711,
	33, 711,
	34, 711,
	35, 711,
	36, 711,
	37, 711,
	38, 711,
	39, 711,
	40, 711,
	41, 711,
	42, 711,
	44, 711,
	45, 711,
	46, 711,
	47, 711,
	48, 711,
	51, 711,
	52, 711,
	53, 711,
	55, 711,
	56, 711,
	60, 711,
	61, 711,
	62, 711,
	64, 711,
	65, 711,
	66, 711,
	67, 711,
	69, 711,
	71, 711,
	72, 711,
	75, 711,
	76, 711,
	77, 711,
	85, 711,
	86, 711,
	87, 711,
	88, 711,
	89, 711,
	90, 711,
	91, 711,
	92, 711,
	94, 711,
	96, 711,
	98, 711,
	101, 711,
	102, 711,
	104, 711,
	108, 711,
	109, 711,
	110, 711,
	111, 711,
	112, 711,
	113, 711,
	114, 711,
	122, 711,
	123, 711,
	124, 711,
	125, 711,
	126, 711,
	128, 711,
	130, 711,
	135, 711,
	136, 711,
	138, 711,
	141, 711,
	142, 711,
	145, 711,
	146, 711,
	147, 711,
	148, 711,
	151, 711,
	152, 711,
	154, 711,
	157, 711,
	158, 711,
	159, 711,
	160, 711,
	161, 711,
	162, 711,
	163, 711,
	164, 711,
	166, 711,
	169, 711,
	170, 711,
	171, 711,
	173, 711,
	174, 711,
	175, 711,
	176, 711,
	177, 711,
	179, 711,
	180, 711,
	182, 711,
	184, 711,
	185, 711,
	188, 711,
	189, 711,
	192, 711,
	194, 711,
	196, 711,
	197, 711,
	198, 711,
	199, 711,
	200, 711,
	202, 711,
	203, 711,
	204, 711,
	205, 711,
	209, 711,
	210, 711,
	211, 711,
	212, 711,
	213, 711,
	215, 711,
	217, 711,
	218, 711,
	221, 711,
	222, 711,
	224, 711,
	226, 711,
	227, 711,
	228, 711,
	229, 711,
	230, 711,
	231, 711,
	233, 711,
	234, 711,
	235, 711,
	236, 711,
	237, 711,
	239, 711,
	240, 711,
	241, 711,
	242, 711,
	243, 711,
	244, 711,
	245, 711,
	246, 711,
	248, 711,
	249, 711,
	250, 711,
	251, 711,
	252, 711,
	254, 711,
	255, 711,
	256, 711,
	257, 711,
	258, 711,
	259, 711,
	260, 711,
	262, 711,
	264, 711,
	265, 711,
	266, 711,
	267, 711,
	269, 711,
	270, 711,
	271, 711,
	272, 711,
	273, 711,
	275, 711,
	276, 711,
	277, 711,
	278, 711,
	279, 711,
	281, 711,
	282, 711,
	283, 711,
	284, 711,
	286, 711,
	287, 711,
	288, 711,
	289, 711,
	291, 711,
	292, 711,
	293, 711,
	294, 711,
	295, 711,
	296, 711,
	297, 711,
	298, 711,
	299, 711,
	300, 711,
	302, 711,
	304, 711,
	305, 711,
	306, 711,
	307, 711,
	308, 711,
	309, 711,
	310, 711,
	311, 711,
	313, 711,
	314, 711,
	315, 711,
	318, 711,
	319, 711,
	320, 711,
	321, 711,
	323, 711,
	324, 711,
	325, 711,
	326, 711,
	329, 711,
	330, 711,
	331, 711,
	332, 711,
	334, 711,
	336, 711,
	337, 711,
	338, 711,
	339, 711,
	340, 711,
	341, 711,
	344, 711,
	349, 711,
	350, 711,
	351, 711,
	352, 711,
	353, 711,
	-2, 0,
	-1, 124,
	1, 674,
	216, 674,
	261, 674,
	377, 674,
	379, 674,
	381, 674,
	382, 674,
	-2, 683,
	-1, 129,
	1, 608,
	169, 608,
	239, 608,
	243, 608,
	381, 608,
	382, 608,
	-2, 0,
	-1, 131,
	1, 608,
	381, 608,
	382, 608,
	-2, 0,
	-1, 132,
	1, 608,
	381, 608,
	382, 608,
	-2, 0,
	-1, 133,
	1, 612,
	381, 612,
	382, 612,
	-2, 0,
	-1, 140,
	4, 717,
	5, 717,
	6, 717,
	7, 717,
	8, 717,
	9, 717,
	20, 717,
	21, 717,
	23, 717,
	28, 717,
	29, 717,
	33, 717,
	34, 717,
	35, 717,
	36, 717,
	37, 717,
	38, 717,
	39, 717,
	40, 717,
	41, 717,
	42, 717,
	44, 717,
	45, 717,
	46, 717,
	47, 717,
	48, 717,
	49, 717,
	50, 717,
	51, 717,
	52, 717,
	53, 717,
	55, 717,
	56, 717,
	58, 717,
	60, 717,
	61, 717,
	62, 717,
	64, 717,
	65, 717,
	66, 717,
	67, 717,
	69, 717,
	71, 717,
	72, 717,
	74, 717,
	75, 717,
	76, 717,
	77, 717,
	79, 717,
	80, 717,
	81, 717,
	83, 717,
	84, 717,
	85, 717,
	86, 717,
	87, 717,
	88, 717,
	89, 717,
	90, 717,
	91, 717,
	92, 717,
	94, 717,
	96, 717,
	98, 717,
	101, 717,
	102, 717,
	104, 717,
	108, 717,
	109, 717,
	110, 717,
	111, 717,
	112, 717,
	113, 717,
	114, 717,
	115, 717,
	116, 717,
	122, 717,
	123, 717,
	124, 717,
	125, 717,
	126, 717,
	128, 717,
	130, 717,
	133, 717,
	135, 717,
	136, 717,
	138, 717,
	141, 717,
	142, 717,
	145, 717,
	146, 717,
	147, 717,
	148, 717,
	149, 717,
	151, 717,
	152, 717,
	154, 717,
	156, 717,
	157, 717,
	158, 717,
	159, 717,
	160, 717,
	161, 717,
	162, 717,
	163, 717,
	164, 717,
	166, 717,
	168, 717,
	169, 717,
	170, 717,
	171, 717,
	172, 717,
	173, 717,
	174, 717,
	175, 717,
	176, 717,
	177, 717,
	179, 717,
	180, 717,
	182, 717,
	183, 717,
	184, 717,
	185, 717,
	186, 717,
	188, 717,
	189, 717,
	192, 717,
	194, 717,
	195, 717,
	196, 717,
	197, 717,
	198, 717,
	199, 717,
	200, 717,
	201, 717,
	202, 717,
	203, 717,
	204, 717,
	205, 717,
	206, 717,
	208, 717,
	209, 717,
	210, 717,
	211, 717,
	212, 717,
	213, 717,
	215, 717,
	218, 717,
	221, 717,
	222, 717,
	223, 717,
	224, 717,
	225, 717,
	226, 717,
	227, 717,
	228, 717,
	229, 717,
	230, 717,
	231, 717,
	233, 717,
	234, 717,
	235, 717,
	236, 717,
	237, 717,
	239, 717,
	240, 717,
	241, 717,
	242, 717,
	243, 717,
	244, 717,
	245, 717,
	246, 717,
	248, 717,
	249, 717,
	250, 717,
	251, 717,
	252, 717,
	254, 717,
	255, 717,
	256, 717,
	257, 717,
	258, 717,
	259, 717,
	260, 717,
	262, 717,
	263, 717,
	264, 717,
	265, 717,
	266, 717,
	267, 717,
	269, 717,
	270, 717,
	271, 717,
	272, 717,
	273, 717,
	275, 717,
	276, 717,
	277, 717,
	278, 717,
	279, 717,
	280, 717,
	281, 717,
	282, 717,
	283, 717,
	284, 717,
	285, 717,
	286, 717,
	287, 717,
	288, 717,
	289, 717,
	291, 717,
	292, 717,
	293, 717,
	294, 717,
	295, 717,
	296, 717,
	297, 717,
	298, 717,
	299, 717,
	300, 717,
	302, 717,
	304, 717,
	305, 717,
	306, 717,
	307, 717,
	308, 717,
	309, 717,
	310, 717,
	311, 717,
	313, 717,
	314, 717,
	315, 717,
	318, 717,
	319, 717,
	320, 717,
	321, 717,
	322, 717,
	323, 717,
	324, 717,
	325, 717,
	326, 717,
	329, 717,
	330, 717,
	331, 717,
	332, 717,
	333, 717,
	334, 717,
	336, 717,
	337, 717,
	338, 717,
	339, 717,
	340, 717,
	341, 717,
	344, 717,
	349, 717,
	350, 717,
	351, 717,
	352, 717,
	353, 717,
	354, 717,
	364, 717,
	369, 717,
	370, 717,
	371, 717,
	378, 717,
	384, 717,
	-2, 0,
	-1, 143,
	1, 54,
	382, 54,
	-2, 709,
	-1, 515,
	132, 1331,
	316, 1331,
	359, 1331,
	380, 1331,
	-2, 0,
	-1, 516,
	132, 1278,
	316, 1278,
	359, 1278,
	380, 1278,
	-2, 0,
	-1, 518,
	132, 1390,
	316, 1390,
	359, 1390,
	380, 1390,
	-2, 0,
	-1, 520,
	132, 1413,
	316, 1413,
	359, 1413,
	380, 1413,
	-2, 0,
	-1, 527,
	132, 1336,
	316, 1336,
	359, 1336,
	380, 1336,
	-2, 327,
	-1, 553,
	1, 405,
	377, 405,
	379, 405,
	381, 405,
	382, 405,
	-2, 0,
	-1, 554,
	1, 457,
	129, 457,
	377, 457,
	379, 457,
	381, 457,
	382, 457,
	-2, 0,
	-1, 560,
	1, 419,
	377, 419,
	379, 419,
	381, 419,
	382, 419,
	-2, 0,
	-1, 562,
	1, 423,
	377, 423,
	379, 423,
	381, 423,
	382, 423,
	-2, 0,
	-1, 565,
	1, 431,
	377, 431,
	379, 431,
	381, 431,
	382, 431,
	-2, 0,
	-1, 566,
	1, 436,
	377, 436,
	379, 436,
	381, 436,
	382, 436,
	-2, 0,
	-1, 569,
	1, 446,
	377, 446,
	379, 446,
	381, 446,
	382, 446,
	-2, 0,
	-1, 585,
	117, 719,
	129, 719,
	187, 719,
	214, 719,
	-2, 678,
	-1, 588,
	117, 718,
	129, 718,
	187, 718,
	214, 718,
	-2, 675,
	-1, 645,
	378, 1256,
	-2, 1249,
	-1, 646,
	378, 1257,
	-2, 1250,
	-1, 652,
	5, 903,
	378, 903,
	-2, 1465,
	-1, 677,
	5, 862,
	-2, 1434,
	-1, 678,
	5, 897,
	378, 897,
	-2, 1436,
	-1, 679,
	5, 872,
	-2, 1437,
	-1, 680,
	5, 871,
	-2, 1438,
	-1, 681,
	5, 897,
	378, 897,
	-2, 1441,
	-1, 682,
	5, 897,
	378, 897,
	-2, 1442,
	-1, 683,
	5, 898,
	-2, 1445,
	-1, 684,
	5, 854,
	-2, 1446,
	-1, 685,
	5, 854,
	-2, 1447,
	-1, 686,
	5, 879,
	-2, 1451,
	-1, 687,
	5, 864,
	-2, 1452,
	-1, 688,
	5, 865,
	-2, 1453,
	-1, 689,
	5, 855,
	-2, 1459,
	-1, 690,
	5, 856,
	-2, 1460,
	-1, 691,
	5, 857,
	-2, 1461,
	-1, 692,
	5, 858,
	-2, 1462,
	-1, 693,
	5, 859,
	-2, 1463,
	-1, 694,
	5, 860,
	-2, 1464,
	-1, 695,
	5, 854,
	-2, 1471,
	-1, 696,
	5, 863,
	-2, 1476,
	-1, 697,
	5, 861,
	-2, 1479,
	-1, 698,
	5, 895,
	378, 895,
	-2, 1481,
	-1, 699,
	5, 899,
	-2, 1484,
	-1, 700,
	5, 901,
	-2, 1485,
	-1, 701,
	5, 894,
	378, 894,
	-2, 1490,
	-1, 886,
	230, 707,
	-2, 552,
	-1, 891,
	216, 1253,
	-2, 0,
	-1, 926,
	1, 216,
	377, 216,
	379, 216,
	381, 216,
	382, 216,
	-2, 682,
	-1, 933,
	4, 1489,
	10, 1489,
	11, 1489,
	13, 1489,
	14, 1489,
	15, 1489,
	16, 1489,
	17, 1489,
	18, 1489,
	20, 1489,
	21, 1489,
	23, 1489,
	26, 1489,
	28, 1489,
	30, 1489,
	33, 1489,
	34, 1489,
	35, 1489,
	36, 1489,
	37, 1489,
	38, 1489,
	39, 1489,
	40, 1489,
	41, 1489,
	42, 1489,
	44, 1489,
	45, 1489,
	46, 1489,
	47, 1489,
	48, 1489,
	51, 1489,
	52, 1489,
	53, 1489,
	55, 1489,
	56, 1489,
	57, 1489,
	60, 1489,
	61, 1489,
	62, 1489,
	63, 1489,
	64, 1489,
	65, 1489,
	66, 1489,
	67, 1489,
	69, 1489,
	70, 1489,
	71, 1489,
	72, 1489,
	74, 1489,
	75, 1489,
	76, 1489,
	77, 1489,
	85, 1489,
	86, 1489,
	87, 1489,
	88, 1489,
	89, 1489,
	90, 1489,
	91, 1489,
	92, 1489,
	94, 1489,
	96, 1489,
	98, 1489,
	101, 1489,
	102, 1489,
	104, 1489,
	108, 1489,
	109, 1489,
	110, 1489,
	111, 1489,
	112, 1489,
	113, 1489,
	114, 1489,
	118, 1489,
	119, 1489,
	120, 1489,
	121, 1489,
	122, 1489,
	123, 1489,
	124, 1489,
	125, 1489,
	126, 1489,
	127, 1489,
	128, 1489,
	130, 1489,
	133, 1489,
	135, 1489,
	136, 1489,
	138, 1489,
	141, 1489,
	142, 1489,
	145, 1489,
	146, 1489,
	147, 1489,
	148, 1489,
	149, 1489,
	150, 1489,
	151, 1489,
	152, 1489,
	154, 1489,
	156, 1489,
	157, 1489,
	158, 1489,
	159, 1489,
	160, 1489,
	161, 1489,
	162, 1489,
	163, 1489,
	164, 1489,
	166, 1489,
	168, 1489,
	169, 1489,
	170, 1489,
	171, 1489,
	172, 1489,
	173, 1489,
	174, 1489,
	175, 1489,
	176, 1489,
	177, 1489,
	179, 1489,
	180, 1489,
	182, 1489,
	183, 1489,
	184, 1489,
	185, 1489,
	186, 1489,
	188, 1489,
	189, 1489,
	192, 1489,
	193, 1489,
	194, 1489,
	196, 1489,
	197, 1489,
	198, 1489,
	199, 1489,
	200, 1489,
	201, 1489,
	202, 1489,
	203, 1489,
	204, 1489,
	205, 1489,
	209, 1489,
	210, 1489,
	211, 1489,
	212, 1489,
	213, 1489,
	215, 1489,
	218, 1489,
	219, 1489,
	221, 1489,
	222, 1489,
	224, 1489,
	226, 1489,
	227, 1489,
	228, 1489,
	229, 1489,
	230, 1489,
	231, 1489,
	233, 1489,
	234, 1489,
	235, 1489,
	236, 1489,
	237, 1489,
	239, 1489,
	240, 1489,
	241, 1489,
	242, 1489,
	243, 1489,
	244, 1489,
	245, 1489,
	246, 1489,
	248, 1489,
	249, 1489,
	250, 1489,
	251, 1489,
	252, 1489,
	253, 1489,
	254, 1489,
	255, 1489,
	256, 1489,
	257, 1489,
	258, 1489,
	259, 1489,
	260, 1489,
	262, 1489,
	263, 1489,
	264, 1489,
	265, 1489,
	266, 1489,
	267, 1489,
	268, 1489,
	269, 1489,
	270, 1489,
	271, 1489,
	272, 1489,
	273, 1489,
	275, 1489,
	276, 1489,
	277, 1489,
	278, 1489,
	279, 1489,
	281, 1489,
	282, 1489,
	283, 1489,
	284, 1489,
	285, 1489,
	286, 1489,
	287, 1489,
	288, 1489,
	289, 1489,
	291, 1489,
	292, 1489,
	293, 1489,
	294, 1489,
	295, 1489,
	296, 1489,
	297, 1489,
	298, 1489,
	299, 1489,
	300, 1489,
	302, 1489,
	304, 1489,
	305, 1489,
	306, 1489,
	307, 1489,
	308, 1489,
	309, 1489,
	310, 1489,
	311, 1489,
	313, 1489,
	314, 1489,
	315, 1489,
	318, 1489,
	319, 1489,
	320, 1489,
	321, 1489,
	323, 1489,
	324, 1489,
	325, 1489,
	326, 1489,
	329, 1489,
	330, 1489,
	331, 1489,
	332, 1489,
	334, 1489,
	336, 1489,
	337, 1489,
	338, 1489,
	339, 1489,
	340, 1489,
	341, 1489,
	344, 1489,
	349, 1489,
	350, 1489,
	351, 1489,
	352, 1489,
	353, 1489,
	354, 1489,
	355, 1489,
	357, 1489,
	358, 1489,
	359, 1489,
	360, 1489,
	361, 1489,
	362, 1489,
	363, 1489,
	364, 1489,
	366, 1489,
	367, 1489,
	368, 1489,
	369, 1489,
	370, 1489,
	371, 1489,
	372, 1489,
	373, 1489,
	374, 1489,
	376, 1489,
	379, 1489,
	380, 1489,
	383, 1489,
	384, 1489,
	-2, 0,
	-1, 946,
	132, 1390,
	316, 1390,
	359, 1390,
	380, 1390,
	-2, 0,
	-1, 963,
	132, 1413,
	316, 1413,
	359, 1413,
	380, 1413,
	-2, 0,
	-1, 964,
	169, 620,
	239, 620,
	243, 620,
	-2, 315,
	-1, 1036,
	117, 718,
	129, 718,
	187, 718,
	214, 718,
	-2, 679,
	-1, 1117,
	107, 684,
	117, 684,
	129, 684,
	165, 684,
	187, 684,
	214, 684,
	220, 684,
	327, 684,
	-2, 1032,
	-1, 1127,
	378, 1233,
	-2, 1221,
	-1, 1145,
	379, 1145,
	-2, 0,
	-1, 1169,
	169, 620,
	239, 620,
	243, 620,
	-2, 615,
	-1, 1197,
	379, 1145,
	-2, 0,
	-1, 1201,
	107, 684,
	117, 684,
	129, 684,
	165, 684,
	187, 684,
	214, 684,
	220, 684,
	327, 684,
	-2, 785,
	-1, 1344,
	169, 620,
	239, 620,
	243, 620,
	-2, 317,
	-1, 1452,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 938,
	-1, 1453,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 939,
	-1, 1454,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 940,
	-1, 1455,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 941,
	-1, 1456,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 942,
	-1, 1457,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 943,
	-1, 1458,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 944,
	-1, 1459,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 945,
	-1, 1468,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 954,
	-1, 1469,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 955,
	-1, 1470,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 956,
	-1, 1473,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 961,
	-1, 1479,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 963,
	-1, 1481,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 967,
	-1, 1482,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 968,
	-1, 1483,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 969,
	-1, 1484,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 970,
	-1, 1553,
	132, 1156,
	378, 1256,
	-2, 1249,
	-1, 1554,
	132, 1157,
	-2, 1430,
	-1, 1555,
	132, 1158,
	-2, 1335,
	-1, 1556,
	132, 1159,
	-2, 1296,
	-1, 1557,
	132, 1160,
	-2, 1313,
	-1, 1558,
	132, 1161,
	-2, 1334,
	-1, 1559,
	132, 1162,
	-2, 1387,
	-1, 1635,
	1, 786,
	74, 786,
	107, 786,
	117, 786,
	129, 786,
	133, 786,
	137, 786,
	139, 786,
	156, 786,
	165, 786,
	172, 786,
	183, 786,
	187, 786,
	201, 786,
	214, 786,
	216, 786,
	220, 786,
	261, 786,
	263, 786,
	327, 786,
	335, 786,
	346, 786,
	347, 786,
	356, 786,
	377, 786,
	379, 786,
	381, 786,
	382, 786,
	383, 786,
	-2, 785,
	-1, 1783,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 962,
	-1, 1784,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 964,
	-1, 1789,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 965,
	-1, 1807,
	225, 1116,
	-2, 1118,
	-1, 1980,
	230, 707,
	-2, 552,
	-1, 2039,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 966,
	-1, 2044,
	168, 0,
	-2, 982,
	-1, 2053,
	225, 1117,
	-2, 1119,
	-1, 2095,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1009,
	-1, 2096,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1010,
	-1, 2097,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1011,
	-1, 2101,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1015,
	-1, 2102,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1016,
	-1, 2103,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1017,
	-1, 2236,
	168, 0,
	-2, 983,
	-1, 2239,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 986,
	-1, 2240,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 988,
	-1, 2360,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 987,
	-1, 2361,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 989,
	-1, 2368,
	168, 0,
	-2, 1018,
	-1, 2445,
	168, 0,
	-2, 1019,
	-1, 2526,
	36, 0,
	149, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 1433,
	-1, 2612,
	378, 1501,
	-2, 492,
}

const sqlPrivate = 57344

const sqlLast = 43954

var sqlAct = [...]int{

	646, 2594, 2609, 2331, 2608, 2525, 2188, 2534, 2592, 2330,
	2498, 2536, 2072, 2575, 1702, 2450, 2535, 1710, 2341, 2018,
	1241, 2394, 2199, 605, 2290, 2524, 984, 2154, 1777, 2304,
	73, 750, 2221, 1249, 1630, 1284, 2223, 2374, 1338, 1984,
	1685, 644, 182, 880, 1921, 622, 2155, 182, 1986, 1699,
	643, 472, 26, 1339, 1992, 182, 1680, 1199, 1195, 1204,
	2215, 777, 2270, 1900, 182, 1711, 1178, 1684, 1244, 182,
	182, 1873, 1243, 182, 589, 2125, 182, 1648, 1631, 1872,
	636, 1908, 597, 123, 182, 1674, 1818, 1431, 1123, 967,
	1508, 1757, 1237, 1639, 1041, 526, 457, 1533, 1509, 1179,
	1207, 1209, 1582, 1517, 616, 1496, 1262, 621, 1493, 1426,
	1365, 1285, 756, 1409, 916, 1407, 966, 1155, 1159, 1682,
	1527, 913, 906, 1773, 1704, 1681, 1688, 759, 1186, 986,
	1604, 927, 1617, 454, 1549, 182, 182, 615, 738, 124,
	1112, 1042, 1410, 182, 506, 125, 173, 123, 1368, 1408,
	523, 638, 1169, 1256, 411, 1369, 484, 594, 736, 519,
	178, 2305, 1046, 903, 1168, 547, 1806, 2332, 2332, 182,
	182, 182, 182, 779, 1703, 1264, 2139, 182, 182, 2140,
	183, 1264, 2625, 1264, 2624, 702, 2618, 2617, 2618, 2571,
	2570, 2618, 2569, 1232, 1232, 26, 1232, 2551, 593, 2546,
	2545, 2303, 753, 1725, 1725, 593, 2542, 1196, 2037, 40,
	1232, 2001, 588, 2522, 2521, 2493, 498, 1740, 1740, 1733,
	41, 2488, 1228, 2484, 2476, 2355, 123, 1232, 2303, 2002,
	2447, 2425, 2422, 44, 1733, 2303, 1232, 2420, 2405, 2404,
	2382, 2303, 1232, 2303, 1232, 2379, 1606, 2362, 2326, 1232,
	757, 1733, 1725, 2324, 2302, 2630, 2283, 1725, 2303, 51,
	1232, 2238, 2214, 586, 2209, 1733, 1679, 2616, 1679, 585,
	1843, 1844, 1675, 1861, 1862, 1863, 766, 770, 742, 776,
	743, 764, 768, 2135, 603, 2048, 774, 2136, 62, 1725,
	1675, 1725, 2012, 598, 740, 63, 1973, 479, 64, 2128,
	1972, 1897, 1890, 868, 1232, 1232, 1891, 1888, 1887, 1886,
	1810, 1725, 1725, 1725, 1744, 1732, 1811, 1740, 1725, 1733,
	1724, 2626, 2605, 1858, 1725, 1678, 1611, 2494, 1277, 1679,
	1610, 66, 1278, 1740, 140, 2355, 2128, 1605, 1843, 1844,
	2029, 1861, 1862, 1863, 1637, 2108, 2050, 1232, 1973, 1776,
	1707, 1755, 1347, 780, 2235, 1173, 1512, 866, 781, 948,
	945, 1725, 1530, 142, 143, 1057, 1058, 2306, 1817, 944,
	943, 942, 941, 940, 140, 939, 938, 937, 1366, 936,
	935, 934, 744, 741, 1057, 1058, 1265, 1849, 1060, 579,
	578, 1858, 1265, 577, 1265, 545, 544, 543, 542, 541,
	141, 540, 639, 142, 539, 538, 537, 1060, 134, 536,
	1865, 535, 1059, 534, 1531, 135, 533, 67, 532, 182,
	531, 182, 182, 530, 182, 529, 514, 513, 1864, 182,
	512, 1059, 596, 511, 510, 182, 445, 444, 126, 443,
	141, 2598, 442, 127, 69, 441, 70, 426, 182, 182,
	182, 182, 182, 1859, 425, 1849, 417, 930, 416, 415,
	140, 1057, 1058, 414, 1759, 407, 406, 478, 1532, 1529,
	103, 166, 165, 1843, 1844, 164, 163, 162, 126, 182,
	2001, 872, 1065, 161, 1060, 160, 159, 594, 158, 142,
	157, 156, 155, 182, 154, 1372, 1864, 1605, 153, 1057,
	1058, 1065, 1087, 1088, 1089, 1097, 1098, 1099, 1059, 182,
	1270, 152, 151, 150, 884, 1090, 1263, 889, 1400, 182,
	149, 1859, 1060, 1843, 1844, 1101, 141, 148, 1860, 147,
	146, 140, 145, 144, 134, 1916, 979, 1200, 2596, 2541,
	2593, 135, 770, 909, 909, 1534, 1059, 905, 1080, 2523,
	930, 2508, 1079, 1057, 1058, 1546, 1544, 776, 1542, 1076,
	142, 1053, 1540, 2503, 126, 1975, 2442, 1843, 1844, 2423,
	2269, 910, 2348, 2268, 879, 2264, 1060, 920, 1065, 2263,
	2256, 182, 2255, 2254, 2250, 2249, 928, 2248, 949, 2247,
	1849, 2241, 2220, 2122, 2117, 2116, 1860, 141, 2115, 2058,
	1059, 1843, 1844, 982, 1971, 134, 1928, 1082, 1083, 1084,
	1085, 1924, 135, 1895, 1892, 1880, 1065, 1855, 1856, 1857,
	1871, 1842, 1839, 1081, 1528, 1838, 1854, 1852, 1853, 1845,
	1846, 1847, 1848, 1850, 1851, 1706, 1281, 931, 1094, 1102,
	1849, 1836, 932, 1823, 1080, 1822, 1807, 1635, 1053, 1131,
	1738, 594, 1504, 751, 1198, 1052, 1859, 1100, 877, 2619,
	1037, 1197, 1124, 2603, 1115, 2583, 2582, 1248, 2074, 2513,
	1065, 2512, 1036, 964, 2511, 1092, 2479, 2471, 961, 2470,
	2461, 2459, 1080, 977, 1849, 1855, 1856, 1857, 770, 2615,
	872, 2437, 2436, 1032, 1854, 1852, 1853, 1845, 1846, 1847,
	1848, 1850, 1851, 2435, 140, 2391, 1859, 2370, 1091, 2356,
	1843, 1844, 2335, 2323, 980, 2309, 2261, 2197, 1849, 1081,
	2194, 1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067,
	931, 1860, 1038, 142, 2347, 932, 182, 586, 182, 1039,
	1367, 1772, 1086, 585, 2193, 1063, 1064, 1066, 1067, 1771,
	2191, 2163, 2016, 2162, 1049, 1050, 2143, 1081, 2131, 2043,
	1961, 182, 182, 1858, 1505, 1054, 1955, 1941, 1940, 1926,
	141, 1896, 1870, 1832, 1095, 1177, 1184, 1831, 134, 1828,
	1803, 1860, 1798, 1498, 1160, 135, 1163, 1622, 1594, 1538,
	1941, 594, 1276, 1127, 1240, 752, 1176, 1167, 1153, 1157,
	1158, 1152, 1151, 1150, 1161, 1149, 1148, 1147, 126, 1146,
	1145, 1144, 1143, 1182, 1164, 1142, 1141, 1140, 1068, 1069,
	1061, 1062, 1063, 1064, 1066, 1067, 1139, 1849, 1138, 1854,
	1852, 1853, 1845, 1846, 1847, 1848, 1850, 1851, 123, 1137,
	1136, 1124, 1135, 1093, 1128, 1116, 1071, 1072, 1078, 1077,
	1073, 1074, 1075, 1096, 1115, 1070, 1068, 1069, 1061, 1062,
	1063, 1064, 1066, 1067, 960, 952, 930, 182, 757, 1205,
	924, 2453, 2265, 779, 2354, 2243, 2219, 2138, 2134, 182,
	1172, 1853, 1845, 1846, 1847, 1848, 1850, 1851, 1202, 1194,
	1735, 1170, 182, 1859, 1809, 1623, 1174, 2014, 182, 1113,
	182, 1198, 182, 1217, 878, 976, 182, 1914, 1743, 1987,
	1247, 2358, 1061, 1062, 1063, 1064, 1066, 1067, 2357, 1230,
	2351, 607, 1675, 1239, 1843, 1844, 1845, 1846, 1847, 1848,
	1850, 1851, 1545, 1543, 1233, 1541, 2141, 1057, 1058, 1539,
	2003, 1282, 1200, 1030, 1165, 1353, 1964, 182, 182, 1166,
	1035, 1742, 1958, 1954, 930, 1894, 182, 1893, 1782, 182,
	1060, 1253, 1847, 1848, 1850, 1851, 1404, 973, 1860, 1133,
	2019, 1245, 2375, 1703, 1357, 1356, 2075, 1366, 1363, 1518,
	779, 1156, 1814, 1024, 1059, 2601, 1238, 2600, 1997, 182,
	2150, 2506, 1729, 2567, 182, 2566, 431, 2483, 1411, 182,
	182, 2317, 182, 419, 182, 770, 182, 1257, 182, 1257,
	905, 1745, 2416, 731, 2026, 729, 2329, 1267, 2415, 182,
	1269, 727, 1130, 1025, 1272, 182, 182, 1231, 2413, 752,
	1210, 1210, 1211, 1211, 930, 733, 724, 1210, 2412, 1211,
	1016, 1373, 2182, 2179, 1397, 2147, 931, 2146, 704, 1827,
	1826, 932, 1825, 780, 1824, 1258, 182, 432, 781, 703,
	779, 1255, 1218, 1360, 1785, 1728, 1854, 1852, 1853, 1845,
	1846, 1847, 1848, 1850, 1851, 1670, 651, 1666, 1663, 1354,
	1480, 1171, 865, 1215, 1374, 1598, 2613, 1401, 423, 974,
	1597, 1441, 1700, 581, 1279, 592, 123, 1398, 1033, 2186,
	1495, 1216, 1340, 1495, 1641, 1280, 961, 2187, 1641, 1341,
	1968, 1212, 1212, 2174, 446, 1235, 1344, 1640, 1212, 493,
	2482, 1440, 2015, 706, 1370, 1358, 1843, 1844, 1502, 1861,
	1862, 1863, 975, 1500, 931, 167, 1332, 1413, 1399, 932,
	1377, 584, 2234, 2519, 1378, 1381, 594, 1388, 1056, 583,
	1382, 594, 1383, 591, 1384, 959, 1385, 2165, 1386, 1361,
	780, 2396, 584, 1198, 1259, 781, 1010, 1534, 2065, 1432,
	1439, 1239, 182, 1649, 182, 1392, 1394, 182, 2558, 1858,
	1405, 1995, 2068, 1412, 1774, 1775, 586, 1406, 182, 586,
	586, 1994, 1422, 2490, 1396, 1423, 1424, 779, 1221, 450,
	182, 1963, 873, 875, 182, 1011, 1430, 182, 593, 1057,
	1058, 182, 1957, 1515, 931, 182, 2031, 1219, 2491, 932,
	170, 182, 2066, 1513, 1518, 2464, 1994, 2566, 182, 779,
	434, 433, 1060, 182, 594, 2578, 2027, 1736, 1154, 1530,
	780, 182, 2419, 1849, 1577, 781, 2585, 1614, 1503, 182,
	1652, 1642, 1506, 1624, 1694, 989, 1059, 2595, 1625, 1534,
	182, 2593, 182, 1952, 182, 449, 1226, 182, 1660, 182,
	1208, 182, 182, 1748, 182, 182, 1668, 1560, 2025, 930,
	408, 1034, 1225, 182, 1864, 1750, 171, 950, 1851, 2366,
	1672, 1531, 1264, 954, 1029, 757, 1628, 2472, 2332, 1534,
	609, 1067, 1603, 1223, 418, 1653, 1655, 1751, 1705, 1859,
	1705, 757, 1601, 1609, 1636, 590, 1600, 1615, 1110, 1749,
	607, 1224, 770, 1619, 1620, 1830, 1065, 1658, 770, 424,
	725, 1202, 725, 1664, 420, 776, 2166, 1645, 726, 1367,
	1364, 1222, 1671, 1567, 421, 1532, 1529, 1213, 1213, 735,
	1618, 2473, 734, 725, 1213, 1291, 1015, 1651, 1634, 1717,
	123, 2172, 909, 970, 909, 1638, 123, 1714, 1185, 1787,
	593, 2030, 1494, 779, 2230, 172, 1362, 780, 776, 776,
	1731, 182, 781, 1709, 1860, 1720, 1477, 997, 2397, 1718,
	2576, 1719, 1080, 1721, 582, 2537, 1501, 182, 182, 182,
	1723, 182, 1730, 1105, 1106, 1107, 1108, 1109, 928, 780,
	1727, 1726, 1737, 1118, 781, 448, 1843, 1844, 2565, 2563,
	492, 1376, 1534, 1126, 1739, 1023, 2340, 1189, 1055, 2538,
	182, 1697, 2032, 971, 1756, 958, 168, 972, 1345, 1161,
	2557, 1164, 955, 947, 1045, 451, 2577, 1650, 409, 981,
	1192, 572, 1158, 1157, 1967, 447, 2407, 2586, 2298, 931,
	1291, 1291, 2406, 1746, 932, 1795, 1187, 1081, 2579, 602,
	2389, 2456, 123, 1855, 1856, 1857, 169, 1190, 1044, 2149,
	1491, 1793, 1854, 1852, 1853, 1845, 1846, 1847, 1848, 1850,
	1851, 503, 1937, 990, 481, 1188, 1489, 2299, 2259, 1475,
	1478, 1528, 1189, 1265, 1761, 776, 1763, 1933, 770, 1698,
	1910, 482, 1762, 1764, 482, 2591, 1254, 1246, 2313, 410,
	1768, 1767, 1242, 1760, 2539, 1192, 705, 2064, 1770, 594,
	1044, 2499, 991, 1849, 573, 988, 1474, 1781, 1180, 1180,
	1391, 1616, 1040, 2316, 1510, 607, 1044, 2556, 1043, 1418,
	2315, 2604, 1190, 780, 485, 965, 1348, 1191, 781, 2200,
	1911, 2342, 485, 1922, 1790, 485, 2390, 1069, 1061, 1062,
	1063, 1064, 1066, 1067, 1791, 1045, 1943, 490, 1796, 1485,
	175, 882, 2540, 486, 1788, 490, 1786, 1486, 490, 1487,
	881, 486, 1020, 1492, 486, 1816, 1942, 501, 891, 1859,
	1043, 998, 1780, 594, 1802, 970, 1613, 182, 779, 1612,
	2294, 2260, 2295, 182, 182, 487, 1043, 182, 495, 1898,
	1813, 648, 182, 487, 1904, 182, 487, 1045, 1419, 1909,
	2590, 2312, 1191, 182, 1905, 1476, 2104, 1923, 489, 182,
	182, 182, 2297, 970, 902, 182, 489, 574, 182, 489,
	900, 2300, 591, 2189, 182, 182, 182, 182, 182, 1918,
	2333, 1966, 1021, 2314, 182, 2271, 1902, 182, 2387, 1903,
	2126, 182, 1906, 1907, 1860, 971, 1912, 1537, 2369, 972,
	182, 1917, 1877, 1878, 1879, 1934, 477, 34, 1792, 1352,
	182, 2258, 182, 1927, 182, 1794, 182, 3, 182, 2388,
	1913, 2185, 182, 1488, 1874, 1899, 2042, 182, 1969, 182,
	1490, 1953, 1019, 1008, 757, 1837, 182, 1022, 1006, 1960,
	757, 757, 970, 1974, 757, 1976, 1797, 575, 1741, 182,
	930, 1677, 2296, 1669, 1662, 1028, 1027, 594, 572, 1929,
	1350, 930, 182, 2105, 1977, 953, 1930, 1875, 1981, 2106,
	1040, 1765, 1389, 1351, 1380, 488, 602, 867, 1938, 1951,
	576, 870, 1134, 488, 1999, 500, 488, 607, 607, 1536,
	871, 1956, 723, 1852, 1853, 1845, 1846, 1847, 1848, 1850,
	1851, 182, 2533, 2011, 1004, 1229, 494, 1970, 780, 1978,
	440, 2496, 971, 781, 2020, 1938, 972, 1990, 2287, 1996,
	1002, 476, 33, 2170, 2168, 1982, 475, 30, 2004, 901,
	435, 491, 2148, 1983, 1238, 899, 474, 79, 1000, 491,
	2010, 573, 491, 1238, 994, 2005, 2006, 1701, 2007, 2008,
	34, 182, 1014, 2021, 2045, 2024, 1415, 1695, 1420, 1693,
	898, 762, 1018, 1007, 1427, 2013, 473, 78, 1005, 1274,
	470, 22, 471, 23, 1442, 1443, 1444, 1445, 1446, 1447,
	1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
	1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
	1468, 1469, 1470, 1471, 1472, 1473, 2035, 1479, 2036, 1481,
	1482, 1483, 1484, 2033, 2060, 2061, 2062, 2051, 2022, 2023,
	2054, 1273, 2049, 1271, 728, 730, 1507, 469, 28, 1185,
	931, 2028, 182, 1118, 1003, 932, 468, 20, 182, 2076,
	2081, 931, 2078, 2067, 2069, 2070, 932, 182, 182, 1268,
	1001, 2083, 1547, 1548, 574, 1266, 1564, 1227, 1576, 1578,
	1583, 1586, 1587, 1588, 2110, 33, 1432, 2079, 999, 1220,
	30, 1214, 2137, 2111, 993, 1432, 2084, 466, 19, 1013,
	79, 467, 18, 2055, 461, 15, 1985, 2430, 1189, 2109,
	897, 2133, 462, 16, 182, 747, 182, 460, 14, 123,
	2129, 1047, 2142, 2160, 182, 2184, 2127, 930, 2114, 2130,
	78, 1192, 2159, 2124, 22, 748, 23, 465, 12, 2195,
	2175, 1326, 182, 182, 2180, 2567, 2145, 1187, 1778, 2192,
	2183, 2353, 1325, 2202, 575, 2210, 2352, 2152, 1190, 757,
	182, 436, 2161, 1371, 459, 10, 2216, 2213, 480, 1290,
	182, 779, 182, 182, 2201, 2176, 1188, 2432, 779, 2176,
	1657, 2190, 2208, 1766, 2204, 2176, 2173, 576, 2205, 1291,
	1641, 28, 2144, 2196, 2169, 1641, 2171, 2203, 1048, 1656,
	20, 2206, 1902, 437, 1654, 2232, 2212, 2211, 464, 7,
	463, 6, 749, 2217, 1779, 182, 1328, 458, 5, 2237,
	1673, 1665, 1661, 1402, 1403, 2466, 1291, 2306, 992, 2444,
	1057, 1058, 2227, 438, 2418, 439, 2272, 1051, 1191, 2233,
	502, 19, 1667, 1057, 1058, 18, 1326, 1326, 15, 1714,
	757, 1659, 2495, 1060, 2338, 1708, 16, 1325, 1325, 1696,
	1692, 14, 1602, 2574, 1343, 1283, 2589, 1843, 1844, 182,
	1057, 1058, 182, 2381, 1290, 1290, 1291, 1059, 1753, 1752,
	2229, 12, 779, 182, 182, 2277, 2218, 182, 182, 182,
	1059, 2123, 2071, 2257, 1753, 2017, 1919, 1889, 1754, 1599,
	1596, 1595, 1526, 1121, 182, 1119, 2245, 931, 10, 182,
	2063, 182, 932, 182, 182, 182, 1979, 2281, 1131, 1129,
	182, 1328, 1328, 182, 2278, 1026, 930, 2307, 2273, 2286,
	2310, 1017, 2274, 2276, 182, 182, 1012, 1009, 995, 957,
	1346, 1291, 930, 2279, 2160, 580, 2395, 483, 1379, 996,
	1915, 780, 7, 2159, 6, 1621, 781, 2489, 780, 2334,
	2251, 5, 1829, 781, 2328, 2339, 2449, 2365, 2344, 1535,
	1132, 55, 2157, 2160, 625, 2288, 757, 1291, 1291, 2160,
	2151, 1687, 2159, 2161, 1686, 782, 1291, 1291, 2159, 2343,
	1355, 2337, 647, 2345, 1551, 1433, 722, 2275, 649, 1288,
	650, 2349, 2359, 1289, 1162, 2350, 637, 1783, 1784, 2282,
	1286, 925, 2161, 1789, 1712, 1359, 1499, 1516, 2161, 1291,
	2320, 1812, 1125, 617, 629, 628, 1514, 2325, 182, 2311,
	182, 951, 779, 182, 1920, 1993, 2346, 2371, 1417, 1769,
	1414, 182, 1989, 2167, 422, 1808, 1840, 779, 923, 1574,
	1566, 1815, 2378, 1562, 1819, 1031, 1183, 1111, 1713, 2336,
	978, 2364, 780, 2000, 1734, 1175, 1425, 781, 2383, 746,
	745, 1833, 2602, 2399, 2380, 1349, 2401, 1747, 1104, 1103,
	732, 182, 2458, 969, 930, 2160, 1421, 968, 182, 1239,
	2398, 1936, 2584, 2385, 2159, 2465, 182, 182, 930, 930,
	2164, 2505, 139, 2421, 136, 1118, 931, 138, 2400, 137,
	2428, 932, 1583, 1583, 1583, 2417, 182, 2160, 1965, 82,
	631, 182, 931, 2433, 2161, 2429, 2159, 932, 182, 2439,
	2424, 2427, 2438, 32, 31, 102, 101, 100, 1180, 99,
	98, 2460, 97, 607, 96, 95, 2446, 94, 2393, 2454,
	2176, 2440, 2441, 182, 182, 2452, 2161, 93, 92, 91,
	182, 2455, 179, 90, 89, 2410, 2411, 412, 930, 2409,
	2477, 88, 2462, 182, 87, 427, 86, 930, 930, 85,
	2443, 84, 2475, 524, 452, 1568, 1291, 2478, 2426, 496,
	179, 521, 2481, 504, 2480, 81, 509, 80, 29, 1184,
	182, 25, 182, 106, 528, 182, 594, 779, 24, 1275,
	77, 76, 780, 2431, 27, 2486, 2487, 781, 2463, 1327,
	17, 11, 2514, 21, 60, 2516, 61, 780, 59, 2469,
	58, 2502, 781, 57, 13, 182, 1991, 53, 2515, 2520,
	2518, 52, 50, 49, 48, 1342, 47, 2517, 2532, 9,
	2531, 105, 182, 182, 182, 739, 739, 2530, 2009, 45,
	182, 2160, 2550, 412, 931, 2543, 8, 2474, 2507, 932,
	2159, 43, 2555, 42, 182, 607, 607, 2552, 931, 931,
	104, 2553, 2554, 932, 932, 118, 115, 2562, 607, 412,
	412, 772, 412, 2564, 2568, 117, 114, 179, 869, 116,
	2161, 120, 119, 112, 2034, 110, 111, 2573, 113, 1427,
	109, 108, 2504, 2572, 1287, 2038, 2581, 121, 2039, 2587,
	2588, 2580, 39, 38, 1327, 1327, 37, 2501, 36, 35,
	2044, 2, 1, 0, 779, 0, 779, 0, 0, 2052,
	0, 0, 0, 0, 0, 0, 2606, 2056, 931, 0,
	2009, 0, 2607, 932, 2614, 0, 0, 931, 931, 0,
	2620, 2622, 932, 932, 2623, 2621, 0, 1714, 2629, 2627,
	2080, 0, 2631, 0, 2082, 2628, 0, 2547, 2548, 2549,
	0, 0, 0, 0, 0, 0, 0, 780, 0, 0,
	0, 600, 781, 572, 0, 2597, 0, 2599, 0, 0,
	0, 0, 0, 0, 1291, 1119, 0, 2112, 2113, 0,
	0, 602, 0, 1520, 0, 0, 2119, 2120, 2121, 1287,
	1287, 0, 0, 0, 0, 0, 1552, 1552, 1565, 40,
	0, 0, 1585, 0, 0, 1326, 1589, 1590, 1592, 0,
	41, 0, 0, 2132, 601, 0, 1325, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	1291, 0, 1193, 1290, 0, 0, 0, 0, 0, 0,
	0, 0, 1326, 2153, 0, 0, 573, 0, 40, 51,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1290, 0, 44, 0, 0, 0, 0, 0, 62, 0,
	1328, 0, 0, 1291, 780, 63, 780, 479, 64, 781,
	0, 781, 1326, 0, 0, 0, 0, 1180, 51, 0,
	0, 0, 0, 1325, 1568, 1568, 607, 0, 0, 528,
	0, 886, 528, 0, 892, 0, 0, 1328, 0, 895,
	1290, 66, 0, 0, 0, 412, 0, 62, 0, 0,
	0, 0, 0, 0, 63, 0, 479, 64, 528, 528,
	412, 917, 869, 0, 0, 2236, 0, 1799, 1800, 2239,
	2240, 0, 0, 2242, 0, 0, 0, 1326, 0, 574,
	2244, 0, 2246, 1057, 1058, 0, 0, 1328, 1325, 528,
	66, 0, 0, 0, 0, 0, 0, 0, 2253, 0,
	1568, 1568, 1568, 528, 0, 1290, 1060, 1843, 1844, 0,
	626, 74, 0, 1326, 1326, 0, 0, 0, 0, 956,
	0, 0, 1326, 1326, 1325, 1325, 0, 67, 0, 528,
	1059, 2262, 0, 1325, 1325, 0, 0, 0, 0, 0,
	0, 1290, 1290, 1866, 1867, 1868, 0, 0, 0, 0,
	1290, 1290, 1328, 127, 69, 1326, 70, 599, 0, 575,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 0,
	140, 0, 0, 0, 1387, 74, 67, 478, 0, 0,
	103, 2308, 0, 1290, 0, 0, 0, 0, 1328, 1328,
	0, 412, 576, 0, 0, 0, 0, 1328, 1328, 142,
	1065, 0, 127, 69, 0, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1057, 1058, 140,
	0, 0, 0, 0, 1849, 0, 478, 0, 0, 103,
	1328, 0, 0, 0, 587, 0, 141, 595, 0, 0,
	1060, 0, 0, 0, 134, 0, 0, 0, 142, 0,
	0, 135, 0, 758, 74, 0, 0, 2360, 2361, 0,
	0, 0, 0, 0, 1059, 0, 1080, 0, 0, 0,
	1079, 0, 0, 1801, 126, 0, 0, 0, 0, 0,
	1804, 0, 0, 0, 0, 141, 0, 0, 2373, 0,
	1859, 0, 0, 134, 2376, 0, 0, 1820, 1821, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1568, 1568, 0,
	0, 0, 1326, 126, 0, 1082, 1083, 1084, 1085, 0,
	0, 0, 0, 1325, 1065, 0, 0, 0, 2408, 0,
	0, 1081, 0, 0, 0, 0, 509, 1869, 739, 0,
	1290, 0, 0, 0, 1585, 1585, 1585, 0, 0, 1882,
	2040, 2041, 0, 0, 0, 1860, 0, 0, 0, 0,
	0, 412, 412, 0, 0, 0, 1568, 1568, 1568, 1568,
	1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
	1568, 1568, 1568, 1568, 1568, 0, 1568, 1328, 0, 0,
	1080, 0, 0, 1327, 1843, 1844, 0, 1861, 1862, 1863,
	0, 0, 0, 0, 2457, 0, 0, 0, 0, 2085,
	2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095,
	2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 0, 2107,
	1327, 0, 1061, 1062, 1063, 1064, 1066, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1858, 607, 0,
	1086, 0, 0, 0, 0, 0, 1845, 1846, 1847, 1848,
	1850, 1851, 0, 0, 0, 1081, 0, 179, 0, 0,
	0, 0, 0, 0, 0, 2298, 0, 0, 2291, 412,
	1327, 0, 0, 0, 0, 0, 0, 0, 1287, 2289,
	0, 0, 1252, 0, 2293, 0, 0, 0, 412, 0,
	412, 0, 412, 2529, 2529, 0, 1260, 0, 0, 0,
	0, 1849, 0, 0, 2299, 0, 0, 0, 0, 2544,
	0, 0, 0, 0, 0, 1287, 0, 0, 0, 0,
	1326, 0, 0, 0, 0, 0, 0, 2292, 0, 2529,
	0, 1325, 0, 0, 0, 1327, 0, 528, 179, 0,
	0, 0, 1864, 0, 0, 0, 179, 595, 1290, 528,
	0, 0, 0, 1070, 1068, 1069, 1061, 1062, 1063, 1064,
	1066, 1067, 0, 0, 0, 1287, 0, 1859, 0, 0,
	0, 1327, 1327, 0, 0, 0, 1326, 2529, 0, 528,
	1327, 1327, 0, 0, 528, 0, 0, 1325, 0, 179,
	528, 0, 528, 0, 528, 1328, 528, 0, 528, 0,
	0, 0, 0, 0, 1290, 0, 2610, 0, 0, 1390,
	0, 0, 0, 1327, 0, 528, 528, 2294, 2610, 2295,
	0, 2610, 2610, 0, 0, 0, 0, 455, 0, 1326,
	1287, 0, 0, 0, 0, 0, 2118, 0, 0, 0,
	1325, 0, 1860, 0, 0, 0, 528, 0, 40, 2297,
	0, 1328, 0, 0, 0, 0, 0, 1290, 2300, 41,
	0, 0, 0, 0, 0, 0, 1287, 1287, 0, 0,
	0, 0, 44, 0, 0, 1287, 1287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 1287, 1114,
	2178, 1117, 0, 0, 0, 0, 2181, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 1855, 1856, 1857, 63, 0, 479, 64, 0, 2296,
	1854, 1852, 1853, 1845, 1846, 1847, 1848, 1850, 1851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 509, 0, 739, 0, 0, 869, 0, 1568,
	66, 1843, 1844, 0, 1861, 1862, 1863, 0, 412, 0,
	1327, 0, 0, 0, 0, 0, 0, 2047, 0, 0,
	1633, 0, 0, 0, 412, 0, 0, 412, 0, 0,
	0, 1646, 0, 0, 0, 412, 0, 0, 0, 0,
	1568, 412, 2368, 0, 0, 0, 1843, 1844, 412, 1861,
	1862, 1863, 0, 1676, 1858, 0, 0, 0, 0, 0,
	0, 1683, 2046, 0, 0, 0, 40, 0, 0, 869,
	0, 0, 0, 0, 0, 0, 74, 41, 129, 0,
	412, 1201, 1716, 2392, 528, 0, 67, 528, 0, 528,
	44, 412, 412, 0, 1722, 869, 0, 0, 0, 1858,
	0, 0, 0, 1646, 131, 1287, 0, 0, 0, 0,
	1568, 0, 127, 69, 46, 70, 51, 0, 1849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	0, 0, 0, 0, 0, 0, 478, 54, 0, 103,
	0, 56, 0, 0, 0, 62, 0, 0, 132, 0,
	0, 0, 63, 2445, 122, 64, 0, 0, 142, 1864,
	0, 0, 0, 1849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 0,
	0, 0, 0, 0, 1859, 0, 0, 0, 66, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 1758, 0, 134, 1864, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 0, 0, 0, 412, 412, 412,
	0, 412, 0, 0, 0, 0, 0, 0, 1327, 1859,
	0, 0, 0, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 2377, 0, 1860,
	0, 0, 0, 0, 0, 1843, 1844, 0, 1861, 1862,
	1863, 0, 0, 0, 67, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 1327, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2403, 0, 0, 0, 0, 75,
	127, 69, 0, 70, 1860, 71, 0, 133, 2414, 0,
	0, 0, 72, 0, 0, 0, 0, 140, 1858, 0,
	0, 0, 0, 1287, 83, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 74, 0, 130, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 1855, 1856,
	1857, 0, 0, 0, 0, 0, 0, 1854, 1852, 1853,
	1845, 1846, 1847, 1848, 1850, 1851, 107, 587, 0, 0,
	587, 587, 0, 0, 0, 128, 0, 0, 0, 1287,
	0, 0, 1849, 141, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 1855, 1856, 1857, 0, 0, 135, 0,
	0, 0, 1854, 1852, 1853, 1845, 1846, 1847, 1848, 1850,
	1851, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 41, 1497, 4, 0, 0, 412, 0, 2492,
	0, 0, 1287, 412, 412, 44, 595, 412, 0, 0,
	0, 1117, 1633, 0, 0, 1633, 0, 0, 1859, 0,
	0, 0, 0, 1925, 0, 2509, 2510, 0, 0, 412,
	1931, 1932, 0, 0, 0, 1646, 0, 0, 1939, 0,
	0, 0, 0, 0, 1944, 1945, 1947, 1949, 1950, 0,
	0, 0, 0, 0, 412, 0, 0, 1959, 0, 0,
	0, 1962, 0, 0, 0, 0, 0, 0, 0, 479,
	412, 0, 0, 0, 0, 0, 0, 0, 758, 0,
	1252, 0, 1252, 0, 528, 0, 1980, 0, 412, 0,
	0, 0, 1988, 1860, 1201, 0, 0, 412, 0, 1998,
	0, 0, 0, 66, 0, 0, 412, 74, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 1758,
	1057, 1058, 0, 1087, 1088, 1089, 1097, 1098, 1099, 0,
	0, 0, 1758, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 1101, 74, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1059, 74, 0,
	0, 412, 0, 1079, 74, 0, 0, 40, 0, 0,
	1076, 0, 1855, 1856, 1857, 0, 0, 0, 41, 67,
	0, 1854, 1852, 1853, 1845, 1846, 1847, 1848, 1850, 1851,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 69, 0, 70, 0,
	0, 2073, 0, 0, 0, 0, 0, 51, 1082, 1083,
	1084, 1085, 140, 0, 0, 0, 0, 1065, 0, 478,
	0, 0, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 1094,
	1102, 142, 0, 63, 0, 479, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1092, 0, 141, 66,
	0, 0, 412, 1080, 0, 0, 134, 0, 1633, 0,
	0, 0, 0, 135, 0, 0, 0, 869, 1633, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1091,
	0, 0, 2156, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 2177, 0, 0, 0, 2177,
	0, 0, 0, 0, 0, 2177, 0, 0, 0, 0,
	0, 0, 0, 1086, 1646, 0, 1252, 0, 0, 1497,
	0, 0, 0, 0, 2198, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 67, 0, 0, 0, 1117,
	0, 0, 412, 412, 0, 1095, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2224, 127, 69, 0, 70, 0, 0, 0, 0, 0,
	2226, 0, 2228, 412, 0, 0, 0, 0, 140, 0,
	0, 0, 0, 0, 0, 478, 0, 0, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 0, 0, 1117, 1093, 2252, 0, 1071, 1072, 1078,
	1077, 1073, 1074, 1075, 1096, 0, 1070, 1068, 1069, 1061,
	1062, 1063, 1064, 1066, 1067, 0, 0, 0, 0, 0,
	0, 0, 0, 1885, 141, 0, 0, 758, 0, 0,
	0, 0, 134, 758, 758, 0, 0, 758, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 412,
	0, 0, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 1633, 869, 0, 0, 2284, 2285, 1646,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 2156, 869, 0, 0, 0, 74, 2318,
	0, 2319, 0, 412, 2321, 2322, 0, 0, 0, 0,
	412, 0, 0, 2327, 0, 0, 0, 0, 0, 0,
	0, 0, 2156, 74, 869, 1683, 0, 74, 2156, 0,
	0, 0, 0, 0, 0, 0, 0, 595, 0, 0,
	1057, 1058, 0, 1087, 1088, 1089, 1097, 1098, 1099, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1059, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	1076, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1646, 0,
	2384, 0, 0, 2386, 0, 0, 0, 0, 0, 0,
	0, 412, 0, 0, 2156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 1083,
	1084, 1085, 0, 0, 0, 0, 0, 1065, 0, 0,
	2177, 0, 0, 0, 0, 0, 2156, 0, 0, 0,
	0, 412, 0, 0, 0, 0, 0, 0, 869, 1094,
	1102, 0, 0, 0, 0, 0, 2224, 2224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 2451, 0, 0, 0,
	0, 1633, 0, 0, 0, 0, 1092, 0, 1252, 0,
	0, 0, 0, 1080, 0, 0, 0, 74, 0, 1057,
	1058, 0, 1087, 1088, 1089, 1097, 1098, 1099, 0, 0,
	0, 0, 758, 2467, 2468, 0, 0, 0, 0, 1091,
	412, 0, 1060, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 2485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 0,
	0, 0, 1079, 1086, 0, 0, 0, 0, 0, 1076,
	2500, 0, 869, 0, 0, 412, 0, 0, 1081, 0,
	1057, 1058, 0, 1087, 1088, 1089, 1097, 1098, 1099, 0,
	2156, 0, 0, 0, 0, 1095, 1090, 0, 0, 0,
	0, 0, 0, 1060, 0, 2451, 1101, 0, 0, 0,
	0, 0, 0, 758, 0, 0, 0, 1082, 1083, 1084,
	1085, 0, 869, 869, 869, 0, 1065, 1059, 0, 0,
	412, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	1076, 0, 0, 0, 2561, 0, 0, 0, 1094, 1102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 1071, 1072, 1078,
	1077, 1073, 1074, 1075, 1096, 0, 1070, 1068, 1069, 1061,
	1062, 1063, 1064, 1066, 1067, 1092, 0, 0, 1082, 1083,
	1084, 1085, 1080, 1884, 0, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1094,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 758,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 1092, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 1081, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 0, 1095, 1071, 1072, 1078, 1077,
	1073, 1074, 1075, 1096, 0, 1070, 1068, 1069, 1061, 1062,
	1063, 1064, 1066, 1067, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 1071, 1072, 1078,
	1077, 1073, 1074, 1075, 1096, 0, 1070, 1068, 1069, 1061,
	1062, 1063, 1064, 1066, 1067, 0, 0, 0, 0, 74,
	0, 0, 0, 1883, 0, 0, 0, 0, 0, 0,
	0, 0, 2434, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	778, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 784, 186,
	785, 786, 787, 788, 347, 789, 790, 791, 792, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 793,
	191, 354, 355, 192, 193, 794, 795, 356, 357, 358,
	796, 194, 359, 797, 783, 798, 195, 196, 197, 0,
	199, 200, 201, 198, 799, 202, 1117, 203, 204, 800,
	707, 205, 206, 207, 801, 802, 804, 803, 805, 806,
	807, 208, 209, 413, 210, 360, 211, 361, 362, 808,
	212, 809, 213, 810, 214, 811, 812, 215, 216, 813,
	217, 814, 0, 815, 363, 218, 220, 219, 221, 364,
	365, 816, 708, 817, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 818, 225, 819, 820, 709,
	821, 226, 369, 822, 370, 823, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 711, 824, 373, 234, 825,
	231, 826, 710, 232, 374, 233, 375, 376, 377, 378,
	379, 827, 380, 828, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 829, 242, 241, 830, 383, 714,
	243, 244, 715, 831, 245, 246, 832, 833, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 834, 835, 836, 385, 257, 386, 258, 259,
	837, 260, 838, 839, 261, 840, 841, 262, 387, 718,
	263, 719, 388, 264, 265, 266, 267, 268, 842, 269,
	389, 270, 390, 271, 843, 272, 273, 274, 275, 276,
	391, 277, 278, 844, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 845, 291, 720,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	846, 304, 393, 303, 305, 306, 847, 307, 295, 296,
	308, 721, 309, 394, 395, 310, 848, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 849, 318, 850,
	319, 320, 321, 322, 323, 324, 325, 326, 851, 398,
	399, 400, 852, 853, 327, 328, 401, 402, 854, 329,
	330, 331, 332, 855, 856, 333, 334, 335, 336, 857,
	337, 858, 403, 338, 339, 340, 404, 405, 859, 860,
	341, 861, 862, 863, 864, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 778, 0, 0, 0,
	0, 0, 1626, 0, 0, 0, 0, 0, 0, 0,
	0, 1627, 184, 185, 784, 186, 785, 786, 787, 788,
	347, 789, 790, 791, 792, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 793, 191, 354, 355, 192,
	193, 794, 795, 356, 357, 358, 796, 194, 359, 797,
	783, 798, 195, 196, 197, 0, 199, 200, 201, 198,
	799, 202, 0, 203, 204, 800, 707, 205, 206, 207,
	801, 802, 804, 803, 805, 806, 807, 208, 209, 413,
	210, 360, 211, 361, 362, 808, 212, 809, 213, 810,
	214, 811, 812, 215, 216, 813, 217, 814, 0, 815,
	363, 218, 220, 219, 221, 364, 365, 816, 708, 817,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 818, 225, 819, 820, 709, 821, 226, 369, 822,
	370, 823, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 711, 824, 373, 234, 825, 231, 826, 710, 232,
	374, 233, 375, 376, 377, 378, 379, 827, 380, 828,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	829, 242, 241, 830, 383, 714, 243, 244, 715, 831,
	245, 246, 832, 833, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 834, 835,
	836, 385, 257, 386, 258, 259, 837, 260, 838, 839,
	261, 840, 841, 262, 387, 718, 263, 719, 388, 264,
	265, 266, 267, 268, 842, 269, 389, 270, 390, 271,
	843, 272, 273, 274, 275, 276, 391, 277, 278, 844,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 845, 291, 720, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 846, 304, 393, 303,
	305, 306, 847, 307, 295, 296, 308, 721, 309, 394,
	395, 310, 848, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 849, 318, 850, 319, 320, 321, 322,
	323, 324, 325, 326, 851, 398, 399, 400, 852, 853,
	327, 328, 401, 402, 854, 329, 330, 331, 332, 855,
	856, 333, 334, 335, 336, 857, 337, 858, 403, 338,
	339, 340, 404, 405, 859, 860, 341, 861, 862, 863,
	864, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 778, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2280, 184,
	185, 784, 186, 785, 786, 787, 788, 347, 789, 790,
	791, 792, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 793, 191, 354, 355, 192, 193, 794, 795,
	356, 357, 358, 796, 194, 359, 797, 783, 798, 195,
	196, 197, 0, 199, 200, 201, 198, 799, 202, 0,
	203, 204, 800, 707, 205, 206, 207, 801, 802, 804,
	803, 805, 806, 807, 208, 209, 413, 210, 360, 211,
	361, 362, 808, 212, 809, 213, 810, 214, 811, 812,
	215, 216, 813, 217, 814, 0, 815, 363, 218, 220,
	219, 221, 364, 365, 816, 708, 817, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 818, 225,
	819, 820, 709, 821, 226, 369, 822, 370, 823, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 711, 824,
	373, 234, 825, 231, 826, 710, 232, 374, 233, 375,
	376, 377, 378, 379, 827, 380, 828, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 829, 242, 241,
	830, 383, 714, 243, 244, 715, 831, 245, 246, 832,
	833, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 834, 835, 836, 385, 257,
	386, 258, 259, 837, 260, 838, 839, 261, 840, 841,
	262, 387, 718, 263, 719, 388, 264, 265, 266, 267,
	268, 842, 269, 389, 270, 390, 271, 843, 272, 273,
	274, 275, 276, 391, 277, 278, 844, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	845, 291, 720, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 846, 304, 393, 303, 305, 306, 847,
	307, 295, 296, 308, 721, 309, 394, 395, 310, 848,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	849, 318, 850, 319, 320, 321, 322, 323, 324, 325,
	326, 851, 398, 399, 400, 852, 853, 327, 328, 401,
	402, 854, 329, 330, 331, 332, 855, 856, 333, 334,
	335, 336, 857, 337, 858, 403, 338, 339, 340, 404,
	405, 859, 860, 341, 861, 862, 863, 864, 342, 343,
	344, 345, 346, 0, 0, 778, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1234, 184, 185, 784, 186, 785, 786, 787, 788, 347,
	789, 790, 791, 792, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 793, 191, 354, 355, 192, 193,
	794, 795, 356, 357, 358, 796, 194, 359, 797, 783,
	798, 195, 196, 197, 0, 199, 200, 201, 198, 799,
	202, 0, 203, 204, 800, 707, 205, 206, 207, 801,
	802, 804, 803, 805, 806, 807, 208, 209, 413, 210,
	360, 211, 361, 362, 808, 212, 809, 213, 810, 214,
	811, 812, 215, 216, 813, 217, 814, 0, 815, 363,
	218, 220, 219, 221, 364, 365, 816, 708, 817, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	818, 225, 819, 820, 709, 821, 226, 369, 822, 370,
	823, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	711, 824, 373, 234, 825, 231, 826, 710, 232, 374,
	233, 375, 376, 377, 378, 379, 827, 380, 828, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 829,
	242, 241, 830, 383, 714, 243, 244, 715, 831, 245,
	246, 832, 833, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 834, 835, 836,
	385, 257, 386, 258, 259, 837, 260, 838, 839, 261,
	840, 841, 262, 387, 718, 263, 719, 388, 264, 265,
	266, 267, 268, 842, 269, 389, 270, 390, 271, 843,
	272, 273, 274, 275, 276, 391, 277, 278, 844, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 845, 291, 720, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 846, 304, 393, 303, 305,
	306, 847, 307, 295, 296, 308, 721, 309, 394, 395,
	310, 848, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 849, 318, 850, 319, 320, 321, 322, 323,
	324, 325, 326, 851, 398, 399, 400, 852, 853, 327,
	328, 401, 402, 854, 329, 330, 331, 332, 855, 856,
	333, 334, 335, 336, 857, 337, 858, 403, 338, 339,
	340, 404, 405, 859, 860, 341, 861, 862, 863, 864,
	342, 343, 344, 345, 346, 1525, 0, 645, 634, 635,
	632, 633, 624, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 1522, 186, 0, 0, 0,
	0, 662, 627, 0, 0, 0, 187, 188, 189, 348,
	677, 350, 678, 190, 679, 680, 0, 191, 354, 355,
	192, 193, 630, 661, 681, 682, 358, 0, 194, 673,
	0, 653, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 654, 655, 657, 0, 656, 658, 208, 209,
	413, 210, 683, 211, 684, 685, 0, 212, 0, 213,
	0, 214, 1523, 0, 676, 216, 0, 217, 0, 0,
	0, 618, 218, 220, 219, 221, 663, 664, 641, 708,
	0, 0, 0, 0, 0, 222, 223, 686, 687, 688,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 674,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	670, 672, 711, 0, 373, 234, 0, 231, 0, 710,
	232, 689, 233, 690, 691, 692, 693, 694, 0, 652,
	0, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 675, 714, 243, 244, 715,
	0, 245, 246, 0, 0, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 613,
	0, 642, 671, 257, 695, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 718, 263, 719, 665,
	264, 265, 266, 267, 268, 0, 269, 666, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 696, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 720, 292, 293, 619,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 659, 307, 295, 296, 308, 721, 309,
	697, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	698, 314, 315, 667, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 699, 700, 0,
	0, 327, 328, 668, 669, 640, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 660, 337, 0, 403,
	338, 339, 340, 404, 701, 1521, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 614, 0, 645,
	634, 635, 632, 633, 624, 0, 0, 612, 0, 0,
	0, 0, 610, 611, 1524, 184, 185, 0, 186, 0,
	0, 620, 1519, 662, 627, 0, 0, 623, 187, 188,
	189, 348, 677, 350, 678, 190, 679, 680, 0, 191,
	354, 355, 192, 193, 630, 661, 681, 682, 358, 0,
	194, 673, 0, 653, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 707,
	205, 206, 207, 0, 654, 655, 657, 0, 656, 658,
	208, 209, 413, 210, 683, 211, 684, 685, 608, 212,
	0, 213, 0, 214, 0, 0, 676, 216, 0, 217,
	0, 0, 0, 618, 218, 220, 219, 221, 663, 664,
	641, 708, 0, 0, 0, 0, 0, 222, 223, 686,
	687, 688, 0, 224, 0, 225, 0, 0, 709, 0,
	226, 674, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 140,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 698, 314, 315, 667, 0, 318, 142, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 699,
	700, 0, 0, 327, 328, 668, 669, 640, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 660, 337,
	0, 403, 338, 339, 340, 933, 701, 0, 0, 341,
	0, 0, 0, 134, 342, 343, 344, 345, 346, 614,
	135, 596, 0, 645, 634, 635, 632, 633, 624, 612,
	0, 0, 0, 0, 610, 611, 0, 0, 0, 184,
	185, 0, 186, 1120, 0, 0, 0, 662, 627, 623,
	0, 0, 187, 188, 189, 348, 677, 350, 678, 190,
	679, 680, 0, 191, 354, 355, 192, 193, 630, 661,
	681, 682, 358, 0, 194, 673, 0, 653, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 654, 655,
	657, 0, 656, 658, 208, 209, 413, 210, 683, 211,
	684, 685, 0, 212, 0, 213, 0, 214, 0, 0,
	676, 216, 0, 217, 0, 0, 0, 618, 218, 220,
	219, 221, 663, 664, 641, 708, 0, 0, 0, 0,
	0, 222, 223, 686, 687, 688, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 674, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 670, 672, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 613, 0, 642, 671, 257,
	695, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 619, 294, 0, 298, 299,
	300, 301, 302, 140, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 721, 309, 697, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 698, 314, 315, 667,
	0, 318, 142, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 699, 700, 0, 0, 327, 328, 668,
	669, 640, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 660, 337, 0, 403, 338, 339, 340, 933,
	701, 0, 0, 341, 0, 0, 0, 134, 342, 343,
	344, 345, 346, 614, 135, 645, 634, 635, 632, 633,
	624, 0, 0, 612, 0, 0, 0, 0, 610, 611,
	0, 184, 185, 0, 186, 0, 0, 1120, 0, 662,
	627, 0, 0, 623, 187, 188, 189, 348, 677, 350,
	678, 190, 679, 680, 0, 191, 354, 355, 192, 193,
	630, 661, 681, 682, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	683, 211, 684, 685, 0, 212, 0, 213, 0, 214,
	0, 0, 676, 216, 0, 217, 0, 0, 0, 618,
	218, 220, 219, 221, 663, 664, 641, 708, 0, 0,
	0, 0, 0, 222, 223, 686, 687, 688, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 670, 672,
	711, 0, 373, 234, 0, 231, 0, 710, 232, 689,
	233, 690, 691, 692, 693, 694, 0, 652, 0, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 675, 714, 243, 244, 715, 0, 245,
	246, 0, 0, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 613, 0, 642,
	671, 257, 695, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 718, 263, 719, 665, 264, 265,
	266, 267, 268, 0, 269, 666, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 696, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 720, 292, 293, 619, 294, 0,
	298, 299, 300, 301, 302, 140, 304, 393, 303, 305,
	306, 659, 307, 295, 296, 308, 721, 309, 697, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 698, 314,
	315, 667, 0, 318, 142, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 699, 700, 0, 0, 327,
	328, 668, 669, 640, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 660, 337, 0, 403, 338, 339,
	340, 933, 701, 0, 0, 341, 0, 0, 0, 134,
	342, 343, 344, 345, 346, 614, 135, 645, 634, 635,
	632, 633, 624, 0, 0, 612, 0, 0, 0, 0,
	610, 611, 0, 184, 185, 0, 186, 0, 0, 1120,
	0, 662, 627, 0, 0, 623, 187, 188, 189, 348,
	677, 350, 678, 190, 679, 680, 1579, 191, 354, 355,
	192, 193, 630, 661, 681, 682, 358, 0, 194, 673,
	0, 653, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 654, 655, 657, 0, 656, 658, 208, 209,
	413, 210, 683, 211, 684, 685, 0, 212, 0, 213,
	0, 214, 0, 0, 676, 216, 0, 217, 0, 0,
	0, 618, 218, 220, 219, 221, 663, 664, 641, 708,
	0, 0, 0, 0, 0, 222, 223, 686, 687, 688,
	0, 224, 0, 225, 0, 1584, 709, 0, 226, 674,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	670, 672, 711, 0, 373, 234, 0, 231, 0, 710,
	232, 689, 233, 690, 691, 692, 693, 694, 0, 652,
	0, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 0, 242, 241, 1580, 675, 714, 243, 244, 715,
	0, 245, 246, 0, 0, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 613,
	0, 642, 671, 257, 695, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 718, 263, 719, 665,
	264, 265, 266, 267, 268, 0, 269, 666, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 696, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 720, 292, 293, 619,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 659, 307, 295, 296, 308, 721, 309,
	697, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	698, 314, 315, 667, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 699, 700, 0,
	1581, 327, 328, 668, 669, 640, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 660, 337, 0, 403,
	338, 339, 340, 404, 701, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 614, 604, 0,
	645, 634, 635, 632, 633, 624, 0, 612, 0, 0,
	0, 0, 610, 611, 0, 0, 184, 185, 0, 186,
	0, 620, 0, 0, 662, 627, 0, 623, 0, 187,
	188, 189, 348, 677, 350, 678, 190, 679, 680, 0,
	191, 354, 355, 192, 193, 630, 661, 681, 682, 358,
	0, 194, 673, 0, 653, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	707, 205, 206, 207, 0, 654, 655, 657, 0, 656,
	658, 208, 209, 413, 210, 683, 211, 684, 685, 608,
	212, 0, 213, 0, 214, 0, 0, 676, 216, 0,
	217, 0, 0, 0, 618, 218, 220, 219, 221, 663,
	664, 641, 708, 0, 0, 0, 0, 0, 222, 223,
	686, 687, 688, 0, 224, 0, 225, 0, 0, 709,
	0, 226, 674, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 613, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 606, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 619, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 0, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 404, 701, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	614, 0, 645, 634, 635, 632, 633, 624, 0, 0,
	612, 0, 0, 0, 0, 610, 611, 0, 184, 185,
	0, 186, 0, 0, 620, 0, 662, 627, 0, 0,
	623, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 2207, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 614, 0, 645, 634, 635, 632, 633, 624,
	0, 0, 612, 0, 0, 0, 0, 610, 611, 1181,
	184, 185, 0, 186, 0, 0, 620, 0, 662, 627,
	0, 0, 623, 187, 188, 189, 348, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	211, 684, 685, 0, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 670, 672, 711,
	0, 373, 234, 1429, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 1428, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 614, 0, 645, 634, 635, 632,
	633, 624, 0, 0, 612, 0, 0, 0, 0, 610,
	611, 0, 184, 185, 0, 186, 0, 0, 620, 0,
	662, 627, 0, 0, 623, 187, 188, 189, 348, 677,
	350, 678, 190, 679, 680, 0, 191, 354, 355, 192,
	193, 630, 661, 681, 682, 358, 0, 194, 673, 0,
	653, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 207,
	0, 654, 655, 657, 0, 656, 658, 208, 209, 413,
	210, 683, 211, 684, 685, 608, 212, 0, 213, 0,
	214, 0, 0, 676, 216, 0, 217, 0, 0, 0,
	618, 218, 220, 219, 221, 663, 664, 641, 708, 0,
	0, 0, 0, 0, 222, 223, 686, 687, 688, 0,
	224, 0, 225, 0, 0, 709, 0, 226, 674, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 670,
	672, 711, 0, 373, 234, 0, 231, 0, 710, 232,
	689, 233, 690, 691, 692, 693, 694, 0, 652, 0,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 675, 714, 243, 244, 715, 0,
	245, 246, 0, 0, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 613, 0,
	642, 671, 257, 695, 258, 259, 0, 260, 606, 0,
	261, 0, 0, 262, 387, 718, 263, 719, 665, 264,
	265, 266, 267, 268, 0, 269, 666, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 696, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 720, 292, 293, 619, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 659, 307, 295, 296, 308, 721, 309, 697,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 698,
	314, 315, 667, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 699, 700, 0, 0,
	327, 328, 668, 669, 640, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 660, 337, 0, 403, 338,
	339, 340, 404, 701, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 614, 0, 645, 634,
	635, 632, 633, 624, 0, 0, 612, 0, 0, 0,
	0, 610, 611, 0, 184, 185, 0, 186, 0, 0,
	620, 0, 662, 627, 0, 0, 623, 187, 188, 189,
	348, 677, 350, 678, 190, 679, 680, 0, 191, 354,
	355, 192, 193, 630, 661, 681, 682, 358, 0, 194,
	673, 0, 653, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 654, 655, 657, 0, 656, 658, 208,
	209, 413, 210, 683, 211, 684, 685, 2611, 212, 0,
	213, 0, 214, 0, 0, 676, 216, 0, 217, 0,
	0, 0, 618, 218, 220, 219, 221, 663, 664, 641,
	708, 0, 0, 0, 0, 0, 222, 223, 686, 687,
	688, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	674, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 670, 672, 711, 0, 373, 234, 0, 231, 0,
	710, 232, 689, 233, 690, 691, 692, 693, 694, 0,
	652, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 675, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 2612,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	613, 0, 642, 671, 257, 695, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	665, 264, 265, 266, 267, 268, 0, 269, 666, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 696, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	619, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 659, 307, 295, 296, 308, 721,
	309, 697, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 698, 314, 315, 667, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 699, 700,
	0, 0, 327, 328, 668, 669, 640, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 660, 337, 0,
	403, 338, 339, 340, 404, 701, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 614, 0,
	645, 634, 635, 632, 633, 624, 0, 0, 612, 0,
	0, 0, 0, 610, 611, 0, 184, 185, 0, 186,
	0, 0, 620, 0, 662, 627, 0, 0, 623, 187,
	188, 189, 348, 677, 350, 678, 190, 679, 680, 0,
	191, 354, 355, 192, 193, 630, 661, 681, 682, 358,
	0, 194, 673, 0, 653, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	707, 205, 206, 207, 0, 654, 655, 657, 0, 656,
	658, 208, 209, 413, 210, 683, 211, 684, 685, 608,
	212, 0, 213, 0, 214, 0, 0, 676, 216, 0,
	217, 0, 0, 0, 618, 218, 220, 219, 221, 663,
	664, 641, 708, 0, 0, 0, 0, 0, 222, 223,
	686, 687, 688, 0, 224, 0, 225, 0, 0, 709,
	0, 226, 674, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 613, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 619, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 0, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 404, 701, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	614, 0, 645, 634, 635, 632, 633, 624, 0, 0,
	612, 0, 0, 0, 0, 610, 611, 0, 184, 185,
	0, 186, 0, 0, 620, 0, 662, 627, 0, 0,
	623, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	2059, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 614, 0, 645, 634, 635, 632, 633, 624,
	0, 0, 612, 0, 0, 0, 0, 610, 611, 0,
	184, 185, 0, 186, 0, 0, 620, 0, 662, 627,
	0, 0, 623, 187, 188, 189, 348, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	211, 684, 685, 0, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 670, 672, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 614, 0, 645, 634, 635, 632,
	633, 624, 0, 0, 612, 0, 0, 0, 0, 610,
	611, 1181, 184, 185, 0, 186, 0, 0, 620, 0,
	662, 627, 0, 0, 623, 187, 188, 189, 348, 677,
	350, 678, 190, 679, 680, 0, 191, 354, 355, 192,
	193, 630, 661, 681, 682, 358, 0, 194, 673, 0,
	653, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 207,
	0, 654, 655, 657, 0, 656, 658, 208, 209, 413,
	210, 683, 211, 684, 685, 0, 212, 0, 213, 0,
	214, 0, 0, 676, 216, 0, 217, 0, 0, 0,
	618, 218, 220, 219, 221, 663, 664, 641, 708, 0,
	0, 0, 0, 0, 222, 223, 686, 687, 688, 0,
	224, 0, 225, 0, 1584, 709, 0, 226, 674, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 670,
	672, 711, 0, 373, 234, 0, 231, 0, 710, 232,
	689, 233, 690, 691, 692, 693, 694, 0, 652, 0,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 675, 714, 243, 244, 715, 0,
	245, 246, 0, 0, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 613, 0,
	642, 671, 257, 695, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 718, 263, 719, 665, 264,
	265, 266, 267, 268, 0, 269, 666, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 696, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 720, 292, 293, 619, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 659, 307, 295, 296, 308, 721, 309, 697,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 698,
	314, 315, 667, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 699, 700, 0, 0,
	327, 328, 668, 669, 640, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 660, 337, 0, 403, 338,
	339, 340, 404, 701, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 614, 1629, 0, 645,
	634, 635, 632, 633, 624, 0, 612, 0, 0, 0,
	0, 610, 611, 0, 0, 184, 185, 0, 186, 0,
	620, 0, 0, 662, 627, 0, 623, 0, 187, 188,
	189, 348, 677, 350, 678, 190, 679, 680, 0, 191,
	354, 355, 192, 193, 630, 661, 681, 682, 358, 0,
	194, 673, 0, 653, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 707,
	205, 206, 207, 0, 654, 655, 657, 0, 656, 658,
	208, 209, 413, 210, 683, 211, 684, 685, 0, 212,
	0, 213, 0, 214, 0, 0, 676, 216, 0, 217,
	0, 0, 0, 618, 218, 220, 219, 221, 663, 664,
	641, 708, 0, 0, 0, 0, 0, 222, 223, 686,
	687, 688, 0, 224, 0, 225, 0, 0, 709, 0,
	226, 674, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 698, 314, 315, 667, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 699,
	700, 0, 0, 327, 328, 668, 669, 640, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 660, 337,
	0, 403, 338, 339, 340, 404, 701, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 614,
	1593, 0, 645, 634, 635, 632, 633, 624, 0, 612,
	0, 0, 0, 0, 610, 611, 0, 0, 184, 185,
	0, 186, 0, 620, 0, 0, 662, 627, 0, 623,
	0, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 614, 1591, 0, 645, 634, 635, 632, 633,
	624, 0, 612, 0, 0, 0, 0, 610, 611, 0,
	0, 184, 185, 0, 186, 0, 620, 0, 0, 662,
	627, 0, 623, 0, 187, 188, 189, 348, 677, 350,
	678, 190, 679, 680, 0, 191, 354, 355, 192, 193,
	630, 661, 681, 682, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	683, 211, 684, 685, 0, 212, 0, 213, 0, 214,
	0, 0, 676, 216, 0, 217, 0, 0, 0, 618,
	218, 220, 219, 221, 663, 664, 641, 708, 0, 0,
	0, 0, 0, 222, 223, 686, 687, 688, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 670, 672,
	711, 0, 373, 234, 0, 231, 0, 710, 232, 689,
	233, 690, 691, 692, 693, 694, 0, 652, 0, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 675, 714, 243, 244, 715, 0, 245,
	246, 0, 0, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 613, 0, 642,
	671, 257, 695, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 718, 263, 719, 665, 264, 265,
	266, 267, 268, 0, 269, 666, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 696, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 720, 292, 293, 619, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 659, 307, 295, 296, 308, 721, 309, 697, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 698, 314,
	315, 667, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 699, 700, 0, 0, 327,
	328, 668, 669, 640, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 660, 337, 0, 403, 338, 339,
	340, 404, 701, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 614, 1575, 0, 645, 634,
	635, 632, 633, 624, 0, 612, 0, 0, 0, 0,
	610, 611, 0, 0, 184, 185, 0, 186, 0, 620,
	0, 0, 662, 627, 0, 623, 0, 187, 188, 189,
	348, 677, 350, 678, 190, 679, 680, 0, 191, 354,
	355, 192, 193, 630, 661, 681, 682, 358, 0, 194,
	673, 0, 653, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 654, 655, 657, 0, 656, 658, 208,
	209, 413, 210, 683, 211, 684, 685, 0, 212, 0,
	213, 0, 214, 0, 0, 676, 216, 0, 217, 0,
	0, 0, 618, 218, 220, 219, 221, 663, 664, 641,
	708, 0, 0, 0, 0, 0, 222, 223, 686, 687,
	688, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	674, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 670, 672, 711, 0, 373, 234, 0, 231, 0,
	710, 232, 689, 233, 690, 691, 692, 693, 694, 0,
	652, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 675, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	613, 0, 642, 671, 257, 695, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	665, 264, 265, 266, 267, 268, 0, 269, 666, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 696, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	619, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 659, 307, 295, 296, 308, 721,
	309, 697, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 698, 314, 315, 667, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 699, 700,
	0, 0, 327, 328, 668, 669, 640, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 660, 337, 0,
	403, 338, 339, 340, 404, 701, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 614, 1563,
	0, 645, 634, 635, 632, 633, 624, 0, 612, 0,
	0, 0, 0, 610, 611, 0, 0, 184, 185, 0,
	186, 0, 620, 0, 0, 662, 627, 0, 623, 0,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 211, 684, 685,
	0, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 613, 0, 642, 671, 257, 695, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 619, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 614, 1561, 0, 1553, 634, 635, 632, 633, 624,
	0, 612, 0, 0, 0, 0, 610, 611, 0, 0,
	184, 185, 0, 186, 0, 620, 0, 0, 662, 627,
	0, 623, 0, 187, 188, 189, 348, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	1556, 684, 685, 0, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 1557, 0, 0, 229, 230, 670, 672, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 1558, 1555, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 1559, 0, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 1554, 346, 614, 1550, 0, 1553, 634, 635,
	632, 633, 624, 0, 612, 0, 0, 0, 0, 610,
	611, 0, 0, 184, 185, 0, 186, 0, 620, 0,
	0, 662, 627, 0, 623, 0, 187, 188, 189, 348,
	677, 350, 678, 190, 679, 680, 0, 191, 354, 355,
	192, 193, 630, 661, 681, 682, 358, 0, 194, 673,
	0, 653, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 654, 655, 657, 0, 656, 658, 208, 209,
	413, 210, 683, 1556, 684, 685, 0, 212, 0, 213,
	0, 214, 0, 0, 676, 216, 0, 217, 0, 0,
	0, 618, 218, 220, 219, 221, 663, 664, 641, 708,
	0, 0, 0, 0, 0, 222, 223, 686, 687, 688,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 674,
	0, 370, 0, 0, 227, 1557, 0, 0, 229, 230,
	670, 672, 711, 0, 373, 234, 0, 231, 0, 710,
	232, 689, 233, 690, 691, 692, 693, 694, 0, 652,
	0, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 675, 714, 243, 244, 715,
	0, 245, 246, 0, 0, 247, 0, 248, 716, 1558,
	1555, 252, 384, 251, 717, 253, 254, 256, 255, 613,
	0, 642, 671, 257, 695, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 718, 263, 719, 665,
	264, 265, 266, 267, 268, 0, 269, 666, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 696, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 720, 292, 293, 619,
	294, 0, 298, 299, 300, 301, 1559, 0, 304, 393,
	303, 305, 306, 659, 307, 295, 296, 308, 721, 309,
	697, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	698, 314, 315, 667, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 699, 700, 0,
	0, 327, 328, 668, 669, 640, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 660, 337, 0, 403,
	338, 339, 340, 404, 701, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 1554, 346, 614, 0, 645,
	634, 635, 632, 633, 624, 0, 0, 612, 0, 0,
	0, 0, 610, 611, 0, 184, 185, 0, 186, 0,
	0, 620, 0, 662, 627, 0, 0, 623, 187, 188,
	189, 348, 677, 350, 678, 190, 679, 680, 0, 191,
	354, 355, 192, 193, 630, 661, 681, 682, 358, 0,
	194, 673, 0, 653, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 707,
	205, 206, 207, 0, 654, 655, 657, 0, 656, 658,
	208, 209, 413, 210, 683, 211, 684, 685, 0, 212,
	0, 213, 0, 214, 0, 0, 676, 216, 0, 217,
	0, 0, 0, 618, 218, 220, 219, 221, 663, 664,
	641, 708, 0, 0, 0, 0, 0, 222, 223, 686,
	687, 688, 0, 224, 0, 225, 0, 0, 709, 0,
	226, 674, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 698, 314, 315, 667, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 699,
	700, 0, 0, 327, 328, 668, 669, 640, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 660, 337,
	0, 403, 338, 339, 340, 404, 701, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 614,
	0, 645, 634, 635, 632, 633, 624, 0, 0, 612,
	0, 0, 0, 0, 610, 611, 0, 184, 185, 1416,
	186, 1124, 0, 620, 0, 662, 627, 0, 0, 623,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 211, 684, 685,
	0, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 613, 0, 642, 671, 257, 695, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 619, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 614, 876, 0, 645, 634, 635, 632, 633, 624,
	0, 612, 0, 0, 0, 0, 610, 611, 0, 0,
	184, 185, 0, 186, 0, 620, 0, 0, 662, 627,
	0, 623, 0, 187, 188, 189, 348, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	211, 684, 685, 0, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 670, 672, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 614, 874, 0, 645, 634, 635,
	632, 633, 624, 0, 612, 0, 0, 0, 0, 610,
	611, 0, 0, 184, 185, 0, 186, 0, 620, 0,
	0, 662, 627, 0, 623, 0, 187, 188, 189, 348,
	677, 350, 678, 190, 679, 680, 0, 191, 354, 355,
	192, 193, 630, 661, 681, 682, 358, 0, 194, 673,
	0, 653, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 654, 655, 657, 0, 656, 658, 208, 209,
	413, 210, 683, 211, 684, 685, 0, 212, 0, 213,
	0, 214, 0, 0, 676, 216, 0, 217, 0, 0,
	0, 618, 218, 220, 219, 221, 663, 664, 641, 708,
	0, 0, 0, 0, 0, 222, 223, 686, 687, 688,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 674,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	670, 672, 711, 0, 373, 234, 0, 231, 0, 710,
	232, 689, 233, 690, 691, 692, 693, 694, 0, 652,
	0, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 675, 714, 243, 244, 715,
	0, 245, 246, 0, 0, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 613,
	0, 642, 671, 257, 695, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 718, 263, 719, 665,
	264, 265, 266, 267, 268, 0, 269, 666, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 696, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 720, 292, 293, 619,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 659, 307, 295, 296, 308, 721, 309,
	697, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	698, 314, 315, 667, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 699, 700, 0,
	0, 327, 328, 668, 669, 640, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 660, 337, 0, 403,
	338, 339, 340, 404, 701, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 614, 0, 645,
	634, 635, 632, 633, 624, 0, 0, 612, 0, 0,
	0, 0, 610, 611, 0, 184, 185, 0, 186, 0,
	0, 620, 0, 662, 627, 0, 0, 623, 187, 188,
	189, 348, 677, 350, 678, 190, 679, 680, 0, 191,
	354, 355, 192, 193, 630, 661, 681, 682, 358, 0,
	194, 673, 0, 653, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 707,
	205, 206, 2528, 0, 654, 655, 657, 0, 656, 658,
	208, 209, 413, 210, 683, 211, 684, 685, 0, 212,
	0, 213, 0, 214, 0, 0, 676, 216, 0, 217,
	0, 0, 0, 618, 218, 220, 219, 221, 663, 664,
	641, 708, 0, 0, 0, 0, 0, 222, 223, 686,
	687, 688, 0, 224, 0, 225, 0, 0, 709, 0,
	226, 674, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 698, 314, 315, 667, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 699,
	700, 0, 0, 327, 328, 668, 669, 640, 329, 330,
	2527, 332, 0, 0, 333, 334, 335, 336, 660, 337,
	0, 403, 338, 339, 340, 404, 701, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 614,
	0, 645, 634, 635, 632, 633, 624, 0, 0, 612,
	0, 0, 0, 0, 610, 611, 0, 184, 185, 0,
	186, 0, 0, 620, 0, 662, 627, 0, 0, 623,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 211, 684, 685,
	0, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 613, 0, 642, 671, 257, 695, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 619, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 614, 0, 645, 634, 635, 632, 633, 624, 0,
	0, 612, 0, 0, 0, 0, 610, 611, 0, 184,
	185, 0, 186, 0, 0, 620, 0, 662, 627, 0,
	0, 623, 187, 188, 189, 2526, 677, 350, 678, 190,
	679, 680, 0, 191, 354, 355, 192, 193, 630, 661,
	681, 682, 358, 0, 194, 673, 0, 653, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 2528, 0, 654, 655,
	657, 0, 656, 658, 208, 209, 413, 210, 683, 211,
	684, 685, 0, 212, 0, 213, 0, 214, 0, 0,
	676, 216, 0, 217, 0, 0, 0, 618, 218, 220,
	219, 221, 663, 664, 641, 708, 0, 0, 0, 0,
	0, 222, 223, 686, 687, 688, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 674, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 670, 672, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 613, 0, 642, 671, 257,
	695, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 619, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 721, 309, 697, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 698, 314, 315, 667,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 699, 700, 0, 0, 327, 328, 668,
	669, 640, 329, 330, 2527, 332, 0, 0, 333, 334,
	335, 336, 660, 337, 0, 403, 338, 339, 340, 404,
	701, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 614, 0, 645, 634, 635, 632, 633,
	624, 0, 0, 612, 0, 0, 0, 0, 610, 611,
	0, 184, 185, 0, 186, 0, 0, 620, 0, 662,
	627, 0, 0, 623, 187, 188, 189, 348, 677, 350,
	678, 190, 679, 680, 0, 191, 354, 355, 192, 193,
	630, 661, 681, 682, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	683, 211, 684, 685, 0, 212, 0, 213, 0, 214,
	0, 0, 676, 216, 0, 217, 0, 0, 0, 618,
	218, 220, 219, 221, 663, 664, 641, 708, 0, 0,
	0, 0, 0, 222, 223, 686, 687, 688, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 670, 672,
	711, 0, 373, 234, 0, 231, 0, 710, 232, 689,
	233, 690, 691, 692, 693, 694, 0, 652, 0, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 675, 714, 243, 244, 715, 0, 245,
	246, 0, 0, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 0, 0, 642,
	671, 257, 695, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 718, 263, 719, 665, 264, 265,
	266, 267, 268, 0, 269, 666, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 696, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 720, 292, 293, 1573, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 659, 307, 295, 296, 308, 721, 309, 697, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 698, 314,
	315, 667, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 699, 700, 0, 0, 327,
	328, 668, 669, 640, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 660, 337, 0, 403, 338, 339,
	340, 404, 701, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 645, 634, 635,
	632, 633, 624, 0, 0, 1571, 0, 0, 0, 0,
	1569, 1570, 0, 184, 185, 0, 186, 0, 0, 1572,
	0, 662, 627, 0, 0, 623, 187, 188, 189, 348,
	677, 350, 678, 190, 679, 680, 0, 191, 354, 355,
	192, 193, 0, 661, 681, 682, 358, 0, 194, 673,
	0, 653, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 654, 655, 657, 0, 656, 658, 208, 209,
	413, 210, 683, 211, 684, 685, 0, 212, 0, 213,
	0, 214, 0, 0, 676, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 663, 664, 641, 708,
	0, 0, 0, 0, 0, 222, 223, 686, 687, 688,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 674,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	670, 672, 711, 0, 373, 234, 0, 231, 0, 710,
	232, 689, 233, 690, 691, 692, 693, 694, 0, 652,
	0, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 675, 714, 243, 244, 715,
	0, 245, 246, 0, 0, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 0,
	0, 642, 671, 257, 695, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 718, 263, 719, 665,
	264, 265, 266, 267, 268, 0, 269, 666, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 696, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 720, 292, 293, 1573,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 659, 307, 295, 296, 308, 721, 309,
	697, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	698, 314, 315, 667, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 699, 700, 0,
	0, 327, 328, 668, 669, 640, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 660, 337, 0, 403,
	338, 339, 340, 404, 701, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 645,
	634, 635, 632, 633, 624, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 1572, 0, 662, 627, 0, 0, 623, 187, 188,
	189, 0, 677, 350, 678, 190, 679, 680, 0, 191,
	354, 355, 192, 193, 630, 661, 681, 682, 358, 0,
	194, 673, 0, 653, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 707,
	205, 206, 2528, 0, 654, 655, 657, 0, 656, 658,
	208, 209, 413, 210, 683, 211, 684, 685, 0, 212,
	0, 213, 0, 214, 0, 0, 676, 216, 0, 217,
	0, 0, 0, 618, 218, 220, 219, 221, 663, 664,
	641, 708, 0, 0, 0, 0, 0, 222, 223, 686,
	687, 688, 0, 224, 0, 225, 0, 0, 709, 0,
	226, 674, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 670, 672, 0, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 0, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	0, 309, 697, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 698, 314, 315, 667, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 699,
	700, 0, 0, 327, 328, 668, 669, 640, 329, 330,
	2527, 332, 0, 0, 333, 334, 335, 336, 660, 337,
	0, 403, 338, 339, 340, 404, 701, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 610, 611, 0, 184, 185, 0,
	186, 0, 0, 620, 0, 662, 0, 0, 0, 623,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 661, 356, 357,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	663, 664, 0, 708, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 0, 0, 0, 671, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 668, 669, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 926, 0, 929, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 2158, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 783, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 708, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 140, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 721, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 142, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 933,
	405, 0, 0, 341, 0, 0, 0, 134, 342, 343,
	344, 345, 346, 596, 135, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 126, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 761, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 140, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 142, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 933, 405, 0, 0, 341, 0, 0, 0, 134,
	342, 343, 344, 345, 346, 0, 135, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 755, 0, 1203,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	761, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 140, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 142, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 933, 405, 0, 0, 341, 0, 0,
	0, 134, 342, 343, 344, 345, 346, 596, 135, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 755,
	0, 1203, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 140,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 142, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 933, 405, 0, 0, 341,
	0, 0, 0, 134, 342, 343, 344, 345, 346, 1901,
	135, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 126, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 761, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 754, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 755, 0, 760, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 761, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 755, 0, 760, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 761, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 755, 0, 760, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	1236, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 1715,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	2074, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 645, 634,
	635, 632, 633, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 1206, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 677, 350, 678, 190, 679, 680, 0, 191, 354,
	355, 192, 193, 0, 0, 681, 682, 358, 0, 194,
	359, 0, 783, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 683, 211, 684, 685, 0, 212, 0,
	213, 0, 214, 0, 0, 676, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 641,
	708, 0, 0, 0, 0, 0, 222, 223, 686, 687,
	688, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 711, 0, 373, 234, 0, 231, 0,
	710, 232, 689, 233, 690, 691, 692, 693, 694, 0,
	652, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	0, 0, 642, 385, 257, 695, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 696, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 721,
	309, 697, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 698, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 699, 700,
	0, 0, 327, 328, 401, 402, 640, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 701, 0, 499, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 177, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 176, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 174, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 180, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 177, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 176,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 181,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 180, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 177, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 176, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 181, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 180, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 983, 0,
	929, 987, 0, 0, 0, 985, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 180, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 783, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	707, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 708, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 709,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 721, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 929, 987,
	341, 0, 0, 985, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 783, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	708, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 711, 0, 373, 234, 0, 231, 0,
	710, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 721,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 929, 987, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	783, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 708, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 709, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 711, 0, 373, 234, 0, 231, 0, 710, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 714, 243, 244, 715, 0,
	245, 246, 0, 0, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 718, 263, 719, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 720, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 721, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 929, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 783, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 708, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 721, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 181, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 1649, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 1647, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 1691, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 1652,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 1689, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 1651, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 1690, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	181, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	1649, 194, 359, 0, 0, 1644, 195, 196, 197, 0,
	199, 200, 201, 198, 1647, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 1652, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 1643, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 1651, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 1650, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 904,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 761, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	767, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 769, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 761, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 763, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 765, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 761, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 430, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 429, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 428, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 181, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 1632, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	181, 2225, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 181, 2225,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 2222, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 181, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 761,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 1395, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 1393, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 181, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 1375, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 525, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 962, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 527, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 522, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 1251, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 1250, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 525, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 962, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 527, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 522, 399,
	400, 0, 0, 327, 963, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 525, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 516, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 527, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 946, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 522,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 922,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 921, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	919, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 918, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 915, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 914, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 912, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 911, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 908, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 907, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 181, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 896, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 894, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 893, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 890, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 888, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 887,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 883, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	885, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 773, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 775, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 771, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 525, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 516, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 515, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 527, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 517, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 518, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 522,
	399, 400, 0, 0, 327, 520, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 507,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 508, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	505, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 497, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 453, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 181, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	181, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 1948, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 181, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 1946, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 181, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 1935,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 181, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 508,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 181, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 1261, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 0,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	181, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 737, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 181, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 0, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 0, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 0, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 1057, 1058,
	0, 1087, 1088, 1089, 1097, 1098, 1099, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 1057, 1058, 0, 1087, 1088, 1089, 1097,
	1098, 1099, 0, 0, 0, 1059, 0, 0, 0, 1090,
	0, 1079, 0, 0, 0, 0, 1060, 0, 1076, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	0, 0, 0, 1076, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 1083, 1084, 1085,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1094, 1102, 0,
	0, 1082, 1083, 1084, 1085, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 1057, 1058, 0, 1087, 1088, 1089, 1097, 1098, 1099,
	0, 0, 1094, 1102, 1092, 0, 0, 1090, 0, 0,
	0, 1080, 0, 0, 1060, 0, 0, 1101, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 1059, 1092,
	0, 0, 0, 0, 1079, 0, 1080, 0, 0, 0,
	0, 1076, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 1091, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	1083, 1084, 1085, 1095, 0, 0, 1086, 0, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 1102, 0, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	0, 0, 1093, 0, 1080, 1071, 1072, 1078, 1077, 1073,
	1074, 1075, 1096, 0, 1070, 1068, 1069, 1061, 1062, 1063,
	1064, 1066, 1067, 0, 0, 0, 0, 0, 0, 0,
	1091, 1835, 0, 0, 0, 0, 0, 1093, 0, 0,
	1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0, 1070,
	1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 0, 0,
	0, 0, 2497, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	0, 0, 0, 1057, 1058, 0, 1087, 1088, 1089, 1097,
	1098, 1099, 0, 0, 0, 0, 1095, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	0, 0, 0, 1076, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1093, 0, 0, 1071, 1072,
	1078, 1077, 1073, 1074, 1075, 1096, 0, 1070, 1068, 1069,
	1061, 1062, 1063, 1064, 1066, 1067, 0, 0, 0, 0,
	2448, 1082, 1083, 1084, 1085, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 1057, 1058, 0, 1087, 1088,
	1089, 1097, 1098, 1099, 0, 0, 0, 0, 0, 0,
	0, 1090, 1094, 1102, 0, 0, 0, 0, 1060, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 0, 0, 0, 1079, 1092,
	0, 0, 0, 0, 0, 1076, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 1083, 1084, 1085, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 1094, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 1100, 1057, 1058, 0, 1087, 1088, 1089,
	1097, 1098, 1099, 0, 0, 0, 0, 0, 0, 0,
	1090, 1092, 0, 0, 0, 0, 0, 1060, 1080, 0,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1057, 1058, 0, 1087, 1088, 1089, 1097, 1098,
	1099, 1059, 0, 0, 1091, 0, 0, 1079, 1090, 0,
	0, 0, 0, 0, 1076, 1060, 0, 1093, 1101, 0,
	1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0, 1070,
	1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 1086, 1059,
	0, 0, 2402, 0, 0, 1079, 0, 0, 0, 0,
	0, 0, 1076, 1081, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 1083, 1084, 1085, 0, 0, 0, 0,
	1095, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1094, 1102, 0, 0, 0, 0, 0,
	1082, 1083, 1084, 1085, 0, 0, 0, 0, 0, 1065,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 1094, 1102, 0, 0, 0, 0, 1080, 0, 1093,
	0, 0, 1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096,
	1100, 1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067,
	0, 0, 0, 1091, 2372, 0, 0, 0, 1092, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 1091, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 0, 0, 0, 1057, 1058,
	0, 1087, 1088, 1089, 1097, 1098, 1099, 0, 0, 1095,
	0, 0, 0, 0, 1090, 1086, 0, 0, 0, 0,
	0, 1060, 0, 0, 1101, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1059, 0, 1095, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 1076, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0,
	1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 0,
	0, 0, 0, 2367, 0, 0, 1082, 1083, 1084, 1085,
	0, 0, 0, 0, 0, 1065, 1093, 0, 0, 1071,
	1072, 1078, 1077, 1073, 1074, 1075, 1096, 0, 1070, 1068,
	1069, 1061, 1062, 1063, 1064, 1066, 1067, 1094, 1102, 0,
	0, 2363, 0, 0, 1057, 1058, 0, 1087, 1088, 1089,
	1097, 1098, 1099, 0, 0, 0, 1100, 0, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	1101, 0, 0, 0, 1092, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 1076, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 1083, 1084, 1085, 1081, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1057, 1058, 1095, 1087, 1088, 1089, 1097, 1098, 1099,
	0, 0, 0, 1094, 1102, 0, 0, 1090, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 1101, 0, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1059, 0,
	1092, 0, 0, 0, 1079, 0, 0, 1080, 0, 0,
	0, 1076, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1093, 0, 0, 1071, 1072, 1078, 1077, 1073,
	1074, 1075, 1096, 1091, 1070, 1068, 1069, 1061, 1062, 1063,
	1064, 1066, 1067, 0, 0, 0, 0, 2301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	1083, 1084, 1085, 0, 0, 0, 0, 1086, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 0, 0, 0, 0, 0,
	1094, 1102, 0, 0, 0, 0, 0, 1057, 1058, 1095,
	1087, 1088, 1089, 1097, 1098, 1099, 0, 0, 0, 1100,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	1060, 0, 0, 1101, 0, 0, 0, 1092, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1059, 0, 0, 0, 0, 0,
	1079, 0, 0, 0, 0, 0, 0, 1076, 0, 0,
	1091, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0,
	1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 0,
	0, 0, 0, 2267, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 1083, 1084, 1085, 1081,
	0, 0, 0, 0, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1057, 1058, 1095, 1087, 1088, 1089,
	1097, 1098, 1099, 0, 0, 0, 1094, 1102, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	1101, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1059, 0, 1092, 0, 0, 0, 1079, 0, 0,
	1080, 0, 0, 0, 1076, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1093, 0, 0, 1071, 1072,
	1078, 1077, 1073, 1074, 1075, 1096, 1091, 1070, 1068, 1069,
	1061, 1062, 1063, 1064, 1066, 1067, 0, 0, 0, 0,
	2266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 1083, 1084, 1085, 0, 0, 0, 0,
	1086, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 0,
	0, 0, 0, 1094, 1102, 0, 0, 0, 0, 0,
	1057, 1058, 1095, 1087, 1088, 1089, 1097, 1098, 1099, 0,
	0, 0, 1100, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 1101, 0, 0, 0,
	1092, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1059, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	1076, 0, 0, 1091, 0, 0, 0, 0, 0, 0,
	0, 1093, 0, 0, 1071, 1072, 1078, 1077, 1073, 1074,
	1075, 1096, 0, 1070, 1068, 1069, 1061, 1062, 1063, 1064,
	1066, 1067, 0, 0, 0, 0, 2231, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 1083,
	1084, 1085, 1081, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1057, 1058, 1095,
	1087, 1088, 1089, 1097, 1098, 1099, 0, 0, 0, 1094,
	1102, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	1060, 0, 0, 1101, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1059, 0, 1092, 0, 0, 0,
	1079, 0, 0, 1080, 0, 0, 0, 1076, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 1091,
	1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 0,
	0, 0, 0, 2077, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 1083, 1084, 1085, 0,
	0, 0, 0, 1086, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 0, 1094, 1102, 0, 0,
	0, 0, 0, 1057, 1058, 1095, 1087, 1088, 1089, 1097,
	1098, 1099, 0, 0, 0, 1100, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 1101,
	0, 0, 0, 1092, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	0, 0, 0, 1076, 0, 0, 1091, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 1071, 1072, 1078,
	1077, 1073, 1074, 1075, 1096, 0, 1070, 1068, 1069, 1061,
	1062, 1063, 1064, 1066, 1067, 0, 0, 0, 0, 2053,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 1083, 1084, 1085, 1081, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1095, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1094, 1102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1092,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1093, 0, 0, 1071, 1072, 1078, 1077, 1073, 1074,
	1075, 1096, 1091, 1070, 1068, 1069, 1061, 1062, 1063, 1064,
	1066, 1067, 0, 0, 0, 0, 1511, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 1057, 1058, 0, 1087, 1088, 1089, 1097,
	1098, 1099, 0, 0, 0, 0, 0, 0, 1095, 1090,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	0, 0, 0, 1076, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1093, 0, 0,
	1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0, 1070,
	1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 0, 0,
	1805, 1082, 1083, 1084, 1085, 0, 0, 0, 0, 0,
	1065, 2560, 0, 0, 0, 1057, 1058, 0, 1087, 1088,
	1089, 1097, 1098, 1099, 0, 0, 0, 0, 0, 0,
	0, 1090, 1094, 1102, 0, 0, 0, 0, 1060, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 0, 0, 0, 1079, 1092,
	0, 0, 0, 0, 0, 1076, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2559, 0,
	0, 0, 0, 1082, 1083, 1084, 1085, 0, 0, 0,
	0, 0, 1065, 0, 1875, 0, 1086, 1874, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 1094, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 1100, 1057, 1058, 0, 1087, 1088, 1089,
	1097, 1098, 1099, 0, 0, 0, 0, 0, 0, 0,
	1090, 1092, 0, 0, 0, 1778, 0, 1060, 1080, 0,
	1101, 0, 0, 0, 0, 0, 1608, 0, 0, 0,
	0, 0, 1057, 1058, 0, 1087, 1088, 1089, 1097, 1098,
	1099, 1059, 0, 0, 1091, 0, 0, 1079, 1090, 0,
	0, 0, 1607, 0, 1076, 1060, 0, 1093, 1101, 0,
	1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0, 1070,
	1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 1086, 1059,
	0, 1779, 0, 0, 0, 1079, 0, 0, 0, 0,
	0, 0, 1076, 1081, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 1083, 1084, 1085, 0, 0, 0, 0,
	1095, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1094, 1102, 0, 0, 0, 0, 0,
	1082, 1083, 1084, 1085, 0, 0, 0, 0, 0, 1065,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 1094, 1102, 0, 0, 0, 0, 1080, 0, 1093,
	0, 0, 1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096,
	1100, 1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067,
	0, 0, 0, 1091, 0, 0, 0, 0, 1092, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 1091, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 0, 0, 0, 1057, 1058,
	0, 1087, 1088, 1089, 1097, 1098, 1099, 0, 0, 1095,
	0, 0, 0, 0, 1090, 1086, 0, 0, 0, 0,
	0, 1060, 0, 0, 1101, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1059, 0, 1095, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 1076, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0,
	1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 0,
	0, 0, 0, 0, 0, 0, 1082, 1083, 1084, 1085,
	0, 0, 0, 0, 0, 1065, 1093, 0, 0, 1071,
	1072, 1078, 1077, 1073, 1074, 1075, 1096, 0, 1070, 1068,
	1069, 1061, 1062, 1063, 1064, 1066, 1067, 1094, 1102, 0,
	0, 0, 0, 0, 1057, 1058, 0, 1087, 1088, 1089,
	1097, 1098, 1099, 0, 0, 0, 1100, 0, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	1101, 0, 0, 0, 1092, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 1076, 0, 0, 1091, 593, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 1083, 1084, 1085, 1081, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1057, 1058, 1095, 1087, 1088, 1089, 1097, 1098, 1099,
	0, 0, 0, 1094, 1102, 0, 0, 1090, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 1101, 0, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1059, 0,
	1092, 0, 0, 0, 1079, 0, 0, 1080, 0, 0,
	0, 1076, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1093, 0, 0, 1071, 1072, 1078, 1077, 1073,
	1074, 1075, 1096, 1091, 1070, 1068, 1069, 1061, 1062, 1063,
	1064, 1066, 1067, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	1083, 1084, 1085, 0, 0, 0, 0, 1086, 1065, 0,
	0, 0, 0, 1881, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 0, 0, 0, 0, 0,
	1094, 1102, 0, 0, 0, 0, 0, 1057, 1058, 1095,
	1087, 1088, 1089, 1097, 1098, 1099, 0, 0, 0, 1100,
	0, 0, 0, 1090, 0, 0, 0, 1876, 0, 0,
	1060, 0, 0, 1101, 0, 0, 2057, 1092, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1059, 0, 0, 0, 0, 0,
	1079, 0, 0, 0, 0, 0, 0, 1076, 0, 0,
	1091, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0,
	1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 1083, 1084, 1085, 1081,
	0, 0, 0, 0, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1094, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1092, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1093, 0, 0, 1071, 1072,
	1078, 1077, 1073, 1074, 1075, 1096, 1091, 1070, 1068, 1069,
	1061, 1062, 1063, 1064, 1066, 1067, 0, 0, 0, 0,
	0, 0, 0, 1057, 1058, 0, 1087, 1088, 1089, 1097,
	1098, 1099, 0, 0, 0, 0, 0, 0, 0, 1090,
	1086, 0, 0, 0, 0, 0, 1060, 0, 0, 1101,
	0, 0, 0, 0, 0, 1081, 0, 0, 1057, 1058,
	0, 1087, 1088, 1089, 1097, 1098, 1099, 0, 0, 0,
	1059, 0, 1095, 0, 1090, 0, 1079, 0, 1834, 0,
	0, 1060, 0, 1076, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1059, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 1076, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 1083, 1084, 1085, 0, 0, 0, 0, 0,
	1065, 1093, 0, 0, 1071, 1072, 1078, 1077, 1073, 1074,
	1075, 1096, 0, 1070, 1068, 1069, 1061, 1062, 1063, 1064,
	1066, 1067, 1094, 1102, 0, 0, 1082, 1083, 1084, 1085,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 1057, 1058, 0, 1087,
	1088, 1089, 1097, 1098, 1099, 0, 0, 1094, 1102, 1092,
	0, 0, 1090, 0, 0, 0, 1080, 0, 0, 1060,
	0, 0, 1101, 0, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 1059, 1092, 0, 0, 0, 0, 1079,
	0, 1080, 0, 0, 0, 1841, 1076, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 1091, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 1083, 1084, 1085, 1095, 0,
	0, 1086, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 1094, 1102, 0, 0, 0,
	0, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 0, 0, 0, 0, 1093, 0, 1080,
	1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0, 1070,
	1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 0, 0,
	0, 0, 0, 0, 0, 1091, 0, 0, 0, 0,
	0, 0, 1093, 0, 0, 1071, 1072, 1078, 1077, 1073,
	1074, 1075, 1096, 0, 1070, 1068, 1069, 1061, 1062, 1063,
	1064, 1066, 1067, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1081, 0, 1057, 1058, 0, 1087,
	1088, 1089, 1097, 1098, 1099, 0, 0, 0, 0, 0,
	0, 1095, 1090, 0, 0, 0, 0, 0, 0, 1060,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1059, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 0, 1076, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1093, 0, 0, 1071, 1072, 1078, 1077, 1073, 1074, 1075,
	1096, 0, 1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066,
	1067, 0, 0, 0, 1082, 1083, 1084, 1085, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 1057, 1058,
	0, 1087, 1088, 1089, 1097, 1098, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 1094, 1102, 0, 0, 0,
	0, 1060, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 1057, 1058, 0, 1100, 0, 0, 1097, 1098, 1099,
	0, 0, 0, 0, 0, 1059, 0, 0, 0, 0,
	0, 1079, 1092, 0, 1060, 0, 0, 1101, 1076, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1059, 0,
	0, 0, 0, 0, 1079, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 1083, 1084, 1085,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 1306, 0, 0, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 1094, 1102, 1082,
	1083, 1084, 1085, 0, 0, 0, 0, 0, 1065, 0,
	0, 1095, 0, 0, 0, 0, 1100, 0, 1314, 1303,
	1333, 1292, 1324, 1323, 0, 0, 1294, 1293, 0, 0,
	1094, 1102, 1335, 1334, 1092, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	1329, 0, 1321, 1320, 1080, 0, 0, 0, 0, 0,
	1093, 0, 1319, 1071, 1072, 1078, 1077, 1073, 1074, 1075,
	1096, 0, 1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066,
	1067, 1086, 0, 0, 0, 1318, 1316, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1302, 1095, 1086, 0, 0, 0, 0, 1307,
	1305, 1308, 1309, 1310, 1311, 1312, 0, 1332, 0, 1081,
	0, 0, 0, 0, 1296, 1295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1322, 0, 0, 0, 1304, 0, 0, 0,
	0, 0, 1093, 0, 0, 1071, 1072, 1078, 1077, 1073,
	1074, 1075, 1096, 0, 1070, 1068, 1069, 1061, 1062, 1063,
	1064, 1066, 1067, 0, 0, 1315, 0, 0, 0, 1436,
	1434, 1435, 1438, 1437, 0, 1093, 0, 0, 1306, 0,
	0, 0, 0, 0, 0, 1096, 0, 1070, 1068, 1069,
	1061, 1062, 1063, 1064, 1066, 1067, 0, 1299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1313, 1300,
	0, 1314, 1303, 1333, 1292, 1324, 1323, 0, 1337, 1294,
	1293, 0, 0, 0, 0, 1335, 1334, 0, 0, 0,
	0, 1297, 0, 0, 0, 1330, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1301, 0, 0,
	0, 0, 1336, 1329, 0, 1321, 1320, 0, 0, 0,
	0, 0, 0, 0, 0, 1319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1318, 1316,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 546, 0, 572, 0, 1302, 0, 0, 0, 0,
	0, 0, 1307, 1305, 1308, 1309, 1310, 1311, 1312, 0,
	1332, 551, 0, 0, 0, 0, 0, 1296, 1295, 0,
	0, 0, 0, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1298, 550, 0, 0, 0, 0, 552,
	0, 0, 0, 0, 0, 1322, 0, 558, 559, 1304,
	0, 0, 568, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 573, 553, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 571,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 554, 0, 0, 0, 0, 0,
	0, 1313, 1300, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 555, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1297, 0, 0, 0, 1330, 1331,
	562, 0, 0, 0, 0, 557, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 561, 0,
	1301, 0, 0, 0, 0, 1336, 0, 0, 0, 574,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 548, 565, 575,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 566, 0, 0, 0, 570, 0, 0,
	0, 0, 576, 0, 0, 0, 0, 563, 567, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569,
}
var sqlPact = [...]int{

	3603, -1000, -18, -1000, -1000, -1000, 152, -1000, -1000, -1000,
	-1000, 151, 149, 148, -1000, 146, 139, 132, 131, 130,
	117, 113, 111, 110, 109, 107, -1000, 105, -1000, -1000,
	-1000, -1000, 104, 102, 96, 95, 94, 91, 90, -1000,
	1133, 22496, 85, 84, 1278, -1000, 36448, 82, 78, 77,
	75, 1001, 73, 66, 26580, 900, 1788, 64, 61, 58,
	56, 55, 1112, 36110, 3415, 1492, 1117, 1616, 35769, 22155,
	1595, 1489, 35428, -1000, -1000, 35087, 53, 52, 49, 46,
	45, -1000, -1000, 34746, 44, 42, 39, 37, 35, 32,
	30, 28, 25, 24, 23, 20, 18, 17, -1000, 16,
	15, 14, -1000, 43619, 12, 9, 8, 1091, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 878, 100, -1000, 988, 430, 2649, 8436, 1034,
	1019, 1013, 1011, 1033, 38476, 36448, 2, -103, 1, -1000,
	1973, 651, 19709, 3603, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26239, 25898,
	34405, 34064, 6321, 766, -1000, -26, 23174, 36448, -1000, 101,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15133,
	14780, 526, 101, -1000, -1000, -1000, -1000, -1000, 33723, -1000,
	33382, 33041, 1445, 32700, -1000, -1000, -1000, -1000, 32359, -1000,
	-1000, 1838, 1648, 1642, 25557, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 32021, 31680, 31339,
	30998, 30657, 492, -1000, -1000, -1000, 17949, -1000, -1000, -1000,
	-1000, 0, -1000, -1, -1000, -2, -4, -5, -6, -1000,
	-8, -9, -1000, -10, -11, -1000, -12, -21, 30316, 857,
	1227, -1000, -1000, -24, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 36448, -1000, 15837, -1000, 487, -1000, 1613, -1000,
	15837, -1000, 1226, -1000, -1000, -1000, -1000, -1000, 36448, -1000,
	-1000, -1000, -1000, -1000, -1000, 2197, 1153, 486, 29975, -1000,
	1553, -1000, 614, 773, -1000, -1000, -1000, 9492, 156, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1447, 23526,
	1253, 2033, 1822, 2196, 1385, 1816, 1798, 1782, 1716, 1711,
	2195, 926, 2194, 1830, 1038, 2189, 1710, 1423, 680, 2183,
	1604, 1603, -1000, -1000, -1000, -1000, 941, -1000, -1000, -1000,
	27932, -1000, -1000, 795, 928, 988, -1000, -1000, -1000, 1413,
	1959, 1959, 1959, 2053, 276, 269, -1000, 100, -1000, 1734,
	-1000, 1146, -1000, -1000, -1000, -1000, -1000, 42706, -1000, -1000,
	15837, 15837, 15837, 15837, 15837, 1093, 523, -1000, 476, 467,
	7731, -1000, -1000, 2156, -1000, -1000, -1000, 286, -1000, -1000,
	15837, 101, -1000, -1000, -1000, -1000, 466, 2174, -1000, 644,
	-1000, -1000, -1000, 620, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1633, 464, 462, 461, -1000, 450, -1000,
	-1000, 448, 439, 438, 437, 434, 433, 432, 431, 429,
	428, 427, 425, 424, 423, 420, 1002, -1000, 637, -1000,
	-1000, 637, 637, -1000, 406, 406, 408, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 406, -1000, -1000, -1000, 594,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 419, 1194, -1000, -1000, 1194, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 765, 37800, -28, 36448, -1000, 418,
	-28, -1000, -1000, 417, -1000, 10900, 10900, -1000, -1000, -1000,
	-1000, -1000, 10196, 1835, -1000, 2715, -177, 283, 587, -1000,
	18653, 21463, -1000, -1000, 1016, 1843, 792, -1000, 963, 1841,
	530, -1000, 1087, -1000, 1012, 1829, -162, 1674, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 23864, 23174, -26, -36, -1000,
	-1000, -1000, 5969, 42706, -1000, 42706, -1000, 820, 20411, 101,
	-1000, -1000, -1000, -1000, 416, 1316, 623, 1311, -1000, 289,
	-1000, 29634, 623, 1310, -1000, -1000, -1000, 27932, -1000, 36448,
	-1000, 36448, -1000, 883, -1000, 38138, 133, 1827, -1000, -1000,
	133, 1821, -1000, 127, 1795, -1000, -1000, 1244, 1793, -1000,
	-36, 1741, -1000, -1000, 15837, -51, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 651, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 29293, 22835, 1481, 563,
	42706, 2095, 43474, 23864, 42706, 22835, -1000, -1000, 36448, -1000,
	15837, -1000, 2094, 1436, -31, -1000, -1000, -1000, -1000, -1000,
	1371, 1548, 728, 970, 9492, 9492, 1946, -1000, 115, 6321,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 28952, -1000,
	-1000, -1000, 1138, 36448, -1000, -1000, 1625, -1000, 22835, 36448,
	-1000, 36448, -1000, 36448, -1000, 36448, -1000, 36448, -1000, -1000,
	-1000, -1000, -1000, 2666, -1000, 1623, -1000, -1000, 36448, -1000,
	1355, -1000, -1000, -1000, 28614, 28273, -1000, 891, 794, -1000,
	-1000, 135, -1000, 23864, 2019, 613, -1000, 1413, 1361, 1621,
	668, 1230, 1429, 14427, 1426, 15837, 100, -1000, -1000, 100,
	100, 9140, -1000, -1000, -1000, 36448, -1000, 43221, 43474, 6321,
	778, 15837, 15837, 15837, 15837, 15837, 15837, 15837, 15837, 15837,
	15837, 15837, 15837, 15837, 15837, 15837, 15837, 15837, 15837, 15837,
	15837, 15837, 15837, 15837, 15837, 15837, 15837, 15837, 15837, 15837,
	15837, 15837, 15837, 1350, 15837, 764, 15837, 15837, 15837, 15837,
	1381, 1071, 405, 1106, -1000, 2120, 2120, 2120, 43088, 43088,
	386, 523, -1000, 15837, -1000, 60, 15837, 269, 40947, -27,
	7379, -1000, -1000, -1000, 14075, 634, 42706, 101, 6673, -1000,
	2155, 1149, 1647, 1540, 411, 560, 556, 554, 553, 15837,
	15837, 13723, 13370, 13017, 16541, 12664, 15837, 8083, 15837, 15837,
	15837, 15837, 12311, 11958, -1000, 410, -1000, -1000, -1000, -1000,
	2154, -1000, -1000, 2153, -1000, 777, 772, 2152, -1000, -31,
	-1000, 37800, -1000, 36448, -28, 2092, 36448, -1000, 114, -1000,
	41672, -1000, 114, -53, -1000, 1437, 1434, 20060, 1369, 1127,
	1127, 1127, -1000, 409, 518, 587, 5246, 11605, -1000, 26918,
	1137, 182, 268, 18301, 1835, -1000, 36448, -39, 1049, -1000,
	25216, 1996, 1991, 1972, 27932, 2078, 60, 2016, 1602, 762,
	27932, 2015, 761, 2069, 60, 1601, 759, 36448, 6321, 2014,
	566, -1000, 36448, -1000, -1000, -1000, 1599, -54, -1000, -1000,
	24878, 2090, 1731, -1000, 1024, -1000, 1729, 2089, 36448, 1215,
	1303, -1000, -1000, 786, 1719, 627, 257, 2085, 257, 20761,
	-1000, 36448, -1000, 36448, -1000, -1000, 36448, -1000, 36448, -1000,
	36448, 36448, -1000, 36448, 36448, -59, 42706, 4144, 24540, 749,
	-1000, 657, 24878, 3948, -64, -1000, 861, -1000, -1000, -1000,
	-1000, 272, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 408, 1002,
	406, 406, 406, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	594, -1000, -1000, 637, 637, 637, -1000, -1000, -66, -1000,
	1596, 592, -65, 692, -31, -1000, 1194, -1000, 1030, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2173, -1000, 2131, -1000, -1000, 2151, -32, -1000,
	-32, -1000, 6321, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	36448, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 186,
	-1000, -1000, -1000, -1000, -1000, -1000, 36448, 36448, 36448, -1000,
	27932, -1000, 1622, -1000, 1978, 1361, 1621, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 42706, -1000, 371, -1000, -1000,
	42706, 918, 1487, -1000, 1487, -34, -1000, 41634, 1427, 36448,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 605, 374, 374, 927, 927, 927, 927, 2080, 1199,
	2843, 451, 43121, 43121, 43121, 43121, 43121, 43121, 43121, 43121,
	355, 543, 543, 355, 355, 355, 355, 355, 43121, 43121,
	43121, 43088, 42966, 2977, 15837, 15837, 748, 1068, 405, 2977,
	15837, 2977, 2977, 2977, 2977, -1000, 1366, -1000, -1000, -1000,
	-1000, 1594, 404, 16541, 16541, -1000, -1000, -1000, 7731, 16893,
	-1000, -1000, -1000, -1000, 402, 15837, -1000, 41093, -221, 267,
	-92, -1000, 15837, 517, -67, -1000, 879, -1000, 15837, -1000,
	-15, 15837, 15837, 15837, 266, -1000, 264, -1000, 738, -1000,
	736, 734, 733, -1000, 401, 1101, 399, 395, 15837, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 42578, 39158, 262,
	-1000, 1583, -92, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	246, -1000, 243, -1000, 42543, -92, 242, 260, -1000, 16541,
	16541, 16541, 7731, 394, 241, -1000, 41475, -1000, 42317, 11252,
	11252, 11252, 236, 42171, 15837, -92, 4840, 4580, 4100, -70,
	-71, -1000, -72, -1000, 2150, -77, 235, 604, 602, 234,
	-1000, -1000, 393, -78, 627, 10900, 19357, 6321, -1000, 627,
	10196, -1000, 20060, 20060, 1294, 1388, 20060, -1000, -1000, -1000,
	-1000, 26918, 528, 587, 26918, -1000, 2149, 1433, 232, -1000,
	-1000, -1000, 36448, 391, -1000, 587, 227, 1010, 36448, 36448,
	36448, -1000, -1000, 1301, 37462, 1286, 43474, 36448, -1000, 390,
	389, 1421, 1401, 36448, 36448, 37124, 36786, 36448, 1009, 60,
	-1000, 600, 388, 36448, 958, 599, 36448, 60, -1000, 382,
	36448, 947, -1000, 593, 1515, 1242, -1000, 815, 1576, 36448,
	225, -79, -35, 43474, -1000, -1000, -1000, -1000, -1000, 36448,
	412, 36448, 60, 36448, 2171, 36448, 60, 36448, 1705, 1862,
	550, 36448, 1429, 15837, 965, -1000, 19005, 648, 36448, 930,
	97, -1000, -1000, -1000, 581, 36448, -1000, -1000, 133, 133,
	-1000, 127, 1244, -36, -1000, 15837, -1000, -1000, 36448, 23864,
	-87, -1000, -1000, 43474, -1000, 521, 745, -1000, 2148, 622,
	23864, 36448, 9492, 9492, -1000, 1474, -1000, -1000, 952, -1000,
	993, -1000, -1000, -1000, -1000, 9492, -1000, -43, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1129, -1000, -1000, -1000, 918,
	-1000, 15837, 2147, -1000, -1000, -1000, 9140, -1000, -1000, -1000,
	36448, -176, 15837, 2977, 2977, 15837, 16541, 16541, -1000, 2977,
	-1000, -1000, -1000, -1000, -1000, 1574, 381, 15837, 43474, 3596,
	3551, -94, -1000, 15837, -37, -1000, 15837, -1000, 40820, -1000,
	-1000, 465, 1858, -1000, 15837, 42044, 220, 10548, -1000, 41898,
	-22, -22, -1000, 2165, 1330, 1026, 986, 894, 2145, -1000,
	21112, 630, 1150, 40674, 43221, 43474, -1000, 15837, -1000, -1000,
	1572, 15837, -1000, 43221, 43474, 16541, 16541, 16541, 16541, 16541,
	16541, 16541, 16541, 16541, 16541, 16541, 16541, 16541, 16541, 16541,
	16541, 16541, 16541, 16541, 1537, 16541, 2117, 2117, 2117, -38,
	15837, -1000, 1618, 1572, 15837, 15837, 43474, 219, 216, 215,
	-1000, 15837, -92, 15837, 15837, 15837, -1000, -1000, -1000, 214,
	-1000, 2144, -1000, -1000, -1000, -1000, 3948, -1000, 1533, -1000,
	-84, -1000, 1835, -1000, 1533, -1000, -1000, 1294, -1000, 380,
	15837, 20060, -1000, 501, -1000, -96, -1000, 26918, -1000, 500,
	-207, -1000, 577, -1000, 587, 378, 36448, 26918, -1000, -1000,
	-1000, 731, 729, 1704, -1000, 1273, -1000, 653, -1000, 1119,
	15837, 17597, 375, 373, 1055, -1000, 1696, 1244, 1695, 1244,
	-1000, -39, 1045, -1000, 21814, 15837, -1000, 727, 21814, -1000,
	-1000, 15837, -1000, 726, 21814, 622, 1569, 797, -1000, 812,
	-1000, 1501, -1000, 24878, 372, 36448, 366, -1000, 342, -1000,
	623, -1000, 339, 36448, 1379, 550, 24202, -1000, 623, 930,
	-1000, 42706, -1000, 930, 8788, 1975, -115, -1000, -1000, -1000,
	627, 20761, 20060, 10196, -117, -1000, -1000, -1000, -1000, 42706,
	-43, 1951, 1951, -1000, 2139, -1000, 499, 213, -1000, 27594,
	-1000, -43, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36448,
	6321, 36448, 36448, 1157, 40547, -1000, 1977, 6321, 2093, 2977,
	1116, 328, 15837, 43474, 4769, -118, 15837, 15837, -1000, 212,
	15837, 498, 42706, -1000, -1000, -1000, 42706, 15837, 2161, 15837,
	210, 208, 206, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 205, -1000, -1000, 38814, 15837, 204, -1000, 203, 201,
	42706, 1618, 42706, -1000, -1000, 591, 591, 914, 914, 914,
	914, 2117, 513, 2867, 1406, 700, 700, 700, 463, 557,
	557, 700, 700, 700, 1559, 1399, 338, 3164, 15837, 200,
	-1000, -1000, 42706, 42706, 196, -1000, -1000, -1000, -92, 489,
	40401, 40274, -1000, 194, 191, 1526, 2052, -1000, 20060, 1526,
	-1000, 36448, 42706, -1000, -177, -1000, 2138, -1000, -1000, 1433,
	-1000, 5612, 26918, 36448, -123, -1000, 36448, 36448, 36448, 1690,
	-1000, 3201, -1000, 40128, -125, -1000, 310, 2030, 15837, -1000,
	-1000, 337, 17597, 36448, -1000, 1425, 1457, 677, 36448, -1000,
	36448, -1000, 36448, 36448, 36448, -1000, 335, 101, -126, 36448,
	-1000, -131, 36448, -1000, -1000, 23864, 703, -1000, 1069, 1510,
	-1000, 17597, 334, 36448, 24878, 2084, -1000, 17597, 1210, 1382,
	550, 24202, -1000, 786, -1000, -1000, -46, -1000, 356, 60,
	930, -1000, -47, -1000, 561, 1930, -1000, 1925, 497, -1000,
	-1000, -48, 331, -1000, 559, 552, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1977, 15837, 15837, 4769, -132, -1000, 2977,
	2977, -1000, 39902, -1000, 42706, -1000, 41898, -1000, -1000, -1000,
	-1000, 1060, -1000, 39864, -1000, -1000, -1000, -1000, 16541, 1546,
	329, 43474, 39705, -1000, -1000, 15837, -1000, -1000, -1000, -1000,
	625, 15837, 15837, 1835, 625, -134, 587, -1000, -1000, -1000,
	2126, -1000, -139, -1000, -1000, -1000, -1000, 36448, -1000, 36448,
	-1000, 6321, 36448, 1552, 1262, -1000, -1000, 1391, 327, 16541,
	36448, -1000, 1089, 17597, 1977, 101, 6321, 1977, 39583, 6673,
	-140, -141, 1254, -1000, 1248, 15837, -1000, 43474, 1244, 1244,
	-1000, 722, 712, 15837, 702, -1000, 696, -1000, -50, 21814,
	-1000, -1000, 2050, 1015, -142, 17597, -147, 190, 60, -148,
	36448, -1000, 550, 24202, -1000, 1862, 1867, 36448, 1969, -1000,
	-1000, 325, 314, 313, -1000, 27256, 27256, 23864, 23864, -1000,
	2977, 2977, -1000, -1000, 187, 1150, 2045, -1000, 3815, 16541,
	43474, -149, -1000, 39321, -1000, 36448, 42706, -92, -1000, -1000,
	26918, 494, -1000, -1000, 1404, -1000, -1000, 36448, 1265, -1000,
	-1000, 15837, 3164, 303, 1501, 302, -1000, -1000, -1000, -1000,
	-1000, -1000, 2030, -15, -1000, 978, -1000, -1000, 42706, 2028,
	-1000, -1000, 36448, 36448, -22, 301, 299, -1000, 1109, 36448,
	1089, -155, -1000, 1501, -1000, 1089, 298, 24202, -1000, 1379,
	790, -156, 36448, -1000, -1000, 7025, 23864, 23864, -1000, -158,
	-1000, -1000, -1000, 951, 15837, 3815, -164, -1000, -1000, -56,
	-1000, 2082, -1000, -1000, -1000, -1000, 1683, 39193, 1337, 36448,
	-1000, 36448, 1977, 184, 36448, 656, 6321, -1000, -1000, 172,
	15837, 15837, 296, 293, 291, 1501, 1089, -1000, 1501, 17597,
	-1000, 1382, 862, -1000, 627, -1000, -165, -166, -1000, 170,
	16189, 16189, -92, -1000, 36448, 290, 1666, -1000, 1179, 1296,
	160, -173, -1000, -1000, 289, -1000, 15837, -1000, 2161, -179,
	-180, 36448, 36448, 36448, -1000, 1501, -1000, -182, -1000, 20761,
	-1000, 622, 622, -1000, -1000, -1000, 17245, 1312, 912, 41353,
	-1000, -1000, -1000, 36448, -1000, 1203, 1202, 897, -1000, -1000,
	-1000, -1000, -1000, 1337, 42706, -1000, -1000, -187, -189, -190,
	-1000, 1089, -172, -1000, -1000, 2097, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1909, -1000, 665, 1187, 1187, 1179, 288,
	287, 1198, 1501, -1000, 15485, -1000, 2106, -1000, -1000, 1422,
	-1000, -1000, 1032, 1028, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 159, 6321, 62, 6321, -1000, 647, -1000, 645,
	285, 1367, -61, 9844, 775, 311, -116, -1000, -192, -1000,
	42706, -1000, -1000, 281, -1000, 9844, 1032, -1000, 9844, 9844,
	-195, -1000, -1000, -197, -1000, -62, 1028, -128, -1000, -1000,
	1028, -1000,
}
var sqlPgo = [...]int{

	0, 2592, 2591, 1697, 2077, 2589, 2588, 2586, 2583, 2582,
	2577, 2571, 2570, 2568, 2566, 2565, 2563, 2562, 2561, 2559,
	2556, 2555, 2546, 2545, 2070, 2540, 2068, 2533, 2531, 2526,
	2519, 2511, 2509, 2024, 2506, 2504, 2503, 2502, 2501, 2497,
	1997, 2494, 1977, 2493, 2490, 2488, 2486, 2484, 1972, 2483,
	96, 133, 1964, 2481, 2480, 1961, 1957, 1916, 2474, 1907,
	2471, 2470, 1852, 1850, 2468, 51, 2463, 2461, 2458, 1846,
	1816, 2457, 2455, 2451, 159, 2443, 1806, 2441, 2439, 2436,
	2434, 2431, 2424, 2423, 2419, 2418, 2417, 2407, 2405, 2404,
	2402, 2400, 2399, 2397, 2396, 2395, 165, 2394, 2393, 1801,
	1686, 2379, 2378, 36, 32, 19, 60, 30, 145, 2880,
	139, 2369, 2367, 2364, 2362, 2361, 2360, 28, 101, 100,
	2355, 106, 2352, 2351, 49, 39, 22, 18, 72, 89,
	2347, 2343, 2380, 33, 2342, 2340, 144, 2339, 80, 29,
	107, 160, 153, 114, 121, 2338, 2337, 2335, 56, 119,
	6, 9, 3, 8, 1, 2332, 4, 2, 2330, 2329,
	20, 86, 74, 2326, 27, 125, 2325, 2324, 130, 2323,
	63, 92, 1580, 95, 122, 1544, 98, 2320, 66, 17,
	65, 2318, 2317, 161, 43, 2316, 31, 75, 149, 115,
	2315, 54, 162, 132, 81, 128, 134, 2313, 2310, 2309,
	102, 2308, 120, 97, 2306, 2304, 93, 2303, 94, 141,
	2302, 142, 113, 2300, 2299, 123, 2298, 124, 2296, 2295,
	164, 152, 116, 21, 40, 67, 14, 1590, 1581, 140,
	90, 58, 44, 2294, 792, 1343, 1300, 45, 104, 79,
	71, 105, 62, 88, 151, 35, 2291, 2286, 137, 2285,
	2284, 2283, 2282, 2281, 103, 2277, 2276, 23, 2275, 78,
	34, 57, 109, 46, 59, 127, 112, 163, 99, 2274,
	85, 131, 2271, 111, 2270, 2266, 1621, 118, 2264, 2263,
	2260, 1526, 1123, 1076, 402, 2259, 2258, 1059, 1048, 2256,
	2255, 87, 2254, 117, 110, 155, 148, 150, 61, 2252,
	129, 26, 2250, 53, 38, 0, 185, 180, 2245, 126,
	77, 2244, 2241, 2240, 2235, 24, 10, 7, 13, 11,
	16, 50, 41, 2234, 2232, 138, 82, 68, 2231, 158,
	2230, 2229, 2227, 37, 2226, 15, 2222, 12, 2220, 2217,
	25, 5, 2215, 2210, 146, 2209, 91, 2208, 2028, 2207,
	156, 2206, 2205, 1772, 2200, 48, 108,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 119, 119, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 116, 116, 121, 121, 121, 123, 123,
	120, 120, 115, 115, 24, 24, 63, 63, 106, 56,
	56, 56, 303, 303, 304, 304, 102, 102, 103, 103,
	103, 103, 104, 104, 105, 105, 105, 32, 32, 32,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 40, 40, 41, 41, 41, 41, 41,
	41, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 47, 47, 47, 45, 45, 45, 44, 44,
	44, 43, 43, 43, 46, 46, 46, 174, 174, 173,
	173, 177, 177, 48, 48, 48, 48, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 51, 51, 51, 51, 51, 51, 51,
	272, 272, 271, 49, 49, 246, 246, 52, 52, 201,
	201, 53, 53, 53, 53, 53, 54, 54, 64, 64,
	344, 344, 344, 348, 348, 349, 349, 350, 350, 350,
	350, 350, 350, 350, 346, 346, 59, 59, 59, 59,
	60, 60, 60, 61, 61, 101, 101, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 29, 30, 70, 70,
	70, 72, 69, 69, 69, 71, 71, 71, 71, 73,
	73, 74, 74, 74, 74, 74, 75, 75, 297, 295,
	295, 296, 296, 146, 146, 146, 146, 146, 147, 147,
	147, 302, 302, 302, 302, 302, 302, 301, 301, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 88, 88, 88, 96,
	96, 96, 96, 96, 96, 96, 77, 77, 82, 82,
	82, 82, 82, 78, 78, 83, 83, 84, 84, 85,
	85, 85, 85, 85, 85, 79, 79, 79, 79, 87,
	87, 87, 87, 86, 86, 92, 92, 92, 92, 92,
	92, 89, 89, 89, 89, 90, 90, 90, 93, 93,
	93, 93, 80, 80, 81, 81, 94, 94, 95, 95,
	95, 95, 95, 91, 91, 91, 345, 345, 347, 347,
	57, 57, 36, 36, 37, 37, 148, 148, 149, 149,
	225, 225, 225, 225, 150, 150, 122, 122, 122, 151,
	151, 152, 152, 153, 153, 153, 155, 155, 156, 156,
	157, 157, 157, 154, 154, 154, 224, 313, 313, 314,
	314, 314, 314, 314, 314, 315, 315, 315, 315, 315,
	315, 315, 311, 311, 312, 309, 309, 310, 310, 310,
	310, 351, 351, 223, 223, 160, 160, 316, 316, 316,
	316, 317, 317, 317, 317, 317, 320, 319, 318, 318,
	318, 318, 318, 258, 258, 258, 98, 98, 38, 38,
	38, 128, 128, 39, 39, 35, 35, 35, 205, 205,
	164, 164, 263, 263, 263, 139, 139, 117, 117, 117,
	17, 13, 13, 13, 13, 13, 13, 23, 23, 21,
	21, 206, 206, 207, 207, 58, 58, 62, 62, 67,
	67, 97, 97, 97, 97, 97, 97, 25, 25, 25,
	25, 31, 31, 31, 31, 66, 66, 353, 353, 135,
	135, 135, 135, 136, 136, 220, 220, 221, 221, 354,
	354, 222, 222, 222, 130, 129, 131, 131, 34, 34,
	34, 124, 124, 125, 125, 126, 126, 127, 127, 355,
	355, 55, 55, 55, 100, 100, 142, 142, 217, 217,
	217, 219, 219, 218, 218, 218, 191, 191, 191, 99,
	99, 169, 169, 179, 179, 180, 180, 269, 181, 181,
	65, 65, 109, 109, 107, 107, 107, 107, 107, 107,
	107, 107, 108, 108, 108, 110, 110, 110, 110, 110,
	110, 110, 113, 113, 113, 114, 114, 114, 112, 112,
	326, 326, 326, 329, 329, 325, 327, 327, 328, 328,
	352, 352, 192, 192, 192, 159, 158, 158, 162, 162,
	161, 163, 163, 262, 262, 262, 189, 189, 188, 188,
	188, 188, 210, 210, 208, 208, 209, 209, 213, 213,
	214, 214, 214, 215, 215, 216, 216, 187, 187, 242,
	242, 212, 212, 211, 111, 111, 111, 168, 168, 168,
	170, 170, 232, 232, 232, 233, 233, 231, 231, 231,
	231, 264, 264, 264, 264, 264, 264, 264, 264, 342,
	342, 342, 343, 343, 261, 261, 265, 265, 265, 265,
	265, 265, 259, 259, 259, 259, 260, 260, 270, 270,
	195, 195, 195, 195, 193, 193, 194, 194, 266, 266,
	266, 266, 190, 190, 267, 267, 267, 226, 226, 273,
	273, 273, 291, 291, 167, 167, 167, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 275, 275,
	275, 275, 277, 277, 277, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 290, 290, 290, 290, 290, 278, 278,
	285, 285, 286, 286, 287, 288, 279, 279, 280, 280,
	281, 282, 289, 289, 289, 289, 293, 293, 283, 283,
	283, 283, 283, 284, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 203, 203,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 236, 236, 236, 236, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 321, 321, 321,
	321, 321, 321, 321, 321, 323, 323, 324, 324, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 330,
	330, 331, 331, 333, 333, 334, 334, 335, 336, 336,
	336, 337, 338, 338, 332, 332, 339, 339, 339, 340,
	340, 341, 341, 341, 341, 341, 248, 248, 249, 250,
	256, 256, 256, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 137,
	137, 137, 137, 137, 176, 176, 175, 175, 245, 245,
	243, 243, 247, 247, 196, 196, 292, 292, 292, 292,
	292, 292, 292, 197, 197, 197, 204, 198, 198, 199,
	199, 199, 199, 199, 239, 240, 200, 200, 200, 241,
	241, 251, 255, 255, 254, 253, 253, 252, 252, 229,
	229, 230, 230, 228, 227, 184, 184, 183, 183, 182,
	182, 356, 356, 257, 257, 185, 185, 186, 178, 178,
	268, 268, 268, 268, 171, 171, 144, 144, 172, 172,
	140, 140, 143, 143, 141, 141, 141, 141, 165, 165,
	166, 166, 138, 138, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 294, 294, 294, 244, 132,
	132, 132, 133, 133, 134, 134, 299, 299, 299, 300,
	300, 300, 300, 298, 298, 298, 298, 298, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 1, 3, 1,
	2, 2, 3, 2, 2, 5, 3, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 3, 1, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 2, 6, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 1, 4, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 3, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 4, 3, 5, 3, 4,
	5, 2, 3, 3, 3, 4, 2, 3, 4, 3,
	3, 3, 4, 4, 4, 4, 2, 3, 7, 7,
	7, 4, 5, 5, 5, 5, 2, 0, 2, 0,
	3, 2, 8, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 1,
	0, 9, 9, 6, 7, 5, 3, 5, 1, 3,
	1, 1, 1, 10, 11, 9, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 2, 4, 7,
	3, 3, 0, 6, 3, 11, 14, 4, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	3, 2, 0, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 4, 4, 2, 3,
	5, 5, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 1, 0, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 1, 0, 2, 2, 2, 3, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 6, 3, 3, 1, 5, 5, 0,
	2, 3, 1, 3, 2, 0, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 2, 3, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 3, 4, 1, 1, 1, 5,
	1, 3, 3, 1, 3, 3, 1, 3, 3, 1,
	1, 3, 3, 1, 1, 6, 6, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 5, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 381, -4, -24, -26, -29, -32,
	-33, -53, -40, -41, -42, -52, -48, -54, -55, -56,
	-57, -49, -63, -62, -64, -67, -65, -58, -59, -68,
	-76, -97, -98, -99, -100, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 47, -30, 71, -34, -35, -36,
	-37, 73, -38, -39, 94, -328, 98, -43, -44, -45,
	-47, -46, 102, 109, 112, 134, 145, 231, 237, 258,
	260, 262, 269, -107, -109, 256, -60, -61, -69, -70,
	-71, -72, -101, 281, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -88, -89, -90, -91, -92,
	-93, -94, -95, 284, -25, -31, -66, 323, -11, -12,
	-15, -14, -16, -13, -20, -22, -19, -21, -23, -17,
	-18, -10, 111, -326, -110, -108, 378, 257, 332, 35,
	293, 61, 105, 264, 348, 355, -113, -111, -112, -114,
	274, 340, 303, 382, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 2, 303, 343,
	87, 153, 242, -344, 2, -172, 303, 87, -141, -132,
	371, 4, -305, -307, 20, 21, 23, 33, 34, 35,
	40, 44, 47, 48, 55, 60, 61, 62, 67, 64,
	65, 66, 69, 71, 72, 75, 76, 77, 85, 86,
	88, 90, 94, 96, 98, 101, 102, 104, 109, 111,
	110, 112, 122, 123, 128, 130, 135, 141, 142, 145,
	146, 154, 157, 159, 152, 169, 170, 171, 175, 176,
	177, 180, 179, 184, 185, 188, 189, 192, 194, 196,
	197, 200, 198, 202, 203, 205, 204, 210, 212, 213,
	215, 218, 221, 224, 227, 228, 229, 230, 231, 233,
	235, 237, 239, 240, 241, 242, 243, 245, 246, 248,
	249, 250, 251, 252, 256, 254, 255, 257, 258, 259,
	260, 262, 264, 265, 267, 282, 283, 294, 269, 270,
	271, 272, 273, 277, 275, 278, 279, 281, 284, 286,
	289, 292, 293, 295, 298, 299, 296, 291, 302, 304,
	305, 306, 307, 308, 309, 310, 311, 318, 319, 323,
	324, 325, 326, 329, 330, 331, 332, 334, 337, 338,
	339, 344, 349, 350, 351, 352, 353, 28, 36, 37,
	38, 39, 41, 42, 45, 46, 51, 52, 53, 56,
	89, 91, 92, 108, 113, 114, 124, 125, 126, 136,
	138, 147, 148, 151, 158, 160, 161, 162, 163, 164,
	166, 173, 174, 182, 199, 209, 211, 222, 226, 234,
	236, 244, 266, 276, 287, 288, 297, 300, 313, 314,
	315, 320, 321, 336, 340, 341, 381, 381, 2, 170,
	241, -140, -132, 87, 381, 381, 381, 381, 303, 2,
	333, 343, -205, 87, 328, 381, 381, -132, 237, 22,
	2, 96, 157, 331, 330, 22, 233, 275, 305, 307,
	2, 381, 381, 381, 381, 381, 2, 343, 303, 153,
	87, 333, -132, 2, -51, 2, 378, -50, -4, -33,
	-42, -52, -48, -24, -26, -40, -56, -55, -57, -59,
	-63, -62, -65, -69, -70, -76, -99, -100, 281, 111,
	-348, 2, 22, -349, -350, 73, 102, 134, 274, 157,
	96, 330, 303, 2, 170, 2, -132, 2, -344, 2,
	170, 2, -348, 2, -132, 2, -136, 2, 269, -132,
	381, 381, 381, 381, 381, 189, 55, 266, 278, -74,
	319, -73, 313, -297, -75, 2, -173, 200, -132, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 2, -96, 278, 34,
	55, 22, 60, 88, 135, 153, 154, 176, 68, 69,
	240, 189, 171, 318, 177, 279, 304, 319, 73, 334,
	308, 110, 4, 87, 200, 280, 313, 381, 381, 381,
	-352, 2, 303, 271, 284, -108, -110, -109, -161, -162,
	327, 165, 107, 220, -107, -109, 2, -326, -96, 278,
	2, 55, 22, -295, 2, -257, 216, -234, 93, -236,
	369, 370, 364, 206, 354, -248, -238, -251, 108, 266,
	378, -140, -237, 384, 9, -323, -109, 29, -249, -250,
	49, -132, 7, 8, 5, 6, -138, -275, -244, -284,
	322, 115, 208, -321, -322, 4, -305, -299, -276, -286,
	-280, -283, 166, 58, 79, 80, 83, 81, 84, 280,
	333, 50, 28, 113, 114, 226, 234, 300, 320, 321,
	147, 209, 148, 56, 136, 182, 101, 37, 39, 41,
	42, 51, 52, 89, 91, 92, 124, 125, 126, 158,
	160, 161, 162, 163, 164, 211, 244, 287, 297, 314,
	315, 341, -306, -287, -288, -281, -282, 74, 116, 133,
	156, 149, 168, 172, 183, 186, 195, 201, 223, 225,
	263, 285, -289, -353, 2, 319, 319, 2, -353, 2,
	-353, 2, -135, 2, 319, 316, -329, 245, -325, -132,
	-329, 381, 381, 383, 381, -158, -159, 2, 22, 99,
	-186, 2, 378, -264, 2, 376, -266, -140, -109, -265,
	378, 217, -3, 2, -266, 147, -140, 2, -266, 147,
	-140, 2, -132, 2, -143, 147, -140, -298, 4, -305,
	-307, -306, -308, 58, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 43, 49, 50, 54, 57, 59, 68,
	73, 78, 79, 81, 80, 82, 83, 84, 93, 95,
	97, 99, 100, 103, 105, 107, 115, 117, 129, 131,
	132, 134, 137, 139, 150, 153, 155, 165, 167, 178,
	181, 187, 190, 191, 206, 207, 208, 214, 216, 217,
	219, 220, 232, 238, 247, 261, 274, 280, 290, 301,
	303, 312, 316, 317, 322, 327, 328, 333, 335, 342,
	343, 345, 346, 347, 348, 316, 383, -172, -165, -132,
	-228, -227, 380, -234, 2, -234, 2, 132, 378, -183,
	-184, -227, -228, 2, -173, 147, -132, 147, 2, -173,
	2, 153, -132, 147, 2, -132, 22, 132, 2, 167,
	2, 167, 2, -267, 2, -266, -174, 147, 2, -173,
	-174, 147, 2, -144, 147, 2, -143, -132, 147, 2,
	-165, 147, 2, -201, 378, -272, 2, -271, -300, 4,
	-305, -307, -306, 340, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 278, 216, 383, -173,
	-234, -246, 378, 132, -234, 216, -132, 2, 282, 2,
	378, -74, 53, 319, -221, 2, -222, -129, -130, -131,
	169, 239, 243, 353, 316, 359, 132, -295, -177, 380,
	-96, 2, -303, 2, -301, 9, -300, 5, 282, 2,
	240, 279, 55, 132, 2, 2, -345, 2, 216, 132,
	2, 132, 2, 132, 2, 132, 2, 132, 2, 2,
	240, 279, 2, 129, 2, 318, 2, 2, 132, 2,
	169, 239, 294, 2, 303, 343, 2, 132, 132, 353,
	2, -190, -266, 303, 353, 22, -161, -162, -211, -188,
	129, -208, -209, 187, 117, 214, -192, 22, 99, -192,
	-192, 44, 379, 379, -96, 282, 2, 10, 11, 57,
	33, 369, 370, 371, 372, 127, 373, 374, 367, 368,
	366, 357, 358, 361, 362, 363, 70, 360, 359, 63,
	193, 268, 118, 119, 120, 121, 253, 13, 14, 15,
	26, 219, 186, 354, 149, 285, 364, 16, 17, 18,
	168, 36, 150, -137, -145, -234, -234, -234, -234, -234,
	225, -182, -229, 376, -109, 378, 378, -109, -234, -175,
	378, 7, -109, -243, 376, -252, -234, -183, 378, 5,
	378, 5, -330, 349, 129, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 236, -293, 344, -293, -293, -277,
	378, -277, -278, 378, -277, 350, 355, 378, -220, -221,
	-220, 316, -136, 383, -329, -166, 378, -186, -178, -268,
	-234, 371, -178, -185, -257, 74, -195, 172, 201, 133,
	183, 263, 156, 7, -51, -231, 384, 378, 371, -261,
	355, -109, -265, 378, -264, -140, 378, -119, 254, -118,
	21, 23, 102, 338, 108, 291, 309, 111, 270, 254,
	108, 111, 254, 291, 309, 270, 254, 108, 384, 111,
	-303, -141, 383, -298, 371, 295, 379, -171, -140, -184,
	378, -160, 206, -128, -327, 348, 206, -160, 378, -133,
	147, 2, -132, -327, 206, -267, -142, -140, -142, 281,
	-132, 30, -121, 383, 48, 259, 108, -121, 108, -121,
	383, 108, -121, 108, 108, -175, -234, 379, 383, -344,
	-350, 73, 378, 30, -245, -273, -274, -276, -285, -279,
	-283, -284, 40, 46, 45, 174, 173, 310, 199, 276,
	288, 336, 151, 38, 215, 159, 4, 158, 160, 161,
	162, 163, 164, 287, 37, 244, 125, 126, 124, 101,
	92, 91, 211, 42, 41, -287, -288, -281, -282, 89,
	314, 315, 166, 39, 52, 51, 341, 297, -304, -303,
	-344, -297, -175, 30, -221, 2, -354, 383, 185, -147,
	192, 205, 141, 217, 351, -302, 5, 4, -244, -258,
	93, 189, -284, 8, 370, -294, 7, 369, -296, -295,
	-296, 77, 380, -298, -173, 22, 283, 2, -297, -347,
	129, -344, -297, -297, -297, -297, -297, 278, -51, 129,
	-132, 185, -297, 2, -297, 2, 303, 153, 303, -121,
	383, -303, 64, 65, 353, -211, -188, -189, -188, -212,
	-211, 330, -209, -208, -213, -234, 22, -216, 123, 202,
	-234, -236, -108, -108, -108, -163, -262, -234, 238, 153,
	-297, -291, -273, -290, 249, 250, 248, 252, 251, -273,
	-298, 313, -234, -234, -234, -234, -234, -234, -234, -234,
	-234, -234, -234, -234, -234, -234, -234, -234, -234, -234,
	-234, -234, -234, -234, -234, -234, -234, -234, -234, -234,
	-234, -234, -234, -234, 186, 149, 285, 36, 150, -234,
	316, -234, -234, -234, -234, 198, 206, 208, 322, 115,
	329, 99, 212, -356, 301, 32, -241, -109, 378, -256,
	27, 290, 22, -248, 266, 378, -229, -234, -230, -176,
	-175, 379, 383, -176, -247, -243, -255, -254, 345, 379,
	-175, 342, 22, 99, 371, 2, 7, -202, 352, 197,
	90, 142, 196, -203, 273, -331, 122, 137, 378, 379,
	2, 379, 2, 379, 2, 379, 2, -234, -234, -196,
	2, -292, -175, 4, 352, 197, 90, 142, 196, 273,
	-196, 2, -197, 2, -234, -175, -198, -235, -236, 369,
	370, 364, 378, 266, -199, 2, -234, -176, -234, 43,
	181, 317, -200, -234, 132, -175, -234, -234, -234, -175,
	-175, 2, -175, 2, 378, 7, 7, 313, 313, 7,
	-136, -325, 30, -165, -168, 383, 132, 30, 4, -168,
	383, 379, 172, 172, -264, -195, 172, -193, 223, -193,
	-193, -342, 378, 377, -261, -298, 376, 385, -176, 2,
	-260, -259, 30, -132, 221, 379, -140, 383, 316, -206,
	68, 59, -224, 147, 59, -309, -132, 68, -310, 54,
	328, 238, 131, -206, 68, -206, 68, 68, -266, 33,
	-65, 66, 132, 316, -266, 66, 316, 33, -65, 132,
	316, -143, -298, 66, -270, 356, -132, 132, 379, 383,
	-148, -165, -149, -132, -225, -224, -311, -312, -309, 153,
	328, 116, 30, 108, 230, 108, 30, 216, 206, -124,
	306, 108, -226, 346, -217, -65, 378, 93, 30, -217,
	-179, -180, -269, -181, -140, 378, -132, -173, -174, -174,
	-143, -144, -132, -165, 379, 383, -51, -271, 316, 335,
	-149, -50, 379, 383, -167, 29, 376, -202, 378, -270,
	383, 132, 359, 316, 379, 319, -222, -146, 243, 289,
	255, 277, 8, 7, 7, 383, -298, -346, -132, 278,
	-51, -140, -143, -140, -266, 129, 65, -189, -212, -214,
	-294, 378, 370, -215, 266, 267, 383, -117, 31, 97,
	175, -140, 353, -234, -234, 316, -356, 301, -241, -234,
	198, 208, 322, 115, 329, 99, 212, 132, 378, -235,
	-235, -175, -238, 378, -175, 377, 387, 379, -234, 377,
	377, 383, -253, -254, 103, -234, -162, 383, -161, -234,
	-175, -175, 379, 379, 316, 316, 316, 316, 378, -336,
	224, 378, 378, -234, 30, 383, 379, 132, 379, 379,
	-204, 232, 379, 10, 11, 369, 370, 371, 372, 127,
	373, 374, 367, 368, 366, 357, 358, 359, 63, 193,
	268, 13, 14, 15, 168, 150, -235, -235, -235, -175,
	378, 379, -239, -240, 132, 129, 30, -200, -200, -200,
	379, 132, -175, 383, 383, 383, 379, 379, 379, 7,
	379, 383, 379, 353, 353, 379, 378, 379, -226, -268,
	-170, 2, -264, -298, -226, -257, -264, -264, -194, 335,
	216, 172, -264, -259, 379, -343, 7, -261, -260, 7,
	-233, -232, 130, 204, 379, -132, 378, -261, 379, -118,
	-140, -132, -132, 206, -224, 147, -123, 206, -273, -132,
	378, 378, 175, 175, -132, -132, 147, -132, 147, -132,
	-132, -119, 254, -65, 353, 378, -140, 254, 353, -132,
	-65, 378, -132, 254, 353, -102, 146, 212, 295, 132,
	-140, 379, 379, 383, -133, 153, -133, -65, -173, 5,
	-132, -65, -140, 108, -125, 104, -355, 359, -132, -210,
	-208, -234, -191, -219, 261, 216, -171, 340, -132, -191,
	-169, 383, 132, 359, -171, -121, -121, -121, -121, -234,
	-346, -303, 379, -273, 376, 377, 7, 7, -105, 348,
	-303, -346, -295, -295, -129, 326, 62, 243, -295, 383,
	242, 87, 303, -215, -234, -262, -140, 384, -234, -234,
	-235, -235, 132, 378, -234, -245, 26, 26, 379, -176,
	383, -230, -234, 379, -243, 105, -234, 312, 379, 342,
	-162, -162, -162, 5, 197, 142, 196, -203, 196, -203,
	-203, 7, -337, -132, 378, 346, -161, 379, -291, -273,
	-234, -239, -234, -291, -273, -235, -235, -235, -235, -235,
	-235, -235, -235, -235, -235, -235, -235, -235, -235, -235,
	-235, -235, -235, -235, 99, 206, 212, -235, 383, -176,
	-240, -239, -234, -234, -273, 379, 379, 379, -175, -234,
	-234, -234, 379, 7, -50, -187, 137, -270, 383, -187,
	-194, 378, -234, -264, 377, 379, 383, -260, 377, 383,
	386, 359, -261, 378, -165, -259, 316, 316, 108, 206,
	337, -313, -310, -234, -164, -263, -132, -324, 378, -321,
	-322, -138, 378, 378, -116, 102, 281, -207, 108, -121,
	108, -121, 316, -206, 68, -237, -138, -132, -175, 316,
	-237, -175, 316, -237, -105, 132, 302, 295, -150, 152,
	-225, 378, -133, 378, 378, -160, -128, 378, -132, -126,
	180, -355, -301, -327, -191, -191, -178, 207, 67, 379,
	-226, -180, -170, -257, 379, -106, 75, -106, 7, 377,
	379, -104, 218, -103, -132, 5, -132, -298, -132, -140,
	217, 379, -117, -298, 26, 26, -234, -245, 379, -234,
	-234, 379, -234, 377, -234, 5, -234, 379, 379, 379,
	379, -338, -132, -234, 379, 379, 379, -240, 132, 99,
	212, 378, -234, 379, 379, 383, 379, 379, 379, 379,
	-242, 139, 44, -264, -242, -165, -231, 7, -232, -298,
	376, -260, -165, 379, -132, -132, -224, 108, -314, 68,
	-315, 57, 116, 73, 206, 208, 328, 238, 54, 93,
	247, 379, 379, 383, -139, -183, 57, -139, -234, 378,
	-164, -165, 206, 93, 206, 93, 86, 324, -132, -132,
	-140, -132, -132, 378, 379, -140, 379, -132, -304, 313,
	-151, -152, 229, 150, -164, 378, -165, -148, 30, -164,
	216, -127, 179, -355, -301, -124, -218, 378, 216, -65,
	-191, 359, 86, 86, 377, 383, 378, 359, 359, -117,
	-234, -234, 379, 379, -162, -332, 229, 379, -235, 132,
	378, -245, 379, -234, -333, 347, -234, -175, -333, 379,
	-261, 7, 379, -224, -132, -298, -132, 116, 147, 208,
	175, 378, -235, -140, -223, -351, 72, 299, -263, -117,
	-298, -117, 379, -175, 379, 379, 208, 208, -234, -273,
	-121, -121, 316, 316, -175, 316, 316, -237, 44, 227,
	379, -164, 379, 379, -65, 379, -140, -355, -301, -125,
	100, -165, 68, -186, -109, 378, 378, 378, -103, -104,
	-303, -303, 379, -162, 44, -235, -245, 379, 379, -334,
	-335, -132, -260, 377, -315, -133, 206, -234, -134, 378,
	-150, 378, -139, -162, 247, -120, 57, -132, -132, -162,
	378, 378, 188, 242, -140, -223, 379, -150, -223, 378,
	-301, -126, 330, 207, 379, -132, -304, -304, 379, -339,
	242, 267, -175, 379, 383, 30, 108, 379, -316, 194,
	-132, -165, -117, 379, -140, -115, 335, -298, 379, -175,
	-175, 378, 378, 378, -150, -223, -150, -164, -127, 281,
	-226, 379, 379, 379, -340, -341, 36, 325, 77, -234,
	-340, -335, -337, 116, -317, -320, -319, 216, 133, 228,
	286, 379, 379, -160, -234, 379, 379, -165, -165, -165,
	-150, 379, -179, -105, -105, -341, 235, 128, 266, 235,
	128, -132, -319, 216, -320, 216, 330, 96, -316, 379,
	379, 379, -223, -226, 26, -318, 203, 259, 48, 281,
	-318, -317, 378, 378, -122, 48, 259, -150, -341, 20,
	208, 93, -153, 229, -154, 229, 379, -298, 379, -298,
	340, 340, -155, 378, 184, 383, -152, -151, -156, -157,
	-234, 93, 195, 311, -153, 378, 383, 379, 383, 378,
	-156, -153, -157, -156, 379, 379, 383, -152, -151, -154,
	383, -154,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 306, 0, 159, 161, 163,
	165, -2, 168, 170, 0, 0, 0, 181, 183, 185,
	187, 189, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 670, -2, 0, 286, 288, 297, 299,
	301, 303, 304, 0, 349, 351, 353, 355, 357, 359,
	361, 363, 365, 367, 369, 371, 373, 375, 377, 378,
	380, 382, 384, 0, 591, 593, 595, -2, 65, 66,
	67, 68, 69, 70, 78, 79, 80, 81, 72, 74,
	75, 77, 0, 708, -2, 719, 0, 0, 0, -2,
	0, -2, -2, -2, 0, 0, 685, 687, 689, 691,
	-2, 0, 0, -2, 7, 13, 15, 17, 20, 22,
	24, 26, 28, 30, 32, 34, 36, 38, 40, 43,
	49, 51, 53, 56, 58, 60, 62, 64, 0, 0,
	0, 0, 0, 0, 125, 270, 0, 1294, 1218, 1224,
	1225, 1249, 1250, 1251, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
	1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
	1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,
	1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
	1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
	1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354,
	1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
	1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
	1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
	1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
	1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404,
	1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414,
	1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424,
	1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
	1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464,
	1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
	1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 151, 153, 154, 0,
	0, 0, 1220, 1294, 160, 162, 164, 166, 0, 172,
	0, 0, 0, 0, 558, 169, 171, 261, 1356, 263,
	265, 0, 0, 0, 0, 175, 176, 177, 178, 179,
	180, 182, 184, 186, 188, 190, 191, 0, 0, 0,
	0, 0, 260, 258, 213, 214, 0, 243, 244, 245,
	246, 247, 249, 217, 219, 220, 222, 224, 226, 228,
	229, 231, 233, 234, 236, 238, 239, 241, 0, 0,
	0, 267, 273, 274, 275, 277, 278, 279, 280, 281,
	282, 283, 0, 131, 0, 461, 256, 254, 0, 127,
	0, 588, 0, 269, 589, 590, 585, 586, 1383, 614,
	287, 289, 298, 300, 302, -2, -2, 1477, -2, 313,
	-2, 321, 1483, 0, 324, 325, 328, -2, 209, 350,
	352, 354, 356, 358, 360, 362, 364, 366, 368, 370,
	372, 374, 376, 379, 381, 383, 385, 386, 0, 0,
	0, 390, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, 0, 0, -2,
	0, 0, 389, 391, 392, 393, 0, 592, 594, 596,
	0, 547, 710, 0, 0, -2, 683, 684, -2, 0,
	714, 714, 714, 0, 0, 684, 682, 0, 290, 0,
	292, 0, 390, 295, 296, 329, 330, 1203, 1204, 920,
	0, 0, 0, 0, 0, 0, 1022, 1024, 1448, 1477,
	0, 1026, 1027, 0, 1029, 1031, 1032, 0, 1035, 1036,
	1188, 1220, 1234, 1235, 1236, 1237, 0, 0, 1240, 0,
	1242, 1243, 1244, 1090, 1046, -2, -2, 1232, 848, 849,
	850, 851, -2, 1491, 1050, 1053, 1056, 1059, 1060, 1063,
	1064, 0, 1432, 1449, 1450, 1473, 1474, 1482, 1486, 1487,
	1456, 1470, 1457, 1444, 1454, 1468, 1300, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1258, 882, 883, 888, 889, 1492, 1493, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 891, 616, 598, 607, 616, 600, 601, 602,
	603, 604, 605, 606, 609, 0, 700, 1362, 703, 1231,
	701, 686, 688, 0, 690, 0, 0, 694, 716, 715,
	754, 755, 0, 698, 699, 709, 770, 808, 785, 776,
	0, 0, 2, 71, 0, 1456, 808, 73, 0, 1456,
	808, 76, 0, 82, 0, 1456, 1223, 0, 1263, 1264,
	1265, 1266, 1267, 1491, 1507, 1508, 1509, 1510, 1511, 1512,
	1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
	1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
	1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	1583, 1584, 1585, 1586, 1587, 0, 0, 271, 272, 1228,
	1226, 1227, 0, 155, 156, 157, 158, 0, 0, 1221,
	1197, 1195, 1196, 167, 526, 1456, -2, 1456, 550, 526,
	554, -2, 707, 1456, 630, 262, 264, 0, 174, 0,
	643, 0, 645, 0, 660, 814, 117, 1456, 194, 207,
	117, 1456, 197, 117, 1456, 200, 1216, 117, 1456, 203,
	204, 1456, 206, 257, 0, 0, -2, 250, 252, 1259,
	1260, 1261, 1262, -2, 248, 218, 221, 223, 225, 227,
	230, 232, 235, 237, 240, 242, -2, 0, 0, 0,
	460, 0, 0, 0, 587, 0, 613, 305, 0, 310,
	0, 312, 1443, -2, -2, 316, 617, 621, 622, 623,
	0, 0, 0, 0, 0, 0, 0, 326, 210, 0,
	387, 388, 396, 397, 132, 133, 347, 348, 0, 400,
	421, 433, 0, 0, 404, 406, 459, 408, 0, 0,
	410, 0, 412, 0, 414, 0, 416, 0, 418, 420,
	422, 434, 424, 709, 426, 0, 428, 432, 0, 437,
	0, 439, 440, 441, 0, 0, 447, 0, 0, 394,
	395, 117, 812, 0, 0, 0, -2, 0, 727, 752,
	0, 730, 731, 0, 0, 0, 0, 712, 713, 0,
	0, 0, 672, 673, 291, 0, 294, 0, 0, 0,
	0, 1123, 1124, 1125, 1126, 1127, 1128, 1131, 1132, 1129,
	1130, 1133, 1134, 0, 0, 0, 0, 0, 1135, 0,
	0, 0, 0, 0, 0, 0, 0, 1136, 1137, 1138,
	0, 0, 1140, 0, 1142, 0, 0, 0, 0, 0,
	0, 1202, 0, 0, 1139, 925, 926, 927, 959, 960,
	0, 1023, 1199, 1192, 1025, 0, 1145, -2, 1146, 0,
	0, 1028, 1033, 1034, 1145, 0, 1187, -2, 0, 1239,
	0, 917, 1092, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1168, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 885, 896, 893, 892, 869,
	0, 868, 866, 0, 870, 0, 0, 0, 597, -2,
	599, 0, 611, 0, 702, 0, 0, 756, 759, 1208,
	1212, 1213, 759, 0, 1205, 0, 0, 0, 0, 805,
	805, 805, 803, 779, 0, 785, 0, -2, 809, 797,
	0, -2, 776, 0, 0, 810, 0, 83, 582, 96,
	0, 582, 582, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	799, 1219, 0, 1193, 1194, 147, 0, 0, 1214, 1198,
	467, 0, 0, 548, 0, 706, 0, 0, 0, 0,
	1456, 557, 1252, 632, 0, 818, 0, 646, 0, 0,
	815, 0, 192, 0, 115, 116, 0, 195, 0, 198,
	0, 0, 201, 0, 0, 0, 1146, 709, 0, 0,
	276, 0, 0, 709, 0, 1148, 826, 827, 828, 829,
	830, 917, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 879, 0,
	854, 854, 854, 871, 872, 880, 881, 886, 887, 898,
	899, 901, 903, 897, 897, 897, 894, 895, 799, 134,
	0, 0, 0, 0, -2, 318, 0, 619, 0, 624,
	338, 339, 340, 626, 627, 322, 341, 342, 343, 344,
	345, 346, 0, 543, 0, 545, 1245, 0, 319, 331,
	320, 323, 0, 211, 398, 399, 401, 402, 403, 407,
	0, 456, 409, 411, 413, 415, 417, 425, 429, 709,
	435, 438, 442, 443, 444, 445, 0, 0, 0, 546,
	0, 307, 0, 451, 0, 727, 752, 676, 726, 677,
	751, 753, 728, 729, 734, 738, 739, 742, 745, 746,
	736, 920, 695, 696, 697, 720, 721, 569, 0, 0,
	293, 921, 822, 823, 873, 874, 875, 876, 877, 922,
	923, 0, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, -2, -2, -2, -2, -2, -2, -2, -2,
	946, 947, 948, 949, 950, 951, 952, 953, -2, -2,
	-2, 957, 958, -2, 1141, 1143, 0, 1202, 0, -2,
	0, -2, -2, -2, -2, 971, 0, 973, 976, 978,
	980, 0, 0, 0, 0, 1201, 990, 1179, 0, 0,
	1120, 1121, 1122, 975, 0, 0, 1200, 1191, 0, 0,
	1144, 1030, 0, 0, 0, 1152, 1186, 1182, 0, 1037,
	719, 0, 0, 0, 0, 1044, 0, 1248, 904, 905,
	906, 907, 908, 909, 918, 1100, 0, 0, 0, 1051,
	1052, 1054, 1055, 1057, 1058, 1061, 1062, 0, 0, 0,
	1068, 0, 1155, -2, -2, -2, -2, -2, -2, -2,
	0, 1070, 0, 1072, 1146, 1165, 0, 0, 993, 0,
	0, 0, 0, 1477, 0, 1075, 1146, 1173, 0, 0,
	0, 0, 0, 1146, 0, 1178, 0, 0, 0, 0,
	0, 1086, 0, 1088, 0, 0, 0, 0, 0, 0,
	610, 704, 0, 0, 818, 0, 0, 0, 1211, 818,
	0, 1207, 0, 0, 0, 0, 0, 800, 804, 801,
	802, 0, 0, 785, 797, 767, 0, 0, 0, 774,
	775, 796, 0, 795, 784, -2, 0, 0, 0, 0,
	0, 581, 98, 1456, 0, 119, 0, 0, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 1222, 0, 137, 0, 1229, 0, 0, 0,
	0, 0, 466, 1228, 468, 470, 471, 472, 473, 1253,
	0, 1253, 0, 0, 0, 0, 0, 0, 0, 634,
	640, 0, 733, 0, 658, 648, 0, 0, 0, 658,
	662, 663, 665, 666, 0, 0, 816, 208, 117, 117,
	1217, 117, 117, 205, 259, 0, 215, 251, 0, 0,
	0, 253, 255, 0, 819, 821, 0, 831, 0, 146,
	0, 0, 0, 0, 311, 0, 618, 625, 0, 335,
	0, 337, 544, 1247, 1246, 0, 212, 458, 284, 427,
	430, 453, 454, 455, 813, 0, 452, 680, 681, 0,
	740, 0, 0, 737, 743, 744, 0, 723, 567, 568,
	0, 0, 0, -2, -2, 0, 0, 0, 991, -2,
	972, 974, 977, 979, 981, 0, 0, 0, 0, 0,
	0, 0, 992, 1145, 0, 1189, 1192, -2, 1147, 1150,
	1151, 0, 0, 1183, 0, 0, 0, 0, 718, 719,
	719, 719, 1043, 0, 0, 0, 0, 0, 0, 1045,
	0, 0, 0, 0, 0, 0, 1067, 0, 1069, 1071,
	0, 0, 1073, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 996, 997, 998, 0,
	1145, 1074, 1171, 1172, 0, 0, 0, 0, 0, 0,
	1080, 0, 1177, 0, 0, 0, 1084, 1085, 1087, 0,
	852, 0, 878, 900, 902, 890, 709, 1230, 748, 1209,
	799, 758, 760, 1210, 748, 1206, 787, 0, 789, 0,
	0, 0, 791, 0, 780, 0, 782, 797, 772, 0,
	0, 765, 0, 764, 785, 793, 0, 0, 811, 97,
	571, 0, 0, 0, 100, 1456, 108, 0, 498, 0,
	0, 0, 0, 0, 584, 109, 1456, 117, 1456, 117,
	110, 84, 582, 85, 0, 0, 577, 0, 0, 570,
	86, 0, 579, 0, 0, 146, 0, 0, 148, 0,
	1215, 475, 525, 0, 0, 1253, 0, 464, 526, 551,
	-2, 553, 0, 0, 636, 640, 0, 639, 707, 658,
	732, 817, 641, 658, 0, 0, 0, 650, 647, 644,
	818, 0, 0, 0, 0, 193, 196, 199, 202, 1147,
	266, 0, 0, 1149, 0, 824, 0, 0, 126, 0,
	135, 268, 308, 309, 314, 333, 334, 336, 332, 0,
	0, 0, 0, 0, 0, 722, 569, 0, 924, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 1180, 0,
	0, 0, 1191, -2, 1153, 1181, 1185, 0, 1038, 0,
	0, 0, 0, 1241, 910, 911, 912, 913, 914, 915,
	916, 0, 1098, 1099, 1103, 0, 0, 1049, 0, 0,
	1154, 1164, 1166, 994, 995, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, -2, -2, -2, 1012, 1013,
	1014, -2, -2, -2, 0, 0, 0, 1167, 0, 0,
	1169, 1170, 1174, 1175, 0, 1077, 1078, 1079, 1176, 0,
	0, 0, 884, 0, 0, 750, 0, 757, 0, 750,
	788, 0, 807, 790, 770, 781, 0, 778, 768, 0,
	769, 0, 797, 0, 0, 777, 0, 0, 0, 0,
	118, 496, 515, 0, 0, 560, 566, 566, 0, 1047,
	1048, 0, 0, 0, 102, 0, 0, 0, 0, 106,
	0, 112, 0, 0, 0, 91, 0, 0, 0, 0,
	90, 0, 0, 89, 124, 0, 0, 149, 480, 0,
	469, 0, 0, 0, 467, 0, 549, 0, 0, 638,
	640, 0, 631, 632, 173, 642, 656, 657, 655, 0,
	658, 664, 661, 667, 0, 0, 128, 0, 0, 825,
	832, 144, 1346, 142, 139, 141, 285, 448, 449, 450,
	735, 741, 724, 569, 0, 0, -2, 0, 984, -2,
	-2, 1116, 1147, 1190, 1184, 1238, 719, 1039, 1041, 1042,
	919, 1105, 1102, 0, 1089, 1065, 1066, 1163, 0, 0,
	0, 0, 1147, 1118, 1076, 0, 1082, 1083, 853, 705,
	1094, 0, 0, 761, 1094, 0, 785, 783, 766, 762,
	0, 773, 0, 794, 573, 575, 99, 0, 497, 0,
	500, 0, 0, 0, 0, 506, 507, 0, 0, 0,
	0, 517, 524, 0, 569, 1233, 0, 569, 0, 0,
	0, 0, 0, 114, 0, 0, 583, 0, 117, 117,
	572, 0, 0, 0, 0, 578, 0, 580, 136, 0,
	462, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 628, 640, 0, 633, 634, 0, 0, 0, 649,
	659, 0, 0, 0, 820, 0, 0, 0, 0, 725,
	-2, -2, 985, 1117, 0, 719, 0, 1091, -2, 0,
	0, 0, 1119, 0, 692, 0, 749, 747, 693, 806,
	797, 0, 792, 101, 0, 501, 502, 1253, 0, 505,
	508, 0, 510, 1255, 475, 0, 521, 522, 561, 562,
	565, 563, 566, 719, 519, 0, 103, 104, 113, 121,
	105, 111, 0, 0, 719, 0, 0, 798, 0, 0,
	524, 0, 514, 475, 465, 524, 0, 0, 635, 636,
	0, 0, 0, 668, 669, 0, 0, 0, 143, 0,
	138, 140, 1040, 1108, 0, -2, 0, 1020, 1081, 1093,
	1095, 0, 771, 763, 499, 503, 0, 0, 530, 0,
	518, 0, 569, 0, 0, 123, 0, 574, 576, 0,
	0, 0, 0, 0, 0, 475, 524, 463, 475, 0,
	637, 638, 0, 652, 818, 654, 0, 0, 145, 0,
	0, 0, 1104, 1021, 0, 0, 0, 509, 535, 0,
	0, 0, 564, 1038, 526, 107, 0, 120, 0, 0,
	0, 0, 0, 0, 512, 475, 555, 0, 629, 0,
	653, 146, 146, 1101, 1106, 1109, -2, 1416, 1291, 0,
	1107, 1096, 1097, 0, 511, 531, 532, 0, 527, 528,
	529, 1254, 523, 530, 122, 93, 95, 0, 0, 0,
	513, 524, 818, 129, 130, 0, 1111, 1112, 1113, 1114,
	1115, 504, 533, 0, 534, 0, 0, 0, 535, 0,
	0, 478, 475, 651, 0, 536, 0, 539, 540, 0,
	537, 520, 0, 0, 474, 476, 477, 556, 1110, 538,
	541, 542, 0, 0, 0, 0, 481, 0, 482, 0,
	0, 0, 480, 0, 0, 0, 479, 485, 0, 488,
	490, 491, -2, 0, 483, 0, 0, 486, 0, 0,
	0, 484, 489, 0, 487, 480, 0, 479, 495, 493,
	0, 494,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 367, 3, 373, 368, 3,
	378, 379, 371, 369, 383, 370, 380, 372, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 387, 382,
	357, 359, 358, 361, 384, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 376, 3, 377, 374, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 385, 366, 386, 364,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 360,
	57700, 362, 57701, 363, 57702, 365, 57703, 375, 57704, 381,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:903
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:909
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:918
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:966
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1002
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1013
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1025
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1048
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1074
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1080
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1086
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1095
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1104
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1173
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1196
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1206
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1268
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1269
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1273
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1300
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1326
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1364
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1433
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1485
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1486
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1490
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			return helpWith(sqllex, "CREATE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1511
		{
			return helpWith(sqllex, "DELETE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1522
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1523
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1525
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1535
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1551
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1566
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1589
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1612
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1627
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1678
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1687
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1692
		{
			return helpWith(sqllex, "DELETE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1693
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			return helpWith(sqllex, "INSERT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1715
		{ /* SKIP DOC */
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1743
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1802
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1822
		{
			return helpWith(sqllex, "GRANT")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1842
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1864
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1920
		{
			return helpWith(sqllex, "RESET")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1936
		{
			return helpWith(sqllex, "RESET")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1947
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1952
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1955
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1960
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1962
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1963
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1964
		{
			return unimplemented(sqllex, "set local")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.expr()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2040
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2045
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2062
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2065
		{
			return unimplemented(sqllex, "set from current")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2067
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = Low
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = Normal
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = High
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2176
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2177
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2178
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2185
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2186
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2189
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2193
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
			return helpWith(sqllex, "SHOW")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2204
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.str = "client_encoding"
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2230
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2247
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2252
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2263
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2274
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2296
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2301
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2370
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2388
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2419
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2441
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2452
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2463
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2467
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2471
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2475
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2479
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2483
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2489
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2493
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2497
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2503
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2531
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2638
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2642
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = DropDefault
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 495:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2756
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2963
		{
			return unimplemented(sqllex, "match full")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2964
		{
			return unimplemented(sqllex, "match partial")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2965
		{
			return unimplemented(sqllex, "match simple")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2966
		{
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = NoAction
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = Restrict
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = Cascade
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = SetNull
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = SetDefault
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3052
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[6].str), Password: sqlDollar[7].union.strPtr(), IfNotExists: true}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3067
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3071
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3092
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3132
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = true
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = false
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3162
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3163
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3166
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3167
		{
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = Ascending
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = Descending
		}
	case 569:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3207
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3209
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = true
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = false
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3242
		{
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3243
		{
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3254
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3265
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3276
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3280
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3281
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3282
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3300
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3305
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3318
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3323
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3331
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3338
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3341
		{
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3342
		{
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.str = ""
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.str = ""
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3388
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3401
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3403
		{
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = ReadOnly
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = ReadWrite
		}
	case 628:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3467
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.str = ""
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.str = ""
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.str = ""
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.str = ""
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3510
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3511
		{
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3535
		{
			return helpWith(sqllex, "INSERT")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3552
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3594
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3606
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 659:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3629
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3633
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3634
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3771
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3806
		{
			return helpWith(sqllex, "SELECT")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3807
		{
			return helpWith(sqllex, "VALUES")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3808
		{
			return helpWith(sqllex, "TABLE")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3855
		{
			return helpWith(sqllex, "SELECT")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3899
		{
			return helpWith(sqllex, "TABLE")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3910
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3911
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3912
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3915
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3919
		{
			return unimplemented(sqllex, "cte")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3922
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3923
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3926
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3927
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3930
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3931
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = true
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = false
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = false
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = true
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3954
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3955
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4009
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4033
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4085
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4086
		{
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4089
		{
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4090
		{
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = false
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = true
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4161
		{
			return helpWith(sqllex, "VALUES")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4163
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4178
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &From{}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4200
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4218
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4245
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4282
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4307
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = nil
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4348
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4354
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = true
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = false
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.str = astFullJoin
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.str = astLeftJoin
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.str = astRightJoin
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.str = astInnerJoin
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4466
		{
		}
	case 806:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4552
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4566
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4574
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4598
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4609
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = jsonbColType
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = jsonColType
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4698
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4707
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = nil
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4772
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4868
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 890:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4900
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4939
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4940
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 900:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 902:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = year
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = month
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = day
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = hour
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = minute
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = month
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = hour
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = minute
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = minute
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = nil
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = second
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5035
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5070
		{
			return unimplemented(sqllex, "at tz")
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5278
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5284
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5288
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5292
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5296
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5316
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5324
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5344
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5372
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5376
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5476
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5493
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5501
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5517
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5570
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5571
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5573
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5581
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5584
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5595
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5611
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5612
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5616
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5625
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5631
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5634
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5636
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5640
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5643
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5644
		{
			return unimplemented(sqllex, "current role")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5646
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5650
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5653
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5667
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5671
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5674
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5676
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5679
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5681
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5684
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5693
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5694
		{
			return unimplemented(sqllex, "treat")
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5696
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5716
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5720
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5731
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5736
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5740
		{
			return unimplemented(sqllex, "within group")
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5741
		{
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5745
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5749
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5760
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5770
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5776
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5818
		{
			sqlVAL.str = ""
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5838
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5839
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5840
		{
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5843
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5844
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5850
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5851
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5852
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5853
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5854
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5865
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5869
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5875
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = Any
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5891
		{
			sqlVAL.union.val = Some
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5895
		{
			sqlVAL.union.val = All
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = Plus
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = Minus
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = Mult
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5903
		{
			sqlVAL.union.val = Div
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5905
		{
			sqlVAL.union.val = Mod
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = Bitand
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = Bitor
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = Pow
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5909
		{
			sqlVAL.union.val = Bitxor
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = LT
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5911
		{
			sqlVAL.union.val = GT
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = EQ
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = LE
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = GE
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5915
		{
			sqlVAL.union.val = NE
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = Like
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = NotLike
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5921
		{
			sqlVAL.union.val = ILike
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = NotILike
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5934
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5954
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5960
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5964
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5970
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5980
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5984
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6020
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6048
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6056
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6060
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6076
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6100
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6111
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6151
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6155
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6162
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6168
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6174
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6180
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6184
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6190
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6200
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6209
		{
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6210
		{
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6225
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6229
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6238
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6244
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6248
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6254
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6263
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6267
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6271
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6279
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6283
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6289
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6293
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6299
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6303
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6314
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6318
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6324
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6328
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6341
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6345
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6349
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6353
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6359
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6363
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6369
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6372
		{
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6382
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6386
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6393
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6397
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6401
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6405
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6408
		{
			return unimplemented(sqllex, "func const")
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6410
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6414
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6417
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6419
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6423
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6427
		{
			sqlVAL.union.val = DNull
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6434
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6438
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6444
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6479
		{
			sqlVAL.str = ""
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6485
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6489
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
