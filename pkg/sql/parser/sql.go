// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:348
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const LATERAL = 57494
const LC_CTYPE = 57495
const LC_COLLATE = 57496
const LEADING = 57497
const LEAST = 57498
const LEFT = 57499
const LEVEL = 57500
const LIKE = 57501
const LIMIT = 57502
const LOCAL = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const LOW = 57506
const LSHIFT = 57507
const MATCH = 57508
const MINUTE = 57509
const MONTH = 57510
const NAN = 57511
const NAME = 57512
const NAMES = 57513
const NATURAL = 57514
const NEXT = 57515
const NO = 57516
const NO_INDEX_JOIN = 57517
const NORMAL = 57518
const NOT = 57519
const NOTHING = 57520
const NULL = 57521
const NULLIF = 57522
const NULLS = 57523
const NUMERIC = 57524
const OF = 57525
const OFF = 57526
const OFFSET = 57527
const OID = 57528
const ON = 57529
const ONLY = 57530
const OPTIONS = 57531
const OR = 57532
const ORDER = 57533
const ORDINALITY = 57534
const OUT = 57535
const OUTER = 57536
const OVER = 57537
const OVERLAPS = 57538
const OVERLAY = 57539
const PARENT = 57540
const PARTIAL = 57541
const PARTITION = 57542
const PASSWORD = 57543
const PLACING = 57544
const POSITION = 57545
const PRECEDING = 57546
const PRECISION = 57547
const PREPARE = 57548
const PRIMARY = 57549
const PRIORITY = 57550
const RANGE = 57551
const READ = 57552
const REAL = 57553
const RECURSIVE = 57554
const REF = 57555
const REFERENCES = 57556
const REGCLASS = 57557
const REGPROC = 57558
const REGPROCEDURE = 57559
const REGNAMESPACE = 57560
const REGTYPE = 57561
const RENAME = 57562
const REPEATABLE = 57563
const RELEASE = 57564
const RESET = 57565
const RESTORE = 57566
const RESTRICT = 57567
const RETURNING = 57568
const REVOKE = 57569
const RIGHT = 57570
const ROLLBACK = 57571
const ROLLUP = 57572
const ROW = 57573
const ROWS = 57574
const RSHIFT = 57575
const SAVEPOINT = 57576
const SCATTER = 57577
const SEARCH = 57578
const SECOND = 57579
const SELECT = 57580
const SERIAL = 57581
const SERIALIZABLE = 57582
const SESSION = 57583
const SESSION_USER = 57584
const SET = 57585
const SETTING = 57586
const SETTINGS = 57587
const SHOW = 57588
const SIMILAR = 57589
const SIMPLE = 57590
const SMALLINT = 57591
const SMALLSERIAL = 57592
const SNAPSHOT = 57593
const SOME = 57594
const SPLIT = 57595
const SQL = 57596
const START = 57597
const STATUS = 57598
const STDIN = 57599
const STRICT = 57600
const STRING = 57601
const STORING = 57602
const SUBSTRING = 57603
const SYMMETRIC = 57604
const SYSTEM = 57605
const TABLE = 57606
const TABLES = 57607
const TEMPLATE = 57608
const TESTING_RANGES = 57609
const TESTING_RELOCATE = 57610
const TEXT = 57611
const THEN = 57612
const TIME = 57613
const TIMESTAMP = 57614
const TIMESTAMPTZ = 57615
const TO = 57616
const TRAILING = 57617
const TRANSACTION = 57618
const TREAT = 57619
const TRIM = 57620
const TRUE = 57621
const TRUNCATE = 57622
const TYPE = 57623
const UNBOUNDED = 57624
const UNCOMMITTED = 57625
const UNION = 57626
const UNIQUE = 57627
const UNKNOWN = 57628
const UPDATE = 57629
const UPSERT = 57630
const USE = 57631
const USER = 57632
const USERS = 57633
const USING = 57634
const UUID = 57635
const VALID = 57636
const VALIDATE = 57637
const VALUE = 57638
const VALUES = 57639
const VARCHAR = 57640
const VARIADIC = 57641
const VIEW = 57642
const VARYING = 57643
const WHEN = 57644
const WHERE = 57645
const WINDOW = 57646
const WITH = 57647
const WITHIN = 57648
const WITHOUT = 57649
const YEAR = 57650
const ZONE = 57651
const NOT_LA = 57652
const WITH_LA = 57653
const AS_LA = 57654
const POSTFIXOP = 57655
const UMINUS = 57656

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5532

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 32,
	333, 32,
	-2, 439,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 53,
	1, 412,
	187, 412,
	226, 412,
	329, 412,
	331, 412,
	333, 412,
	-2, 422,
	-1, 68,
	1, 415,
	187, 415,
	226, 415,
	329, 415,
	331, 415,
	333, 415,
	-2, 421,
	-1, 77,
	1, 32,
	333, 32,
	-2, 439,
	-1, 442,
	1, 182,
	333, 182,
	-2, 1014,
	-1, 506,
	108, 449,
	160, 449,
	185, 449,
	-2, 418,
	-1, 509,
	108, 448,
	160, 448,
	185, 448,
	-2, 416,
	-1, 648,
	108, 448,
	160, 448,
	185, 448,
	-2, 419,
	-1, 708,
	330, 946,
	-2, 939,
	-1, 709,
	330, 947,
	-2, 940,
	-1, 715,
	5, 615,
	330, 615,
	-2, 1124,
	-1, 739,
	5, 576,
	-2, 1098,
	-1, 740,
	5, 609,
	330, 609,
	-2, 1100,
	-1, 741,
	5, 584,
	-2, 1101,
	-1, 742,
	5, 583,
	-2, 1102,
	-1, 743,
	5, 609,
	330, 609,
	-2, 1105,
	-1, 744,
	5, 609,
	330, 609,
	-2, 1106,
	-1, 745,
	5, 610,
	-2, 1109,
	-1, 746,
	5, 570,
	-2, 1110,
	-1, 747,
	5, 570,
	-2, 1111,
	-1, 748,
	5, 591,
	-2, 1115,
	-1, 749,
	5, 571,
	-2, 1120,
	-1, 750,
	5, 572,
	-2, 1121,
	-1, 751,
	5, 573,
	-2, 1122,
	-1, 752,
	5, 574,
	-2, 1123,
	-1, 753,
	5, 570,
	-2, 1128,
	-1, 754,
	5, 577,
	-2, 1133,
	-1, 755,
	5, 575,
	-2, 1136,
	-1, 756,
	5, 607,
	330, 607,
	-2, 1138,
	-1, 757,
	5, 611,
	-2, 1141,
	-1, 758,
	5, 613,
	-2, 1142,
	-1, 759,
	5, 606,
	330, 606,
	-2, 1147,
	-1, 1019,
	99, 422,
	108, 422,
	144, 422,
	160, 422,
	185, 422,
	191, 422,
	284, 422,
	-2, 734,
	-1, 1028,
	330, 923,
	-2, 911,
	-1, 1244,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 650,
	-1, 1245,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 651,
	-1, 1246,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 652,
	-1, 1250,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 656,
	-1, 1251,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 657,
	-1, 1252,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 658,
	-1, 1255,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 663,
	-1, 1261,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 665,
	-1, 1263,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 669,
	-1, 1264,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 670,
	-1, 1265,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 671,
	-1, 1266,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 672,
	-1, 1293,
	196, 805,
	-2, 808,
	-1, 1322,
	117, 845,
	330, 946,
	-2, 939,
	-1, 1323,
	117, 846,
	-2, 1094,
	-1, 1324,
	117, 847,
	-2, 1013,
	-1, 1325,
	117, 848,
	-2, 981,
	-1, 1326,
	117, 849,
	-2, 997,
	-1, 1327,
	117, 850,
	-2, 1012,
	-1, 1328,
	117, 851,
	-2, 1059,
	-1, 1488,
	99, 422,
	108, 422,
	144, 422,
	160, 422,
	185, 422,
	191, 422,
	284, 422,
	-2, 505,
	-1, 1492,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 664,
	-1, 1493,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 666,
	-1, 1498,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 667,
	-1, 1516,
	196, 804,
	-2, 807,
	-1, 1708,
	1, 506,
	69, 506,
	99, 506,
	108, 506,
	118, 506,
	122, 506,
	124, 506,
	137, 506,
	144, 506,
	149, 506,
	157, 506,
	160, 506,
	172, 506,
	185, 506,
	187, 506,
	191, 506,
	226, 506,
	228, 506,
	284, 506,
	292, 506,
	303, 506,
	304, 506,
	312, 506,
	329, 506,
	331, 506,
	333, 506,
	334, 506,
	-2, 505,
	-1, 1710,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 668,
	-1, 1715,
	147, 0,
	-2, 684,
	-1, 1725,
	196, 806,
	-2, 809,
	-1, 1759,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 711,
	-1, 1760,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 712,
	-1, 1761,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 713,
	-1, 1765,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 717,
	-1, 1766,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 718,
	-1, 1767,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 719,
	-1, 1888,
	147, 0,
	-2, 685,
	-1, 1891,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 688,
	-1, 1892,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 690,
	-1, 1998,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 689,
	-1, 1999,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 691,
	-1, 2006,
	147, 0,
	-2, 720,
	-1, 2062,
	147, 0,
	-2, 721,
	-1, 2127,
	36, 0,
	131, 0,
	159, 0,
	247, 0,
	310, 0,
	316, 0,
	-2, 1097,
}

const sqlPrivate = 57344

const sqlLast = 30542

var sqlAct = [...]int{

	709, 2104, 2126, 1662, 2151, 1703, 2068, 2106, 1113, 2125,
	2105, 1932, 934, 1486, 1121, 1704, 1736, 1609, 293, 1978,
	1796, 831, 510, 1958, 699, 517, 67, 1879, 1853, 940,
	1864, 1672, 707, 1179, 90, 90, 90, 1208, 52, 1483,
	1810, 1459, 1461, 685, 706, 1216, 311, 90, 90, 90,
	1858, 1610, 90, 531, 555, 90, 573, 1178, 800, 1024,
	1577, 1183, 1409, 90, 1197, 492, 497, 1473, 1576, 1680,
	67, 1291, 90, 90, 936, 1223, 90, 1182, 775, 90,
	90, 90, 90, 1527, 1689, 90, 90, 1153, 488, 1215,
	668, 1403, 1073, 684, 1348, 772, 1082, 679, 1122, 702,
	1468, 1301, 1275, 67, 1278, 295, 20, 815, 1221, 515,
	302, 22, 960, 300, 30, 895, 1105, 299, 16, 546,
	1204, 301, 8, 1137, 1170, 1319, 631, 804, 1146, 282,
	1015, 777, 678, 567, 801, 669, 632, 1054, 441, 574,
	1115, 491, 568, 1058, 565, 965, 1186, 651, 520, 68,
	1811, 652, 650, 509, 483, 427, 701, 82, 808, 893,
	437, 418, 86, 518, 1218, 561, 430, 630, 656, 529,
	1515, 69, 536, 539, 817, 529, 817, 308, 309, 968,
	969, 481, 1991, 20, 1118, 1992, 817, 514, 22, 1114,
	1150, 30, 281, 2142, 514, 16, 797, 308, 2121, 8,
	1484, 1809, 971, 1547, 1548, 1351, 1565, 1566, 1567, 791,
	1519, 2116, 762, 537, 1156, 1520, 832, 507, 474, 1887,
	1420, 2115, 66, 2112, 1156, 970, 797, 2102, 1518, 2097,
	1143, 985, 797, 1156, 1151, 2093, 522, 1421, 797, 506,
	528, 438, 66, 534, 2064, 967, 541, 1143, 43, 2058,
	73, 1156, 797, 1547, 1548, 1562, 2040, 44, 2036, 1809,
	2031, 797, 2000, 2030, 1988, 1143, 1985, 826, 43, 1986,
	1972, 2046, 1109, 1809, 1152, 1149, 75, 44, 1471, 45,
	1969, 976, 761, 797, 1967, 1943, 966, 1809, 797, 90,
	90, 90, 90, 90, 1942, 497, 1772, 1809, 1914, 45,
	1893, 1156, 1722, 1156, 1890, 1553, 1445, 1143, 1882, 76,
	1830, 1156, 1829, 1156, 1071, 1156, 1808, 71, 1719, 1809,
	1449, 1156, 1648, 72, 1643, 1112, 1594, 1112, 1592, 1595,
	1156, 1156, 1591, 515, 986, 1156, 73, 1526, 1590, 1106,
	1568, 1156, 70, 1295, 1154, 1106, 1516, 968, 969, 1156,
	1448, 1207, 818, 797, 818, 1553, 1212, 1168, 1563, 797,
	575, 1471, 75, 1160, 818, 1155, 1156, 1109, 1156, 1142,
	971, 1111, 1143, 1070, 1112, 825, 1069, 664, 826, 929,
	928, 887, 529, 886, 539, 797, 544, 586, 527, 77,
	1812, 494, 73, 970, 550, 76, 1872, 1487, 907, 607,
	56, 2140, 987, 71, 2124, 2111, 2073, 2059, 1563, 72,
	1970, 1919, 73, 1915, 90, 1148, 1907, 663, 75, 1906,
	56, 1905, 968, 969, 1901, 1900, 1564, 1899, 1117, 90,
	570, 570, 90, 90, 554, 571, 1844, 1147, 75, 1838,
	73, 1787, 1782, 497, 1781, 971, 1780, 1730, 1708, 976,
	497, 76, 1679, 562, 1420, 1652, 1599, 1596, 1287, 71,
	1451, 821, 966, 816, 1584, 72, 75, 1575, 970, 1546,
	939, 76, 1543, 932, 90, 1542, 1564, 1540, 1532, 71,
	90, 1531, 1447, 1365, 70, 72, 1316, 981, 979, 980,
	972, 973, 974, 975, 977, 978, 1315, 663, 1025, 76,
	70, 90, 90, 90, 1696, 90, 1559, 1560, 1561, 662,
	1032, 1558, 1556, 1557, 1549, 1550, 1551, 1552, 1554, 1555,
	90, 768, 1738, 2123, 976, 2085, 2043, 2029, 1485, 649,
	2028, 90, 70, 552, 2027, 2019, 2017, 2008, 610, 1995,
	1981, 1965, 1929, 1912, 497, 90, 1884, 1847, 1835, 1815,
	1714, 311, 497, 1694, 90, 1670, 1668, 1288, 603, 90,
	90, 90, 595, 90, 1549, 1550, 1551, 1552, 1554, 1555,
	1667, 1665, 596, 529, 1650, 1618, 1617, 986, 90, 90,
	1574, 767, 1837, 1536, 609, 1535, 90, 1512, 90, 1507,
	648, 1280, 1436, 90, 1394, 1392, 1379, 1378, 589, 591,
	497, 497, 968, 969, 1358, 1314, 1547, 1548, 311, 806,
	1211, 1059, 1062, 90, 90, 766, 90, 90, 90, 90,
	90, 90, 90, 1066, 769, 971, 1052, 90, 90, 635,
	1051, 1050, 610, 1049, 1048, 90, 633, 1047, 1046, 641,
	610, 644, 1045, 1044, 637, 987, 90, 805, 970, 1043,
	1042, 1041, 529, 809, 809, 1040, 1379, 938, 972, 973,
	974, 975, 977, 978, 2095, 90, 550, 507, 90, 1039,
	1038, 536, 539, 1547, 1548, 1037, 820, 1036, 795, 823,
	838, 659, 660, 665, 1029, 1018, 70, 933, 532, 506,
	667, 714, 593, 582, 580, 1990, 672, 1895, 1873, 1869,
	1843, 964, 906, 1842, 1697, 495, 1203, 796, 1553, 1547,
	1548, 1025, 829, 1430, 1202, 1429, 1016, 768, 2033, 810,
	1870, 943, 515, 562, 807, 599, 1993, 1106, 1462, 798,
	981, 979, 980, 972, 973, 974, 975, 977, 978, 968,
	969, 601, 827, 879, 931, 881, 553, 1841, 880, 1422,
	1487, 910, 1064, 883, 785, 1598, 1065, 903, 1597, 902,
	896, 1491, 971, 764, 622, 602, 600, 1034, 937, 1404,
	1859, 90, 783, 915, 1114, 1553, 1739, 1302, 1055, 90,
	626, 1416, 1605, 90, 1523, 970, 908, 784, 877, 504,
	930, 90, 90, 865, 2076, 90, 289, 2035, 90, 885,
	947, 2137, 945, 946, 2138, 1823, 507, 1159, 1442, 507,
	507, 80, 90, 962, 90, 90, 627, 90, 1075, 473,
	90, 472, 90, 90, 1629, 90, 467, 497, 956, 468,
	1075, 957, 958, 1953, 884, 1031, 1074, 91, 1952, 1951,
	1076, 976, 768, 1950, 1134, 1028, 1804, 1633, 1632, 1602,
	290, 67, 1601, 1494, 513, 912, 67, 1435, 916, 917,
	918, 919, 920, 864, 1068, 79, 1834, 1434, 923, 924,
	1362, 1433, 1087, 1089, 1432, 1083, 529, 1262, 1157, 1805,
	1103, 1056, 1057, 312, 539, 1102, 1099, 634, 529, 1021,
	1094, 1060, 575, 1097, 986, 543, 1649, 1063, 599, 512,
	285, 1361, 778, 498, 779, 1125, 2034, 1233, 311, 1198,
	539, 926, 1067, 539, 1116, 90, 1116, 1108, 978, 1551,
	1552, 1554, 1555, 927, 1100, 1079, 90, 90, 90, 578,
	480, 1334, 1636, 90, 90, 778, 1138, 779, 1086, 600,
	90, 1638, 1277, 1406, 1140, 1934, 514, 1092, 1139, 286,
	1129, 1120, 1141, 802, 778, 909, 779, 1277, 623, 1104,
	1131, 570, 987, 570, 1130, 1132, 1135, 1133, 90, 612,
	1800, 311, 1801, 500, 1213, 780, 2108, 1284, 592, 1620,
	291, 2083, 1282, 811, 1549, 1550, 1551, 1552, 1554, 1555,
	1154, 1302, 968, 969, 505, 78, 1150, 1657, 2148, 501,
	1803, 763, 2137, 1060, 788, 1063, 311, 1806, 780, 502,
	1410, 1057, 1056, 2159, 1162, 971, 292, 1164, 624, 1172,
	539, 1174, 786, 1161, 1399, 1555, 529, 780, 1166, 1085,
	1441, 81, 901, 900, 1627, 494, 489, 787, 970, 511,
	1151, 925, 2022, 1396, 1654, 793, 1072, 1167, 979, 980,
	972, 973, 974, 975, 977, 978, 1176, 2109, 1165, 577,
	1173, 1219, 1205, 1206, 2099, 1175, 625, 1154, 838, 838,
	1414, 817, 1480, 90, 90, 90, 1364, 2154, 1802, 90,
	1152, 1149, 90, 806, 1655, 1299, 1169, 2100, 90, 90,
	90, 90, 90, 1201, 976, 792, 789, 1177, 288, 287,
	90, 1390, 1214, 90, 90, 1443, 2110, 1084, 598, 1410,
	497, 788, 1476, 90, 904, 597, 968, 969, 90, 2147,
	90, 1053, 1193, 2004, 1966, 1013, 1534, 90, 1621, 786,
	1259, 1479, 498, 1690, 776, 1707, 514, 90, 1935, 971,
	1372, 1637, 1677, 1688, 787, 1289, 1286, 986, 2107, 1232,
	1154, 1477, 2136, 1945, 1154, 2134, 515, 1852, 90, 90,
	1195, 1310, 970, 615, 587, 1366, 1368, 1329, 1481, 497,
	585, 1389, 1496, 871, 655, 598, 781, 1768, 1412, 1910,
	838, 865, 865, 1418, 1285, 1224, 1231, 1276, 90, 905,
	90, 2160, 90, 416, 1402, 2165, 90, 1398, 610, 1391,
	90, 475, 1393, 1367, 2152, 1944, 1408, 1283, 1927, 781,
	2146, 805, 2014, 1604, 1375, 987, 1371, 1450, 976, 1452,
	805, 1148, 1478, 90, 1292, 1257, 1260, 1819, 781, 1196,
	529, 1296, 944, 654, 935, 1304, 952, 67, 1424, 419,
	1425, 1426, 1653, 838, 1405, 1415, 1321, 1321, 1332, 818,
	1343, 864, 864, 1256, 1423, 2153, 1355, 1356, 1357, 1804,
	424, 515, 1797, 1769, 2069, 420, 922, 308, 1490, 1770,
	1795, 1911, 837, 2155, 1799, 888, 892, 476, 1673, 1880,
	498, 838, 1438, 1439, 1444, 653, 1440, 498, 2164, 1457,
	421, 1446, 1805, 865, 654, 1854, 1453, 1376, 1928, 953,
	1456, 1427, 980, 972, 973, 974, 975, 977, 978, 423,
	655, 56, 66, 1798, 890, 1381, 1219, 1138, 1818, 515,
	1466, 1464, 1380, 1867, 711, 1140, 891, 1525, 1482, 1139,
	1454, 1489, 1470, 1141, 1685, 1467, 1822, 1684, 43, 1881,
	419, 1258, 597, 1821, 867, 560, 653, 44, 559, 495,
	490, 512, 955, 645, 1663, 1845, 865, 1401, 1925, 1681,
	1428, 424, 1495, 864, 1469, 1497, 420, 1472, 478, 45,
	1313, 2007, 1909, 1578, 2066, 1713, 1635, 1541, 515, 1511,
	1926, 498, 1506, 1800, 1407, 1801, 1158, 1110, 312, 498,
	1098, 421, 1095, 629, 865, 878, 628, 621, 1376, 620,
	619, 618, 1522, 617, 1616, 616, 613, 558, 551, 422,
	423, 1579, 1615, 1803, 1035, 914, 1476, 1312, 2103, 1793,
	1806, 90, 90, 1625, 1614, 1623, 864, 1603, 1644, 974,
	975, 977, 978, 1458, 1820, 1479, 1199, 498, 498, 477,
	1581, 1582, 1583, 1191, 1136, 312, 90, 1474, 824, 822,
	90, 819, 90, 814, 794, 1477, 1273, 790, 425, 90,
	782, 1727, 497, 1460, 864, 1600, 1960, 1669, 657, 1209,
	1475, 1271, 90, 2138, 1607, 90, 1641, 525, 557, 83,
	3, 1666, 73, 1628, 898, 311, 1510, 90, 556, 1504,
	56, 1802, 1634, 1624, 1513, 1626, 1962, 1698, 1091, 1075,
	1695, 1639, 1642, 1674, 1502, 1090, 1389, 67, 75, 2024,
	422, 1646, 1529, 1530, 1125, 1219, 1812, 1683, 1647, 1645,
	1686, 1656, 1658, 1659, 1075, 608, 1478, 1664, 1210, 1716,
	1088, 2061, 306, 25, 1267, 90, 694, 658, 1676, 1682,
	661, 76, 1268, 1687, 1269, 1573, 526, 1096, 1274, 71,
	1675, 1732, 1733, 1734, 415, 72, 1586, 1093, 533, 425,
	968, 969, 1691, 1692, 545, 1219, 548, 1499, 1219, 2047,
	87, 87, 283, 1850, 294, 1194, 549, 1500, 305, 24,
	1726, 1505, 866, 410, 411, 412, 1190, 1723, 429, 304,
	23, 443, 1119, 303, 11, 307, 10, 466, 1630, 429,
	1631, 963, 90, 90, 90, 426, 970, 838, 521, 521,
	25, 882, 283, 1745, 1742, 283, 283, 540, 283, 90,
	1740, 87, 547, 1747, 90, 830, 90, 1145, 90, 90,
	90, 297, 9, 90, 90, 1816, 497, 1775, 838, 838,
	2162, 2163, 1616, 2096, 1270, 2050, 1776, 838, 838, 1877,
	1615, 1272, 1817, 1813, 1547, 1548, 24, 469, 470, 1788,
	837, 837, 1614, 1699, 498, 1792, 1660, 23, 90, 90,
	1789, 11, 1651, 10, 1593, 497, 639, 1501, 968, 969,
	838, 296, 7, 1846, 1503, 90, 90, 1431, 1851, 90,
	1616, 1702, 298, 4, 1833, 1616, 1363, 497, 1615, 90,
	1360, 1848, 1359, 1615, 1876, 1309, 90, 1840, 1022, 9,
	1614, 1875, 639, 638, 640, 1614, 1855, 1897, 1720, 2082,
	865, 1826, 1885, 1959, 610, 1735, 1849, 1832, 1455, 1032,
	1862, 1863, 867, 867, 1868, 515, 1889, 1030, 479, 90,
	1335, 1857, 1933, 968, 969, 312, 417, 913, 614, 1839,
	1871, 865, 865, 1874, 1693, 1224, 1743, 2098, 1902, 7,
	865, 865, 575, 1856, 1224, 1748, 971, 1533, 1977, 2003,
	4, 1311, 837, 1033, 42, 1612, 688, 1794, 1219, 1219,
	1773, 1606, 1219, 1185, 1184, 314, 899, 710, 482, 970,
	864, 1783, 1320, 865, 90, 1225, 90, 1779, 311, 90,
	765, 712, 835, 713, 836, 1061, 1908, 90, 312, 700,
	833, 1123, 1281, 311, 838, 1300, 1521, 1026, 680, 692,
	691, 864, 864, 1297, 579, 283, 563, 283, 443, 443,
	864, 864, 1878, 440, 1616, 837, 55, 594, 90, 436,
	1920, 1413, 1615, 312, 867, 1836, 951, 1200, 1937, 948,
	1622, 1939, 503, 90, 1614, 1921, 497, 1544, 581, 1955,
	90, 1936, 1341, 864, 1333, 1968, 806, 1330, 90, 636,
	771, 1961, 1616, 837, 1014, 1124, 90, 606, 1954, 1419,
	1615, 1989, 1144, 666, 959, 90, 90, 1987, 1861, 524,
	523, 1180, 1614, 604, 1980, 1963, 1994, 1974, 889, 1976,
	1931, 1997, 1163, 1007, 1004, 834, 471, 867, 2016, 1984,
	1192, 1374, 2158, 1983, 2023, 1619, 2075, 74, 1996, 670,
	670, 2002, 2032, 838, 1957, 1400, 90, 865, 773, 31,
	29, 26, 1948, 1949, 2009, 21, 2018, 19, 18, 28,
	17, 27, 15, 2012, 1975, 867, 1973, 498, 14, 13,
	583, 90, 90, 12, 41, 2013, 1971, 40, 39, 38,
	37, 1219, 36, 90, 2021, 588, 6, 90, 443, 443,
	866, 866, 1335, 1335, 2041, 497, 1923, 5, 2, 2039,
	1, 2020, 90, 0, 2042, 0, 0, 0, 90, 0,
	0, 1938, 0, 2051, 311, 90, 90, 864, 2049, 0,
	2056, 0, 0, 0, 515, 0, 498, 2052, 2045, 0,
	429, 0, 838, 0, 67, 2048, 283, 0, 90, 2053,
	90, 1941, 0, 90, 0, 311, 2060, 0, 0, 2057,
	2063, 0, 0, 1335, 1335, 1335, 865, 443, 643, 443,
	1947, 646, 0, 2086, 0, 2084, 2088, 90, 0, 949,
	90, 954, 2087, 2071, 2081, 0, 521, 961, 2072, 0,
	0, 2089, 0, 2044, 2092, 2094, 2091, 283, 1616, 1008,
	1009, 1010, 1011, 1012, 2090, 0, 1615, 0, 0, 1020,
	0, 87, 866, 0, 90, 0, 90, 2113, 1614, 1027,
	283, 2120, 0, 0, 0, 283, 283, 283, 2118, 812,
	0, 0, 0, 2117, 90, 0, 864, 0, 838, 2122,
	2131, 0, 0, 2133, 283, 283, 2074, 2135, 0, 2119,
	2139, 0, 87, 90, 87, 865, 0, 2141, 2144, 443,
	2145, 0, 0, 2143, 0, 0, 0, 0, 0, 0,
	0, 2157, 0, 2156, 0, 866, 0, 2161, 0, 443,
	443, 0, 87, 443, 443, 443, 443, 443, 921, 0,
	0, 0, 0, 443, 443, 2166, 0, 0, 0, 0,
	0, 429, 2054, 0, 0, 0, 0, 1125, 0, 760,
	0, 0, 942, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 1335, 1335, 0, 864, 0, 0, 0, 837,
	0, 521, 0, 2077, 547, 0, 0, 1508, 1509, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 865, 0, 0, 0, 313, 0, 0, 0, 0,
	837, 837, 0, 2078, 2079, 2080, 0, 0, 0, 837,
	837, 0, 0, 1547, 1548, 499, 1335, 1335, 1335, 1335,
	1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
	1335, 1335, 1335, 1335, 1335, 0, 1335, 2101, 1570, 1571,
	1572, 867, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 864, 0, 834, 834, 0, 0, 0, 0, 498,
	0, 0, 867, 867, 0, 0, 0, 283, 0, 0,
	0, 867, 867, 0, 0, 1080, 0, 0, 0, 283,
	0, 0, 312, 0, 0, 0, 0, 283, 1101, 0,
	0, 283, 0, 0, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 1553, 0, 0, 283, 0,
	1127, 1128, 0, 283, 0, 0, 283, 0, 443, 443,
	0, 443, 670, 0, 0, 0, 0, 0, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
	1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
	0, 1261, 0, 1263, 1264, 1265, 1266, 0, 1563, 0,
	0, 0, 0, 0, 0, 834, 837, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1711, 1712, 0,
	0, 0, 0, 0, 1317, 1318, 0, 0, 1331, 0,
	1342, 1344, 1349, 1352, 1353, 1354, 0, 0, 0, 0,
	0, 1171, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 283, 283, 283, 773, 1564, 0, 834, 283,
	1181, 0, 0, 498, 499, 0, 547, 0, 867, 0,
	0, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	0, 1771, 1335, 0, 283, 0, 834, 1476, 0, 866,
	1411, 0, 498, 0, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 0, 0, 0, 498, 0, 0, 0, 1474, 0,
	866, 866, 1547, 1548, 0, 0, 1477, 0, 0, 866,
	866, 0, 1437, 1557, 1549, 1550, 1551, 1552, 1554, 1555,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1866, 0, 0, 0,
	0, 0, 866, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 1562, 0, 0, 0, 1465, 0,
	0, 0, 0, 961, 837, 0, 1335, 0, 0, 283,
	1369, 1370, 0, 0, 0, 1080, 0, 1478, 1377, 0,
	0, 0, 499, 0, 1382, 1383, 1385, 1387, 1388, 499,
	0, 0, 0, 0, 0, 312, 1395, 0, 0, 1397,
	283, 0, 0, 0, 1553, 0, 0, 0, 0, 283,
	312, 0, 1492, 1493, 283, 0, 1417, 0, 1498, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 867, 0, 0, 0,
	0, 1865, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1517, 0, 498, 1171, 1171, 0, 1563, 1524, 0,
	837, 1528, 0, 0, 1335, 1547, 1548, 0, 0, 0,
	1537, 0, 0, 0, 0, 0, 866, 0, 0, 1547,
	1548, 0, 0, 499, 942, 0, 942, 0, 443, 0,
	313, 499, 283, 0, 0, 1020, 1463, 1930, 0, 0,
	0, 1349, 1349, 1349, 968, 969, 0, 988, 989, 990,
	998, 999, 1000, 0, 0, 0, 689, 53, 0, 283,
	991, 0, 0, 0, 0, 1564, 0, 971, 0, 0,
	1002, 0, 867, 0, 1608, 0, 0, 0, 0, 499,
	499, 1547, 1548, 0, 1565, 1566, 1567, 313, 0, 0,
	970, 0, 0, 0, 0, 0, 985, 1886, 0, 0,
	0, 53, 0, 0, 0, 0, 670, 1553, 0, 0,
	0, 0, 498, 0, 0, 0, 0, 0, 773, 0,
	0, 1553, 0, 0, 508, 866, 0, 516, 0, 0,
	0, 312, 834, 1562, 53, 0, 0, 0, 0, 0,
	0, 2006, 0, 0, 0, 0, 976, 0, 0, 0,
	1558, 1556, 1557, 1549, 1550, 1551, 1552, 1554, 1555, 0,
	1563, 0, 312, 834, 834, 995, 1003, 0, 0, 0,
	0, 0, 834, 834, 1563, 0, 0, 0, 0, 0,
	0, 1001, 0, 1553, 0, 968, 969, 1709, 0, 0,
	1710, 0, 0, 993, 0, 0, 0, 0, 0, 986,
	0, 0, 1715, 0, 0, 834, 0, 0, 971, 0,
	0, 1724, 0, 0, 866, 0, 1611, 0, 1568, 1728,
	0, 0, 1437, 0, 992, 0, 0, 0, 1564, 0,
	0, 970, 0, 0, 0, 0, 1563, 1744, 0, 2062,
	0, 1746, 1564, 0, 1547, 1548, 0, 1565, 1566, 1567,
	0, 0, 0, 0, 0, 0, 0, 283, 283, 0,
	1718, 0, 0, 0, 0, 0, 0, 987, 0, 0,
	0, 0, 0, 0, 1777, 1778, 0, 0, 0, 0,
	0, 996, 1661, 1784, 1785, 1786, 1080, 976, 942, 0,
	0, 0, 0, 0, 0, 1671, 1562, 0, 0, 0,
	0, 0, 0, 0, 1564, 0, 499, 0, 283, 1814,
	866, 283, 0, 1558, 1556, 1557, 1549, 1550, 1551, 1552,
	1554, 1555, 0, 1706, 0, 0, 0, 0, 1556, 1557,
	1549, 1550, 1551, 1552, 1554, 1555, 0, 0, 0, 834,
	986, 0, 0, 0, 994, 0, 1553, 982, 983, 984,
	997, 516, 981, 979, 980, 972, 973, 974, 975, 977,
	978, 0, 0, 0, 0, 0, 0, 0, 1916, 0,
	0, 1737, 0, 0, 0, 0, 0, 1860, 0, 0,
	0, 1568, 0, 0, 1559, 1560, 1561, 313, 0, 1558,
	1556, 1557, 1549, 1550, 1551, 1552, 1554, 1555, 0, 1563,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 1888,
	0, 0, 0, 1891, 1892, 0, 0, 0, 1894, 0,
	0, 0, 0, 0, 0, 1896, 0, 1898, 0, 0,
	0, 0, 0, 0, 0, 1904, 0, 0, 1790, 1791,
	1080, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	313, 0, 0, 0, 1611, 547, 0, 0, 0, 0,
	1824, 0, 1825, 0, 283, 1827, 1828, 1564, 1913, 1831,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 973, 974, 975,
	977, 978, 1611, 0, 547, 1181, 0, 1611, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1946, 0, 0,
	0, 283, 283, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1706, 0, 834, 0, 0,
	0, 0, 1883, 0, 0, 0, 0, 1559, 1560, 1561,
	0, 0, 1558, 1556, 1557, 1549, 1550, 1551, 1552, 1554,
	1555, 0, 1982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 508, 1903, 0, 0, 0, 0,
	0, 0, 1998, 1999, 0, 0, 0, 0, 0, 499,
	0, 0, 0, 968, 969, 0, 988, 989, 990, 998,
	999, 1000, 0, 0, 0, 0, 0, 0, 0, 991,
	0, 0, 2011, 0, 0, 0, 971, 0, 0, 1002,
	0, 0, 0, 0, 0, 2015, 0, 0, 0, 0,
	1080, 0, 1922, 834, 0, 1924, 0, 0, 0, 970,
	0, 0, 0, 283, 0, 985, 1611, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 773, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1956, 1547, 1548, 547, 1565, 1566, 1567, 0, 0,
	0, 0, 0, 0, 1611, 0, 0, 0, 1717, 283,
	0, 0, 0, 0, 0, 976, 1979, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 1706, 508, 995, 1003, 508, 508, 0, 0,
	0, 547, 1706, 0, 1562, 0, 0, 0, 0, 0,
	1001, 0, 0, 0, 0, 0, 0, 0, 1017, 0,
	1019, 0, 993, 0, 0, 0, 0, 1023, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 942, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2114, 992, 1553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2025, 2026, 0,
	0, 0, 0, 0, 0, 2130, 2130, 0, 0, 2037,
	0, 0, 0, 2038, 0, 0, 0, 0, 0, 1568,
	0, 0, 0, 0, 0, 0, 987, 0, 547, 0,
	0, 0, 0, 2130, 1706, 0, 0, 1563, 0, 0,
	996, 1706, 547, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 53, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2070, 0, 547, 0, 2130, 283,
	0, 0, 0, 0, 0, 53, 0, 53, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1611, 0, 53, 1979, 0, 0, 1706, 53, 0, 0,
	0, 0, 0, 994, 0, 1564, 982, 983, 984, 997,
	0, 981, 979, 980, 972, 973, 974, 975, 977, 978,
	0, 0, 0, 0, 0, 0, 0, 1589, 0, 0,
	283, 0, 547, 0, 0, 0, 968, 969, 0, 988,
	989, 990, 998, 999, 1000, 0, 0, 0, 0, 0,
	2132, 499, 991, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 1002, 0, 0, 0, 0, 0, 0, 1706,
	0, 0, 0, 0, 313, 0, 0, 0, 0, 0,
	0, 0, 970, 0, 0, 1559, 1560, 1561, 985, 0,
	1558, 1556, 1557, 1549, 1550, 1551, 1552, 1554, 1555, 0,
	968, 969, 0, 988, 989, 990, 998, 999, 1000, 0,
	0, 0, 0, 0, 0, 0, 991, 0, 0, 0,
	0, 0, 0, 971, 0, 0, 1002, 0, 0, 0,
	0, 0, 0, 0, 1220, 0, 0, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 970, 0, 0, 0,
	0, 0, 985, 0, 0, 0, 0, 995, 1003, 0,
	968, 969, 0, 988, 989, 990, 998, 999, 1000, 0,
	1279, 0, 0, 1001, 0, 0, 991, 0, 0, 0,
	0, 0, 0, 971, 0, 993, 1002, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 0, 0, 0, 970, 0, 0, 0,
	0, 0, 985, 0, 0, 0, 992, 0, 0, 0,
	0, 995, 1003, 0, 0, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 993,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 987,
	53, 0, 976, 53, 499, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 0, 0, 0,
	992, 995, 1003, 0, 516, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 993,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 32, 0, 987, 0, 0, 0, 0, 0, 0,
	0, 0, 33, 57, 0, 0, 994, 996, 0, 982,
	983, 984, 997, 0, 981, 979, 980, 972, 973, 974,
	975, 977, 978, 0, 0, 0, 0, 53, 59, 0,
	1588, 53, 0, 0, 35, 0, 66, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 0, 0, 987, 0, 48, 0, 313, 0, 1488,
	0, 0, 43, 0, 0, 60, 0, 996, 0, 47,
	994, 44, 313, 982, 983, 984, 997, 0, 981, 979,
	980, 972, 973, 974, 975, 977, 978, 49, 0, 0,
	0, 0, 0, 45, 1587, 0, 0, 1279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 499, 0, 1019, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	994, 0, 0, 982, 983, 984, 997, 0, 981, 979,
	980, 972, 973, 974, 975, 977, 978, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 46, 0, 1019, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 63, 34, 0, 0, 50, 0, 61, 0, 0,
	0, 0, 51, 0, 0, 0, 73, 0, 0, 0,
	0, 54, 0, 0, 56, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 313, 0, 0, 0, 65, 1220, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1220, 0,
	0, 1220, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 229,
	0, 0, 0, 0, 95, 96, 97, 230, 231, 232,
	233, 98, 234, 235, 0, 99, 236, 237, 100, 0,
	0, 238, 239, 240, 0, 101, 241, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 284, 113, 242, 114, 243, 244, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 245, 120, 121, 122, 246, 247, 0, 0, 0,
	123, 124, 248, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 249, 0, 250, 0, 128, 129, 130, 131,
	251, 252, 0, 0, 135, 0, 132, 0, 0, 133,
	253, 134, 254, 255, 256, 0, 257, 0, 0, 136,
	53, 137, 138, 0, 140, 139, 0, 258, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 259, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 260, 153, 261, 154, 155, 0, 156, 0, 530,
	157, 1220, 1220, 158, 262, 1220, 159, 0, 263, 160,
	161, 162, 163, 516, 264, 164, 265, 165, 0, 166,
	167, 168, 266, 169, 170, 0, 171, 172, 173, 174,
	175, 177, 178, 176, 179, 180, 181, 0, 182, 0,
	183, 184, 267, 185, 0, 189, 190, 191, 192, 73,
	268, 193, 194, 0, 195, 186, 187, 196, 0, 197,
	269, 270, 198, 0, 204, 199, 200, 188, 201, 203,
	271, 202, 272, 0, 205, 75, 206, 207, 208, 209,
	210, 0, 273, 274, 275, 0, 0, 211, 276, 277,
	0, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	219, 0, 220, 0, 278, 221, 222, 223, 576, 280,
	0, 0, 224, 0, 0, 0, 71, 225, 226, 227,
	228, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1217,
	0, 1222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1964, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1019, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 92, 93, 329, 94,
	330, 331, 332, 333, 229, 334, 335, 336, 337, 95,
	96, 97, 230, 231, 232, 233, 98, 234, 235, 338,
	99, 236, 237, 100, 339, 340, 238, 239, 240, 341,
	101, 241, 342, 315, 343, 102, 103, 104, 0, 105,
	344, 106, 107, 108, 345, 316, 109, 110, 346, 347,
	348, 349, 350, 351, 111, 112, 284, 113, 242, 114,
	243, 244, 352, 115, 353, 116, 354, 355, 356, 117,
	118, 357, 119, 358, 0, 359, 245, 120, 121, 122,
	246, 247, 360, 361, 362, 123, 124, 248, 0, 125,
	363, 126, 364, 365, 317, 366, 127, 249, 367, 250,
	368, 128, 129, 130, 131, 251, 252, 319, 369, 135,
	370, 132, 371, 318, 133, 253, 134, 254, 255, 256,
	372, 257, 373, 320, 136, 321, 137, 138, 374, 140,
	139, 375, 258, 322, 141, 323, 376, 142, 377, 378,
	143, 0, 144, 145, 146, 148, 259, 147, 324, 149,
	150, 152, 151, 379, 380, 381, 260, 153, 261, 154,
	155, 382, 156, 383, 384, 157, 385, 386, 158, 262,
	325, 159, 326, 263, 160, 161, 162, 163, 387, 264,
	164, 265, 165, 388, 166, 167, 168, 266, 169, 170,
	389, 171, 172, 173, 174, 175, 177, 178, 176, 179,
	180, 181, 390, 182, 327, 183, 184, 267, 185, 0,
	189, 190, 191, 192, 391, 268, 193, 194, 392, 195,
	186, 187, 196, 328, 197, 269, 270, 198, 393, 204,
	199, 200, 188, 201, 203, 271, 202, 272, 394, 205,
	395, 206, 207, 208, 209, 210, 396, 273, 274, 275,
	397, 398, 211, 276, 277, 399, 212, 213, 214, 215,
	400, 401, 216, 217, 218, 219, 402, 220, 403, 278,
	221, 222, 223, 279, 280, 404, 405, 224, 406, 407,
	408, 409, 225, 226, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	0, 0, 0, 0, 1700, 0, 0, 0, 0, 0,
	0, 0, 1701, 92, 93, 329, 94, 330, 331, 332,
	333, 229, 334, 335, 336, 337, 95, 96, 97, 230,
	231, 232, 233, 98, 234, 235, 338, 99, 236, 237,
	100, 339, 340, 238, 239, 240, 341, 101, 241, 342,
	315, 343, 102, 103, 104, 0, 105, 344, 106, 107,
	108, 345, 316, 109, 110, 346, 347, 348, 349, 350,
	351, 111, 112, 284, 113, 242, 114, 243, 244, 352,
	115, 353, 116, 354, 355, 356, 117, 118, 357, 119,
	358, 0, 359, 245, 120, 121, 122, 246, 247, 360,
	361, 362, 123, 124, 248, 0, 125, 363, 126, 364,
	365, 317, 366, 127, 249, 367, 250, 368, 128, 129,
	130, 131, 251, 252, 319, 369, 135, 370, 132, 371,
	318, 133, 253, 134, 254, 255, 256, 372, 257, 373,
	320, 136, 321, 137, 138, 374, 140, 139, 375, 258,
	322, 141, 323, 376, 142, 377, 378, 143, 0, 144,
	145, 146, 148, 259, 147, 324, 149, 150, 152, 151,
	379, 380, 381, 260, 153, 261, 154, 155, 382, 156,
	383, 384, 157, 385, 386, 158, 262, 325, 159, 326,
	263, 160, 161, 162, 163, 387, 264, 164, 265, 165,
	388, 166, 167, 168, 266, 169, 170, 389, 171, 172,
	173, 174, 175, 177, 178, 176, 179, 180, 181, 390,
	182, 327, 183, 184, 267, 185, 0, 189, 190, 191,
	192, 391, 268, 193, 194, 392, 195, 186, 187, 196,
	328, 197, 269, 270, 198, 393, 204, 199, 200, 188,
	201, 203, 271, 202, 272, 394, 205, 395, 206, 207,
	208, 209, 210, 396, 273, 274, 275, 397, 398, 211,
	276, 277, 399, 212, 213, 214, 215, 400, 401, 216,
	217, 218, 219, 402, 220, 403, 278, 221, 222, 223,
	279, 280, 404, 405, 224, 406, 407, 408, 409, 225,
	226, 227, 228, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2055, 92, 93, 329, 94, 330, 331, 332, 333,
	229, 334, 335, 336, 337, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 338, 99, 236, 237, 100,
	339, 340, 238, 239, 240, 341, 101, 241, 342, 315,
	343, 102, 103, 104, 0, 105, 344, 106, 107, 108,
	345, 316, 109, 110, 346, 347, 348, 349, 350, 351,
	111, 112, 284, 113, 242, 114, 243, 244, 352, 115,
	353, 116, 354, 355, 356, 117, 118, 357, 119, 358,
	0, 359, 245, 120, 121, 122, 246, 247, 360, 361,
	362, 123, 124, 248, 0, 125, 363, 126, 364, 365,
	317, 366, 127, 249, 367, 250, 368, 128, 129, 130,
	131, 251, 252, 319, 369, 135, 370, 132, 371, 318,
	133, 253, 134, 254, 255, 256, 372, 257, 373, 320,
	136, 321, 137, 138, 374, 140, 139, 375, 258, 322,
	141, 323, 376, 142, 377, 378, 143, 0, 144, 145,
	146, 148, 259, 147, 324, 149, 150, 152, 151, 379,
	380, 381, 260, 153, 261, 154, 155, 382, 156, 383,
	384, 157, 385, 386, 158, 262, 325, 159, 326, 263,
	160, 161, 162, 163, 387, 264, 164, 265, 165, 388,
	166, 167, 168, 266, 169, 170, 389, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 390, 182,
	327, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	391, 268, 193, 194, 392, 195, 186, 187, 196, 328,
	197, 269, 270, 198, 393, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 394, 205, 395, 206, 207, 208,
	209, 210, 396, 273, 274, 275, 397, 398, 211, 276,
	277, 399, 212, 213, 214, 215, 400, 401, 216, 217,
	218, 219, 402, 220, 403, 278, 221, 222, 223, 279,
	280, 404, 405, 224, 406, 407, 408, 409, 225, 226,
	227, 228, 310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 799, 0, 0, 92, 93,
	329, 94, 330, 331, 332, 333, 229, 334, 335, 336,
	337, 95, 96, 97, 230, 231, 232, 233, 98, 234,
	235, 338, 99, 236, 237, 100, 339, 340, 238, 239,
	240, 341, 101, 241, 342, 315, 343, 102, 103, 104,
	0, 105, 344, 106, 107, 108, 345, 316, 109, 110,
	346, 347, 348, 349, 350, 351, 111, 112, 284, 113,
	242, 114, 243, 244, 352, 115, 353, 116, 354, 355,
	356, 117, 118, 357, 119, 358, 0, 359, 245, 120,
	121, 122, 246, 247, 360, 361, 362, 123, 124, 248,
	0, 125, 363, 126, 364, 365, 317, 366, 127, 249,
	367, 250, 368, 128, 129, 130, 131, 251, 252, 319,
	369, 135, 370, 132, 371, 318, 133, 253, 134, 254,
	255, 256, 372, 257, 373, 320, 136, 321, 137, 138,
	374, 140, 139, 375, 258, 322, 141, 323, 376, 142,
	377, 378, 143, 0, 144, 145, 146, 148, 259, 147,
	324, 149, 150, 152, 151, 379, 380, 381, 260, 153,
	261, 154, 155, 382, 156, 383, 384, 157, 385, 386,
	158, 262, 325, 159, 326, 263, 160, 161, 162, 163,
	387, 264, 164, 265, 165, 388, 166, 167, 168, 266,
	169, 170, 389, 171, 172, 173, 174, 175, 177, 178,
	176, 179, 180, 181, 390, 182, 327, 183, 184, 267,
	185, 0, 189, 190, 191, 192, 391, 268, 193, 194,
	392, 195, 186, 187, 196, 328, 197, 269, 270, 198,
	393, 204, 199, 200, 188, 201, 203, 271, 202, 272,
	394, 205, 395, 206, 207, 208, 209, 210, 396, 273,
	274, 275, 397, 398, 211, 276, 277, 399, 212, 213,
	214, 215, 400, 401, 216, 217, 218, 219, 402, 220,
	403, 278, 221, 222, 223, 279, 280, 404, 405, 224,
	406, 407, 408, 409, 225, 226, 227, 228, 708, 697,
	698, 695, 696, 687, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 724, 690, 0, 0, 0, 95, 96, 97,
	230, 739, 232, 740, 98, 741, 742, 0, 99, 236,
	237, 100, 693, 723, 743, 744, 240, 0, 101, 735,
	0, 716, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 316, 109, 110, 0, 717, 719, 0,
	718, 720, 111, 112, 284, 113, 745, 114, 746, 747,
	774, 115, 0, 116, 0, 0, 0, 738, 118, 0,
	119, 0, 0, 0, 681, 120, 121, 122, 725, 726,
	704, 0, 0, 123, 124, 748, 0, 125, 0, 126,
	0, 0, 317, 0, 127, 736, 0, 250, 0, 128,
	129, 130, 131, 732, 734, 319, 0, 135, 0, 132,
	0, 318, 133, 749, 134, 750, 751, 752, 0, 715,
	0, 320, 136, 321, 137, 138, 0, 140, 139, 0,
	737, 322, 141, 323, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 259, 147, 324, 149, 150, 152,
	151, 676, 0, 705, 733, 153, 753, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 262, 325, 159,
	326, 727, 160, 161, 162, 163, 0, 728, 164, 265,
	165, 0, 166, 167, 168, 754, 169, 170, 0, 171,
	172, 173, 174, 175, 177, 178, 176, 179, 180, 181,
	0, 182, 327, 183, 184, 682, 185, 0, 189, 190,
	191, 192, 73, 268, 193, 194, 721, 195, 186, 187,
	196, 328, 197, 755, 270, 198, 0, 204, 199, 200,
	188, 201, 203, 756, 202, 729, 0, 205, 75, 206,
	207, 208, 209, 210, 0, 273, 757, 758, 0, 0,
	211, 730, 731, 703, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 219, 722, 220, 0, 278, 221, 222,
	223, 576, 759, 0, 0, 224, 0, 0, 0, 71,
	225, 226, 227, 228, 677, 72, 0, 0, 0, 0,
	675, 0, 0, 0, 0, 673, 674, 708, 697, 698,
	695, 696, 687, 0, 683, 0, 0, 0, 0, 686,
	0, 0, 0, 92, 93, 1306, 94, 0, 0, 0,
	0, 724, 690, 0, 0, 0, 95, 96, 97, 230,
	739, 232, 740, 98, 741, 742, 0, 99, 236, 237,
	100, 693, 723, 743, 744, 240, 0, 101, 735, 0,
	716, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 316, 109, 110, 0, 717, 719, 0, 718,
	720, 111, 112, 284, 113, 745, 114, 746, 747, 0,
	115, 0, 116, 0, 1307, 0, 738, 118, 0, 119,
	0, 0, 0, 681, 120, 121, 122, 725, 726, 704,
	0, 0, 123, 124, 748, 0, 125, 0, 126, 0,
	0, 317, 0, 127, 736, 0, 250, 0, 128, 129,
	130, 131, 732, 734, 319, 0, 135, 0, 132, 0,
	318, 133, 749, 134, 750, 751, 752, 0, 715, 0,
	320, 136, 321, 137, 138, 0, 140, 139, 0, 737,
	322, 141, 323, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 259, 147, 324, 149, 150, 152, 151,
	676, 0, 705, 733, 153, 753, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 262, 325, 159, 326,
	727, 160, 161, 162, 163, 0, 728, 164, 265, 165,
	0, 166, 167, 168, 754, 169, 170, 0, 171, 172,
	173, 174, 175, 177, 178, 176, 179, 180, 181, 0,
	182, 327, 183, 184, 682, 185, 0, 189, 190, 191,
	192, 0, 268, 193, 194, 721, 195, 186, 187, 196,
	328, 197, 755, 270, 198, 0, 204, 199, 200, 188,
	201, 203, 756, 202, 729, 0, 205, 0, 206, 207,
	208, 209, 210, 0, 273, 757, 758, 0, 0, 211,
	730, 731, 703, 212, 213, 214, 215, 0, 0, 216,
	217, 218, 219, 722, 220, 0, 278, 221, 222, 223,
	279, 759, 1305, 0, 224, 0, 0, 0, 0, 225,
	226, 227, 228, 677, 0, 0, 0, 0, 0, 675,
	0, 0, 0, 0, 673, 674, 1308, 708, 697, 698,
	695, 696, 687, 683, 1303, 0, 0, 0, 686, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 724, 690, 0, 0, 0, 95, 96, 97, 230,
	739, 232, 740, 98, 741, 742, 0, 99, 236, 237,
	100, 693, 723, 743, 744, 240, 0, 101, 735, 0,
	716, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 316, 109, 110, 0, 717, 719, 0, 718,
	720, 111, 112, 284, 113, 745, 114, 746, 747, 0,
	115, 0, 116, 0, 0, 0, 738, 118, 0, 119,
	0, 0, 0, 681, 120, 121, 122, 725, 726, 704,
	0, 0, 123, 124, 748, 0, 125, 0, 126, 0,
	0, 317, 0, 127, 736, 0, 250, 0, 128, 129,
	130, 131, 732, 734, 319, 0, 135, 0, 132, 0,
	318, 133, 749, 134, 750, 751, 752, 0, 715, 0,
	320, 136, 321, 137, 138, 0, 140, 139, 0, 737,
	322, 141, 323, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 259, 147, 324, 149, 150, 152, 151,
	676, 0, 705, 733, 153, 753, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 262, 325, 159, 326,
	727, 160, 161, 162, 163, 0, 728, 164, 265, 165,
	0, 166, 167, 168, 754, 169, 170, 0, 171, 172,
	173, 174, 175, 177, 178, 176, 179, 180, 181, 0,
	182, 327, 183, 184, 682, 185, 0, 189, 190, 191,
	192, 73, 268, 193, 194, 721, 195, 186, 187, 196,
	328, 197, 755, 270, 198, 0, 204, 199, 200, 188,
	201, 203, 756, 202, 729, 0, 205, 75, 206, 207,
	208, 209, 210, 0, 273, 757, 758, 0, 0, 211,
	730, 731, 703, 212, 213, 214, 215, 0, 0, 216,
	217, 218, 219, 722, 220, 0, 278, 221, 222, 223,
	576, 759, 0, 0, 224, 0, 0, 0, 71, 225,
	226, 227, 228, 677, 72, 0, 0, 0, 0, 675,
	0, 0, 0, 0, 673, 674, 708, 697, 698, 695,
	696, 687, 0, 683, 0, 0, 0, 0, 686, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	724, 690, 0, 0, 0, 95, 96, 97, 230, 739,
	232, 740, 98, 741, 742, 1345, 99, 236, 237, 100,
	693, 723, 743, 744, 240, 0, 101, 735, 0, 716,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 316, 109, 110, 0, 717, 719, 0, 718, 720,
	111, 112, 284, 113, 745, 114, 746, 747, 0, 115,
	0, 116, 0, 0, 0, 738, 118, 0, 119, 0,
	0, 0, 681, 120, 121, 122, 725, 726, 704, 0,
	0, 123, 124, 748, 0, 125, 0, 126, 0, 1350,
	317, 0, 127, 736, 0, 250, 0, 128, 129, 130,
	131, 732, 734, 319, 0, 135, 0, 132, 0, 318,
	133, 749, 134, 750, 751, 752, 0, 715, 0, 320,
	136, 321, 137, 138, 0, 140, 139, 1346, 737, 322,
	141, 323, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 324, 149, 150, 152, 151, 676,
	0, 705, 733, 153, 753, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 325, 159, 326, 727,
	160, 161, 162, 163, 0, 728, 164, 265, 165, 0,
	166, 167, 168, 754, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	327, 183, 184, 682, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 721, 195, 186, 187, 196, 328,
	197, 755, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 756, 202, 729, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 757, 758, 0, 1347, 211, 730,
	731, 703, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 722, 220, 0, 278, 221, 222, 223, 279,
	759, 0, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 677, 0, 0, 0, 0, 0, 675, 0,
	0, 0, 0, 673, 674, 708, 697, 698, 695, 696,
	687, 0, 683, 0, 0, 0, 0, 686, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 724,
	690, 0, 0, 0, 95, 96, 97, 230, 739, 232,
	740, 98, 741, 742, 0, 99, 236, 237, 100, 693,
	723, 743, 744, 240, 0, 101, 735, 0, 716, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	316, 109, 110, 0, 717, 719, 0, 718, 720, 111,
	112, 284, 113, 745, 114, 746, 747, 0, 115, 0,
	116, 0, 0, 0, 738, 118, 0, 119, 0, 0,
	0, 681, 120, 121, 122, 725, 726, 704, 0, 0,
	123, 124, 748, 0, 125, 0, 126, 0, 0, 317,
	0, 127, 736, 0, 250, 0, 128, 129, 130, 131,
	732, 734, 319, 0, 135, 0, 132, 0, 318, 133,
	749, 134, 750, 751, 752, 0, 715, 0, 320, 136,
	321, 137, 138, 0, 140, 139, 0, 737, 322, 141,
	323, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 259, 147, 324, 149, 150, 152, 151, 676, 1640,
	705, 733, 153, 753, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 262, 325, 159, 326, 727, 160,
	161, 162, 163, 0, 728, 164, 265, 165, 0, 166,
	167, 168, 754, 169, 170, 0, 171, 172, 173, 174,
	175, 177, 178, 176, 179, 180, 181, 0, 182, 327,
	183, 184, 682, 185, 0, 189, 190, 191, 192, 0,
	268, 193, 194, 721, 195, 186, 187, 196, 328, 197,
	755, 270, 198, 0, 204, 199, 200, 188, 201, 203,
	756, 202, 729, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 273, 757, 758, 0, 0, 211, 730, 731,
	703, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	219, 722, 220, 0, 278, 221, 222, 223, 279, 759,
	0, 0, 224, 0, 0, 0, 0, 225, 226, 227,
	228, 677, 0, 0, 0, 0, 0, 675, 0, 0,
	0, 0, 673, 674, 671, 708, 697, 698, 695, 696,
	687, 683, 0, 0, 0, 0, 686, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 724,
	690, 0, 0, 0, 95, 96, 97, 230, 739, 232,
	740, 98, 741, 742, 0, 99, 236, 237, 100, 693,
	723, 743, 744, 240, 0, 101, 735, 0, 716, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	316, 109, 110, 0, 717, 719, 0, 718, 720, 111,
	112, 284, 113, 745, 114, 746, 747, 0, 115, 0,
	116, 0, 0, 0, 738, 118, 0, 119, 0, 0,
	0, 681, 120, 121, 122, 725, 726, 704, 0, 0,
	123, 124, 748, 0, 125, 0, 126, 0, 0, 317,
	0, 127, 736, 0, 250, 0, 128, 129, 130, 131,
	732, 734, 319, 0, 135, 0, 132, 0, 318, 133,
	749, 134, 750, 751, 752, 0, 715, 0, 320, 136,
	321, 137, 138, 0, 140, 139, 0, 737, 322, 141,
	323, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 259, 147, 324, 149, 150, 152, 151, 676, 0,
	705, 733, 153, 753, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 262, 325, 159, 326, 727, 160,
	161, 162, 163, 0, 728, 164, 265, 165, 0, 166,
	167, 168, 754, 169, 170, 0, 171, 172, 173, 174,
	175, 177, 178, 176, 179, 180, 181, 0, 182, 327,
	183, 184, 682, 185, 0, 189, 190, 191, 192, 0,
	268, 193, 194, 721, 195, 186, 187, 196, 328, 197,
	755, 270, 198, 0, 204, 199, 200, 188, 201, 203,
	756, 202, 729, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 273, 757, 758, 0, 0, 211, 730, 731,
	703, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	219, 722, 220, 0, 278, 221, 222, 223, 279, 759,
	0, 0, 224, 0, 0, 0, 0, 225, 226, 227,
	228, 677, 0, 0, 0, 0, 0, 675, 0, 0,
	0, 0, 673, 674, 0, 0, 0, 0, 0, 1025,
	1298, 683, 0, 0, 0, 0, 686, 708, 697, 698,
	695, 696, 687, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 724, 690, 0, 0, 0, 95, 96, 97, 230,
	739, 232, 740, 98, 741, 742, 0, 99, 236, 237,
	100, 693, 723, 743, 744, 240, 0, 101, 735, 0,
	716, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 316, 109, 110, 0, 717, 719, 0, 718,
	720, 111, 112, 284, 113, 745, 114, 746, 747, 0,
	115, 0, 116, 0, 0, 0, 738, 118, 0, 119,
	0, 0, 0, 681, 120, 121, 122, 725, 726, 704,
	0, 0, 123, 124, 748, 0, 125, 0, 126, 0,
	0, 317, 0, 127, 736, 0, 250, 0, 128, 129,
	130, 131, 732, 734, 319, 0, 135, 0, 132, 0,
	318, 133, 749, 134, 750, 751, 752, 0, 715, 0,
	320, 136, 321, 137, 138, 0, 140, 139, 0, 737,
	322, 141, 323, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 259, 147, 324, 149, 150, 152, 151,
	676, 0, 705, 733, 153, 753, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 262, 325, 159, 326,
	727, 160, 161, 162, 163, 0, 728, 164, 265, 165,
	0, 166, 167, 168, 754, 169, 170, 0, 171, 172,
	173, 174, 175, 177, 178, 176, 179, 180, 181, 0,
	182, 327, 183, 184, 682, 185, 0, 189, 190, 191,
	192, 0, 268, 193, 194, 721, 195, 186, 187, 196,
	328, 197, 755, 270, 198, 0, 204, 199, 200, 188,
	201, 203, 756, 202, 729, 0, 205, 0, 206, 207,
	208, 209, 210, 0, 273, 757, 758, 0, 0, 211,
	730, 731, 703, 212, 213, 214, 215, 0, 0, 216,
	217, 218, 219, 722, 220, 0, 278, 221, 222, 223,
	279, 759, 0, 0, 224, 0, 0, 0, 0, 225,
	226, 227, 228, 677, 0, 0, 0, 0, 0, 675,
	0, 0, 0, 0, 673, 674, 708, 697, 698, 695,
	696, 687, 0, 683, 1774, 0, 0, 0, 686, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	724, 690, 0, 0, 0, 95, 96, 97, 230, 739,
	232, 740, 98, 741, 742, 0, 99, 236, 237, 100,
	693, 723, 743, 744, 240, 0, 101, 735, 0, 716,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 316, 109, 110, 0, 717, 719, 0, 718, 720,
	111, 112, 284, 113, 745, 114, 746, 747, 0, 115,
	0, 116, 0, 0, 0, 738, 118, 0, 119, 0,
	0, 0, 681, 120, 121, 122, 725, 726, 704, 0,
	0, 123, 124, 748, 0, 125, 0, 126, 0, 0,
	317, 0, 127, 736, 0, 250, 0, 128, 129, 130,
	131, 732, 734, 319, 0, 135, 0, 132, 0, 318,
	133, 749, 134, 750, 751, 752, 0, 715, 0, 320,
	136, 321, 137, 138, 0, 140, 139, 0, 737, 322,
	141, 323, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 324, 149, 150, 152, 151, 676,
	0, 705, 733, 153, 753, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 325, 159, 326, 727,
	160, 161, 162, 163, 0, 728, 164, 265, 165, 0,
	166, 167, 168, 754, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	327, 183, 184, 682, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 721, 195, 186, 187, 196, 328,
	197, 755, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 756, 202, 729, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 757, 758, 0, 0, 211, 730,
	731, 703, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 722, 220, 0, 278, 221, 222, 223, 279,
	759, 1731, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 677, 0, 0, 0, 0, 0, 675, 0,
	0, 0, 0, 673, 674, 708, 697, 698, 695, 696,
	687, 0, 683, 0, 0, 0, 0, 686, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 724,
	690, 0, 0, 0, 95, 96, 97, 230, 739, 232,
	740, 98, 741, 742, 0, 99, 236, 237, 100, 693,
	723, 743, 744, 240, 0, 101, 735, 0, 716, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	316, 109, 110, 0, 717, 719, 0, 718, 720, 111,
	112, 284, 113, 745, 114, 746, 747, 0, 115, 0,
	116, 0, 0, 0, 738, 118, 0, 119, 0, 0,
	0, 681, 120, 121, 122, 725, 726, 704, 0, 0,
	123, 124, 748, 0, 125, 0, 126, 0, 0, 317,
	0, 127, 736, 0, 250, 0, 128, 129, 130, 131,
	732, 734, 319, 0, 135, 0, 132, 0, 318, 133,
	749, 134, 750, 751, 752, 0, 715, 0, 320, 136,
	321, 137, 138, 0, 140, 139, 0, 737, 322, 141,
	323, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 259, 147, 324, 149, 150, 152, 151, 676, 0,
	705, 733, 153, 753, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 262, 325, 159, 326, 727, 160,
	161, 162, 163, 0, 728, 164, 265, 165, 0, 166,
	167, 168, 754, 169, 170, 0, 171, 172, 173, 174,
	175, 177, 178, 176, 179, 180, 181, 0, 182, 327,
	183, 184, 682, 185, 0, 189, 190, 191, 192, 0,
	268, 193, 194, 721, 195, 186, 187, 196, 328, 197,
	755, 270, 198, 0, 204, 199, 200, 188, 201, 203,
	756, 202, 729, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 273, 757, 758, 0, 0, 211, 730, 731,
	703, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	219, 722, 220, 0, 278, 221, 222, 223, 279, 759,
	0, 0, 224, 0, 0, 0, 0, 225, 226, 227,
	228, 677, 0, 0, 0, 0, 0, 675, 0, 0,
	0, 0, 673, 674, 708, 697, 698, 695, 696, 687,
	0, 683, 1721, 0, 0, 0, 686, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 724, 690,
	0, 0, 0, 95, 96, 97, 230, 739, 232, 740,
	98, 741, 742, 0, 99, 236, 237, 100, 693, 723,
	743, 744, 240, 0, 101, 735, 0, 716, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 316,
	109, 110, 0, 717, 719, 0, 718, 720, 111, 112,
	284, 113, 745, 114, 746, 747, 774, 115, 0, 116,
	0, 0, 0, 738, 118, 0, 119, 0, 0, 0,
	681, 120, 121, 122, 725, 726, 704, 0, 0, 123,
	124, 748, 0, 125, 0, 126, 0, 0, 317, 0,
	127, 736, 0, 250, 0, 128, 129, 130, 131, 732,
	734, 319, 0, 135, 0, 132, 0, 318, 133, 749,
	134, 750, 751, 752, 0, 715, 0, 320, 136, 321,
	137, 138, 0, 140, 139, 0, 737, 322, 141, 323,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	259, 147, 324, 149, 150, 152, 151, 676, 0, 705,
	733, 153, 753, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 262, 325, 159, 326, 727, 160, 161,
	162, 163, 0, 728, 164, 265, 165, 0, 166, 167,
	168, 754, 169, 170, 0, 171, 172, 173, 174, 175,
	177, 178, 176, 179, 180, 181, 0, 182, 327, 183,
	184, 682, 185, 0, 189, 190, 191, 192, 0, 268,
	193, 194, 721, 195, 186, 187, 196, 328, 197, 755,
	270, 198, 0, 204, 199, 200, 188, 201, 203, 756,
	202, 729, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 273, 757, 758, 0, 0, 211, 730, 731, 703,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 219,
	722, 220, 0, 278, 221, 222, 223, 279, 759, 0,
	0, 224, 0, 0, 0, 0, 225, 226, 227, 228,
	677, 0, 0, 0, 0, 0, 675, 0, 0, 0,
	0, 673, 674, 708, 697, 698, 695, 696, 687, 0,
	683, 0, 0, 0, 0, 686, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 724, 690, 0,
	0, 0, 95, 96, 97, 230, 739, 232, 740, 98,
	741, 742, 0, 99, 236, 237, 100, 693, 723, 743,
	744, 240, 0, 101, 735, 0, 716, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 316, 109,
	110, 0, 717, 719, 0, 718, 720, 111, 112, 284,
	113, 745, 114, 746, 747, 0, 115, 0, 116, 0,
	0, 0, 738, 118, 0, 119, 0, 0, 0, 681,
	120, 121, 122, 725, 726, 704, 0, 0, 123, 124,
	748, 0, 125, 0, 126, 0, 1350, 317, 0, 127,
	736, 0, 250, 0, 128, 129, 130, 131, 732, 734,
	319, 0, 135, 0, 132, 0, 318, 133, 749, 134,
	750, 751, 752, 0, 715, 0, 320, 136, 321, 137,
	138, 0, 140, 139, 0, 737, 322, 141, 323, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 259,
	147, 324, 149, 150, 152, 151, 676, 0, 705, 733,
	153, 753, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 262, 325, 159, 326, 727, 160, 161, 162,
	163, 0, 728, 164, 265, 165, 0, 166, 167, 168,
	754, 169, 170, 0, 171, 172, 173, 174, 175, 177,
	178, 176, 179, 180, 181, 0, 182, 327, 183, 184,
	682, 185, 0, 189, 190, 191, 192, 0, 268, 193,
	194, 721, 195, 186, 187, 196, 328, 197, 755, 270,
	198, 0, 204, 199, 200, 188, 201, 203, 756, 202,
	729, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	273, 757, 758, 0, 0, 211, 730, 731, 703, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 219, 722,
	220, 0, 278, 221, 222, 223, 279, 759, 0, 0,
	224, 0, 0, 0, 0, 225, 226, 227, 228, 677,
	0, 0, 0, 0, 0, 675, 0, 0, 0, 0,
	673, 674, 708, 697, 698, 695, 696, 687, 0, 683,
	0, 0, 0, 0, 686, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 724, 690, 0, 0,
	0, 95, 96, 97, 230, 739, 232, 740, 98, 741,
	742, 0, 99, 236, 237, 100, 693, 723, 743, 744,
	240, 0, 101, 735, 0, 716, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 316, 109, 110,
	0, 717, 719, 0, 718, 720, 111, 112, 284, 113,
	745, 114, 746, 747, 0, 115, 0, 116, 0, 0,
	0, 738, 118, 0, 119, 0, 0, 0, 681, 120,
	121, 122, 725, 726, 704, 0, 0, 123, 124, 748,
	0, 125, 0, 126, 0, 0, 317, 0, 127, 736,
	0, 250, 0, 128, 129, 130, 131, 732, 734, 319,
	0, 135, 0, 132, 0, 318, 133, 749, 134, 750,
	751, 752, 0, 715, 0, 320, 136, 321, 137, 138,
	0, 140, 139, 0, 737, 322, 141, 323, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 259, 147,
	324, 149, 150, 152, 151, 676, 0, 705, 733, 153,
	753, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 262, 325, 159, 326, 727, 160, 161, 162, 163,
	0, 728, 164, 265, 165, 0, 166, 167, 168, 754,
	169, 170, 0, 171, 172, 173, 174, 175, 177, 178,
	176, 179, 180, 181, 0, 182, 327, 183, 184, 682,
	185, 0, 189, 190, 191, 192, 0, 268, 193, 194,
	721, 195, 186, 187, 196, 328, 197, 755, 270, 198,
	0, 204, 199, 200, 188, 201, 203, 756, 202, 729,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 273,
	757, 758, 0, 0, 211, 730, 731, 703, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 219, 722, 220,
	0, 278, 221, 222, 223, 279, 759, 0, 0, 224,
	0, 0, 0, 0, 225, 226, 227, 228, 677, 0,
	0, 0, 0, 0, 675, 0, 0, 0, 0, 673,
	674, 708, 697, 698, 695, 696, 687, 0, 683, 1293,
	0, 0, 0, 686, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 724, 690, 0, 0, 0,
	95, 96, 97, 230, 739, 232, 740, 98, 741, 742,
	0, 99, 236, 237, 100, 693, 723, 743, 744, 240,
	0, 101, 735, 0, 716, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 316, 109, 110, 0,
	717, 719, 0, 718, 720, 111, 112, 284, 113, 745,
	114, 746, 747, 0, 115, 0, 116, 0, 0, 0,
	738, 118, 0, 119, 0, 0, 0, 681, 120, 121,
	122, 725, 726, 704, 0, 0, 123, 124, 748, 0,
	125, 0, 126, 0, 0, 317, 0, 127, 736, 0,
	250, 0, 128, 129, 130, 131, 732, 734, 319, 0,
	135, 0, 132, 0, 318, 133, 749, 134, 750, 751,
	752, 0, 715, 0, 320, 136, 321, 137, 138, 0,
	140, 139, 0, 737, 322, 141, 323, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 324,
	149, 150, 152, 151, 676, 0, 705, 733, 153, 753,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 325, 159, 326, 727, 160, 161, 162, 163, 0,
	728, 164, 265, 165, 0, 166, 167, 168, 754, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 327, 183, 184, 682, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 721,
	195, 186, 187, 196, 328, 197, 755, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 756, 202, 729, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 757,
	758, 0, 0, 211, 730, 731, 703, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 722, 220, 0,
	278, 221, 222, 223, 279, 759, 0, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 677, 0, 0,
	0, 0, 0, 675, 0, 0, 0, 0, 673, 674,
	671, 708, 697, 698, 695, 696, 687, 683, 0, 0,
	0, 0, 686, 0, 0, 0, 0, 92, 93, 950,
	94, 0, 0, 0, 0, 724, 690, 0, 0, 0,
	95, 96, 97, 230, 739, 232, 740, 98, 741, 742,
	0, 99, 236, 237, 100, 693, 723, 743, 744, 240,
	0, 101, 735, 0, 716, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 316, 109, 110, 0,
	717, 719, 0, 718, 720, 111, 112, 284, 113, 745,
	114, 746, 747, 0, 115, 0, 116, 0, 0, 0,
	738, 118, 0, 119, 0, 0, 0, 681, 120, 121,
	122, 725, 726, 704, 0, 0, 123, 124, 748, 0,
	125, 0, 126, 0, 0, 317, 0, 127, 736, 0,
	250, 0, 128, 129, 130, 131, 732, 734, 319, 0,
	135, 0, 132, 0, 318, 133, 749, 134, 750, 751,
	752, 0, 715, 0, 320, 136, 321, 137, 138, 0,
	140, 139, 0, 737, 322, 141, 323, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 324,
	149, 150, 152, 151, 676, 0, 705, 733, 153, 753,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 325, 159, 326, 727, 160, 161, 162, 163, 0,
	728, 164, 265, 165, 0, 166, 167, 168, 754, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 327, 183, 184, 682, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 721,
	195, 186, 187, 196, 328, 197, 755, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 756, 202, 729, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 757,
	758, 0, 0, 211, 730, 731, 703, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 722, 220, 0,
	278, 221, 222, 223, 279, 759, 0, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 677, 0, 0,
	0, 0, 0, 675, 0, 0, 0, 0, 673, 674,
	708, 697, 698, 695, 696, 687, 0, 683, 0, 0,
	0, 0, 686, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 724, 690, 0, 0, 0, 95,
	96, 97, 230, 739, 232, 740, 98, 741, 742, 0,
	99, 236, 237, 100, 693, 723, 743, 744, 240, 0,
	101, 735, 0, 716, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 316, 109, 2129, 0, 717,
	719, 0, 718, 720, 111, 112, 284, 113, 745, 114,
	746, 747, 0, 115, 0, 116, 0, 0, 0, 738,
	118, 0, 119, 0, 0, 0, 681, 120, 121, 122,
	725, 726, 704, 0, 0, 123, 124, 748, 0, 125,
	0, 126, 0, 0, 317, 0, 127, 736, 0, 250,
	0, 128, 129, 130, 131, 732, 734, 319, 0, 135,
	0, 132, 0, 318, 133, 749, 134, 750, 751, 752,
	0, 715, 0, 320, 136, 321, 137, 138, 0, 140,
	139, 0, 737, 322, 141, 323, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 259, 147, 324, 149,
	150, 152, 151, 676, 0, 705, 733, 153, 753, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 262,
	325, 159, 326, 727, 160, 161, 162, 163, 0, 728,
	164, 265, 165, 0, 166, 167, 168, 754, 169, 170,
	0, 171, 172, 173, 174, 175, 177, 178, 176, 179,
	180, 181, 0, 182, 327, 183, 184, 682, 185, 0,
	189, 190, 191, 192, 0, 268, 193, 194, 721, 195,
	186, 187, 196, 328, 197, 755, 270, 198, 0, 204,
	199, 200, 188, 201, 203, 756, 202, 729, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 273, 757, 758,
	0, 0, 211, 730, 731, 703, 212, 213, 2128, 215,
	0, 0, 216, 217, 218, 219, 722, 220, 0, 278,
	221, 222, 223, 279, 759, 0, 0, 224, 0, 0,
	0, 0, 225, 226, 227, 228, 677, 0, 0, 0,
	0, 0, 675, 0, 0, 0, 0, 673, 674, 708,
	697, 698, 695, 696, 687, 0, 683, 0, 0, 0,
	0, 686, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 724, 690, 0, 0, 0, 95, 96,
	97, 2127, 739, 232, 740, 98, 741, 742, 0, 99,
	236, 237, 100, 693, 723, 743, 744, 240, 0, 101,
	735, 0, 716, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 316, 109, 2129, 0, 717, 719,
	0, 718, 720, 111, 112, 284, 113, 745, 114, 746,
	747, 0, 115, 0, 116, 0, 0, 0, 738, 118,
	0, 119, 0, 0, 0, 681, 120, 121, 122, 725,
	726, 704, 0, 0, 123, 124, 748, 0, 125, 0,
	126, 0, 0, 317, 0, 127, 736, 0, 250, 0,
	128, 129, 130, 131, 732, 734, 319, 0, 135, 0,
	132, 0, 318, 133, 749, 134, 750, 751, 752, 0,
	715, 0, 320, 136, 321, 137, 138, 0, 140, 139,
	0, 737, 322, 141, 323, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 259, 147, 324, 149, 150,
	152, 151, 676, 0, 705, 733, 153, 753, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 262, 325,
	159, 326, 727, 160, 161, 162, 163, 0, 728, 164,
	265, 165, 0, 166, 167, 168, 754, 169, 170, 0,
	171, 172, 173, 174, 175, 177, 178, 176, 179, 180,
	181, 0, 182, 327, 183, 184, 682, 185, 0, 189,
	190, 191, 192, 0, 268, 193, 194, 721, 195, 186,
	187, 196, 328, 197, 755, 270, 198, 0, 204, 199,
	200, 188, 201, 203, 756, 202, 729, 0, 205, 0,
	206, 207, 208, 209, 210, 0, 273, 757, 758, 0,
	0, 211, 730, 731, 703, 212, 213, 2128, 215, 0,
	0, 216, 217, 218, 219, 722, 220, 0, 278, 221,
	222, 223, 279, 759, 0, 0, 224, 0, 0, 0,
	0, 225, 226, 227, 228, 677, 0, 0, 0, 0,
	0, 675, 0, 0, 0, 0, 673, 674, 708, 697,
	698, 695, 696, 687, 0, 683, 0, 0, 0, 0,
	686, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 724, 690, 0, 0, 0, 95, 96, 97,
	230, 739, 232, 740, 98, 741, 742, 0, 99, 236,
	237, 100, 693, 723, 743, 744, 240, 0, 101, 735,
	0, 716, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 316, 109, 110, 0, 717, 719, 0,
	718, 720, 111, 112, 284, 113, 745, 114, 746, 747,
	0, 115, 0, 116, 0, 0, 0, 738, 118, 0,
	119, 0, 0, 0, 681, 120, 121, 122, 725, 726,
	704, 0, 0, 123, 124, 748, 0, 125, 0, 126,
	0, 0, 317, 0, 127, 736, 0, 250, 0, 128,
	129, 130, 131, 732, 734, 319, 0, 135, 0, 132,
	0, 318, 133, 749, 134, 750, 751, 752, 0, 715,
	0, 320, 136, 321, 137, 138, 0, 140, 139, 0,
	737, 322, 141, 323, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 259, 147, 324, 149, 150, 152,
	151, 676, 0, 705, 733, 153, 753, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 262, 325, 159,
	326, 727, 160, 161, 162, 163, 0, 728, 164, 265,
	165, 0, 166, 167, 168, 754, 169, 170, 0, 171,
	172, 173, 174, 175, 177, 178, 176, 179, 180, 181,
	0, 182, 327, 183, 184, 682, 185, 0, 189, 190,
	191, 192, 0, 268, 193, 194, 721, 195, 186, 187,
	196, 328, 197, 755, 270, 198, 0, 204, 199, 200,
	188, 201, 203, 756, 202, 729, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 273, 757, 758, 0, 0,
	211, 730, 731, 703, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 219, 722, 220, 0, 278, 221, 222,
	223, 279, 759, 0, 0, 224, 0, 0, 0, 0,
	225, 226, 227, 228, 677, 0, 0, 0, 0, 0,
	675, 0, 0, 0, 0, 673, 674, 1322, 697, 698,
	695, 696, 687, 0, 683, 0, 0, 0, 0, 686,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 724, 690, 0, 0, 0, 95, 96, 97, 230,
	739, 232, 740, 98, 741, 742, 0, 99, 236, 237,
	100, 693, 723, 743, 744, 240, 0, 101, 735, 0,
	716, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 316, 109, 110, 0, 717, 719, 0, 718,
	720, 111, 112, 284, 113, 745, 1325, 746, 747, 0,
	115, 0, 116, 0, 0, 0, 738, 118, 0, 119,
	0, 0, 0, 681, 120, 121, 122, 725, 726, 704,
	0, 0, 123, 124, 748, 0, 125, 0, 126, 0,
	0, 317, 0, 127, 736, 0, 250, 0, 128, 129,
	1326, 131, 732, 734, 319, 0, 135, 0, 132, 0,
	318, 133, 749, 134, 750, 751, 752, 0, 715, 0,
	320, 136, 321, 137, 138, 0, 140, 139, 0, 737,
	322, 141, 323, 0, 142, 0, 0, 143, 0, 144,
	1327, 1324, 148, 259, 147, 324, 149, 150, 152, 151,
	676, 0, 705, 733, 153, 753, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 262, 325, 159, 326,
	727, 160, 161, 162, 163, 0, 728, 164, 265, 165,
	0, 166, 167, 168, 754, 169, 170, 0, 171, 172,
	173, 174, 175, 177, 178, 176, 179, 180, 181, 0,
	182, 327, 183, 184, 682, 185, 0, 189, 190, 191,
	1328, 0, 268, 193, 194, 721, 195, 186, 187, 196,
	328, 197, 755, 270, 198, 0, 204, 199, 200, 188,
	201, 203, 756, 202, 729, 0, 205, 0, 206, 207,
	208, 209, 210, 0, 273, 757, 758, 0, 0, 211,
	730, 731, 703, 212, 213, 214, 215, 0, 0, 216,
	217, 218, 219, 722, 220, 0, 278, 221, 222, 223,
	279, 759, 0, 0, 224, 0, 0, 0, 0, 225,
	226, 1323, 228, 677, 0, 0, 0, 0, 0, 675,
	0, 0, 0, 0, 673, 674, 708, 697, 698, 695,
	696, 687, 0, 683, 0, 0, 0, 0, 686, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	724, 690, 0, 0, 0, 95, 96, 97, 230, 739,
	232, 740, 98, 741, 742, 0, 99, 236, 237, 100,
	693, 723, 743, 744, 240, 0, 101, 735, 0, 716,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 316, 109, 110, 0, 717, 719, 0, 718, 720,
	111, 112, 284, 113, 745, 114, 746, 747, 0, 115,
	0, 116, 0, 0, 0, 738, 118, 0, 119, 0,
	0, 0, 681, 120, 121, 122, 725, 726, 704, 0,
	0, 123, 124, 748, 0, 125, 0, 126, 0, 0,
	317, 0, 127, 736, 0, 250, 0, 128, 129, 130,
	131, 732, 734, 319, 0, 135, 0, 132, 0, 318,
	133, 749, 134, 750, 751, 752, 0, 715, 0, 320,
	136, 321, 137, 138, 0, 140, 139, 0, 737, 322,
	141, 323, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 324, 149, 150, 152, 151, 0,
	0, 705, 733, 153, 753, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 325, 159, 326, 727,
	160, 161, 162, 163, 0, 728, 164, 265, 165, 0,
	166, 167, 168, 754, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	327, 183, 184, 1340, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 721, 195, 186, 187, 196, 328,
	197, 755, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 756, 202, 729, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 757, 758, 0, 0, 211, 730,
	731, 703, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 722, 220, 0, 278, 221, 222, 223, 279,
	759, 0, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 0, 0, 1336, 1337, 708, 697, 698, 695, 696,
	687, 0, 1339, 0, 0, 0, 0, 686, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 724,
	690, 0, 0, 0, 95, 96, 97, 230, 739, 232,
	740, 98, 741, 742, 0, 99, 236, 237, 100, 0,
	723, 743, 744, 240, 0, 101, 735, 0, 716, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	316, 109, 110, 0, 717, 719, 0, 718, 720, 111,
	112, 284, 113, 745, 114, 746, 747, 0, 115, 0,
	116, 0, 0, 0, 738, 118, 0, 119, 0, 0,
	0, 245, 120, 121, 122, 725, 726, 704, 0, 0,
	123, 124, 748, 0, 125, 0, 126, 0, 0, 317,
	0, 127, 736, 0, 250, 0, 128, 129, 130, 131,
	732, 734, 319, 0, 135, 0, 132, 0, 318, 133,
	749, 134, 750, 751, 752, 0, 715, 0, 320, 136,
	321, 137, 138, 0, 140, 139, 0, 737, 322, 141,
	323, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 259, 147, 324, 149, 150, 152, 151, 0, 0,
	705, 733, 153, 753, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 262, 325, 159, 326, 727, 160,
	161, 162, 163, 0, 728, 164, 265, 165, 0, 166,
	167, 168, 754, 169, 170, 0, 171, 172, 173, 174,
	175, 177, 178, 176, 179, 180, 181, 0, 182, 327,
	183, 184, 1340, 185, 0, 189, 190, 191, 192, 0,
	268, 193, 194, 721, 195, 186, 187, 196, 328, 197,
	755, 270, 198, 0, 204, 199, 200, 188, 201, 203,
	756, 202, 729, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 273, 757, 758, 0, 0, 211, 730, 731,
	703, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	219, 722, 220, 0, 278, 221, 222, 223, 279, 759,
	0, 0, 224, 0, 0, 0, 0, 225, 226, 227,
	228, 0, 0, 708, 697, 698, 695, 696, 687, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 1339, 94, 0, 0, 0, 686, 724, 690, 0,
	0, 0, 95, 96, 97, 0, 739, 232, 740, 98,
	741, 742, 0, 99, 236, 237, 100, 693, 723, 743,
	744, 240, 0, 101, 735, 0, 716, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 316, 109,
	2129, 0, 717, 719, 0, 718, 720, 111, 112, 284,
	113, 745, 114, 746, 747, 0, 115, 0, 116, 0,
	0, 0, 738, 118, 0, 119, 0, 0, 0, 681,
	120, 121, 122, 725, 726, 704, 0, 0, 123, 124,
	748, 0, 125, 0, 126, 0, 0, 317, 0, 127,
	736, 0, 250, 0, 128, 129, 130, 131, 732, 734,
	0, 0, 135, 0, 132, 0, 318, 133, 749, 134,
	750, 751, 752, 0, 715, 0, 0, 136, 321, 137,
	138, 0, 140, 139, 0, 737, 322, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 259,
	147, 324, 149, 150, 152, 151, 676, 0, 705, 733,
	153, 753, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 262, 325, 159, 326, 727, 160, 161, 162,
	163, 0, 728, 164, 265, 165, 0, 166, 167, 168,
	754, 169, 170, 0, 171, 172, 173, 174, 175, 177,
	178, 176, 179, 180, 181, 0, 182, 327, 183, 184,
	682, 185, 0, 189, 190, 191, 192, 0, 268, 193,
	194, 721, 195, 186, 187, 196, 0, 197, 755, 270,
	198, 0, 204, 199, 200, 188, 201, 203, 756, 202,
	729, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	273, 757, 758, 0, 0, 211, 730, 731, 703, 212,
	213, 2128, 215, 0, 0, 216, 217, 218, 219, 722,
	220, 0, 278, 221, 222, 223, 279, 759, 0, 0,
	224, 0, 0, 0, 0, 225, 226, 227, 228, 708,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	673, 674, 0, 0, 0, 92, 93, 0, 94, 683,
	0, 0, 0, 724, 686, 0, 0, 0, 95, 96,
	97, 230, 231, 232, 233, 98, 234, 235, 0, 99,
	236, 237, 100, 0, 723, 238, 239, 240, 0, 101,
	735, 0, 716, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 316, 109, 110, 0, 717, 719,
	0, 718, 720, 111, 112, 284, 113, 242, 114, 243,
	244, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 245, 120, 121, 122, 725,
	726, 0, 0, 0, 123, 124, 248, 0, 125, 0,
	126, 0, 0, 317, 0, 127, 736, 0, 250, 0,
	128, 129, 130, 131, 732, 734, 319, 0, 135, 0,
	132, 0, 318, 133, 253, 134, 254, 255, 256, 0,
	257, 0, 320, 136, 321, 137, 138, 0, 140, 139,
	0, 737, 322, 141, 323, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 259, 147, 324, 149, 150,
	152, 151, 0, 0, 0, 733, 153, 261, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 262, 325,
	159, 326, 727, 160, 161, 162, 163, 0, 728, 164,
	265, 165, 0, 166, 167, 168, 266, 169, 170, 0,
	171, 172, 173, 174, 175, 177, 178, 176, 179, 180,
	181, 0, 182, 327, 183, 184, 267, 185, 0, 189,
	190, 191, 192, 0, 268, 193, 194, 721, 195, 186,
	187, 196, 328, 197, 269, 270, 198, 0, 204, 199,
	200, 188, 201, 203, 271, 202, 729, 0, 205, 0,
	206, 207, 208, 209, 210, 0, 273, 274, 275, 0,
	0, 211, 730, 731, 0, 212, 213, 214, 215, 0,
	0, 216, 217, 218, 219, 722, 220, 0, 278, 221,
	222, 223, 279, 280, 0, 0, 224, 496, 0, 0,
	0, 225, 226, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 229, 0, 0, 0, 1613, 95, 96, 97, 230,
	231, 232, 233, 98, 234, 235, 0, 99, 236, 237,
	100, 0, 0, 238, 239, 240, 0, 101, 241, 0,
	315, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 316, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 284, 113, 242, 114, 243, 244, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 245, 120, 121, 122, 246, 247, 0,
	0, 0, 123, 124, 248, 0, 125, 0, 126, 0,
	0, 317, 0, 127, 249, 0, 250, 0, 128, 129,
	130, 131, 251, 252, 319, 0, 135, 0, 132, 0,
	318, 133, 253, 134, 254, 255, 256, 0, 257, 0,
	320, 136, 321, 137, 138, 0, 140, 139, 0, 258,
	322, 141, 323, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 259, 147, 324, 149, 150, 152, 151,
	0, 0, 0, 260, 153, 261, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 262, 325, 159, 326,
	263, 160, 161, 162, 163, 0, 264, 164, 265, 165,
	0, 166, 167, 168, 266, 169, 170, 0, 171, 172,
	173, 174, 175, 177, 178, 176, 179, 180, 181, 0,
	182, 327, 183, 184, 267, 185, 0, 189, 190, 191,
	192, 73, 268, 193, 194, 0, 195, 186, 187, 196,
	328, 197, 269, 270, 198, 0, 204, 199, 200, 188,
	201, 203, 271, 202, 272, 0, 205, 75, 206, 207,
	208, 209, 210, 0, 273, 274, 275, 0, 0, 211,
	276, 277, 0, 212, 213, 214, 215, 0, 0, 216,
	217, 218, 219, 0, 220, 0, 278, 221, 222, 223,
	576, 280, 0, 0, 224, 0, 0, 0, 71, 225,
	226, 227, 228, 0, 72, 496, 493, 0, 494, 489,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 70, 94, 0, 0, 0, 0, 229,
	0, 0, 0, 0, 95, 96, 97, 230, 231, 232,
	233, 98, 234, 235, 0, 99, 236, 237, 100, 0,
	0, 238, 239, 240, 0, 101, 241, 0, 315, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	316, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 284, 113, 242, 114, 243, 244, 897, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 245, 120, 121, 122, 246, 247, 486, 0, 0,
	123, 124, 248, 0, 125, 0, 126, 0, 0, 317,
	0, 127, 249, 0, 250, 0, 128, 129, 130, 131,
	251, 252, 319, 0, 135, 0, 132, 0, 318, 133,
	253, 134, 254, 255, 256, 0, 257, 0, 320, 136,
	321, 137, 138, 0, 140, 139, 0, 258, 322, 141,
	323, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 259, 147, 324, 149, 150, 152, 151, 0, 0,
	0, 260, 153, 261, 154, 155, 0, 156, 487, 0,
	157, 0, 0, 158, 262, 325, 159, 326, 263, 160,
	161, 162, 163, 0, 264, 164, 265, 165, 0, 166,
	167, 168, 266, 169, 170, 0, 171, 172, 173, 174,
	175, 177, 178, 176, 179, 180, 181, 0, 182, 327,
	183, 184, 267, 185, 0, 189, 190, 191, 192, 0,
	268, 193, 194, 0, 195, 186, 187, 196, 328, 197,
	269, 270, 198, 0, 204, 199, 200, 188, 201, 203,
	271, 202, 272, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 273, 274, 275, 0, 0, 211, 276, 277,
	485, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	219, 0, 220, 0, 278, 221, 222, 223, 279, 280,
	496, 493, 224, 494, 489, 484, 0, 225, 226, 227,
	228, 0, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 495, 490, 229, 0, 0, 0, 0, 95,
	96, 97, 230, 231, 232, 233, 98, 234, 235, 0,
	99, 236, 237, 100, 0, 0, 238, 239, 240, 0,
	101, 241, 0, 315, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 316, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 284, 113, 242, 114,
	243, 244, 894, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 245, 120, 121, 122,
	246, 247, 486, 0, 0, 123, 124, 248, 0, 125,
	0, 126, 0, 0, 317, 0, 127, 249, 0, 250,
	0, 128, 129, 130, 131, 251, 252, 319, 0, 135,
	0, 132, 0, 318, 133, 253, 134, 254, 255, 256,
	0, 257, 0, 320, 136, 321, 137, 138, 0, 140,
	139, 0, 258, 322, 141, 323, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 259, 147, 324, 149,
	150, 152, 151, 0, 0, 0, 260, 153, 261, 154,
	155, 0, 156, 487, 0, 157, 0, 0, 158, 262,
	325, 159, 326, 263, 160, 161, 162, 163, 0, 264,
	164, 265, 165, 0, 166, 167, 168, 266, 169, 170,
	0, 171, 172, 173, 174, 175, 177, 178, 176, 179,
	180, 181, 0, 182, 327, 183, 184, 267, 185, 0,
	189, 190, 191, 192, 0, 268, 193, 194, 0, 195,
	186, 187, 196, 328, 197, 269, 270, 198, 0, 204,
	199, 200, 188, 201, 203, 271, 202, 272, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 273, 274, 275,
	0, 0, 211, 276, 277, 485, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 219, 0, 220, 0, 278,
	221, 222, 223, 279, 280, 496, 493, 224, 494, 489,
	484, 0, 225, 226, 227, 228, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 495, 490, 229,
	0, 0, 0, 0, 95, 96, 97, 230, 231, 232,
	233, 98, 234, 235, 0, 99, 236, 237, 100, 0,
	0, 238, 239, 240, 0, 101, 241, 0, 315, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	316, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 284, 113, 242, 114, 243, 244, 605, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 245, 120, 121, 122, 246, 247, 486, 0, 0,
	123, 124, 248, 0, 125, 0, 126, 0, 0, 317,
	0, 127, 249, 0, 250, 0, 128, 129, 130, 131,
	251, 252, 319, 0, 135, 0, 132, 0, 318, 133,
	253, 134, 254, 255, 256, 0, 257, 0, 320, 136,
	321, 137, 138, 0, 140, 139, 0, 258, 322, 141,
	323, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 259, 147, 324, 149, 150, 152, 151, 0, 0,
	0, 260, 153, 261, 154, 155, 0, 156, 487, 0,
	157, 0, 0, 158, 262, 325, 159, 326, 263, 160,
	161, 162, 163, 0, 264, 164, 265, 165, 0, 166,
	167, 168, 266, 169, 170, 0, 171, 172, 173, 174,
	175, 177, 178, 176, 179, 180, 181, 0, 182, 327,
	183, 184, 267, 185, 0, 189, 190, 191, 192, 0,
	268, 193, 194, 0, 195, 186, 187, 196, 328, 197,
	269, 270, 198, 0, 204, 199, 200, 188, 201, 203,
	271, 202, 272, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 273, 274, 275, 0, 0, 211, 276, 277,
	485, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	219, 0, 220, 0, 278, 221, 222, 223, 279, 280,
	496, 493, 224, 494, 489, 484, 0, 225, 226, 227,
	228, 0, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 495, 490, 229, 0, 0, 0, 0, 95,
	96, 97, 230, 231, 232, 233, 98, 234, 235, 0,
	99, 236, 237, 100, 0, 0, 238, 239, 240, 0,
	101, 241, 0, 315, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 316, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 284, 113, 242, 114,
	243, 244, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 245, 120, 121, 122,
	246, 247, 486, 0, 0, 123, 124, 248, 0, 125,
	0, 126, 0, 0, 317, 0, 127, 249, 0, 250,
	0, 128, 129, 130, 131, 251, 252, 319, 0, 135,
	0, 132, 0, 318, 133, 253, 134, 254, 255, 256,
	0, 257, 0, 320, 136, 321, 137, 138, 0, 140,
	139, 0, 258, 322, 141, 323, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 259, 147, 324, 149,
	150, 152, 151, 0, 0, 0, 260, 153, 261, 154,
	155, 0, 156, 487, 0, 157, 0, 0, 158, 262,
	325, 159, 326, 263, 160, 161, 162, 163, 0, 264,
	164, 265, 165, 0, 166, 167, 168, 266, 169, 170,
	0, 171, 172, 173, 174, 175, 177, 178, 176, 179,
	180, 181, 0, 182, 327, 183, 184, 267, 185, 0,
	189, 190, 191, 192, 0, 268, 193, 194, 0, 195,
	186, 187, 196, 328, 197, 269, 270, 198, 0, 204,
	199, 200, 188, 201, 203, 271, 202, 272, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 273, 274, 275,
	0, 0, 211, 276, 277, 485, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 219, 0, 220, 0, 278,
	221, 222, 223, 279, 280, 89, 0, 224, 0, 0,
	0, 0, 225, 226, 227, 228, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 495, 490, 229,
	0, 0, 0, 0, 95, 96, 97, 230, 231, 232,
	233, 98, 234, 235, 0, 99, 236, 237, 100, 0,
	0, 238, 239, 240, 0, 101, 241, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 284, 113, 242, 114, 243, 244, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 245, 120, 121, 122, 246, 247, 0, 0, 0,
	123, 124, 248, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 249, 0, 250, 0, 128, 129, 130, 131,
	251, 252, 0, 0, 135, 0, 132, 0, 0, 133,
	253, 134, 254, 255, 256, 0, 257, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 258, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 259, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 260, 153, 261, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 262, 0, 159, 0, 263, 160,
	161, 162, 163, 0, 264, 164, 265, 165, 0, 166,
	167, 168, 266, 169, 170, 0, 171, 172, 173, 174,
	175, 177, 178, 176, 179, 180, 181, 0, 182, 0,
	183, 184, 267, 185, 0, 189, 190, 191, 192, 73,
	268, 193, 194, 0, 195, 186, 187, 196, 0, 197,
	269, 270, 198, 0, 204, 199, 200, 188, 201, 203,
	271, 202, 272, 0, 205, 75, 206, 207, 208, 209,
	210, 0, 273, 274, 275, 0, 0, 211, 276, 277,
	0, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	219, 0, 220, 0, 278, 221, 222, 223, 576, 280,
	0, 0, 224, 89, 0, 0, 71, 225, 226, 227,
	228, 0, 72, 0, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 229, 0, 0,
	0, 70, 95, 96, 97, 230, 231, 232, 233, 98,
	234, 235, 0, 99, 236, 237, 100, 0, 0, 238,
	239, 240, 0, 101, 241, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 284,
	113, 242, 114, 243, 244, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 245,
	120, 121, 122, 246, 247, 0, 0, 0, 123, 124,
	248, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	249, 0, 250, 0, 128, 129, 130, 131, 251, 252,
	0, 0, 135, 0, 132, 0, 0, 133, 253, 134,
	254, 255, 256, 0, 257, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 258, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 259,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 260,
	153, 261, 154, 155, 0, 156, 0, 530, 157, 0,
	0, 158, 262, 0, 159, 0, 263, 160, 161, 162,
	163, 0, 264, 164, 265, 165, 0, 166, 167, 168,
	266, 169, 170, 0, 171, 172, 173, 174, 175, 177,
	178, 176, 179, 180, 181, 0, 182, 0, 183, 184,
	267, 185, 0, 189, 190, 191, 192, 0, 268, 193,
	194, 0, 195, 186, 187, 196, 0, 197, 269, 270,
	198, 0, 204, 199, 200, 188, 201, 203, 271, 202,
	272, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	273, 274, 275, 0, 0, 211, 276, 277, 0, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 219, 0,
	220, 0, 278, 221, 222, 223, 279, 280, 0, 0,
	224, 89, 0, 0, 0, 225, 226, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 1217, 0, 1222,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 251, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 0, 0, 224, 0,
	89, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 229, 0, 0, 0, 803, 95,
	96, 97, 230, 231, 232, 233, 98, 234, 235, 0,
	99, 236, 237, 100, 0, 0, 238, 239, 240, 0,
	101, 241, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 284, 113, 242, 114,
	243, 244, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 245, 120, 121, 122,
	246, 247, 0, 0, 0, 123, 124, 248, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 249, 0, 250,
	0, 128, 129, 130, 131, 251, 252, 0, 0, 135,
	0, 132, 0, 0, 133, 253, 134, 254, 255, 256,
	0, 257, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 258, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 259, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 260, 153, 261, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 262,
	0, 159, 0, 263, 160, 161, 162, 163, 0, 264,
	164, 265, 165, 0, 166, 167, 168, 266, 169, 170,
	0, 171, 172, 173, 174, 175, 177, 178, 176, 179,
	180, 181, 0, 182, 0, 183, 184, 267, 185, 0,
	189, 190, 191, 192, 0, 268, 193, 194, 0, 195,
	186, 187, 196, 0, 197, 269, 270, 198, 0, 204,
	199, 200, 188, 201, 203, 271, 202, 272, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 273, 274, 275,
	0, 0, 211, 276, 277, 0, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 219, 0, 220, 0, 278,
	221, 222, 223, 279, 280, 0, 0, 224, 89, 0,
	0, 0, 225, 226, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 229, 0, 0, 0, 1126, 95, 96, 97,
	230, 231, 232, 233, 98, 234, 235, 0, 99, 236,
	237, 100, 0, 0, 238, 239, 240, 0, 101, 241,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 284, 113, 242, 114, 243, 244,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 245, 120, 121, 122, 246, 247,
	0, 0, 0, 123, 124, 248, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 249, 0, 250, 0, 128,
	129, 130, 131, 251, 252, 0, 0, 135, 0, 132,
	0, 0, 133, 253, 134, 254, 255, 256, 0, 257,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	258, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 259, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 260, 153, 261, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 262, 0, 159,
	0, 263, 160, 161, 162, 163, 0, 264, 164, 265,
	165, 0, 166, 167, 168, 266, 169, 170, 0, 171,
	172, 173, 174, 175, 177, 178, 176, 179, 180, 181,
	0, 182, 0, 183, 184, 267, 185, 0, 189, 190,
	191, 192, 0, 268, 193, 194, 0, 195, 186, 187,
	196, 0, 197, 269, 270, 198, 0, 204, 199, 200,
	188, 201, 203, 271, 202, 272, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 273, 274, 275, 0, 0,
	211, 276, 277, 0, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 219, 0, 220, 0, 278, 221, 222,
	223, 279, 280, 0, 0, 224, 89, 0, 0, 0,
	225, 226, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 1738, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 0, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 708, 697, 698, 695, 696, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 770, 0, 0, 0, 229, 0, 0, 0,
	0, 95, 96, 97, 230, 739, 232, 740, 98, 741,
	742, 0, 99, 236, 237, 100, 0, 0, 743, 744,
	240, 0, 101, 241, 0, 315, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 316, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 284, 113,
	745, 114, 746, 747, 0, 115, 0, 116, 0, 0,
	0, 738, 118, 0, 119, 0, 0, 0, 245, 120,
	121, 122, 246, 247, 704, 0, 0, 123, 124, 748,
	0, 125, 0, 126, 0, 0, 317, 0, 127, 249,
	0, 250, 0, 128, 129, 130, 131, 251, 252, 319,
	0, 135, 0, 132, 0, 318, 133, 749, 134, 750,
	751, 752, 0, 715, 0, 320, 136, 321, 137, 138,
	0, 140, 139, 0, 258, 322, 141, 323, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 259, 147,
	324, 149, 150, 152, 151, 0, 0, 705, 260, 153,
	753, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 262, 325, 159, 326, 263, 160, 161, 162, 163,
	0, 264, 164, 265, 165, 0, 166, 167, 168, 754,
	169, 170, 0, 171, 172, 173, 174, 175, 177, 178,
	176, 179, 180, 181, 0, 182, 327, 183, 184, 267,
	185, 0, 189, 190, 191, 192, 0, 268, 193, 194,
	0, 195, 186, 187, 196, 328, 197, 755, 270, 198,
	0, 204, 199, 200, 188, 201, 203, 756, 202, 272,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 273,
	757, 758, 0, 0, 211, 276, 277, 703, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 219, 0, 220,
	0, 278, 221, 222, 223, 279, 759, 496, 493, 224,
	0, 0, 611, 0, 225, 226, 227, 228, 0, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 229, 0, 0, 0, 0, 95, 96, 97, 230,
	231, 232, 233, 98, 234, 235, 0, 99, 236, 237,
	100, 0, 0, 238, 239, 240, 0, 101, 241, 0,
	315, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 316, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 284, 113, 242, 114, 243, 244, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 245, 120, 121, 122, 246, 247, 0,
	0, 0, 123, 124, 248, 0, 125, 0, 126, 0,
	0, 317, 0, 127, 249, 0, 250, 0, 128, 129,
	130, 131, 251, 252, 319, 0, 135, 0, 132, 0,
	318, 133, 253, 134, 254, 255, 256, 0, 257, 0,
	320, 136, 321, 137, 138, 0, 140, 139, 0, 258,
	322, 141, 323, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 259, 147, 324, 149, 150, 152, 151,
	0, 0, 0, 260, 153, 261, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 262, 325, 159, 326,
	263, 160, 161, 162, 163, 0, 264, 164, 265, 165,
	0, 166, 167, 168, 266, 169, 170, 0, 171, 172,
	173, 174, 175, 177, 178, 176, 179, 180, 181, 0,
	182, 327, 183, 184, 267, 185, 0, 189, 190, 191,
	192, 0, 268, 193, 194, 0, 195, 186, 187, 196,
	328, 197, 269, 270, 198, 0, 204, 199, 200, 188,
	201, 203, 271, 202, 272, 0, 205, 0, 206, 207,
	208, 209, 210, 0, 273, 274, 275, 0, 0, 211,
	276, 277, 0, 212, 213, 214, 215, 0, 0, 216,
	217, 218, 219, 0, 220, 0, 278, 221, 222, 223,
	279, 280, 89, 0, 224, 0, 0, 0, 0, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 229, 0, 0, 0,
	0, 95, 96, 97, 230, 231, 232, 233, 98, 234,
	235, 0, 99, 236, 237, 100, 0, 0, 238, 239,
	240, 0, 101, 241, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 85, 113,
	242, 114, 243, 244, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 245, 120,
	121, 122, 246, 247, 0, 0, 0, 123, 124, 248,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 249,
	0, 250, 0, 128, 129, 130, 131, 251, 252, 0,
	0, 135, 0, 132, 0, 0, 133, 253, 134, 254,
	255, 256, 0, 257, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 258, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 259, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 260, 153,
	261, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 262, 0, 159, 0, 263, 160, 161, 162, 163,
	0, 264, 164, 265, 165, 0, 166, 167, 168, 266,
	169, 170, 0, 171, 172, 173, 174, 175, 177, 178,
	176, 179, 180, 181, 0, 182, 0, 183, 184, 267,
	185, 0, 189, 190, 191, 192, 0, 268, 193, 194,
	0, 195, 186, 187, 196, 0, 197, 269, 270, 198,
	0, 204, 199, 200, 188, 201, 203, 271, 202, 272,
	0, 205, 84, 206, 207, 208, 209, 210, 0, 273,
	274, 275, 0, 0, 211, 276, 277, 0, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 219, 0, 220,
	0, 278, 221, 222, 223, 279, 280, 0, 0, 224,
	496, 493, 0, 0, 225, 226, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 88, 0, 0, 229, 0, 0, 0, 0, 95,
	96, 97, 230, 231, 232, 233, 98, 234, 235, 0,
	99, 236, 237, 100, 0, 0, 238, 239, 240, 0,
	101, 241, 0, 315, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 316, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 284, 113, 242, 114,
	243, 244, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 245, 120, 121, 122,
	246, 247, 0, 0, 0, 123, 124, 248, 0, 125,
	0, 126, 0, 0, 317, 0, 127, 249, 0, 250,
	0, 128, 129, 130, 131, 251, 252, 319, 0, 135,
	0, 132, 0, 318, 133, 253, 134, 254, 255, 256,
	0, 257, 0, 320, 136, 321, 137, 138, 0, 140,
	139, 0, 258, 322, 141, 323, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 259, 147, 324, 149,
	150, 152, 151, 0, 0, 0, 260, 153, 261, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 262,
	325, 159, 326, 263, 160, 161, 162, 163, 0, 264,
	164, 265, 165, 0, 166, 167, 168, 266, 169, 170,
	0, 171, 172, 173, 174, 175, 177, 178, 176, 179,
	180, 181, 0, 182, 327, 183, 184, 267, 185, 0,
	189, 190, 191, 192, 0, 268, 193, 194, 0, 195,
	186, 187, 196, 328, 197, 269, 270, 198, 0, 204,
	199, 200, 188, 201, 203, 271, 202, 272, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 273, 274, 275,
	0, 0, 211, 276, 277, 0, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 219, 0, 220, 0, 278,
	221, 222, 223, 279, 280, 89, 0, 224, 0, 0,
	0, 0, 225, 226, 227, 228, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 229,
	0, 0, 0, 0, 95, 96, 97, 230, 231, 232,
	233, 98, 234, 235, 0, 99, 236, 237, 100, 0,
	0, 238, 239, 240, 0, 101, 241, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 284, 113, 242, 114, 243, 244, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 245, 120, 121, 122, 246, 247, 0, 0, 0,
	123, 124, 248, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 249, 0, 250, 0, 128, 129, 130, 131,
	251, 252, 0, 0, 135, 0, 132, 0, 0, 133,
	253, 134, 254, 255, 256, 0, 257, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 258, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 259, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 260, 153, 261, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 262, 0, 159, 0, 263, 160,
	161, 162, 163, 0, 264, 164, 265, 165, 0, 166,
	167, 168, 266, 169, 170, 0, 171, 172, 173, 174,
	175, 177, 178, 176, 179, 180, 181, 0, 182, 0,
	183, 184, 267, 185, 0, 189, 190, 191, 192, 0,
	268, 193, 194, 0, 195, 186, 187, 196, 0, 197,
	269, 270, 198, 0, 204, 199, 200, 188, 201, 203,
	271, 202, 272, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 273, 274, 275, 0, 0, 211, 276, 277,
	0, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	219, 0, 220, 0, 278, 221, 222, 223, 279, 280,
	0, 496, 224, 0, 0, 0, 0, 225, 226, 227,
	228, 0, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 88, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 315, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 316, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 317, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 251, 252, 319, 0,
	135, 0, 132, 0, 318, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 320, 136, 321, 137, 138, 0,
	140, 139, 0, 258, 322, 141, 323, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 324,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 325, 159, 326, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 327, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 328, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 1083, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 1081, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 1189,
	0, 123, 124, 248, 0, 125, 0, 126, 1086, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 1187, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 1085,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 1188, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	1083, 101, 241, 0, 0, 1078, 102, 103, 104, 0,
	105, 1081, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 1086, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 1077, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 1085, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 1084, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 1705, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 251, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 530, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 911, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 828, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 530, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 584, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 542, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 530, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 535, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	530, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 414,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 251, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 413, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 1386, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 1384, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 1373, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 941, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 251, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 428, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 813, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 0, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 647, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 642, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 590,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 251, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 442, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 439, 274,
	275, 0, 0, 435, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 442, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 439, 274, 275, 0, 0, 435, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 572, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 569, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 566, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 564, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 101, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 538, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 267, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 194, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 273, 274,
	275, 0, 0, 211, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 162, 163, 0, 264, 164, 265, 165, 0,
	166, 167, 168, 266, 519, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 185, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 89, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	95, 96, 97, 230, 231, 232, 233, 98, 234, 235,
	0, 99, 236, 237, 100, 0, 0, 238, 239, 240,
	0, 433, 241, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 284, 113, 242,
	114, 243, 244, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 245, 120, 121,
	122, 246, 247, 0, 0, 0, 123, 124, 248, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 249, 0,
	250, 0, 128, 129, 130, 131, 251, 252, 0, 0,
	135, 0, 132, 0, 0, 133, 253, 134, 254, 255,
	256, 0, 257, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 258, 0, 141, 0, 0, 431, 0,
	0, 143, 0, 144, 145, 146, 148, 259, 442, 0,
	149, 150, 152, 151, 0, 0, 0, 260, 153, 261,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	262, 0, 159, 0, 263, 160, 161, 162, 163, 0,
	264, 164, 265, 165, 0, 166, 167, 168, 266, 169,
	170, 0, 171, 172, 173, 174, 175, 177, 178, 176,
	179, 180, 181, 0, 182, 0, 183, 184, 434, 185,
	0, 189, 190, 191, 192, 0, 268, 193, 432, 0,
	195, 186, 187, 196, 0, 197, 269, 270, 198, 0,
	204, 199, 200, 188, 201, 203, 271, 202, 272, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 439, 274,
	275, 0, 0, 435, 276, 277, 0, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 219, 0, 220, 0,
	278, 221, 222, 223, 279, 280, 89, 0, 224, 0,
	0, 0, 0, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	229, 0, 0, 0, 0, 95, 96, 97, 230, 231,
	232, 233, 98, 234, 235, 0, 99, 236, 237, 100,
	0, 0, 238, 239, 240, 0, 101, 241, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 284, 113, 242, 114, 243, 244, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 245, 120, 121, 122, 246, 247, 0, 0,
	0, 123, 124, 248, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 249, 0, 250, 0, 128, 129, 130,
	131, 251, 252, 0, 0, 135, 0, 132, 0, 0,
	133, 253, 134, 254, 255, 256, 0, 257, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 258, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 259, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 260, 153, 261, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 262, 0, 159, 0, 263,
	160, 161, 0, 163, 0, 264, 164, 265, 165, 0,
	166, 0, 168, 266, 169, 170, 0, 171, 172, 173,
	174, 175, 177, 178, 176, 179, 180, 181, 0, 182,
	0, 183, 184, 267, 0, 0, 189, 190, 191, 192,
	0, 268, 193, 194, 0, 195, 186, 187, 196, 0,
	197, 269, 270, 198, 0, 204, 199, 200, 188, 201,
	203, 271, 202, 272, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 273, 274, 275, 0, 0, 211, 276,
	277, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 219, 0, 220, 0, 278, 221, 222, 223, 279,
	280, 0, 0, 224, 0, 0, 0, 0, 225, 226,
	227, 228, 968, 969, 0, 988, 989, 990, 998, 999,
	1000, 0, 0, 0, 0, 0, 0, 0, 991, 0,
	0, 0, 0, 0, 0, 971, 0, 0, 1002, 0,
	0, 0, 0, 0, 968, 969, 0, 988, 989, 990,
	998, 999, 1000, 0, 0, 0, 0, 0, 970, 0,
	991, 0, 0, 0, 985, 0, 0, 971, 0, 0,
	1002, 0, 0, 0, 0, 0, 968, 969, 0, 988,
	989, 990, 998, 999, 1000, 0, 0, 0, 0, 0,
	970, 0, 991, 0, 0, 0, 985, 0, 0, 971,
	0, 0, 1002, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 976, 0, 0, 0, 0, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 995, 1003, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 976, 0, 0, 1001,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 993, 0, 0, 0, 995, 1003, 986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 976, 0,
	0, 1001, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 992, 993, 0, 0, 0, 995, 1003, 986,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1001, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 992, 993, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 987, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 996,
	0, 0, 0, 0, 0, 0, 992, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 987, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 996, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 994, 996, 0, 982, 983, 984, 997, 0,
	981, 979, 980, 972, 973, 974, 975, 977, 978, 0,
	0, 0, 0, 0, 0, 0, 1539, 0, 0, 0,
	0, 0, 0, 0, 994, 0, 0, 982, 983, 984,
	997, 0, 981, 979, 980, 972, 973, 974, 975, 977,
	978, 0, 0, 0, 0, 2067, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 994, 0, 0, 982,
	983, 984, 997, 0, 981, 979, 980, 972, 973, 974,
	975, 977, 978, 0, 0, 968, 969, 2065, 988, 989,
	990, 998, 999, 1000, 0, 0, 0, 0, 0, 0,
	0, 991, 0, 0, 0, 0, 0, 0, 971, 968,
	969, 1002, 988, 989, 990, 998, 999, 1000, 0, 0,
	0, 0, 0, 0, 0, 991, 0, 0, 0, 0,
	0, 970, 971, 0, 0, 1002, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 969, 0, 988,
	989, 990, 998, 999, 1000, 970, 0, 0, 0, 0,
	0, 985, 991, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 1002, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 995, 1003, 0, 0,
	0, 976, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1001, 0, 0, 0, 0, 0, 0, 0,
	995, 1003, 0, 0, 993, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 1001, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 993, 0,
	0, 0, 0, 0, 986, 992, 0, 995, 1003, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1001, 0, 0, 0, 0, 0, 992,
	0, 0, 0, 0, 0, 993, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 992, 0, 0, 0,
	0, 0, 987, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 996, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 994, 0, 0, 982, 983,
	984, 997, 0, 981, 979, 980, 972, 973, 974, 975,
	977, 978, 0, 0, 0, 0, 2010, 0, 0, 994,
	0, 0, 982, 983, 984, 997, 0, 981, 979, 980,
	972, 973, 974, 975, 977, 978, 0, 0, 0, 0,
	2005, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 994, 0, 0, 982,
	983, 984, 997, 0, 981, 979, 980, 972, 973, 974,
	975, 977, 978, 0, 0, 968, 969, 2001, 988, 989,
	990, 998, 999, 1000, 0, 0, 0, 0, 0, 0,
	0, 991, 0, 0, 0, 0, 0, 0, 971, 968,
	969, 1002, 988, 989, 990, 998, 999, 1000, 0, 0,
	0, 0, 0, 0, 0, 991, 0, 0, 0, 0,
	0, 970, 971, 0, 0, 1002, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 969, 0, 988,
	989, 990, 998, 999, 1000, 970, 0, 0, 0, 0,
	0, 985, 991, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 1002, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 995, 1003, 0, 0,
	0, 976, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1001, 0, 0, 0, 0, 0, 0, 0,
	995, 1003, 0, 0, 993, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 1001, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 993, 0,
	0, 0, 0, 0, 986, 992, 0, 995, 1003, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1001, 0, 0, 0, 0, 0, 992,
	0, 0, 0, 0, 0, 993, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 992, 0, 0, 0,
	0, 0, 987, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 996, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 994, 0, 0, 982, 983,
	984, 997, 0, 981, 979, 980, 972, 973, 974, 975,
	977, 978, 0, 0, 0, 0, 1940, 0, 0, 994,
	0, 0, 982, 983, 984, 997, 0, 981, 979, 980,
	972, 973, 974, 975, 977, 978, 0, 0, 0, 0,
	1918, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 994, 0, 0, 982,
	983, 984, 997, 0, 981, 979, 980, 972, 973, 974,
	975, 977, 978, 0, 0, 968, 969, 1917, 988, 989,
	990, 998, 999, 1000, 0, 0, 0, 0, 0, 0,
	0, 991, 0, 0, 0, 0, 0, 0, 971, 968,
	969, 1002, 988, 989, 990, 998, 999, 1000, 0, 0,
	0, 0, 0, 0, 0, 991, 0, 0, 0, 0,
	0, 970, 971, 0, 0, 1002, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 969, 0, 988,
	989, 990, 998, 999, 1000, 970, 0, 0, 0, 0,
	0, 985, 991, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 1002, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 995, 1003, 0, 0,
	0, 976, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1001, 0, 0, 0, 0, 0, 0, 0,
	995, 1003, 0, 0, 993, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 1001, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 993, 0,
	0, 0, 0, 0, 986, 992, 0, 995, 1003, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1001, 0, 0, 0, 0, 0, 992,
	0, 0, 0, 0, 0, 993, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 992, 0, 0, 0,
	0, 0, 987, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 996, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 994, 0, 0, 982, 983,
	984, 997, 0, 981, 979, 980, 972, 973, 974, 975,
	977, 978, 0, 0, 0, 0, 1807, 0, 0, 994,
	0, 0, 982, 983, 984, 997, 0, 981, 979, 980,
	972, 973, 974, 975, 977, 978, 0, 0, 0, 0,
	1741, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 994, 0, 0, 982,
	983, 984, 997, 0, 981, 979, 980, 972, 973, 974,
	975, 977, 978, 0, 0, 968, 969, 1725, 988, 989,
	990, 998, 999, 1000, 0, 0, 0, 0, 0, 0,
	0, 991, 0, 0, 0, 0, 0, 0, 971, 968,
	969, 1002, 988, 989, 990, 998, 999, 1000, 0, 0,
	0, 0, 0, 0, 0, 991, 0, 0, 0, 0,
	0, 970, 971, 0, 0, 1002, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 969, 0, 988,
	989, 990, 998, 999, 1000, 970, 0, 0, 0, 0,
	0, 985, 991, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 1002, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 995, 1003, 0, 0,
	0, 976, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1001, 0, 0, 0, 0, 0, 0, 0,
	995, 1003, 0, 0, 993, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 1001, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 993, 0,
	0, 0, 0, 0, 986, 992, 0, 995, 1003, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1001, 0, 0, 0, 0, 0, 992,
	0, 0, 0, 0, 0, 993, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 992, 0, 0, 0,
	0, 0, 987, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 996, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 994, 0, 0, 982, 983,
	984, 997, 0, 981, 979, 980, 972, 973, 974, 975,
	977, 978, 0, 0, 0, 0, 1678, 0, 0, 994,
	0, 0, 982, 983, 984, 997, 0, 981, 979, 980,
	972, 973, 974, 975, 977, 978, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 994, 0, 0, 982,
	983, 984, 997, 0, 981, 979, 980, 972, 973, 974,
	975, 977, 978, 968, 969, 1514, 988, 989, 990, 998,
	999, 1000, 0, 0, 0, 0, 0, 0, 0, 991,
	0, 0, 0, 0, 0, 0, 971, 968, 969, 1002,
	988, 989, 990, 998, 999, 1000, 0, 0, 0, 0,
	0, 0, 0, 991, 0, 0, 0, 0, 0, 970,
	971, 0, 0, 1002, 0, 985, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 969, 0, 988, 989, 990,
	998, 999, 1000, 970, 0, 0, 0, 0, 0, 985,
	991, 0, 0, 0, 0, 1209, 0, 971, 0, 0,
	1002, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 976, 2150, 0, 0, 0,
	970, 0, 0, 0, 0, 0, 985, 0, 0, 0,
	0, 0, 0, 0, 995, 1003, 0, 0, 0, 976,
	0, 1579, 0, 0, 1578, 0, 0, 0, 0, 0,
	1001, 0, 0, 0, 1210, 0, 0, 0, 995, 1003,
	0, 0, 993, 0, 0, 0, 0, 0, 986, 0,
	0, 0, 0, 0, 1001, 0, 976, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 993, 0, 0, 0,
	0, 0, 986, 992, 0, 995, 1003, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2149, 0, 0,
	0, 1001, 0, 0, 0, 0, 0, 992, 0, 0,
	0, 0, 0, 993, 0, 0, 0, 0, 0, 986,
	0, 0, 0, 0, 0, 0, 987, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	996, 0, 0, 0, 992, 0, 0, 0, 0, 0,
	987, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 996, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 987, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 996, 0, 994, 0, 0, 982, 983, 984, 997,
	0, 981, 979, 980, 972, 973, 974, 975, 977, 978,
	0, 0, 0, 0, 0, 0, 0, 994, 0, 0,
	982, 983, 984, 997, 0, 981, 979, 980, 972, 973,
	974, 975, 977, 978, 0, 0, 0, 0, 1547, 1548,
	0, 1565, 1566, 1567, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 994, 0, 0, 982, 983, 984,
	997, 0, 981, 979, 980, 972, 973, 974, 975, 977,
	978, 1006, 0, 0, 0, 0, 0, 968, 969, 0,
	988, 989, 990, 998, 999, 1000, 0, 0, 0, 0,
	1562, 0, 0, 991, 0, 0, 0, 1005, 0, 0,
	971, 968, 969, 1002, 988, 989, 990, 998, 999, 1000,
	0, 0, 0, 0, 0, 0, 0, 991, 0, 0,
	0, 0, 0, 970, 971, 0, 0, 1002, 0, 985,
	0, 0, 0, 0, 0, 0, 0, 0, 968, 969,
	1553, 988, 989, 990, 998, 999, 1000, 970, 0, 0,
	0, 0, 0, 985, 991, 0, 0, 0, 0, 0,
	1569, 971, 0, 0, 1002, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1568, 0, 0, 0, 976,
	0, 0, 0, 0, 970, 0, 0, 0, 0, 0,
	985, 0, 0, 1563, 0, 0, 0, 0, 995, 1003,
	0, 0, 0, 976, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1001, 0, 0, 0, 0, 0,
	0, 0, 995, 1003, 0, 0, 993, 0, 0, 0,
	0, 0, 986, 0, 0, 0, 0, 0, 1001, 0,
	976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	993, 0, 0, 0, 0, 0, 986, 992, 0, 995,
	1003, 1564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1001, 0, 0, 0, 0,
	0, 992, 514, 0, 0, 0, 0, 993, 0, 0,
	0, 0, 0, 986, 0, 0, 0, 0, 0, 0,
	987, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 996, 0, 0, 0, 992, 0,
	0, 0, 0, 0, 987, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 996, 0,
	0, 1559, 1560, 1561, 0, 0, 1558, 1556, 1557, 1549,
	1550, 1551, 1552, 1554, 1555, 0, 0, 0, 0, 0,
	0, 987, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 996, 0, 994, 0, 0,
	982, 983, 984, 997, 0, 981, 979, 980, 972, 973,
	974, 975, 977, 978, 0, 0, 0, 0, 1729, 0,
	0, 994, 0, 0, 982, 983, 984, 997, 0, 981,
	979, 980, 972, 973, 974, 975, 977, 978, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 994, 0,
	0, 982, 983, 984, 997, 0, 981, 979, 980, 972,
	973, 974, 975, 977, 978, 968, 969, 0, 988, 989,
	990, 998, 999, 1000, 0, 0, 0, 0, 0, 0,
	0, 991, 0, 0, 0, 0, 0, 0, 971, 968,
	969, 1002, 988, 989, 990, 998, 999, 1000, 0, 0,
	0, 0, 0, 0, 0, 991, 0, 0, 0, 1580,
	0, 970, 971, 0, 0, 1002, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 985, 0, 0, 0, 0, 0, 0, 0, 0,
	855, 847, 872, 839, 863, 862, 0, 0, 841, 840,
	0, 0, 0, 874, 873, 0, 0, 976, 0, 0,
	0, 0, 1585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 995, 1003, 0, 0,
	0, 976, 0, 0, 0, 868, 0, 860, 859, 0,
	0, 0, 1001, 0, 0, 0, 858, 0, 0, 0,
	995, 1003, 0, 0, 993, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 857, 0, 1001, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 993, 0,
	0, 0, 0, 0, 986, 992, 0, 0, 0, 0,
	0, 0, 850, 849, 851, 852, 853, 0, 871, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 992,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 843, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 0, 0, 861, 0, 0, 0, 848,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 987, 0, 968, 969, 0, 988, 989, 990,
	998, 999, 1000, 0, 856, 0, 996, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 0, 971, 968, 969,
	1002, 988, 989, 990, 998, 999, 1000, 0, 0, 0,
	0, 0, 844, 0, 991, 0, 0, 0, 1538, 0,
	970, 971, 854, 845, 1002, 994, 985, 0, 982, 983,
	984, 997, 876, 981, 979, 980, 972, 973, 974, 975,
	977, 978, 842, 0, 970, 869, 870, 0, 0, 994,
	985, 0, 982, 983, 984, 997, 0, 981, 979, 980,
	972, 973, 974, 975, 977, 978, 846, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 976, 0, 0, 0,
	0, 0, 968, 969, 0, 988, 989, 990, 998, 999,
	1000, 0, 0, 0, 0, 995, 1003, 0, 991, 0,
	976, 0, 0, 0, 0, 971, 0, 0, 1002, 0,
	0, 1001, 0, 0, 0, 0, 0, 0, 0, 995,
	1003, 0, 0, 993, 0, 0, 0, 0, 970, 986,
	0, 0, 0, 0, 985, 1001, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 993, 0, 0,
	0, 0, 0, 986, 992, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 992, 0,
	0, 0, 0, 0, 976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 987, 0, 0,
	0, 0, 0, 995, 1003, 0, 0, 0, 0, 0,
	0, 996, 0, 0, 0, 0, 0, 0, 0, 1001,
	0, 987, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 993, 0, 0, 0, 996, 0, 986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 992, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 994, 0, 0, 982, 983, 984,
	997, 0, 981, 979, 980, 972, 973, 974, 975, 977,
	978, 0, 0, 0, 0, 0, 0, 0, 994, 0,
	0, 982, 983, 984, 997, 987, 981, 979, 980, 972,
	973, 974, 975, 977, 978, 0, 0, 968, 969, 996,
	988, 989, 990, 998, 999, 1000, 0, 0, 0, 0,
	0, 0, 1547, 1548, 0, 1565, 1566, 1567, 0, 0,
	971, 0, 0, 1002, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 969, 0, 988, 989, 990, 998,
	999, 1000, 0, 970, 0, 0, 0, 0, 0, 985,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 1002,
	0, 0, 994, 0, 1562, 982, 983, 984, 997, 0,
	981, 979, 980, 972, 973, 974, 975, 977, 978, 970,
	0, 968, 969, 0, 0, 985, 0, 998, 999, 1000,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 976,
	0, 0, 0, 0, 971, 0, 0, 1002, 1547, 1548,
	0, 1565, 1566, 1567, 1553, 0, 0, 0, 995, 1003,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	0, 0, 0, 985, 1001, 976, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 993, 0, 0, 1568,
	0, 0, 986, 0, 995, 1003, 0, 0, 0, 0,
	1562, 0, 0, 0, 0, 0, 0, 1563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 993, 976, 0, 0, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 995, 1003, 0, 0, 0, 0, 0, 0,
	1553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	987, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	993, 0, 0, 0, 996, 1564, 986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 987, 0, 0, 0,
	0, 0, 0, 1563, 0, 0, 0, 0, 0, 0,
	996, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 994, 0, 0,
	982, 983, 984, 997, 987, 981, 979, 980, 972, 973,
	974, 975, 977, 978, 0, 1559, 1560, 1561, 996, 0,
	1558, 1556, 1557, 1549, 1550, 1551, 1552, 1554, 1555, 0,
	0, 1564, 0, 994, 0, 0, 982, 983, 984, 997,
	0, 981, 979, 980, 972, 973, 974, 975, 977, 978,
	0, 0, 0, 855, 847, 872, 839, 863, 862, 0,
	0, 841, 840, 0, 0, 0, 874, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 994, 0, 0, 0, 0, 0, 997, 0, 981,
	979, 980, 972, 973, 974, 975, 977, 978, 868, 0,
	860, 859, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 1559, 1560, 1561, 444, 0, 1558, 1556, 1557, 1549,
	1550, 1551, 1552, 1554, 1555, 0, 0, 857, 0, 0,
	0, 0, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 850, 849, 851, 852, 853,
	0, 871, 0, 0, 450, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 456, 457, 0, 0, 462, 0,
	0, 0, 0, 0, 0, 0, 843, 0, 0, 0,
	447, 452, 0, 0, 0, 0, 0, 0, 861, 0,
	0, 0, 848, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 0, 0,
	453, 1228, 1226, 1227, 1230, 1229, 0, 0, 0, 0,
	0, 0, 0, 0, 454, 455, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	0, 458, 0, 0, 0, 854, 845, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 0, 0, 0, 0,
	0, 445, 0, 0, 0, 842, 0, 0, 869, 870,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 846,
	0, 0, 0, 0, 875, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 459, 0, 464, 0, 0,
	0, 460, 0, 0, 0, 0, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 463,
}
var sqlPact = [...]int{

	3888, -1000, 56, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 731, 16828, 16828, 20962, -1000, -1000, -1000, -1000,
	-1000, -1000, 811, 716, 1244, 5658, 20962, 20962, 20667, 1171,
	1171, 22437, -1000, -1000, 25977, -1000, 30250, 550, 553, 550,
	550, 545, 22437, 1197, 666, 14146, 709, 202, -1000, 755,
	12, 25682, 20962, 1455, 54, 18897, 358, 3888, 20372, 25387,
	20962, 20077, 621, 52, 17421, 20962, -1000, 62, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1291, 416, 62, -1000, 1290, 1202, 1199, 18897, 25092,
	24797, 24502, 24207, -1000, 12953, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 795, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	364, 363, -1000, 19782, -1000, 983, -1000, 53, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 977, -1000, 20962, -1000,
	-1000, 23912, 23617, 734, 362, 967, -1000, -1000, 624, 456,
	-1000, -1000, 13851, 67, -1000, -1000, -1000, -1000, 1471, 16533,
	725, 1289, -1000, 976, 1288, 1286, 1284, 1283, 1282, 1280,
	455, 810, 516, -1000, 1279, 1276, 967, -1000, 967, -1000,
	-1000, -1000, 613, 22437, -1000, -1000, -1000, -1000, -1000, 18897,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1705, -1000, -1000, -1000, -1000, 1707, -1000, -1000, -1000, -1000,
	23322, 20962, 20962, 1219, 23027, -1000, 755, -1000, -1000, -1000,
	1125, 1446, 1446, 1446, 1496, 178, 166, 202, 43, 20962,
	-1000, 360, 43, 9807, 9807, -1000, -1000, 358, -1000, 394,
	15932, -1000, 8850, -1000, 914, 1360, 519, 876, 1357, -126,
	875, 825, 1354, 16533, 17421, 52, 51, -1000, -1000, -1000,
	5352, 16533, 696, 15037, 62, -1000, -1000, -1000, 18897, 20962,
	20962, 740, 22732, -1000, 1353, 129, 1351, -1000, 127, 1349,
	-1000, 127, 1348, 44, -1000, -1000, 358, 19487, 20962, 1595,
	29293, -1000, 11084, -1000, -1000, 16828, 1272, 16828, -1000, -1000,
	1581, -1000, 20962, 11084, -1000, 49, 47, 1117, 1150, 13556,
	13261, 1413, 1028, -1000, -1000, -1000, 66, 5658, 710, -1000,
	-1000, -1000, 19192, 20962, 1301, 16828, 20962, 20962, 20962, 20962,
	20962, 20962, -1000, 1108, -1000, -1000, 20962, 20962, 777, 659,
	-1000, 46, 45, -1000, 22437, -1000, 139, -1000, -1000, -1000,
	-1000, 357, 1057, 463, 140, 22142, 463, 1055, -1000, 1125,
	-1000, 989, 1186, 10127, 1126, 11084, 202, -1000, -1000, 202,
	202, 11084, -1000, -1000, 20962, 43, 1571, 20962, 128, -1000,
	28857, -1000, -1000, 11084, 11084, 11084, 11084, 11084, 929, 388,
	-1000, 356, 355, 6603, -1000, -1000, 1701, -1000, -1000, -1000,
	170, -1000, -1000, 11084, 62, -1000, -1000, -1000, -1000, 354,
	1732, -1000, 505, -1000, -1000, -1000, 461, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1300, 347, 345, -1000,
	-1000, -1000, -1000, 340, 339, 325, 321, 320, 319, 313,
	312, 308, 307, 304, 303, 301, 300, 296, 916, -1000,
	477, -1000, -1000, 477, 477, -1000, 281, 281, 282, -1000,
	-1000, -1000, -1000, 281, -1000, -1000, -1000, 445, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 293, 128, -1000, -1000, -1000,
	20962, 42, -1000, 29592, -1000, -20, 772, -1000, 18307, 1466,
	1441, 1434, 18897, 1524, 12, 1275, 1514, 12, 1273, 612,
	20962, 20962, 611, 606, 18897, 415, -1000, 20962, -1000, -1000,
	33, -1000, -1000, 1270, 40, -1000, -1000, 471, 98, 1562,
	98, 15336, -1000, 20962, 20962, -1000, 20962, -1000, -1000, 20962,
	-1000, 20962, 20962, -1000, 20962, 154, 17717, 933, 1344, 769,
	12, 38, -1000, 1598, -1000, -1000, -1000, -1000, 107, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 282, 916, 281,
	281, 281, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 445,
	-1000, -1000, 477, 477, 477, -1000, -1000, 34, 29592, 604,
	-1000, 1269, 531, -1000, 451, 32, 900, 1194, 807, -1000,
	-1000, -1000, -1000, 23, -1000, -1000, 23, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1724, 5658, -1000, -1000,
	-1000, -1000, -1000, -1000, 20962, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 20962, 20962, 20962, 900, 1194,
	-1000, -1000, 18897, 18012, 1556, 1343, 921, -1000, 1545, 20962,
	973, 1052, -1000, 643, 1336, -1000, -1000, -1000, -1000, 29592,
	-1000, 384, -1000, -1000, 29592, 831, 1207, -1000, 1207, 17,
	-1000, 28534, -1000, 280, 25, 471, 9807, 14739, 30156, 29293,
	5658, 636, 11084, 11084, 11084, 11084, 11084, 11084, 11084, 11084,
	11084, 11084, 11084, 11084, 11084, 11084, 11084, 11084, 11084, 11084,
	11084, 11084, 11084, 11084, 1094, 11084, 603, 11084, 11084, 11084,
	11084, 1365, 925, 261, 955, 5658, -1000, -1000, 1668, 1668,
	1668, 29827, 29827, 227, 388, -1000, 11084, -1000, 9488, 166,
	28119, 9, -1000, -1000, -1000, 7561, 475, 29592, 62, 6283,
	-1000, 1698, 913, 1308, 1248, 275, 165, 155, 11084, 11084,
	11403, 11403, 11084, 11722, 11084, 11084, 6922, 11084, 11084, 11084,
	11084, 11084, 11084, -1000, 274, -1000, -1000, -1000, -1000, 1695,
	-1000, -1000, 1693, -1000, 630, 599, 1689, 471, 152, 8850,
	-1000, 933, 20962, 20962, 20962, -1000, -1000, 1039, 21847, 1037,
	29293, 20962, -1000, 267, 266, 1172, 1165, 20962, 20962, 21552,
	21257, 20962, 881, 12, -1000, 265, 12, -1000, 264, 20962,
	823, -1000, 20962, 20962, 804, 1229, 1011, -1000, 464, 16533,
	686, 1267, 20962, 784, 11084, 883, -1000, 14441, 484, 20962,
	784, 120, -1000, -1000, -1000, 434, 20962, -1000, -1000, -1000,
	129, -1000, 127, 127, -1000, -1000, 18897, -1000, -1000, -1000,
	-1000, -1000, -1000, 29293, 387, 385, -1000, 1680, 600, -1000,
	597, 593, 583, -1000, 262, -1000, 11084, 20962, 20962, 1194,
	-1000, -1000, -1000, -1000, 747, -1000, 895, -1000, 14146, -1000,
	-28, -1000, -1000, -1000, 415, -1000, -1000, -1000, 151, 19,
	-14, 29293, -1000, -1000, -1000, -1000, -1000, 20962, 326, 20962,
	12, 20962, -1000, 1723, 12, 20962, 1333, 1367, 413, 20962,
	831, -1000, 11084, 1669, -1000, -1000, -1000, 11084, -1000, -1000,
	-1000, 12, -1000, 1242, -1000, 27, 1298, 1065, -135, 198,
	439, -1000, 4251, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 452, 1106, 1106, 592, 592, 592, 592,
	1733, 982, 2875, 729, 29911, 29911, 29911, 412, 337, 337,
	29911, 29911, 29911, 29827, 3740, 169, 11084, 11084, 579, 910,
	261, 169, 11084, 169, 169, 169, 169, -1000, 1398, -1000,
	-1000, -1000, -1000, 1265, 259, 11722, 11722, -1000, -1000, -1000,
	6603, 12041, -1000, -1000, -1000, -1000, -1000, 257, 11084, -1000,
	28156, -168, 15, -1000, -1000, 11084, -101, -119, -1000, -1000,
	689, -1000, 11084, -1000, 3, 11084, 11084, 11084, 150, 147,
	-1000, 931, 255, 253, 11084, -1000, -1000, 29508, 26572, 146,
	1260, -83, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 144,
	141, 29484, -83, 138, 28818, -1000, 11722, 11722, 11722, 6603,
	250, 136, 28497, -83, 29259, 9169, 9169, 9169, 133, 29235,
	11084, -83, 3680, 3616, 3283, 7, 1, -3, 1667, -5,
	126, 449, 446, 125, 1242, -1000, -1000, -1000, -1000, 578,
	575, 1327, -1000, 1036, -1000, 488, -1000, 822, 11084, 12655,
	246, 245, 885, -1000, 1325, 1024, 1323, 1024, -1000, -20,
	760, -1000, 11084, -1000, 11084, -1000, 574, -1000, -1000, 573,
	464, 1259, 669, -1000, 952, -1000, -1000, 684, -1000, -1000,
	7241, 29592, -1000, 784, 1439, -7, -1000, -1000, -1000, 471,
	15336, 14739, 8850, -9, -1000, -1000, -1000, 933, -1000, 567,
	1665, 124, 1074, 917, 830, 753, 1659, 29592, -28, -28,
	-1000, -1000, -1000, -1000, -1000, 20962, -1000, 1221, -1000, 18012,
	241, 20962, 240, -1000, 226, -1000, -1000, 225, 20962, 1124,
	413, 17126, -1000, 463, 954, 28095, -1000, 121, 1235, 1495,
	-1000, 14739, 1188, 1185, 14739, 994, 939, 939, 939, -1000,
	223, 174, 375, 439, 4726, 11084, 18602, 943, 86, 117,
	1298, 11084, 169, 169, 11084, 11722, 11722, -1000, 169, -1000,
	-1000, -1000, -1000, -1000, 1258, 220, 11084, 29293, 3362, 2934,
	-13, -1000, 8531, -32, -1000, 11084, -1000, 27776, -1000, -1000,
	383, 1364, -1000, 11084, 28918, 116, 8212, -1000, 28881, -4,
	-4, -1000, 1720, -1000, 15634, 473, 945, 27739, 30156, 29293,
	-1000, 11084, -1000, -1000, 1256, 11084, -1000, 30156, 29293, 11722,
	11722, 11722, 11722, 11722, 11722, 11722, 11722, 11722, 11722, 11722,
	11722, 11722, 11722, 11722, 11722, 11722, 11722, 11722, 1086, 11722,
	1644, 1644, 1644, -38, 7893, -1000, 1297, 1256, 11084, 11084,
	29293, 115, 113, 111, -1000, 11084, -83, 11084, 11084, 11084,
	-1000, -1000, -1000, 110, -1000, 1652, -1000, -1000, -1000, -1000,
	1235, 20962, 20962, 20962, 1319, -1000, 1206, -1000, 27715, -15,
	-1000, 334, 1460, 11084, -1000, -1000, 219, 12655, 20962, -1000,
	1141, 1257, 524, 20962, -1000, 20962, -1000, 20962, 20962, 20962,
	-19, -21, 20962, 20962, -1000, 16533, 595, 218, -1000, -48,
	-1000, -1000, 252, 12, 784, -1000, -56, -1000, 432, -1000,
	374, 371, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	105, -1000, -1000, 1223, -1000, 12655, 217, 20962, 18012, 1543,
	12655, 970, 1142, 413, 17126, -1000, 643, -1000, -1000, -1000,
	466, 11084, 11084, 1298, 14739, 14739, 2389, 1174, 14739, -1000,
	-1000, -1000, -1000, 370, 389, 369, 12953, 439, 18602, -1000,
	1642, 1164, -23, -1000, -1000, 20962, 216, -1000, 439, 1550,
	169, 2771, 193, 11084, 29293, 29863, -27, 11084, 11084, -1000,
	-31, -1000, 11084, 368, 29592, -1000, -1000, -1000, 29592, 11084,
	1712, 11084, 96, 94, 93, -1000, -1000, -1000, 26272, 11084,
	90, -1000, 88, 85, 29592, 1297, 29592, -1000, -1000, 596,
	596, 699, 699, 699, 699, 1644, 2233, 243, 2709, 2532,
	2532, 2532, 2695, 663, 663, 2532, 2532, 2532, 1255, 1088,
	213, 29842, 11084, -33, -1000, -1000, -1000, 29592, 29592, 82,
	-1000, -1000, -1000, -83, 2734, 27396, 27359, -1000, 80, 466,
	-1000, -1000, -1000, 20962, -1000, 20962, -1000, 5658, 20962, 1251,
	1029, -1000, -1000, 1148, 212, 11722, 20962, -1000, 878, 12655,
	1438, 62, 5658, 1438, 27335, 6283, -37, -46, 1026, -1000,
	974, 11084, -1000, 29293, 1024, 1024, -1000, 569, 565, 564,
	559, -1000, -1000, -62, 16238, 1718, 1374, 20962, 1432, -1000,
	-1000, 211, -1000, -1000, -1000, 926, -47, 12655, -51, 79,
	12, -61, 20962, -1000, 413, 17126, -1000, 1367, -1000, 20962,
	29592, -83, -1000, 2389, -1000, 210, 11084, 14739, -1000, -135,
	-1000, -65, -1000, 439, -67, 18602, -1000, 366, -152, -1000,
	411, -1000, 439, 209, 20962, 18602, 11084, 11084, 29863, -69,
	-1000, 169, 169, -1000, 27016, -1000, 29592, -1000, 28881, -1000,
	-1000, -1000, 923, -1000, 26979, -1000, -1000, -1000, -1000, 11722,
	1254, 207, 29293, 26955, -1000, -1000, 11084, -1000, -1000, -1000,
	-1000, -1000, 793, -1000, -1000, 20962, 1035, -1000, -1000, 11084,
	29842, 206, 1221, 205, -1000, -1000, -1000, -1000, -1000, -1000,
	1460, 3, -1000, 828, -1000, -1000, 29592, 1453, -1000, -1000,
	20962, 20962, 204, 200, -1000, 197, 62, -71, -1000, 403,
	619, -73, 20962, -1000, -1000, 5964, 20962, 878, -75, -1000,
	1221, -1000, 878, 196, 17126, -1000, 1124, -63, -1000, 1539,
	-1000, 20962, 29592, -1000, 439, -1000, 1638, 18602, 154, -1000,
	-1000, 1164, -1000, 5043, 18602, 20962, -82, -1000, 169, 169,
	-1000, -1000, 76, 945, 1487, -1000, 29938, 11722, 29293, -87,
	-1000, 26636, -1000, -1000, 1274, 26604, 1098, 20962, -1000, 20962,
	1438, 75, 20962, 502, 5658, -1000, -1000, 11084, 11084, 11084,
	1718, -1000, -1000, 1714, 738, -1000, 471, -1000, 195, 1221,
	878, -1000, 1221, 12655, -1000, 1142, 20962, 192, -96, 18602,
	-1000, -1000, 335, -1000, -1000, 1636, -1000, -102, -1000, -1000,
	855, 11084, 29938, -104, -1000, -1000, 1311, -1000, 961, 858,
	74, -108, -1000, -1000, 140, -1000, 11084, -1000, -110, -120,
	-4, -1000, -1000, 15336, -1000, 20962, -1000, 1221, -1000, -133,
	-1000, -1000, -1000, -1000, -1000, 439, 194, -1000, 73, 10765,
	10765, -83, -1000, 20962, -1000, 968, 965, 715, -1000, -1000,
	-1000, -1000, -1000, 1098, 29592, -1000, -1000, 70, -114, -138,
	-1000, 878, 18602, -1000, -1000, -1000, -1000, 12349, 1006, 767,
	28473, -1000, -1000, -1000, 1384, -1000, 514, 1030, 1030, 961,
	1712, -1000, 966, 1221, -1000, 1614, -1000, -1000, -1000, -1000,
	-1000, -1000, 1621, -1000, -1000, 1109, -1000, -1000, -1000, -1000,
	-1000, -1000, 10446, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1980, 1978, 1480, 1692, 1977, 1966, 1681, 1962, 1960,
	1959, 1958, 1957, 1954, 121, 1631, 1595, 18, 1593, 1953,
	123, 1949, 1948, 1942, 117, 1941, 1940, 1939, 1938, 105,
	1937, 1935, 110, 1589, 1578, 1532, 1931, 1930, 113, 1929,
	1925, 23, 1924, 91, 1922, 38, 171, 2756, 149, 1917,
	1916, 1915, 37, 131, 78, 1914, 107, 1912, 1911, 64,
	41, 31, 28, 1910, 126, 136, 1536, 29, 1908, 1906,
	155, 1904, 24, 40, 93, 162, 158, 133, 144, 1903,
	1902, 1898, 1893, 57, 1891, 3, 1890, 1889, 12, 83,
	22, 1884, 17, 33, 1883, 1882, 145, 1879, 89, 127,
	1479, 138, 142, 205, 1877, 90, 14, 98, 1875, 1874,
	150, 54, 1870, 53, 100, 152, 1869, 62, 168, 84,
	30, 67, 125, 1867, 1864, 1862, 94, 1858, 128, 87,
	1857, 1852, 92, 1850, 147, 151, 1849, 1847, 120, 1846,
	140, 1845, 1841, 160, 166, 1839, 1837, 167, 1836, 1833,
	11, 61, 77, 8, 1488, 1478, 130, 71, 39, 27,
	1832, 1395, 931, 696, 43, 97, 68, 60, 104, 69,
	59, 156, 21, 1824, 1823, 132, 1820, 1819, 1818, 1817,
	1816, 101, 1815, 1812, 95, 154, 15, 5, 13, 112,
	51, 45, 108, 164, 165, 135, 1811, 116, 139, 56,
	216, 1810, 1809, 1324, 143, 1805, 1804, 1803, 1001, 763,
	691, 99, 1802, 1801, 282, 212, 1800, 1795, 75, 1792,
	137, 141, 1788, 159, 241, 178, 1787, 65, 88, 115,
	1786, 134, 58, 0, 2179, 837, 1785, 146, 96, 1784,
	1783, 1781, 1777, 20, 1, 7, 6, 10, 4, 44,
	32, 1776, 1775, 148, 25, 74, 1774, 163, 1773, 1771,
	1769, 50, 1768, 19, 1767, 16, 1758, 1757, 9, 2,
	1754, 1750, 157, 1748, 124, 1747, 1554, 1746, 161, 1742,
	1738, 1597, 42, 102,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 54, 54, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 51, 51, 56, 56, 56, 58, 58, 55,
	55, 50, 50, 5, 5, 231, 231, 232, 232, 40,
	40, 44, 44, 41, 42, 42, 43, 43, 6, 6,
	6, 7, 7, 7, 7, 7, 7, 14, 15, 15,
	15, 15, 15, 15, 15, 15, 102, 102, 101, 101,
	104, 104, 16, 16, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 199, 199, 198,
	19, 173, 173, 20, 20, 20, 20, 21, 127, 127,
	22, 22, 22, 22, 23, 28, 272, 272, 272, 276,
	276, 277, 277, 278, 278, 278, 278, 278, 278, 278,
	274, 274, 27, 27, 27, 27, 39, 31, 31, 31,
	31, 31, 31, 148, 144, 144, 146, 146, 146, 146,
	65, 143, 143, 143, 143, 145, 145, 145, 145, 149,
	149, 82, 82, 224, 223, 223, 229, 229, 229, 80,
	80, 80, 80, 80, 81, 81, 81, 222, 222, 222,
	222, 230, 230, 230, 230, 230, 230, 228, 228, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 18, 273,
	273, 275, 275, 33, 33, 34, 34, 35, 35, 35,
	35, 10, 10, 11, 11, 83, 83, 84, 84, 152,
	152, 152, 152, 85, 85, 57, 57, 57, 151, 241,
	241, 242, 242, 242, 242, 242, 242, 243, 243, 243,
	243, 243, 243, 243, 239, 239, 240, 237, 237, 238,
	238, 238, 238, 279, 279, 150, 150, 88, 88, 246,
	246, 246, 246, 244, 244, 244, 244, 244, 247, 245,
	248, 248, 248, 248, 248, 185, 185, 185, 37, 12,
	63, 63, 13, 9, 9, 131, 131, 92, 92, 190,
	190, 190, 73, 73, 52, 52, 52, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 132, 132,
	133, 133, 25, 30, 36, 36, 36, 36, 36, 281,
	281, 69, 69, 69, 69, 70, 70, 147, 147, 147,
	147, 147, 64, 8, 8, 59, 59, 60, 60, 61,
	61, 62, 62, 282, 282, 24, 24, 24, 76, 76,
	140, 140, 140, 142, 142, 141, 141, 141, 117, 117,
	117, 38, 97, 97, 106, 106, 107, 107, 196, 108,
	108, 29, 29, 47, 47, 45, 45, 45, 45, 45,
	45, 46, 46, 48, 48, 48, 48, 48, 48, 48,
	254, 254, 254, 257, 257, 253, 255, 255, 256, 256,
	280, 280, 118, 118, 118, 87, 86, 86, 90, 90,
	89, 91, 91, 189, 115, 115, 115, 115, 134, 134,
	135, 135, 136, 136, 137, 137, 137, 138, 138, 139,
	139, 114, 114, 169, 169, 49, 49, 96, 96, 98,
	98, 159, 159, 159, 160, 160, 158, 158, 158, 158,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 270,
	270, 270, 271, 271, 188, 188, 192, 192, 192, 192,
	192, 192, 186, 186, 186, 186, 187, 187, 197, 197,
	121, 121, 121, 121, 119, 119, 120, 120, 193, 193,
	193, 193, 116, 116, 194, 194, 194, 153, 153, 200,
	200, 200, 218, 218, 95, 95, 95, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 202, 202, 202, 202, 204, 204,
	204, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 217, 217, 217, 217, 217,
	205, 205, 212, 212, 213, 213, 214, 215, 206, 206,
	207, 207, 208, 209, 216, 216, 216, 216, 220, 220,
	210, 210, 210, 210, 210, 211, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	129, 129, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 163, 163, 163, 163, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 249,
	249, 249, 249, 249, 249, 249, 251, 251, 252, 252,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 258, 258, 259,
	259, 261, 261, 262, 262, 263, 264, 264, 264, 265,
	266, 266, 260, 260, 267, 267, 267, 268, 268, 269,
	269, 269, 269, 269, 175, 175, 175, 176, 176, 177,
	183, 183, 183, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 71,
	71, 71, 71, 71, 103, 103, 172, 172, 170, 170,
	170, 174, 174, 122, 122, 219, 219, 219, 219, 219,
	219, 219, 123, 123, 123, 130, 124, 124, 125, 125,
	125, 125, 125, 125, 166, 167, 126, 126, 126, 168,
	168, 178, 182, 182, 181, 180, 180, 179, 179, 156,
	156, 157, 157, 155, 154, 111, 111, 110, 110, 109,
	109, 283, 283, 184, 184, 112, 112, 113, 105, 105,
	195, 195, 195, 195, 99, 99, 78, 78, 100, 100,
	74, 74, 77, 77, 75, 75, 75, 75, 93, 93,
	94, 94, 72, 72, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 221, 221, 221, 171, 66,
	66, 66, 67, 67, 68, 68, 226, 226, 226, 227,
	227, 227, 227, 225, 225, 225, 225, 225, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 7, 6, 1, 1, 1, 3, 3,
	0, 2, 0, 2, 1, 3, 5, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	5, 3, 0, 1, 1, 1, 1, 3, 3, 0,
	2, 3, 2, 3, 6, 6, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 3, 6,
	3, 4, 1, 5, 2, 1, 1, 1, 3, 3,
	2, 3, 3, 3, 3, 1, 3, 3, 1, 2,
	2, 1, 0, 1, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 3, 4, 4, 4, 4, 2,
	4, 4, 4, 4, 4, 4, 4, 2, 3, 4,
	3, 3, 4, 4, 2, 5, 5, 6, 2, 2,
	0, 2, 0, 6, 6, 5, 5, 4, 12, 4,
	12, 7, 10, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 5,
	2, 0, 6, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 1, 3,
	3, 0, 3, 8, 11, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 6, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 2,
	0, 8, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 2, 4, 4, 4,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 2, 2, 1, 1, 2, 5,
	2, 3, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 3, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	7, 4, 6, 3, 1, 5, 6, 9, 5, 0,
	2, 3, 1, 3, 2, 0, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	6, 4, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, -39, 23, 34, 224, 66, -8, -9, -10, -11,
	-12, -13, -256, 94, 103, 125, 206, 101, 87, 119,
	227, 234, -45, -47, 243, -148, 246, 35, 255, 60,
	97, 229, 222, 223, 280, 289, 68, -254, -48, -46,
	330, 305, 311, 238, -49, 264, 297, 333, 264, 134,
	80, 300, -272, -100, 264, 80, -75, -66, 323, 4,
	-233, -235, 20, 21, 23, 33, 34, 35, 40, 44,
	47, 54, 59, 60, 61, 63, 65, 66, 67, 70,
	71, 78, 79, 81, 83, 87, 89, 93, 94, 96,
	101, 102, 103, 109, 110, 113, 115, 120, 125, 126,
	127, 128, 135, 138, 140, 133, 148, 150, 151, 154,
	153, 158, 161, 164, 166, 167, 168, 171, 169, 173,
	174, 176, 175, 181, 183, 184, 186, 189, 192, 195,
	198, 199, 200, 201, 204, 206, 208, 209, 210, 212,
	213, 215, 216, 217, 218, 219, 222, 220, 221, 223,
	224, 225, 227, 229, 230, 232, 244, 245, 256, 234,
	235, 236, 237, 240, 241, 243, 246, 248, 251, 254,
	255, 257, 260, 258, 253, 263, 265, 266, 267, 268,
	269, 276, 280, 281, 282, 283, 286, 287, 288, 289,
	291, 294, 295, 296, 301, 306, 307, 308, 309, 28,
	36, 37, 38, 39, 41, 42, 45, 46, 50, 51,
	52, 55, 82, 84, 85, 100, 104, 105, 111, 121,
	123, 129, 130, 139, 141, 142, 143, 145, 156, 170,
	180, 182, 193, 197, 203, 205, 211, 231, 239, 249,
	250, 259, 261, 271, 272, 273, 277, 278, 293, 297,
	298, -272, -74, -66, 80, 89, 138, 288, 287, 80,
	134, 264, 300, -17, 330, -29, -7, -15, -4, -24,
	-38, -14, -32, -18, -33, -34, -35, -16, 23, -225,
	4, -233, -235, -234, -236, 57, 69, 118, 137, 131,
	147, 149, 157, 159, 172, 194, 196, 228, 247, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 43, 48,
	49, 53, 56, 58, 64, 68, 72, 73, 74, 75,
	76, 77, 86, 88, 90, 91, 92, 95, 97, 99,
	106, 107, 108, 114, 116, 117, 119, 122, 124, 132,
	134, 136, 144, 146, 152, 155, 160, 162, 163, 177,
	178, 179, 185, 187, 188, 190, 191, 202, 207, 214,
	226, 238, 242, 252, 262, 264, 270, 274, 275, 279,
	284, 285, 290, 292, 299, 300, 302, 303, 304, 305,
	-66, -66, -66, 206, 22, -276, 22, -277, -278, 68,
	94, 119, 238, 138, 89, 287, -276, -70, 234, -66,
	-144, 161, 241, 54, 231, 276, -145, -143, -224, 271,
	-149, -101, 171, -66, 4, 171, 242, 80, 22, 34,
	54, 59, 81, 120, 134, 135, 64, 65, 151, 265,
	271, 276, 68, 291, 267, 102, -281, 276, 276, -281,
	-281, -69, 276, 274, -70, 4, 80, 242, 171, -280,
	264, -229, -222, -185, 9, 279, 106, 187, -228, 8,
	322, -221, -227, 5, 7, 321, 4, -233, -235, -234,
	264, 290, 300, -131, 80, 285, -46, -48, -47, -89,
	-90, 284, 144, 99, 191, -45, -47, -254, -257, 212,
	-253, -66, -257, -86, -87, 22, 91, 334, -193, -74,
	188, -113, 330, -3, -193, 129, -74, -77, 129, -74,
	-66, -193, 129, 274, 334, -100, -93, -66, -155, -154,
	332, 117, 117, 330, -110, -111, -154, -155, 117, 146,
	146, -194, -193, -66, 129, -78, 129, -77, -102, 129,
	-101, -102, 129, -199, -198, -227, 297, 264, 134, -173,
	330, -127, 330, -66, 22, 187, 334, 187, -66, -144,
	52, -144, 244, 330, -146, -64, -65, 148, 208, 274,
	315, 117, 309, -229, -82, 86, -104, 332, 54, -231,
	-228, 9, 244, 117, -273, 187, 117, 117, 117, 117,
	117, 117, 309, 148, 208, 256, 264, 300, 117, 117,
	-147, -64, -65, -147, 274, -70, -116, -193, 8, 7,
	7, -101, 129, -66, -101, 134, -66, 129, -89, -90,
	-115, -134, -135, 160, 108, 185, -118, 22, 91, -118,
	-118, 44, 331, 331, 334, -257, -94, 330, -105, -195,
	-161, 323, -163, 321, 322, 316, 177, 310, -175, -165,
	-178, 100, 231, 330, -74, -164, 335, 9, -251, -47,
	29, -176, -177, 48, -66, 7, 8, 5, 6, -72,
	-202, -171, -211, 279, 106, 179, -249, -250, 4, -233,
	-226, -203, -213, -207, -210, 145, 57, 73, 76, 74,
	77, 242, 290, 49, 28, 104, 105, 197, 203, 261,
	277, 278, 129, 180, 130, 55, 121, 156, 93, 37,
	39, 41, 42, 50, 51, 82, 84, 85, 111, 139,
	141, 142, 143, 182, 211, 249, 259, 272, 273, 298,
	-234, -214, -215, -208, -209, -216, -105, -113, 323, -74,
	330, -112, -184, -161, 86, -54, 220, -53, 21, 23,
	94, 295, 100, 253, 268, 235, 253, 268, 235, 220,
	100, 335, 220, 220, 100, -231, -75, 334, -225, 323,
	-232, -231, 257, 331, -99, -74, -111, -194, -76, -74,
	-76, 243, -66, 30, 100, -56, 334, 47, 225, 100,
	-56, 334, 100, -56, 100, 331, 334, -193, 129, -77,
	30, -172, -200, -201, -203, -212, -206, -210, -211, 40,
	46, 45, 269, 170, 239, 250, 293, 38, 186, 140,
	139, 141, 142, 143, 249, 37, 211, 111, 93, 85,
	84, 182, 42, 41, -214, -215, -208, -209, 82, 272,
	273, 145, 39, 51, 50, 298, 259, -103, -161, -272,
	-278, -272, 30, -143, -224, -103, 334, 334, 158, -81,
	164, 176, 126, -223, 86, -229, -223, 86, 71, -230,
	5, 4, -171, -185, 86, 161, -211, 332, -225, 245,
	-101, 22, -224, -275, 114, -272, -224, -224, -224, -224,
	-224, -66, 158, -224, -224, 264, 134, 264, 334, 334,
	-70, -56, 334, 330, -88, 177, -255, 305, -88, 330,
	-67, 129, -66, -255, 177, -115, -135, -134, -136, -161,
	22, -139, 110, 173, -161, -163, -46, -46, -46, -91,
	-189, -161, -253, 30, -93, -96, 334, 117, 10, 11,
	56, 33, 321, 322, 323, 324, 112, 325, 326, 319,
	320, 318, 313, 314, 315, 62, 165, 233, 13, 14,
	15, 26, 190, 159, 310, 131, 247, 316, 16, 17,
	18, 147, 36, 132, -71, 30, 4, -79, -161, -161,
	-161, -161, -161, 196, -109, -156, 328, -47, 330, -47,
	-161, -103, 7, -47, -170, 328, -179, -161, -110, 330,
	5, 330, 5, -258, 306, 114, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 205, -220, 301, -220, -220, -204, 330,
	-204, -205, 330, -204, 307, 311, 330, -96, -74, 334,
	331, 334, 274, -132, 64, 58, -151, 129, 58, -237,
	-66, 64, -238, 53, 285, 207, 116, -132, 64, -132,
	64, 64, -193, 33, -29, 117, 33, -29, 117, 274,
	-77, -66, 274, 274, -193, -197, 312, -66, -197, 334,
	117, 331, 334, -153, 303, -140, -29, 330, 86, 30,
	-140, -106, -107, -196, -108, -74, 330, -66, -66, -77,
	-78, -101, -102, -102, -17, -198, 100, -20, -29, -24,
	-38, -14, 331, 334, -95, 29, -128, 330, 308, 168,
	83, 127, 167, -129, 237, 331, 334, 274, 117, 276,
	331, -65, -64, -80, 210, 251, 221, 240, 334, -225,
	-274, -66, -74, -77, -74, -65, -64, -193, -83, -93,
	-84, -66, -152, -151, -239, -240, -237, 134, 285, 107,
	30, 100, -63, 201, 30, 187, 177, -59, 266, 100,
	-137, -221, 330, 322, -138, 231, 232, 334, -52, 31,
	90, 330, 331, -153, -195, -98, -191, 328, -193, -74,
	-47, -192, 330, -218, -200, -217, 216, 217, 215, 219,
	218, -200, -225, 271, -161, -161, -161, -161, -161, -161,
	-161, -161, -161, -161, -161, -161, -161, -161, -161, -161,
	-161, -161, -161, -161, -161, -161, 159, 131, 247, 36,
	132, -161, 274, -161, -161, -161, -161, 169, 177, 179,
	279, 106, 286, 91, 183, -283, 262, 32, -168, -47,
	330, -183, 27, 252, 22, -225, -175, 231, 330, -156,
	-161, -157, -103, 331, 331, 334, -103, -174, 329, -170,
	-182, -181, 302, 331, -103, 299, 22, 91, 323, 7,
	-128, -259, 109, 122, 330, 331, 331, -161, -161, -122,
	-219, -103, 4, 308, 168, 83, 127, 167, 237, -122,
	-123, -161, -103, -124, -162, -163, 321, 322, 316, 330,
	231, -125, -161, -103, -161, 43, 155, 275, -126, -161,
	117, -103, -161, -161, -161, -103, -103, -103, 330, 7,
	7, 271, 271, 7, -153, 331, -184, -53, -74, -66,
	-66, 177, -151, 129, -58, 177, -200, -66, 330, 330,
	150, 150, -66, -66, 129, -66, 129, -66, -66, -54,
	220, -29, 330, -29, 330, -66, 220, -66, -74, 220,
	-40, 128, 183, -43, 305, -231, 257, 117, -74, -117,
	226, -161, -117, -142, 187, -99, 297, -66, -117, -97,
	334, 117, 315, -99, -56, -56, -56, -193, -200, 328,
	328, 7, 274, 274, 274, 274, 330, -161, -274, -274,
	-64, 283, 61, 210, -229, 334, -197, 331, 331, 334,
	-67, 134, -67, -29, -101, 5, -29, -74, 100, -60,
	96, -282, 315, -66, -138, -161, -189, -20, -114, 122,
	-197, 334, 69, -121, 149, 172, 118, 157, 228, 137,
	7, 103, -32, -158, 335, 330, -188, 311, -47, -192,
	-191, 309, -161, -161, 274, -283, 262, -168, -161, 169,
	179, 279, 106, 286, 91, 183, 117, 330, -162, -162,
	-103, -165, 330, -103, 329, 338, 331, -161, 329, 329,
	334, -180, -181, 95, -161, -90, 334, -89, -161, -103,
	-103, 331, 331, -264, 195, 330, 330, -161, 30, 334,
	331, 117, 331, 331, -130, 202, 331, 10, 11, 321,
	322, 323, 324, 112, 325, 326, 319, 320, 318, 313,
	314, 315, 62, 165, 233, 13, 14, 15, 147, 132,
	-162, -162, -162, -103, 330, 331, -166, -167, 117, 114,
	30, -126, -126, -126, 331, 117, -103, 334, 334, 334,
	331, 331, 331, 7, 331, 334, 331, 309, 309, 331,
	-114, 274, 274, 100, 177, 294, -241, -238, -161, -92,
	-190, -66, -252, 330, -249, -250, -72, 330, 330, -51,
	94, 243, -133, 100, -56, 100, -56, 274, -132, 64,
	-103, -103, 274, 274, -43, 117, 263, 189, 257, -105,
	178, -117, 63, 331, -153, -107, -98, -184, 331, 329,
	7, 7, 331, 168, 127, 167, -129, 167, -129, -129,
	7, -66, -85, 133, -152, 330, -67, 330, 330, -88,
	330, -66, -61, 154, -282, -228, -255, 188, 331, 331,
	-169, 124, 44, -191, 149, 149, -191, -121, 149, -119,
	194, -119, -119, -270, 330, -17, 330, 329, -188, -225,
	328, 336, -103, -187, -186, 30, -66, 192, 331, -161,
	-161, -162, -162, 117, 330, -161, -172, 26, 26, 331,
	-103, 331, 334, -157, -161, 331, -170, 97, -161, 270,
	331, 299, -90, -90, -90, 5, -265, -66, 330, 303,
	-89, 331, -218, -200, -161, -166, -161, -218, -200, -162,
	-162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
	-162, -162, -162, -162, -162, -162, -162, -162, 91, 177,
	183, -162, 334, -103, 331, -167, -166, -161, -161, -200,
	331, 331, 331, -103, -161, -161, -161, 331, 7, -169,
	-66, -66, -151, 100, -242, 64, -243, 56, 107, 68,
	177, 179, 285, 207, 53, 86, 214, 331, 331, 334,
	-73, -110, 56, -73, -161, 330, -92, -93, 177, 86,
	177, 86, 79, 281, -66, -66, -74, -66, -66, 331,
	331, -66, -74, -232, 271, 330, -141, 330, 187, -29,
	-117, 315, 329, 329, 331, 132, -92, 330, -93, -83,
	30, -92, 187, -62, 153, -282, -228, -59, -261, 304,
	-161, -103, -191, -191, -120, 292, 187, 149, -191, 329,
	331, -271, 7, 329, -199, -188, -187, 7, -160, -159,
	115, 175, 331, -66, 330, -188, 26, 26, -161, -172,
	331, -161, -161, 331, -161, 329, -161, 5, -161, 331,
	331, 331, -266, -66, -161, 331, 331, 331, -167, 117,
	91, 183, 330, -161, 331, 331, 334, 331, 331, 331,
	-261, -151, -66, -225, -66, 107, 129, 179, 150, 330,
	-162, -74, -150, -279, 67, 260, -190, -52, -225, -52,
	331, -103, 331, 331, 179, 179, -161, -200, -56, -56,
	274, 274, 274, 274, -164, -72, -66, -42, -41, 5,
	92, -93, 64, -113, -47, 330, 198, 331, -92, 331,
	331, -29, 331, -74, -282, -228, -60, -262, -263, -66,
	-120, 330, -161, -191, -158, 331, 334, -188, 331, -187,
	329, 334, 337, 315, -188, 330, -93, -186, -161, -161,
	331, 331, -90, -260, 200, 331, -162, 117, 330, -172,
	331, -161, -243, -67, 177, -161, -68, 330, -85, 330,
	-73, -90, 214, -55, 56, -66, -66, 330, 330, 330,
	334, 331, -44, 315, 287, 178, 331, -66, -66, -150,
	331, -85, -150, 330, -228, -61, 334, 30, -93, -188,
	7, -187, -17, -159, -225, 328, -187, -93, 331, 331,
	-90, 44, -162, -172, 331, 331, 100, 331, -246, 166,
	-66, -93, -52, 331, -74, -50, 292, -225, -103, -103,
	-103, -41, 5, 243, -153, 330, -85, -150, -85, -92,
	-62, -263, -265, 331, -186, 329, 7, 331, -267, 209,
	232, -103, 331, 107, -244, -247, -245, 187, 118, 199,
	248, 331, 331, -88, -161, 331, 331, -90, -106, -93,
	-85, 331, -188, 329, 331, -268, -269, 36, 282, 71,
	-161, -268, -66, -245, 187, -247, 187, 287, 89, -246,
	331, -153, 331, -150, -187, -269, 204, 113, 231, 204,
	113, -248, 174, 225, 47, 243, -248, -244, -57, 47,
	225, -85, 26, 20, 179, 86, -269,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 0, 0, 0, 0, 81, 82, 83, 84,
	85, 86, 0, 0, 439, 0, 0, 0, 0, 0,
	0, 0, 411, -2, 0, 162, 0, 360, 0, 360,
	360, 364, 0, 0, 441, 0, 326, 438, -2, 449,
	0, 0, 0, 447, 425, 0, 0, -2, 0, 0,
	0, 0, 0, 136, 0, 979, 908, 914, 915, 939,
	940, 941, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 0, 0, 910, 979, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 0, 238,
	953, 954, 955, 956, 957, 1148, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
	1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
	122, 129, 130, 1032, 132, 0, 139, 140, 141, 143,
	144, 145, 146, 147, 148, 149, 0, 353, 1056, 366,
	157, 1009, 1061, 967, 1134, 1078, 165, 175, 0, 1140,
	178, 183, -2, 98, 209, 210, 211, 212, 213, 0,
	0, 0, 219, 240, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 234, 0, 0, 371, 359, 371, 356,
	357, 358, 361, 0, 352, 152, 153, 154, 155, 0,
	440, 156, 186, 187, 188, 197, 198, 199, 200, 315,
	0, 317, 207, 208, 935, 0, 949, 950, 951, 952,
	0, 0, 0, 0, 0, 325, -2, 421, 422, -2,
	0, 444, 444, 444, 0, 0, 422, 0, 430, 1036,
	433, 921, 431, 0, 0, 446, 445, 0, 426, 528,
	0, 475, 0, 2, 0, 1118, 528, 0, 1118, 913,
	0, 0, 1118, 0, 0, 137, 138, 918, 916, 917,
	0, 0, 0, 0, 911, 887, 885, 886, 0, 0,
	0, 0, 534, 88, 1118, 56, 1118, 906, 56, 1118,
	96, 56, 1118, 0, 117, 119, 1146, 0, 0, 0,
	0, 127, 0, 131, 133, 0, 0, 0, 365, 158,
	1107, 160, 0, 0, 164, 166, 167, 0, 0, 0,
	0, 0, 0, 179, 180, 181, 99, 0, 0, 214,
	65, 66, 0, 0, 242, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 230, 231, 0, 0, 0, 0,
	354, 367, 368, 355, 0, 363, 56, 532, 316, 937,
	936, 298, 1118, 437, 298, 943, 437, 1118, -2, 0,
	417, 456, 457, 0, 0, 0, 0, 442, 443, 0,
	0, 0, 413, 414, 0, 432, 0, 0, 478, 898,
	902, 903, 632, 0, 0, 0, 0, 0, 0, 724,
	726, 1112, 1134, 0, 728, 729, 0, 731, 733, 734,
	0, 737, 738, 878, 910, 924, 925, 926, 927, 0,
	0, 930, 0, 932, 933, 934, 778, 747, -2, -2,
	922, 564, 565, 566, 567, -2, 1148, 751, 753, 755,
	756, 757, 758, 0, 1096, 1113, 1114, 1130, 1131, 1139,
	1143, 1144, 1118, 1127, 1119, 1108, 1116, 1125, 984, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	948, 594, 595, 600, 601, 603, 478, 476, 529, 530,
	0, 0, 895, 893, 894, 33, 349, 35, 0, 349,
	349, 0, 0, 0, 0, 247, 0, 0, 249, 0,
	0, 0, 0, 0, 0, 519, 909, 0, 883, 884,
	519, 67, 78, 0, 0, 904, 888, 538, 0, 388,
	0, 0, 535, 0, 0, 90, 0, 54, 55, 0,
	92, 0, 0, 94, 0, 439, 0, 0, 1118, 0,
	439, 0, 836, 546, 547, 548, 549, 550, 629, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	571, 572, 573, 574, 575, 576, 577, 591, 0, 570,
	570, 570, 583, 584, 592, 593, 598, 599, 610, 611,
	613, 615, 609, 609, 609, 606, 607, 0, 834, 0,
	142, 0, 0, 161, 0, 0, 0, 0, 0, 170,
	194, 195, 196, 171, 173, 184, 172, 174, 176, 177,
	201, 202, 203, 204, 205, 206, 0, 0, 100, 217,
	215, 216, 218, 220, 0, 239, 221, 222, 223, 224,
	225, 226, 229, 232, 233, 0, 0, 0, 0, 0,
	362, 318, 0, 256, 0, 0, 321, 436, 0, 0,
	0, 1118, 942, 376, 0, 420, 454, 455, 458, 462,
	463, 466, 469, 470, 460, 632, 427, 428, 429, 450,
	451, 336, 434, 0, 0, 538, 0, 0, 0, 0,
	0, 0, 813, 814, 815, 816, 817, 818, 821, 822,
	819, 820, 823, 824, 825, 0, 0, 0, 826, 827,
	828, 0, 0, 830, 0, 832, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 901, 829, 637, 638,
	639, 661, 662, 0, 725, 889, 882, 727, 0, -2,
	834, 0, 730, 735, 736, 0, 0, 877, -2, 0,
	929, 0, 629, 780, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 857, 863, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 597, 608, 605, 604, 581, 0,
	580, 578, 0, 582, 0, 0, 0, 538, 0, 0,
	897, 0, 0, 0, 0, 348, 37, 1118, 0, 58,
	0, 0, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 246, 0, 0,
	0, 912, 0, 0, 0, 70, 0, 919, 77, 0,
	0, 0, 0, 400, 0, 400, 390, 0, 0, 0,
	400, 403, 404, 406, 407, 0, 0, 536, 89, 907,
	56, 97, 56, 56, 103, 118, 0, 120, 123, 124,
	125, 126, 121, 0, 539, 541, 551, 0, 616, 617,
	618, 619, 620, 621, 630, 128, 0, 0, 0, 0,
	163, 168, 169, 372, 0, 191, 0, 193, 0, 101,
	241, 150, 235, 236, 519, 369, 370, 533, 0, 0,
	255, 918, 257, 259, 260, 261, 262, 943, 0, 943,
	0, 0, 319, 0, 0, 0, 0, 378, 384, 0,
	0, 464, 0, 0, 461, 467, 468, 0, 453, 334,
	335, 439, 920, 472, 899, 519, 479, 0, 489, 528,
	505, 494, 0, 633, 542, 543, 585, 586, 587, 588,
	589, 634, 635, 0, 640, 641, 642, 643, 644, 645,
	646, 647, 648, 649, -2, -2, -2, 653, 654, 655,
	-2, -2, -2, 659, 660, -2, 831, 833, 0, 892,
	0, -2, 0, -2, -2, -2, -2, 673, 0, 675,
	678, 680, 682, 0, 0, 0, 0, 891, 692, 869,
	0, 0, 810, 811, 812, 900, 677, 0, 0, 890,
	881, 0, 0, -2, 732, 0, 0, 0, 840, 841,
	876, 872, 0, 739, 449, 0, 0, 0, 0, 0,
	938, 788, 0, 0, 0, 752, 754, 0, 0, 0,
	0, 844, -2, -2, -2, -2, -2, -2, -2, 0,
	0, 834, 854, 0, 0, 695, 0, 0, 0, 0,
	1134, 0, 834, 862, 0, 0, 0, 0, 0, 834,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 472, 531, 896, 36, 338, 0,
	0, 0, 39, 1118, 47, 0, 270, 0, 0, 0,
	0, 0, 351, 48, 1118, 56, 1118, 56, 49, 34,
	349, 243, 0, 244, 0, 342, 0, 337, 340, 0,
	77, 0, 0, 64, 0, 68, 79, 0, 905, 87,
	0, 537, 385, 400, 0, 0, 392, 389, 387, 538,
	0, 0, 0, 0, 91, 93, 95, 0, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 134, 135,
	159, 189, 190, 192, 185, 0, 237, 264, 297, 0,
	0, 943, 0, 253, 298, 320, 322, 0, 0, 380,
	384, 0, 383, 437, 0, 0, 452, 0, 474, 0,
	477, 0, 0, 0, 0, 0, 525, 525, 525, 523,
	499, 439, 0, 505, 0, 0, 517, 0, -2, 494,
	0, 0, -2, -2, 0, 0, 0, 693, -2, 674,
	676, 679, 681, 683, 0, 0, 0, 0, 0, 0,
	0, 694, 0, 0, 879, 882, -2, 835, 838, 839,
	0, 0, 873, 0, 0, 0, 0, 448, 449, 449,
	449, 745, 0, 746, 0, 0, 0, 0, 0, 0,
	761, 0, 762, 763, 0, 0, 764, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	698, 699, 700, 0, 0, 765, 860, 861, 0, 0,
	0, 0, 0, 0, 770, 0, 867, 0, 0, 0,
	774, 775, 776, 0, 568, 0, 590, 612, 614, 602,
	474, 0, 0, 0, 0, 57, 268, 287, 0, 0,
	327, 333, 333, 0, 748, 749, 0, 0, 0, 41,
	0, 0, 0, 0, 45, 0, 51, 0, 0, 0,
	0, 0, 0, 0, 63, 0, 0, 0, 80, 398,
	399, 386, 397, 0, 400, 405, 402, 408, 0, 544,
	0, 0, 552, 622, 623, 624, 625, 626, 627, 628,
	0, 151, 251, 0, 258, 0, 0, 0, 256, 0,
	0, 0, 382, 384, 0, 375, 376, 459, 465, 435,
	782, 0, 0, 480, 0, 0, 0, 0, 0, 520,
	524, 521, 522, 0, 0, 0, 0, 505, 517, 486,
	0, 0, 0, 493, 516, 0, 515, 504, -2, 636,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 870,
	0, 805, 0, 0, 881, -2, 842, 871, 875, 0,
	740, 0, 0, 0, 0, 931, 786, 787, 791, 0,
	0, 750, 0, 0, 843, 853, 855, 696, 697, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, -2,
	-2, -2, 714, 715, 716, -2, -2, -2, 0, 0,
	0, 856, 0, 0, 808, 858, 859, 864, 865, 0,
	767, 768, 769, 866, 0, 0, 0, 596, 0, 782,
	344, 346, 38, 0, 269, 0, 272, 0, 0, 0,
	0, 278, 279, 0, 0, 0, 0, 289, 296, 0,
	336, 923, 0, 336, 0, 0, 0, 0, 0, 53,
	0, 0, 350, 0, 56, 56, 339, 0, 0, 0,
	0, 343, 341, 69, 0, 0, 0, 0, 0, 391,
	401, 0, 545, 540, 631, 0, 0, 0, 0, 0,
	0, 0, 0, 373, 384, 0, 377, 378, 423, 0,
	473, 471, 507, 0, 509, 0, 0, 0, 511, 489,
	500, 0, 502, 505, 0, 517, 491, 0, 0, 484,
	0, 483, 505, 513, 0, 0, 0, 0, -2, 0,
	686, -2, -2, 804, 835, 880, 874, 928, 449, 741,
	743, 744, 793, 790, 0, 777, 759, 760, 852, 0,
	0, 0, 0, 835, 807, 766, 0, 772, 773, 569,
	424, 40, 0, 273, 274, 943, 0, 277, 280, 0,
	282, 945, 264, 0, 293, 294, 328, 329, 332, 330,
	333, 449, 291, 0, 42, 43, 52, 60, 44, 50,
	0, 0, 0, 0, 518, 0, 0, 0, 74, 72,
	0, 0, 0, 409, 410, 0, 0, 296, 0, 286,
	264, 254, 296, 0, 0, 379, 380, 781, 783, 0,
	508, 0, 527, 510, 505, 501, 0, 517, 439, 498,
	487, 0, 488, 0, 517, 0, 0, 495, -2, -2,
	687, 806, 0, 449, 0, 779, -2, 0, 0, 0,
	809, 0, 271, 275, 0, 0, 302, 0, 290, 0,
	336, 0, 0, 62, 0, 345, 347, 0, 0, 0,
	0, 76, 73, 0, 0, 394, 538, 396, 0, 264,
	296, 252, 264, 0, 381, 382, 0, 0, 0, 0,
	503, 496, 0, 485, 481, 0, 492, 0, 514, 742,
	796, 0, -2, 0, 722, 771, 0, 281, 307, 0,
	0, 0, 331, 740, 298, 46, 0, 59, 0, 0,
	449, 75, 71, 0, 395, 0, 284, 264, 323, 0,
	374, 784, 785, 526, 490, 505, 0, 512, 0, 0,
	0, 792, 723, 0, 283, 303, 304, 0, 299, 300,
	301, 944, 295, 302, 61, 248, 250, 0, 538, 0,
	285, 296, 517, 482, 789, 794, 797, -2, 1081, 976,
	0, 795, 276, 305, 0, 306, 0, 0, 0, 307,
	0, 393, 267, 264, 497, 0, 799, 800, 801, 802,
	803, 308, 0, 311, 312, 0, 309, 292, 263, 265,
	266, 324, 0, 310, 313, 314, 798,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 319, 3, 325, 320, 3,
	330, 331, 323, 321, 334, 322, 332, 324, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 338, 333,
	313, 315, 314, 3, 335, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 328, 3, 329, 326, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 336, 318, 337, 316,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 317, 57656, 327, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:779
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:785
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:791
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:842
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:859
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:888
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:911
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:921
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:924
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = nil
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = DropCascade
		}
	case 55:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = DropRestrict
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = DropDefault
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:983
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:984
		{
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			return unimplemented(sqllex, "alter using")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:988
		{
		}
	case 63:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 67:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 70:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 72:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.str = ""
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 76:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1061
		{
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1193
		{ /* SKIP DOC */
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1318
		{
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1380
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1388
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1395
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			return unimplemented(sqllex, "set local")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{ /* SKIP DOC */
		}
	case 163:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1484
		{
			return unimplemented(sqllex, "set from current")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1502
		{
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = Low
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = Normal
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = High
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1624
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1628
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1692
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1696
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1700
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1704
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1720
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1724
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1728
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1740
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1771
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1775
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1781
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1785
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1789
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1793
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1864
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1868
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = DropDefault
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1878
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2083
		{
			return unimplemented(sqllex, "match full")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2084
		{
			return unimplemented(sqllex, "match partial")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2085
		{
			return unimplemented(sqllex, "match simple")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2086
		{
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2093
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2096
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2099
		{
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2102
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return unimplemented(sqllex, "no action")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2108
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2109
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return unimplemented(sqllex, "action set null")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return unimplemented(sqllex, "action set default")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2143
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = true
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = false
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2219
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2222
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2223
		{
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = Ascending
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = Descending
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2277
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2278
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = true
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = false
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2291
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2292
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2325
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2334
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2335
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.str = ""
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.str = ""
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.str = ""
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.str = ""
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.str = ""
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.str = ""
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2457
		{
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2458
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2522
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2526
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2534
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 401:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2556
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2557
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2786
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2789
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2790
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2793
		{
			return unimplemented(sqllex, "cte")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2796
		{
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2797
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2800
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2801
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2804
		{
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2805
		{
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = true
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = false
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = false
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = true
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2828
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2829
		{
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2867
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2887
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2939
		{
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2940
		{
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2944
		{
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2998
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &From{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3034
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3052
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3079
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3096
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = nil
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3163
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3169
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = true
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = false
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.str = astFullJoin
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.str = astLeftJoin
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.str = astRightJoin
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.str = astInnerJoin
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3280
		{
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3281
		{
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3367
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3380
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3381
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3395
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3404
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3467
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3476
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = nil
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3525
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3621
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3653
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3692
		{
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3693
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = year
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = month
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = day
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = hour
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = minute
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = month
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = hour
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = minute
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = minute
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = nil
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = second
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3788
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3823
		{
			return unimplemented(sqllex, "at tz")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3991
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4057
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4230
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4283
		{
			return unimplemented(sqllex, "variadic")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4284
		{
			return unimplemented(sqllex, "variadic")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4307
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4323
		{
			return unimplemented(sqllex, "func_application")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4324
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4328
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4345
		{
			return unimplemented(sqllex, "current role")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4346
		{
			return unimplemented(sqllex, "current user")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			return unimplemented(sqllex, "session user")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4348
		{
			return unimplemented(sqllex, "user")
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4377
		{
			return unimplemented(sqllex, "treat")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4421
		{
			return unimplemented(sqllex, "within group")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4422
		{
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = Window(nil)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4457
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.str = ""
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4519
		{
			return unimplemented(sqllex, "frame range")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4520
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4521
		{
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4524
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4525
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4531
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4532
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4533
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4534
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4535
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 804:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = Any
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = Some
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4584
		{
			sqlVAL.union.val = All
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = Plus
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = Minus
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = Mult
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = Div
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = FloorDiv
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = Mod
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = Bitand
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = Bitor
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = Pow
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = Bitxor
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = LT
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = GT
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = EQ
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = LE
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = GE
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = NE
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = Like
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = NotLike
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = ILike
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = NotILike
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4899
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4900
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5018
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5062
		{
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5098
		{
			return unimplemented(sqllex, "func const")
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5107
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5109
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = DNull
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5134
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.str = ""
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
