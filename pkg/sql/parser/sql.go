// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT2VECTOR = 57480
const INT8 = 57481
const INT64 = 57482
const INTEGER = 57483
const INTERSECT = 57484
const INTERVAL = 57485
const INTO = 57486
const IS = 57487
const ISOLATION = 57488
const JOIN = 57489
const KEY = 57490
const KEYS = 57491
const LATERAL = 57492
const LC_CTYPE = 57493
const LC_COLLATE = 57494
const LEADING = 57495
const LEAST = 57496
const LEFT = 57497
const LEVEL = 57498
const LIKE = 57499
const LIMIT = 57500
const LOCAL = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const LOW = 57504
const LSHIFT = 57505
const MATCH = 57506
const MINUTE = 57507
const MONTH = 57508
const NAN = 57509
const NAME = 57510
const NAMES = 57511
const NATURAL = 57512
const NEXT = 57513
const NO = 57514
const NO_INDEX_JOIN = 57515
const NORMAL = 57516
const NOT = 57517
const NOTHING = 57518
const NULL = 57519
const NULLIF = 57520
const NULLS = 57521
const NUMERIC = 57522
const OF = 57523
const OFF = 57524
const OFFSET = 57525
const OID = 57526
const ON = 57527
const ONLY = 57528
const OPTIONS = 57529
const OR = 57530
const ORDER = 57531
const ORDINALITY = 57532
const OUT = 57533
const OUTER = 57534
const OVER = 57535
const OVERLAPS = 57536
const OVERLAY = 57537
const PARENT = 57538
const PARTIAL = 57539
const PARTITION = 57540
const PASSWORD = 57541
const PLACING = 57542
const POSITION = 57543
const PRECEDING = 57544
const PRECISION = 57545
const PREPARE = 57546
const PRIMARY = 57547
const PRIORITY = 57548
const RANGE = 57549
const READ = 57550
const REAL = 57551
const RECURSIVE = 57552
const REF = 57553
const REFERENCES = 57554
const REGCLASS = 57555
const REGPROC = 57556
const REGPROCEDURE = 57557
const REGNAMESPACE = 57558
const REGTYPE = 57559
const RENAME = 57560
const REPEATABLE = 57561
const RELEASE = 57562
const RESTORE = 57563
const RESTRICT = 57564
const RETURNING = 57565
const REVOKE = 57566
const RIGHT = 57567
const ROLLBACK = 57568
const ROLLUP = 57569
const ROW = 57570
const ROWS = 57571
const RSHIFT = 57572
const STATUS = 57573
const SAVEPOINT = 57574
const SEARCH = 57575
const SECOND = 57576
const SELECT = 57577
const SERIAL = 57578
const SERIALIZABLE = 57579
const SESSION = 57580
const SESSION_USER = 57581
const SET = 57582
const SHOW = 57583
const SIMILAR = 57584
const SIMPLE = 57585
const SMALLINT = 57586
const SMALLSERIAL = 57587
const SNAPSHOT = 57588
const SOME = 57589
const SPLIT = 57590
const SQL = 57591
const START = 57592
const STDIN = 57593
const STRICT = 57594
const STRING = 57595
const STORING = 57596
const SUBSTRING = 57597
const SYMMETRIC = 57598
const SYSTEM = 57599
const TABLE = 57600
const TABLES = 57601
const TEMPLATE = 57602
const TESTING_RANGES = 57603
const TEXT = 57604
const THEN = 57605
const TIME = 57606
const TIMESTAMP = 57607
const TIMESTAMPTZ = 57608
const TO = 57609
const TRAILING = 57610
const TRANSACTION = 57611
const TREAT = 57612
const TRIM = 57613
const TRUE = 57614
const TRUNCATE = 57615
const TYPE = 57616
const UNBOUNDED = 57617
const UNCOMMITTED = 57618
const UNION = 57619
const UNIQUE = 57620
const UNKNOWN = 57621
const UPDATE = 57622
const UPSERT = 57623
const USER = 57624
const USERS = 57625
const USING = 57626
const VALID = 57627
const VALIDATE = 57628
const VALUE = 57629
const VALUES = 57630
const VARCHAR = 57631
const VARIADIC = 57632
const VIEW = 57633
const VARYING = 57634
const WHEN = 57635
const WHERE = 57636
const WINDOW = 57637
const WITH = 57638
const WITHIN = 57639
const WITHOUT = 57640
const YEAR = 57641
const ZONE = 57642
const NOT_LA = 57643
const WITH_LA = 57644
const AS_LA = 57645
const POSTFIXOP = 57646
const UMINUS = 57647

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5411

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	324, 28,
	-2, 415,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	98, 398,
	142, 398,
	158, 398,
	183, 398,
	189, 398,
	277, 398,
	-2, 388,
	-1, 62,
	98, 397,
	142, 397,
	158, 397,
	183, 397,
	189, 397,
	277, 397,
	-2, 391,
	-1, 71,
	1, 28,
	324, 28,
	-2, 415,
	-1, 422,
	1, 193,
	324, 193,
	-2, 980,
	-1, 459,
	158, 425,
	183, 425,
	-2, 394,
	-1, 462,
	158, 424,
	183, 424,
	-2, 392,
	-1, 595,
	158, 424,
	183, 424,
	-2, 395,
	-1, 654,
	321, 914,
	-2, 907,
	-1, 655,
	321, 915,
	-2, 908,
	-1, 661,
	5, 583,
	321, 583,
	-2, 1084,
	-1, 685,
	5, 544,
	-2, 1058,
	-1, 686,
	5, 577,
	321, 577,
	-2, 1060,
	-1, 687,
	5, 552,
	-2, 1061,
	-1, 688,
	5, 551,
	-2, 1062,
	-1, 689,
	5, 577,
	321, 577,
	-2, 1065,
	-1, 690,
	5, 577,
	321, 577,
	-2, 1066,
	-1, 691,
	5, 578,
	-2, 1069,
	-1, 692,
	5, 538,
	-2, 1070,
	-1, 693,
	5, 538,
	-2, 1071,
	-1, 694,
	5, 559,
	-2, 1075,
	-1, 695,
	5, 539,
	-2, 1080,
	-1, 696,
	5, 540,
	-2, 1081,
	-1, 697,
	5, 541,
	-2, 1082,
	-1, 698,
	5, 542,
	-2, 1083,
	-1, 699,
	5, 538,
	-2, 1088,
	-1, 700,
	5, 545,
	-2, 1093,
	-1, 701,
	5, 543,
	-2, 1096,
	-1, 702,
	5, 575,
	321, 575,
	-2, 1098,
	-1, 703,
	5, 579,
	-2, 1101,
	-1, 704,
	5, 581,
	-2, 1102,
	-1, 705,
	5, 574,
	321, 574,
	-2, 1106,
	-1, 967,
	98, 398,
	142, 398,
	158, 398,
	183, 398,
	189, 398,
	277, 398,
	-2, 702,
	-1, 976,
	321, 891,
	-2, 879,
	-1, 1186,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 618,
	-1, 1187,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 619,
	-1, 1188,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 620,
	-1, 1192,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 624,
	-1, 1193,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 625,
	-1, 1194,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 626,
	-1, 1197,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 631,
	-1, 1203,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 633,
	-1, 1206,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 638,
	-1, 1207,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 639,
	-1, 1208,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 640,
	-1, 1235,
	194, 773,
	-2, 776,
	-1, 1264,
	115, 813,
	321, 914,
	-2, 907,
	-1, 1265,
	115, 814,
	-2, 1054,
	-1, 1266,
	115, 815,
	-2, 979,
	-1, 1267,
	115, 816,
	-2, 948,
	-1, 1268,
	115, 817,
	-2, 963,
	-1, 1269,
	115, 818,
	-2, 978,
	-1, 1270,
	115, 819,
	-2, 1021,
	-1, 1424,
	98, 398,
	142, 398,
	158, 398,
	183, 398,
	189, 398,
	277, 398,
	-2, 474,
	-1, 1428,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 632,
	-1, 1429,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 634,
	-1, 1434,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 635,
	-1, 1452,
	194, 772,
	-2, 775,
	-1, 1640,
	1, 475,
	68, 475,
	98, 475,
	116, 475,
	120, 475,
	122, 475,
	135, 475,
	142, 475,
	147, 475,
	155, 475,
	158, 475,
	170, 475,
	183, 475,
	185, 475,
	189, 475,
	223, 475,
	225, 475,
	277, 475,
	284, 475,
	294, 475,
	295, 475,
	303, 475,
	320, 475,
	322, 475,
	324, 475,
	325, 475,
	-2, 474,
	-1, 1642,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 636,
	-1, 1647,
	145, 0,
	-2, 652,
	-1, 1657,
	194, 774,
	-2, 777,
	-1, 1691,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 679,
	-1, 1692,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 680,
	-1, 1693,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 681,
	-1, 1697,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 685,
	-1, 1698,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 686,
	-1, 1699,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 687,
	-1, 1818,
	145, 0,
	-2, 653,
	-1, 1821,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 656,
	-1, 1822,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 658,
	-1, 1925,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 657,
	-1, 1926,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 659,
	-1, 1933,
	145, 0,
	-2, 688,
	-1, 1987,
	145, 0,
	-2, 689,
	-1, 2048,
	36, 0,
	129, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 1057,
}

const sqlPrivate = 57344

const sqlLast = 27873

var sqlAct = [...]int{

	655, 2047, 2027, 1057, 2072, 1993, 2028, 1422, 2029, 1597,
	1635, 2046, 1293, 1862, 1668, 1065, 1728, 463, 1636, 653,
	1906, 1150, 1886, 1125, 1809, 1784, 652, 891, 885, 1607,
	84, 84, 84, 423, 1545, 48, 1742, 777, 278, 738,
	1158, 1419, 294, 84, 84, 84, 1795, 1398, 84, 470,
	61, 84, 484, 631, 645, 1546, 740, 1129, 1400, 84,
	1789, 526, 1349, 1513, 1124, 1613, 84, 84, 1143, 746,
	84, 1463, 761, 84, 84, 84, 84, 292, 1512, 84,
	84, 1233, 1410, 508, 972, 614, 1622, 718, 280, 20,
	61, 1128, 721, 887, 1157, 1030, 1343, 1165, 1066, 778,
	468, 1405, 625, 499, 1290, 1021, 1243, 1220, 1163, 1217,
	908, 1097, 1049, 285, 27, 284, 16, 1117, 838, 581,
	750, 61, 1081, 286, 8, 747, 85, 1261, 723, 1090,
	963, 1160, 624, 527, 615, 462, 1006, 1002, 518, 520,
	582, 521, 913, 473, 1059, 1132, 62, 598, 1743, 599,
	410, 76, 840, 597, 647, 836, 401, 754, 514, 80,
	20, 648, 471, 580, 1918, 1451, 602, 1919, 295, 63,
	467, 763, 413, 763, 2063, 1094, 467, 743, 1361, 1058,
	2042, 763, 266, 1741, 1050, 27, 2035, 16, 2025, 743,
	2020, 1087, 291, 743, 2016, 8, 1989, 743, 915, 1087,
	1983, 481, 1965, 743, 487, 1741, 1408, 494, 460, 450,
	1360, 1961, 1420, 490, 743, 420, 1956, 1062, 1095, 1955,
	916, 917, 1927, 1916, 1913, 1087, 772, 1914, 67, 475,
	1900, 459, 1897, 1741, 1895, 743, 60, 1741, 1873, 1872,
	733, 743, 1741, 919, 1844, 1823, 1820, 1100, 1100, 1087,
	1812, 69, 1740, 1100, 1651, 1741, 1100, 1100, 1096, 1093,
	1583, 1577, 39, 1056, 1056, 918, 1530, 1455, 1454, 1531,
	40, 933, 1456, 1100, 84, 84, 84, 84, 84, 1971,
	530, 70, 28, 1528, 1527, 1526, 1100, 1100, 1100, 65,
	914, 1053, 41, 29, 53, 66, 1408, 1050, 1452, 916,
	917, 1100, 1387, 1704, 1154, 743, 1100, 743, 1654, 1385,
	523, 523, 1462, 1104, 64, 468, 1100, 1019, 55, 1053,
	924, 1388, 919, 1237, 31, 1099, 60, 1098, 1100, 1086,
	1055, 1018, 1087, 1056, 1017, 771, 528, 1149, 772, 1112,
	610, 916, 917, 880, 918, 44, 764, 879, 764, 830,
	829, 743, 39, 497, 543, 56, 764, 480, 67, 43,
	40, 1744, 71, 503, 919, 1803, 862, 67, 563, 1423,
	2061, 2045, 2034, 934, 1998, 1984, 45, 1898, 1849, 1845,
	1837, 69, 41, 1836, 1835, 1390, 918, 1831, 1360, 609,
	69, 1830, 1092, 1829, 1775, 1719, 1714, 84, 1769, 924,
	1713, 916, 917, 1712, 67, 515, 531, 1662, 914, 1640,
	52, 70, 84, 1612, 1091, 84, 84, 507, 1587, 524,
	70, 1535, 1532, 1520, 919, 1511, 1482, 69, 65, 1479,
	1478, 1476, 1468, 1467, 66, 714, 1386, 916, 917, 1307,
	935, 924, 1421, 890, 64, 1229, 918, 1258, 980, 767,
	84, 762, 84, 1061, 84, 84, 84, 70, 84, 883,
	919, 1257, 609, 42, 973, 65, 64, 505, 608, 1670,
	2008, 66, 1968, 84, 1954, 1946, 1944, 596, 1935, 58,
	30, 1922, 918, 46, 84, 57, 1909, 588, 1893, 591,
	64, 47, 1859, 1842, 67, 916, 917, 530, 84, 50,
	52, 924, 1814, 1778, 294, 530, 1765, 84, 1747, 54,
	1483, 1484, 84, 84, 84, 1646, 84, 69, 929, 926,
	927, 928, 920, 921, 922, 923, 925, 1627, 945, 1605,
	1603, 595, 59, 713, 1768, 84, 84, 551, 1230, 1602,
	918, 1600, 1554, 84, 1585, 84, 1553, 70, 1510, 1472,
	1471, 1448, 822, 1443, 934, 65, 530, 530, 552, 1222,
	1376, 66, 828, 712, 294, 84, 1321, 84, 84, 84,
	84, 84, 84, 84, 1321, 1320, 1483, 1484, 84, 84,
	64, 744, 1300, 587, 1256, 84, 708, 546, 548, 1153,
	1007, 752, 1010, 84, 766, 845, 845, 769, 1014, 1000,
	585, 920, 921, 922, 923, 925, 999, 945, 583, 998,
	1489, 84, 997, 996, 84, 995, 994, 460, 993, 992,
	889, 935, 737, 531, 991, 990, 1483, 1484, 989, 503,
	295, 531, 605, 606, 988, 611, 987, 912, 986, 985,
	459, 863, 969, 515, 984, 922, 923, 925, 977, 945,
	966, 64, 714, 884, 485, 613, 549, 742, 1276, 882,
	539, 537, 2044, 1499, 2018, 468, 773, 1917, 1825, 1804,
	753, 756, 973, 506, 1800, 775, 1489, 1498, 1483, 1484,
	1801, 1774, 531, 531, 1773, 1370, 1369, 894, 964, 729,
	295, 916, 917, 1958, 824, 1920, 826, 557, 1401, 784,
	825, 1772, 928, 920, 921, 922, 923, 925, 1362, 945,
	1050, 858, 851, 857, 919, 1012, 1423, 84, 867, 1013,
	861, 916, 917, 1534, 1533, 84, 1489, 982, 1427, 84,
	1500, 573, 558, 84, 84, 881, 918, 84, 888, 1058,
	1344, 1790, 1671, 1244, 84, 945, 1459, 898, 897, 460,
	896, 1003, 460, 460, 910, 714, 457, 1094, 84, 707,
	84, 84, 577, 84, 979, 274, 84, 1356, 84, 84,
	2001, 84, 904, 530, 1541, 905, 906, 660, 1489, 1499,
	864, 706, 1024, 868, 869, 870, 871, 872, 2058, 976,
	1755, 924, 1382, 875, 876, 578, 2059, 1103, 443, 1960,
	1095, 1075, 523, 945, 523, 449, 1881, 448, 1031, 444,
	1078, 1493, 1485, 1486, 1487, 1488, 1490, 1880, 275, 1567,
	1566, 61, 724, 296, 725, 1538, 61, 1004, 1005, 528,
	1008, 1035, 1037, 1764, 1537, 724, 1011, 725, 1430, 1375,
	1096, 1093, 1023, 1060, 934, 1060, 1500, 1374, 1565, 555,
	270, 1373, 1372, 1483, 1484, 1015, 1204, 1584, 1101, 1052,
	1040, 1047, 74, 294, 291, 1082, 1046, 84, 1048, 1034,
	1027, 1043, 1044, 584, 496, 724, 1304, 725, 84, 84,
	1487, 1488, 1490, 1303, 84, 84, 618, 1144, 556, 1175,
	1084, 84, 1083, 452, 726, 1570, 1572, 1864, 271, 531,
	1085, 1064, 1073, 1959, 1074, 1346, 1079, 726, 60, 1098,
	1076, 935, 1077, 748, 730, 73, 84, 1155, 2006, 84,
	878, 1098, 757, 2069, 1494, 1491, 1492, 1493, 1485, 1486,
	1487, 1488, 1490, 1354, 39, 453, 1350, 1440, 1592, 1556,
	1116, 1008, 40, 1011, 276, 1244, 1219, 726, 1219, 535,
	1106, 1438, 1174, 1489, 294, 458, 1005, 1004, 1589, 454,
	1033, 1226, 1575, 1023, 41, 466, 1224, 1358, 455, 1022,
	1105, 1350, 856, 855, 1092, 849, 846, 277, 1215, 1234,
	1485, 1486, 1487, 1488, 1490, 1339, 1238, 2031, 2058, 295,
	1246, 1949, 1213, 920, 921, 922, 923, 925, 1590, 945,
	1122, 1263, 1263, 1274, 731, 1285, 1499, 1098, 1381, 465,
	2080, 1297, 1298, 1299, 1435, 1123, 1166, 1173, 1120, 1306,
	1121, 84, 84, 84, 1436, 399, 1336, 84, 1441, 945,
	84, 1227, 1332, 1032, 730, 554, 84, 84, 84, 84,
	84, 72, 273, 272, 84, 735, 877, 84, 84, 1156,
	1147, 1148, 1563, 859, 530, 1209, 467, 84, 1241, 2075,
	752, 532, 84, 1210, 84, 1211, 734, 1098, 2032, 1216,
	402, 84, 722, 1500, 75, 534, 67, 1108, 784, 784,
	295, 84, 52, 1383, 1314, 1865, 1557, 727, 1110, 1001,
	2022, 407, 2068, 1231, 1228, 402, 403, 468, 1139, 69,
	727, 1931, 84, 84, 763, 1308, 1111, 1894, 574, 961,
	1252, 816, 2023, 530, 2033, 1109, 407, 1271, 553, 1437,
	404, 403, 1352, 1470, 810, 1623, 1439, 860, 1318, 70,
	1333, 1334, 291, 1331, 84, 1413, 84, 65, 84, 406,
	727, 1639, 84, 66, 464, 404, 84, 1364, 1309, 1365,
	1366, 2030, 845, 467, 1416, 1485, 1486, 1487, 1488, 1490,
	1212, 1389, 1629, 1391, 406, 84, 1621, 1214, 575, 1571,
	1432, 1393, 1218, 1020, 1414, 2057, 60, 2055, 554, 1345,
	531, 1783, 1355, 2067, 2073, 2081, 1225, 1368, 601, 710,
	784, 1363, 1141, 576, 709, 566, 544, 1201, 630, 542,
	468, 1736, 39, 61, 1840, 1426, 1342, 1700, 2086, 1875,
	40, 600, 1367, 657, 1874, 1857, 1751, 1409, 1941, 1378,
	1379, 1540, 1317, 1380, 1313, 1392, 1142, 1318, 1810, 1395,
	267, 1384, 41, 1737, 2074, 1446, 601, 835, 405, 531,
	895, 886, 1082, 1449, 1415, 1588, 1994, 600, 874, 784,
	1754, 831, 2076, 1409, 1608, 1785, 1858, 1753, 468, 1323,
	1403, 1465, 1466, 405, 1461, 1413, 1322, 1084, 482, 1083,
	1407, 489, 492, 1425, 482, 833, 1404, 1085, 532, 764,
	850, 847, 1798, 408, 1416, 296, 532, 834, 1811, 784,
	1199, 1202, 1701, 1618, 1509, 1841, 1411, 809, 1702, 1617,
	2085, 1413, 553, 513, 1414, 1522, 1750, 512, 408, 465,
	1433, 1431, 592, 1598, 1776, 783, 1341, 468, 1198, 1412,
	1416, 1855, 1614, 1732, 1406, 1733, 1447, 1255, 1934, 1839,
	1514, 1515, 1411, 1645, 1797, 1569, 1477, 532, 532, 1442,
	1414, 1551, 1347, 1856, 67, 296, 1102, 1752, 1550, 1458,
	52, 1054, 579, 1735, 572, 1412, 571, 570, 569, 568,
	1738, 84, 84, 1579, 567, 564, 511, 69, 504, 983,
	866, 1254, 2026, 1417, 1415, 1991, 1552, 1725, 1561, 1559,
	1539, 1397, 1145, 1137, 1080, 770, 84, 768, 765, 84,
	760, 84, 1517, 1518, 1519, 736, 732, 70, 84, 728,
	1560, 530, 1562, 1200, 1659, 65, 1399, 1888, 1536, 84,
	1415, 66, 84, 2059, 853, 1543, 1890, 1151, 1601, 560,
	1039, 294, 1604, 84, 603, 478, 1734, 1630, 510, 509,
	279, 1576, 1951, 1796, 1634, 77, 1573, 1568, 1564, 1023,
	1610, 1023, 1744, 3, 1578, 1038, 640, 1036, 1986, 1616,
	1582, 1615, 1619, 607, 1042, 1041, 1581, 1628, 1609, 1580,
	1331, 1652, 398, 289, 23, 287, 22, 1418, 61, 1972,
	1781, 84, 482, 1140, 492, 1152, 81, 81, 268, 1136,
	1599, 1648, 1664, 1665, 1666, 1591, 1593, 1594, 903, 393,
	394, 395, 604, 479, 412, 1620, 1611, 424, 1631, 561,
	442, 1624, 1625, 810, 810, 412, 1063, 288, 11, 409,
	501, 502, 474, 474, 498, 486, 268, 290, 10, 268,
	268, 493, 268, 1705, 911, 81, 500, 531, 282, 9,
	827, 776, 1089, 1655, 1715, 23, 2083, 22, 84, 84,
	84, 1658, 281, 7, 1672, 283, 4, 295, 2084, 1483,
	1484, 916, 917, 2019, 532, 84, 445, 446, 1975, 1677,
	84, 1807, 84, 1720, 84, 84, 84, 84, 84, 1595,
	530, 1586, 1674, 1551, 1166, 1675, 1707, 1529, 1749, 11,
	1550, 1679, 1371, 1166, 1680, 1745, 1114, 1113, 1748, 10,
	1305, 1302, 1708, 1301, 1251, 1115, 970, 1724, 1827, 2005,
	9, 1887, 1721, 84, 84, 784, 1667, 1394, 1552, 980,
	530, 978, 451, 1863, 7, 810, 1711, 4, 84, 84,
	1551, 400, 84, 865, 565, 1551, 1779, 1550, 1792, 1802,
	530, 84, 1550, 1626, 2021, 1777, 784, 784, 84, 1763,
	1782, 1806, 1771, 1832, 296, 784, 784, 1469, 1815, 1787,
	482, 1905, 1930, 1253, 981, 1552, 38, 1548, 1793, 1794,
	1552, 1766, 1799, 634, 1726, 468, 1770, 1786, 1780, 1542,
	1131, 84, 1130, 297, 810, 854, 809, 809, 784, 656,
	1788, 839, 715, 848, 1819, 1262, 528, 1167, 711, 658,
	781, 1805, 659, 782, 783, 783, 531, 1009, 646, 779,
	1067, 1223, 1242, 1457, 974, 751, 626, 638, 637, 1239,
	482, 755, 755, 536, 810, 1808, 51, 550, 418, 419,
	268, 516, 268, 424, 424, 1353, 84, 812, 84, 1767,
	84, 84, 811, 489, 492, 296, 531, 1146, 899, 84,
	1558, 1838, 456, 1480, 538, 84, 1283, 1275, 1272, 586,
	717, 780, 962, 1068, 562, 1359, 531, 1088, 612, 907,
	1871, 1551, 477, 1853, 1867, 476, 1126, 1869, 1550, 84,
	559, 832, 1107, 955, 952, 447, 1943, 1138, 1868, 1316,
	2079, 1950, 1850, 1851, 84, 1555, 2000, 530, 809, 68,
	1957, 84, 1889, 1885, 1340, 26, 1552, 1866, 1551, 84,
	24, 21, 19, 18, 17, 1550, 783, 25, 784, 15,
	14, 13, 1915, 1896, 12, 84, 84, 37, 1882, 1883,
	1921, 36, 35, 34, 33, 1891, 1903, 752, 32, 1878,
	1879, 6, 5, 1552, 1924, 532, 1904, 2, 1923, 1911,
	1, 1908, 1912, 540, 1902, 0, 1929, 809, 0, 0,
	0, 0, 0, 0, 0, 1877, 84, 0, 545, 0,
	0, 424, 424, 0, 0, 783, 0, 0, 0, 1939,
	1899, 0, 1945, 0, 0, 0, 1444, 1445, 1277, 0,
	1936, 84, 84, 1940, 0, 0, 0, 809, 0, 1948,
	0, 84, 0, 0, 532, 84, 412, 0, 268, 0,
	424, 590, 424, 530, 593, 783, 0, 1947, 1966, 1964,
	84, 0, 0, 531, 1967, 1016, 84, 784, 0, 474,
	1974, 294, 84, 84, 0, 0, 1976, 482, 0, 468,
	268, 492, 1981, 1973, 1970, 482, 0, 1506, 1507, 1508,
	0, 0, 1969, 1978, 81, 84, 1982, 84, 1985, 0,
	84, 0, 84, 268, 0, 1977, 1069, 0, 268, 268,
	268, 492, 758, 0, 492, 2007, 61, 2003, 0, 1997,
	1996, 0, 84, 1988, 2009, 84, 0, 2011, 2004, 2010,
	0, 268, 268, 0, 0, 2002, 0, 2015, 1551, 81,
	0, 81, 2014, 2017, 0, 1550, 2013, 0, 1979, 2024,
	0, 0, 0, 2012, 784, 0, 0, 84, 0, 84,
	0, 424, 0, 81, 424, 424, 424, 424, 424, 873,
	2041, 2038, 2039, 1552, 424, 424, 2043, 84, 2036, 531,
	810, 412, 2040, 0, 0, 2052, 2056, 2054, 0, 893,
	0, 0, 2060, 2062, 84, 0, 0, 295, 0, 0,
	2066, 0, 0, 0, 2065, 0, 2064, 474, 0, 0,
	500, 810, 810, 2078, 2077, 0, 0, 0, 0, 0,
	810, 810, 0, 0, 2082, 0, 1119, 492, 0, 0,
	0, 0, 482, 0, 0, 2087, 1736, 0, 1729, 0,
	1643, 1644, 0, 0, 0, 0, 1727, 784, 0, 0,
	1731, 0, 0, 810, 1277, 1277, 812, 812, 0, 0,
	0, 811, 811, 0, 1161, 0, 0, 0, 1737, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	780, 780, 1483, 1484, 0, 0, 0, 0, 1730, 0,
	0, 0, 0, 0, 1681, 1682, 1683, 1684, 1685, 1686,
	1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696,
	1697, 1698, 1699, 268, 1703, 1277, 1277, 1277, 0, 0,
	0, 1028, 823, 0, 0, 268, 0, 0, 0, 268,
	1045, 0, 532, 268, 0, 0, 0, 0, 0, 0,
	1051, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 296, 809, 268, 0, 1071, 1072, 1732, 268,
	1733, 0, 268, 0, 424, 424, 0, 424, 812, 1310,
	0, 783, 0, 811, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 810, 809, 809, 0, 0, 1735, 0,
	0, 0, 780, 809, 809, 1738, 1338, 0, 0, 0,
	0, 0, 783, 783, 0, 1348, 0, 0, 0, 0,
	751, 783, 783, 0, 0, 0, 0, 0, 0, 751,
	0, 635, 49, 0, 0, 0, 809, 812, 0, 482,
	0, 0, 811, 0, 0, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 783, 0, 0, 0, 0, 0,
	0, 780, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1734, 49, 1118, 0, 0, 0, 812, 1277, 1277,
	0, 0, 811, 0, 268, 268, 0, 0, 0, 0,
	268, 1127, 0, 461, 0, 0, 469, 500, 0, 0,
	1396, 780, 810, 49, 0, 0, 0, 0, 0, 0,
	0, 532, 1500, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 1161, 0, 424, 0, 0, 0, 0,
	0, 0, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
	1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
	1277, 532, 1277, 0, 0, 0, 1860, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 809, 0, 0, 0,
	0, 532, 0, 0, 0, 0, 0, 0, 0, 916,
	917, 0, 0, 0, 783, 946, 947, 948, 0, 810,
	1494, 1491, 1492, 1493, 1485, 1486, 1487, 1488, 1490, 0,
	0, 0, 919, 0, 0, 950, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1483, 1484, 0, 1501, 1502,
	1503, 0, 0, 0, 918, 0, 0, 268, 1311, 1312,
	933, 1817, 0, 1028, 0, 0, 1319, 0, 0, 0,
	0, 0, 1324, 1325, 1327, 1329, 1330, 0, 0, 0,
	1335, 0, 0, 1337, 268, 0, 0, 0, 1933, 0,
	0, 0, 0, 268, 0, 0, 1498, 0, 268, 0,
	1357, 0, 0, 0, 0, 809, 0, 268, 0, 924,
	0, 0, 810, 1483, 1484, 0, 0, 268, 0, 0,
	0, 0, 0, 783, 0, 0, 0, 0, 943, 951,
	0, 0, 0, 0, 0, 0, 0, 0, 1118, 1118,
	0, 469, 0, 0, 0, 1489, 0, 0, 0, 1069,
	1161, 0, 0, 0, 0, 0, 941, 0, 532, 0,
	0, 0, 934, 0, 0, 0, 0, 0, 0, 0,
	893, 0, 893, 0, 424, 0, 916, 917, 268, 0,
	1504, 0, 1402, 1987, 0, 0, 0, 0, 0, 0,
	0, 0, 809, 0, 0, 0, 0, 1161, 1499, 919,
	1161, 268, 0, 0, 0, 0, 0, 0, 0, 0,
	783, 0, 0, 1489, 1277, 0, 0, 0, 0, 0,
	0, 918, 0, 812, 0, 0, 0, 0, 811, 935,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 616,
	616, 944, 0, 0, 0, 0, 0, 780, 719, 0,
	0, 0, 0, 0, 812, 812, 0, 0, 0, 811,
	811, 0, 0, 812, 812, 1500, 1499, 0, 811, 811,
	0, 0, 0, 0, 532, 0, 924, 0, 780, 780,
	0, 0, 0, 0, 0, 809, 0, 780, 780, 0,
	0, 0, 296, 0, 0, 0, 812, 0, 0, 0,
	942, 811, 0, 783, 0, 0, 0, 929, 926, 927,
	928, 920, 921, 922, 923, 925, 1277, 945, 0, 0,
	780, 0, 0, 0, 0, 0, 0, 0, 0, 934,
	0, 0, 461, 1500, 0, 0, 0, 0, 0, 1495,
	1496, 1497, 0, 1494, 1491, 1492, 1493, 1485, 1486, 1487,
	1488, 1490, 1758, 0, 0, 0, 1762, 0, 1547, 0,
	0, 0, 0, 900, 902, 0, 0, 0, 0, 0,
	909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 956, 957, 958, 959, 960, 0, 0, 0,
	0, 0, 968, 0, 0, 0, 935, 268, 268, 0,
	0, 0, 975, 0, 0, 0, 1161, 1161, 0, 0,
	1161, 1277, 1491, 1492, 1493, 1485, 1486, 1487, 1488, 1490,
	0, 0, 1596, 0, 0, 1028, 812, 893, 0, 0,
	0, 811, 0, 0, 1606, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 268, 0, 0, 268, 0,
	780, 0, 0, 0, 0, 0, 0, 0, 0, 1638,
	0, 0, 0, 0, 461, 0, 0, 461, 461, 0,
	0, 0, 0, 0, 929, 926, 927, 928, 920, 921,
	922, 923, 925, 0, 945, 0, 0, 0, 0, 965,
	0, 967, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 1669, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1861, 0, 0,
	0, 0, 0, 0, 0, 812, 0, 0, 0, 0,
	811, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 780,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1901, 0, 1722, 1723, 1028, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1161, 0, 0,
	1547, 500, 0, 0, 0, 0, 1756, 0, 1757, 0,
	268, 1759, 1760, 1761, 268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 49, 0,
	0, 0, 812, 0, 0, 0, 0, 811, 0, 0,
	0, 0, 0, 49, 916, 917, 0, 1547, 49, 500,
	1127, 0, 1547, 0, 0, 0, 780, 0, 0, 0,
	0, 0, 0, 0, 268, 268, 0, 919, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 1638, 0, 0,
	0, 0, 0, 0, 1813, 0, 0, 616, 0, 918,
	0, 0, 0, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 1197, 0, 1203, 1833, 1205, 1206,
	1207, 1208, 0, 0, 0, 812, 0, 0, 0, 0,
	811, 0, 0, 0, 0, 0, 0, 1232, 0, 0,
	0, 0, 0, 0, 924, 0, 0, 0, 1999, 780,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1259,
	1260, 0, 0, 1273, 0, 1284, 1286, 1291, 1294, 1295,
	1296, 0, 1028, 0, 1852, 0, 424, 1854, 0, 0,
	0, 0, 0, 0, 0, 268, 0, 1162, 1547, 0,
	719, 424, 0, 0, 0, 0, 0, 934, 0, 0,
	0, 0, 0, 0, 0, 1069, 0, 0, 0, 0,
	0, 1884, 0, 0, 0, 500, 0, 0, 0, 0,
	0, 0, 0, 1221, 0, 1547, 0, 0, 0, 0,
	268, 1351, 0, 0, 0, 0, 0, 1907, 0, 0,
	0, 0, 0, 0, 0, 268, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 500, 1638, 0, 935, 0, 0, 0, 0, 0,
	0, 0, 0, 1377, 0, 0, 0, 0, 0, 0,
	0, 916, 917, 0, 936, 937, 938, 946, 947, 948,
	0, 0, 0, 0, 0, 0, 0, 939, 0, 0,
	0, 0, 893, 0, 919, 0, 0, 950, 0, 0,
	0, 0, 0, 49, 49, 0, 0, 0, 0, 0,
	0, 0, 909, 0, 0, 0, 918, 1952, 1953, 0,
	0, 0, 933, 469, 0, 0, 0, 1962, 0, 0,
	0, 1963, 0, 926, 927, 928, 920, 921, 922, 923,
	925, 0, 945, 0, 0, 0, 500, 0, 0, 0,
	0, 0, 1638, 0, 0, 0, 0, 0, 1638, 500,
	0, 1428, 1429, 0, 0, 0, 0, 1434, 0, 0,
	0, 924, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1995, 0, 500, 0, 0, 268, 0, 424, 0,
	943, 951, 0, 0, 0, 0, 0, 0, 49, 0,
	1453, 0, 49, 0, 0, 1547, 949, 1460, 1907, 0,
	1464, 1638, 0, 0, 0, 49, 0, 0, 941, 1473,
	0, 0, 0, 0, 934, 0, 1424, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 268, 968, 500, 0, 0, 0, 940,
	1291, 1291, 1291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2053, 1221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1638, 0, 0, 1544, 967, 0, 0, 0, 0, 916,
	917, 935, 936, 937, 938, 946, 947, 948, 0, 0,
	0, 0, 0, 944, 0, 939, 0, 0, 0, 0,
	0, 0, 919, 616, 0, 950, 0, 0, 0, 0,
	0, 616, 0, 0, 0, 719, 0, 0, 0, 0,
	0, 0, 0, 0, 918, 0, 0, 0, 0, 0,
	933, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 942, 0, 0, 930, 931, 932, 0, 929,
	926, 927, 928, 920, 921, 922, 923, 925, 0, 945,
	0, 0, 0, 0, 0, 0, 1846, 0, 0, 924,
	1641, 0, 0, 1642, 1483, 1484, 0, 1501, 1502, 1503,
	0, 0, 0, 0, 0, 1647, 0, 0, 943, 951,
	1816, 0, 0, 0, 1656, 0, 0, 0, 0, 0,
	0, 0, 1660, 1162, 949, 1377, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 941, 0, 0, 0,
	1676, 0, 934, 0, 1678, 1498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 940, 0, 0,
	1162, 0, 0, 1162, 0, 0, 0, 1709, 1710, 0,
	49, 0, 0, 0, 0, 0, 1716, 1717, 1718, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	916, 917, 0, 936, 937, 938, 946, 947, 948, 935,
	0, 0, 1746, 0, 0, 0, 939, 0, 0, 0,
	0, 944, 0, 919, 0, 0, 950, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 0, 616, 0,
	0, 0, 0, 0, 0, 918, 0, 1499, 0, 0,
	0, 933, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1791, 0, 0,
	942, 0, 0, 930, 931, 932, 0, 929, 926, 927,
	928, 920, 921, 922, 923, 925, 0, 945, 0, 0,
	924, 0, 0, 0, 1525, 0, 1483, 1484, 1818, 1501,
	1502, 1503, 1821, 1822, 1500, 0, 0, 1824, 0, 943,
	951, 0, 0, 0, 1826, 0, 1828, 0, 0, 0,
	0, 0, 0, 0, 1834, 949, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	0, 0, 0, 934, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 940, 1162,
	1162, 0, 0, 1162, 0, 0, 0, 0, 1495, 1496,
	1497, 469, 1494, 1491, 1492, 1493, 1485, 1486, 1487, 1488,
	1490, 0, 0, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1876, 0, 916, 917,
	935, 936, 937, 938, 946, 947, 948, 0, 0, 0,
	0, 0, 944, 0, 939, 0, 0, 0, 0, 0,
	0, 919, 0, 0, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	1910, 0, 0, 918, 0, 0, 0, 0, 0, 933,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1925,
	1926, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 942, 0, 0, 930, 931, 932, 0, 929, 926,
	927, 928, 920, 921, 922, 923, 925, 0, 945, 1938,
	0, 0, 0, 0, 0, 1524, 0, 0, 924, 0,
	0, 0, 1942, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 1892, 0, 0, 943, 951, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 949, 0, 0, 719, 0, 0, 0,
	1162, 0, 0, 0, 0, 941, 0, 0, 0, 0,
	0, 934, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	1495, 1496, 1497, 0, 1494, 1491, 1492, 1493, 1485, 1486,
	1487, 1488, 1490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	944, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 2037, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 0, 0, 0, 0, 2051, 2051, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 942,
	0, 2051, 930, 931, 932, 0, 929, 926, 927, 928,
	920, 921, 922, 923, 925, 0, 945, 0, 0, 0,
	0, 293, 0, 1523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2051, 86, 87, 312,
	88, 313, 314, 315, 316, 215, 317, 318, 319, 320,
	89, 90, 91, 216, 217, 218, 219, 92, 220, 221,
	321, 93, 222, 223, 94, 322, 323, 224, 225, 226,
	324, 227, 325, 298, 326, 95, 96, 97, 0, 98,
	327, 99, 100, 101, 328, 299, 102, 103, 329, 330,
	331, 332, 333, 334, 104, 105, 269, 106, 228, 107,
	229, 230, 335, 108, 336, 109, 337, 338, 339, 110,
	111, 340, 112, 341, 0, 342, 231, 113, 114, 232,
	233, 343, 344, 345, 115, 116, 234, 0, 117, 346,
	118, 347, 348, 300, 349, 119, 235, 350, 236, 351,
	120, 121, 122, 123, 237, 238, 302, 352, 127, 353,
	124, 354, 301, 125, 239, 126, 240, 241, 242, 355,
	243, 356, 303, 128, 304, 129, 130, 357, 132, 131,
	358, 244, 305, 133, 306, 359, 134, 360, 361, 135,
	0, 136, 137, 138, 140, 245, 139, 307, 141, 142,
	144, 143, 362, 363, 364, 246, 145, 247, 146, 147,
	365, 148, 366, 367, 149, 368, 369, 150, 248, 308,
	151, 309, 249, 152, 153, 154, 155, 370, 250, 156,
	251, 157, 371, 158, 159, 160, 252, 161, 162, 372,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	373, 173, 310, 174, 175, 253, 176, 0, 177, 178,
	179, 180, 374, 254, 181, 182, 375, 183, 184, 311,
	185, 255, 256, 186, 376, 192, 187, 188, 189, 191,
	257, 190, 258, 377, 193, 378, 194, 195, 196, 197,
	379, 259, 260, 261, 380, 381, 198, 262, 263, 382,
	199, 200, 201, 202, 383, 384, 203, 204, 205, 385,
	206, 386, 207, 208, 209, 264, 265, 387, 388, 210,
	389, 390, 391, 392, 211, 212, 213, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	0, 0, 0, 0, 0, 0, 1632, 0, 0, 0,
	0, 0, 0, 0, 1633, 86, 87, 312, 88, 313,
	314, 315, 316, 215, 317, 318, 319, 320, 89, 90,
	91, 216, 217, 218, 219, 92, 220, 221, 321, 93,
	222, 223, 94, 322, 323, 224, 225, 226, 324, 227,
	325, 298, 326, 95, 96, 97, 0, 98, 327, 99,
	100, 101, 328, 299, 102, 103, 329, 330, 331, 332,
	333, 334, 104, 105, 269, 106, 228, 107, 229, 230,
	335, 108, 336, 109, 337, 338, 339, 110, 111, 340,
	112, 341, 0, 342, 231, 113, 114, 232, 233, 343,
	344, 345, 115, 116, 234, 0, 117, 346, 118, 347,
	348, 300, 349, 119, 235, 350, 236, 351, 120, 121,
	122, 123, 237, 238, 302, 352, 127, 353, 124, 354,
	301, 125, 239, 126, 240, 241, 242, 355, 243, 356,
	303, 128, 304, 129, 130, 357, 132, 131, 358, 244,
	305, 133, 306, 359, 134, 360, 361, 135, 0, 136,
	137, 138, 140, 245, 139, 307, 141, 142, 144, 143,
	362, 363, 364, 246, 145, 247, 146, 147, 365, 148,
	366, 367, 149, 368, 369, 150, 248, 308, 151, 309,
	249, 152, 153, 154, 155, 370, 250, 156, 251, 157,
	371, 158, 159, 160, 252, 161, 162, 372, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 373, 173,
	310, 174, 175, 253, 176, 0, 177, 178, 179, 180,
	374, 254, 181, 182, 375, 183, 184, 311, 185, 255,
	256, 186, 376, 192, 187, 188, 189, 191, 257, 190,
	258, 377, 193, 378, 194, 195, 196, 197, 379, 259,
	260, 261, 380, 381, 198, 262, 263, 382, 199, 200,
	201, 202, 383, 384, 203, 204, 205, 385, 206, 386,
	207, 208, 209, 264, 265, 387, 388, 210, 389, 390,
	391, 392, 211, 212, 213, 214, 0, 0, 0, 293,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1980, 86, 87, 312, 88, 313,
	314, 315, 316, 215, 317, 318, 319, 320, 89, 90,
	91, 216, 217, 218, 219, 92, 220, 221, 321, 93,
	222, 223, 94, 322, 323, 224, 225, 226, 324, 227,
	325, 298, 326, 95, 96, 97, 0, 98, 327, 99,
	100, 101, 328, 299, 102, 103, 329, 330, 331, 332,
	333, 334, 104, 105, 269, 106, 228, 107, 229, 230,
	335, 108, 336, 109, 337, 338, 339, 110, 111, 340,
	112, 341, 0, 342, 231, 113, 114, 232, 233, 343,
	344, 345, 115, 116, 234, 0, 117, 346, 118, 347,
	348, 300, 349, 119, 235, 350, 236, 351, 120, 121,
	122, 123, 237, 238, 302, 352, 127, 353, 124, 354,
	301, 125, 239, 126, 240, 241, 242, 355, 243, 356,
	303, 128, 304, 129, 130, 357, 132, 131, 358, 244,
	305, 133, 306, 359, 134, 360, 361, 135, 0, 136,
	137, 138, 140, 245, 139, 307, 141, 142, 144, 143,
	362, 363, 364, 246, 145, 247, 146, 147, 365, 148,
	366, 367, 149, 368, 369, 150, 248, 308, 151, 309,
	249, 152, 153, 154, 155, 370, 250, 156, 251, 157,
	371, 158, 159, 160, 252, 161, 162, 372, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 373, 173,
	310, 174, 175, 253, 176, 0, 177, 178, 179, 180,
	374, 254, 181, 182, 375, 183, 184, 311, 185, 255,
	256, 186, 376, 192, 187, 188, 189, 191, 257, 190,
	258, 377, 193, 378, 194, 195, 196, 197, 379, 259,
	260, 261, 380, 381, 198, 262, 263, 382, 199, 200,
	201, 202, 383, 384, 203, 204, 205, 385, 206, 386,
	207, 208, 209, 264, 265, 387, 388, 210, 389, 390,
	391, 392, 211, 212, 213, 214, 293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 86, 87, 312, 88, 313, 314, 315, 316,
	215, 317, 318, 319, 320, 89, 90, 91, 216, 217,
	218, 219, 92, 220, 221, 321, 93, 222, 223, 94,
	322, 323, 224, 225, 226, 324, 227, 325, 298, 326,
	95, 96, 97, 0, 98, 327, 99, 100, 101, 328,
	299, 102, 103, 329, 330, 331, 332, 333, 334, 104,
	105, 269, 106, 228, 107, 229, 230, 335, 108, 336,
	109, 337, 338, 339, 110, 111, 340, 112, 341, 0,
	342, 231, 113, 114, 232, 233, 343, 344, 345, 115,
	116, 234, 0, 117, 346, 118, 347, 348, 300, 349,
	119, 235, 350, 236, 351, 120, 121, 122, 123, 237,
	238, 302, 352, 127, 353, 124, 354, 301, 125, 239,
	126, 240, 241, 242, 355, 243, 356, 303, 128, 304,
	129, 130, 357, 132, 131, 358, 244, 305, 133, 306,
	359, 134, 360, 361, 135, 0, 136, 137, 138, 140,
	245, 139, 307, 141, 142, 144, 143, 362, 363, 364,
	246, 145, 247, 146, 147, 365, 148, 366, 367, 149,
	368, 369, 150, 248, 308, 151, 309, 249, 152, 153,
	154, 155, 370, 250, 156, 251, 157, 371, 158, 159,
	160, 252, 161, 162, 372, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 373, 173, 310, 174, 175,
	253, 176, 0, 177, 178, 179, 180, 374, 254, 181,
	182, 375, 183, 184, 311, 185, 255, 256, 186, 376,
	192, 187, 188, 189, 191, 257, 190, 258, 377, 193,
	378, 194, 195, 196, 197, 379, 259, 260, 261, 380,
	381, 198, 262, 263, 382, 199, 200, 201, 202, 383,
	384, 203, 204, 205, 385, 206, 386, 207, 208, 209,
	264, 265, 387, 388, 210, 389, 390, 391, 392, 211,
	212, 213, 214, 654, 643, 644, 641, 642, 633, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 670, 636, 0,
	0, 0, 89, 90, 91, 216, 685, 218, 686, 92,
	687, 688, 0, 93, 222, 223, 94, 639, 669, 689,
	690, 226, 0, 681, 0, 662, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 299, 102, 103,
	0, 663, 665, 0, 664, 666, 104, 105, 269, 106,
	691, 107, 692, 693, 720, 108, 0, 109, 0, 0,
	0, 684, 111, 0, 112, 0, 0, 0, 627, 113,
	114, 671, 672, 650, 0, 0, 115, 116, 694, 0,
	117, 0, 118, 0, 0, 300, 0, 119, 682, 0,
	236, 0, 120, 121, 122, 123, 678, 680, 302, 0,
	127, 0, 124, 0, 301, 125, 695, 126, 696, 697,
	698, 0, 661, 0, 303, 128, 304, 129, 130, 0,
	132, 131, 0, 683, 305, 133, 306, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 245, 139, 307,
	141, 142, 144, 143, 622, 0, 651, 679, 145, 699,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	248, 308, 151, 309, 673, 152, 153, 154, 155, 0,
	674, 156, 251, 157, 0, 158, 159, 160, 700, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 310, 174, 175, 628, 176, 0,
	177, 178, 179, 180, 67, 254, 181, 182, 667, 183,
	184, 311, 185, 701, 256, 186, 0, 192, 187, 188,
	189, 191, 702, 190, 675, 0, 193, 69, 194, 195,
	196, 197, 0, 259, 703, 704, 0, 0, 198, 676,
	677, 649, 199, 200, 201, 202, 0, 0, 203, 204,
	205, 668, 206, 0, 207, 208, 209, 533, 705, 0,
	0, 210, 0, 0, 0, 65, 211, 212, 213, 214,
	623, 66, 0, 0, 0, 654, 643, 644, 641, 642,
	633, 619, 620, 0, 0, 0, 0, 621, 0, 0,
	629, 86, 87, 1248, 88, 632, 0, 0, 0, 670,
	636, 0, 0, 0, 89, 90, 91, 216, 685, 218,
	686, 92, 687, 688, 0, 93, 222, 223, 94, 639,
	669, 689, 690, 226, 0, 681, 0, 662, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 299,
	102, 103, 0, 663, 665, 0, 664, 666, 104, 105,
	269, 106, 691, 107, 692, 693, 0, 108, 0, 109,
	0, 1249, 0, 684, 111, 0, 112, 0, 0, 0,
	627, 113, 114, 671, 672, 650, 0, 0, 115, 116,
	694, 0, 117, 0, 118, 0, 0, 300, 0, 119,
	682, 0, 236, 0, 120, 121, 122, 123, 678, 680,
	302, 0, 127, 0, 124, 0, 301, 125, 695, 126,
	696, 697, 698, 0, 661, 0, 303, 128, 304, 129,
	130, 0, 132, 131, 0, 683, 305, 133, 306, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 245,
	139, 307, 141, 142, 144, 143, 622, 0, 651, 679,
	145, 699, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 248, 308, 151, 309, 673, 152, 153, 154,
	155, 0, 674, 156, 251, 157, 0, 158, 159, 160,
	700, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 310, 174, 175, 628,
	176, 0, 177, 178, 179, 180, 0, 254, 181, 182,
	667, 183, 184, 311, 185, 701, 256, 186, 0, 192,
	187, 188, 189, 191, 702, 190, 675, 0, 193, 0,
	194, 195, 196, 197, 0, 259, 703, 704, 0, 0,
	198, 676, 677, 649, 199, 200, 201, 202, 0, 0,
	203, 204, 205, 668, 206, 0, 207, 208, 209, 264,
	705, 1247, 0, 210, 0, 0, 0, 0, 211, 212,
	213, 214, 623, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 619, 620, 1250, 0, 0, 0, 621,
	0, 0, 629, 1245, 0, 0, 0, 632, 654, 643,
	644, 641, 642, 633, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 670, 636, 0, 0, 0, 89, 90, 91,
	216, 685, 218, 686, 92, 687, 688, 0, 93, 222,
	223, 94, 639, 669, 689, 690, 226, 0, 681, 0,
	662, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 299, 102, 103, 0, 663, 665, 0, 664,
	666, 104, 105, 269, 106, 691, 107, 692, 693, 0,
	108, 0, 109, 0, 0, 0, 684, 111, 0, 112,
	0, 0, 0, 627, 113, 114, 671, 672, 650, 0,
	0, 115, 116, 694, 0, 117, 0, 118, 0, 0,
	300, 0, 119, 682, 0, 236, 0, 120, 121, 122,
	123, 678, 680, 302, 0, 127, 0, 124, 0, 301,
	125, 695, 126, 696, 697, 698, 0, 661, 0, 303,
	128, 304, 129, 130, 0, 132, 131, 0, 683, 305,
	133, 306, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 140, 245, 139, 307, 141, 142, 144, 143, 622,
	0, 651, 679, 145, 699, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 248, 308, 151, 309, 673,
	152, 153, 154, 155, 0, 674, 156, 251, 157, 0,
	158, 159, 160, 700, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 310,
	174, 175, 628, 176, 0, 177, 178, 179, 180, 67,
	254, 181, 182, 667, 183, 184, 311, 185, 701, 256,
	186, 0, 192, 187, 188, 189, 191, 702, 190, 675,
	0, 193, 69, 194, 195, 196, 197, 0, 259, 703,
	704, 0, 0, 198, 676, 677, 649, 199, 200, 201,
	202, 0, 0, 203, 204, 205, 668, 206, 0, 207,
	208, 209, 533, 705, 0, 0, 210, 0, 0, 0,
	65, 211, 212, 213, 214, 623, 66, 654, 643, 644,
	641, 642, 633, 0, 0, 0, 619, 620, 0, 0,
	0, 0, 621, 86, 87, 629, 88, 0, 0, 0,
	632, 670, 636, 0, 0, 0, 89, 90, 91, 216,
	685, 218, 686, 92, 687, 688, 1287, 93, 222, 223,
	94, 639, 669, 689, 690, 226, 0, 681, 0, 662,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 299, 102, 103, 0, 663, 665, 0, 664, 666,
	104, 105, 269, 106, 691, 107, 692, 693, 0, 108,
	0, 109, 0, 0, 0, 684, 111, 0, 112, 0,
	0, 0, 627, 113, 114, 671, 672, 650, 0, 0,
	115, 116, 694, 0, 117, 0, 118, 0, 1292, 300,
	0, 119, 682, 0, 236, 0, 120, 121, 122, 123,
	678, 680, 302, 0, 127, 0, 124, 0, 301, 125,
	695, 126, 696, 697, 698, 0, 661, 0, 303, 128,
	304, 129, 130, 0, 132, 131, 1288, 683, 305, 133,
	306, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 245, 139, 307, 141, 142, 144, 143, 622, 0,
	651, 679, 145, 699, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 248, 308, 151, 309, 673, 152,
	153, 154, 155, 0, 674, 156, 251, 157, 0, 158,
	159, 160, 700, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 310, 174,
	175, 628, 176, 0, 177, 178, 179, 180, 0, 254,
	181, 182, 667, 183, 184, 311, 185, 701, 256, 186,
	0, 192, 187, 188, 189, 191, 702, 190, 675, 0,
	193, 0, 194, 195, 196, 197, 0, 259, 703, 704,
	0, 1289, 198, 676, 677, 649, 199, 200, 201, 202,
	0, 0, 203, 204, 205, 668, 206, 0, 207, 208,
	209, 264, 705, 0, 0, 210, 0, 0, 0, 0,
	211, 212, 213, 214, 623, 0, 654, 643, 644, 641,
	642, 633, 0, 0, 0, 619, 620, 0, 0, 0,
	0, 621, 86, 87, 629, 88, 0, 0, 0, 632,
	670, 636, 0, 0, 0, 89, 90, 91, 216, 685,
	218, 686, 92, 687, 688, 0, 93, 222, 223, 94,
	639, 669, 689, 690, 226, 0, 681, 0, 662, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	299, 102, 103, 0, 663, 665, 0, 664, 666, 104,
	105, 269, 106, 691, 107, 692, 693, 0, 108, 0,
	109, 0, 0, 0, 684, 111, 0, 112, 0, 0,
	0, 627, 113, 114, 671, 672, 650, 0, 0, 115,
	116, 694, 0, 117, 0, 118, 0, 0, 300, 0,
	119, 682, 0, 236, 0, 120, 121, 122, 123, 678,
	680, 302, 0, 127, 0, 124, 0, 301, 125, 695,
	126, 696, 697, 698, 0, 661, 0, 303, 128, 304,
	129, 130, 0, 132, 131, 0, 683, 305, 133, 306,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	245, 139, 307, 141, 142, 144, 143, 622, 1574, 651,
	679, 145, 699, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 248, 308, 151, 309, 673, 152, 153,
	154, 155, 0, 674, 156, 251, 157, 0, 158, 159,
	160, 700, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 310, 174, 175,
	628, 176, 0, 177, 178, 179, 180, 0, 254, 181,
	182, 667, 183, 184, 311, 185, 701, 256, 186, 0,
	192, 187, 188, 189, 191, 702, 190, 675, 0, 193,
	0, 194, 195, 196, 197, 0, 259, 703, 704, 0,
	0, 198, 676, 677, 649, 199, 200, 201, 202, 0,
	0, 203, 204, 205, 668, 206, 0, 207, 208, 209,
	264, 705, 0, 0, 210, 0, 0, 0, 0, 211,
	212, 213, 214, 623, 0, 654, 643, 644, 641, 642,
	633, 0, 0, 0, 619, 620, 617, 0, 0, 0,
	621, 86, 87, 629, 88, 0, 0, 0, 632, 670,
	636, 0, 0, 0, 89, 90, 91, 216, 685, 218,
	686, 92, 687, 688, 0, 93, 222, 223, 94, 639,
	669, 689, 690, 226, 0, 681, 0, 662, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 299,
	102, 103, 0, 663, 665, 0, 664, 666, 104, 105,
	269, 106, 691, 107, 692, 693, 0, 108, 0, 109,
	0, 0, 0, 684, 111, 0, 112, 0, 0, 0,
	627, 113, 114, 671, 672, 650, 0, 0, 115, 116,
	694, 0, 117, 0, 118, 0, 0, 300, 0, 119,
	682, 0, 236, 0, 120, 121, 122, 123, 678, 680,
	302, 0, 127, 0, 124, 0, 301, 125, 695, 126,
	696, 697, 698, 0, 661, 0, 303, 128, 304, 129,
	130, 0, 132, 131, 0, 683, 305, 133, 306, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 245,
	139, 307, 141, 142, 144, 143, 622, 0, 651, 679,
	145, 699, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 248, 308, 151, 309, 673, 152, 153, 154,
	155, 0, 674, 156, 251, 157, 0, 158, 159, 160,
	700, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 310, 174, 175, 628,
	176, 0, 177, 178, 179, 180, 0, 254, 181, 182,
	667, 183, 184, 311, 185, 701, 256, 186, 0, 192,
	187, 188, 189, 191, 702, 190, 675, 0, 193, 0,
	194, 195, 196, 197, 0, 259, 703, 704, 0, 0,
	198, 676, 677, 649, 199, 200, 201, 202, 0, 0,
	203, 204, 205, 668, 206, 0, 207, 208, 209, 264,
	705, 0, 0, 210, 0, 0, 0, 0, 211, 212,
	213, 214, 623, 0, 0, 0, 0, 654, 643, 644,
	641, 642, 633, 619, 620, 0, 0, 0, 0, 621,
	973, 1240, 629, 86, 87, 0, 88, 632, 0, 0,
	0, 670, 636, 0, 0, 0, 89, 90, 91, 216,
	685, 218, 686, 92, 687, 688, 0, 93, 222, 223,
	94, 639, 669, 689, 690, 226, 0, 681, 0, 662,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 299, 102, 103, 0, 663, 665, 0, 664, 666,
	104, 105, 269, 106, 691, 107, 692, 693, 0, 108,
	0, 109, 0, 0, 0, 684, 111, 0, 112, 0,
	0, 0, 627, 113, 114, 671, 672, 650, 0, 0,
	115, 116, 694, 0, 117, 0, 118, 0, 0, 300,
	0, 119, 682, 0, 236, 0, 120, 121, 122, 123,
	678, 680, 302, 0, 127, 0, 124, 0, 301, 125,
	695, 126, 696, 697, 698, 0, 661, 0, 303, 128,
	304, 129, 130, 0, 132, 131, 0, 683, 305, 133,
	306, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 245, 139, 307, 141, 142, 144, 143, 622, 0,
	651, 679, 145, 699, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 248, 308, 151, 309, 673, 152,
	153, 154, 155, 0, 674, 156, 251, 157, 0, 158,
	159, 160, 700, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 310, 174,
	175, 628, 176, 0, 177, 178, 179, 180, 0, 254,
	181, 182, 667, 183, 184, 311, 185, 701, 256, 186,
	0, 192, 187, 188, 189, 191, 702, 190, 675, 0,
	193, 0, 194, 195, 196, 197, 0, 259, 703, 704,
	0, 0, 198, 676, 677, 649, 199, 200, 201, 202,
	0, 0, 203, 204, 205, 668, 206, 0, 207, 208,
	209, 264, 705, 0, 0, 210, 0, 0, 0, 0,
	211, 212, 213, 214, 623, 0, 654, 643, 644, 641,
	642, 633, 0, 0, 0, 619, 620, 617, 0, 0,
	0, 621, 86, 87, 629, 88, 0, 0, 0, 632,
	670, 636, 0, 0, 0, 89, 90, 91, 216, 685,
	218, 686, 92, 687, 688, 0, 93, 222, 223, 94,
	639, 669, 689, 690, 226, 0, 681, 0, 662, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	299, 102, 103, 0, 663, 665, 0, 664, 666, 104,
	105, 269, 106, 691, 107, 692, 693, 0, 108, 0,
	109, 0, 0, 0, 684, 111, 0, 112, 0, 0,
	0, 627, 113, 114, 671, 672, 650, 0, 0, 115,
	116, 694, 0, 117, 0, 118, 0, 0, 300, 0,
	119, 682, 0, 236, 0, 120, 121, 122, 123, 678,
	680, 302, 0, 127, 0, 124, 0, 301, 125, 695,
	126, 696, 697, 698, 0, 661, 0, 303, 128, 304,
	129, 130, 0, 132, 131, 0, 683, 305, 133, 306,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	245, 139, 307, 141, 142, 144, 143, 622, 0, 651,
	679, 145, 699, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 248, 308, 151, 309, 673, 152, 153,
	154, 155, 0, 674, 156, 251, 157, 0, 158, 159,
	160, 700, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 310, 174, 175,
	628, 176, 0, 177, 178, 179, 180, 0, 254, 181,
	182, 667, 183, 184, 311, 185, 701, 256, 186, 0,
	192, 187, 188, 189, 191, 702, 190, 675, 0, 193,
	0, 194, 195, 196, 197, 0, 259, 703, 704, 0,
	0, 198, 676, 677, 649, 199, 200, 201, 202, 0,
	0, 203, 204, 205, 668, 206, 0, 207, 208, 209,
	264, 705, 0, 0, 210, 0, 0, 0, 0, 211,
	212, 213, 214, 623, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 619, 620, 0, 0, 0, 0,
	621, 0, 0, 629, 1706, 0, 0, 0, 632, 654,
	643, 644, 641, 642, 633, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 670, 636, 0, 0, 0, 89, 90,
	91, 216, 685, 218, 686, 92, 687, 688, 0, 93,
	222, 223, 94, 639, 669, 689, 690, 226, 0, 681,
	0, 662, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 299, 102, 103, 0, 663, 665, 0,
	664, 666, 104, 105, 269, 106, 691, 107, 692, 693,
	0, 108, 0, 109, 0, 0, 0, 684, 111, 0,
	112, 0, 0, 0, 627, 113, 114, 671, 672, 650,
	0, 0, 115, 116, 694, 0, 117, 0, 118, 0,
	0, 300, 0, 119, 682, 0, 236, 0, 120, 121,
	122, 123, 678, 680, 302, 0, 127, 0, 124, 0,
	301, 125, 695, 126, 696, 697, 698, 0, 661, 0,
	303, 128, 304, 129, 130, 0, 132, 131, 0, 683,
	305, 133, 306, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 245, 139, 307, 141, 142, 144, 143,
	622, 0, 651, 679, 145, 699, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 248, 308, 151, 309,
	673, 152, 153, 154, 155, 0, 674, 156, 251, 157,
	0, 158, 159, 160, 700, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	310, 174, 175, 628, 176, 0, 177, 178, 179, 180,
	0, 254, 181, 182, 667, 183, 184, 311, 185, 701,
	256, 186, 0, 192, 187, 188, 189, 191, 702, 190,
	675, 0, 193, 0, 194, 195, 196, 197, 0, 259,
	703, 704, 0, 0, 198, 676, 677, 649, 199, 200,
	201, 202, 0, 0, 203, 204, 205, 668, 206, 0,
	207, 208, 209, 264, 705, 1663, 0, 210, 0, 0,
	0, 0, 211, 212, 213, 214, 623, 0, 654, 643,
	644, 641, 642, 633, 0, 0, 0, 619, 620, 0,
	0, 0, 0, 621, 86, 87, 629, 88, 0, 0,
	0, 632, 670, 636, 0, 0, 0, 89, 90, 91,
	216, 685, 218, 686, 92, 687, 688, 0, 93, 222,
	223, 94, 639, 669, 689, 690, 226, 0, 681, 0,
	662, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 299, 102, 103, 0, 663, 665, 0, 664,
	666, 104, 105, 269, 106, 691, 107, 692, 693, 0,
	108, 0, 109, 0, 0, 0, 684, 111, 0, 112,
	0, 0, 0, 627, 113, 114, 671, 672, 650, 0,
	0, 115, 116, 694, 0, 117, 0, 118, 0, 0,
	300, 0, 119, 682, 0, 236, 0, 120, 121, 122,
	123, 678, 680, 302, 0, 127, 0, 124, 0, 301,
	125, 695, 126, 696, 697, 698, 0, 661, 0, 303,
	128, 304, 129, 130, 0, 132, 131, 0, 683, 305,
	133, 306, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 140, 245, 139, 307, 141, 142, 144, 143, 622,
	0, 651, 679, 145, 699, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 248, 308, 151, 309, 673,
	152, 153, 154, 155, 0, 674, 156, 251, 157, 0,
	158, 159, 160, 700, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 310,
	174, 175, 628, 176, 0, 177, 178, 179, 180, 0,
	254, 181, 182, 667, 183, 184, 311, 185, 701, 256,
	186, 0, 192, 187, 188, 189, 191, 702, 190, 675,
	0, 193, 0, 194, 195, 196, 197, 0, 259, 703,
	704, 0, 0, 198, 676, 677, 649, 199, 200, 201,
	202, 0, 0, 203, 204, 205, 668, 206, 0, 207,
	208, 209, 264, 705, 0, 0, 210, 0, 0, 0,
	0, 211, 212, 213, 214, 623, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 619, 620, 0, 0,
	0, 0, 621, 0, 0, 629, 1653, 0, 0, 0,
	632, 654, 643, 644, 641, 642, 633, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 670, 636, 0, 0, 0,
	89, 90, 91, 216, 685, 218, 686, 92, 687, 688,
	0, 93, 222, 223, 94, 639, 669, 689, 690, 226,
	0, 681, 0, 662, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 299, 102, 103, 0, 663,
	665, 0, 664, 666, 104, 105, 269, 106, 691, 107,
	692, 693, 720, 108, 0, 109, 0, 0, 0, 684,
	111, 0, 112, 0, 0, 0, 627, 113, 114, 671,
	672, 650, 0, 0, 115, 116, 694, 0, 117, 0,
	118, 0, 0, 300, 0, 119, 682, 0, 236, 0,
	120, 121, 122, 123, 678, 680, 302, 0, 127, 0,
	124, 0, 301, 125, 695, 126, 696, 697, 698, 0,
	661, 0, 303, 128, 304, 129, 130, 0, 132, 131,
	0, 683, 305, 133, 306, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 245, 139, 307, 141, 142,
	144, 143, 622, 0, 651, 679, 145, 699, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 248, 308,
	151, 309, 673, 152, 153, 154, 155, 0, 674, 156,
	251, 157, 0, 158, 159, 160, 700, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 310, 174, 175, 628, 176, 0, 177, 178,
	179, 180, 0, 254, 181, 182, 667, 183, 184, 311,
	185, 701, 256, 186, 0, 192, 187, 188, 189, 191,
	702, 190, 675, 0, 193, 0, 194, 195, 196, 197,
	0, 259, 703, 704, 0, 0, 198, 676, 677, 649,
	199, 200, 201, 202, 0, 0, 203, 204, 205, 668,
	206, 0, 207, 208, 209, 264, 705, 0, 0, 210,
	0, 0, 0, 0, 211, 212, 213, 214, 623, 0,
	654, 643, 644, 641, 642, 633, 0, 0, 0, 619,
	620, 0, 0, 0, 0, 621, 86, 87, 629, 88,
	0, 0, 0, 632, 670, 636, 0, 0, 0, 89,
	90, 91, 216, 685, 218, 686, 92, 687, 688, 0,
	93, 222, 223, 94, 639, 669, 689, 690, 226, 0,
	681, 0, 662, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 299, 102, 103, 0, 663, 665,
	0, 664, 666, 104, 105, 269, 106, 691, 107, 692,
	693, 0, 108, 0, 109, 0, 0, 0, 684, 111,
	0, 112, 0, 0, 0, 627, 113, 114, 671, 672,
	650, 0, 0, 115, 116, 694, 0, 117, 0, 118,
	0, 1292, 300, 0, 119, 682, 0, 236, 0, 120,
	121, 122, 123, 678, 680, 302, 0, 127, 0, 124,
	0, 301, 125, 695, 126, 696, 697, 698, 0, 661,
	0, 303, 128, 304, 129, 130, 0, 132, 131, 0,
	683, 305, 133, 306, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 140, 245, 139, 307, 141, 142, 144,
	143, 622, 0, 651, 679, 145, 699, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 248, 308, 151,
	309, 673, 152, 153, 154, 155, 0, 674, 156, 251,
	157, 0, 158, 159, 160, 700, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 310, 174, 175, 628, 176, 0, 177, 178, 179,
	180, 0, 254, 181, 182, 667, 183, 184, 311, 185,
	701, 256, 186, 0, 192, 187, 188, 189, 191, 702,
	190, 675, 0, 193, 0, 194, 195, 196, 197, 0,
	259, 703, 704, 0, 0, 198, 676, 677, 649, 199,
	200, 201, 202, 0, 0, 203, 204, 205, 668, 206,
	0, 207, 208, 209, 264, 705, 0, 0, 210, 0,
	0, 0, 0, 211, 212, 213, 214, 623, 0, 654,
	643, 644, 641, 642, 633, 0, 0, 0, 619, 620,
	0, 0, 0, 0, 621, 86, 87, 629, 88, 0,
	0, 0, 632, 670, 636, 0, 0, 0, 89, 90,
	91, 216, 685, 218, 686, 92, 687, 688, 0, 93,
	222, 223, 94, 639, 669, 689, 690, 226, 0, 681,
	0, 662, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 299, 102, 103, 0, 663, 665, 0,
	664, 666, 104, 105, 269, 106, 691, 107, 692, 693,
	0, 108, 0, 109, 0, 0, 0, 684, 111, 0,
	112, 0, 0, 0, 627, 113, 114, 671, 672, 650,
	0, 0, 115, 116, 694, 0, 117, 0, 118, 0,
	0, 300, 0, 119, 682, 0, 236, 0, 120, 121,
	122, 123, 678, 680, 302, 0, 127, 0, 124, 0,
	301, 125, 695, 126, 696, 697, 698, 0, 661, 0,
	303, 128, 304, 129, 130, 0, 132, 131, 0, 683,
	305, 133, 306, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 245, 139, 307, 141, 142, 144, 143,
	622, 0, 651, 679, 145, 699, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 248, 308, 151, 309,
	673, 152, 153, 154, 155, 0, 674, 156, 251, 157,
	0, 158, 159, 160, 700, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	310, 174, 175, 628, 176, 0, 177, 178, 179, 180,
	0, 254, 181, 182, 667, 183, 184, 311, 185, 701,
	256, 186, 0, 192, 187, 188, 189, 191, 702, 190,
	675, 0, 193, 0, 194, 195, 196, 197, 0, 259,
	703, 704, 0, 0, 198, 676, 677, 649, 199, 200,
	201, 202, 0, 0, 203, 204, 205, 668, 206, 0,
	207, 208, 209, 264, 705, 0, 0, 210, 0, 0,
	0, 0, 211, 212, 213, 214, 623, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 619, 620, 0,
	0, 0, 0, 621, 0, 0, 629, 1235, 0, 0,
	0, 632, 654, 643, 644, 641, 642, 633, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	901, 88, 0, 0, 0, 0, 670, 636, 0, 0,
	0, 89, 90, 91, 216, 685, 218, 686, 92, 687,
	688, 0, 93, 222, 223, 94, 639, 669, 689, 690,
	226, 0, 681, 0, 662, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 299, 102, 103, 0,
	663, 665, 0, 664, 666, 104, 105, 269, 106, 691,
	107, 692, 693, 0, 108, 0, 109, 0, 0, 0,
	684, 111, 0, 112, 0, 0, 0, 627, 113, 114,
	671, 672, 650, 0, 0, 115, 116, 694, 0, 117,
	0, 118, 0, 0, 300, 0, 119, 682, 0, 236,
	0, 120, 121, 122, 123, 678, 680, 302, 0, 127,
	0, 124, 0, 301, 125, 695, 126, 696, 697, 698,
	0, 661, 0, 303, 128, 304, 129, 130, 0, 132,
	131, 0, 683, 305, 133, 306, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 140, 245, 139, 307, 141,
	142, 144, 143, 622, 0, 651, 679, 145, 699, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 248,
	308, 151, 309, 673, 152, 153, 154, 155, 0, 674,
	156, 251, 157, 0, 158, 159, 160, 700, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 310, 174, 175, 628, 176, 0, 177,
	178, 179, 180, 0, 254, 181, 182, 667, 183, 184,
	311, 185, 701, 256, 186, 0, 192, 187, 188, 189,
	191, 702, 190, 675, 0, 193, 0, 194, 195, 196,
	197, 0, 259, 703, 704, 0, 0, 198, 676, 677,
	649, 199, 200, 201, 202, 0, 0, 203, 204, 205,
	668, 206, 0, 207, 208, 209, 264, 705, 0, 0,
	210, 0, 0, 0, 0, 211, 212, 213, 214, 623,
	0, 654, 643, 644, 641, 642, 633, 0, 0, 0,
	619, 620, 0, 0, 0, 0, 621, 86, 87, 629,
	88, 0, 0, 0, 632, 670, 636, 0, 0, 0,
	89, 90, 91, 216, 685, 218, 686, 92, 687, 688,
	0, 93, 222, 223, 94, 639, 669, 689, 690, 226,
	0, 681, 0, 662, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 299, 102, 2050, 0, 663,
	665, 0, 664, 666, 104, 105, 269, 106, 691, 107,
	692, 693, 0, 108, 0, 109, 0, 0, 0, 684,
	111, 0, 112, 0, 0, 0, 627, 113, 114, 671,
	672, 650, 0, 0, 115, 116, 694, 0, 117, 0,
	118, 0, 0, 300, 0, 119, 682, 0, 236, 0,
	120, 121, 122, 123, 678, 680, 302, 0, 127, 0,
	124, 0, 301, 125, 695, 126, 696, 697, 698, 0,
	661, 0, 303, 128, 304, 129, 130, 0, 132, 131,
	0, 683, 305, 133, 306, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 245, 139, 307, 141, 142,
	144, 143, 622, 0, 651, 679, 145, 699, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 248, 308,
	151, 309, 673, 152, 153, 154, 155, 0, 674, 156,
	251, 157, 0, 158, 159, 160, 700, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 310, 174, 175, 628, 176, 0, 177, 178,
	179, 180, 0, 254, 181, 182, 667, 183, 184, 311,
	185, 701, 256, 186, 0, 192, 187, 188, 189, 191,
	702, 190, 675, 0, 193, 0, 194, 195, 196, 197,
	0, 259, 703, 704, 0, 0, 198, 676, 677, 649,
	199, 200, 2049, 202, 0, 0, 203, 204, 205, 668,
	206, 0, 207, 208, 209, 264, 705, 0, 0, 210,
	0, 0, 0, 0, 211, 212, 213, 214, 623, 0,
	654, 643, 644, 641, 642, 633, 0, 0, 0, 619,
	620, 0, 0, 0, 0, 621, 86, 87, 629, 88,
	0, 0, 0, 632, 670, 636, 0, 0, 0, 89,
	90, 91, 2048, 685, 218, 686, 92, 687, 688, 0,
	93, 222, 223, 94, 639, 669, 689, 690, 226, 0,
	681, 0, 662, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 299, 102, 2050, 0, 663, 665,
	0, 664, 666, 104, 105, 269, 106, 691, 107, 692,
	693, 0, 108, 0, 109, 0, 0, 0, 684, 111,
	0, 112, 0, 0, 0, 627, 113, 114, 671, 672,
	650, 0, 0, 115, 116, 694, 0, 117, 0, 118,
	0, 0, 300, 0, 119, 682, 0, 236, 0, 120,
	121, 122, 123, 678, 680, 302, 0, 127, 0, 124,
	0, 301, 125, 695, 126, 696, 697, 698, 0, 661,
	0, 303, 128, 304, 129, 130, 0, 132, 131, 0,
	683, 305, 133, 306, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 140, 245, 139, 307, 141, 142, 144,
	143, 622, 0, 651, 679, 145, 699, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 248, 308, 151,
	309, 673, 152, 153, 154, 155, 0, 674, 156, 251,
	157, 0, 158, 159, 160, 700, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 310, 174, 175, 628, 176, 0, 177, 178, 179,
	180, 0, 254, 181, 182, 667, 183, 184, 311, 185,
	701, 256, 186, 0, 192, 187, 188, 189, 191, 702,
	190, 675, 0, 193, 0, 194, 195, 196, 197, 0,
	259, 703, 704, 0, 0, 198, 676, 677, 649, 199,
	200, 2049, 202, 0, 0, 203, 204, 205, 668, 206,
	0, 207, 208, 209, 264, 705, 0, 0, 210, 0,
	0, 0, 0, 211, 212, 213, 214, 623, 0, 654,
	643, 644, 641, 642, 633, 0, 0, 0, 619, 620,
	0, 0, 0, 0, 621, 86, 87, 629, 88, 0,
	0, 0, 632, 670, 636, 0, 0, 0, 89, 90,
	91, 216, 685, 218, 686, 92, 687, 688, 0, 93,
	222, 223, 94, 639, 669, 689, 690, 226, 0, 681,
	0, 662, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 299, 102, 103, 0, 663, 665, 0,
	664, 666, 104, 105, 269, 106, 691, 107, 692, 693,
	0, 108, 0, 109, 0, 0, 0, 684, 111, 0,
	112, 0, 0, 0, 627, 113, 114, 671, 672, 650,
	0, 0, 115, 116, 694, 0, 117, 0, 118, 0,
	0, 300, 0, 119, 682, 0, 236, 0, 120, 121,
	122, 123, 678, 680, 302, 0, 127, 0, 124, 0,
	301, 125, 695, 126, 696, 697, 698, 0, 661, 0,
	303, 128, 304, 129, 130, 0, 132, 131, 0, 683,
	305, 133, 306, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 245, 139, 307, 141, 142, 144, 143,
	622, 0, 651, 679, 145, 699, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 248, 308, 151, 309,
	673, 152, 153, 154, 155, 0, 674, 156, 251, 157,
	0, 158, 159, 160, 700, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	310, 174, 175, 628, 176, 0, 177, 178, 179, 180,
	0, 254, 181, 182, 667, 183, 184, 311, 185, 701,
	256, 186, 0, 192, 187, 188, 189, 191, 702, 190,
	675, 0, 193, 0, 194, 195, 196, 197, 0, 259,
	703, 704, 0, 0, 198, 676, 677, 649, 199, 200,
	201, 202, 0, 0, 203, 204, 205, 668, 206, 0,
	207, 208, 209, 264, 705, 0, 0, 210, 0, 0,
	0, 0, 211, 212, 213, 214, 623, 0, 1264, 643,
	644, 641, 642, 633, 0, 0, 0, 619, 620, 0,
	0, 0, 0, 621, 86, 87, 629, 88, 0, 0,
	0, 632, 670, 636, 0, 0, 0, 89, 90, 91,
	216, 685, 218, 686, 92, 687, 688, 0, 93, 222,
	223, 94, 639, 669, 689, 690, 226, 0, 681, 0,
	662, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 299, 102, 103, 0, 663, 665, 0, 664,
	666, 104, 105, 269, 106, 691, 1267, 692, 693, 0,
	108, 0, 109, 0, 0, 0, 684, 111, 0, 112,
	0, 0, 0, 627, 113, 114, 671, 672, 650, 0,
	0, 115, 116, 694, 0, 117, 0, 118, 0, 0,
	300, 0, 119, 682, 0, 236, 0, 120, 121, 1268,
	123, 678, 680, 302, 0, 127, 0, 124, 0, 301,
	125, 695, 126, 696, 697, 698, 0, 661, 0, 303,
	128, 304, 129, 130, 0, 132, 131, 0, 683, 305,
	133, 306, 0, 134, 0, 0, 135, 0, 136, 1269,
	1266, 140, 245, 139, 307, 141, 142, 144, 143, 622,
	0, 651, 679, 145, 699, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 248, 308, 151, 309, 673,
	152, 153, 154, 155, 0, 674, 156, 251, 157, 0,
	158, 159, 160, 700, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 310,
	174, 175, 628, 176, 0, 177, 178, 179, 1270, 0,
	254, 181, 182, 667, 183, 184, 311, 185, 701, 256,
	186, 0, 192, 187, 188, 189, 191, 702, 190, 675,
	0, 193, 0, 194, 195, 196, 197, 0, 259, 703,
	704, 0, 0, 198, 676, 677, 649, 199, 200, 201,
	202, 0, 0, 203, 204, 205, 668, 206, 0, 207,
	208, 209, 264, 705, 0, 0, 210, 0, 0, 0,
	0, 211, 212, 1265, 214, 623, 0, 654, 643, 644,
	641, 642, 633, 0, 0, 0, 619, 620, 0, 0,
	0, 0, 621, 86, 87, 629, 88, 0, 0, 0,
	632, 670, 636, 0, 0, 0, 89, 90, 91, 216,
	685, 218, 686, 92, 687, 688, 0, 93, 222, 223,
	94, 639, 669, 689, 690, 226, 0, 681, 0, 662,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 299, 102, 103, 0, 663, 665, 0, 664, 666,
	104, 105, 269, 106, 691, 107, 692, 693, 0, 108,
	0, 109, 0, 0, 0, 684, 111, 0, 112, 0,
	0, 0, 627, 113, 114, 671, 672, 650, 0, 0,
	115, 116, 694, 0, 117, 0, 118, 0, 0, 300,
	0, 119, 682, 0, 236, 0, 120, 121, 122, 123,
	678, 680, 302, 0, 127, 0, 124, 0, 301, 125,
	695, 126, 696, 697, 698, 0, 661, 0, 303, 128,
	304, 129, 130, 0, 132, 131, 0, 683, 305, 133,
	306, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 245, 139, 307, 141, 142, 144, 143, 0, 0,
	651, 679, 145, 699, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 248, 308, 151, 309, 673, 152,
	153, 154, 155, 0, 674, 156, 251, 157, 0, 158,
	159, 160, 700, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 310, 174,
	175, 1282, 176, 0, 177, 178, 179, 180, 0, 254,
	181, 182, 667, 183, 184, 311, 185, 701, 256, 186,
	0, 192, 187, 188, 189, 191, 702, 190, 675, 0,
	193, 0, 194, 195, 196, 197, 0, 259, 703, 704,
	0, 0, 198, 676, 677, 649, 199, 200, 201, 202,
	0, 0, 203, 204, 205, 668, 206, 0, 207, 208,
	209, 264, 705, 0, 0, 210, 0, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 654, 643, 644, 641,
	642, 633, 0, 0, 0, 1278, 1279, 0, 0, 0,
	0, 1280, 86, 87, 1281, 88, 0, 0, 0, 632,
	670, 636, 0, 0, 0, 89, 90, 91, 0, 685,
	218, 686, 92, 687, 688, 0, 93, 222, 223, 94,
	639, 669, 689, 690, 226, 0, 681, 0, 662, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	299, 102, 2050, 0, 663, 665, 0, 664, 666, 104,
	105, 269, 106, 691, 107, 692, 693, 0, 108, 0,
	109, 0, 0, 0, 684, 111, 0, 112, 0, 0,
	0, 627, 113, 114, 671, 672, 650, 0, 0, 115,
	116, 694, 0, 117, 0, 118, 0, 0, 300, 0,
	119, 682, 0, 236, 0, 120, 121, 122, 123, 678,
	680, 0, 0, 127, 0, 124, 0, 301, 125, 695,
	126, 696, 697, 698, 0, 661, 0, 0, 128, 304,
	129, 130, 0, 132, 131, 0, 683, 305, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	245, 139, 307, 141, 142, 144, 143, 622, 0, 651,
	679, 145, 699, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 248, 308, 151, 309, 673, 152, 153,
	154, 155, 0, 674, 156, 251, 157, 0, 158, 159,
	160, 700, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 310, 174, 175,
	628, 176, 0, 177, 178, 179, 180, 0, 254, 181,
	182, 667, 183, 184, 0, 185, 701, 256, 186, 0,
	192, 187, 188, 189, 191, 702, 190, 675, 0, 193,
	0, 194, 195, 196, 197, 0, 259, 703, 704, 0,
	0, 198, 676, 677, 649, 199, 200, 2049, 202, 0,
	0, 203, 204, 205, 668, 206, 0, 207, 208, 209,
	264, 705, 0, 0, 210, 0, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 654, 643, 644, 641, 642,
	633, 0, 0, 0, 619, 620, 0, 0, 0, 0,
	621, 86, 87, 629, 88, 0, 0, 0, 632, 670,
	636, 0, 0, 0, 89, 90, 91, 216, 685, 218,
	686, 92, 687, 688, 0, 93, 222, 223, 94, 0,
	669, 689, 690, 226, 0, 681, 0, 662, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 299,
	102, 103, 0, 663, 665, 0, 664, 666, 104, 105,
	269, 106, 691, 107, 692, 693, 0, 108, 0, 109,
	0, 0, 0, 684, 111, 0, 112, 0, 0, 0,
	231, 113, 114, 671, 672, 650, 0, 0, 115, 116,
	694, 0, 117, 0, 118, 0, 0, 300, 0, 119,
	682, 0, 236, 0, 120, 121, 122, 123, 678, 680,
	302, 0, 127, 0, 124, 0, 301, 125, 695, 126,
	696, 697, 698, 0, 661, 0, 303, 128, 304, 129,
	130, 0, 132, 131, 0, 683, 305, 133, 306, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 245,
	139, 307, 141, 142, 144, 143, 0, 0, 651, 679,
	145, 699, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 248, 308, 151, 309, 673, 152, 153, 154,
	155, 0, 674, 156, 251, 157, 0, 158, 159, 160,
	700, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 310, 174, 175, 1282,
	176, 0, 177, 178, 179, 180, 0, 254, 181, 182,
	667, 183, 184, 311, 185, 701, 256, 186, 0, 192,
	187, 188, 189, 191, 702, 190, 675, 0, 193, 0,
	194, 195, 196, 197, 0, 259, 703, 704, 0, 0,
	198, 676, 677, 649, 199, 200, 201, 202, 654, 0,
	203, 204, 205, 668, 206, 0, 207, 208, 209, 264,
	705, 0, 0, 210, 86, 87, 0, 88, 211, 212,
	213, 214, 670, 0, 0, 0, 0, 89, 90, 91,
	216, 217, 218, 219, 92, 220, 221, 0, 93, 222,
	223, 94, 1281, 669, 224, 225, 226, 632, 681, 0,
	662, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 299, 102, 103, 0, 663, 665, 0, 664,
	666, 104, 105, 269, 106, 228, 107, 229, 230, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 231, 113, 114, 671, 672, 0, 0,
	0, 115, 116, 234, 0, 117, 0, 118, 0, 0,
	300, 0, 119, 682, 0, 236, 0, 120, 121, 122,
	123, 678, 680, 302, 0, 127, 0, 124, 0, 301,
	125, 239, 126, 240, 241, 242, 0, 243, 0, 303,
	128, 304, 129, 130, 0, 132, 131, 0, 683, 305,
	133, 306, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 140, 245, 139, 307, 141, 142, 144, 143, 0,
	0, 0, 679, 145, 247, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 248, 308, 151, 309, 673,
	152, 153, 154, 155, 0, 674, 156, 251, 157, 0,
	158, 159, 160, 252, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 310,
	174, 175, 253, 176, 0, 177, 178, 179, 180, 0,
	254, 181, 182, 667, 183, 184, 311, 185, 255, 256,
	186, 0, 192, 187, 188, 189, 191, 257, 190, 675,
	0, 193, 0, 194, 195, 196, 197, 0, 259, 260,
	261, 0, 0, 198, 676, 677, 0, 199, 200, 201,
	202, 529, 0, 203, 204, 205, 668, 206, 0, 207,
	208, 209, 264, 265, 0, 0, 210, 86, 87, 0,
	88, 211, 212, 213, 214, 215, 0, 0, 0, 0,
	89, 90, 91, 216, 217, 218, 219, 92, 220, 221,
	0, 93, 222, 223, 94, 1549, 0, 224, 225, 226,
	0, 227, 0, 298, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 299, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 269, 106, 228, 107,
	229, 230, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 231, 113, 114, 232,
	233, 0, 0, 0, 115, 116, 234, 0, 117, 0,
	118, 0, 0, 300, 0, 119, 235, 0, 236, 0,
	120, 121, 122, 123, 237, 238, 302, 0, 127, 0,
	124, 0, 301, 125, 239, 126, 240, 241, 242, 0,
	243, 0, 303, 128, 304, 129, 130, 0, 132, 131,
	0, 244, 305, 133, 306, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 245, 139, 307, 141, 142,
	144, 143, 0, 0, 0, 246, 145, 247, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 248, 308,
	151, 309, 249, 152, 153, 154, 155, 0, 250, 156,
	251, 157, 0, 158, 159, 160, 252, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 310, 174, 175, 253, 176, 0, 177, 178,
	179, 180, 67, 254, 181, 182, 0, 183, 184, 311,
	185, 255, 256, 186, 0, 192, 187, 188, 189, 191,
	257, 190, 258, 0, 193, 69, 194, 195, 196, 197,
	0, 259, 260, 261, 0, 0, 198, 262, 263, 0,
	199, 200, 201, 202, 0, 0, 203, 204, 205, 0,
	206, 0, 207, 208, 209, 533, 265, 0, 0, 210,
	0, 0, 0, 65, 211, 212, 213, 214, 0, 66,
	529, 741, 0, 849, 846, 841, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 64, 88,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 89,
	90, 91, 216, 217, 218, 219, 92, 220, 221, 0,
	93, 222, 223, 94, 0, 0, 224, 225, 226, 0,
	227, 0, 298, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 299, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 269, 106, 228, 107, 229,
	230, 852, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 231, 113, 114, 232, 233,
	843, 0, 0, 115, 116, 234, 0, 117, 0, 118,
	0, 0, 300, 0, 119, 235, 0, 236, 0, 120,
	121, 122, 123, 237, 238, 302, 0, 127, 0, 124,
	0, 301, 125, 239, 126, 240, 241, 242, 0, 243,
	0, 303, 128, 304, 129, 130, 0, 132, 131, 0,
	244, 305, 133, 306, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 140, 245, 139, 307, 141, 142, 144,
	143, 0, 0, 0, 246, 145, 247, 146, 147, 0,
	148, 844, 0, 149, 0, 0, 150, 248, 308, 151,
	309, 249, 152, 153, 154, 155, 0, 250, 156, 251,
	157, 0, 158, 159, 160, 252, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 310, 174, 175, 253, 176, 0, 177, 178, 179,
	180, 0, 254, 181, 182, 0, 183, 184, 311, 185,
	255, 256, 186, 0, 192, 187, 188, 189, 191, 257,
	190, 258, 0, 193, 0, 194, 195, 196, 197, 0,
	259, 260, 261, 0, 0, 198, 262, 263, 842, 199,
	200, 201, 202, 0, 0, 203, 204, 205, 0, 206,
	0, 207, 208, 209, 264, 265, 529, 741, 210, 849,
	846, 841, 0, 211, 212, 213, 214, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 850, 847,
	215, 0, 0, 0, 0, 89, 90, 91, 216, 217,
	218, 219, 92, 220, 221, 0, 93, 222, 223, 94,
	0, 0, 224, 225, 226, 0, 227, 0, 298, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	299, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 269, 106, 228, 107, 229, 230, 837, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 231, 113, 114, 232, 233, 843, 0, 0, 115,
	116, 234, 0, 117, 0, 118, 0, 0, 300, 0,
	119, 235, 0, 236, 0, 120, 121, 122, 123, 237,
	238, 302, 0, 127, 0, 124, 0, 301, 125, 239,
	126, 240, 241, 242, 0, 243, 0, 303, 128, 304,
	129, 130, 0, 132, 131, 0, 244, 305, 133, 306,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	245, 139, 307, 141, 142, 144, 143, 0, 0, 0,
	246, 145, 247, 146, 147, 0, 148, 844, 0, 149,
	0, 0, 150, 248, 308, 151, 309, 249, 152, 153,
	154, 155, 0, 250, 156, 251, 157, 0, 158, 159,
	160, 252, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 310, 174, 175,
	253, 176, 0, 177, 178, 179, 180, 0, 254, 181,
	182, 0, 183, 184, 311, 185, 255, 256, 186, 0,
	192, 187, 188, 189, 191, 257, 190, 258, 0, 193,
	0, 194, 195, 196, 197, 0, 259, 260, 261, 0,
	0, 198, 262, 263, 842, 199, 200, 201, 202, 0,
	0, 203, 204, 205, 0, 206, 0, 207, 208, 209,
	264, 265, 529, 741, 210, 849, 846, 841, 0, 211,
	212, 213, 214, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 850, 847, 215, 0, 0, 0,
	0, 89, 90, 91, 216, 217, 218, 219, 92, 220,
	221, 0, 93, 222, 223, 94, 0, 0, 224, 225,
	226, 0, 227, 0, 298, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 299, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 269, 106, 228,
	107, 229, 230, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 231, 113, 114,
	232, 233, 843, 0, 0, 115, 116, 234, 0, 117,
	0, 118, 0, 0, 300, 0, 119, 235, 0, 236,
	0, 120, 121, 122, 123, 237, 238, 302, 0, 127,
	0, 124, 0, 301, 125, 239, 126, 240, 241, 242,
	0, 243, 0, 303, 128, 304, 129, 130, 0, 132,
	131, 0, 244, 305, 133, 306, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 140, 245, 139, 307, 141,
	142, 144, 143, 0, 0, 0, 246, 145, 247, 146,
	147, 0, 148, 844, 0, 149, 0, 0, 150, 248,
	308, 151, 309, 249, 152, 153, 154, 155, 0, 250,
	156, 251, 157, 0, 158, 159, 160, 252, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 310, 174, 175, 253, 176, 0, 177,
	178, 179, 180, 0, 254, 181, 182, 0, 183, 184,
	311, 185, 255, 256, 186, 0, 192, 187, 188, 189,
	191, 257, 190, 258, 0, 193, 0, 194, 195, 196,
	197, 0, 259, 260, 261, 0, 0, 198, 262, 263,
	842, 199, 200, 201, 202, 0, 0, 203, 204, 205,
	0, 206, 0, 207, 208, 209, 264, 265, 83, 0,
	210, 0, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	850, 847, 215, 0, 0, 0, 0, 89, 90, 91,
	216, 217, 218, 219, 92, 220, 221, 0, 93, 222,
	223, 94, 0, 0, 224, 225, 226, 0, 227, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 269, 106, 228, 107, 229, 230, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 231, 113, 114, 232, 233, 0, 0,
	0, 115, 116, 234, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 235, 0, 236, 0, 120, 121, 122,
	123, 237, 238, 0, 0, 127, 0, 124, 0, 0,
	125, 239, 126, 240, 241, 242, 0, 243, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 244, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 140, 245, 139, 0, 141, 142, 144, 143, 0,
	0, 0, 246, 145, 247, 146, 147, 0, 148, 0,
	483, 149, 0, 0, 150, 248, 0, 151, 0, 249,
	152, 153, 154, 155, 0, 250, 156, 251, 157, 0,
	158, 159, 160, 252, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 0,
	174, 175, 253, 176, 0, 177, 178, 179, 180, 67,
	254, 181, 182, 0, 183, 184, 0, 185, 255, 256,
	186, 0, 192, 187, 188, 189, 191, 257, 190, 258,
	0, 193, 69, 194, 195, 196, 197, 0, 259, 260,
	261, 0, 0, 198, 262, 263, 0, 199, 200, 201,
	202, 0, 0, 203, 204, 205, 0, 206, 0, 207,
	208, 209, 533, 265, 0, 0, 210, 83, 0, 0,
	65, 211, 212, 213, 214, 0, 66, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 215, 0, 1159, 0, 1164, 89, 90, 91, 216,
	217, 218, 219, 92, 220, 221, 0, 93, 222, 223,
	94, 0, 0, 224, 225, 226, 0, 227, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 269, 106, 228, 107, 229, 230, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 231, 113, 114, 232, 233, 0, 0, 0,
	115, 116, 234, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 235, 0, 236, 0, 120, 121, 122, 123,
	237, 238, 0, 0, 127, 0, 124, 0, 0, 125,
	239, 126, 240, 241, 242, 0, 243, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 244, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 245, 139, 0, 141, 142, 144, 143, 0, 0,
	0, 246, 145, 247, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 248, 0, 151, 0, 249, 152,
	153, 154, 155, 0, 250, 156, 251, 157, 0, 158,
	159, 160, 252, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 253, 176, 0, 177, 178, 179, 180, 67, 254,
	181, 182, 0, 183, 184, 0, 185, 255, 256, 186,
	0, 192, 187, 188, 189, 191, 257, 190, 258, 0,
	193, 69, 194, 195, 196, 197, 0, 259, 260, 261,
	0, 0, 198, 262, 263, 0, 199, 200, 201, 202,
	0, 0, 203, 204, 205, 0, 206, 0, 207, 208,
	209, 533, 265, 0, 0, 210, 83, 0, 0, 65,
	211, 212, 213, 214, 0, 66, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	215, 0, 0, 0, 64, 89, 90, 91, 216, 217,
	218, 219, 92, 220, 221, 0, 93, 222, 223, 94,
	0, 0, 224, 225, 226, 0, 227, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 269, 106, 228, 107, 229, 230, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 231, 113, 114, 232, 233, 0, 0, 0, 115,
	116, 234, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 235, 0, 236, 0, 120, 121, 122, 123, 237,
	238, 0, 0, 127, 0, 124, 0, 0, 125, 239,
	126, 240, 241, 242, 0, 243, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 244, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	245, 139, 0, 141, 142, 144, 143, 0, 0, 0,
	246, 145, 247, 146, 147, 0, 148, 0, 483, 149,
	0, 0, 150, 248, 0, 151, 0, 249, 152, 153,
	154, 155, 0, 250, 156, 251, 157, 0, 158, 159,
	160, 252, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 0, 174, 175,
	253, 176, 0, 177, 178, 179, 180, 0, 254, 181,
	182, 0, 183, 184, 0, 185, 255, 256, 186, 0,
	192, 187, 188, 189, 191, 257, 190, 258, 0, 193,
	0, 194, 195, 196, 197, 0, 259, 260, 261, 0,
	0, 198, 262, 263, 0, 199, 200, 201, 202, 0,
	0, 203, 204, 205, 0, 206, 0, 207, 208, 209,
	264, 265, 0, 0, 210, 83, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 215,
	0, 1159, 0, 1164, 89, 90, 91, 216, 217, 218,
	219, 92, 220, 221, 0, 93, 222, 223, 94, 0,
	0, 224, 225, 226, 0, 227, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	269, 106, 228, 107, 229, 230, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	231, 113, 114, 232, 233, 0, 0, 0, 115, 116,
	234, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	235, 0, 236, 0, 120, 121, 122, 123, 237, 238,
	0, 0, 127, 0, 124, 0, 0, 125, 239, 126,
	240, 241, 242, 0, 243, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 244, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 245,
	139, 0, 141, 142, 144, 143, 0, 0, 0, 246,
	145, 247, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 248, 0, 151, 0, 249, 152, 153, 154,
	155, 0, 250, 156, 251, 157, 0, 158, 159, 160,
	252, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 253,
	176, 0, 177, 178, 179, 180, 0, 254, 181, 182,
	0, 183, 184, 0, 185, 255, 256, 186, 0, 192,
	187, 188, 189, 191, 257, 190, 258, 0, 193, 0,
	194, 195, 196, 197, 0, 259, 260, 261, 0, 0,
	198, 262, 263, 0, 199, 200, 201, 202, 83, 0,
	203, 204, 205, 0, 206, 0, 207, 208, 209, 264,
	265, 0, 0, 210, 86, 87, 0, 88, 211, 212,
	213, 214, 215, 0, 0, 0, 0, 89, 90, 91,
	216, 217, 218, 219, 92, 220, 221, 0, 93, 222,
	223, 94, 0, 749, 224, 225, 226, 0, 227, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 269, 106, 228, 107, 229, 230, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 231, 113, 114, 232, 233, 0, 0,
	0, 115, 116, 234, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 235, 0, 236, 0, 120, 121, 122,
	123, 237, 238, 0, 0, 127, 0, 124, 0, 0,
	125, 239, 126, 240, 241, 242, 0, 243, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 244, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 140, 245, 139, 0, 141, 142, 144, 143, 0,
	0, 0, 246, 145, 247, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 248, 0, 151, 0, 249,
	152, 153, 154, 155, 0, 250, 156, 251, 157, 0,
	158, 159, 160, 252, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 0,
	174, 175, 253, 176, 0, 177, 178, 179, 180, 0,
	254, 181, 182, 0, 183, 184, 0, 185, 255, 256,
	186, 0, 192, 187, 188, 189, 191, 257, 190, 258,
	0, 193, 0, 194, 195, 196, 197, 0, 259, 260,
	261, 0, 0, 198, 262, 263, 0, 199, 200, 201,
	202, 83, 0, 203, 204, 205, 0, 206, 0, 207,
	208, 209, 264, 265, 0, 0, 210, 86, 87, 0,
	88, 211, 212, 213, 214, 215, 0, 0, 0, 0,
	89, 90, 91, 216, 217, 218, 219, 92, 220, 221,
	0, 93, 222, 223, 94, 1070, 0, 224, 225, 226,
	0, 227, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 269, 106, 228, 107,
	229, 230, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 231, 113, 114, 232,
	233, 0, 0, 0, 115, 116, 234, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 235, 0, 236, 0,
	120, 121, 122, 123, 237, 238, 0, 0, 127, 0,
	124, 0, 0, 125, 239, 126, 240, 241, 242, 0,
	243, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 244, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 245, 139, 0, 141, 142,
	144, 143, 0, 0, 0, 246, 145, 247, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 248, 0,
	151, 0, 249, 152, 153, 154, 155, 0, 250, 156,
	251, 157, 0, 158, 159, 160, 252, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 253, 176, 0, 177, 178,
	179, 180, 0, 254, 181, 182, 0, 183, 184, 0,
	185, 255, 256, 186, 0, 192, 187, 188, 189, 191,
	257, 190, 258, 0, 193, 0, 194, 195, 196, 197,
	0, 259, 260, 261, 0, 0, 198, 262, 263, 0,
	199, 200, 201, 202, 83, 0, 203, 204, 205, 0,
	206, 0, 207, 208, 209, 264, 265, 0, 0, 210,
	86, 87, 0, 88, 211, 212, 213, 214, 215, 0,
	0, 0, 0, 89, 90, 91, 216, 217, 218, 219,
	92, 220, 221, 0, 93, 222, 223, 94, 1670, 0,
	224, 225, 226, 0, 227, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 269,
	106, 228, 107, 229, 230, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 231,
	113, 114, 232, 233, 0, 0, 0, 115, 116, 234,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 235,
	0, 236, 0, 120, 121, 122, 123, 237, 238, 0,
	0, 127, 0, 124, 0, 0, 125, 239, 126, 240,
	241, 242, 0, 243, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 244, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 245, 139,
	0, 141, 142, 144, 143, 0, 0, 0, 246, 145,
	247, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 248, 0, 151, 0, 249, 152, 153, 154, 155,
	0, 250, 156, 251, 157, 0, 158, 159, 160, 252,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 0, 174, 175, 253, 176,
	0, 177, 178, 179, 180, 0, 254, 181, 182, 0,
	183, 184, 0, 185, 255, 256, 186, 0, 192, 187,
	188, 189, 191, 257, 190, 258, 0, 193, 0, 194,
	195, 196, 197, 0, 259, 260, 261, 0, 0, 198,
	262, 263, 0, 199, 200, 201, 202, 0, 0, 203,
	204, 205, 0, 206, 0, 207, 208, 209, 264, 265,
	0, 0, 210, 0, 0, 0, 0, 211, 212, 213,
	214, 654, 643, 644, 641, 642, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 716, 0, 0, 0, 215, 0, 0, 0, 0,
	89, 90, 91, 216, 685, 218, 686, 92, 687, 688,
	0, 93, 222, 223, 94, 0, 0, 689, 690, 226,
	0, 227, 0, 298, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 299, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 269, 106, 691, 107,
	692, 693, 0, 108, 0, 109, 0, 0, 0, 684,
	111, 0, 112, 0, 0, 0, 231, 113, 114, 232,
	233, 650, 0, 0, 115, 116, 694, 0, 117, 0,
	118, 0, 0, 300, 0, 119, 235, 0, 236, 0,
	120, 121, 122, 123, 237, 238, 302, 0, 127, 0,
	124, 0, 301, 125, 695, 126, 696, 697, 698, 0,
	661, 0, 303, 128, 304, 129, 130, 0, 132, 131,
	0, 244, 305, 133, 306, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 245, 139, 307, 141, 142,
	144, 143, 0, 0, 651, 246, 145, 699, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 248, 308,
	151, 309, 249, 152, 153, 154, 155, 0, 250, 156,
	251, 157, 0, 158, 159, 160, 700, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 310, 174, 175, 253, 176, 0, 177, 178,
	179, 180, 0, 254, 181, 182, 0, 183, 184, 311,
	185, 701, 256, 186, 0, 192, 187, 188, 189, 191,
	702, 190, 258, 0, 193, 0, 194, 195, 196, 197,
	0, 259, 703, 704, 0, 0, 198, 262, 263, 649,
	199, 200, 201, 202, 529, 741, 203, 204, 205, 739,
	206, 0, 207, 208, 209, 264, 705, 0, 0, 210,
	86, 87, 0, 88, 211, 212, 213, 214, 215, 0,
	0, 0, 0, 89, 90, 91, 216, 217, 218, 219,
	92, 220, 221, 0, 93, 222, 223, 94, 0, 0,
	224, 225, 226, 0, 227, 0, 298, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 299, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 269,
	106, 228, 107, 229, 230, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 231,
	113, 114, 232, 233, 0, 0, 0, 115, 116, 234,
	0, 117, 0, 118, 0, 0, 300, 0, 119, 235,
	0, 236, 0, 120, 121, 122, 123, 237, 238, 302,
	0, 127, 0, 124, 0, 301, 125, 239, 126, 240,
	241, 242, 0, 243, 0, 303, 128, 304, 129, 130,
	0, 132, 131, 0, 244, 305, 133, 306, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 245, 139,
	307, 141, 142, 144, 143, 0, 0, 0, 246, 145,
	247, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 248, 308, 151, 309, 249, 152, 153, 154, 155,
	0, 250, 156, 251, 157, 0, 158, 159, 160, 252,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 310, 174, 175, 253, 176,
	0, 177, 178, 179, 180, 0, 254, 181, 182, 0,
	183, 184, 311, 185, 255, 256, 186, 0, 192, 187,
	188, 189, 191, 257, 190, 258, 0, 193, 0, 194,
	195, 196, 197, 0, 259, 260, 261, 0, 0, 198,
	262, 263, 0, 199, 200, 201, 202, 83, 0, 203,
	204, 205, 0, 206, 0, 207, 208, 209, 264, 265,
	0, 0, 210, 86, 87, 0, 88, 211, 212, 213,
	214, 215, 0, 0, 0, 0, 89, 90, 91, 216,
	217, 218, 219, 92, 220, 221, 0, 93, 222, 223,
	94, 0, 0, 224, 225, 226, 0, 227, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 79, 106, 228, 107, 229, 230, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 231, 113, 114, 232, 233, 0, 0, 0,
	115, 116, 234, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 235, 0, 236, 0, 120, 121, 122, 123,
	237, 238, 0, 0, 127, 0, 124, 0, 0, 125,
	239, 126, 240, 241, 242, 0, 243, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 244, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 245, 139, 0, 141, 142, 144, 143, 0, 0,
	0, 246, 145, 247, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 248, 0, 151, 0, 249, 152,
	153, 154, 155, 0, 250, 156, 251, 157, 0, 158,
	159, 160, 252, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 253, 176, 0, 177, 178, 179, 180, 0, 254,
	181, 182, 0, 183, 184, 0, 185, 255, 256, 186,
	0, 192, 187, 188, 189, 191, 257, 190, 258, 0,
	193, 78, 194, 195, 196, 197, 0, 259, 260, 261,
	0, 0, 198, 262, 263, 0, 199, 200, 201, 202,
	0, 0, 203, 204, 205, 0, 206, 0, 207, 208,
	209, 264, 265, 0, 0, 210, 529, 741, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 82, 0, 0,
	215, 0, 0, 0, 0, 89, 90, 91, 216, 217,
	218, 219, 92, 220, 221, 0, 93, 222, 223, 94,
	0, 0, 224, 225, 226, 0, 227, 0, 298, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	299, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 269, 106, 228, 107, 229, 230, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 231, 113, 114, 232, 233, 0, 0, 0, 115,
	116, 234, 0, 117, 0, 118, 0, 0, 300, 0,
	119, 235, 0, 236, 0, 120, 121, 122, 123, 237,
	238, 302, 0, 127, 0, 124, 0, 301, 125, 239,
	126, 240, 241, 242, 0, 243, 0, 303, 128, 304,
	129, 130, 0, 132, 131, 0, 244, 305, 133, 306,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	245, 139, 307, 141, 142, 144, 143, 0, 0, 0,
	246, 145, 247, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 248, 308, 151, 309, 249, 152, 153,
	154, 155, 0, 250, 156, 251, 157, 0, 158, 159,
	160, 252, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 310, 174, 175,
	253, 176, 0, 177, 178, 179, 180, 0, 254, 181,
	182, 0, 183, 184, 311, 185, 255, 256, 186, 0,
	192, 187, 188, 189, 191, 257, 190, 258, 0, 193,
	0, 194, 195, 196, 197, 0, 259, 260, 261, 0,
	0, 198, 262, 263, 0, 199, 200, 201, 202, 83,
	0, 203, 204, 205, 0, 206, 0, 207, 208, 209,
	264, 265, 0, 0, 210, 86, 87, 0, 88, 211,
	212, 213, 214, 215, 0, 0, 0, 0, 89, 90,
	91, 216, 217, 218, 219, 92, 220, 221, 0, 93,
	222, 223, 94, 0, 0, 224, 225, 226, 0, 227,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 269, 106, 228, 107, 229, 230,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 231, 113, 114, 232, 233, 0,
	0, 0, 115, 116, 234, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 235, 0, 236, 0, 120, 121,
	122, 123, 237, 238, 0, 0, 127, 0, 124, 0,
	0, 125, 239, 126, 240, 241, 242, 0, 243, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 244,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 245, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 246, 145, 247, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 248, 0, 151, 0,
	249, 152, 153, 154, 155, 0, 250, 156, 251, 157,
	0, 158, 159, 160, 252, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 253, 176, 0, 177, 178, 179, 180,
	0, 254, 181, 182, 0, 183, 184, 0, 185, 255,
	256, 186, 0, 192, 187, 188, 189, 191, 257, 190,
	258, 0, 193, 0, 194, 195, 196, 197, 0, 259,
	260, 261, 0, 0, 198, 262, 263, 0, 199, 200,
	201, 202, 0, 0, 203, 204, 205, 0, 206, 0,
	207, 208, 209, 264, 265, 0, 529, 210, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 82,
	215, 0, 0, 0, 0, 89, 90, 91, 216, 217,
	218, 219, 92, 220, 221, 0, 93, 222, 223, 94,
	0, 0, 224, 225, 226, 0, 227, 0, 298, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	299, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 269, 106, 228, 107, 229, 230, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 231, 113, 114, 232, 233, 0, 0, 0, 115,
	116, 234, 0, 117, 0, 118, 0, 0, 300, 0,
	119, 235, 0, 236, 0, 120, 121, 122, 123, 237,
	238, 302, 0, 127, 0, 124, 0, 301, 125, 239,
	126, 240, 241, 242, 0, 243, 0, 303, 128, 304,
	129, 130, 0, 132, 131, 0, 244, 305, 133, 306,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	245, 139, 307, 141, 142, 144, 143, 0, 0, 0,
	246, 145, 247, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 248, 308, 151, 309, 249, 152, 153,
	154, 155, 0, 250, 156, 251, 157, 0, 158, 159,
	160, 252, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 310, 174, 175,
	253, 176, 0, 177, 178, 179, 180, 0, 254, 181,
	182, 0, 183, 184, 311, 185, 255, 256, 186, 0,
	192, 187, 188, 189, 191, 257, 190, 258, 0, 193,
	0, 194, 195, 196, 197, 0, 259, 260, 261, 0,
	0, 198, 262, 263, 0, 199, 200, 201, 202, 83,
	0, 203, 204, 205, 0, 206, 0, 207, 208, 209,
	264, 265, 0, 0, 210, 86, 87, 0, 88, 211,
	212, 213, 214, 215, 0, 0, 0, 0, 89, 90,
	91, 216, 217, 218, 219, 92, 220, 221, 0, 93,
	222, 223, 94, 0, 0, 224, 225, 226, 1031, 227,
	0, 0, 0, 95, 96, 97, 0, 98, 1029, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 269, 106, 228, 107, 229, 230,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 231, 113, 114, 232, 233, 0,
	1135, 0, 115, 116, 234, 0, 117, 0, 118, 1034,
	0, 0, 0, 119, 235, 0, 236, 0, 120, 121,
	122, 123, 237, 238, 0, 0, 127, 1133, 124, 0,
	0, 125, 239, 126, 240, 241, 242, 0, 243, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 244,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 245, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 246, 145, 247, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 248, 0, 151, 0,
	249, 152, 153, 154, 155, 0, 250, 156, 251, 157,
	1033, 158, 159, 160, 252, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 253, 176, 0, 177, 178, 179, 180,
	0, 254, 181, 182, 0, 183, 184, 0, 185, 255,
	256, 186, 0, 192, 187, 188, 189, 191, 257, 190,
	258, 0, 193, 0, 194, 195, 196, 197, 0, 259,
	260, 261, 0, 0, 198, 262, 263, 0, 199, 200,
	201, 202, 83, 1134, 203, 204, 205, 0, 206, 0,
	207, 208, 209, 264, 265, 0, 0, 210, 86, 87,
	0, 88, 211, 212, 213, 214, 215, 0, 0, 0,
	0, 89, 90, 91, 216, 217, 218, 219, 92, 220,
	221, 0, 93, 222, 223, 94, 0, 0, 224, 225,
	226, 1031, 227, 0, 0, 1026, 95, 96, 97, 0,
	98, 1029, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 269, 106, 228,
	107, 229, 230, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 231, 113, 114,
	232, 233, 0, 0, 0, 115, 116, 234, 0, 117,
	0, 118, 1034, 0, 0, 0, 119, 235, 0, 236,
	0, 120, 121, 122, 123, 1025, 238, 0, 0, 127,
	0, 124, 0, 0, 125, 239, 126, 240, 241, 242,
	0, 243, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 244, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 140, 245, 139, 0, 141,
	142, 144, 143, 0, 0, 0, 246, 145, 247, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 248,
	0, 151, 0, 249, 152, 153, 154, 155, 0, 250,
	156, 251, 157, 1033, 158, 159, 160, 252, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 0, 174, 175, 253, 176, 0, 177,
	178, 179, 180, 0, 254, 181, 182, 0, 183, 184,
	0, 185, 255, 256, 186, 0, 192, 187, 188, 189,
	191, 257, 190, 258, 0, 193, 0, 194, 195, 196,
	197, 0, 259, 260, 261, 0, 0, 198, 262, 263,
	0, 199, 200, 201, 202, 83, 1032, 203, 204, 205,
	0, 206, 0, 207, 208, 209, 264, 265, 0, 0,
	210, 86, 87, 0, 88, 211, 212, 213, 214, 215,
	0, 1637, 0, 0, 89, 90, 91, 216, 217, 218,
	219, 92, 220, 221, 0, 93, 222, 223, 94, 0,
	0, 224, 225, 226, 0, 227, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	269, 106, 228, 107, 229, 230, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	231, 113, 114, 232, 233, 0, 0, 0, 115, 116,
	234, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	235, 0, 236, 0, 120, 121, 122, 123, 237, 238,
	0, 0, 127, 0, 124, 0, 0, 125, 239, 126,
	240, 241, 242, 0, 243, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 244, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 245,
	139, 0, 141, 142, 144, 143, 0, 0, 0, 246,
	145, 247, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 248, 0, 151, 0, 249, 152, 153, 154,
	155, 0, 250, 156, 251, 157, 0, 158, 159, 160,
	252, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 253,
	176, 0, 177, 178, 179, 180, 0, 254, 181, 182,
	0, 183, 184, 0, 185, 255, 256, 186, 0, 192,
	187, 188, 189, 191, 257, 190, 258, 0, 193, 0,
	194, 195, 196, 197, 0, 259, 260, 261, 0, 0,
	198, 262, 263, 0, 199, 200, 201, 202, 83, 0,
	203, 204, 205, 0, 206, 0, 207, 208, 209, 264,
	265, 0, 0, 210, 86, 87, 0, 88, 211, 212,
	213, 214, 215, 0, 0, 0, 0, 89, 90, 91,
	216, 217, 218, 219, 92, 220, 221, 0, 93, 222,
	223, 94, 0, 0, 224, 225, 226, 0, 227, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 269, 106, 228, 107, 229, 230, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 231, 113, 114, 232, 233, 0, 0,
	0, 115, 116, 234, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 235, 0, 236, 0, 120, 121, 122,
	123, 237, 238, 0, 0, 127, 0, 124, 0, 0,
	125, 239, 126, 240, 241, 242, 0, 243, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 244, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 140, 245, 139, 0, 141, 142, 144, 143, 0,
	0, 0, 246, 145, 247, 146, 147, 0, 148, 0,
	483, 149, 0, 0, 150, 248, 0, 151, 0, 249,
	152, 153, 154, 155, 0, 250, 156, 251, 157, 0,
	158, 159, 160, 252, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 0,
	174, 175, 253, 176, 0, 177, 178, 179, 180, 0,
	254, 181, 182, 0, 183, 184, 0, 185, 255, 256,
	186, 0, 192, 187, 188, 189, 191, 257, 190, 258,
	0, 193, 0, 194, 195, 196, 197, 0, 259, 260,
	261, 0, 0, 198, 262, 263, 0, 199, 200, 201,
	202, 83, 0, 203, 204, 205, 0, 206, 0, 207,
	208, 209, 264, 265, 0, 0, 210, 86, 87, 0,
	88, 211, 212, 213, 214, 215, 0, 0, 0, 0,
	89, 90, 91, 216, 217, 218, 219, 92, 220, 221,
	0, 93, 222, 223, 94, 0, 0, 224, 225, 226,
	0, 227, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 269, 106, 228, 107,
	229, 230, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 231, 113, 114, 232,
	233, 0, 0, 0, 115, 116, 234, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 235, 0, 236, 0,
	120, 121, 122, 123, 774, 238, 0, 0, 127, 0,
	124, 0, 0, 125, 239, 126, 240, 241, 242, 0,
	243, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 244, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 245, 139, 0, 141, 142,
	144, 143, 0, 0, 0, 246, 145, 247, 146, 147,
	0, 148, 0, 483, 149, 0, 0, 150, 248, 0,
	151, 0, 249, 152, 153, 154, 155, 0, 250, 156,
	251, 157, 0, 158, 159, 160, 252, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 253, 176, 0, 177, 178,
	179, 180, 0, 254, 181, 182, 0, 183, 184, 0,
	185, 255, 256, 186, 0, 192, 187, 188, 189, 191,
	257, 190, 258, 0, 193, 0, 194, 195, 196, 197,
	0, 259, 260, 261, 0, 0, 198, 262, 263, 0,
	199, 200, 201, 202, 83, 0, 203, 204, 205, 0,
	206, 0, 207, 208, 209, 264, 265, 0, 0, 210,
	86, 87, 541, 88, 211, 212, 213, 214, 215, 0,
	0, 0, 0, 89, 90, 91, 216, 217, 218, 219,
	92, 220, 221, 0, 93, 222, 223, 94, 0, 0,
	224, 225, 226, 0, 227, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 269,
	106, 228, 107, 229, 230, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 231,
	113, 114, 232, 233, 0, 0, 0, 115, 116, 234,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 235,
	0, 236, 0, 120, 121, 122, 123, 237, 238, 0,
	0, 127, 0, 124, 0, 0, 125, 239, 126, 240,
	241, 242, 0, 243, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 244, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 245, 139,
	0, 141, 142, 144, 143, 0, 0, 0, 246, 145,
	247, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 248, 0, 151, 0, 249, 152, 153, 154, 155,
	0, 250, 156, 251, 157, 0, 158, 159, 160, 252,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 0, 174, 175, 253, 176,
	0, 177, 178, 179, 180, 0, 254, 181, 182, 0,
	183, 184, 0, 185, 255, 256, 186, 0, 192, 187,
	188, 189, 191, 257, 190, 258, 0, 193, 0, 194,
	195, 196, 197, 0, 259, 260, 261, 0, 0, 198,
	262, 263, 0, 199, 200, 201, 202, 83, 0, 203,
	204, 205, 0, 206, 0, 207, 208, 209, 264, 265,
	0, 0, 210, 86, 87, 0, 88, 211, 212, 213,
	214, 215, 0, 0, 0, 0, 89, 90, 91, 216,
	217, 218, 219, 92, 220, 221, 0, 93, 222, 223,
	94, 0, 0, 224, 225, 226, 0, 227, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 269, 106, 228, 107, 229, 230, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 231, 113, 114, 232, 233, 0, 0, 0,
	115, 116, 234, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 235, 0, 236, 0, 120, 121, 122, 123,
	495, 238, 0, 0, 127, 0, 124, 0, 0, 125,
	239, 126, 240, 241, 242, 0, 243, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 244, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 245, 139, 0, 141, 142, 144, 143, 0, 0,
	0, 246, 145, 247, 146, 147, 0, 148, 0, 483,
	149, 0, 0, 150, 248, 0, 151, 0, 249, 152,
	153, 154, 155, 0, 250, 156, 251, 157, 0, 158,
	159, 160, 252, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 253, 176, 0, 177, 178, 179, 180, 0, 254,
	181, 182, 0, 183, 184, 0, 185, 255, 256, 186,
	0, 192, 187, 188, 189, 191, 257, 190, 258, 0,
	193, 0, 194, 195, 196, 197, 0, 259, 260, 261,
	0, 0, 198, 262, 263, 0, 199, 200, 201, 202,
	83, 0, 203, 204, 205, 0, 206, 0, 207, 208,
	209, 264, 265, 0, 0, 210, 86, 87, 0, 88,
	211, 212, 213, 214, 215, 0, 0, 0, 0, 89,
	90, 91, 216, 217, 218, 219, 92, 220, 221, 0,
	93, 222, 223, 94, 0, 0, 224, 225, 226, 0,
	227, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 269, 106, 228, 107, 229,
	230, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 231, 113, 114, 232, 233,
	0, 0, 0, 115, 116, 234, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 235, 0, 236, 0, 120,
	121, 122, 123, 488, 238, 0, 0, 127, 0, 124,
	0, 0, 125, 239, 126, 240, 241, 242, 0, 243,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	244, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 140, 245, 139, 0, 141, 142, 144,
	143, 0, 0, 0, 246, 145, 247, 146, 147, 0,
	148, 0, 483, 149, 0, 0, 150, 248, 0, 151,
	0, 249, 152, 153, 154, 155, 0, 250, 156, 251,
	157, 0, 158, 159, 160, 252, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 0, 174, 175, 253, 176, 0, 177, 178, 179,
	180, 0, 254, 181, 182, 0, 183, 184, 0, 185,
	255, 256, 186, 0, 192, 187, 188, 189, 191, 257,
	190, 258, 0, 193, 0, 194, 195, 196, 197, 0,
	259, 260, 261, 0, 0, 198, 262, 263, 0, 199,
	200, 201, 202, 83, 0, 203, 204, 205, 0, 206,
	0, 207, 208, 209, 264, 265, 0, 0, 210, 86,
	87, 397, 88, 211, 212, 213, 214, 215, 0, 0,
	0, 0, 89, 90, 91, 216, 217, 218, 219, 92,
	220, 221, 0, 93, 222, 223, 94, 0, 0, 224,
	225, 226, 0, 227, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 269, 106,
	228, 107, 229, 230, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 231, 113,
	114, 232, 233, 0, 0, 0, 115, 116, 234, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 235, 0,
	236, 0, 120, 121, 122, 123, 237, 238, 0, 0,
	127, 0, 124, 0, 0, 125, 239, 126, 240, 241,
	242, 0, 243, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 244, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 245, 139, 0,
	141, 142, 144, 143, 0, 0, 0, 246, 145, 247,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	248, 0, 151, 0, 249, 152, 153, 154, 155, 0,
	250, 156, 251, 396, 0, 158, 159, 160, 252, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 253, 176, 0,
	177, 178, 179, 180, 0, 254, 181, 182, 0, 183,
	184, 0, 185, 255, 256, 186, 0, 192, 187, 188,
	189, 191, 257, 190, 258, 0, 193, 0, 194, 195,
	196, 197, 0, 259, 260, 261, 0, 0, 198, 262,
	263, 0, 199, 200, 201, 202, 83, 0, 203, 204,
	205, 0, 206, 0, 207, 208, 209, 264, 265, 0,
	0, 210, 86, 87, 0, 88, 211, 212, 213, 214,
	215, 0, 0, 0, 0, 89, 90, 91, 216, 217,
	218, 219, 92, 220, 221, 0, 93, 222, 223, 94,
	0, 0, 224, 225, 226, 0, 227, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 269, 106, 228, 107, 229, 230, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 231, 113, 114, 232, 233, 0, 0, 0, 115,
	116, 234, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 235, 0, 236, 0, 120, 121, 122, 123, 237,
	238, 0, 0, 127, 0, 124, 0, 0, 125, 239,
	126, 240, 241, 242, 0, 243, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 244, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	245, 139, 0, 141, 142, 144, 143, 0, 0, 0,
	246, 145, 247, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 248, 0, 151, 0, 249, 152, 153,
	154, 155, 0, 250, 156, 251, 157, 0, 158, 159,
	160, 252, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 0, 174, 175,
	253, 176, 0, 177, 178, 179, 180, 0, 254, 181,
	182, 0, 183, 184, 0, 185, 255, 256, 186, 0,
	192, 187, 188, 189, 191, 257, 190, 258, 0, 193,
	0, 194, 195, 196, 197, 0, 259, 260, 261, 0,
	0, 198, 262, 263, 0, 199, 200, 201, 202, 83,
	0, 203, 204, 205, 0, 206, 0, 207, 208, 209,
	264, 265, 0, 0, 210, 86, 87, 0, 88, 211,
	212, 213, 214, 215, 0, 0, 0, 0, 89, 90,
	91, 216, 217, 218, 219, 92, 220, 221, 0, 93,
	222, 223, 94, 0, 0, 224, 225, 226, 0, 227,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 269, 106, 228, 107, 229, 230,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 231, 113, 114, 232, 233, 0,
	0, 0, 115, 116, 234, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 235, 0, 236, 0, 120, 121,
	122, 123, 1328, 238, 0, 0, 127, 0, 124, 0,
	0, 125, 239, 126, 240, 241, 242, 0, 243, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 244,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 245, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 246, 145, 247, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 248, 0, 151, 0,
	249, 152, 153, 154, 155, 0, 250, 156, 251, 157,
	0, 158, 159, 160, 252, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 253, 176, 0, 177, 178, 179, 180,
	0, 254, 181, 182, 0, 183, 184, 0, 185, 255,
	256, 186, 0, 192, 187, 188, 189, 191, 257, 190,
	258, 0, 193, 0, 194, 195, 196, 197, 0, 259,
	260, 261, 0, 0, 198, 262, 263, 0, 199, 200,
	201, 202, 83, 0, 203, 204, 205, 0, 206, 0,
	207, 208, 209, 264, 265, 0, 0, 210, 86, 87,
	0, 88, 211, 212, 213, 214, 215, 0, 0, 0,
	0, 89, 90, 91, 216, 217, 218, 219, 92, 220,
	221, 0, 93, 222, 223, 94, 0, 0, 224, 225,
	226, 0, 227, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 269, 106, 228,
	107, 229, 230, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 231, 113, 114,
	232, 233, 0, 0, 0, 115, 116, 234, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 235, 0, 236,
	0, 120, 121, 122, 123, 1326, 238, 0, 0, 127,
	0, 124, 0, 0, 125, 239, 126, 240, 241, 242,
	0, 243, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 244, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 140, 245, 139, 0, 141,
	142, 144, 143, 0, 0, 0, 246, 145, 247, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 248,
	0, 151, 0, 249, 152, 153, 154, 155, 0, 250,
	156, 251, 157, 0, 158, 159, 160, 252, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 0, 174, 175, 253, 176, 0, 177,
	178, 179, 180, 0, 254, 181, 182, 0, 183, 184,
	0, 185, 255, 256, 186, 0, 192, 187, 188, 189,
	191, 257, 190, 258, 0, 193, 0, 194, 195, 196,
	197, 0, 259, 260, 261, 0, 0, 198, 262, 263,
	0, 199, 200, 201, 202, 83, 0, 203, 204, 205,
	0, 206, 0, 207, 208, 209, 264, 265, 0, 0,
	210, 86, 87, 0, 88, 211, 212, 213, 214, 215,
	0, 0, 0, 0, 89, 90, 91, 216, 217, 218,
	219, 92, 220, 221, 0, 93, 222, 223, 94, 0,
	0, 224, 225, 226, 0, 227, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	269, 106, 228, 107, 229, 230, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	231, 113, 114, 232, 233, 0, 0, 0, 115, 116,
	234, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	235, 0, 236, 0, 120, 121, 122, 123, 1315, 238,
	0, 0, 127, 0, 124, 0, 0, 125, 239, 126,
	240, 241, 242, 0, 243, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 244, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 245,
	139, 0, 141, 142, 144, 143, 0, 0, 0, 246,
	145, 247, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 248, 0, 151, 0, 249, 152, 153, 154,
	155, 0, 250, 156, 251, 157, 0, 158, 159, 160,
	252, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 253,
	176, 0, 177, 178, 179, 180, 0, 254, 181, 182,
	0, 183, 184, 0, 185, 255, 256, 186, 0, 192,
	187, 188, 189, 191, 257, 190, 258, 0, 193, 0,
	194, 195, 196, 197, 0, 259, 260, 261, 0, 0,
	198, 262, 263, 0, 199, 200, 201, 202, 83, 0,
	203, 204, 205, 0, 206, 0, 207, 208, 209, 264,
	265, 0, 0, 210, 86, 87, 0, 88, 211, 212,
	213, 214, 215, 0, 0, 0, 0, 89, 90, 91,
	216, 217, 218, 219, 92, 220, 221, 0, 93, 222,
	223, 94, 0, 0, 224, 225, 226, 0, 227, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 269, 106, 228, 107, 229, 230, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 231, 113, 114, 232, 233, 0, 0,
	0, 115, 116, 234, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 235, 0, 236, 0, 120, 121, 122,
	123, 892, 238, 0, 0, 127, 0, 124, 0, 0,
	125, 239, 126, 240, 241, 242, 0, 243, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 244, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 140, 245, 139, 0, 141, 142, 144, 143, 0,
	0, 0, 246, 145, 247, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 248, 0, 151, 0, 249,
	152, 153, 154, 155, 0, 250, 156, 251, 157, 0,
	158, 159, 160, 252, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 0,
	174, 175, 253, 176, 0, 177, 178, 179, 180, 0,
	254, 181, 182, 0, 183, 184, 0, 185, 255, 256,
	186, 0, 192, 187, 188, 189, 191, 257, 190, 258,
	0, 193, 0, 194, 195, 196, 197, 0, 259, 260,
	261, 0, 0, 198, 262, 263, 0, 199, 200, 201,
	202, 83, 0, 203, 204, 205, 0, 206, 0, 207,
	208, 209, 264, 265, 0, 0, 210, 86, 87, 0,
	88, 211, 212, 213, 214, 215, 0, 0, 0, 0,
	89, 90, 91, 216, 217, 218, 219, 92, 220, 221,
	0, 93, 222, 223, 94, 0, 0, 224, 225, 226,
	0, 227, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 269, 106, 228, 107,
	229, 230, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 231, 113, 114, 232,
	233, 0, 0, 0, 115, 116, 234, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 235, 0, 236, 0,
	120, 121, 122, 123, 237, 238, 0, 0, 127, 0,
	124, 0, 0, 125, 239, 126, 240, 241, 242, 0,
	243, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 244, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 245, 139, 0, 141, 142,
	144, 143, 0, 0, 0, 246, 145, 247, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 248, 0,
	151, 0, 249, 152, 153, 154, 155, 0, 250, 156,
	251, 157, 0, 158, 159, 160, 252, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 253, 176, 0, 177, 411,
	179, 180, 0, 254, 181, 182, 0, 183, 184, 0,
	185, 255, 256, 186, 0, 192, 187, 188, 189, 191,
	257, 190, 258, 0, 193, 0, 194, 195, 196, 197,
	0, 259, 260, 261, 0, 0, 198, 262, 263, 0,
	199, 200, 201, 202, 83, 0, 203, 204, 205, 0,
	206, 0, 207, 208, 209, 264, 265, 0, 0, 210,
	86, 87, 0, 88, 211, 212, 213, 214, 215, 0,
	759, 0, 0, 89, 90, 91, 216, 217, 218, 219,
	92, 220, 221, 0, 93, 222, 223, 94, 0, 0,
	224, 225, 226, 0, 227, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 269,
	106, 228, 107, 229, 230, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 231,
	113, 114, 232, 233, 0, 0, 0, 115, 116, 234,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 235,
	0, 236, 0, 120, 121, 122, 123, 237, 238, 0,
	0, 127, 0, 124, 0, 0, 125, 239, 126, 240,
	241, 242, 0, 243, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 244, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 245, 139,
	0, 141, 142, 144, 143, 0, 0, 0, 246, 145,
	247, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 248, 0, 151, 0, 249, 152, 153, 154, 155,
	0, 250, 156, 251, 157, 0, 158, 159, 160, 252,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 0, 174, 175, 253, 176,
	0, 177, 178, 179, 180, 0, 254, 181, 182, 0,
	0, 184, 0, 185, 255, 256, 186, 0, 192, 187,
	188, 189, 191, 257, 190, 258, 0, 193, 0, 194,
	195, 196, 197, 0, 259, 260, 261, 0, 0, 198,
	262, 263, 0, 199, 200, 201, 202, 83, 0, 203,
	204, 205, 0, 206, 0, 207, 208, 209, 264, 265,
	0, 0, 210, 86, 87, 0, 88, 211, 212, 213,
	214, 215, 0, 0, 0, 0, 89, 90, 91, 216,
	217, 218, 219, 92, 220, 221, 0, 93, 222, 223,
	94, 0, 0, 224, 225, 226, 0, 227, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 269, 106, 228, 107, 229, 230, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 231, 113, 114, 232, 233, 0, 0, 0,
	115, 116, 234, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 235, 0, 236, 0, 120, 121, 122, 123,
	594, 238, 0, 0, 127, 0, 124, 0, 0, 125,
	239, 126, 240, 241, 242, 0, 243, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 244, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 245, 139, 0, 141, 142, 144, 143, 0, 0,
	0, 246, 145, 247, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 248, 0, 151, 0, 249, 152,
	153, 154, 155, 0, 250, 156, 251, 157, 0, 158,
	159, 160, 252, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 253, 176, 0, 177, 178, 179, 180, 0, 254,
	181, 182, 0, 183, 184, 0, 185, 255, 256, 186,
	0, 192, 187, 188, 189, 191, 257, 190, 258, 0,
	193, 0, 194, 195, 196, 197, 0, 259, 260, 261,
	0, 0, 198, 262, 263, 0, 199, 200, 201, 202,
	83, 0, 203, 204, 205, 0, 206, 0, 207, 208,
	209, 264, 265, 0, 0, 210, 86, 87, 0, 88,
	211, 212, 213, 214, 215, 0, 0, 0, 0, 89,
	90, 91, 216, 217, 218, 219, 92, 220, 221, 0,
	93, 222, 223, 94, 0, 0, 224, 225, 226, 0,
	227, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 269, 106, 228, 107, 229,
	230, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 231, 113, 114, 232, 233,
	0, 0, 0, 115, 116, 234, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 235, 0, 236, 0, 120,
	121, 122, 123, 589, 238, 0, 0, 127, 0, 124,
	0, 0, 125, 239, 126, 240, 241, 242, 0, 243,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	244, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 140, 245, 139, 0, 141, 142, 144,
	143, 0, 0, 0, 246, 145, 247, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 248, 0, 151,
	0, 249, 152, 153, 154, 155, 0, 250, 156, 251,
	157, 0, 158, 159, 160, 252, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 0, 174, 175, 253, 176, 0, 177, 178, 179,
	180, 0, 254, 181, 182, 0, 183, 184, 0, 185,
	255, 256, 186, 0, 192, 187, 188, 189, 191, 257,
	190, 258, 0, 193, 0, 194, 195, 196, 197, 0,
	259, 260, 261, 0, 0, 198, 262, 263, 0, 199,
	200, 201, 202, 83, 0, 203, 204, 205, 0, 206,
	0, 207, 208, 209, 264, 265, 0, 0, 210, 86,
	87, 0, 88, 211, 212, 213, 214, 215, 0, 0,
	0, 0, 89, 90, 91, 216, 217, 218, 219, 92,
	220, 221, 0, 93, 222, 223, 94, 0, 0, 224,
	225, 547, 0, 227, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 269, 106,
	228, 107, 229, 230, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 231, 113,
	114, 232, 233, 0, 0, 0, 115, 116, 234, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 235, 0,
	236, 0, 120, 121, 122, 123, 237, 238, 0, 0,
	127, 0, 124, 0, 0, 125, 239, 126, 240, 241,
	242, 0, 243, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 244, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 245, 422, 0,
	141, 142, 144, 143, 0, 0, 0, 246, 145, 247,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	248, 0, 151, 0, 249, 152, 153, 154, 155, 0,
	250, 156, 251, 157, 0, 158, 159, 160, 252, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 253, 176, 0,
	177, 178, 179, 180, 0, 254, 181, 182, 0, 183,
	184, 0, 185, 255, 256, 186, 0, 192, 187, 188,
	189, 191, 257, 190, 258, 0, 193, 0, 194, 195,
	196, 197, 0, 421, 260, 261, 0, 0, 417, 262,
	263, 0, 199, 200, 201, 202, 83, 0, 203, 204,
	205, 0, 206, 0, 207, 208, 209, 264, 265, 0,
	0, 210, 86, 87, 0, 88, 211, 212, 213, 214,
	215, 0, 0, 0, 0, 89, 90, 91, 216, 217,
	218, 219, 92, 220, 221, 0, 93, 222, 223, 94,
	0, 0, 224, 225, 226, 0, 227, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 269, 106, 228, 107, 229, 230, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 231, 113, 114, 232, 233, 0, 0, 0, 115,
	116, 234, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 235, 0, 236, 0, 120, 121, 122, 123, 237,
	238, 0, 0, 127, 0, 124, 0, 0, 125, 239,
	126, 240, 241, 242, 0, 243, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 244, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	245, 422, 0, 141, 142, 144, 143, 0, 0, 0,
	246, 145, 247, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 248, 0, 151, 0, 249, 152, 153,
	154, 155, 0, 250, 156, 251, 157, 0, 158, 159,
	160, 252, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 0, 174, 175,
	253, 176, 0, 177, 178, 179, 180, 0, 254, 181,
	182, 0, 183, 184, 0, 185, 255, 256, 186, 0,
	192, 187, 188, 189, 191, 257, 190, 258, 0, 193,
	0, 194, 195, 196, 197, 0, 421, 260, 261, 0,
	0, 417, 262, 263, 0, 199, 200, 201, 202, 83,
	0, 203, 204, 205, 0, 206, 0, 207, 208, 209,
	264, 265, 0, 0, 210, 86, 87, 0, 88, 211,
	212, 213, 214, 215, 0, 0, 0, 0, 89, 90,
	91, 216, 217, 218, 219, 92, 220, 221, 0, 93,
	222, 223, 94, 0, 0, 224, 225, 226, 0, 227,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 269, 106, 228, 107, 229, 230,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 231, 113, 114, 232, 233, 0,
	0, 0, 115, 116, 234, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 235, 0, 236, 0, 120, 121,
	122, 123, 525, 238, 0, 0, 127, 0, 124, 0,
	0, 125, 239, 126, 240, 241, 242, 0, 243, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 244,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 245, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 246, 145, 247, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 248, 0, 151, 0,
	249, 152, 153, 154, 155, 0, 250, 156, 251, 157,
	0, 158, 159, 160, 252, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 253, 176, 0, 177, 178, 179, 180,
	0, 254, 181, 182, 0, 183, 184, 0, 185, 255,
	256, 186, 0, 192, 187, 188, 189, 191, 257, 190,
	258, 0, 193, 0, 194, 195, 196, 197, 0, 259,
	260, 261, 0, 0, 198, 262, 263, 0, 199, 200,
	201, 202, 83, 0, 203, 204, 205, 0, 206, 0,
	207, 208, 209, 264, 265, 0, 0, 210, 86, 87,
	0, 88, 211, 212, 213, 214, 215, 0, 0, 0,
	0, 89, 90, 91, 216, 217, 218, 219, 92, 220,
	221, 0, 93, 222, 223, 94, 0, 0, 224, 225,
	226, 0, 227, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 269, 106, 228,
	107, 229, 230, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 231, 113, 114,
	232, 233, 0, 0, 0, 115, 116, 234, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 235, 0, 236,
	0, 120, 121, 122, 123, 522, 238, 0, 0, 127,
	0, 124, 0, 0, 125, 239, 126, 240, 241, 242,
	0, 243, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 244, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 140, 245, 139, 0, 141,
	142, 144, 143, 0, 0, 0, 246, 145, 247, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 248,
	0, 151, 0, 249, 152, 153, 154, 155, 0, 250,
	156, 251, 157, 0, 158, 159, 160, 252, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 0, 174, 175, 253, 176, 0, 177,
	178, 179, 180, 0, 254, 181, 182, 0, 183, 184,
	0, 185, 255, 256, 186, 0, 192, 187, 188, 189,
	191, 257, 190, 258, 0, 193, 0, 194, 195, 196,
	197, 0, 259, 260, 261, 0, 0, 198, 262, 263,
	0, 199, 200, 201, 202, 83, 0, 203, 204, 205,
	0, 206, 0, 207, 208, 209, 264, 265, 0, 0,
	210, 86, 87, 0, 88, 211, 212, 213, 214, 215,
	0, 0, 0, 0, 89, 90, 91, 216, 217, 218,
	219, 92, 220, 221, 0, 93, 222, 223, 94, 0,
	0, 224, 225, 226, 0, 227, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	269, 106, 228, 107, 229, 230, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	231, 113, 114, 232, 233, 0, 0, 0, 115, 116,
	234, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	235, 0, 236, 0, 120, 121, 122, 123, 519, 238,
	0, 0, 127, 0, 124, 0, 0, 125, 239, 126,
	240, 241, 242, 0, 243, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 244, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 245,
	139, 0, 141, 142, 144, 143, 0, 0, 0, 246,
	145, 247, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 248, 0, 151, 0, 249, 152, 153, 154,
	155, 0, 250, 156, 251, 157, 0, 158, 159, 160,
	252, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 253,
	176, 0, 177, 178, 179, 180, 0, 254, 181, 182,
	0, 183, 184, 0, 185, 255, 256, 186, 0, 192,
	187, 188, 189, 191, 257, 190, 258, 0, 193, 0,
	194, 195, 196, 197, 0, 259, 260, 261, 0, 0,
	198, 262, 263, 0, 199, 200, 201, 202, 83, 0,
	203, 204, 205, 0, 206, 0, 207, 208, 209, 264,
	265, 0, 0, 210, 86, 87, 0, 88, 211, 212,
	213, 214, 215, 0, 0, 0, 0, 89, 90, 91,
	216, 217, 218, 219, 92, 220, 221, 0, 93, 222,
	223, 94, 0, 0, 224, 225, 226, 0, 227, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 269, 106, 228, 107, 229, 230, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 231, 113, 114, 232, 233, 0, 0,
	0, 115, 116, 234, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 235, 0, 236, 0, 120, 121, 122,
	123, 517, 238, 0, 0, 127, 0, 124, 0, 0,
	125, 239, 126, 240, 241, 242, 0, 243, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 244, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 140, 245, 139, 0, 141, 142, 144, 143, 0,
	0, 0, 246, 145, 247, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 248, 0, 151, 0, 249,
	152, 153, 154, 155, 0, 250, 156, 251, 157, 0,
	158, 159, 160, 252, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 0,
	174, 175, 253, 176, 0, 177, 178, 179, 180, 0,
	254, 181, 182, 0, 183, 184, 0, 185, 255, 256,
	186, 0, 192, 187, 188, 189, 191, 257, 190, 258,
	0, 193, 0, 194, 195, 196, 197, 0, 259, 260,
	261, 0, 0, 198, 262, 263, 0, 199, 200, 201,
	202, 83, 0, 203, 204, 205, 0, 206, 0, 207,
	208, 209, 264, 265, 0, 0, 210, 86, 87, 0,
	88, 211, 212, 213, 214, 215, 0, 0, 0, 0,
	89, 90, 91, 216, 217, 218, 219, 92, 220, 221,
	0, 93, 222, 223, 94, 0, 0, 224, 225, 226,
	0, 227, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 269, 106, 228, 107,
	229, 230, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 231, 113, 114, 232,
	233, 0, 0, 0, 115, 116, 234, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 235, 0, 236, 0,
	120, 121, 122, 123, 491, 238, 0, 0, 127, 0,
	124, 0, 0, 125, 239, 126, 240, 241, 242, 0,
	243, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 244, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 245, 139, 0, 141, 142,
	144, 143, 0, 0, 0, 246, 145, 247, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 248, 0,
	151, 0, 249, 152, 153, 154, 155, 0, 250, 156,
	251, 157, 0, 158, 159, 160, 252, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 253, 176, 0, 177, 178,
	179, 180, 0, 254, 181, 182, 0, 183, 184, 0,
	185, 255, 256, 186, 0, 192, 187, 188, 189, 191,
	257, 190, 258, 0, 193, 0, 194, 195, 196, 197,
	0, 259, 260, 261, 0, 0, 198, 262, 263, 0,
	199, 200, 201, 202, 83, 0, 203, 204, 205, 0,
	206, 0, 207, 208, 209, 264, 265, 0, 0, 210,
	86, 87, 0, 88, 211, 212, 213, 214, 215, 0,
	0, 0, 0, 89, 90, 91, 216, 217, 218, 219,
	92, 220, 221, 0, 93, 222, 223, 94, 0, 0,
	224, 225, 226, 0, 227, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 269,
	106, 228, 107, 229, 230, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 231,
	113, 114, 232, 233, 0, 0, 0, 115, 116, 234,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 235,
	0, 236, 0, 120, 121, 122, 123, 237, 238, 0,
	0, 127, 0, 124, 0, 0, 125, 239, 126, 240,
	241, 242, 0, 243, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 244, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 245, 139,
	0, 141, 142, 144, 143, 0, 0, 0, 246, 145,
	247, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 248, 0, 151, 0, 249, 152, 153, 154, 155,
	0, 250, 156, 251, 157, 0, 158, 159, 160, 252,
	472, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 0, 174, 175, 253, 176,
	0, 177, 178, 179, 180, 0, 254, 181, 182, 0,
	183, 184, 0, 185, 255, 256, 186, 0, 192, 187,
	188, 189, 191, 257, 190, 258, 0, 193, 0, 194,
	195, 196, 197, 0, 259, 260, 261, 0, 0, 198,
	262, 263, 0, 199, 200, 201, 202, 83, 0, 203,
	204, 205, 0, 206, 0, 207, 208, 209, 264, 265,
	0, 0, 210, 86, 87, 0, 88, 211, 212, 213,
	214, 215, 0, 0, 0, 0, 89, 90, 91, 216,
	217, 218, 219, 92, 220, 221, 0, 93, 222, 223,
	94, 0, 0, 224, 225, 226, 0, 227, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 269, 106, 228, 107, 229, 230, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 231, 113, 114, 232, 233, 0, 0, 0,
	115, 116, 234, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 235, 0, 236, 0, 120, 121, 122, 123,
	237, 238, 0, 0, 127, 0, 124, 0, 0, 125,
	239, 126, 240, 241, 242, 0, 243, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 244, 0, 133,
	0, 0, 414, 0, 0, 135, 0, 136, 137, 138,
	140, 245, 422, 0, 141, 142, 144, 143, 0, 0,
	0, 246, 145, 247, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 248, 0, 151, 0, 249, 152,
	153, 154, 155, 0, 250, 156, 251, 157, 0, 158,
	159, 160, 252, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 416, 176, 0, 177, 178, 179, 180, 0, 254,
	181, 415, 0, 183, 184, 0, 185, 255, 256, 186,
	0, 192, 187, 188, 189, 191, 257, 190, 258, 0,
	193, 0, 194, 195, 196, 197, 0, 421, 260, 261,
	0, 0, 417, 262, 263, 0, 199, 200, 201, 202,
	83, 0, 203, 204, 205, 0, 206, 0, 207, 208,
	209, 264, 265, 0, 0, 210, 86, 87, 0, 88,
	211, 212, 213, 214, 215, 0, 0, 0, 0, 89,
	90, 91, 216, 217, 218, 219, 92, 220, 221, 0,
	93, 222, 223, 94, 0, 0, 224, 225, 226, 0,
	227, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 269, 106, 228, 107, 229,
	230, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 231, 113, 114, 232, 233,
	0, 0, 0, 115, 116, 234, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 235, 0, 236, 0, 120,
	121, 122, 123, 237, 238, 0, 0, 127, 0, 124,
	0, 0, 125, 239, 126, 240, 241, 242, 0, 243,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	244, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 140, 245, 139, 0, 141, 142, 144,
	143, 0, 0, 0, 246, 145, 247, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 248, 0, 151,
	0, 249, 152, 153, 0, 155, 0, 250, 156, 251,
	157, 0, 158, 0, 160, 252, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 0, 174, 175, 253, 0, 0, 177, 178, 179,
	180, 0, 254, 181, 182, 0, 183, 184, 0, 185,
	255, 256, 186, 0, 192, 187, 188, 189, 191, 257,
	190, 258, 0, 193, 0, 194, 195, 196, 197, 0,
	259, 260, 261, 0, 0, 198, 262, 263, 0, 199,
	200, 201, 202, 0, 0, 203, 204, 205, 0, 206,
	0, 207, 208, 209, 264, 265, 0, 0, 210, 0,
	0, 0, 0, 211, 212, 213, 214, 916, 917, 0,
	936, 937, 938, 946, 947, 948, 0, 0, 0, 0,
	0, 0, 0, 939, 0, 0, 0, 0, 0, 0,
	919, 0, 0, 950, 0, 0, 0, 916, 917, 0,
	936, 937, 938, 946, 947, 948, 0, 0, 0, 0,
	0, 0, 918, 939, 0, 0, 0, 0, 933, 0,
	919, 0, 0, 950, 0, 0, 0, 916, 917, 0,
	936, 937, 938, 946, 947, 948, 0, 0, 0, 0,
	0, 0, 918, 939, 0, 0, 0, 0, 933, 0,
	919, 0, 0, 950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 924, 0, 0,
	0, 0, 918, 0, 0, 0, 0, 0, 933, 0,
	0, 0, 0, 0, 0, 0, 943, 951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 924, 0, 0,
	0, 0, 949, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 941, 0, 943, 951, 0, 0,
	934, 0, 0, 0, 0, 0, 0, 924, 0, 0,
	0, 0, 949, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 941, 940, 943, 951, 0, 0,
	934, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 949, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 941, 940, 0, 0, 0, 0,
	934, 0, 0, 0, 0, 0, 0, 935, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 944,
	0, 0, 0, 0, 0, 940, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 935, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 944,
	0, 0, 0, 0, 916, 917, 0, 936, 937, 938,
	946, 947, 948, 0, 0, 0, 0, 935, 0, 0,
	939, 0, 0, 0, 0, 0, 0, 919, 942, 944,
	950, 930, 931, 932, 0, 929, 926, 927, 928, 920,
	921, 922, 923, 925, 0, 945, 0, 0, 0, 918,
	0, 0, 1475, 0, 0, 933, 0, 0, 942, 0,
	0, 930, 931, 932, 0, 929, 926, 927, 928, 920,
	921, 922, 923, 925, 0, 945, 0, 0, 0, 1992,
	0, 0, 0, 0, 0, 0, 0, 0, 942, 0,
	0, 930, 931, 932, 0, 929, 926, 927, 928, 920,
	921, 922, 923, 925, 924, 945, 0, 0, 0, 1990,
	916, 917, 0, 936, 937, 938, 946, 947, 948, 0,
	0, 0, 0, 943, 951, 0, 939, 0, 0, 0,
	0, 0, 0, 919, 0, 0, 950, 0, 0, 949,
	916, 917, 0, 936, 937, 938, 946, 947, 948, 0,
	0, 941, 0, 0, 0, 918, 939, 934, 0, 0,
	0, 933, 0, 919, 0, 0, 950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 918, 0, 0, 0, 0,
	0, 933, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	924, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 0, 0, 0, 0, 943,
	951, 0, 0, 0, 0, 0, 944, 0, 0, 0,
	924, 0, 0, 0, 0, 949, 916, 917, 0, 936,
	937, 938, 946, 947, 948, 0, 0, 941, 0, 943,
	951, 0, 939, 934, 0, 0, 0, 0, 0, 919,
	0, 0, 950, 0, 0, 949, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 941, 940, 0,
	0, 918, 0, 934, 0, 942, 0, 933, 930, 931,
	932, 0, 929, 926, 927, 928, 920, 921, 922, 923,
	925, 0, 945, 0, 0, 0, 1937, 0, 940, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	935, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 0, 924, 0, 0, 0,
	0, 916, 917, 0, 936, 937, 938, 946, 947, 948,
	935, 0, 0, 0, 0, 943, 951, 939, 0, 0,
	0, 0, 944, 0, 919, 0, 0, 950, 0, 0,
	0, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 918, 0, 0, 934,
	0, 942, 933, 0, 930, 931, 932, 0, 929, 926,
	927, 928, 920, 921, 922, 923, 925, 0, 945, 0,
	0, 0, 1932, 0, 940, 0, 0, 0, 0, 0,
	0, 942, 0, 0, 930, 931, 932, 0, 929, 926,
	927, 928, 920, 921, 922, 923, 925, 0, 945, 0,
	0, 924, 1928, 0, 0, 0, 916, 917, 0, 936,
	937, 938, 946, 947, 948, 0, 935, 0, 0, 0,
	943, 951, 939, 0, 0, 0, 0, 0, 944, 919,
	0, 0, 950, 0, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 918, 0, 0, 934, 0, 0, 933, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	0, 0, 0, 0, 0, 0, 0, 942, 0, 0,
	930, 931, 932, 0, 929, 926, 927, 928, 920, 921,
	922, 923, 925, 0, 945, 0, 924, 0, 1870, 0,
	0, 916, 917, 0, 936, 937, 938, 946, 947, 948,
	0, 935, 0, 0, 0, 943, 951, 939, 0, 0,
	0, 0, 0, 944, 919, 0, 0, 950, 0, 0,
	0, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 918, 0, 0, 934,
	0, 0, 933, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 0, 0, 0,
	0, 0, 942, 0, 0, 930, 931, 932, 0, 929,
	926, 927, 928, 920, 921, 922, 923, 925, 0, 945,
	0, 924, 0, 1848, 0, 0, 916, 917, 0, 936,
	937, 938, 946, 947, 948, 0, 935, 0, 0, 0,
	943, 951, 939, 0, 0, 0, 0, 0, 944, 919,
	0, 0, 950, 0, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 918, 0, 0, 934, 0, 0, 933, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	0, 0, 0, 0, 0, 0, 0, 942, 0, 0,
	930, 931, 932, 0, 929, 926, 927, 928, 920, 921,
	922, 923, 925, 0, 945, 0, 924, 0, 1847, 0,
	0, 916, 917, 0, 936, 937, 938, 946, 947, 948,
	0, 935, 0, 0, 0, 943, 951, 939, 0, 0,
	0, 0, 0, 944, 919, 0, 0, 950, 0, 0,
	0, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 918, 0, 0, 934,
	0, 0, 933, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 0, 0, 0,
	0, 0, 942, 0, 0, 930, 931, 932, 0, 929,
	926, 927, 928, 920, 921, 922, 923, 925, 0, 945,
	0, 924, 0, 1739, 0, 0, 916, 917, 0, 936,
	937, 938, 946, 947, 948, 0, 935, 0, 0, 0,
	943, 951, 939, 0, 0, 0, 0, 0, 944, 919,
	0, 0, 950, 0, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 918, 0, 0, 934, 0, 0, 933, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	0, 0, 0, 0, 0, 0, 0, 942, 0, 0,
	930, 931, 932, 0, 929, 926, 927, 928, 920, 921,
	922, 923, 925, 0, 945, 0, 924, 0, 1673, 0,
	0, 916, 917, 0, 936, 937, 938, 946, 947, 948,
	0, 935, 0, 0, 0, 943, 951, 939, 0, 0,
	0, 0, 0, 944, 919, 0, 0, 950, 0, 0,
	0, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 918, 0, 0, 934,
	0, 0, 933, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 0, 0, 0,
	0, 0, 942, 0, 0, 930, 931, 932, 0, 929,
	926, 927, 928, 920, 921, 922, 923, 925, 0, 945,
	0, 924, 0, 1657, 0, 0, 916, 917, 0, 936,
	937, 938, 946, 947, 948, 0, 935, 0, 0, 0,
	943, 951, 939, 0, 0, 0, 0, 0, 944, 919,
	0, 0, 950, 0, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 918, 0, 0, 934, 0, 0, 933, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	0, 0, 0, 0, 0, 0, 0, 942, 0, 0,
	930, 931, 932, 0, 929, 926, 927, 928, 920, 921,
	922, 923, 925, 0, 945, 0, 924, 2071, 1236, 0,
	0, 0, 916, 917, 0, 936, 937, 938, 946, 947,
	948, 935, 0, 0, 0, 943, 951, 0, 939, 0,
	0, 0, 0, 944, 0, 919, 954, 0, 950, 0,
	0, 949, 916, 917, 0, 936, 937, 938, 946, 947,
	948, 0, 0, 941, 0, 0, 0, 918, 939, 934,
	0, 0, 953, 933, 0, 919, 0, 0, 950, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 918, 0, 0,
	0, 0, 942, 933, 0, 930, 931, 932, 2070, 929,
	926, 927, 928, 920, 921, 922, 923, 925, 0, 945,
	0, 1450, 924, 0, 1515, 0, 0, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 935, 0, 0, 0,
	0, 943, 951, 0, 0, 0, 0, 0, 944, 0,
	0, 0, 924, 0, 0, 0, 0, 949, 916, 917,
	0, 936, 937, 938, 946, 947, 948, 0, 0, 941,
	0, 943, 951, 0, 939, 934, 0, 0, 0, 1151,
	0, 919, 0, 0, 950, 0, 0, 949, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 941,
	940, 0, 0, 918, 0, 934, 0, 942, 0, 933,
	930, 931, 932, 0, 929, 926, 927, 928, 920, 921,
	922, 923, 925, 0, 945, 0, 0, 0, 0, 0,
	940, 0, 0, 0, 0, 0, 0, 1152, 0, 0,
	0, 0, 935, 0, 0, 916, 917, 0, 936, 937,
	938, 946, 947, 948, 944, 0, 0, 0, 924, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 919, 0,
	0, 950, 935, 0, 0, 0, 0, 943, 951, 0,
	0, 0, 0, 0, 944, 0, 0, 0, 0, 0,
	918, 0, 0, 949, 0, 0, 933, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 0, 0,
	0, 934, 0, 942, 0, 0, 930, 931, 932, 0,
	929, 926, 927, 928, 920, 921, 922, 923, 925, 0,
	945, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 0, 0, 942, 0, 924, 930, 931, 932, 0,
	929, 926, 927, 928, 920, 921, 922, 923, 925, 0,
	945, 0, 0, 0, 943, 951, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	949, 916, 917, 0, 936, 937, 938, 946, 947, 948,
	944, 0, 941, 0, 0, 0, 0, 939, 934, 0,
	0, 0, 0, 0, 919, 0, 0, 950, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 467, 0, 918, 0, 0, 0,
	0, 0, 933, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 942,
	0, 0, 930, 931, 932, 0, 929, 926, 927, 928,
	920, 921, 922, 923, 925, 935, 945, 0, 916, 917,
	0, 936, 937, 938, 946, 947, 948, 944, 0, 0,
	0, 924, 0, 0, 939, 0, 0, 0, 0, 0,
	0, 919, 0, 0, 950, 0, 0, 0, 0, 0,
	943, 951, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 918, 0, 0, 949, 0, 0, 933,
	0, 0, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 0, 0, 0, 934, 0, 942, 0, 0, 930,
	931, 932, 0, 929, 926, 927, 928, 920, 921, 922,
	923, 925, 0, 945, 0, 0, 0, 0, 0, 940,
	0, 0, 0, 0, 0, 0, 0, 0, 924, 0,
	0, 0, 0, 1521, 916, 917, 0, 936, 937, 938,
	946, 947, 948, 0, 0, 0, 0, 943, 951, 0,
	939, 0, 0, 0, 1516, 0, 0, 919, 0, 0,
	950, 935, 0, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 0, 941, 0, 0, 0, 918,
	0, 934, 0, 0, 0, 933, 0, 0, 0, 0,
	0, 0, 0, 0, 1661, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 942, 0, 924, 930, 931, 932, 0, 929,
	926, 927, 928, 920, 921, 922, 923, 925, 935, 945,
	0, 0, 0, 943, 951, 0, 0, 0, 0, 0,
	944, 0, 0, 0, 0, 0, 0, 0, 0, 949,
	916, 917, 0, 936, 937, 938, 946, 947, 948, 0,
	0, 941, 0, 0, 0, 0, 939, 934, 0, 0,
	0, 0, 0, 919, 0, 0, 950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 918, 0, 0, 0, 942,
	0, 933, 930, 931, 932, 0, 929, 926, 927, 928,
	920, 921, 922, 923, 925, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 0, 0, 916, 917, 0,
	936, 937, 938, 946, 947, 948, 944, 0, 0, 0,
	924, 0, 0, 939, 0, 0, 0, 1474, 0, 0,
	919, 0, 0, 950, 0, 0, 0, 0, 0, 943,
	951, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 918, 0, 0, 949, 0, 0, 933, 0,
	0, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	0, 0, 0, 934, 0, 942, 0, 0, 930, 931,
	932, 0, 929, 926, 927, 928, 920, 921, 922, 923,
	925, 0, 945, 0, 0, 0, 0, 0, 940, 0,
	0, 0, 0, 0, 0, 0, 0, 924, 0, 0,
	1481, 0, 916, 917, 0, 936, 937, 938, 946, 947,
	948, 0, 0, 0, 0, 0, 943, 951, 939, 0,
	0, 0, 0, 0, 0, 919, 0, 0, 950, 0,
	935, 0, 949, 0, 0, 0, 1483, 1484, 0, 1501,
	1502, 1503, 944, 0, 941, 0, 0, 918, 0, 0,
	934, 0, 1650, 933, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 942, 924, 0, 930, 931, 932, 0, 929, 926,
	927, 928, 920, 921, 922, 923, 925, 935, 945, 0,
	0, 943, 951, 0, 0, 0, 0, 916, 917, 944,
	936, 937, 938, 946, 947, 948, 1489, 949, 0, 0,
	0, 0, 0, 939, 0, 0, 0, 0, 0, 941,
	919, 0, 0, 950, 0, 934, 0, 0, 0, 0,
	1483, 1484, 0, 1501, 1502, 1503, 0, 0, 0, 0,
	0, 1504, 918, 0, 0, 0, 1649, 0, 933, 0,
	940, 0, 0, 0, 0, 0, 0, 0, 942, 1499,
	0, 930, 931, 932, 0, 929, 926, 927, 928, 920,
	921, 922, 923, 925, 0, 945, 0, 0, 0, 0,
	0, 1498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 916, 917, 924, 936, 937,
	938, 946, 947, 948, 944, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 943, 951, 919, 0,
	0, 950, 0, 0, 0, 0, 1500, 0, 0, 0,
	1489, 0, 949, 0, 0, 0, 0, 0, 0, 0,
	918, 0, 0, 0, 941, 0, 933, 0, 0, 0,
	934, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 942, 0, 1504, 930, 931, 932, 0,
	929, 926, 927, 928, 920, 921, 922, 923, 925, 0,
	945, 0, 0, 1499, 0, 0, 1483, 1484, 0, 1501,
	1502, 1503, 0, 0, 0, 924, 0, 0, 0, 0,
	1495, 1496, 1497, 0, 1494, 1491, 1492, 1493, 1485, 1486,
	1487, 1488, 1490, 0, 943, 951, 0, 935, 916, 917,
	0, 936, 937, 938, 946, 947, 948, 0, 0, 944,
	949, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 919, 941, 0, 950, 0, 0, 0, 934, 0,
	1500, 0, 0, 0, 0, 0, 0, 1483, 1484, 0,
	1501, 1502, 1503, 918, 0, 0, 0, 0, 0, 933,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 0, 942, 0,
	0, 930, 931, 932, 0, 929, 926, 927, 928, 920,
	921, 922, 923, 925, 0, 945, 1505, 0, 1498, 0,
	0, 0, 0, 0, 0, 935, 0, 0, 924, 0,
	0, 1504, 0, 0, 1495, 1496, 1497, 944, 1494, 1491,
	1492, 1493, 1485, 1486, 1487, 1488, 1490, 943, 951, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 0, 0,
	0, 934, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 942, 0, 0, 930,
	931, 932, 1504, 929, 926, 927, 928, 920, 921, 922,
	923, 925, 0, 945, 0, 0, 1500, 0, 0, 0,
	1499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 0, 0,
	1495, 1496, 1497, 0, 1494, 1491, 1492, 1493, 1485, 1486,
	1487, 1488, 1490, 800, 792, 817, 785, 808, 807, 0,
	0, 787, 786, 0, 0, 0, 819, 818, 0, 942,
	0, 0, 930, 931, 932, 0, 929, 926, 927, 928,
	920, 921, 922, 923, 925, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 813, 0, 805,
	804, 0, 0, 0, 0, 0, 0, 0, 803, 0,
	0, 1495, 1496, 1497, 0, 1494, 1491, 1492, 1493, 1485,
	1486, 1487, 1488, 1490, 0, 802, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 800, 792, 817, 785,
	808, 807, 0, 425, 787, 786, 0, 0, 0, 819,
	818, 0, 0, 795, 794, 796, 797, 798, 0, 816,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	813, 0, 805, 804, 789, 0, 0, 0, 0, 0,
	0, 803, 0, 0, 0, 0, 806, 428, 0, 0,
	793, 0, 433, 434, 0, 0, 439, 0, 802, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 427, 429,
	0, 0, 0, 0, 0, 801, 0, 0, 0, 1170,
	1168, 1169, 1172, 1171, 0, 0, 795, 794, 796, 797,
	798, 0, 816, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 790, 0, 0, 0, 0, 430, 0, 0,
	799, 791, 0, 0, 0, 0, 0, 789, 0, 821,
	0, 431, 432, 0, 0, 0, 0, 0, 788, 806,
	0, 814, 815, 793, 0, 0, 0, 0, 435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 820, 0, 0, 801, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 790, 0, 0, 0, 0,
	0, 0, 0, 799, 791, 0, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 0, 0, 0,
	0, 788, 0, 0, 814, 815, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 820, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 436, 0,
	441, 0, 0, 437, 0, 0, 0, 0, 438, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440,
}
var sqlPact = [...]int{

	259, -1000, 38, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 783, 15753,
	15753, 19332, -1000, -1000, -1000, -1000, -1000, -1000, 762, 686,
	1109, 5142, 19332, 19332, 19059, 1003, 1003, 20697, -1000, -1000,
	23973, -1000, 27589, 529, 540, 529, 529, 538, 20697, 635,
	677, 123, -1000, 867, -7, 23700, 19332, 1403, 32, 17694,
	333, 259, 18786, 23427, 19332, 18513, 607, 28, 16315, 19332,
	-1000, 40, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1253, 352, 40, -1000,
	1251, 1163, 1159, 17694, 23154, 22881, 22608, 22335, -1000, 12067,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 817, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 340, 339, -1000, 18240, -1000, 1014, -1000,
	29, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1011,
	-1000, 19332, -1000, -1000, 22062, 21789, 335, 972, -1000, -1000,
	582, 432, 1414, -1000, 45, -1000, -1000, -1000, 1250, -1000,
	1010, 1249, 1244, 1243, 1242, 1241, 1239, 431, 962, 504,
	-1000, 1237, 972, -1000, 972, -1000, -1000, -1000, 606, 20697,
	-1000, 17694, -1000, 21516, 19332, 19332, 1180, 21243, -1000, 867,
	-1000, -1000, -1000, 1053, 1402, 1402, 1402, 1409, 146, 140,
	123, 15, 19332, -1000, 334, 15, 7263, 7263, -1000, -1000,
	333, -1000, 338, 14910, -1000, 8507, -1000, 854, 1300, 441,
	786, 1297, -86, 848, 827, 1296, 15480, 16315, 28, 26,
	-1000, -1000, -1000, 4845, 15480, 662, 14091, 40, -1000, -1000,
	-1000, 17694, 19332, 19332, 682, 20970, -1000, 1291, 126, 1289,
	-1000, 124, 1288, -1000, 124, 1286, 13, -1000, -1000, -1000,
	-1000, -1000, -1000, 333, 17967, 19332, 1501, 27549, -1000, 10325,
	-1000, -1000, 15753, 1028, 15753, -1000, -1000, 1500, -1000, 10325,
	-1000, 25, 24, 1095, 1113, 12652, 12366, 1344, 968, -1000,
	-1000, -1000, 43, 5142, 19332, 1258, 15753, 19332, 19332, 19332,
	19332, 19332, 19332, -1000, 1092, -1000, -1000, 19332, 19332, 788,
	-1000, 22, 18, -1000, 20697, -1000, 134, -1000, 332, 1066,
	442, 122, 20424, 442, 1065, -1000, 1053, -1000, 1005, 1089,
	9428, 10325, 123, -1000, -1000, 123, 123, 10325, -1000, -1000,
	19332, 15, 1494, 19332, 83, -1000, 26022, -1000, -1000, 10325,
	10325, 10325, 10325, 10325, 915, 369, -1000, 330, 329, 6064,
	-1000, -1000, 1589, -1000, -1000, -1000, 145, -1000, -1000, 10325,
	40, -1000, -1000, -1000, -1000, 327, 1606, -1000, 443, -1000,
	-1000, -1000, 430, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1257, 323, 318, -1000, -1000, -1000, -1000, 317,
	315, 313, 307, 304, 303, 298, 297, 295, 294, 292,
	291, 288, 285, 278, 886, -1000, 459, -1000, -1000, 459,
	459, -1000, 269, 269, 271, -1000, -1000, -1000, -1000, 269,
	-1000, -1000, -1000, 417, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 277, 83, -1000, -1000, -1000, 19332, 9, -1000, 26872,
	-1000, -8, 906, -1000, 17148, 1384, 1382, 1357, 17694, 1422,
	1421, 604, 19332, 19332, 599, 594, 17694, 407, -1000, -1000,
	-1000, -1000, -1000, 19332, -1000, -1000, -6, -1000, -1000, 1236,
	8, -1000, -1000, 445, 132, 1476, 132, 14364, -1000, 19332,
	19332, -1000, 19332, -1000, -1000, 19332, -1000, 19332, 19332, -1000,
	19332, 169, 16602, 801, 1285, 666, -7, 7, -1000, 1503,
	-1000, -1000, -1000, -1000, 93, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 271, 886, 269, 269, 269, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 417, -1000, -1000, 459, 459, 459,
	-1000, -1000, 3, 26872, 591, -1000, 1231, 528, -9, 829,
	1156, 869, -1000, -1000, -1000, -1000, 14, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1579, -1000, -1000,
	1588, 14, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1604, 5142, -1000, -1000, -1000, 19332, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 19332, 19332, 829,
	1156, -1000, -1000, 17694, 16875, 1449, 1284, 899, -1000, 1443,
	19332, 1007, 1051, -1000, 627, 1283, -1000, -1000, -1000, -1000,
	26872, -1000, 26872, 822, 1167, -1000, 1167, 12, -1000, 26128,
	-1000, 268, -18, 445, 7263, 13802, 27466, 27549, 19332, 625,
	10325, 10325, 10325, 10325, 10325, 10325, 10325, 10325, 10325, 10325,
	10325, 10325, 10325, 10325, 10325, 10325, 10325, 10325, 10325, 10325,
	10325, 10325, 1161, 10325, 589, 10325, 10325, 10325, 10325, 888,
	916, 238, 939, 5142, -1000, -1000, 711, 711, 711, 27095,
	27095, 217, 369, -1000, 10325, -1000, 9105, 140, 25676, -2,
	-1000, -1000, -1000, 6961, 450, 26872, 40, 5741, -1000, 1587,
	675, 1264, 1207, 263, 139, 125, 10325, 10325, 10624, 10624,
	10325, 10923, 10325, 10325, 6363, 10325, 10325, 10325, 10325, 10325,
	10325, -1000, 261, -1000, -1000, -1000, -1000, 1586, -1000, -1000,
	1584, -1000, 619, 612, 1583, 445, 117, 8507, -1000, 801,
	19332, 19332, 19332, -1000, -1000, 1049, 20151, 1047, 27549, 19332,
	-1000, 254, 245, 1118, 1111, 19332, 19332, 19878, 19605, 19332,
	814, -7, -7, 19332, 808, -1000, 19332, 19332, 767, 1190,
	1025, -1000, 444, 15480, 654, 1227, 19332, 713, 10325, 748,
	-1000, 13513, 479, 19332, 744, 63, -1000, -1000, -1000, 402,
	19332, -1000, -1000, -1000, 126, -1000, 124, 124, -1000, -1000,
	17694, -1000, -1000, -1000, -1000, -1000, -1000, 27549, 367, 366,
	-1000, 1575, 585, -1000, 584, 580, 572, -1000, 239, -1000,
	10325, 19332, 19332, 1156, -1000, -1000, -1000, -1000, 732, -1000,
	875, -1000, 12938, -1000, -1000, -1000, -1000, -16, -1000, -1000,
	-1000, -1000, -1000, -1000, 114, -20, -4, 27549, -1000, -1000,
	-1000, -1000, -1000, 19332, 253, 19332, -7, 19332, -1000, 1602,
	-7, 19332, 1282, 1311, 392, 19332, -1000, -1000, -1000, 10325,
	-1000, -1000, -1000, -7, -1000, 1204, -1000, -119, 1185, 1366,
	-114, 121, 414, -1000, 13224, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 428, 331, 331, 427, 427,
	427, 427, 391, 391, 681, 3034, 2409, 2409, 2409, 2576,
	289, 289, 2409, 2409, 2409, 27095, 26997, 210, 10325, 10325,
	571, 914, 238, 210, 10325, 1541, 210, 210, 210, -1000,
	847, -1000, -1000, -1000, -1000, 1224, 232, 10923, 10923, -1000,
	-1000, -1000, 6064, 11521, -1000, -1000, -1000, -1000, -1000, 230,
	10325, -1000, 25781, -164, -24, -1000, -1000, 10325, -52, -53,
	-1000, -1000, 652, -1000, 10325, -1000, -13, 10325, 10325, 10325,
	111, 110, -1000, 930, 229, 228, 10325, -1000, -1000, 26767,
	24537, 109, 1221, -69, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 108, 107, 26680, -69, 104, 27186, -1000, 10923, 10923,
	10923, 6064, 227, 103, 25992, -69, 26544, 8806, 8806, 8806,
	101, 26438, 10325, -69, 3918, 3700, 3489, -37, -38, -39,
	1570, -56, 100, 424, 423, 99, 1204, -1000, -1000, -1000,
	-1000, 567, 558, 1281, -1000, 1046, -1000, 489, -1000, 755,
	10325, 11794, 225, 221, 846, -1000, 1280, 1057, 1279, 1057,
	-1000, -8, 785, -1000, -1000, -1000, 553, -1000, -1000, 552,
	444, 1220, 638, -1000, 982, -1000, -1000, 645, -1000, -1000,
	6662, 26872, -1000, 739, 1369, -61, -1000, -1000, 7263, 445,
	14364, 13802, 8507, -62, -1000, -1000, -1000, 801, -1000, 537,
	1564, 96, 1079, 833, 773, 687, 1562, 26872, -16, -16,
	-1000, -1000, -1000, -1000, -1000, 19332, 1182, -1000, 16875, 220,
	19332, 218, -1000, 209, -1000, -1000, 208, 19332, 1102, 392,
	16042, -1000, 442, -1000, 91, 1200, 1407, -1000, 13802, 1152,
	1146, 13802, 1019, 933, 933, 933, -1000, 206, 841, 414,
	4237, 10325, 17421, 951, 67, 87, 1185, 10325, 210, 210,
	10325, 10923, 10923, -1000, 210, -1000, -1000, -1000, -1000, -1000,
	1218, 194, 10325, 27549, 27030, 26906, -68, -1000, 8184, -17,
	-1000, 10325, -1000, 25571, -1000, -1000, 353, 1308, -1000, 10325,
	26351, 85, 7885, -1000, 26215, -19, -19, -1000, 1601, -1000,
	14637, 448, 964, 25466, 27466, 27549, -1000, 10325, -1000, -1000,
	1215, 10325, -1000, 27466, 27549, 10923, 10923, 10923, 10923, 10923,
	10923, 10923, 10923, 10923, 10923, 10923, 10923, 10923, 10923, 10923,
	10923, 10923, 10923, 10923, 1117, 10923, 1539, 1539, 1539, -22,
	7562, -1000, 1219, 1215, 10325, 10325, 27549, 81, 78, 74,
	-1000, 10325, -69, 10325, 10325, 10325, -1000, -1000, -1000, 73,
	-1000, 1556, -1000, -1000, -1000, -1000, 1200, 19332, 19332, 19332,
	1278, -1000, 2033, -1000, 25361, -70, -1000, 306, 1387, 10325,
	-1000, -1000, 187, 11794, 19332, -1000, 1131, 1172, 516, 19332,
	-1000, 19332, -1000, 19332, 19332, 19332, 19332, 19332, -1000, 15480,
	569, 185, -1000, -35, -1000, 7263, 213, -7, -35, 713,
	-1000, -29, -1000, 395, -1000, 364, 361, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 72, -1000, -1000, 1184, -1000,
	11794, 182, 19332, 16875, 1440, 11794, 996, 1104, 392, 16042,
	-1000, 627, -1000, 446, 10325, 10325, 1185, 13802, 13802, 1149,
	1135, 13802, -1000, -1000, -1000, -1000, 354, 358, 349, 12067,
	17421, -1000, 1554, 1115, -72, -1000, -1000, 19332, 181, -1000,
	414, 485, 210, 3594, 2445, 10325, 27549, 27218, -76, 10325,
	10325, -1000, -77, -1000, 10325, 348, 26872, -1000, -1000, -1000,
	26872, 10325, 1593, 10325, 71, 69, 65, -1000, -1000, -1000,
	24246, 10325, 62, -1000, 61, 58, 26872, 1219, 26872, -1000,
	-1000, 566, 566, 1539, 1539, 1539, 1539, 500, 500, 843,
	2513, 616, 616, 616, 2122, 668, 668, 616, 616, 616,
	1214, 1114, 172, 27257, 10325, -78, -1000, -1000, -1000, 26872,
	26872, 57, -1000, -1000, -1000, -69, 3271, 25256, 25151, -1000,
	56, 446, -1000, -1000, -1000, 19332, -1000, 19332, -1000, 19332,
	19332, 1216, 1038, -1000, -1000, 1108, 171, 10923, 19332, -1000,
	831, 11794, 1386, 40, 19332, 1386, 25046, 5741, -83, -84,
	1037, -1000, 1032, 10325, -1000, 27549, 1057, 1057, -1000, 550,
	539, -1000, -1000, -34, 15207, 1596, -35, 1316, 19332, 1353,
	-1000, -1000, 167, -1000, -1000, -1000, 911, -88, 11794, -90,
	55, -7, -92, 19332, -1000, 392, 16042, -1000, 1311, -1000,
	19332, 26872, -69, -1000, 1149, -1000, 165, 10325, 13802, -1000,
	-114, -1000, -98, -1000, 414, -99, -1000, 347, -161, -1000,
	389, -1000, 414, 160, 19332, 17421, 10325, 10325, 27218, -100,
	-1000, 210, 210, -1000, 24940, -1000, 26872, -1000, 26215, -1000,
	-1000, -1000, 903, -1000, 24910, -1000, -1000, -1000, -1000, 10923,
	1213, 157, 27549, 24804, -1000, -1000, 10325, -1000, -1000, -1000,
	-1000, -1000, 1148, -1000, -1000, 19332, 1043, -1000, -1000, 10325,
	27257, 155, 1182, 154, -1000, -1000, -1000, -1000, -1000, -1000,
	1387, -13, -1000, 779, -1000, -1000, 26872, 1377, -1000, -1000,
	19332, 19332, -1000, 153, 40, -106, -1000, 387, 623, -111,
	19332, -1000, -1000, 5439, 19332, 831, -120, -1000, 1182, -1000,
	831, 151, 16042, -1000, 1102, -46, -1000, 1439, -1000, 19332,
	26872, -1000, 414, -1000, 1551, 17421, 169, -1000, 1115, -1000,
	4545, 17421, 19332, -122, -1000, 210, 210, -1000, -1000, 53,
	964, 1404, -1000, 3806, 10923, 27549, -126, -1000, 24597, -1000,
	-1000, 1276, 24567, 1082, 19332, -1000, 19332, 1386, 52, 19332,
	486, 19332, -1000, -1000, 10325, 1596, -1000, -1000, 1594, 678,
	-1000, 445, -1000, 149, 1182, 831, -1000, 1182, 11794, -1000,
	1104, 19332, 148, -128, 17421, -1000, -1000, 344, -1000, -1000,
	1546, -1000, -132, -1000, -1000, 883, 10325, 3806, -134, -1000,
	-1000, 1267, -1000, 966, 871, 50, -136, -1000, -1000, 122,
	-1000, 10325, -1000, -19, -1000, -1000, 14364, -1000, 19332, -1000,
	1182, -1000, -142, -1000, -1000, -1000, -1000, -1000, 414, 342,
	-1000, 49, 10026, 10026, -69, -1000, 19332, -1000, 992, 990,
	708, -1000, -1000, -1000, -1000, -1000, 1082, 26872, 48, -115,
	-148, -1000, 831, 17421, -1000, -1000, -1000, -1000, 11222, 981,
	695, 25886, -1000, -1000, -1000, 1325, -1000, 508, 1012, 1012,
	966, 1593, -1000, 963, 1182, -1000, 1510, -1000, -1000, -1000,
	-1000, -1000, -1000, 1528, -1000, -1000, 1123, -1000, -1000, -1000,
	-1000, -1000, -1000, 9727, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1840, 1837, 1443, 1545, 1832, 1831, 1542, 1828, 1824,
	1823, 1822, 1821, 1817, 123, 1528, 1517, 38, 1507, 1814,
	122, 1811, 1810, 1809, 115, 1807, 1804, 1803, 88, 1802,
	1801, 1465, 1463, 1800, 1795, 113, 1794, 22, 1793, 96,
	1790, 35, 169, 2271, 146, 1789, 1786, 1785, 21, 128,
	92, 1781, 72, 1780, 1779, 68, 47, 29, 25, 1777,
	119, 140, 1446, 27, 1776, 1775, 150, 1774, 54, 36,
	1198, 159, 157, 139, 138, 1773, 1772, 1771, 1770, 64,
	1766, 9, 1765, 1762, 28, 71, 17, 1759, 34, 23,
	1758, 1757, 142, 1755, 94, 120, 1435, 33, 141, 12,
	1754, 85, 15, 98, 1753, 1752, 148, 83, 1750, 52,
	101, 153, 1749, 62, 166, 86, 46, 82, 127, 1748,
	1747, 1746, 104, 1744, 129, 111, 1743, 1742, 105, 1740,
	147, 149, 1738, 1737, 144, 1729, 1725, 1719, 172, 1718,
	1717, 163, 1716, 13, 57, 91, 3, 1429, 1428, 130,
	81, 41, 24, 1715, 2172, 658, 886, 53, 102, 78,
	63, 107, 65, 84, 154, 37, 1713, 1709, 132, 1708,
	1707, 1706, 1704, 1703, 106, 1702, 1701, 87, 152, 18,
	10, 7, 110, 55, 40, 108, 131, 158, 134, 1700,
	112, 133, 61, 99, 1699, 1698, 1213, 136, 1697, 1693,
	1692, 1194, 1189, 777, 161, 1690, 1689, 759, 586, 1688,
	1687, 97, 1685, 137, 1683, 1681, 155, 215, 77, 1679,
	56, 39, 118, 1675, 125, 69, 0, 781, 126, 1673,
	145, 95, 1672, 1670, 1669, 1664, 16, 2, 8, 5,
	6, 4, 26, 19, 1663, 1657, 143, 49, 93, 1656,
	162, 1654, 1653, 1652, 60, 1651, 20, 1647, 14, 1643,
	1634, 11, 1, 1633, 1629, 151, 1624, 117, 1623, 1462,
	1621, 156, 1613, 1612, 1500, 58, 109,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 50, 50, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 47, 47,
	52, 52, 52, 54, 54, 51, 51, 46, 46, 5,
	5, 224, 224, 225, 225, 36, 36, 40, 40, 37,
	38, 38, 39, 39, 6, 6, 6, 7, 7, 7,
	7, 7, 7, 14, 15, 15, 15, 15, 15, 15,
	15, 15, 98, 98, 97, 97, 100, 100, 16, 16,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 192, 192, 191, 19, 166, 166, 20, 20, 20,
	20, 21, 123, 123, 22, 22, 22, 22, 23, 27,
	265, 265, 265, 269, 269, 270, 270, 271, 271, 271,
	271, 271, 271, 271, 267, 267, 30, 30, 30, 30,
	30, 142, 138, 138, 140, 140, 140, 140, 61, 137,
	137, 137, 137, 139, 139, 139, 139, 217, 216, 216,
	222, 222, 222, 76, 76, 76, 76, 76, 77, 77,
	77, 215, 215, 215, 215, 223, 223, 223, 223, 223,
	223, 78, 78, 78, 221, 221, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 18, 266,
	266, 268, 268, 32, 32, 10, 10, 11, 11, 79,
	79, 80, 80, 145, 145, 145, 145, 81, 81, 53,
	53, 53, 144, 234, 234, 235, 235, 235, 235, 235,
	235, 236, 236, 236, 236, 236, 236, 236, 232, 232,
	233, 230, 230, 231, 231, 231, 231, 272, 272, 143,
	143, 84, 84, 239, 239, 239, 239, 237, 237, 237,
	237, 237, 240, 238, 241, 241, 241, 241, 241, 178,
	178, 178, 34, 12, 59, 59, 13, 9, 9, 127,
	127, 88, 88, 183, 183, 183, 69, 69, 48, 48,
	48, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 128, 128, 129, 129, 25, 29, 33, 33,
	33, 33, 33, 274, 274, 65, 65, 65, 65, 66,
	66, 141, 141, 141, 141, 141, 60, 8, 8, 55,
	55, 56, 56, 57, 57, 58, 58, 275, 275, 24,
	24, 24, 24, 24, 72, 72, 134, 134, 134, 136,
	136, 135, 135, 135, 113, 113, 113, 35, 93, 93,
	102, 102, 103, 103, 189, 104, 104, 28, 28, 43,
	43, 41, 41, 41, 41, 41, 41, 42, 42, 44,
	44, 44, 44, 44, 44, 44, 247, 247, 247, 250,
	250, 246, 248, 248, 249, 249, 273, 273, 114, 114,
	114, 83, 82, 82, 86, 86, 85, 87, 87, 182,
	111, 111, 111, 111, 130, 131, 131, 132, 132, 133,
	133, 110, 110, 162, 162, 45, 45, 92, 92, 94,
	94, 152, 152, 152, 153, 153, 151, 151, 151, 151,
	184, 184, 184, 184, 184, 184, 184, 184, 263, 263,
	263, 264, 264, 181, 181, 185, 185, 185, 185, 185,
	185, 179, 179, 179, 179, 180, 180, 190, 190, 117,
	117, 117, 117, 115, 115, 116, 116, 186, 186, 186,
	186, 112, 112, 187, 187, 187, 146, 146, 193, 193,
	193, 211, 211, 91, 91, 91, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 195, 195, 195, 195, 197, 197, 197, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 210, 210, 210, 210, 210, 198, 198,
	205, 205, 206, 206, 207, 208, 199, 199, 200, 200,
	201, 202, 209, 209, 209, 209, 213, 213, 203, 203,
	203, 203, 203, 204, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 125, 125,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 156, 156, 156, 156, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 242, 242, 242,
	242, 242, 242, 242, 244, 244, 245, 245, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 251, 251, 252, 252, 254,
	254, 255, 255, 256, 257, 257, 257, 258, 259, 259,
	253, 253, 260, 260, 260, 261, 261, 262, 262, 262,
	262, 262, 168, 168, 168, 169, 169, 170, 176, 176,
	176, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 67, 67, 67,
	67, 67, 99, 99, 165, 165, 163, 163, 163, 167,
	167, 118, 118, 212, 212, 212, 212, 212, 212, 212,
	119, 119, 119, 126, 120, 120, 121, 121, 121, 121,
	121, 121, 159, 160, 122, 122, 122, 161, 161, 171,
	175, 175, 174, 173, 173, 172, 172, 149, 149, 150,
	150, 148, 147, 107, 107, 106, 106, 105, 105, 276,
	276, 177, 177, 108, 108, 109, 101, 101, 188, 188,
	188, 188, 95, 95, 74, 74, 96, 96, 70, 70,
	73, 73, 71, 71, 71, 71, 89, 89, 90, 90,
	68, 68, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 214, 214, 214, 164, 62, 62, 62,
	63, 63, 64, 64, 219, 219, 219, 220, 220, 220,
	220, 218, 218, 218, 218, 218, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 4,
	6, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 7,
	6, 1, 1, 1, 3, 3, 0, 2, 0, 2,
	1, 3, 5, 0, 4, 6, 7, 1, 1, 1,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	4, 6, 1, 3, 1, 2, 2, 3, 2, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 1, 1, 1,
	1, 3, 3, 0, 2, 3, 2, 3, 6, 6,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 3, 6, 3,
	1, 5, 2, 1, 1, 1, 3, 3, 2, 3,
	3, 3, 3, 1, 3, 3, 2, 1, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 2, 2, 2, 4,
	2, 4, 4, 4, 4, 4, 4, 4, 2, 3,
	4, 3, 3, 4, 4, 2, 5, 5, 2, 2,
	0, 2, 0, 6, 6, 7, 10, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 5, 2, 0, 6, 11, 14, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 6, 8, 8, 10,
	8, 10, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 1, 3, 3, 0, 3, 8, 11, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	6, 8, 5, 7, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 3, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	7, 4, 6, 3, 1, 5, 6, 9, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 6, 4,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -27, -29,
	-28, -30, -31, -32, -33, -25, -34, -35, 23, 34,
	221, 65, -8, -9, -10, -11, -12, -13, -249, 93,
	101, 123, 204, 100, 86, 117, 224, 232, -41, -43,
	240, -142, 241, 35, 250, 59, 96, 226, 220, 273,
	67, -247, -44, -42, 321, 296, 302, 235, -45, 258,
	288, 324, 258, 132, 79, 291, -265, -96, 258, 79,
	-71, -62, 314, 4, -226, -228, 20, 21, 23, 33,
	34, 35, 40, 44, 47, 58, 59, 60, 62, 64,
	65, 66, 69, 70, 77, 78, 80, 82, 86, 88,
	92, 93, 95, 100, 101, 107, 108, 111, 113, 118,
	123, 124, 125, 126, 133, 136, 138, 131, 146, 148,
	149, 152, 151, 156, 159, 162, 164, 165, 166, 169,
	167, 171, 172, 174, 173, 179, 181, 182, 184, 187,
	190, 193, 196, 197, 198, 199, 202, 204, 206, 207,
	208, 210, 211, 213, 214, 215, 216, 217, 220, 218,
	219, 221, 222, 224, 226, 227, 229, 231, 232, 233,
	234, 237, 238, 240, 241, 243, 246, 249, 250, 251,
	254, 252, 248, 257, 259, 260, 261, 262, 269, 273,
	274, 275, 276, 279, 280, 281, 283, 285, 286, 287,
	292, 297, 298, 299, 300, 28, 36, 37, 38, 39,
	41, 42, 45, 46, 50, 51, 52, 54, 81, 83,
	84, 99, 102, 103, 109, 119, 121, 127, 128, 137,
	139, 140, 141, 143, 154, 168, 178, 180, 191, 195,
	201, 203, 209, 228, 236, 244, 245, 253, 255, 264,
	265, 266, 270, 271, 288, 289, -265, -70, -62, 79,
	88, 136, 281, 280, 79, 132, 258, 291, -17, 321,
	-28, -7, -15, -4, -24, -35, -14, -31, -18, -32,
	-16, 23, -218, 4, -226, -228, -227, -229, 56, 68,
	116, 135, 129, 145, 147, 155, 157, 170, 192, 194,
	225, 242, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 43, 48, 49, 53, 55, 57, 63, 67, 71,
	72, 73, 74, 75, 76, 85, 87, 89, 90, 91,
	94, 96, 98, 104, 105, 106, 112, 114, 115, 117,
	120, 122, 130, 132, 134, 142, 144, 150, 153, 158,
	160, 161, 175, 176, 177, 183, 185, 186, 188, 189,
	200, 205, 212, 223, 235, 239, 247, 256, 258, 263,
	267, 268, 272, 277, 278, 282, 284, 290, 291, 293,
	294, 295, 296, -62, -62, -62, 204, 22, -269, 22,
	-270, -271, 67, 93, 117, 235, 136, 88, 280, -269,
	-66, 232, -62, -138, 159, 238, 228, 269, -139, -137,
	-217, 264, 169, -97, -62, 4, 22, 79, 58, 80,
	118, 132, 133, 63, 64, 149, 259, 264, 269, 67,
	283, 261, -274, 269, 269, -274, -274, -65, 269, 267,
	-66, -273, 258, 258, 282, 291, -127, 79, 278, -42,
	-44, -43, -85, -86, 277, 142, 98, 189, -41, -43,
	-247, -250, 210, -246, -62, -250, -82, -83, 22, 90,
	325, -186, -70, 186, -109, 321, -3, -186, 127, -70,
	-73, 127, -70, -62, -186, 127, 267, 325, -96, -89,
	-62, -148, -147, 323, 115, 115, 321, -106, -107, -147,
	-148, 115, 144, 144, -187, -186, -62, 127, -74, 127,
	-73, -98, 127, -97, -98, 127, -192, -191, -220, 4,
	-226, -228, -227, 288, 258, 132, -166, 321, -123, 321,
	-62, 22, 185, 325, 185, -62, -138, 52, -138, 321,
	-140, -60, -61, 146, 206, 267, 306, 115, 300, -78,
	5, 85, -100, 323, 115, -266, 185, 115, 115, 115,
	115, 115, 115, 300, 146, 206, 231, 258, 291, 115,
	-141, -60, -61, -141, 267, -66, -112, -186, -97, 127,
	-62, -97, 132, -62, 127, -85, -86, -111, -130, -131,
	158, 183, -114, 22, 90, -114, -114, 44, 322, 322,
	325, -250, -90, 321, -101, -188, -154, 314, -156, 312,
	313, 318, 175, 301, -168, -158, -171, 99, 228, 321,
	-70, -157, 326, 9, -244, -43, 29, -169, -170, 48,
	-62, 7, 8, 5, 6, -68, -195, -164, -204, 272,
	104, 177, -242, -243, 4, -226, -219, -196, -206, -200,
	-203, 143, 56, 72, 75, 73, 76, 239, 282, 49,
	28, 102, 103, 195, 201, 255, 270, 271, 127, 178,
	128, 54, 119, 154, 92, 37, 39, 41, 42, 50,
	51, 81, 83, 84, 109, 137, 139, 140, 141, 180,
	209, 244, 253, 265, 266, 289, -227, -207, -208, -201,
	-202, -209, -101, -109, 314, -70, 321, -108, -177, -154,
	85, -50, 218, -49, 21, 23, 93, 286, 99, 248,
	248, 218, 99, 326, 218, 218, 99, -224, -221, 9,
	-220, 5, -71, 325, -218, 314, -225, -224, 251, 322,
	-95, -70, -107, -187, -72, -70, -72, 240, -62, 30,
	99, -52, 325, 47, 222, 99, -52, 325, 99, -52,
	99, 322, 325, -186, 127, -73, 30, -165, -193, -194,
	-196, -205, -199, -203, -204, 40, 46, 45, 262, 168,
	236, 245, 38, 184, 138, 137, 139, 140, 141, 244,
	37, 209, 109, 92, 84, 83, 180, 42, 41, -207,
	-208, -201, -202, 81, 265, 266, 143, 39, 51, 50,
	289, 253, -99, -154, -265, -271, -265, 30, -99, 325,
	325, 156, -77, 162, 174, 124, -216, 85, -222, -215,
	-178, 9, 272, 104, 185, -221, 8, 313, -214, 7,
	312, -216, 85, 70, -223, 5, 4, -164, -178, 85,
	159, -204, 323, -218, -217, -268, 112, -265, -217, -217,
	-217, -217, -217, -62, 156, -217, -217, 258, 132, 325,
	325, -66, -52, 325, 321, -84, 175, -248, 296, -84,
	321, -63, 127, -62, -248, 175, -111, -131, -130, -132,
	-154, 22, -154, -156, -42, -42, -42, -87, -182, -154,
	-246, 30, -89, -92, 325, 115, 10, 11, 55, 33,
	312, 313, 314, 315, 110, 316, 309, 310, 311, 308,
	304, 305, 306, 61, 163, 230, 13, 14, 15, 26,
	188, 157, 301, 129, 242, 318, 16, 17, 18, 145,
	36, 130, -67, 30, 4, -75, -154, -154, -154, -154,
	-154, 194, -105, -149, 319, -43, 321, -43, -154, -99,
	7, -43, -163, 319, -172, -154, -106, 321, 5, 321,
	5, -251, 297, 112, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 203, -213, 292, -213, -213, -197, 321, -197, -198,
	321, -197, 298, 302, 321, -92, -70, 325, 322, 325,
	267, -128, 63, 57, -144, 127, 57, -230, -62, 63,
	-231, 53, 278, 205, 114, -128, 63, -128, 63, 63,
	-186, 33, 33, 267, -73, -62, 267, 267, -186, -190,
	303, -62, -190, 325, 115, 322, 325, -146, 294, -134,
	-28, 321, 85, 30, -134, -102, -103, -189, -104, -70,
	321, -62, -62, -73, -74, -97, -98, -98, -17, -191,
	99, -20, -28, -24, -35, -14, 322, 325, -91, 29,
	-124, 321, 299, 166, 82, 125, 165, -125, 234, 322,
	325, 267, 115, 269, 322, -61, -60, -76, 208, 246,
	219, 237, 325, 8, 7, 7, -218, -267, -62, -70,
	-73, -61, -60, -186, -79, -89, -80, -62, -145, -144,
	-232, -233, -230, 132, 278, 105, 30, 99, -59, 199,
	30, 185, 175, -55, 260, 99, -133, 228, 229, 325,
	-48, 31, 89, 321, 322, -146, -188, -94, -184, 319,
	-186, -70, -43, -185, 321, -211, -193, -210, 214, 215,
	213, 217, 216, -193, -97, 264, -154, -154, -154, -154,
	-154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
	-154, -154, -154, -154, -154, -154, -154, -154, 157, 129,
	242, 36, 130, -154, 267, -154, -154, -154, -154, 167,
	175, 177, 272, 104, 279, 90, 181, -276, 256, 32,
	-161, -43, 321, -176, 27, 247, 22, -218, -168, 228,
	321, -149, -154, -150, -99, 322, 322, 325, -99, -167,
	320, -163, -175, -174, 293, 322, -99, 290, 22, 90,
	314, 7, -124, -252, 107, 120, 321, 322, 322, -154,
	-154, -118, -212, -99, 4, 299, 166, 82, 125, 165,
	234, -118, -119, -154, -99, -120, -155, -156, 312, 313,
	318, 321, 228, -121, -154, -99, -154, 43, 153, 268,
	-122, -154, 115, -99, -154, -154, -154, -99, -99, -99,
	321, 7, 7, 264, 264, 7, -146, 322, -177, -49,
	-70, -62, -62, 175, -144, 127, -54, 175, -193, -62,
	321, 321, 148, 148, -62, -62, 127, -62, 127, -62,
	-62, -50, 218, -28, -28, -62, 218, -62, -70, 218,
	-36, 126, 181, -39, 296, -224, 251, 115, -70, -113,
	223, -154, -113, -136, 185, -95, 288, -62, 223, -93,
	325, 115, 306, -95, -52, -52, -52, -186, -193, 319,
	319, 7, 267, 267, 267, 267, 321, -154, -267, -267,
	-60, 276, 60, 208, -222, 325, 322, 322, 325, -63,
	132, -63, -28, -97, 5, -28, -70, 99, -56, 95,
	-275, 306, -62, -182, -20, -110, 120, -190, 325, 68,
	-117, 147, 170, 116, 155, 225, 135, 7, 101, -151,
	326, 321, -181, 302, -43, -185, -184, 300, -154, -154,
	267, -276, 256, -161, -154, 167, 177, 272, 104, 279,
	90, 181, 115, 321, -155, -155, -99, -158, 321, -99,
	320, 329, 322, -154, 320, 320, 325, -173, -174, 94,
	-154, -86, 325, -85, -154, -99, -99, 322, 322, -257,
	193, 321, 321, -154, 30, 325, 322, 115, 322, 322,
	-126, 200, 322, 10, 11, 312, 313, 314, 315, 110,
	316, 309, 310, 311, 308, 304, 305, 306, 61, 163,
	230, 13, 14, 15, 145, 130, -155, -155, -155, -99,
	321, 322, -159, -160, 115, 112, 30, -122, -122, -122,
	322, 115, -99, 325, 325, 325, 322, 322, 322, 7,
	322, 325, 322, 300, 300, 322, -110, 267, 267, 99,
	175, 285, -234, -231, -154, -88, -183, -62, -245, 321,
	-242, -243, -68, 321, 321, -47, 93, 240, -129, 99,
	-52, 99, -52, 267, -128, 63, 267, 267, -39, 115,
	257, 187, 251, -101, 176, 223, 62, 322, -101, -146,
	-103, -94, -177, 322, 320, 7, 7, 322, 166, 125,
	165, -125, 165, -125, -125, 7, -62, -81, 131, -145,
	321, -63, 321, 321, -84, 321, -62, -57, 152, -275,
	-221, -248, 322, -162, 122, 44, -184, 147, 147, -184,
	-117, 147, -115, 192, -115, -115, -263, 321, -17, 321,
	-181, -218, 319, 327, -99, -180, -179, 30, -62, 190,
	322, -154, -154, -155, -155, 115, 321, -154, -165, 26,
	26, 322, -99, 322, 325, -150, -154, 322, -163, 96,
	-154, 263, 322, 290, -86, -86, -86, 5, -258, -62,
	321, 294, -85, 322, -211, -193, -154, -159, -154, -211,
	-193, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	90, 175, 181, -155, 325, -99, 322, -160, -159, -154,
	-154, -193, 322, 322, 322, -99, -154, -154, -154, 322,
	7, -162, -62, -62, -144, 99, -235, 63, -236, 55,
	105, 67, 175, 177, 278, 205, 53, 85, 212, 322,
	322, 325, -69, -106, 55, -69, -154, 321, -88, -89,
	175, 85, 175, 85, 78, 274, -62, -62, -70, -62,
	-62, -62, -70, -225, 264, 321, -101, -135, 321, 185,
	-28, -113, 306, 320, 320, 322, 130, -88, 321, -89,
	-79, 30, -88, 185, -58, 151, -275, -221, -55, -254,
	295, -154, -99, -184, -184, -116, 284, 185, 147, -184,
	320, 322, -264, 7, 320, -192, -180, 7, -153, -152,
	113, 173, 322, -62, 321, -181, 26, 26, -154, -165,
	322, -154, -154, 322, -154, 320, -154, 5, -154, 322,
	322, 322, -259, -62, -154, 322, 322, 322, -160, 115,
	90, 181, 321, -154, 322, 322, 325, 322, 322, 322,
	-254, -144, -62, -97, -62, 105, 127, 177, 148, 321,
	-155, -70, -143, -272, 66, 254, -183, -48, -97, -48,
	322, -99, 322, 322, 177, 177, -154, -193, -52, -52,
	267, 267, -157, -68, -62, -38, -37, 5, 91, -89,
	63, -109, -43, 321, 196, 322, -88, 322, 322, -28,
	322, -70, -275, -221, -56, -255, -256, -62, -116, 321,
	-154, -184, -151, 322, 325, -181, 322, 320, 325, 328,
	306, -181, 321, -89, -179, -154, -154, 322, 322, -86,
	-253, 198, 322, -155, 115, 321, -165, 322, -154, -236,
	-63, 175, -154, -64, 321, -81, 321, -69, -86, 212,
	-51, 55, -62, -62, 321, 325, 322, -40, 306, 280,
	176, 322, -62, -62, -143, 322, -81, -143, 321, -221,
	-57, 325, 30, -89, -181, 7, -180, -17, -152, -218,
	319, -180, -89, 322, 322, -86, 44, -155, -165, 322,
	322, 99, 322, -239, 164, -62, -89, -48, 322, -70,
	-46, 284, -97, -99, -37, 5, 240, -146, 321, -81,
	-143, -81, -88, -58, -256, -258, 322, -179, 320, 7,
	322, -260, 207, 229, -99, 322, 105, -237, -240, -238,
	185, 116, 197, 243, 322, 322, -84, -154, -86, -102,
	-89, -81, 322, -181, 320, 322, -261, -262, 36, 275,
	70, -154, -261, -62, -238, 185, -240, 185, 280, 88,
	-239, 322, -146, 322, -143, -180, -262, 202, 111, 228,
	202, 111, -241, 172, 222, 47, 240, -241, -237, -53,
	47, 222, -81, 26, 20, 177, 85, -262,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 0, 0,
	0, 0, 77, 78, 79, 80, 81, 82, 0, 0,
	415, 0, 0, 0, 0, 0, 0, 0, 387, -2,
	0, 150, 0, 334, 0, 334, 334, 338, 0, 417,
	300, 414, -2, 425, 0, 0, 0, 423, 401, 0,
	0, -2, 0, 0, 0, 0, 0, 130, 0, 946,
	876, 882, 883, 907, 908, 909, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 0, 0, 878, 946,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 0, 218, 921, 922, 923, 924, 925, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
	1199, 1200, 1201, 116, 123, 124, 998, 126, 0, 133,
	134, 135, 137, 138, 139, 140, 141, 142, 143, 0,
	327, 1019, 340, 146, 975, 1023, 1094, 1039, 153, 163,
	0, 1100, -2, 167, 94, 196, 197, 198, 0, 200,
	220, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	215, 0, 345, 333, 345, 330, 331, 332, 335, 0,
	326, 0, 416, 0, 0, 0, 0, 0, 299, -2,
	397, 398, -2, 0, 420, 420, 420, 0, 0, 398,
	0, 406, 1002, 409, 889, 407, 0, 0, 422, 421,
	0, 402, 497, 0, 445, 0, 2, 0, 1078, 497,
	0, 1078, 881, 0, 0, 1078, 0, 0, 131, 132,
	886, 884, 885, 0, 0, 0, 0, 879, 855, 853,
	854, 0, 0, 0, 0, 503, 84, 1078, 52, 1078,
	874, 52, 1078, 92, 52, 1078, 0, 111, 113, 917,
	918, 919, 920, 1105, 0, 0, 0, 0, 121, 0,
	125, 127, 0, 0, 0, 339, 147, 1067, 149, 0,
	152, 154, 155, 0, 0, 0, 0, 0, 0, 166,
	191, 192, 95, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 211, 212, 0, 0, 0,
	328, 341, 342, 329, 0, 337, 52, 501, 272, 1078,
	413, 272, 911, 413, 1078, -2, 0, 393, 432, 433,
	0, 0, 0, 418, 419, 0, 0, 0, 389, 390,
	0, 408, 0, 0, 448, 866, 870, 871, 600, 0,
	0, 0, 0, 0, 0, 692, 694, 1072, 1094, 0,
	696, 697, 0, 699, 701, 702, 0, 705, 706, 846,
	878, 892, 893, 894, 895, 0, 0, 898, 0, 900,
	901, 902, 746, 715, -2, -2, 890, 532, 533, 534,
	535, -2, 1107, 719, 721, 723, 724, 725, 726, 0,
	1056, 1073, 1074, 1090, 1091, 1099, 1103, 1104, 1078, 1087,
	1079, 1068, 1076, 1085, 951, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 916, 562, 563, 568,
	569, 571, 448, 446, 498, 499, 0, 0, 863, 861,
	862, 29, 323, 31, 0, 323, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 488, 61, 62,
	194, 195, 877, 0, 851, 852, 488, 63, 74, 0,
	0, 872, 856, 507, 0, 364, 0, 0, 504, 0,
	0, 86, 0, 50, 51, 0, 88, 0, 0, 90,
	0, 415, 0, 0, 1078, 0, 415, 0, 804, 515,
	516, 517, 518, 519, 597, 522, 523, 524, 525, 526,
	527, 528, 529, 530, 531, 539, 540, 541, 542, 543,
	544, 545, 559, 0, 538, 538, 538, 551, 552, 560,
	561, 566, 567, 578, 579, 581, 583, 577, 577, 577,
	574, 575, 0, 802, 0, 136, 0, 0, 0, 0,
	0, 0, 158, 178, 179, 180, 159, 161, 168, 170,
	171, 172, 181, 182, 183, 184, 289, 0, 291, 903,
	0, 160, 162, 164, 165, 185, 186, 187, 188, 189,
	190, 0, 0, 96, 199, 201, 0, 219, 202, 203,
	204, 205, 206, 207, 210, 213, 214, 0, 0, 0,
	0, 336, 292, 0, 230, 0, 0, 295, 412, 0,
	0, 0, 1078, 910, 350, 0, 396, 430, 431, 434,
	437, 438, 435, 600, 403, 404, 405, 426, 427, 310,
	410, 0, 0, 507, 0, 0, 0, 0, 0, 0,
	781, 782, 783, 784, 785, 786, 789, 790, 787, 788,
	791, 792, 793, 0, 0, 0, 794, 795, 796, 0,
	0, 798, 0, 800, 0, 0, 0, 0, 0, 0,
	860, 0, 0, 0, 869, 797, 605, 606, 607, 629,
	630, 0, 693, 857, 850, 695, 0, -2, 802, 0,
	698, 703, 704, 0, 0, 845, -2, 0, 897, 0,
	597, 748, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 825, 831, 0, 0, 0, 0, 0, 0, 0,
	0, 547, 565, 576, 573, 572, 549, 0, 548, 546,
	0, 550, 0, 0, 0, 507, 0, 0, 865, 0,
	0, 0, 0, 322, 33, 1078, 0, 54, 0, 0,
	262, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 880, 0, 0, 0, 66,
	0, 887, 73, 0, 0, 0, 0, 376, 0, 376,
	366, 0, 0, 0, 362, 379, 380, 382, 383, 0,
	0, 505, 85, 875, 52, 93, 52, 52, 99, 112,
	0, 114, 117, 118, 119, 120, 115, 0, 508, 510,
	520, 0, 584, 585, 586, 587, 588, 589, 598, 122,
	0, 0, 0, 0, 151, 156, 157, 346, 0, 175,
	0, 177, 0, 290, 905, 904, 97, 221, 144, 216,
	217, 343, 344, 502, 0, 0, 229, 886, 231, 233,
	234, 235, 236, 911, 0, 911, 0, 0, 293, 0,
	0, 0, 0, 352, 358, 0, 436, 439, 440, 0,
	429, 308, 309, 415, 888, 442, 867, 488, 449, 0,
	459, 497, 474, 464, 0, 601, 511, 512, 553, 554,
	555, 556, 557, 602, 603, 0, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, -2, -2, -2, 621,
	622, 623, -2, -2, -2, 627, 628, -2, 799, 801,
	0, 860, 0, -2, 0, 637, -2, -2, -2, 641,
	0, 643, 646, 648, 650, 0, 0, 0, 0, 859,
	660, 837, 0, 0, 778, 779, 780, 868, 645, 0,
	0, 858, 849, 0, 0, -2, 700, 0, 0, 0,
	808, 809, 844, 840, 0, 707, 425, 0, 0, 0,
	0, 0, 906, 756, 0, 0, 0, 720, 722, 0,
	0, 0, 0, 812, -2, -2, -2, -2, -2, -2,
	-2, 0, 0, 802, 822, 0, 0, 663, 0, 0,
	0, 0, 1094, 0, 802, 830, 0, 0, 0, 0,
	0, 802, 0, 836, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 442, 500, 864, 32,
	312, 0, 0, 0, 35, 1078, 43, 0, 244, 0,
	0, 0, 0, 0, 325, 44, 1078, 52, 1078, 52,
	45, 30, 323, 223, 224, 316, 0, 311, 314, 0,
	73, 0, 0, 60, 0, 64, 75, 0, 873, 83,
	0, 506, 359, 360, 0, 0, 368, 365, 0, 507,
	0, 0, 0, 0, 87, 89, 91, 0, 805, 0,
	0, 0, 0, 0, 0, 0, 0, 803, 128, 129,
	148, 173, 174, 176, 169, 0, 238, 271, 0, 0,
	911, 0, 227, 272, 294, 296, 0, 0, 354, 358,
	0, 357, 413, 428, 0, 444, 0, 447, 0, 0,
	0, 0, 0, 494, 494, 494, 492, 468, 415, 474,
	0, 0, 486, 0, -2, 464, 0, 0, -2, -2,
	0, 0, 0, 661, -2, 642, 644, 647, 649, 651,
	0, 0, 0, 0, 0, 0, 0, 662, 0, 0,
	847, 850, -2, 803, 806, 807, 0, 0, 841, 0,
	0, 0, 0, 424, 425, 425, 425, 713, 0, 714,
	0, 0, 0, 0, 0, 0, 729, 0, 730, 731,
	0, 0, 732, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 666, 667, 668, 0,
	0, 733, 828, 829, 0, 0, 0, 0, 0, 0,
	738, 0, 835, 0, 0, 0, 742, 743, 744, 0,
	536, 0, 558, 580, 582, 570, 444, 0, 0, 0,
	0, 53, 242, 261, 0, 0, 301, 307, 307, 0,
	716, 717, 0, 0, 0, 37, 0, 0, 0, 0,
	41, 0, 47, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 76, 374, 375, 0, 373, 0, 363, 376,
	381, 378, 384, 0, 513, 0, 0, 521, 590, 591,
	592, 593, 594, 595, 596, 0, 145, 225, 0, 232,
	0, 0, 0, 230, 0, 0, 0, 356, 358, 0,
	349, 350, 411, 750, 0, 0, 450, 0, 0, 0,
	0, 0, 489, 493, 490, 491, 0, 0, 0, 0,
	486, 456, 0, 0, 0, 463, 485, 0, 484, 473,
	-2, 604, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 838, 0, 773, 0, 0, 849, -2, 810, 839,
	843, 0, 708, 0, 0, 0, 0, 899, 754, 755,
	759, 0, 0, 718, 0, 0, 811, 821, 823, 664,
	665, 669, 670, 671, 672, 673, 674, 675, 676, 677,
	678, -2, -2, -2, 682, 683, 684, -2, -2, -2,
	0, 0, 0, 824, 0, 0, 776, 826, 827, 832,
	833, 0, 735, 736, 737, 834, 0, 0, 0, 564,
	0, 750, 318, 320, 34, 0, 243, 0, 246, 0,
	0, 0, 0, 252, 253, 0, 0, 0, 0, 263,
	270, 0, 310, 891, 0, 310, 0, 0, 0, 0,
	0, 49, 0, 0, 324, 0, 52, 52, 313, 0,
	0, 317, 315, 65, 0, 0, 361, 0, 0, 0,
	367, 377, 0, 514, 509, 599, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 358, 0, 351, 352, 399,
	0, 443, 441, 476, 0, 478, 0, 0, 0, 480,
	459, 469, 0, 471, 474, 0, 461, 0, 0, 454,
	0, 453, 474, 482, 0, 0, 0, 0, -2, 0,
	654, -2, -2, 772, 803, 848, 842, 896, 425, 709,
	711, 712, 761, 758, 0, 745, 727, 728, 820, 0,
	0, 0, 0, 803, 775, 734, 0, 740, 741, 537,
	400, 36, 0, 247, 248, 911, 0, 251, 254, 0,
	256, 913, 238, 0, 267, 268, 302, 303, 306, 304,
	307, 425, 265, 0, 38, 39, 48, 56, 40, 46,
	0, 0, 487, 0, 0, 0, 70, 68, 0, 0,
	0, 385, 386, 0, 0, 270, 0, 260, 238, 228,
	270, 0, 0, 353, 354, 749, 751, 0, 477, 0,
	496, 479, 474, 470, 0, 486, 415, 457, 0, 458,
	0, 486, 0, 0, 465, -2, -2, 655, 774, 0,
	425, 0, 747, -2, 0, 0, 0, 777, 0, 245,
	249, 0, 0, 276, 0, 264, 0, 310, 0, 0,
	58, 0, 319, 321, 0, 0, 72, 69, 0, 0,
	370, 507, 372, 0, 238, 270, 226, 238, 0, 355,
	356, 0, 0, 0, 0, 472, 466, 0, 455, 451,
	0, 462, 0, 483, 710, 764, 0, -2, 0, 690,
	739, 0, 255, 281, 0, 0, 0, 305, 708, 272,
	42, 0, 55, 425, 71, 67, 0, 371, 0, 258,
	238, 297, 0, 348, 752, 753, 495, 460, 474, 0,
	481, 0, 0, 0, 760, 691, 0, 257, 277, 278,
	0, 273, 274, 275, 912, 269, 276, 57, 0, 507,
	0, 259, 270, 486, 452, 757, 762, 765, -2, 1042,
	943, 0, 763, 250, 279, 0, 280, 0, 0, 0,
	281, 0, 369, 241, 238, 467, 0, 767, 768, 769,
	770, 771, 282, 0, 285, 286, 0, 283, 266, 237,
	239, 240, 298, 0, 284, 287, 288, 766,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 310, 3, 316, 311, 3,
	321, 322, 314, 312, 325, 313, 323, 315, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 329, 324,
	304, 306, 305, 3, 326, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 319, 3, 320, 309, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 327, 308, 328, 318,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 307, 57647, 317, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:782
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:788
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:794
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			return unimplemented(sqllex)
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:910
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:920
		{
			return unimplemented(sqllex)
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = nil
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = DropCascade
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = DropRestrict
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = DropDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:982
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:983
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return unimplemented(sqllex)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:987
		{
		}
	case 59:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:991
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 66:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 68:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.str = ""
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 72:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 73:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1060
		{
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1190
		{ /* SKIP DOC */
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1377
		{
			return unimplemented(sqllex)
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{ /* SKIP DOC */
		}
	case 151:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1449
		{
			return unimplemented(sqllex)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return unimplemented(sqllex)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = Low
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = Normal
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = High
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			return unimplemented(sqllex)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1565
		{
			return unimplemented(sqllex)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1566
		{
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1654
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1658
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1766
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1770
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = DropDefault
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1780
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1985
		{
			return unimplemented(sqllex)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			return unimplemented(sqllex)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return unimplemented(sqllex)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1988
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1995
		{
			return unimplemented(sqllex)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1996
		{
			return unimplemented(sqllex)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1997
		{
			return unimplemented(sqllex)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			return unimplemented(sqllex)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1999
		{
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2002
		{
			return unimplemented(sqllex)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2005
		{
			return unimplemented(sqllex)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2008
		{
			return unimplemented(sqllex)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2009
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2010
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2011
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2012
		{
			return unimplemented(sqllex)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2044
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = true
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = false
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2119
		{
			return unimplemented(sqllex)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2120
		{
			return unimplemented(sqllex)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			return unimplemented(sqllex)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2124
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = Ascending
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = Descending
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2178
		{
			return unimplemented(sqllex)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2179
		{
			return unimplemented(sqllex)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = true
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = false
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2193
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2235
		{
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2236
		{
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.str = ""
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.str = ""
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.str = ""
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.str = ""
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.str = ""
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.str = ""
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2358
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2359
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = AbsentReturningClause
		}
	case 361:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2379
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = AbsentReturningClause
		}
	case 363:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2387
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2429
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2433
		{
			return unimplemented(sqllex)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2441
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 377:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2463
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2464
		{
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2691
		{
			return unimplemented(sqllex)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2692
		{
			return unimplemented(sqllex)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2693
		{
			return unimplemented(sqllex)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2696
		{
			return unimplemented(sqllex)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2697
		{
			return unimplemented(sqllex)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2700
		{
			return unimplemented(sqllex)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2703
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2704
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2707
		{
			return unimplemented(sqllex)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2708
		{
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2711
		{
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2712
		{
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = true
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = false
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = false
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = true
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2735
		{
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2736
		{
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2774
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2794
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2835
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2836
		{
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2894
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = &From{}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2930
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2948
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2975
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2992
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = nil
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3053
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3059
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = true
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = false
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.str = astFullJoin
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.str = astLeftJoin
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.str = astRightJoin
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.str = astInnerJoin
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3170
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3171
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3257
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3270
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3271
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3285
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3294
		{
			return unimplemented(sqllex)
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3362
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = nil
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3411
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3506
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3538
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3577
		{
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3578
		{
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = year
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = month
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = day
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = hour
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = minute
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = month
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = hour
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = minute
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = minute
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = nil
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = second
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3673
		{
			return unimplemented(sqllex)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3708
		{
			return unimplemented(sqllex)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			return unimplemented(sqllex)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3942
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4115
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4168
		{
			return unimplemented(sqllex)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4169
		{
			return unimplemented(sqllex)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4192
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4208
		{
			return unimplemented(sqllex)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
			return unimplemented(sqllex)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4213
		{
			return unimplemented(sqllex)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4230
		{
			return unimplemented(sqllex)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4231
		{
			return unimplemented(sqllex)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
			return unimplemented(sqllex)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4233
		{
			return unimplemented(sqllex)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4262
		{
			return unimplemented(sqllex)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4306
		{
			return unimplemented(sqllex)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4307
		{
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = Window(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4342
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.str = ""
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4404
		{
			return unimplemented(sqllex)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4405
		{
			return unimplemented(sqllex)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4406
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4409
		{
			return unimplemented(sqllex)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4410
		{
			return unimplemented(sqllex)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4416
		{
			return unimplemented(sqllex)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4417
		{
			return unimplemented(sqllex)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4418
		{
			return unimplemented(sqllex)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4419
		{
			return unimplemented(sqllex)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4420
		{
			return unimplemented(sqllex)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = Any
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = Some
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = All
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = Plus
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = Minus
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = Mult
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = Div
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = FloorDiv
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = Mod
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = Bitand
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = Bitor
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = Bitxor
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = Bitxor
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = LT
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = GT
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = EQ
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = LE
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = GE
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = NE
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = Like
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = NotLike
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = ILike
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = NotILike
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4784
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4785
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4903
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4947
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4983
		{
			return unimplemented(sqllex)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = DNull
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5022
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.str = ""
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
