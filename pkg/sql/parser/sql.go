// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT2VECTOR = 57480
const INT8 = 57481
const INT64 = 57482
const INTEGER = 57483
const INTERSECT = 57484
const INTERVAL = 57485
const INTO = 57486
const IS = 57487
const ISOLATION = 57488
const JOIN = 57489
const KEY = 57490
const KEYS = 57491
const LATERAL = 57492
const LC_CTYPE = 57493
const LC_COLLATE = 57494
const LEADING = 57495
const LEAST = 57496
const LEFT = 57497
const LEVEL = 57498
const LIKE = 57499
const LIMIT = 57500
const LOCAL = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const LOW = 57504
const LSHIFT = 57505
const MATCH = 57506
const MINUTE = 57507
const MONTH = 57508
const NAME = 57509
const NAMES = 57510
const NATURAL = 57511
const NEXT = 57512
const NO = 57513
const NO_INDEX_JOIN = 57514
const NORMAL = 57515
const NOT = 57516
const NOTHING = 57517
const NULL = 57518
const NULLIF = 57519
const NULLS = 57520
const NUMERIC = 57521
const OF = 57522
const OFF = 57523
const OFFSET = 57524
const OID = 57525
const ON = 57526
const ONLY = 57527
const OPTIONS = 57528
const OR = 57529
const ORDER = 57530
const ORDINALITY = 57531
const OUT = 57532
const OUTER = 57533
const OVER = 57534
const OVERLAPS = 57535
const OVERLAY = 57536
const PARENT = 57537
const PARTIAL = 57538
const PARTITION = 57539
const PASSWORD = 57540
const PLACING = 57541
const POSITION = 57542
const PRECEDING = 57543
const PRECISION = 57544
const PREPARE = 57545
const PRIMARY = 57546
const PRIORITY = 57547
const RANGE = 57548
const READ = 57549
const REAL = 57550
const RECURSIVE = 57551
const REF = 57552
const REFERENCES = 57553
const REGCLASS = 57554
const REGPROC = 57555
const REGPROCEDURE = 57556
const REGNAMESPACE = 57557
const REGTYPE = 57558
const RENAME = 57559
const REPEATABLE = 57560
const RELEASE = 57561
const RESTORE = 57562
const RESTRICT = 57563
const RETURNING = 57564
const REVOKE = 57565
const RIGHT = 57566
const ROLLBACK = 57567
const ROLLUP = 57568
const ROW = 57569
const ROWS = 57570
const RSHIFT = 57571
const STATUS = 57572
const SAVEPOINT = 57573
const SEARCH = 57574
const SECOND = 57575
const SELECT = 57576
const SERIAL = 57577
const SERIALIZABLE = 57578
const SESSION = 57579
const SESSION_USER = 57580
const SET = 57581
const SHOW = 57582
const SIMILAR = 57583
const SIMPLE = 57584
const SMALLINT = 57585
const SMALLSERIAL = 57586
const SNAPSHOT = 57587
const SOME = 57588
const SPLIT = 57589
const SQL = 57590
const START = 57591
const STDIN = 57592
const STRICT = 57593
const STRING = 57594
const STORING = 57595
const SUBSTRING = 57596
const SYMMETRIC = 57597
const SYSTEM = 57598
const TABLE = 57599
const TABLES = 57600
const TEMPLATE = 57601
const TEXT = 57602
const THEN = 57603
const TIME = 57604
const TIMESTAMP = 57605
const TIMESTAMPTZ = 57606
const TO = 57607
const TRAILING = 57608
const TRANSACTION = 57609
const TREAT = 57610
const TRIM = 57611
const TRUE = 57612
const TRUNCATE = 57613
const TYPE = 57614
const UNBOUNDED = 57615
const UNCOMMITTED = 57616
const UNION = 57617
const UNIQUE = 57618
const UNKNOWN = 57619
const UPDATE = 57620
const UPSERT = 57621
const USER = 57622
const USERS = 57623
const USING = 57624
const VALID = 57625
const VALIDATE = 57626
const VALUE = 57627
const VALUES = 57628
const VARCHAR = 57629
const VARIADIC = 57630
const VIEW = 57631
const VARYING = 57632
const WHEN = 57633
const WHERE = 57634
const WINDOW = 57635
const WITH = 57636
const WITHIN = 57637
const WITHOUT = 57638
const YEAR = 57639
const ZONE = 57640
const NOT_LA = 57641
const WITH_LA = 57642
const AS_LA = 57643
const POSTFIXOP = 57644
const UMINUS = 57645

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5378

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	322, 28,
	-2, 409,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	98, 392,
	142, 392,
	158, 392,
	182, 392,
	188, 392,
	275, 392,
	-2, 382,
	-1, 62,
	98, 391,
	142, 391,
	158, 391,
	182, 391,
	188, 391,
	275, 391,
	-2, 385,
	-1, 71,
	1, 28,
	322, 28,
	-2, 409,
	-1, 420,
	1, 191,
	322, 191,
	-2, 972,
	-1, 456,
	158, 419,
	182, 419,
	-2, 388,
	-1, 459,
	158, 418,
	182, 418,
	-2, 386,
	-1, 591,
	158, 418,
	182, 418,
	-2, 389,
	-1, 650,
	319, 906,
	-2, 899,
	-1, 651,
	319, 907,
	-2, 900,
	-1, 657,
	5, 577,
	319, 577,
	-2, 1074,
	-1, 681,
	5, 538,
	-2, 1048,
	-1, 682,
	5, 571,
	319, 571,
	-2, 1050,
	-1, 683,
	5, 546,
	-2, 1051,
	-1, 684,
	5, 545,
	-2, 1052,
	-1, 685,
	5, 571,
	319, 571,
	-2, 1055,
	-1, 686,
	5, 571,
	319, 571,
	-2, 1056,
	-1, 687,
	5, 572,
	-2, 1059,
	-1, 688,
	5, 532,
	-2, 1060,
	-1, 689,
	5, 532,
	-2, 1061,
	-1, 690,
	5, 553,
	-2, 1065,
	-1, 691,
	5, 533,
	-2, 1070,
	-1, 692,
	5, 534,
	-2, 1071,
	-1, 693,
	5, 535,
	-2, 1072,
	-1, 694,
	5, 536,
	-2, 1073,
	-1, 695,
	5, 532,
	-2, 1078,
	-1, 696,
	5, 539,
	-2, 1083,
	-1, 697,
	5, 537,
	-2, 1086,
	-1, 698,
	5, 569,
	319, 569,
	-2, 1088,
	-1, 699,
	5, 573,
	-2, 1091,
	-1, 700,
	5, 575,
	-2, 1092,
	-1, 701,
	5, 568,
	319, 568,
	-2, 1096,
	-1, 959,
	98, 392,
	142, 392,
	158, 392,
	182, 392,
	188, 392,
	275, 392,
	-2, 694,
	-1, 968,
	319, 883,
	-2, 871,
	-1, 1176,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 612,
	-1, 1177,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 613,
	-1, 1178,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 614,
	-1, 1182,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 618,
	-1, 1183,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 619,
	-1, 1184,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 620,
	-1, 1187,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 625,
	-1, 1193,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 627,
	-1, 1196,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 632,
	-1, 1197,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 633,
	-1, 1198,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 634,
	-1, 1224,
	193, 765,
	-2, 768,
	-1, 1253,
	115, 805,
	319, 906,
	-2, 899,
	-1, 1254,
	115, 806,
	-2, 1044,
	-1, 1255,
	115, 807,
	-2, 971,
	-1, 1256,
	115, 808,
	-2, 940,
	-1, 1257,
	115, 809,
	-2, 955,
	-1, 1258,
	115, 810,
	-2, 970,
	-1, 1259,
	115, 811,
	-2, 1012,
	-1, 1413,
	98, 392,
	142, 392,
	158, 392,
	182, 392,
	188, 392,
	275, 392,
	-2, 468,
	-1, 1417,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 626,
	-1, 1418,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 628,
	-1, 1423,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 629,
	-1, 1440,
	193, 764,
	-2, 767,
	-1, 1629,
	1, 469,
	68, 469,
	98, 469,
	116, 469,
	120, 469,
	122, 469,
	135, 469,
	142, 469,
	147, 469,
	155, 469,
	158, 469,
	169, 469,
	182, 469,
	184, 469,
	188, 469,
	222, 469,
	224, 469,
	275, 469,
	282, 469,
	292, 469,
	293, 469,
	301, 469,
	318, 469,
	320, 469,
	322, 469,
	323, 469,
	-2, 468,
	-1, 1631,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 630,
	-1, 1636,
	145, 0,
	-2, 644,
	-1, 1646,
	193, 766,
	-2, 769,
	-1, 1680,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 671,
	-1, 1681,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 672,
	-1, 1682,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 673,
	-1, 1686,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 677,
	-1, 1687,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 678,
	-1, 1688,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 679,
	-1, 1808,
	145, 0,
	-2, 645,
	-1, 1811,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 648,
	-1, 1812,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 650,
	-1, 1915,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 649,
	-1, 1916,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 651,
	-1, 1923,
	145, 0,
	-2, 680,
	-1, 1977,
	145, 0,
	-2, 681,
	-1, 2038,
	36, 0,
	129, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 1047,
}

const sqlNprod = 1192
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 27742

var sqlAct = [...]int{

	651, 2037, 2017, 1049, 2062, 1586, 2036, 2018, 1624, 1983,
	2019, 1852, 1057, 877, 1625, 1411, 1774, 460, 1876, 641,
	704, 1140, 771, 1657, 1799, 1896, 1731, 467, 61, 421,
	84, 84, 84, 290, 1596, 48, 276, 839, 883, 1533,
	1408, 1785, 292, 84, 84, 84, 1717, 505, 84, 1387,
	481, 84, 1534, 1779, 649, 627, 1133, 734, 1501, 84,
	648, 1389, 1338, 1148, 1500, 523, 84, 84, 61, 1114,
	84, 278, 20, 84, 84, 84, 84, 740, 1602, 84,
	84, 1115, 1611, 1155, 1119, 1282, 1451, 964, 1399, 1222,
	879, 1118, 1089, 1332, 717, 1147, 610, 714, 755, 61,
	465, 1394, 1022, 1058, 1013, 1279, 1232, 621, 1206, 1153,
	283, 27, 1073, 1041, 832, 900, 772, 1209, 282, 16,
	577, 284, 8, 719, 744, 1082, 1109, 1250, 620, 955,
	611, 578, 524, 1150, 515, 518, 517, 1051, 998, 1122,
	905, 1732, 470, 20, 994, 62, 594, 593, 595, 834,
	459, 643, 76, 408, 830, 399, 748, 511, 80, 468,
	598, 496, 576, 1908, 411, 1439, 1909, 289, 1054, 1050,
	63, 2053, 1086, 2032, 737, 464, 1730, 464, 757, 1409,
	757, 757, 27, 264, 2025, 2015, 2010, 737, 1079, 737,
	16, 2006, 1979, 8, 737, 1079, 1973, 729, 1955, 737,
	1349, 1730, 1951, 478, 1350, 737, 484, 457, 1443, 491,
	487, 60, 447, 1444, 418, 1087, 289, 1946, 908, 909,
	1945, 1917, 1906, 1442, 1079, 766, 472, 1903, 1092, 67,
	1904, 644, 456, 1890, 907, 1887, 1730, 39, 737, 1885,
	1863, 911, 1730, 737, 1862, 40, 1834, 1730, 1813, 1092,
	1810, 1092, 69, 1079, 1802, 1088, 1085, 1092, 1751, 1750,
	60, 1092, 1092, 910, 1092, 1729, 1961, 41, 1730, 925,
	1042, 1045, 84, 84, 84, 84, 84, 1640, 527, 1572,
	1092, 70, 1048, 1397, 1567, 1518, 39, 1048, 1519, 65,
	1516, 906, 1397, 1092, 40, 66, 1515, 1514, 1440, 1092,
	1092, 1092, 85, 1376, 520, 520, 737, 1693, 1144, 1042,
	1092, 737, 1450, 465, 64, 1643, 41, 67, 916, 1096,
	1374, 1091, 1092, 1090, 1092, 1078, 1047, 1010, 1079, 1048,
	1009, 1045, 1011, 765, 1377, 525, 766, 1226, 1139, 1104,
	69, 606, 872, 871, 293, 908, 909, 824, 823, 737,
	494, 540, 758, 477, 758, 758, 71, 500, 856, 1412,
	1733, 560, 289, 67, 2051, 1793, 2035, 2024, 911, 70,
	1988, 926, 1974, 908, 909, 1888, 1839, 65, 67, 605,
	1835, 1827, 1826, 66, 52, 1825, 69, 1084, 1821, 1820,
	910, 1819, 1765, 1708, 1759, 84, 911, 1703, 1702, 1701,
	1651, 69, 1053, 1379, 1629, 512, 60, 1601, 504, 1083,
	84, 521, 1349, 84, 84, 70, 1576, 1523, 910, 703,
	1520, 1508, 1499, 1470, 1467, 1466, 1464, 67, 1456, 1455,
	70, 1375, 39, 52, 710, 1296, 1247, 927, 65, 972,
	40, 1410, 906, 1246, 66, 916, 605, 84, 64, 84,
	69, 84, 84, 84, 761, 84, 756, 875, 1218, 965,
	604, 64, 41, 64, 502, 882, 1659, 1998, 1958, 1944,
	84, 1936, 1934, 916, 592, 1925, 1912, 1899, 1883, 70,
	584, 84, 587, 1849, 1832, 1804, 1768, 65, 1756, 1736,
	1635, 1616, 1594, 66, 527, 84, 1592, 1471, 1472, 1591,
	1589, 292, 527, 1542, 84, 1574, 1471, 1472, 1541, 84,
	84, 84, 1618, 84, 921, 918, 919, 920, 912, 913,
	914, 915, 917, 1498, 937, 1460, 926, 2034, 709, 1758,
	1459, 733, 84, 84, 738, 1436, 548, 1431, 1211, 741,
	84, 1365, 84, 591, 1323, 1322, 1310, 549, 1309, 1289,
	1219, 1245, 746, 527, 527, 804, 1143, 999, 908, 909,
	1002, 292, 84, 1006, 84, 84, 84, 84, 84, 84,
	84, 708, 992, 67, 991, 84, 84, 543, 545, 52,
	528, 84, 583, 990, 989, 908, 909, 988, 987, 84,
	1310, 986, 927, 985, 857, 984, 69, 1477, 983, 982,
	581, 881, 981, 910, 579, 980, 1477, 84, 911, 979,
	84, 978, 977, 457, 976, 969, 958, 760, 908, 909,
	763, 64, 816, 601, 602, 70, 500, 876, 482, 607,
	910, 609, 822, 65, 546, 536, 534, 2008, 456, 66,
	1907, 911, 512, 1815, 1794, 912, 913, 914, 915, 917,
	1790, 937, 1764, 736, 1763, 965, 710, 1359, 277, 908,
	909, 465, 1358, 910, 956, 767, 747, 750, 503, 769,
	918, 919, 920, 912, 913, 914, 915, 917, 1791, 937,
	886, 874, 911, 554, 1471, 1472, 725, 1489, 1490, 1491,
	1948, 904, 818, 1910, 820, 1390, 819, 1762, 908, 909,
	1807, 1351, 1086, 1042, 910, 852, 1004, 851, 845, 1412,
	1005, 961, 1522, 84, 1521, 1416, 861, 570, 916, 555,
	974, 84, 880, 1333, 1780, 84, 1447, 1050, 1660, 84,
	84, 1233, 995, 84, 873, 1486, 574, 454, 84, 720,
	888, 721, 890, 889, 457, 1087, 1345, 457, 457, 902,
	1529, 710, 84, 971, 84, 84, 1991, 84, 2049, 916,
	84, 2048, 84, 84, 1950, 84, 778, 527, 575, 896,
	1095, 1744, 897, 898, 440, 720, 858, 721, 968, 862,
	863, 864, 865, 866, 1477, 1088, 1085, 855, 272, 869,
	870, 1067, 520, 61, 520, 74, 528, 441, 61, 1475,
	1476, 1478, 1070, 293, 528, 1016, 1473, 1474, 1475, 1476,
	1478, 722, 926, 1371, 850, 849, 1573, 843, 840, 1492,
	1052, 446, 1052, 445, 525, 1871, 1027, 1029, 1000, 1870,
	996, 997, 1557, 552, 1003, 1556, 1526, 1487, 720, 1015,
	721, 273, 1074, 1471, 1472, 1553, 1525, 722, 73, 1007,
	614, 1419, 1364, 1090, 1044, 528, 528, 292, 1032, 1363,
	1019, 84, 1362, 293, 937, 1036, 1040, 1949, 268, 1361,
	1194, 1093, 553, 1015, 1039, 400, 84, 84, 927, 1014,
	1038, 1076, 1035, 84, 463, 1755, 580, 493, 1056, 1075,
	1108, 937, 1077, 1065, 1066, 853, 405, 1293, 1068, 1071,
	1069, 401, 1292, 1488, 397, 1204, 1023, 1165, 84, 1145,
	722, 84, 1134, 449, 1562, 450, 269, 1084, 1560, 1202,
	914, 915, 917, 1233, 937, 402, 1854, 532, 462, 804,
	804, 1208, 1335, 1208, 455, 1321, 1265, 1000, 451, 1003,
	1164, 742, 727, 1477, 404, 1098, 292, 452, 2048, 400,
	726, 1544, 1996, 810, 803, 1097, 2065, 997, 996, 912,
	913, 914, 915, 917, 1090, 937, 274, 1026, 751, 854,
	405, 718, 726, 72, 464, 401, 1483, 1484, 1485, 1216,
	1482, 1479, 1480, 1481, 1473, 1474, 1475, 1476, 1478, 1200,
	2059, 1199, 2021, 1112, 1191, 1205, 1487, 1581, 275, 402,
	1339, 1215, 723, 1111, 937, 75, 1213, 1343, 2070, 1113,
	757, 1295, 571, 84, 84, 84, 746, 1328, 404, 84,
	1428, 1325, 84, 1137, 1138, 1156, 1163, 1370, 84, 84,
	84, 84, 84, 1939, 1426, 731, 84, 1146, 723, 84,
	84, 804, 403, 730, 1223, 1339, 527, 1551, 1372, 84,
	1578, 1227, 531, 1230, 84, 1235, 84, 1025, 271, 270,
	551, 461, 1488, 84, 1100, 1090, 1252, 1252, 1263, 528,
	1274, 572, 2022, 84, 993, 1102, 1286, 1287, 1288, 2058,
	2063, 1012, 1217, 1334, 1220, 1201, 406, 1189, 1192, 465,
	1579, 550, 1203, 1103, 84, 84, 573, 1545, 1241, 1921,
	804, 723, 1101, 1303, 1129, 527, 1424, 1297, 1884, 1260,
	1429, 2012, 953, 1855, 1341, 1188, 403, 1725, 2023, 1347,
	844, 841, 1628, 1458, 84, 1398, 84, 1320, 84, 1024,
	2064, 1612, 84, 2013, 464, 1298, 84, 1307, 804, 1561,
	778, 778, 1481, 1473, 1474, 1475, 1476, 1478, 2066, 1726,
	551, 2020, 1689, 2047, 1421, 84, 1207, 1382, 1090, 293,
	406, 2045, 1378, 597, 1380, 1353, 1773, 1354, 1355, 2057,
	1131, 61, 1402, 1402, 1471, 1472, 563, 541, 1344, 539,
	1830, 596, 2071, 1331, 758, 1865, 656, 1352, 1864, 706,
	465, 1405, 1405, 2076, 1847, 829, 1357, 1740, 1381, 1190,
	1425, 1931, 1384, 1610, 1400, 597, 1356, 1427, 1528, 1471,
	1472, 1403, 1403, 1306, 1302, 1074, 1369, 1743, 1415, 1373,
	1367, 1368, 1132, 887, 1742, 1214, 1401, 878, 636, 1800,
	1984, 1577, 596, 827, 1307, 868, 1690, 825, 1721, 1597,
	1722, 1787, 1691, 1775, 828, 1848, 1312, 465, 293, 1311,
	1788, 1607, 778, 1449, 1076, 1392, 1393, 1606, 81, 81,
	266, 1396, 1075, 550, 1414, 1077, 510, 509, 1724, 462,
	1831, 391, 392, 393, 1477, 1727, 410, 588, 1587, 422,
	1404, 1404, 1766, 1330, 2075, 1603, 1739, 410, 1801, 1395,
	1244, 1924, 1845, 1829, 471, 471, 1502, 1434, 266, 1634,
	1420, 266, 266, 490, 266, 1437, 465, 81, 497, 1477,
	1422, 778, 1398, 1741, 1846, 1559, 1465, 1430, 1336, 1094,
	1435, 1046, 569, 1453, 1454, 705, 568, 1487, 803, 803,
	1540, 567, 566, 565, 564, 561, 508, 501, 1446, 1786,
	1723, 1503, 975, 860, 1243, 2016, 1981, 1406, 528, 778,
	84, 84, 1568, 1714, 1549, 1547, 1497, 1527, 1386, 1135,
	1402, 1127, 1487, 1072, 764, 1539, 762, 1510, 759, 754,
	732, 1538, 728, 724, 1648, 84, 1388, 1878, 84, 1405,
	84, 2049, 1505, 1506, 1507, 557, 3, 84, 77, 1141,
	527, 1400, 599, 1488, 475, 847, 1593, 1524, 84, 1403,
	1880, 84, 1031, 507, 1566, 1565, 506, 528, 1554, 1555,
	292, 1531, 84, 1401, 1034, 1548, 1015, 1550, 1590, 287,
	23, 1941, 1030, 1558, 1619, 1015, 1552, 1599, 1488, 1733,
	1976, 1028, 1604, 603, 396, 61, 1563, 1033, 439, 653,
	803, 1407, 1962, 1620, 1617, 1771, 1570, 1142, 895, 1571,
	1598, 1320, 804, 1569, 1637, 1580, 1582, 1583, 483, 84,
	600, 1605, 476, 1130, 1608, 558, 1126, 495, 1404, 1588,
	1653, 1654, 1655, 1055, 1473, 1474, 1475, 1476, 1478, 285,
	22, 407, 1600, 804, 804, 498, 1613, 1614, 499, 903,
	1609, 23, 804, 804, 442, 443, 1623, 286, 11, 803,
	266, 513, 266, 422, 422, 1482, 1479, 1480, 1481, 1473,
	1474, 1475, 1476, 1478, 288, 10, 821, 770, 280, 9,
	1081, 2073, 1641, 2074, 2009, 804, 84, 84, 84, 1644,
	1471, 1472, 1647, 1666, 279, 7, 1965, 803, 281, 4,
	908, 909, 1797, 84, 1106, 1105, 1663, 1661, 84, 1709,
	84, 22, 84, 84, 84, 1668, 1584, 84, 84, 1696,
	527, 1540, 1575, 1734, 1517, 1360, 1697, 1294, 1291, 11,
	1290, 1240, 1107, 817, 962, 1817, 1995, 1877, 1656, 1156,
	1664, 1737, 1383, 972, 1694, 970, 10, 448, 1156, 1669,
	9, 1853, 84, 84, 398, 1704, 1539, 741, 859, 527,
	562, 1792, 1538, 1710, 1615, 2011, 7, 84, 84, 1540,
	4, 84, 1713, 1822, 1540, 1457, 1895, 1920, 1242, 527,
	84, 1700, 973, 537, 1738, 38, 1536, 84, 1796, 1767,
	630, 1761, 1715, 1530, 1772, 1121, 1777, 1754, 542, 1760,
	1120, 422, 422, 295, 1539, 1805, 848, 652, 833, 1539,
	1538, 842, 1251, 1157, 465, 1538, 804, 1778, 1809, 1776,
	84, 707, 1770, 778, 654, 775, 655, 776, 1001, 642,
	1783, 1784, 773, 1769, 1789, 410, 525, 266, 1059, 422,
	586, 422, 1212, 589, 1795, 1231, 1445, 966, 622, 634,
	1782, 633, 528, 1228, 778, 778, 533, 1798, 471, 51,
	547, 416, 417, 778, 778, 1342, 1757, 1136, 891, 266,
	1546, 453, 293, 1468, 535, 84, 1272, 84, 1264, 84,
	84, 777, 1261, 81, 806, 1828, 582, 713, 84, 954,
	1060, 559, 266, 1348, 84, 1080, 778, 266, 266, 266,
	608, 752, 899, 474, 473, 1116, 556, 826, 1843, 1099,
	1540, 947, 944, 1857, 444, 1933, 1859, 1128, 1305, 84,
	266, 266, 2069, 1858, 1840, 804, 1940, 1543, 81, 1990,
	81, 68, 1947, 1875, 84, 1873, 1329, 527, 26, 24,
	746, 84, 21, 1856, 19, 1539, 18, 17, 1540, 84,
	422, 1538, 81, 422, 422, 422, 422, 422, 867, 1841,
	25, 15, 14, 422, 422, 84, 84, 13, 1886, 410,
	1905, 1872, 12, 1881, 1893, 37, 36, 885, 1911, 35,
	1914, 34, 1861, 1539, 33, 32, 1898, 6, 1894, 1538,
	5, 1902, 2, 1, 1266, 471, 1919, 1892, 497, 0,
	1879, 0, 0, 1889, 1868, 1869, 84, 0, 0, 0,
	0, 803, 1901, 804, 0, 1926, 0, 0, 1935, 0,
	805, 1867, 528, 0, 0, 0, 0, 778, 0, 0,
	0, 84, 84, 0, 0, 0, 0, 0, 0, 1938,
	0, 84, 803, 803, 1930, 84, 1913, 1937, 0, 1929,
	0, 803, 803, 527, 1956, 0, 0, 1954, 0, 0,
	84, 528, 1957, 0, 0, 0, 84, 0, 0, 0,
	0, 292, 84, 84, 1966, 0, 0, 0, 1964, 465,
	1971, 528, 0, 0, 803, 0, 0, 0, 0, 1960,
	1959, 0, 0, 1968, 61, 84, 0, 84, 1975, 0,
	84, 266, 84, 1967, 1969, 0, 804, 0, 1978, 1020,
	0, 0, 626, 266, 0, 1997, 0, 266, 1037, 1987,
	1999, 266, 84, 2001, 1994, 84, 1043, 2000, 0, 0,
	0, 1992, 0, 0, 774, 0, 778, 2003, 1540, 2007,
	266, 1963, 1063, 1064, 265, 266, 2005, 2004, 266, 0,
	422, 422, 0, 422, 1972, 0, 0, 84, 2002, 84,
	0, 0, 0, 2026, 0, 0, 2031, 0, 0, 2029,
	0, 2028, 0, 1539, 908, 909, 0, 84, 1986, 1538,
	2042, 0, 479, 0, 2033, 486, 489, 2046, 479, 2044,
	1993, 0, 0, 2052, 84, 0, 2050, 911, 0, 0,
	2056, 0, 2055, 0, 2054, 0, 0, 612, 612, 0,
	0, 0, 0, 2068, 2067, 803, 715, 1266, 1266, 910,
	2072, 0, 2014, 0, 778, 0, 0, 0, 908, 909,
	0, 0, 0, 0, 0, 2077, 0, 0, 0, 528,
	2030, 0, 0, 0, 0, 0, 0, 1471, 1472, 1110,
	0, 911, 0, 0, 0, 777, 777, 0, 806, 806,
	0, 0, 0, 0, 266, 1117, 0, 0, 0, 0,
	0, 497, 0, 910, 916, 0, 0, 0, 1266, 1266,
	1266, 0, 0, 0, 0, 0, 0, 0, 1725, 0,
	1718, 0, 0, 0, 0, 0, 266, 0, 1716, 422,
	0, 0, 1720, 1432, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 778, 0, 0,
	1726, 0, 0, 0, 803, 0, 0, 926, 916, 0,
	892, 894, 0, 0, 0, 0, 0, 901, 0, 0,
	1719, 0, 0, 0, 0, 0, 0, 1477, 0, 948,
	949, 950, 951, 952, 0, 528, 0, 0, 0, 960,
	0, 0, 0, 0, 1494, 1495, 1496, 777, 0, 967,
	806, 0, 0, 293, 0, 0, 0, 0, 0, 0,
	0, 926, 0, 0, 479, 0, 489, 0, 0, 0,
	0, 0, 0, 927, 805, 805, 0, 0, 0, 0,
	1487, 266, 1300, 1301, 0, 0, 0, 1020, 0, 1721,
	1308, 1722, 803, 0, 0, 0, 1313, 1314, 1316, 1318,
	1319, 0, 0, 0, 1324, 0, 777, 1326, 266, 806,
	0, 1266, 1266, 0, 0, 0, 0, 266, 0, 1724,
	0, 0, 266, 0, 1346, 0, 1727, 927, 0, 0,
	0, 266, 0, 0, 0, 0, 1471, 1472, 0, 0,
	0, 266, 0, 0, 777, 0, 1488, 806, 0, 0,
	921, 918, 919, 920, 912, 913, 914, 915, 917, 0,
	937, 0, 1110, 1110, 1266, 1266, 1266, 1266, 1266, 1266,
	1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
	1266, 1266, 1266, 0, 1266, 803, 805, 1486, 774, 774,
	0, 1723, 885, 0, 885, 0, 422, 1632, 1633, 0,
	266, 0, 0, 0, 1391, 0, 0, 920, 912, 913,
	914, 915, 917, 0, 937, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 1479, 1480, 1481, 1473, 1474, 1475,
	1476, 1478, 0, 0, 0, 0, 1477, 702, 0, 0,
	0, 479, 0, 0, 0, 805, 0, 0, 0, 0,
	1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
	1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 0,
	1692, 0, 0, 711, 0, 0, 0, 0, 0, 294,
	0, 0, 0, 805, 0, 0, 0, 0, 0, 1487,
	0, 0, 0, 0, 0, 0, 745, 0, 0, 0,
	774, 479, 749, 749, 0, 0, 0, 0, 0, 631,
	49, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	612, 0, 0, 0, 486, 489, 1166, 1167, 1168, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 0, 1193,
	49, 1195, 1196, 1197, 1198, 1488, 0, 0, 0, 774,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1221, 458, 0, 0, 466, 0, 0, 0, 0, 1535,
	0, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1248, 1249, 0, 0, 1262, 774, 1273, 1275,
	1280, 1283, 1284, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1266, 266, 266,
	0, 0, 0, 715, 0, 0, 0, 0, 0, 0,
	0, 0, 1482, 1479, 1480, 1481, 1473, 1474, 1475, 1476,
	1478, 0, 0, 1585, 0, 0, 1020, 0, 885, 0,
	0, 0, 0, 0, 0, 1595, 0, 0, 777, 0,
	0, 806, 0, 0, 1340, 0, 266, 0, 0, 266,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1627, 0, 0, 0, 0, 0, 0, 0, 0, 777,
	777, 0, 806, 806, 0, 0, 0, 0, 777, 777,
	0, 806, 806, 1850, 0, 1008, 1366, 0, 0, 0,
	0, 0, 0, 0, 0, 529, 0, 479, 0, 0,
	1266, 489, 0, 0, 0, 479, 0, 1658, 0, 0,
	0, 777, 0, 0, 806, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1061, 0, 0, 0, 0, 489,
	0, 0, 489, 901, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 466, 0, 0,
	0, 0, 0, 0, 1711, 1712, 1020, 805, 0, 0,
	0, 0, 1417, 1418, 0, 0, 1923, 0, 1423, 0,
	1535, 497, 0, 0, 0, 1266, 1745, 0, 1746, 0,
	266, 1748, 1749, 0, 0, 1752, 266, 0, 805, 805,
	0, 0, 0, 0, 0, 0, 0, 805, 805, 0,
	1441, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	1452, 0, 0, 0, 0, 0, 0, 0, 1535, 1461,
	497, 1117, 777, 1535, 0, 806, 0, 0, 479, 0,
	805, 0, 0, 0, 0, 266, 266, 0, 0, 266,
	0, 0, 0, 0, 960, 0, 0, 0, 1627, 0,
	1280, 1280, 1280, 0, 0, 1803, 0, 0, 0, 0,
	1151, 1977, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 774, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1532, 0, 0, 0, 0, 1823, 0,
	0, 529, 0, 0, 0, 0, 0, 0, 294, 529,
	0, 0, 774, 774, 0, 0, 0, 0, 0, 0,
	0, 774, 774, 612, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 715, 0, 0, 0, 0,
	0, 777, 0, 0, 806, 0, 0, 458, 0, 0,
	0, 0, 0, 1020, 774, 1842, 0, 422, 1844, 0,
	529, 529, 0, 0, 0, 0, 266, 0, 294, 1535,
	0, 805, 422, 0, 0, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1874, 0, 0, 497, 0, 0,
	1630, 0, 1327, 1631, 0, 0, 0, 1535, 0, 0,
	0, 1337, 266, 0, 1636, 0, 745, 0, 0, 1897,
	0, 0, 0, 1645, 0, 745, 0, 266, 0, 777,
	0, 1649, 806, 0, 1366, 479, 0, 1471, 1472, 0,
	1489, 1490, 1491, 497, 1627, 0, 0, 0, 0, 1665,
	0, 0, 0, 1667, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 458, 0,
	805, 458, 458, 0, 885, 774, 1698, 1699, 1486, 0,
	0, 0, 0, 0, 1385, 1705, 1706, 1707, 0, 0,
	0, 0, 0, 957, 0, 959, 0, 0, 0, 1942,
	1943, 0, 963, 0, 0, 0, 0, 1151, 0, 1952,
	0, 1735, 777, 1953, 0, 806, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1477, 497, 0,
	0, 0, 0, 0, 1627, 0, 0, 0, 0, 0,
	1627, 497, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 805, 0,
	0, 0, 1492, 1985, 529, 497, 0, 0, 266, 0,
	422, 0, 0, 0, 0, 0, 0, 1781, 0, 0,
	1487, 0, 0, 0, 774, 0, 0, 1535, 908, 909,
	1897, 0, 0, 1627, 938, 939, 940, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1808, 0,
	0, 911, 1811, 1812, 942, 0, 0, 1814, 49, 0,
	49, 0, 0, 0, 1816, 266, 1818, 497, 0, 0,
	0, 0, 0, 910, 1824, 49, 0, 0, 0, 925,
	49, 0, 0, 0, 0, 2043, 1488, 0, 0, 0,
	0, 805, 0, 0, 294, 0, 0, 0, 0, 0,
	0, 0, 1627, 0, 0, 0, 0, 1833, 0, 0,
	0, 0, 774, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1061, 1151, 0, 0, 0, 935, 943, 0,
	0, 0, 0, 0, 0, 0, 1866, 0, 0, 1483,
	1484, 1485, 0, 1482, 1479, 1480, 1481, 1473, 1474, 1475,
	1476, 1478, 0, 0, 0, 933, 0, 0, 0, 0,
	0, 926, 0, 294, 0, 0, 0, 0, 0, 0,
	1151, 0, 0, 1151, 0, 0, 0, 0, 0, 0,
	0, 1900, 0, 0, 0, 774, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1152, 0, 0,
	1915, 1916, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 423, 0, 0, 0, 908, 909, 0, 928, 929,
	930, 938, 939, 940, 0, 0, 0, 927, 0, 424,
	1928, 931, 0, 1210, 0, 0, 0, 0, 911, 936,
	0, 942, 0, 1932, 0, 0, 0, 0, 0, 0,
	0, 1471, 1472, 0, 1489, 1490, 1491, 0, 0, 0,
	910, 0, 0, 529, 0, 426, 925, 1806, 0, 0,
	431, 432, 0, 0, 437, 908, 909, 715, 928, 929,
	930, 938, 939, 940, 0, 0, 425, 427, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 934, 911, 0,
	0, 942, 1486, 0, 921, 918, 919, 920, 912, 913,
	914, 915, 917, 0, 937, 916, 0, 0, 0, 0,
	910, 0, 529, 0, 1747, 428, 925, 0, 0, 0,
	1753, 0, 0, 0, 935, 943, 0, 0, 0, 429,
	430, 0, 0, 466, 0, 0, 0, 0, 0, 0,
	941, 1477, 0, 0, 0, 0, 433, 0, 0, 0,
	0, 0, 933, 0, 0, 0, 0, 0, 926, 0,
	0, 0, 0, 0, 0, 916, 0, 0, 0, 1151,
	1151, 0, 0, 1151, 0, 2027, 1492, 0, 0, 0,
	0, 0, 932, 0, 935, 943, 0, 0, 0, 0,
	0, 0, 0, 0, 1487, 0, 2041, 2041, 0, 0,
	941, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	49, 0, 933, 0, 0, 0, 0, 0, 926, 0,
	0, 0, 2041, 49, 927, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1413, 0, 936, 0, 0, 0,
	0, 0, 932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 434, 0, 2041, 0, 435,
	1488, 0, 0, 0, 436, 0, 0, 0, 0, 0,
	0, 0, 1210, 0, 0, 0, 0, 0, 438, 0,
	0, 0, 0, 0, 927, 0, 0, 0, 0, 0,
	1851, 959, 0, 0, 934, 0, 936, 922, 923, 924,
	0, 921, 918, 919, 920, 912, 913, 914, 915, 917,
	0, 937, 0, 0, 0, 0, 0, 0, 1836, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 1484, 1485, 1891, 1482, 1479, 1480,
	1481, 1473, 1474, 1475, 1476, 1478, 0, 0, 0, 0,
	959, 1151, 0, 0, 934, 0, 0, 922, 923, 924,
	0, 921, 918, 919, 920, 912, 913, 914, 915, 917,
	0, 937, 0, 0, 0, 0, 908, 909, 1513, 928,
	929, 930, 938, 939, 940, 0, 0, 0, 0, 0,
	0, 0, 931, 0, 0, 0, 0, 529, 0, 911,
	0, 0, 942, 0, 0, 0, 0, 0, 908, 909,
	0, 928, 929, 930, 938, 939, 940, 294, 0, 0,
	0, 910, 0, 0, 931, 0, 0, 925, 0, 0,
	1152, 911, 0, 0, 942, 1471, 1472, 0, 1489, 1490,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1639, 0, 910, 0, 0, 0, 0, 0, 925,
	0, 0, 908, 909, 0, 928, 929, 930, 938, 939,
	940, 0, 0, 0, 0, 0, 916, 1152, 931, 0,
	1152, 0, 0, 0, 0, 911, 1486, 49, 942, 0,
	0, 0, 0, 0, 0, 935, 943, 0, 0, 0,
	1471, 1472, 1989, 1489, 1490, 1491, 0, 910, 916, 0,
	0, 941, 0, 925, 0, 0, 1638, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 0, 935, 943, 926,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 932, 0, 933, 0, 0, 0, 1061,
	0, 926, 916, 0, 0, 0, 0, 529, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 935, 943, 0, 0, 932, 0, 0, 1487, 0,
	0, 0, 0, 0, 0, 927, 0, 941, 0, 0,
	1477, 0, 0, 0, 0, 0, 529, 936, 0, 933,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 529, 927, 0, 0,
	0, 0, 0, 0, 0, 1492, 0, 0, 0, 936,
	0, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 0, 0, 1487, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 934, 0, 0, 922, 923,
	924, 0, 921, 918, 919, 920, 912, 913, 914, 915,
	917, 927, 937, 0, 0, 0, 1152, 1152, 0, 1512,
	1152, 0, 0, 936, 0, 0, 0, 934, 466, 0,
	922, 923, 924, 0, 921, 918, 919, 920, 912, 913,
	914, 915, 917, 0, 937, 0, 0, 0, 0, 1488,
	0, 1511, 0, 0, 0, 0, 0, 1483, 1484, 1485,
	0, 1482, 1479, 1480, 1481, 1473, 1474, 1475, 1476, 1478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 934, 0, 0, 922, 923, 924, 0, 921, 918,
	919, 920, 912, 913, 914, 915, 917, 0, 937, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 529, 0, 0, 0, 0, 0,
	0, 0, 1483, 1484, 1485, 0, 1482, 1479, 1480, 1481,
	1473, 1474, 1475, 1476, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1882, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	529, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 86, 87, 310,
	88, 311, 312, 313, 314, 213, 315, 316, 317, 318,
	89, 90, 91, 214, 215, 216, 217, 92, 218, 219,
	319, 93, 220, 221, 94, 320, 321, 222, 223, 224,
	322, 225, 323, 296, 324, 95, 96, 97, 0, 98,
	325, 99, 100, 101, 326, 297, 102, 103, 327, 328,
	329, 330, 331, 332, 104, 105, 267, 106, 226, 107,
	227, 228, 333, 108, 334, 109, 335, 336, 337, 110,
	111, 338, 112, 339, 0, 340, 229, 113, 114, 230,
	231, 341, 342, 343, 115, 116, 232, 0, 117, 344,
	118, 345, 346, 298, 347, 119, 233, 348, 234, 349,
	120, 121, 122, 123, 235, 236, 300, 350, 127, 351,
	124, 352, 299, 125, 237, 126, 238, 239, 240, 353,
	241, 354, 301, 128, 302, 129, 130, 355, 132, 131,
	356, 242, 303, 133, 304, 357, 134, 358, 359, 135,
	0, 136, 137, 138, 243, 139, 305, 140, 141, 143,
	142, 360, 361, 362, 244, 144, 245, 145, 146, 363,
	147, 364, 365, 148, 366, 367, 149, 246, 306, 150,
	307, 247, 151, 152, 153, 154, 368, 248, 155, 249,
	156, 369, 157, 158, 159, 250, 160, 161, 370, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 371,
	172, 308, 173, 174, 251, 175, 0, 176, 177, 178,
	179, 372, 252, 180, 181, 373, 182, 183, 309, 184,
	253, 254, 185, 374, 191, 186, 187, 188, 190, 255,
	189, 256, 375, 192, 376, 193, 194, 195, 377, 257,
	258, 259, 378, 379, 196, 260, 261, 380, 197, 198,
	199, 200, 381, 382, 201, 202, 203, 383, 204, 384,
	205, 206, 207, 262, 263, 385, 386, 208, 387, 388,
	389, 390, 209, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 1621, 0, 0, 0, 0, 0,
	0, 0, 1622, 86, 87, 310, 88, 311, 312, 313,
	314, 213, 315, 316, 317, 318, 89, 90, 91, 214,
	215, 216, 217, 92, 218, 219, 319, 93, 220, 221,
	94, 320, 321, 222, 223, 224, 322, 225, 323, 296,
	324, 95, 96, 97, 0, 98, 325, 99, 100, 101,
	326, 297, 102, 103, 327, 328, 329, 330, 331, 332,
	104, 105, 267, 106, 226, 107, 227, 228, 333, 108,
	334, 109, 335, 336, 337, 110, 111, 338, 112, 339,
	0, 340, 229, 113, 114, 230, 231, 341, 342, 343,
	115, 116, 232, 0, 117, 344, 118, 345, 346, 298,
	347, 119, 233, 348, 234, 349, 120, 121, 122, 123,
	235, 236, 300, 350, 127, 351, 124, 352, 299, 125,
	237, 126, 238, 239, 240, 353, 241, 354, 301, 128,
	302, 129, 130, 355, 132, 131, 356, 242, 303, 133,
	304, 357, 134, 358, 359, 135, 0, 136, 137, 138,
	243, 139, 305, 140, 141, 143, 142, 360, 361, 362,
	244, 144, 245, 145, 146, 363, 147, 364, 365, 148,
	366, 367, 149, 246, 306, 150, 307, 247, 151, 152,
	153, 154, 368, 248, 155, 249, 156, 369, 157, 158,
	159, 250, 160, 161, 370, 162, 163, 164, 165, 166,
	168, 169, 167, 170, 171, 371, 172, 308, 173, 174,
	251, 175, 0, 176, 177, 178, 179, 372, 252, 180,
	181, 373, 182, 183, 309, 184, 253, 254, 185, 374,
	191, 186, 187, 188, 190, 255, 189, 256, 375, 192,
	376, 193, 194, 195, 377, 257, 258, 259, 378, 379,
	196, 260, 261, 380, 197, 198, 199, 200, 381, 382,
	201, 202, 203, 383, 204, 384, 205, 206, 207, 262,
	263, 385, 386, 208, 387, 388, 389, 390, 209, 210,
	211, 212, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1970, 86, 87, 310, 88, 311, 312, 313, 314, 213,
	315, 316, 317, 318, 89, 90, 91, 214, 215, 216,
	217, 92, 218, 219, 319, 93, 220, 221, 94, 320,
	321, 222, 223, 224, 322, 225, 323, 296, 324, 95,
	96, 97, 0, 98, 325, 99, 100, 101, 326, 297,
	102, 103, 327, 328, 329, 330, 331, 332, 104, 105,
	267, 106, 226, 107, 227, 228, 333, 108, 334, 109,
	335, 336, 337, 110, 111, 338, 112, 339, 0, 340,
	229, 113, 114, 230, 231, 341, 342, 343, 115, 116,
	232, 0, 117, 344, 118, 345, 346, 298, 347, 119,
	233, 348, 234, 349, 120, 121, 122, 123, 235, 236,
	300, 350, 127, 351, 124, 352, 299, 125, 237, 126,
	238, 239, 240, 353, 241, 354, 301, 128, 302, 129,
	130, 355, 132, 131, 356, 242, 303, 133, 304, 357,
	134, 358, 359, 135, 0, 136, 137, 138, 243, 139,
	305, 140, 141, 143, 142, 360, 361, 362, 244, 144,
	245, 145, 146, 363, 147, 364, 365, 148, 366, 367,
	149, 246, 306, 150, 307, 247, 151, 152, 153, 154,
	368, 248, 155, 249, 156, 369, 157, 158, 159, 250,
	160, 161, 370, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 371, 172, 308, 173, 174, 251, 175,
	0, 176, 177, 178, 179, 372, 252, 180, 181, 373,
	182, 183, 309, 184, 253, 254, 185, 374, 191, 186,
	187, 188, 190, 255, 189, 256, 375, 192, 376, 193,
	194, 195, 377, 257, 258, 259, 378, 379, 196, 260,
	261, 380, 197, 198, 199, 200, 381, 382, 201, 202,
	203, 383, 204, 384, 205, 206, 207, 262, 263, 385,
	386, 208, 387, 388, 389, 390, 209, 210, 211, 212,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 86, 87, 310, 88,
	311, 312, 313, 314, 213, 315, 316, 317, 318, 89,
	90, 91, 214, 215, 216, 217, 92, 218, 219, 319,
	93, 220, 221, 94, 320, 321, 222, 223, 224, 322,
	225, 323, 296, 324, 95, 96, 97, 0, 98, 325,
	99, 100, 101, 326, 297, 102, 103, 327, 328, 329,
	330, 331, 332, 104, 105, 267, 106, 226, 107, 227,
	228, 333, 108, 334, 109, 335, 336, 337, 110, 111,
	338, 112, 339, 0, 340, 229, 113, 114, 230, 231,
	341, 342, 343, 115, 116, 232, 0, 117, 344, 118,
	345, 346, 298, 347, 119, 233, 348, 234, 349, 120,
	121, 122, 123, 235, 236, 300, 350, 127, 351, 124,
	352, 299, 125, 237, 126, 238, 239, 240, 353, 241,
	354, 301, 128, 302, 129, 130, 355, 132, 131, 356,
	242, 303, 133, 304, 357, 134, 358, 359, 135, 0,
	136, 137, 138, 243, 139, 305, 140, 141, 143, 142,
	360, 361, 362, 244, 144, 245, 145, 146, 363, 147,
	364, 365, 148, 366, 367, 149, 246, 306, 150, 307,
	247, 151, 152, 153, 154, 368, 248, 155, 249, 156,
	369, 157, 158, 159, 250, 160, 161, 370, 162, 163,
	164, 165, 166, 168, 169, 167, 170, 171, 371, 172,
	308, 173, 174, 251, 175, 0, 176, 177, 178, 179,
	372, 252, 180, 181, 373, 182, 183, 309, 184, 253,
	254, 185, 374, 191, 186, 187, 188, 190, 255, 189,
	256, 375, 192, 376, 193, 194, 195, 377, 257, 258,
	259, 378, 379, 196, 260, 261, 380, 197, 198, 199,
	200, 381, 382, 201, 202, 203, 383, 204, 384, 205,
	206, 207, 262, 263, 385, 386, 208, 387, 388, 389,
	390, 209, 210, 211, 212, 650, 639, 640, 637, 638,
	629, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 666,
	632, 0, 0, 0, 89, 90, 91, 214, 681, 216,
	682, 92, 683, 684, 0, 93, 220, 221, 94, 635,
	665, 685, 686, 224, 0, 677, 0, 658, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 297,
	102, 103, 0, 659, 661, 0, 660, 662, 104, 105,
	267, 106, 687, 107, 688, 689, 716, 108, 0, 109,
	0, 0, 0, 680, 111, 0, 112, 0, 0, 0,
	623, 113, 114, 667, 668, 646, 0, 0, 115, 116,
	690, 0, 117, 0, 118, 0, 0, 298, 0, 119,
	678, 0, 234, 0, 120, 121, 122, 123, 674, 676,
	300, 0, 127, 0, 124, 0, 299, 125, 691, 126,
	692, 693, 694, 0, 657, 0, 301, 128, 302, 129,
	130, 0, 132, 131, 0, 679, 303, 133, 304, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 243, 139,
	305, 140, 141, 143, 142, 618, 0, 647, 675, 144,
	695, 145, 146, 0, 147, 0, 0, 148, 0, 0,
	149, 246, 306, 150, 307, 669, 151, 152, 153, 154,
	0, 670, 155, 249, 156, 0, 157, 158, 159, 696,
	160, 161, 0, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 0, 172, 308, 173, 174, 624, 175,
	0, 176, 177, 178, 179, 67, 252, 180, 181, 663,
	182, 183, 309, 184, 697, 254, 185, 0, 191, 186,
	187, 188, 190, 698, 189, 671, 0, 192, 69, 193,
	194, 195, 0, 257, 699, 700, 0, 0, 196, 672,
	673, 645, 197, 198, 199, 200, 0, 0, 201, 202,
	203, 664, 204, 0, 205, 206, 207, 530, 701, 0,
	0, 208, 0, 0, 0, 65, 209, 210, 211, 212,
	619, 66, 0, 0, 0, 650, 639, 640, 637, 638,
	629, 615, 616, 0, 0, 0, 0, 617, 0, 0,
	625, 86, 87, 1237, 88, 628, 0, 0, 0, 666,
	632, 0, 0, 0, 89, 90, 91, 214, 681, 216,
	682, 92, 683, 684, 0, 93, 220, 221, 94, 635,
	665, 685, 686, 224, 0, 677, 0, 658, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 297,
	102, 103, 0, 659, 661, 0, 660, 662, 104, 105,
	267, 106, 687, 107, 688, 689, 0, 108, 0, 109,
	0, 1238, 0, 680, 111, 0, 112, 0, 0, 0,
	623, 113, 114, 667, 668, 646, 0, 0, 115, 116,
	690, 0, 117, 0, 118, 0, 0, 298, 0, 119,
	678, 0, 234, 0, 120, 121, 122, 123, 674, 676,
	300, 0, 127, 0, 124, 0, 299, 125, 691, 126,
	692, 693, 694, 0, 657, 0, 301, 128, 302, 129,
	130, 0, 132, 131, 0, 679, 303, 133, 304, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 243, 139,
	305, 140, 141, 143, 142, 618, 0, 647, 675, 144,
	695, 145, 146, 0, 147, 0, 0, 148, 0, 0,
	149, 246, 306, 150, 307, 669, 151, 152, 153, 154,
	0, 670, 155, 249, 156, 0, 157, 158, 159, 696,
	160, 161, 0, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 0, 172, 308, 173, 174, 624, 175,
	0, 176, 177, 178, 179, 0, 252, 180, 181, 663,
	182, 183, 309, 184, 697, 254, 185, 0, 191, 186,
	187, 188, 190, 698, 189, 671, 0, 192, 0, 193,
	194, 195, 0, 257, 699, 700, 0, 0, 196, 672,
	673, 645, 197, 198, 199, 200, 0, 0, 201, 202,
	203, 664, 204, 0, 205, 206, 207, 262, 701, 1236,
	0, 208, 0, 0, 0, 0, 209, 210, 211, 212,
	619, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 615, 616, 1239, 0, 0, 0, 617, 0, 0,
	625, 1234, 0, 0, 0, 628, 650, 639, 640, 637,
	638, 629, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	666, 632, 0, 0, 0, 89, 90, 91, 214, 681,
	216, 682, 92, 683, 684, 0, 93, 220, 221, 94,
	635, 665, 685, 686, 224, 0, 677, 0, 658, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	297, 102, 103, 0, 659, 661, 0, 660, 662, 104,
	105, 267, 106, 687, 107, 688, 689, 0, 108, 0,
	109, 0, 0, 0, 680, 111, 0, 112, 0, 0,
	0, 623, 113, 114, 667, 668, 646, 0, 0, 115,
	116, 690, 0, 117, 0, 118, 0, 0, 298, 0,
	119, 678, 0, 234, 0, 120, 121, 122, 123, 674,
	676, 300, 0, 127, 0, 124, 0, 299, 125, 691,
	126, 692, 693, 694, 0, 657, 0, 301, 128, 302,
	129, 130, 0, 132, 131, 0, 679, 303, 133, 304,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 243,
	139, 305, 140, 141, 143, 142, 618, 0, 647, 675,
	144, 695, 145, 146, 0, 147, 0, 0, 148, 0,
	0, 149, 246, 306, 150, 307, 669, 151, 152, 153,
	154, 0, 670, 155, 249, 156, 0, 157, 158, 159,
	696, 160, 161, 0, 162, 163, 164, 165, 166, 168,
	169, 167, 170, 171, 0, 172, 308, 173, 174, 624,
	175, 0, 176, 177, 178, 179, 67, 252, 180, 181,
	663, 182, 183, 309, 184, 697, 254, 185, 0, 191,
	186, 187, 188, 190, 698, 189, 671, 0, 192, 69,
	193, 194, 195, 0, 257, 699, 700, 0, 0, 196,
	672, 673, 645, 197, 198, 199, 200, 0, 0, 201,
	202, 203, 664, 204, 0, 205, 206, 207, 530, 701,
	0, 0, 208, 0, 0, 0, 65, 209, 210, 211,
	212, 619, 66, 650, 639, 640, 637, 638, 629, 0,
	0, 0, 615, 616, 0, 0, 0, 0, 617, 86,
	87, 625, 88, 0, 0, 0, 628, 666, 632, 0,
	0, 0, 89, 90, 91, 214, 681, 216, 682, 92,
	683, 684, 1276, 93, 220, 221, 94, 635, 665, 685,
	686, 224, 0, 677, 0, 658, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 297, 102, 103,
	0, 659, 661, 0, 660, 662, 104, 105, 267, 106,
	687, 107, 688, 689, 0, 108, 0, 109, 0, 0,
	0, 680, 111, 0, 112, 0, 0, 0, 623, 113,
	114, 667, 668, 646, 0, 0, 115, 116, 690, 0,
	117, 0, 118, 0, 1281, 298, 0, 119, 678, 0,
	234, 0, 120, 121, 122, 123, 674, 676, 300, 0,
	127, 0, 124, 0, 299, 125, 691, 126, 692, 693,
	694, 0, 657, 0, 301, 128, 302, 129, 130, 0,
	132, 131, 1277, 679, 303, 133, 304, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 243, 139, 305, 140,
	141, 143, 142, 618, 0, 647, 675, 144, 695, 145,
	146, 0, 147, 0, 0, 148, 0, 0, 149, 246,
	306, 150, 307, 669, 151, 152, 153, 154, 0, 670,
	155, 249, 156, 0, 157, 158, 159, 696, 160, 161,
	0, 162, 163, 164, 165, 166, 168, 169, 167, 170,
	171, 0, 172, 308, 173, 174, 624, 175, 0, 176,
	177, 178, 179, 0, 252, 180, 181, 663, 182, 183,
	309, 184, 697, 254, 185, 0, 191, 186, 187, 188,
	190, 698, 189, 671, 0, 192, 0, 193, 194, 195,
	0, 257, 699, 700, 0, 1278, 196, 672, 673, 645,
	197, 198, 199, 200, 0, 0, 201, 202, 203, 664,
	204, 0, 205, 206, 207, 262, 701, 0, 0, 208,
	0, 0, 0, 0, 209, 210, 211, 212, 619, 0,
	650, 639, 640, 637, 638, 629, 0, 0, 0, 615,
	616, 0, 0, 0, 0, 617, 86, 87, 625, 88,
	0, 0, 0, 628, 666, 632, 0, 0, 0, 89,
	90, 91, 214, 681, 216, 682, 92, 683, 684, 0,
	93, 220, 221, 94, 635, 665, 685, 686, 224, 0,
	677, 0, 658, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 297, 102, 103, 0, 659, 661,
	0, 660, 662, 104, 105, 267, 106, 687, 107, 688,
	689, 0, 108, 0, 109, 0, 0, 0, 680, 111,
	0, 112, 0, 0, 0, 623, 113, 114, 667, 668,
	646, 0, 0, 115, 116, 690, 0, 117, 0, 118,
	0, 0, 298, 0, 119, 678, 0, 234, 0, 120,
	121, 122, 123, 674, 676, 300, 0, 127, 0, 124,
	0, 299, 125, 691, 126, 692, 693, 694, 0, 657,
	0, 301, 128, 302, 129, 130, 0, 132, 131, 0,
	679, 303, 133, 304, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 243, 139, 305, 140, 141, 143, 142,
	618, 1564, 647, 675, 144, 695, 145, 146, 0, 147,
	0, 0, 148, 0, 0, 149, 246, 306, 150, 307,
	669, 151, 152, 153, 154, 0, 670, 155, 249, 156,
	0, 157, 158, 159, 696, 160, 161, 0, 162, 163,
	164, 165, 166, 168, 169, 167, 170, 171, 0, 172,
	308, 173, 174, 624, 175, 0, 176, 177, 178, 179,
	0, 252, 180, 181, 663, 182, 183, 309, 184, 697,
	254, 185, 0, 191, 186, 187, 188, 190, 698, 189,
	671, 0, 192, 0, 193, 194, 195, 0, 257, 699,
	700, 0, 0, 196, 672, 673, 645, 197, 198, 199,
	200, 0, 0, 201, 202, 203, 664, 204, 0, 205,
	206, 207, 262, 701, 0, 0, 208, 0, 0, 0,
	0, 209, 210, 211, 212, 619, 0, 650, 639, 640,
	637, 638, 629, 0, 0, 0, 615, 616, 613, 0,
	0, 0, 617, 86, 87, 625, 88, 0, 0, 0,
	628, 666, 632, 0, 0, 0, 89, 90, 91, 214,
	681, 216, 682, 92, 683, 684, 0, 93, 220, 221,
	94, 635, 665, 685, 686, 224, 0, 677, 0, 658,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 297, 102, 103, 0, 659, 661, 0, 660, 662,
	104, 105, 267, 106, 687, 107, 688, 689, 0, 108,
	0, 109, 0, 0, 0, 680, 111, 0, 112, 0,
	0, 0, 623, 113, 114, 667, 668, 646, 0, 0,
	115, 116, 690, 0, 117, 0, 118, 0, 0, 298,
	0, 119, 678, 0, 234, 0, 120, 121, 122, 123,
	674, 676, 300, 0, 127, 0, 124, 0, 299, 125,
	691, 126, 692, 693, 694, 0, 657, 0, 301, 128,
	302, 129, 130, 0, 132, 131, 0, 679, 303, 133,
	304, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	243, 139, 305, 140, 141, 143, 142, 618, 0, 647,
	675, 144, 695, 145, 146, 0, 147, 0, 0, 148,
	0, 0, 149, 246, 306, 150, 307, 669, 151, 152,
	153, 154, 0, 670, 155, 249, 156, 0, 157, 158,
	159, 696, 160, 161, 0, 162, 163, 164, 165, 166,
	168, 169, 167, 170, 171, 0, 172, 308, 173, 174,
	624, 175, 0, 176, 177, 178, 179, 0, 252, 180,
	181, 663, 182, 183, 309, 184, 697, 254, 185, 0,
	191, 186, 187, 188, 190, 698, 189, 671, 0, 192,
	0, 193, 194, 195, 0, 257, 699, 700, 0, 0,
	196, 672, 673, 645, 197, 198, 199, 200, 0, 0,
	201, 202, 203, 664, 204, 0, 205, 206, 207, 262,
	701, 0, 0, 208, 0, 0, 0, 0, 209, 210,
	211, 212, 619, 0, 0, 0, 0, 650, 639, 640,
	637, 638, 629, 615, 616, 0, 0, 0, 0, 617,
	965, 1229, 625, 86, 87, 0, 88, 628, 0, 0,
	0, 666, 632, 0, 0, 0, 89, 90, 91, 214,
	681, 216, 682, 92, 683, 684, 0, 93, 220, 221,
	94, 635, 665, 685, 686, 224, 0, 677, 0, 658,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 297, 102, 103, 0, 659, 661, 0, 660, 662,
	104, 105, 267, 106, 687, 107, 688, 689, 0, 108,
	0, 109, 0, 0, 0, 680, 111, 0, 112, 0,
	0, 0, 623, 113, 114, 667, 668, 646, 0, 0,
	115, 116, 690, 0, 117, 0, 118, 0, 0, 298,
	0, 119, 678, 0, 234, 0, 120, 121, 122, 123,
	674, 676, 300, 0, 127, 0, 124, 0, 299, 125,
	691, 126, 692, 693, 694, 0, 657, 0, 301, 128,
	302, 129, 130, 0, 132, 131, 0, 679, 303, 133,
	304, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	243, 139, 305, 140, 141, 143, 142, 618, 0, 647,
	675, 144, 695, 145, 146, 0, 147, 0, 0, 148,
	0, 0, 149, 246, 306, 150, 307, 669, 151, 152,
	153, 154, 0, 670, 155, 249, 156, 0, 157, 158,
	159, 696, 160, 161, 0, 162, 163, 164, 165, 166,
	168, 169, 167, 170, 171, 0, 172, 308, 173, 174,
	624, 175, 0, 176, 177, 178, 179, 0, 252, 180,
	181, 663, 182, 183, 309, 184, 697, 254, 185, 0,
	191, 186, 187, 188, 190, 698, 189, 671, 0, 192,
	0, 193, 194, 195, 0, 257, 699, 700, 0, 0,
	196, 672, 673, 645, 197, 198, 199, 200, 0, 0,
	201, 202, 203, 664, 204, 0, 205, 206, 207, 262,
	701, 0, 0, 208, 0, 0, 0, 0, 209, 210,
	211, 212, 619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 615, 616, 0, 0, 0, 0, 617,
	0, 0, 625, 1695, 0, 0, 0, 628, 650, 639,
	640, 637, 638, 629, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 666, 632, 0, 0, 0, 89, 90, 91,
	214, 681, 216, 682, 92, 683, 684, 0, 93, 220,
	221, 94, 635, 665, 685, 686, 224, 0, 677, 0,
	658, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 297, 102, 103, 0, 659, 661, 0, 660,
	662, 104, 105, 267, 106, 687, 107, 688, 689, 0,
	108, 0, 109, 0, 0, 0, 680, 111, 0, 112,
	0, 0, 0, 623, 113, 114, 667, 668, 646, 0,
	0, 115, 116, 690, 0, 117, 0, 118, 0, 0,
	298, 0, 119, 678, 0, 234, 0, 120, 121, 122,
	123, 674, 676, 300, 0, 127, 0, 124, 0, 299,
	125, 691, 126, 692, 693, 694, 0, 657, 0, 301,
	128, 302, 129, 130, 0, 132, 131, 0, 679, 303,
	133, 304, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 243, 139, 305, 140, 141, 143, 142, 618, 0,
	647, 675, 144, 695, 145, 146, 0, 147, 0, 0,
	148, 0, 0, 149, 246, 306, 150, 307, 669, 151,
	152, 153, 154, 0, 670, 155, 249, 156, 0, 157,
	158, 159, 696, 160, 161, 0, 162, 163, 164, 165,
	166, 168, 169, 167, 170, 171, 0, 172, 308, 173,
	174, 624, 175, 0, 176, 177, 178, 179, 0, 252,
	180, 181, 663, 182, 183, 309, 184, 697, 254, 185,
	0, 191, 186, 187, 188, 190, 698, 189, 671, 0,
	192, 0, 193, 194, 195, 0, 257, 699, 700, 0,
	0, 196, 672, 673, 645, 197, 198, 199, 200, 0,
	0, 201, 202, 203, 664, 204, 0, 205, 206, 207,
	262, 701, 1652, 0, 208, 0, 0, 0, 0, 209,
	210, 211, 212, 619, 0, 650, 639, 640, 637, 638,
	629, 0, 0, 0, 615, 616, 0, 0, 0, 0,
	617, 86, 87, 625, 88, 0, 0, 0, 628, 666,
	632, 0, 0, 0, 89, 90, 91, 214, 681, 216,
	682, 92, 683, 684, 0, 93, 220, 221, 94, 635,
	665, 685, 686, 224, 0, 677, 0, 658, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 297,
	102, 103, 0, 659, 661, 0, 660, 662, 104, 105,
	267, 106, 687, 107, 688, 689, 0, 108, 0, 109,
	0, 0, 0, 680, 111, 0, 112, 0, 0, 0,
	623, 113, 114, 667, 668, 646, 0, 0, 115, 116,
	690, 0, 117, 0, 118, 0, 0, 298, 0, 119,
	678, 0, 234, 0, 120, 121, 122, 123, 674, 676,
	300, 0, 127, 0, 124, 0, 299, 125, 691, 126,
	692, 693, 694, 0, 657, 0, 301, 128, 302, 129,
	130, 0, 132, 131, 0, 679, 303, 133, 304, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 243, 139,
	305, 140, 141, 143, 142, 618, 0, 647, 675, 144,
	695, 145, 146, 0, 147, 0, 0, 148, 0, 0,
	149, 246, 306, 150, 307, 669, 151, 152, 153, 154,
	0, 670, 155, 249, 156, 0, 157, 158, 159, 696,
	160, 161, 0, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 0, 172, 308, 173, 174, 624, 175,
	0, 176, 177, 178, 179, 0, 252, 180, 181, 663,
	182, 183, 309, 184, 697, 254, 185, 0, 191, 186,
	187, 188, 190, 698, 189, 671, 0, 192, 0, 193,
	194, 195, 0, 257, 699, 700, 0, 0, 196, 672,
	673, 645, 197, 198, 199, 200, 0, 0, 201, 202,
	203, 664, 204, 0, 205, 206, 207, 262, 701, 0,
	0, 208, 0, 0, 0, 0, 209, 210, 211, 212,
	619, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 615, 616, 0, 0, 0, 0, 617, 0, 0,
	625, 1642, 0, 0, 0, 628, 650, 639, 640, 637,
	638, 629, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	666, 632, 0, 0, 0, 89, 90, 91, 214, 681,
	216, 682, 92, 683, 684, 0, 93, 220, 221, 94,
	635, 665, 685, 686, 224, 0, 677, 0, 658, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	297, 102, 103, 0, 659, 661, 0, 660, 662, 104,
	105, 267, 106, 687, 107, 688, 689, 716, 108, 0,
	109, 0, 0, 0, 680, 111, 0, 112, 0, 0,
	0, 623, 113, 114, 667, 668, 646, 0, 0, 115,
	116, 690, 0, 117, 0, 118, 0, 0, 298, 0,
	119, 678, 0, 234, 0, 120, 121, 122, 123, 674,
	676, 300, 0, 127, 0, 124, 0, 299, 125, 691,
	126, 692, 693, 694, 0, 657, 0, 301, 128, 302,
	129, 130, 0, 132, 131, 0, 679, 303, 133, 304,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 243,
	139, 305, 140, 141, 143, 142, 618, 0, 647, 675,
	144, 695, 145, 146, 0, 147, 0, 0, 148, 0,
	0, 149, 246, 306, 150, 307, 669, 151, 152, 153,
	154, 0, 670, 155, 249, 156, 0, 157, 158, 159,
	696, 160, 161, 0, 162, 163, 164, 165, 166, 168,
	169, 167, 170, 171, 0, 172, 308, 173, 174, 624,
	175, 0, 176, 177, 178, 179, 0, 252, 180, 181,
	663, 182, 183, 309, 184, 697, 254, 185, 0, 191,
	186, 187, 188, 190, 698, 189, 671, 0, 192, 0,
	193, 194, 195, 0, 257, 699, 700, 0, 0, 196,
	672, 673, 645, 197, 198, 199, 200, 0, 0, 201,
	202, 203, 664, 204, 0, 205, 206, 207, 262, 701,
	0, 0, 208, 0, 0, 0, 0, 209, 210, 211,
	212, 619, 0, 650, 639, 640, 637, 638, 629, 0,
	0, 0, 615, 616, 0, 0, 0, 0, 617, 86,
	87, 625, 88, 0, 0, 0, 628, 666, 632, 0,
	0, 0, 89, 90, 91, 214, 681, 216, 682, 92,
	683, 684, 0, 93, 220, 221, 94, 635, 665, 685,
	686, 224, 0, 677, 0, 658, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 297, 102, 103,
	0, 659, 661, 0, 660, 662, 104, 105, 267, 106,
	687, 107, 688, 689, 0, 108, 0, 109, 0, 0,
	0, 680, 111, 0, 112, 0, 0, 0, 623, 113,
	114, 667, 668, 646, 0, 0, 115, 116, 690, 0,
	117, 0, 118, 0, 1281, 298, 0, 119, 678, 0,
	234, 0, 120, 121, 122, 123, 674, 676, 300, 0,
	127, 0, 124, 0, 299, 125, 691, 126, 692, 693,
	694, 0, 657, 0, 301, 128, 302, 129, 130, 0,
	132, 131, 0, 679, 303, 133, 304, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 243, 139, 305, 140,
	141, 143, 142, 618, 0, 647, 675, 144, 695, 145,
	146, 0, 147, 0, 0, 148, 0, 0, 149, 246,
	306, 150, 307, 669, 151, 152, 153, 154, 0, 670,
	155, 249, 156, 0, 157, 158, 159, 696, 160, 161,
	0, 162, 163, 164, 165, 166, 168, 169, 167, 170,
	171, 0, 172, 308, 173, 174, 624, 175, 0, 176,
	177, 178, 179, 0, 252, 180, 181, 663, 182, 183,
	309, 184, 697, 254, 185, 0, 191, 186, 187, 188,
	190, 698, 189, 671, 0, 192, 0, 193, 194, 195,
	0, 257, 699, 700, 0, 0, 196, 672, 673, 645,
	197, 198, 199, 200, 0, 0, 201, 202, 203, 664,
	204, 0, 205, 206, 207, 262, 701, 0, 0, 208,
	0, 0, 0, 0, 209, 210, 211, 212, 619, 0,
	650, 639, 640, 637, 638, 629, 0, 0, 0, 615,
	616, 0, 0, 0, 0, 617, 86, 87, 625, 88,
	0, 0, 0, 628, 666, 632, 0, 0, 0, 89,
	90, 91, 214, 681, 216, 682, 92, 683, 684, 0,
	93, 220, 221, 94, 635, 665, 685, 686, 224, 0,
	677, 0, 658, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 297, 102, 103, 0, 659, 661,
	0, 660, 662, 104, 105, 267, 106, 687, 107, 688,
	689, 0, 108, 0, 109, 0, 0, 0, 680, 111,
	0, 112, 0, 0, 0, 623, 113, 114, 667, 668,
	646, 0, 0, 115, 116, 690, 0, 117, 0, 118,
	0, 0, 298, 0, 119, 678, 0, 234, 0, 120,
	121, 122, 123, 674, 676, 300, 0, 127, 0, 124,
	0, 299, 125, 691, 126, 692, 693, 694, 0, 657,
	0, 301, 128, 302, 129, 130, 0, 132, 131, 0,
	679, 303, 133, 304, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 243, 139, 305, 140, 141, 143, 142,
	618, 0, 647, 675, 144, 695, 145, 146, 0, 147,
	0, 0, 148, 0, 0, 149, 246, 306, 150, 307,
	669, 151, 152, 153, 154, 0, 670, 155, 249, 156,
	0, 157, 158, 159, 696, 160, 161, 0, 162, 163,
	164, 165, 166, 168, 169, 167, 170, 171, 0, 172,
	308, 173, 174, 624, 175, 0, 176, 177, 178, 179,
	0, 252, 180, 181, 663, 182, 183, 309, 184, 697,
	254, 185, 0, 191, 186, 187, 188, 190, 698, 189,
	671, 0, 192, 0, 193, 194, 195, 0, 257, 699,
	700, 0, 0, 196, 672, 673, 645, 197, 198, 199,
	200, 0, 0, 201, 202, 203, 664, 204, 0, 205,
	206, 207, 262, 701, 0, 0, 208, 0, 0, 0,
	0, 209, 210, 211, 212, 619, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 615, 616, 0, 0,
	0, 0, 617, 0, 0, 625, 1224, 0, 0, 0,
	628, 650, 639, 640, 637, 638, 629, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 666, 632, 0, 0, 0,
	89, 90, 91, 214, 681, 216, 682, 92, 683, 684,
	0, 93, 220, 221, 94, 635, 665, 685, 686, 224,
	0, 677, 0, 658, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 297, 102, 103, 0, 659,
	661, 0, 660, 662, 104, 105, 267, 106, 687, 107,
	688, 689, 0, 108, 0, 109, 0, 0, 0, 680,
	111, 0, 112, 0, 0, 0, 623, 113, 114, 667,
	668, 646, 0, 0, 115, 116, 690, 0, 117, 0,
	118, 0, 0, 298, 0, 119, 678, 0, 234, 0,
	120, 121, 122, 123, 674, 676, 300, 0, 127, 0,
	124, 0, 299, 125, 691, 126, 692, 693, 694, 0,
	657, 0, 301, 128, 302, 129, 130, 0, 132, 131,
	0, 679, 303, 133, 304, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 243, 139, 305, 140, 141, 143,
	142, 618, 0, 647, 675, 144, 695, 145, 146, 0,
	147, 0, 0, 148, 0, 0, 149, 246, 306, 150,
	307, 669, 151, 152, 153, 154, 0, 670, 155, 249,
	156, 0, 157, 158, 159, 696, 160, 161, 0, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 0,
	172, 308, 173, 174, 624, 175, 0, 176, 177, 178,
	179, 0, 252, 180, 181, 663, 182, 183, 309, 184,
	697, 254, 185, 0, 191, 186, 187, 188, 190, 698,
	189, 671, 0, 192, 0, 193, 194, 195, 0, 257,
	699, 700, 0, 0, 196, 672, 673, 645, 197, 198,
	199, 200, 0, 0, 201, 202, 203, 664, 204, 0,
	205, 206, 207, 262, 701, 0, 0, 208, 0, 0,
	0, 0, 209, 210, 211, 212, 619, 0, 0, 0,
	0, 650, 639, 640, 637, 638, 629, 615, 616, 613,
	0, 0, 0, 617, 0, 0, 625, 86, 87, 893,
	88, 628, 0, 0, 0, 666, 632, 0, 0, 0,
	89, 90, 91, 214, 681, 216, 682, 92, 683, 684,
	0, 93, 220, 221, 94, 635, 665, 685, 686, 224,
	0, 677, 0, 658, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 297, 102, 103, 0, 659,
	661, 0, 660, 662, 104, 105, 267, 106, 687, 107,
	688, 689, 0, 108, 0, 109, 0, 0, 0, 680,
	111, 0, 112, 0, 0, 0, 623, 113, 114, 667,
	668, 646, 0, 0, 115, 116, 690, 0, 117, 0,
	118, 0, 0, 298, 0, 119, 678, 0, 234, 0,
	120, 121, 122, 123, 674, 676, 300, 0, 127, 0,
	124, 0, 299, 125, 691, 126, 692, 693, 694, 0,
	657, 0, 301, 128, 302, 129, 130, 0, 132, 131,
	0, 679, 303, 133, 304, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 243, 139, 305, 140, 141, 143,
	142, 618, 0, 647, 675, 144, 695, 145, 146, 0,
	147, 0, 0, 148, 0, 0, 149, 246, 306, 150,
	307, 669, 151, 152, 153, 154, 0, 670, 155, 249,
	156, 0, 157, 158, 159, 696, 160, 161, 0, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 0,
	172, 308, 173, 174, 624, 175, 0, 176, 177, 178,
	179, 0, 252, 180, 181, 663, 182, 183, 309, 184,
	697, 254, 185, 0, 191, 186, 187, 188, 190, 698,
	189, 671, 0, 192, 0, 193, 194, 195, 0, 257,
	699, 700, 0, 0, 196, 672, 673, 645, 197, 198,
	199, 200, 0, 0, 201, 202, 203, 664, 204, 0,
	205, 206, 207, 262, 701, 0, 0, 208, 0, 0,
	0, 0, 209, 210, 211, 212, 619, 0, 650, 639,
	640, 637, 638, 629, 0, 0, 0, 615, 616, 0,
	0, 0, 0, 617, 86, 87, 625, 88, 0, 0,
	0, 628, 666, 632, 0, 0, 0, 89, 90, 91,
	214, 681, 216, 682, 92, 683, 684, 0, 93, 220,
	221, 94, 635, 665, 685, 686, 224, 0, 677, 0,
	658, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 297, 102, 2040, 0, 659, 661, 0, 660,
	662, 104, 105, 267, 106, 687, 107, 688, 689, 0,
	108, 0, 109, 0, 0, 0, 680, 111, 0, 112,
	0, 0, 0, 623, 113, 114, 667, 668, 646, 0,
	0, 115, 116, 690, 0, 117, 0, 118, 0, 0,
	298, 0, 119, 678, 0, 234, 0, 120, 121, 122,
	123, 674, 676, 300, 0, 127, 0, 124, 0, 299,
	125, 691, 126, 692, 693, 694, 0, 657, 0, 301,
	128, 302, 129, 130, 0, 132, 131, 0, 679, 303,
	133, 304, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 243, 139, 305, 140, 141, 143, 142, 618, 0,
	647, 675, 144, 695, 145, 146, 0, 147, 0, 0,
	148, 0, 0, 149, 246, 306, 150, 307, 669, 151,
	152, 153, 154, 0, 670, 155, 249, 156, 0, 157,
	158, 159, 696, 160, 161, 0, 162, 163, 164, 165,
	166, 168, 169, 167, 170, 171, 0, 172, 308, 173,
	174, 624, 175, 0, 176, 177, 178, 179, 0, 252,
	180, 181, 663, 182, 183, 309, 184, 697, 254, 185,
	0, 191, 186, 187, 188, 190, 698, 189, 671, 0,
	192, 0, 193, 194, 195, 0, 257, 699, 700, 0,
	0, 196, 672, 673, 645, 197, 198, 2039, 200, 0,
	0, 201, 202, 203, 664, 204, 0, 205, 206, 207,
	262, 701, 0, 0, 208, 0, 0, 0, 0, 209,
	210, 211, 212, 619, 0, 650, 639, 640, 637, 638,
	629, 0, 0, 0, 615, 616, 0, 0, 0, 0,
	617, 86, 87, 625, 88, 0, 0, 0, 628, 666,
	632, 0, 0, 0, 89, 90, 91, 2038, 681, 216,
	682, 92, 683, 684, 0, 93, 220, 221, 94, 635,
	665, 685, 686, 224, 0, 677, 0, 658, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 297,
	102, 2040, 0, 659, 661, 0, 660, 662, 104, 105,
	267, 106, 687, 107, 688, 689, 0, 108, 0, 109,
	0, 0, 0, 680, 111, 0, 112, 0, 0, 0,
	623, 113, 114, 667, 668, 646, 0, 0, 115, 116,
	690, 0, 117, 0, 118, 0, 0, 298, 0, 119,
	678, 0, 234, 0, 120, 121, 122, 123, 674, 676,
	300, 0, 127, 0, 124, 0, 299, 125, 691, 126,
	692, 693, 694, 0, 657, 0, 301, 128, 302, 129,
	130, 0, 132, 131, 0, 679, 303, 133, 304, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 243, 139,
	305, 140, 141, 143, 142, 618, 0, 647, 675, 144,
	695, 145, 146, 0, 147, 0, 0, 148, 0, 0,
	149, 246, 306, 150, 307, 669, 151, 152, 153, 154,
	0, 670, 155, 249, 156, 0, 157, 158, 159, 696,
	160, 161, 0, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 0, 172, 308, 173, 174, 624, 175,
	0, 176, 177, 178, 179, 0, 252, 180, 181, 663,
	182, 183, 309, 184, 697, 254, 185, 0, 191, 186,
	187, 188, 190, 698, 189, 671, 0, 192, 0, 193,
	194, 195, 0, 257, 699, 700, 0, 0, 196, 672,
	673, 645, 197, 198, 2039, 200, 0, 0, 201, 202,
	203, 664, 204, 0, 205, 206, 207, 262, 701, 0,
	0, 208, 0, 0, 0, 0, 209, 210, 211, 212,
	619, 0, 650, 639, 640, 637, 638, 629, 0, 0,
	0, 615, 616, 0, 0, 0, 0, 617, 86, 87,
	625, 88, 0, 0, 0, 628, 666, 632, 0, 0,
	0, 89, 90, 91, 214, 681, 216, 682, 92, 683,
	684, 0, 93, 220, 221, 94, 635, 665, 685, 686,
	224, 0, 677, 0, 658, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 297, 102, 103, 0,
	659, 661, 0, 660, 662, 104, 105, 267, 106, 687,
	107, 688, 689, 0, 108, 0, 109, 0, 0, 0,
	680, 111, 0, 112, 0, 0, 0, 623, 113, 114,
	667, 668, 646, 0, 0, 115, 116, 690, 0, 117,
	0, 118, 0, 0, 298, 0, 119, 678, 0, 234,
	0, 120, 121, 122, 123, 674, 676, 300, 0, 127,
	0, 124, 0, 299, 125, 691, 126, 692, 693, 694,
	0, 657, 0, 301, 128, 302, 129, 130, 0, 132,
	131, 0, 679, 303, 133, 304, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 243, 139, 305, 140, 141,
	143, 142, 618, 0, 647, 675, 144, 695, 145, 146,
	0, 147, 0, 0, 148, 0, 0, 149, 246, 306,
	150, 307, 669, 151, 152, 153, 154, 0, 670, 155,
	249, 156, 0, 157, 158, 159, 696, 160, 161, 0,
	162, 163, 164, 165, 166, 168, 169, 167, 170, 171,
	0, 172, 308, 173, 174, 624, 175, 0, 176, 177,
	178, 179, 0, 252, 180, 181, 663, 182, 183, 309,
	184, 697, 254, 185, 0, 191, 186, 187, 188, 190,
	698, 189, 671, 0, 192, 0, 193, 194, 195, 0,
	257, 699, 700, 0, 0, 196, 672, 673, 645, 197,
	198, 199, 200, 0, 0, 201, 202, 203, 664, 204,
	0, 205, 206, 207, 262, 701, 0, 0, 208, 0,
	0, 0, 0, 209, 210, 211, 212, 619, 0, 1253,
	639, 640, 637, 638, 629, 0, 0, 0, 615, 616,
	0, 0, 0, 0, 617, 86, 87, 625, 88, 0,
	0, 0, 628, 666, 632, 0, 0, 0, 89, 90,
	91, 214, 681, 216, 682, 92, 683, 684, 0, 93,
	220, 221, 94, 635, 665, 685, 686, 224, 0, 677,
	0, 658, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 297, 102, 103, 0, 659, 661, 0,
	660, 662, 104, 105, 267, 106, 687, 1256, 688, 689,
	0, 108, 0, 109, 0, 0, 0, 680, 111, 0,
	112, 0, 0, 0, 623, 113, 114, 667, 668, 646,
	0, 0, 115, 116, 690, 0, 117, 0, 118, 0,
	0, 298, 0, 119, 678, 0, 234, 0, 120, 121,
	1257, 123, 674, 676, 300, 0, 127, 0, 124, 0,
	299, 125, 691, 126, 692, 693, 694, 0, 657, 0,
	301, 128, 302, 129, 130, 0, 132, 131, 0, 679,
	303, 133, 304, 0, 134, 0, 0, 135, 0, 136,
	1258, 1255, 243, 139, 305, 140, 141, 143, 142, 618,
	0, 647, 675, 144, 695, 145, 146, 0, 147, 0,
	0, 148, 0, 0, 149, 246, 306, 150, 307, 669,
	151, 152, 153, 154, 0, 670, 155, 249, 156, 0,
	157, 158, 159, 696, 160, 161, 0, 162, 163, 164,
	165, 166, 168, 169, 167, 170, 171, 0, 172, 308,
	173, 174, 624, 175, 0, 176, 177, 178, 1259, 0,
	252, 180, 181, 663, 182, 183, 309, 184, 697, 254,
	185, 0, 191, 186, 187, 188, 190, 698, 189, 671,
	0, 192, 0, 193, 194, 195, 0, 257, 699, 700,
	0, 0, 196, 672, 673, 645, 197, 198, 199, 200,
	0, 0, 201, 202, 203, 664, 204, 0, 205, 206,
	207, 262, 701, 0, 0, 208, 0, 0, 0, 0,
	209, 210, 1254, 212, 619, 0, 650, 639, 640, 637,
	638, 629, 0, 0, 0, 615, 616, 0, 0, 0,
	0, 617, 86, 87, 625, 88, 0, 0, 0, 628,
	666, 632, 0, 0, 0, 89, 90, 91, 214, 681,
	216, 682, 92, 683, 684, 0, 93, 220, 221, 94,
	635, 665, 685, 686, 224, 0, 677, 0, 658, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	297, 102, 103, 0, 659, 661, 0, 660, 662, 104,
	105, 267, 106, 687, 107, 688, 689, 0, 108, 0,
	109, 0, 0, 0, 680, 111, 0, 112, 0, 0,
	0, 623, 113, 114, 667, 668, 646, 0, 0, 115,
	116, 690, 0, 117, 0, 118, 0, 0, 298, 0,
	119, 678, 0, 234, 0, 120, 121, 122, 123, 674,
	676, 300, 0, 127, 0, 124, 0, 299, 125, 691,
	126, 692, 693, 694, 0, 657, 0, 301, 128, 302,
	129, 130, 0, 132, 131, 0, 679, 303, 133, 304,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 243,
	139, 305, 140, 141, 143, 142, 0, 0, 647, 675,
	144, 695, 145, 146, 0, 147, 0, 0, 148, 0,
	0, 149, 246, 306, 150, 307, 669, 151, 152, 153,
	154, 0, 670, 155, 249, 156, 0, 157, 158, 159,
	696, 160, 161, 0, 162, 163, 164, 165, 166, 168,
	169, 167, 170, 171, 0, 172, 308, 173, 174, 1271,
	175, 0, 176, 177, 178, 179, 0, 252, 180, 181,
	663, 182, 183, 309, 184, 697, 254, 185, 0, 191,
	186, 187, 188, 190, 698, 189, 671, 0, 192, 0,
	193, 194, 195, 0, 257, 699, 700, 0, 0, 196,
	672, 673, 645, 197, 198, 199, 200, 0, 0, 201,
	202, 203, 664, 204, 0, 205, 206, 207, 262, 701,
	0, 0, 208, 0, 0, 0, 0, 209, 210, 211,
	212, 0, 0, 650, 639, 640, 637, 638, 629, 0,
	0, 0, 1267, 1268, 0, 0, 0, 0, 1269, 86,
	87, 1270, 88, 0, 0, 0, 628, 666, 632, 0,
	0, 0, 89, 90, 91, 0, 681, 216, 682, 92,
	683, 684, 0, 93, 220, 221, 94, 635, 665, 685,
	686, 224, 0, 677, 0, 658, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 297, 102, 2040,
	0, 659, 661, 0, 660, 662, 104, 105, 267, 106,
	687, 107, 688, 689, 0, 108, 0, 109, 0, 0,
	0, 680, 111, 0, 112, 0, 0, 0, 623, 113,
	114, 667, 668, 646, 0, 0, 115, 116, 690, 0,
	117, 0, 118, 0, 0, 298, 0, 119, 678, 0,
	234, 0, 120, 121, 122, 123, 674, 676, 0, 0,
	127, 0, 124, 0, 299, 125, 691, 126, 692, 693,
	694, 0, 657, 0, 0, 128, 302, 129, 130, 0,
	132, 131, 0, 679, 303, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 243, 139, 305, 140,
	141, 143, 142, 618, 0, 647, 675, 144, 695, 145,
	146, 0, 147, 0, 0, 148, 0, 0, 149, 246,
	306, 150, 307, 669, 151, 152, 153, 154, 0, 670,
	155, 249, 156, 0, 157, 158, 159, 696, 160, 161,
	0, 162, 163, 164, 165, 166, 168, 169, 167, 170,
	171, 0, 172, 308, 173, 174, 624, 175, 0, 176,
	177, 178, 179, 0, 252, 180, 181, 663, 182, 183,
	0, 184, 697, 254, 185, 0, 191, 186, 187, 188,
	190, 698, 189, 671, 0, 192, 0, 193, 194, 195,
	0, 257, 699, 700, 0, 0, 196, 672, 673, 645,
	197, 198, 2039, 200, 0, 0, 201, 202, 203, 664,
	204, 0, 205, 206, 207, 262, 701, 0, 0, 208,
	0, 0, 0, 0, 209, 210, 211, 212, 0, 0,
	650, 639, 640, 637, 638, 629, 0, 0, 0, 615,
	616, 0, 0, 0, 0, 617, 86, 87, 625, 88,
	0, 0, 0, 628, 666, 632, 0, 0, 0, 89,
	90, 91, 214, 681, 216, 682, 92, 683, 684, 0,
	93, 220, 221, 94, 0, 665, 685, 686, 224, 0,
	677, 0, 658, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 297, 102, 103, 0, 659, 661,
	0, 660, 662, 104, 105, 267, 106, 687, 107, 688,
	689, 0, 108, 0, 109, 0, 0, 0, 680, 111,
	0, 112, 0, 0, 0, 229, 113, 114, 667, 668,
	646, 0, 0, 115, 116, 690, 0, 117, 0, 118,
	0, 0, 298, 0, 119, 678, 0, 234, 0, 120,
	121, 122, 123, 674, 676, 300, 0, 127, 0, 124,
	0, 299, 125, 691, 126, 692, 693, 694, 0, 657,
	0, 301, 128, 302, 129, 130, 0, 132, 131, 0,
	679, 303, 133, 304, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 243, 139, 305, 140, 141, 143, 142,
	0, 0, 647, 675, 144, 695, 145, 146, 0, 147,
	0, 0, 148, 0, 0, 149, 246, 306, 150, 307,
	669, 151, 152, 153, 154, 0, 670, 155, 249, 156,
	0, 157, 158, 159, 696, 160, 161, 0, 162, 163,
	164, 165, 166, 168, 169, 167, 170, 171, 0, 172,
	308, 173, 174, 1271, 175, 0, 176, 177, 178, 179,
	0, 252, 180, 181, 663, 182, 183, 309, 184, 697,
	254, 185, 0, 191, 186, 187, 188, 190, 698, 189,
	671, 0, 192, 0, 193, 194, 195, 0, 257, 699,
	700, 0, 0, 196, 672, 673, 645, 197, 198, 199,
	200, 650, 0, 201, 202, 203, 664, 204, 0, 205,
	206, 207, 262, 701, 0, 0, 208, 86, 87, 0,
	88, 209, 210, 211, 212, 666, 0, 0, 0, 0,
	89, 90, 91, 214, 215, 216, 217, 92, 218, 219,
	0, 93, 220, 221, 94, 1270, 665, 222, 223, 224,
	628, 677, 0, 658, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 297, 102, 103, 0, 659,
	661, 0, 660, 662, 104, 105, 267, 106, 226, 107,
	227, 228, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 229, 113, 114, 667,
	668, 0, 0, 0, 115, 116, 232, 0, 117, 0,
	118, 0, 0, 298, 0, 119, 678, 0, 234, 0,
	120, 121, 122, 123, 674, 676, 300, 0, 127, 0,
	124, 0, 299, 125, 237, 126, 238, 239, 240, 0,
	241, 0, 301, 128, 302, 129, 130, 0, 132, 131,
	0, 679, 303, 133, 304, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 243, 139, 305, 140, 141, 143,
	142, 0, 0, 0, 675, 144, 245, 145, 146, 0,
	147, 0, 0, 148, 0, 0, 149, 246, 306, 150,
	307, 669, 151, 152, 153, 154, 0, 670, 155, 249,
	156, 0, 157, 158, 159, 250, 160, 161, 0, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 0,
	172, 308, 173, 174, 251, 175, 0, 176, 177, 178,
	179, 0, 252, 180, 181, 663, 182, 183, 309, 184,
	253, 254, 185, 0, 191, 186, 187, 188, 190, 255,
	189, 671, 0, 192, 0, 193, 194, 195, 0, 257,
	258, 259, 0, 0, 196, 672, 673, 0, 197, 198,
	199, 200, 526, 0, 201, 202, 203, 664, 204, 0,
	205, 206, 207, 262, 263, 0, 0, 208, 86, 87,
	0, 88, 209, 210, 211, 212, 213, 0, 0, 0,
	0, 89, 90, 91, 214, 215, 216, 217, 92, 218,
	219, 0, 93, 220, 221, 94, 1537, 0, 222, 223,
	224, 0, 225, 0, 296, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 297, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 267, 106, 226,
	107, 227, 228, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 229, 113, 114,
	230, 231, 0, 0, 0, 115, 116, 232, 0, 117,
	0, 118, 0, 0, 298, 0, 119, 233, 0, 234,
	0, 120, 121, 122, 123, 235, 236, 300, 0, 127,
	0, 124, 0, 299, 125, 237, 126, 238, 239, 240,
	0, 241, 0, 301, 128, 302, 129, 130, 0, 132,
	131, 0, 242, 303, 133, 304, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 243, 139, 305, 140, 141,
	143, 142, 0, 0, 0, 244, 144, 245, 145, 146,
	0, 147, 0, 0, 148, 0, 0, 149, 246, 306,
	150, 307, 247, 151, 152, 153, 154, 0, 248, 155,
	249, 156, 0, 157, 158, 159, 250, 160, 161, 0,
	162, 163, 164, 165, 166, 168, 169, 167, 170, 171,
	0, 172, 308, 173, 174, 251, 175, 0, 176, 177,
	178, 179, 67, 252, 180, 181, 0, 182, 183, 309,
	184, 253, 254, 185, 0, 191, 186, 187, 188, 190,
	255, 189, 256, 0, 192, 69, 193, 194, 195, 0,
	257, 258, 259, 0, 0, 196, 260, 261, 0, 197,
	198, 199, 200, 0, 0, 201, 202, 203, 0, 204,
	0, 205, 206, 207, 530, 263, 0, 0, 208, 0,
	0, 0, 65, 209, 210, 211, 212, 0, 66, 526,
	735, 0, 843, 840, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 64, 88, 0,
	0, 0, 0, 213, 0, 0, 0, 0, 89, 90,
	91, 214, 215, 216, 217, 92, 218, 219, 0, 93,
	220, 221, 94, 0, 0, 222, 223, 224, 0, 225,
	0, 296, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 297, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 267, 106, 226, 107, 227, 228,
	846, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 229, 113, 114, 230, 231, 837,
	0, 0, 115, 116, 232, 0, 117, 0, 118, 0,
	0, 298, 0, 119, 233, 0, 234, 0, 120, 121,
	122, 123, 235, 236, 300, 0, 127, 0, 124, 0,
	299, 125, 237, 126, 238, 239, 240, 0, 241, 0,
	301, 128, 302, 129, 130, 0, 132, 131, 0, 242,
	303, 133, 304, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 243, 139, 305, 140, 141, 143, 142, 0,
	0, 0, 244, 144, 245, 145, 146, 0, 147, 838,
	0, 148, 0, 0, 149, 246, 306, 150, 307, 247,
	151, 152, 153, 154, 0, 248, 155, 249, 156, 0,
	157, 158, 159, 250, 160, 161, 0, 162, 163, 164,
	165, 166, 168, 169, 167, 170, 171, 0, 172, 308,
	173, 174, 251, 175, 0, 176, 177, 178, 179, 0,
	252, 180, 181, 0, 182, 183, 309, 184, 253, 254,
	185, 0, 191, 186, 187, 188, 190, 255, 189, 256,
	0, 192, 0, 193, 194, 195, 0, 257, 258, 259,
	0, 0, 196, 260, 261, 836, 197, 198, 199, 200,
	0, 0, 201, 202, 203, 0, 204, 0, 205, 206,
	207, 262, 263, 526, 735, 208, 843, 840, 835, 0,
	209, 210, 211, 212, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 844, 841, 213, 0, 0,
	0, 0, 89, 90, 91, 214, 215, 216, 217, 92,
	218, 219, 0, 93, 220, 221, 94, 0, 0, 222,
	223, 224, 0, 225, 0, 296, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 297, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 267, 106,
	226, 107, 227, 228, 831, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 229, 113,
	114, 230, 231, 837, 0, 0, 115, 116, 232, 0,
	117, 0, 118, 0, 0, 298, 0, 119, 233, 0,
	234, 0, 120, 121, 122, 123, 235, 236, 300, 0,
	127, 0, 124, 0, 299, 125, 237, 126, 238, 239,
	240, 0, 241, 0, 301, 128, 302, 129, 130, 0,
	132, 131, 0, 242, 303, 133, 304, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 243, 139, 305, 140,
	141, 143, 142, 0, 0, 0, 244, 144, 245, 145,
	146, 0, 147, 838, 0, 148, 0, 0, 149, 246,
	306, 150, 307, 247, 151, 152, 153, 154, 0, 248,
	155, 249, 156, 0, 157, 158, 159, 250, 160, 161,
	0, 162, 163, 164, 165, 166, 168, 169, 167, 170,
	171, 0, 172, 308, 173, 174, 251, 175, 0, 176,
	177, 178, 179, 0, 252, 180, 181, 0, 182, 183,
	309, 184, 253, 254, 185, 0, 191, 186, 187, 188,
	190, 255, 189, 256, 0, 192, 0, 193, 194, 195,
	0, 257, 258, 259, 0, 0, 196, 260, 261, 836,
	197, 198, 199, 200, 0, 0, 201, 202, 203, 0,
	204, 0, 205, 206, 207, 262, 263, 526, 735, 208,
	843, 840, 835, 0, 209, 210, 211, 212, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 844,
	841, 213, 0, 0, 0, 0, 89, 90, 91, 214,
	215, 216, 217, 92, 218, 219, 0, 93, 220, 221,
	94, 0, 0, 222, 223, 224, 0, 225, 0, 296,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 297, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 267, 106, 226, 107, 227, 228, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 229, 113, 114, 230, 231, 837, 0, 0,
	115, 116, 232, 0, 117, 0, 118, 0, 0, 298,
	0, 119, 233, 0, 234, 0, 120, 121, 122, 123,
	235, 236, 300, 0, 127, 0, 124, 0, 299, 125,
	237, 126, 238, 239, 240, 0, 241, 0, 301, 128,
	302, 129, 130, 0, 132, 131, 0, 242, 303, 133,
	304, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	243, 139, 305, 140, 141, 143, 142, 0, 0, 0,
	244, 144, 245, 145, 146, 0, 147, 838, 0, 148,
	0, 0, 149, 246, 306, 150, 307, 247, 151, 152,
	153, 154, 0, 248, 155, 249, 156, 0, 157, 158,
	159, 250, 160, 161, 0, 162, 163, 164, 165, 166,
	168, 169, 167, 170, 171, 0, 172, 308, 173, 174,
	251, 175, 0, 176, 177, 178, 179, 0, 252, 180,
	181, 0, 182, 183, 309, 184, 253, 254, 185, 0,
	191, 186, 187, 188, 190, 255, 189, 256, 0, 192,
	0, 193, 194, 195, 0, 257, 258, 259, 0, 0,
	196, 260, 261, 836, 197, 198, 199, 200, 0, 0,
	201, 202, 203, 0, 204, 0, 205, 206, 207, 262,
	263, 83, 0, 208, 0, 0, 0, 0, 209, 210,
	211, 212, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 844, 841, 213, 0, 0, 0, 0,
	89, 90, 91, 214, 215, 216, 217, 92, 218, 219,
	0, 93, 220, 221, 94, 0, 0, 222, 223, 224,
	0, 225, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 226, 107,
	227, 228, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 229, 113, 114, 230,
	231, 0, 0, 0, 115, 116, 232, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 233, 0, 234, 0,
	120, 121, 122, 123, 235, 236, 0, 0, 127, 0,
	124, 0, 0, 125, 237, 126, 238, 239, 240, 0,
	241, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 242, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 243, 139, 0, 140, 141, 143,
	142, 0, 0, 0, 244, 144, 245, 145, 146, 0,
	147, 0, 480, 148, 0, 0, 149, 246, 0, 150,
	0, 247, 151, 152, 153, 154, 0, 248, 155, 249,
	156, 0, 157, 158, 159, 250, 160, 161, 0, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 0,
	172, 0, 173, 174, 251, 175, 0, 176, 177, 178,
	179, 67, 252, 180, 181, 0, 182, 183, 0, 184,
	253, 254, 185, 0, 191, 186, 187, 188, 190, 255,
	189, 256, 0, 192, 69, 193, 194, 195, 0, 257,
	258, 259, 0, 0, 196, 260, 261, 0, 197, 198,
	199, 200, 0, 0, 201, 202, 203, 0, 204, 0,
	205, 206, 207, 530, 263, 0, 0, 208, 83, 0,
	0, 65, 209, 210, 211, 212, 0, 66, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 213, 0, 1149, 0, 1154, 89, 90, 91,
	214, 215, 216, 217, 92, 218, 219, 0, 93, 220,
	221, 94, 0, 0, 222, 223, 224, 0, 225, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 267, 106, 226, 107, 227, 228, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 229, 113, 114, 230, 231, 0, 0,
	0, 115, 116, 232, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 233, 0, 234, 0, 120, 121, 122,
	123, 235, 236, 0, 0, 127, 0, 124, 0, 0,
	125, 237, 126, 238, 239, 240, 0, 241, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 242, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 243, 139, 0, 140, 141, 143, 142, 0, 0,
	0, 244, 144, 245, 145, 146, 0, 147, 0, 0,
	148, 0, 0, 149, 246, 0, 150, 0, 247, 151,
	152, 153, 154, 0, 248, 155, 249, 156, 0, 157,
	158, 159, 250, 160, 161, 0, 162, 163, 164, 165,
	166, 168, 169, 167, 170, 171, 0, 172, 0, 173,
	174, 251, 175, 0, 176, 177, 178, 179, 67, 252,
	180, 181, 0, 182, 183, 0, 184, 253, 254, 185,
	0, 191, 186, 187, 188, 190, 255, 189, 256, 0,
	192, 69, 193, 194, 195, 0, 257, 258, 259, 0,
	0, 196, 260, 261, 0, 197, 198, 199, 200, 0,
	0, 201, 202, 203, 0, 204, 0, 205, 206, 207,
	530, 263, 0, 0, 208, 83, 0, 0, 65, 209,
	210, 211, 212, 0, 66, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 213,
	0, 0, 0, 64, 89, 90, 91, 214, 215, 216,
	217, 92, 218, 219, 0, 93, 220, 221, 94, 0,
	0, 222, 223, 224, 0, 225, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	267, 106, 226, 107, 227, 228, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	229, 113, 114, 230, 231, 0, 0, 0, 115, 116,
	232, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	233, 0, 234, 0, 120, 121, 122, 123, 235, 236,
	0, 0, 127, 0, 124, 0, 0, 125, 237, 126,
	238, 239, 240, 0, 241, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 242, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 243, 139,
	0, 140, 141, 143, 142, 0, 0, 0, 244, 144,
	245, 145, 146, 0, 147, 0, 480, 148, 0, 0,
	149, 246, 0, 150, 0, 247, 151, 152, 153, 154,
	0, 248, 155, 249, 156, 0, 157, 158, 159, 250,
	160, 161, 0, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 0, 172, 0, 173, 174, 251, 175,
	0, 176, 177, 178, 179, 0, 252, 180, 181, 0,
	182, 183, 0, 184, 253, 254, 185, 0, 191, 186,
	187, 188, 190, 255, 189, 256, 0, 192, 0, 193,
	194, 195, 0, 257, 258, 259, 0, 0, 196, 260,
	261, 0, 197, 198, 199, 200, 0, 0, 201, 202,
	203, 0, 204, 0, 205, 206, 207, 262, 263, 0,
	0, 208, 83, 0, 0, 0, 209, 210, 211, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 213, 0, 1149, 0,
	1154, 89, 90, 91, 214, 215, 216, 217, 92, 218,
	219, 0, 93, 220, 221, 94, 0, 0, 222, 223,
	224, 0, 225, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 267, 106, 226,
	107, 227, 228, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 229, 113, 114,
	230, 231, 0, 0, 0, 115, 116, 232, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 233, 0, 234,
	0, 120, 121, 122, 123, 235, 236, 0, 0, 127,
	0, 124, 0, 0, 125, 237, 126, 238, 239, 240,
	0, 241, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 242, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 243, 139, 0, 140, 141,
	143, 142, 0, 0, 0, 244, 144, 245, 145, 146,
	0, 147, 0, 0, 148, 0, 0, 149, 246, 0,
	150, 0, 247, 151, 152, 153, 154, 0, 248, 155,
	249, 156, 0, 157, 158, 159, 250, 160, 161, 0,
	162, 163, 164, 165, 166, 168, 169, 167, 170, 171,
	0, 172, 0, 173, 174, 251, 175, 0, 176, 177,
	178, 179, 0, 252, 180, 181, 0, 182, 183, 0,
	184, 253, 254, 185, 0, 191, 186, 187, 188, 190,
	255, 189, 256, 0, 192, 0, 193, 194, 195, 0,
	257, 258, 259, 0, 0, 196, 260, 261, 0, 197,
	198, 199, 200, 83, 0, 201, 202, 203, 0, 204,
	0, 205, 206, 207, 262, 263, 0, 0, 208, 86,
	87, 0, 88, 209, 210, 211, 212, 213, 0, 0,
	0, 0, 89, 90, 91, 214, 215, 216, 217, 92,
	218, 219, 0, 93, 220, 221, 94, 0, 743, 222,
	223, 224, 0, 225, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 267, 106,
	226, 107, 227, 228, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 229, 113,
	114, 230, 231, 0, 0, 0, 115, 116, 232, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 233, 0,
	234, 0, 120, 121, 122, 123, 235, 236, 0, 0,
	127, 0, 124, 0, 0, 125, 237, 126, 238, 239,
	240, 0, 241, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 242, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 243, 139, 0, 140,
	141, 143, 142, 0, 0, 0, 244, 144, 245, 145,
	146, 0, 147, 0, 0, 148, 0, 0, 149, 246,
	0, 150, 0, 247, 151, 152, 153, 154, 0, 248,
	155, 249, 156, 0, 157, 158, 159, 250, 160, 161,
	0, 162, 163, 164, 165, 166, 168, 169, 167, 170,
	171, 0, 172, 0, 173, 174, 251, 175, 0, 176,
	177, 178, 179, 0, 252, 180, 181, 0, 182, 183,
	0, 184, 253, 254, 185, 0, 191, 186, 187, 188,
	190, 255, 189, 256, 0, 192, 0, 193, 194, 195,
	0, 257, 258, 259, 0, 0, 196, 260, 261, 0,
	197, 198, 199, 200, 83, 0, 201, 202, 203, 0,
	204, 0, 205, 206, 207, 262, 263, 0, 0, 208,
	86, 87, 0, 88, 209, 210, 211, 212, 213, 0,
	0, 0, 0, 89, 90, 91, 214, 215, 216, 217,
	92, 218, 219, 0, 93, 220, 221, 94, 1062, 0,
	222, 223, 224, 0, 225, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 267,
	106, 226, 107, 227, 228, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 229,
	113, 114, 230, 231, 0, 0, 0, 115, 116, 232,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 233,
	0, 234, 0, 120, 121, 122, 123, 235, 236, 0,
	0, 127, 0, 124, 0, 0, 125, 237, 126, 238,
	239, 240, 0, 241, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 242, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 243, 139, 0,
	140, 141, 143, 142, 0, 0, 0, 244, 144, 245,
	145, 146, 0, 147, 0, 0, 148, 0, 0, 149,
	246, 0, 150, 0, 247, 151, 152, 153, 154, 0,
	248, 155, 249, 156, 0, 157, 158, 159, 250, 160,
	161, 0, 162, 163, 164, 165, 166, 168, 169, 167,
	170, 171, 0, 172, 0, 173, 174, 251, 175, 0,
	176, 177, 178, 179, 0, 252, 180, 181, 0, 182,
	183, 0, 184, 253, 254, 185, 0, 191, 186, 187,
	188, 190, 255, 189, 256, 0, 192, 0, 193, 194,
	195, 0, 257, 258, 259, 0, 0, 196, 260, 261,
	0, 197, 198, 199, 200, 83, 0, 201, 202, 203,
	0, 204, 0, 205, 206, 207, 262, 263, 0, 0,
	208, 86, 87, 0, 88, 209, 210, 211, 212, 213,
	0, 0, 0, 0, 89, 90, 91, 214, 215, 216,
	217, 92, 218, 219, 0, 93, 220, 221, 94, 1659,
	0, 222, 223, 224, 0, 225, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	267, 106, 226, 107, 227, 228, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	229, 113, 114, 230, 231, 0, 0, 0, 115, 116,
	232, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	233, 0, 234, 0, 120, 121, 122, 123, 235, 236,
	0, 0, 127, 0, 124, 0, 0, 125, 237, 126,
	238, 239, 240, 0, 241, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 242, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 243, 139,
	0, 140, 141, 143, 142, 0, 0, 0, 244, 144,
	245, 145, 146, 0, 147, 0, 0, 148, 0, 0,
	149, 246, 0, 150, 0, 247, 151, 152, 153, 154,
	0, 248, 155, 249, 156, 0, 157, 158, 159, 250,
	160, 161, 0, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 0, 172, 0, 173, 174, 251, 175,
	0, 176, 177, 178, 179, 0, 252, 180, 181, 0,
	182, 183, 0, 184, 253, 254, 185, 0, 191, 186,
	187, 188, 190, 255, 189, 256, 0, 192, 0, 193,
	194, 195, 0, 257, 258, 259, 0, 0, 196, 260,
	261, 0, 197, 198, 199, 200, 0, 0, 201, 202,
	203, 0, 204, 0, 205, 206, 207, 262, 263, 0,
	0, 208, 0, 0, 0, 0, 209, 210, 211, 212,
	650, 639, 640, 637, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	712, 0, 0, 0, 213, 0, 0, 0, 0, 89,
	90, 91, 214, 681, 216, 682, 92, 683, 684, 0,
	93, 220, 221, 94, 0, 0, 685, 686, 224, 0,
	225, 0, 296, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 297, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 267, 106, 687, 107, 688,
	689, 0, 108, 0, 109, 0, 0, 0, 680, 111,
	0, 112, 0, 0, 0, 229, 113, 114, 230, 231,
	646, 0, 0, 115, 116, 690, 0, 117, 0, 118,
	0, 0, 298, 0, 119, 233, 0, 234, 0, 120,
	121, 122, 123, 235, 236, 300, 0, 127, 0, 124,
	0, 299, 125, 691, 126, 692, 693, 694, 0, 657,
	0, 301, 128, 302, 129, 130, 0, 132, 131, 0,
	242, 303, 133, 304, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 243, 139, 305, 140, 141, 143, 142,
	0, 0, 647, 244, 144, 695, 145, 146, 0, 147,
	0, 0, 148, 0, 0, 149, 246, 306, 150, 307,
	247, 151, 152, 153, 154, 0, 248, 155, 249, 156,
	0, 157, 158, 159, 696, 160, 161, 0, 162, 163,
	164, 165, 166, 168, 169, 167, 170, 171, 0, 172,
	308, 173, 174, 251, 175, 0, 176, 177, 178, 179,
	0, 252, 180, 181, 0, 182, 183, 309, 184, 697,
	254, 185, 0, 191, 186, 187, 188, 190, 698, 189,
	256, 0, 192, 0, 193, 194, 195, 0, 257, 699,
	700, 0, 0, 196, 260, 261, 645, 197, 198, 199,
	200, 83, 0, 201, 202, 203, 0, 204, 0, 205,
	206, 207, 262, 701, 0, 0, 208, 86, 87, 0,
	88, 209, 210, 211, 212, 213, 0, 0, 0, 0,
	89, 90, 91, 214, 215, 216, 217, 92, 218, 219,
	0, 93, 220, 221, 94, 0, 0, 222, 223, 224,
	0, 225, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 79, 106, 226, 107,
	227, 228, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 229, 113, 114, 230,
	231, 0, 0, 0, 115, 116, 232, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 233, 0, 234, 0,
	120, 121, 122, 123, 235, 236, 0, 0, 127, 0,
	124, 0, 0, 125, 237, 126, 238, 239, 240, 0,
	241, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 242, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 243, 139, 0, 140, 141, 143,
	142, 0, 0, 0, 244, 144, 245, 145, 146, 0,
	147, 0, 0, 148, 0, 0, 149, 246, 0, 150,
	0, 247, 151, 152, 153, 154, 0, 248, 155, 249,
	156, 0, 157, 158, 159, 250, 160, 161, 0, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 0,
	172, 0, 173, 174, 251, 175, 0, 176, 177, 178,
	179, 0, 252, 180, 181, 0, 182, 183, 0, 184,
	253, 254, 185, 0, 191, 186, 187, 188, 190, 255,
	189, 256, 0, 192, 78, 193, 194, 195, 0, 257,
	258, 259, 0, 0, 196, 260, 261, 0, 197, 198,
	199, 200, 0, 0, 201, 202, 203, 0, 204, 0,
	205, 206, 207, 262, 263, 0, 0, 208, 526, 735,
	0, 0, 209, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 82,
	0, 0, 213, 0, 0, 0, 0, 89, 90, 91,
	214, 215, 216, 217, 92, 218, 219, 0, 93, 220,
	221, 94, 0, 0, 222, 223, 224, 0, 225, 0,
	296, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 297, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 267, 106, 226, 107, 227, 228, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 229, 113, 114, 230, 231, 0, 0,
	0, 115, 116, 232, 0, 117, 0, 118, 0, 0,
	298, 0, 119, 233, 0, 234, 0, 120, 121, 122,
	123, 235, 236, 300, 0, 127, 0, 124, 0, 299,
	125, 237, 126, 238, 239, 240, 0, 241, 0, 301,
	128, 302, 129, 130, 0, 132, 131, 0, 242, 303,
	133, 304, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 243, 139, 305, 140, 141, 143, 142, 0, 0,
	0, 244, 144, 245, 145, 146, 0, 147, 0, 0,
	148, 0, 0, 149, 246, 306, 150, 307, 247, 151,
	152, 153, 154, 0, 248, 155, 249, 156, 0, 157,
	158, 159, 250, 160, 161, 0, 162, 163, 164, 165,
	166, 168, 169, 167, 170, 171, 0, 172, 308, 173,
	174, 251, 175, 0, 176, 177, 178, 179, 0, 252,
	180, 181, 0, 182, 183, 309, 184, 253, 254, 185,
	0, 191, 186, 187, 188, 190, 255, 189, 256, 0,
	192, 0, 193, 194, 195, 0, 257, 258, 259, 0,
	0, 196, 260, 261, 0, 197, 198, 199, 200, 83,
	0, 201, 202, 203, 0, 204, 0, 205, 206, 207,
	262, 263, 0, 0, 208, 86, 87, 0, 88, 209,
	210, 211, 212, 213, 0, 0, 0, 0, 89, 90,
	91, 214, 215, 216, 217, 92, 218, 219, 0, 93,
	220, 221, 94, 0, 0, 222, 223, 224, 0, 225,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 267, 106, 226, 107, 227, 228,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 229, 113, 114, 230, 231, 0,
	0, 0, 115, 116, 232, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 233, 0, 234, 0, 120, 121,
	122, 123, 235, 236, 0, 0, 127, 0, 124, 0,
	0, 125, 237, 126, 238, 239, 240, 0, 241, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 242,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 243, 139, 0, 140, 141, 143, 142, 0,
	0, 0, 244, 144, 245, 145, 146, 0, 147, 0,
	0, 148, 0, 0, 149, 246, 0, 150, 0, 247,
	151, 152, 153, 154, 0, 248, 155, 249, 156, 0,
	157, 158, 159, 250, 160, 161, 0, 162, 163, 164,
	165, 166, 168, 169, 167, 170, 171, 0, 172, 0,
	173, 174, 251, 175, 0, 176, 177, 178, 179, 0,
	252, 180, 181, 0, 182, 183, 0, 184, 253, 254,
	185, 0, 191, 186, 187, 188, 190, 255, 189, 256,
	0, 192, 0, 193, 194, 195, 0, 257, 258, 259,
	0, 0, 196, 260, 261, 0, 197, 198, 199, 200,
	0, 0, 201, 202, 203, 0, 204, 0, 205, 206,
	207, 262, 263, 0, 526, 208, 0, 0, 0, 0,
	209, 210, 211, 212, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 82, 213, 0,
	0, 0, 0, 89, 90, 91, 214, 215, 216, 217,
	92, 218, 219, 0, 93, 220, 221, 94, 0, 0,
	222, 223, 224, 0, 225, 0, 296, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 297, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 267,
	106, 226, 107, 227, 228, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 229,
	113, 114, 230, 231, 0, 0, 0, 115, 116, 232,
	0, 117, 0, 118, 0, 0, 298, 0, 119, 233,
	0, 234, 0, 120, 121, 122, 123, 235, 236, 300,
	0, 127, 0, 124, 0, 299, 125, 237, 126, 238,
	239, 240, 0, 241, 0, 301, 128, 302, 129, 130,
	0, 132, 131, 0, 242, 303, 133, 304, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 243, 139, 305,
	140, 141, 143, 142, 0, 0, 0, 244, 144, 245,
	145, 146, 0, 147, 0, 0, 148, 0, 0, 149,
	246, 306, 150, 307, 247, 151, 152, 153, 154, 0,
	248, 155, 249, 156, 0, 157, 158, 159, 250, 160,
	161, 0, 162, 163, 164, 165, 166, 168, 169, 167,
	170, 171, 0, 172, 308, 173, 174, 251, 175, 0,
	176, 177, 178, 179, 0, 252, 180, 181, 0, 182,
	183, 309, 184, 253, 254, 185, 0, 191, 186, 187,
	188, 190, 255, 189, 256, 0, 192, 0, 193, 194,
	195, 0, 257, 258, 259, 0, 0, 196, 260, 261,
	0, 197, 198, 199, 200, 83, 0, 201, 202, 203,
	0, 204, 0, 205, 206, 207, 262, 263, 0, 0,
	208, 86, 87, 0, 88, 209, 210, 211, 212, 213,
	0, 0, 0, 0, 89, 90, 91, 214, 215, 216,
	217, 92, 218, 219, 0, 93, 220, 221, 94, 0,
	0, 222, 223, 224, 1023, 225, 0, 0, 0, 95,
	96, 97, 0, 98, 1021, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	267, 106, 226, 107, 227, 228, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	229, 113, 114, 230, 231, 0, 1125, 0, 115, 116,
	232, 0, 117, 0, 118, 1026, 0, 0, 0, 119,
	233, 0, 234, 0, 120, 121, 122, 123, 235, 236,
	0, 0, 127, 1123, 124, 0, 0, 125, 237, 126,
	238, 239, 240, 0, 241, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 242, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 243, 139,
	0, 140, 141, 143, 142, 0, 0, 0, 244, 144,
	245, 145, 146, 0, 147, 0, 0, 148, 0, 0,
	149, 246, 0, 150, 0, 247, 151, 152, 153, 154,
	0, 248, 155, 249, 156, 1025, 157, 158, 159, 250,
	160, 161, 0, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 0, 172, 0, 173, 174, 251, 175,
	0, 176, 177, 178, 179, 0, 252, 180, 181, 0,
	182, 183, 0, 184, 253, 254, 185, 0, 191, 186,
	187, 188, 190, 255, 189, 256, 0, 192, 0, 193,
	194, 195, 0, 257, 258, 259, 0, 0, 196, 260,
	261, 0, 197, 198, 199, 200, 83, 1124, 201, 202,
	203, 0, 204, 0, 205, 206, 207, 262, 263, 0,
	0, 208, 86, 87, 0, 88, 209, 210, 211, 212,
	213, 0, 0, 0, 0, 89, 90, 91, 214, 215,
	216, 217, 92, 218, 219, 0, 93, 220, 221, 94,
	0, 0, 222, 223, 224, 1023, 225, 0, 0, 1018,
	95, 96, 97, 0, 98, 1021, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 267, 106, 226, 107, 227, 228, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 229, 113, 114, 230, 231, 0, 0, 0, 115,
	116, 232, 0, 117, 0, 118, 1026, 0, 0, 0,
	119, 233, 0, 234, 0, 120, 121, 122, 123, 1017,
	236, 0, 0, 127, 0, 124, 0, 0, 125, 237,
	126, 238, 239, 240, 0, 241, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 242, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 243,
	139, 0, 140, 141, 143, 142, 0, 0, 0, 244,
	144, 245, 145, 146, 0, 147, 0, 0, 148, 0,
	0, 149, 246, 0, 150, 0, 247, 151, 152, 153,
	154, 0, 248, 155, 249, 156, 1025, 157, 158, 159,
	250, 160, 161, 0, 162, 163, 164, 165, 166, 168,
	169, 167, 170, 171, 0, 172, 0, 173, 174, 251,
	175, 0, 176, 177, 178, 179, 0, 252, 180, 181,
	0, 182, 183, 0, 184, 253, 254, 185, 0, 191,
	186, 187, 188, 190, 255, 189, 256, 0, 192, 0,
	193, 194, 195, 0, 257, 258, 259, 0, 0, 196,
	260, 261, 0, 197, 198, 199, 200, 83, 1024, 201,
	202, 203, 0, 204, 0, 205, 206, 207, 262, 263,
	0, 0, 208, 86, 87, 0, 88, 209, 210, 211,
	212, 213, 0, 1626, 0, 0, 89, 90, 91, 214,
	215, 216, 217, 92, 218, 219, 0, 93, 220, 221,
	94, 0, 0, 222, 223, 224, 0, 225, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 267, 106, 226, 107, 227, 228, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 229, 113, 114, 230, 231, 0, 0, 0,
	115, 116, 232, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 233, 0, 234, 0, 120, 121, 122, 123,
	235, 236, 0, 0, 127, 0, 124, 0, 0, 125,
	237, 126, 238, 239, 240, 0, 241, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 242, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	243, 139, 0, 140, 141, 143, 142, 0, 0, 0,
	244, 144, 245, 145, 146, 0, 147, 0, 0, 148,
	0, 0, 149, 246, 0, 150, 0, 247, 151, 152,
	153, 154, 0, 248, 155, 249, 156, 0, 157, 158,
	159, 250, 160, 161, 0, 162, 163, 164, 165, 166,
	168, 169, 167, 170, 171, 0, 172, 0, 173, 174,
	251, 175, 0, 176, 177, 178, 179, 0, 252, 180,
	181, 0, 182, 183, 0, 184, 253, 254, 185, 0,
	191, 186, 187, 188, 190, 255, 189, 256, 0, 192,
	0, 193, 194, 195, 0, 257, 258, 259, 0, 0,
	196, 260, 261, 0, 197, 198, 199, 200, 83, 0,
	201, 202, 203, 0, 204, 0, 205, 206, 207, 262,
	263, 0, 0, 208, 86, 87, 0, 88, 209, 210,
	211, 212, 213, 0, 0, 0, 0, 89, 90, 91,
	214, 215, 216, 217, 92, 218, 219, 0, 93, 220,
	221, 94, 0, 0, 222, 223, 224, 0, 225, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 267, 106, 226, 107, 227, 228, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 229, 113, 114, 230, 231, 0, 0,
	0, 115, 116, 232, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 233, 0, 234, 0, 120, 121, 122,
	123, 235, 236, 0, 0, 127, 0, 124, 0, 0,
	125, 237, 126, 238, 239, 240, 0, 241, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 242, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 243, 139, 0, 140, 141, 143, 142, 0, 0,
	0, 244, 144, 245, 145, 146, 0, 147, 0, 480,
	148, 0, 0, 149, 246, 0, 150, 0, 247, 151,
	152, 153, 154, 0, 248, 155, 249, 156, 0, 157,
	158, 159, 250, 160, 161, 0, 162, 163, 164, 165,
	166, 168, 169, 167, 170, 171, 0, 172, 0, 173,
	174, 251, 175, 0, 176, 177, 178, 179, 0, 252,
	180, 181, 0, 182, 183, 0, 184, 253, 254, 185,
	0, 191, 186, 187, 188, 190, 255, 189, 256, 0,
	192, 0, 193, 194, 195, 0, 257, 258, 259, 0,
	0, 196, 260, 261, 0, 197, 198, 199, 200, 83,
	0, 201, 202, 203, 0, 204, 0, 205, 206, 207,
	262, 263, 0, 0, 208, 86, 87, 0, 88, 209,
	210, 211, 212, 213, 0, 0, 0, 0, 89, 90,
	91, 214, 215, 216, 217, 92, 218, 219, 0, 93,
	220, 221, 94, 0, 0, 222, 223, 224, 0, 225,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 267, 106, 226, 107, 227, 228,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 229, 113, 114, 230, 231, 0,
	0, 0, 115, 116, 232, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 233, 0, 234, 0, 120, 121,
	122, 123, 768, 236, 0, 0, 127, 0, 124, 0,
	0, 125, 237, 126, 238, 239, 240, 0, 241, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 242,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 243, 139, 0, 140, 141, 143, 142, 0,
	0, 0, 244, 144, 245, 145, 146, 0, 147, 0,
	480, 148, 0, 0, 149, 246, 0, 150, 0, 247,
	151, 152, 153, 154, 0, 248, 155, 249, 156, 0,
	157, 158, 159, 250, 160, 161, 0, 162, 163, 164,
	165, 166, 168, 169, 167, 170, 171, 0, 172, 0,
	173, 174, 251, 175, 0, 176, 177, 178, 179, 0,
	252, 180, 181, 0, 182, 183, 0, 184, 253, 254,
	185, 0, 191, 186, 187, 188, 190, 255, 189, 256,
	0, 192, 0, 193, 194, 195, 0, 257, 258, 259,
	0, 0, 196, 260, 261, 0, 197, 198, 199, 200,
	83, 0, 201, 202, 203, 0, 204, 0, 205, 206,
	207, 262, 263, 0, 0, 208, 86, 87, 538, 88,
	209, 210, 211, 212, 213, 0, 0, 0, 0, 89,
	90, 91, 214, 215, 216, 217, 92, 218, 219, 0,
	93, 220, 221, 94, 0, 0, 222, 223, 224, 0,
	225, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 267, 106, 226, 107, 227,
	228, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 229, 113, 114, 230, 231,
	0, 0, 0, 115, 116, 232, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 233, 0, 234, 0, 120,
	121, 122, 123, 235, 236, 0, 0, 127, 0, 124,
	0, 0, 125, 237, 126, 238, 239, 240, 0, 241,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	242, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 243, 139, 0, 140, 141, 143, 142,
	0, 0, 0, 244, 144, 245, 145, 146, 0, 147,
	0, 0, 148, 0, 0, 149, 246, 0, 150, 0,
	247, 151, 152, 153, 154, 0, 248, 155, 249, 156,
	0, 157, 158, 159, 250, 160, 161, 0, 162, 163,
	164, 165, 166, 168, 169, 167, 170, 171, 0, 172,
	0, 173, 174, 251, 175, 0, 176, 177, 178, 179,
	0, 252, 180, 181, 0, 182, 183, 0, 184, 253,
	254, 185, 0, 191, 186, 187, 188, 190, 255, 189,
	256, 0, 192, 0, 193, 194, 195, 0, 257, 258,
	259, 0, 0, 196, 260, 261, 0, 197, 198, 199,
	200, 83, 0, 201, 202, 203, 0, 204, 0, 205,
	206, 207, 262, 263, 0, 0, 208, 86, 87, 0,
	88, 209, 210, 211, 212, 213, 0, 0, 0, 0,
	89, 90, 91, 214, 215, 216, 217, 92, 218, 219,
	0, 93, 220, 221, 94, 0, 0, 222, 223, 224,
	0, 225, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 226, 107,
	227, 228, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 229, 113, 114, 230,
	231, 0, 0, 0, 115, 116, 232, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 233, 0, 234, 0,
	120, 121, 122, 123, 492, 236, 0, 0, 127, 0,
	124, 0, 0, 125, 237, 126, 238, 239, 240, 0,
	241, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 242, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 243, 139, 0, 140, 141, 143,
	142, 0, 0, 0, 244, 144, 245, 145, 146, 0,
	147, 0, 480, 148, 0, 0, 149, 246, 0, 150,
	0, 247, 151, 152, 153, 154, 0, 248, 155, 249,
	156, 0, 157, 158, 159, 250, 160, 161, 0, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 0,
	172, 0, 173, 174, 251, 175, 0, 176, 177, 178,
	179, 0, 252, 180, 181, 0, 182, 183, 0, 184,
	253, 254, 185, 0, 191, 186, 187, 188, 190, 255,
	189, 256, 0, 192, 0, 193, 194, 195, 0, 257,
	258, 259, 0, 0, 196, 260, 261, 0, 197, 198,
	199, 200, 83, 0, 201, 202, 203, 0, 204, 0,
	205, 206, 207, 262, 263, 0, 0, 208, 86, 87,
	0, 88, 209, 210, 211, 212, 213, 0, 0, 0,
	0, 89, 90, 91, 214, 215, 216, 217, 92, 218,
	219, 0, 93, 220, 221, 94, 0, 0, 222, 223,
	224, 0, 225, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 267, 106, 226,
	107, 227, 228, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 229, 113, 114,
	230, 231, 0, 0, 0, 115, 116, 232, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 233, 0, 234,
	0, 120, 121, 122, 123, 485, 236, 0, 0, 127,
	0, 124, 0, 0, 125, 237, 126, 238, 239, 240,
	0, 241, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 242, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 243, 139, 0, 140, 141,
	143, 142, 0, 0, 0, 244, 144, 245, 145, 146,
	0, 147, 0, 480, 148, 0, 0, 149, 246, 0,
	150, 0, 247, 151, 152, 153, 154, 0, 248, 155,
	249, 156, 0, 157, 158, 159, 250, 160, 161, 0,
	162, 163, 164, 165, 166, 168, 169, 167, 170, 171,
	0, 172, 0, 173, 174, 251, 175, 0, 176, 177,
	178, 179, 0, 252, 180, 181, 0, 182, 183, 0,
	184, 253, 254, 185, 0, 191, 186, 187, 188, 190,
	255, 189, 256, 0, 192, 0, 193, 194, 195, 0,
	257, 258, 259, 0, 0, 196, 260, 261, 0, 197,
	198, 199, 200, 83, 0, 201, 202, 203, 0, 204,
	0, 205, 206, 207, 262, 263, 0, 0, 208, 86,
	87, 395, 88, 209, 210, 211, 212, 213, 0, 0,
	0, 0, 89, 90, 91, 214, 215, 216, 217, 92,
	218, 219, 0, 93, 220, 221, 94, 0, 0, 222,
	223, 224, 0, 225, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 267, 106,
	226, 107, 227, 228, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 229, 113,
	114, 230, 231, 0, 0, 0, 115, 116, 232, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 233, 0,
	234, 0, 120, 121, 122, 123, 235, 236, 0, 0,
	127, 0, 124, 0, 0, 125, 237, 126, 238, 239,
	240, 0, 241, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 242, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 243, 139, 0, 140,
	141, 143, 142, 0, 0, 0, 244, 144, 245, 145,
	146, 0, 147, 0, 0, 148, 0, 0, 149, 246,
	0, 150, 0, 247, 151, 152, 153, 154, 0, 248,
	155, 249, 394, 0, 157, 158, 159, 250, 160, 161,
	0, 162, 163, 164, 165, 166, 168, 169, 167, 170,
	171, 0, 172, 0, 173, 174, 251, 175, 0, 176,
	177, 178, 179, 0, 252, 180, 181, 0, 182, 183,
	0, 184, 253, 254, 185, 0, 191, 186, 187, 188,
	190, 255, 189, 256, 0, 192, 0, 193, 194, 195,
	0, 257, 258, 259, 0, 0, 196, 260, 261, 0,
	197, 198, 199, 200, 83, 0, 201, 202, 203, 0,
	204, 0, 205, 206, 207, 262, 263, 0, 0, 208,
	86, 87, 0, 88, 209, 210, 211, 212, 213, 0,
	0, 0, 0, 89, 90, 91, 214, 215, 216, 217,
	92, 218, 219, 0, 93, 220, 221, 94, 0, 0,
	222, 223, 224, 0, 225, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 267,
	106, 226, 107, 227, 228, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 229,
	113, 114, 230, 231, 0, 0, 0, 115, 116, 232,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 233,
	0, 234, 0, 120, 121, 122, 123, 235, 236, 0,
	0, 127, 0, 124, 0, 0, 125, 237, 126, 238,
	239, 240, 0, 241, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 242, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 243, 139, 0,
	140, 141, 143, 142, 0, 0, 0, 244, 144, 245,
	145, 146, 0, 147, 0, 0, 148, 0, 0, 149,
	246, 0, 150, 0, 247, 151, 152, 153, 154, 0,
	248, 155, 249, 156, 0, 157, 158, 159, 250, 160,
	161, 0, 162, 163, 164, 165, 166, 168, 169, 167,
	170, 171, 0, 172, 0, 173, 174, 251, 175, 0,
	176, 177, 178, 179, 0, 252, 180, 181, 0, 182,
	183, 0, 184, 253, 254, 185, 0, 191, 186, 187,
	188, 190, 255, 189, 256, 0, 192, 0, 193, 194,
	195, 0, 257, 258, 259, 0, 0, 196, 260, 261,
	0, 197, 198, 199, 200, 83, 0, 201, 202, 203,
	0, 204, 0, 205, 206, 207, 262, 263, 0, 0,
	208, 86, 87, 0, 88, 209, 210, 211, 212, 213,
	0, 0, 0, 0, 89, 90, 91, 214, 215, 216,
	217, 92, 218, 219, 0, 93, 220, 221, 94, 0,
	0, 222, 223, 224, 0, 225, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	267, 106, 226, 107, 227, 228, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	229, 113, 114, 230, 231, 0, 0, 0, 115, 116,
	232, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	233, 0, 234, 0, 120, 121, 122, 123, 1317, 236,
	0, 0, 127, 0, 124, 0, 0, 125, 237, 126,
	238, 239, 240, 0, 241, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 242, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 243, 139,
	0, 140, 141, 143, 142, 0, 0, 0, 244, 144,
	245, 145, 146, 0, 147, 0, 0, 148, 0, 0,
	149, 246, 0, 150, 0, 247, 151, 152, 153, 154,
	0, 248, 155, 249, 156, 0, 157, 158, 159, 250,
	160, 161, 0, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 0, 172, 0, 173, 174, 251, 175,
	0, 176, 177, 178, 179, 0, 252, 180, 181, 0,
	182, 183, 0, 184, 253, 254, 185, 0, 191, 186,
	187, 188, 190, 255, 189, 256, 0, 192, 0, 193,
	194, 195, 0, 257, 258, 259, 0, 0, 196, 260,
	261, 0, 197, 198, 199, 200, 83, 0, 201, 202,
	203, 0, 204, 0, 205, 206, 207, 262, 263, 0,
	0, 208, 86, 87, 0, 88, 209, 210, 211, 212,
	213, 0, 0, 0, 0, 89, 90, 91, 214, 215,
	216, 217, 92, 218, 219, 0, 93, 220, 221, 94,
	0, 0, 222, 223, 224, 0, 225, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 267, 106, 226, 107, 227, 228, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 229, 113, 114, 230, 231, 0, 0, 0, 115,
	116, 232, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 233, 0, 234, 0, 120, 121, 122, 123, 1315,
	236, 0, 0, 127, 0, 124, 0, 0, 125, 237,
	126, 238, 239, 240, 0, 241, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 242, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 243,
	139, 0, 140, 141, 143, 142, 0, 0, 0, 244,
	144, 245, 145, 146, 0, 147, 0, 0, 148, 0,
	0, 149, 246, 0, 150, 0, 247, 151, 152, 153,
	154, 0, 248, 155, 249, 156, 0, 157, 158, 159,
	250, 160, 161, 0, 162, 163, 164, 165, 166, 168,
	169, 167, 170, 171, 0, 172, 0, 173, 174, 251,
	175, 0, 176, 177, 178, 179, 0, 252, 180, 181,
	0, 182, 183, 0, 184, 253, 254, 185, 0, 191,
	186, 187, 188, 190, 255, 189, 256, 0, 192, 0,
	193, 194, 195, 0, 257, 258, 259, 0, 0, 196,
	260, 261, 0, 197, 198, 199, 200, 83, 0, 201,
	202, 203, 0, 204, 0, 205, 206, 207, 262, 263,
	0, 0, 208, 86, 87, 0, 88, 209, 210, 211,
	212, 213, 0, 0, 0, 0, 89, 90, 91, 214,
	215, 216, 217, 92, 218, 219, 0, 93, 220, 221,
	94, 0, 0, 222, 223, 224, 0, 225, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 267, 106, 226, 107, 227, 228, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 229, 113, 114, 230, 231, 0, 0, 0,
	115, 116, 232, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 233, 0, 234, 0, 120, 121, 122, 123,
	1304, 236, 0, 0, 127, 0, 124, 0, 0, 125,
	237, 126, 238, 239, 240, 0, 241, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 242, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	243, 139, 0, 140, 141, 143, 142, 0, 0, 0,
	244, 144, 245, 145, 146, 0, 147, 0, 0, 148,
	0, 0, 149, 246, 0, 150, 0, 247, 151, 152,
	153, 154, 0, 248, 155, 249, 156, 0, 157, 158,
	159, 250, 160, 161, 0, 162, 163, 164, 165, 166,
	168, 169, 167, 170, 171, 0, 172, 0, 173, 174,
	251, 175, 0, 176, 177, 178, 179, 0, 252, 180,
	181, 0, 182, 183, 0, 184, 253, 254, 185, 0,
	191, 186, 187, 188, 190, 255, 189, 256, 0, 192,
	0, 193, 194, 195, 0, 257, 258, 259, 0, 0,
	196, 260, 261, 0, 197, 198, 199, 200, 83, 0,
	201, 202, 203, 0, 204, 0, 205, 206, 207, 262,
	263, 0, 0, 208, 86, 87, 0, 88, 209, 210,
	211, 212, 213, 0, 0, 0, 0, 89, 90, 91,
	214, 215, 216, 217, 92, 218, 219, 0, 93, 220,
	221, 94, 0, 0, 222, 223, 224, 0, 225, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 267, 106, 226, 107, 227, 228, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 229, 113, 114, 230, 231, 0, 0,
	0, 115, 116, 232, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 233, 0, 234, 0, 120, 121, 122,
	123, 884, 236, 0, 0, 127, 0, 124, 0, 0,
	125, 237, 126, 238, 239, 240, 0, 241, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 242, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 243, 139, 0, 140, 141, 143, 142, 0, 0,
	0, 244, 144, 245, 145, 146, 0, 147, 0, 0,
	148, 0, 0, 149, 246, 0, 150, 0, 247, 151,
	152, 153, 154, 0, 248, 155, 249, 156, 0, 157,
	158, 159, 250, 160, 161, 0, 162, 163, 164, 165,
	166, 168, 169, 167, 170, 171, 0, 172, 0, 173,
	174, 251, 175, 0, 176, 177, 178, 179, 0, 252,
	180, 181, 0, 182, 183, 0, 184, 253, 254, 185,
	0, 191, 186, 187, 188, 190, 255, 189, 256, 0,
	192, 0, 193, 194, 195, 0, 257, 258, 259, 0,
	0, 196, 260, 261, 0, 197, 198, 199, 200, 83,
	0, 201, 202, 203, 0, 204, 0, 205, 206, 207,
	262, 263, 0, 0, 208, 86, 87, 0, 88, 209,
	210, 211, 212, 213, 0, 0, 0, 0, 89, 90,
	91, 214, 215, 216, 217, 92, 218, 219, 0, 93,
	220, 221, 94, 0, 0, 222, 223, 224, 0, 225,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 267, 106, 226, 107, 227, 228,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 229, 113, 114, 230, 231, 0,
	0, 0, 115, 116, 232, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 233, 0, 234, 0, 120, 121,
	122, 123, 235, 236, 0, 0, 127, 0, 124, 0,
	0, 125, 237, 126, 238, 239, 240, 0, 241, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 242,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 243, 139, 0, 140, 141, 143, 142, 0,
	0, 0, 244, 144, 245, 145, 146, 0, 147, 0,
	0, 148, 0, 0, 149, 246, 0, 150, 0, 247,
	151, 152, 153, 154, 0, 248, 155, 249, 156, 0,
	157, 158, 159, 250, 160, 161, 0, 162, 163, 164,
	165, 166, 168, 169, 167, 170, 171, 0, 172, 0,
	173, 174, 251, 175, 0, 176, 409, 178, 179, 0,
	252, 180, 181, 0, 182, 183, 0, 184, 253, 254,
	185, 0, 191, 186, 187, 188, 190, 255, 189, 256,
	0, 192, 0, 193, 194, 195, 0, 257, 258, 259,
	0, 0, 196, 260, 261, 0, 197, 198, 199, 200,
	83, 0, 201, 202, 203, 0, 204, 0, 205, 206,
	207, 262, 263, 0, 0, 208, 86, 87, 0, 88,
	209, 210, 211, 212, 213, 0, 753, 0, 0, 89,
	90, 91, 214, 215, 216, 217, 92, 218, 219, 0,
	93, 220, 221, 94, 0, 0, 222, 223, 224, 0,
	225, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 267, 106, 226, 107, 227,
	228, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 229, 113, 114, 230, 231,
	0, 0, 0, 115, 116, 232, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 233, 0, 234, 0, 120,
	121, 122, 123, 235, 236, 0, 0, 127, 0, 124,
	0, 0, 125, 237, 126, 238, 239, 240, 0, 241,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	242, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 243, 139, 0, 140, 141, 143, 142,
	0, 0, 0, 244, 144, 245, 145, 146, 0, 147,
	0, 0, 148, 0, 0, 149, 246, 0, 150, 0,
	247, 151, 152, 153, 154, 0, 248, 155, 249, 156,
	0, 157, 158, 159, 250, 160, 161, 0, 162, 163,
	164, 165, 166, 168, 169, 167, 170, 171, 0, 172,
	0, 173, 174, 251, 175, 0, 176, 177, 178, 179,
	0, 252, 180, 181, 0, 0, 183, 0, 184, 253,
	254, 185, 0, 191, 186, 187, 188, 190, 255, 189,
	256, 0, 192, 0, 193, 194, 195, 0, 257, 258,
	259, 0, 0, 196, 260, 261, 0, 197, 198, 199,
	200, 83, 0, 201, 202, 203, 0, 204, 0, 205,
	206, 207, 262, 263, 0, 0, 208, 86, 87, 0,
	88, 209, 210, 211, 212, 213, 0, 0, 0, 0,
	89, 90, 91, 214, 215, 216, 217, 92, 218, 219,
	0, 93, 220, 221, 94, 0, 0, 222, 223, 224,
	0, 225, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 226, 107,
	227, 228, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 229, 113, 114, 230,
	231, 0, 0, 0, 115, 116, 232, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 233, 0, 234, 0,
	120, 121, 122, 123, 590, 236, 0, 0, 127, 0,
	124, 0, 0, 125, 237, 126, 238, 239, 240, 0,
	241, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 242, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 243, 139, 0, 140, 141, 143,
	142, 0, 0, 0, 244, 144, 245, 145, 146, 0,
	147, 0, 0, 148, 0, 0, 149, 246, 0, 150,
	0, 247, 151, 152, 153, 154, 0, 248, 155, 249,
	156, 0, 157, 158, 159, 250, 160, 161, 0, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 0,
	172, 0, 173, 174, 251, 175, 0, 176, 177, 178,
	179, 0, 252, 180, 181, 0, 182, 183, 0, 184,
	253, 254, 185, 0, 191, 186, 187, 188, 190, 255,
	189, 256, 0, 192, 0, 193, 194, 195, 0, 257,
	258, 259, 0, 0, 196, 260, 261, 0, 197, 198,
	199, 200, 83, 0, 201, 202, 203, 0, 204, 0,
	205, 206, 207, 262, 263, 0, 0, 208, 86, 87,
	0, 88, 209, 210, 211, 212, 213, 0, 0, 0,
	0, 89, 90, 91, 214, 215, 216, 217, 92, 218,
	219, 0, 93, 220, 221, 94, 0, 0, 222, 223,
	224, 0, 225, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 267, 106, 226,
	107, 227, 228, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 229, 113, 114,
	230, 231, 0, 0, 0, 115, 116, 232, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 233, 0, 234,
	0, 120, 121, 122, 123, 585, 236, 0, 0, 127,
	0, 124, 0, 0, 125, 237, 126, 238, 239, 240,
	0, 241, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 242, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 243, 139, 0, 140, 141,
	143, 142, 0, 0, 0, 244, 144, 245, 145, 146,
	0, 147, 0, 0, 148, 0, 0, 149, 246, 0,
	150, 0, 247, 151, 152, 153, 154, 0, 248, 155,
	249, 156, 0, 157, 158, 159, 250, 160, 161, 0,
	162, 163, 164, 165, 166, 168, 169, 167, 170, 171,
	0, 172, 0, 173, 174, 251, 175, 0, 176, 177,
	178, 179, 0, 252, 180, 181, 0, 182, 183, 0,
	184, 253, 254, 185, 0, 191, 186, 187, 188, 190,
	255, 189, 256, 0, 192, 0, 193, 194, 195, 0,
	257, 258, 259, 0, 0, 196, 260, 261, 0, 197,
	198, 199, 200, 83, 0, 201, 202, 203, 0, 204,
	0, 205, 206, 207, 262, 263, 0, 0, 208, 86,
	87, 0, 88, 209, 210, 211, 212, 213, 0, 0,
	0, 0, 89, 90, 91, 214, 215, 216, 217, 92,
	218, 219, 0, 93, 220, 221, 94, 0, 0, 222,
	223, 544, 0, 225, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 267, 106,
	226, 107, 227, 228, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 229, 113,
	114, 230, 231, 0, 0, 0, 115, 116, 232, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 233, 0,
	234, 0, 120, 121, 122, 123, 235, 236, 0, 0,
	127, 0, 124, 0, 0, 125, 237, 126, 238, 239,
	240, 0, 241, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 242, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 243, 420, 0, 140,
	141, 143, 142, 0, 0, 0, 244, 144, 245, 145,
	146, 0, 147, 0, 0, 148, 0, 0, 149, 246,
	0, 150, 0, 247, 151, 152, 153, 154, 0, 248,
	155, 249, 156, 0, 157, 158, 159, 250, 160, 161,
	0, 162, 163, 164, 165, 166, 168, 169, 167, 170,
	171, 0, 172, 0, 173, 174, 251, 175, 0, 176,
	177, 178, 179, 0, 252, 180, 181, 0, 182, 183,
	0, 184, 253, 254, 185, 0, 191, 186, 187, 188,
	190, 255, 189, 256, 0, 192, 0, 193, 194, 195,
	0, 419, 258, 259, 0, 0, 415, 260, 261, 0,
	197, 198, 199, 200, 83, 0, 201, 202, 203, 0,
	204, 0, 205, 206, 207, 262, 263, 0, 0, 208,
	86, 87, 0, 88, 209, 210, 211, 212, 213, 0,
	0, 0, 0, 89, 90, 91, 214, 215, 216, 217,
	92, 218, 219, 0, 93, 220, 221, 94, 0, 0,
	222, 223, 224, 0, 225, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 267,
	106, 226, 107, 227, 228, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 229,
	113, 114, 230, 231, 0, 0, 0, 115, 116, 232,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 233,
	0, 234, 0, 120, 121, 122, 123, 235, 236, 0,
	0, 127, 0, 124, 0, 0, 125, 237, 126, 238,
	239, 240, 0, 241, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 242, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 243, 420, 0,
	140, 141, 143, 142, 0, 0, 0, 244, 144, 245,
	145, 146, 0, 147, 0, 0, 148, 0, 0, 149,
	246, 0, 150, 0, 247, 151, 152, 153, 154, 0,
	248, 155, 249, 156, 0, 157, 158, 159, 250, 160,
	161, 0, 162, 163, 164, 165, 166, 168, 169, 167,
	170, 171, 0, 172, 0, 173, 174, 251, 175, 0,
	176, 177, 178, 179, 0, 252, 180, 181, 0, 182,
	183, 0, 184, 253, 254, 185, 0, 191, 186, 187,
	188, 190, 255, 189, 256, 0, 192, 0, 193, 194,
	195, 0, 419, 258, 259, 0, 0, 415, 260, 261,
	0, 197, 198, 199, 200, 83, 0, 201, 202, 203,
	0, 204, 0, 205, 206, 207, 262, 263, 0, 0,
	208, 86, 87, 0, 88, 209, 210, 211, 212, 213,
	0, 0, 0, 0, 89, 90, 91, 214, 215, 216,
	217, 92, 218, 219, 0, 93, 220, 221, 94, 0,
	0, 222, 223, 224, 0, 225, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	267, 106, 226, 107, 227, 228, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	229, 113, 114, 230, 231, 0, 0, 0, 115, 116,
	232, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	233, 0, 234, 0, 120, 121, 122, 123, 522, 236,
	0, 0, 127, 0, 124, 0, 0, 125, 237, 126,
	238, 239, 240, 0, 241, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 242, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 243, 139,
	0, 140, 141, 143, 142, 0, 0, 0, 244, 144,
	245, 145, 146, 0, 147, 0, 0, 148, 0, 0,
	149, 246, 0, 150, 0, 247, 151, 152, 153, 154,
	0, 248, 155, 249, 156, 0, 157, 158, 159, 250,
	160, 161, 0, 162, 163, 164, 165, 166, 168, 169,
	167, 170, 171, 0, 172, 0, 173, 174, 251, 175,
	0, 176, 177, 178, 179, 0, 252, 180, 181, 0,
	182, 183, 0, 184, 253, 254, 185, 0, 191, 186,
	187, 188, 190, 255, 189, 256, 0, 192, 0, 193,
	194, 195, 0, 257, 258, 259, 0, 0, 196, 260,
	261, 0, 197, 198, 199, 200, 83, 0, 201, 202,
	203, 0, 204, 0, 205, 206, 207, 262, 263, 0,
	0, 208, 86, 87, 0, 88, 209, 210, 211, 212,
	213, 0, 0, 0, 0, 89, 90, 91, 214, 215,
	216, 217, 92, 218, 219, 0, 93, 220, 221, 94,
	0, 0, 222, 223, 224, 0, 225, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 267, 106, 226, 107, 227, 228, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 229, 113, 114, 230, 231, 0, 0, 0, 115,
	116, 232, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 233, 0, 234, 0, 120, 121, 122, 123, 519,
	236, 0, 0, 127, 0, 124, 0, 0, 125, 237,
	126, 238, 239, 240, 0, 241, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 242, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 243,
	139, 0, 140, 141, 143, 142, 0, 0, 0, 244,
	144, 245, 145, 146, 0, 147, 0, 0, 148, 0,
	0, 149, 246, 0, 150, 0, 247, 151, 152, 153,
	154, 0, 248, 155, 249, 156, 0, 157, 158, 159,
	250, 160, 161, 0, 162, 163, 164, 165, 166, 168,
	169, 167, 170, 171, 0, 172, 0, 173, 174, 251,
	175, 0, 176, 177, 178, 179, 0, 252, 180, 181,
	0, 182, 183, 0, 184, 253, 254, 185, 0, 191,
	186, 187, 188, 190, 255, 189, 256, 0, 192, 0,
	193, 194, 195, 0, 257, 258, 259, 0, 0, 196,
	260, 261, 0, 197, 198, 199, 200, 83, 0, 201,
	202, 203, 0, 204, 0, 205, 206, 207, 262, 263,
	0, 0, 208, 86, 87, 0, 88, 209, 210, 211,
	212, 213, 0, 0, 0, 0, 89, 90, 91, 214,
	215, 216, 217, 92, 218, 219, 0, 93, 220, 221,
	94, 0, 0, 222, 223, 224, 0, 225, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 267, 106, 226, 107, 227, 228, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 229, 113, 114, 230, 231, 0, 0, 0,
	115, 116, 232, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 233, 0, 234, 0, 120, 121, 122, 123,
	516, 236, 0, 0, 127, 0, 124, 0, 0, 125,
	237, 126, 238, 239, 240, 0, 241, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 242, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	243, 139, 0, 140, 141, 143, 142, 0, 0, 0,
	244, 144, 245, 145, 146, 0, 147, 0, 0, 148,
	0, 0, 149, 246, 0, 150, 0, 247, 151, 152,
	153, 154, 0, 248, 155, 249, 156, 0, 157, 158,
	159, 250, 160, 161, 0, 162, 163, 164, 165, 166,
	168, 169, 167, 170, 171, 0, 172, 0, 173, 174,
	251, 175, 0, 176, 177, 178, 179, 0, 252, 180,
	181, 0, 182, 183, 0, 184, 253, 254, 185, 0,
	191, 186, 187, 188, 190, 255, 189, 256, 0, 192,
	0, 193, 194, 195, 0, 257, 258, 259, 0, 0,
	196, 260, 261, 0, 197, 198, 199, 200, 83, 0,
	201, 202, 203, 0, 204, 0, 205, 206, 207, 262,
	263, 0, 0, 208, 86, 87, 0, 88, 209, 210,
	211, 212, 213, 0, 0, 0, 0, 89, 90, 91,
	214, 215, 216, 217, 92, 218, 219, 0, 93, 220,
	221, 94, 0, 0, 222, 223, 224, 0, 225, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 267, 106, 226, 107, 227, 228, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 229, 113, 114, 230, 231, 0, 0,
	0, 115, 116, 232, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 233, 0, 234, 0, 120, 121, 122,
	123, 514, 236, 0, 0, 127, 0, 124, 0, 0,
	125, 237, 126, 238, 239, 240, 0, 241, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 242, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 243, 139, 0, 140, 141, 143, 142, 0, 0,
	0, 244, 144, 245, 145, 146, 0, 147, 0, 0,
	148, 0, 0, 149, 246, 0, 150, 0, 247, 151,
	152, 153, 154, 0, 248, 155, 249, 156, 0, 157,
	158, 159, 250, 160, 161, 0, 162, 163, 164, 165,
	166, 168, 169, 167, 170, 171, 0, 172, 0, 173,
	174, 251, 175, 0, 176, 177, 178, 179, 0, 252,
	180, 181, 0, 182, 183, 0, 184, 253, 254, 185,
	0, 191, 186, 187, 188, 190, 255, 189, 256, 0,
	192, 0, 193, 194, 195, 0, 257, 258, 259, 0,
	0, 196, 260, 261, 0, 197, 198, 199, 200, 83,
	0, 201, 202, 203, 0, 204, 0, 205, 206, 207,
	262, 263, 0, 0, 208, 86, 87, 0, 88, 209,
	210, 211, 212, 213, 0, 0, 0, 0, 89, 90,
	91, 214, 215, 216, 217, 92, 218, 219, 0, 93,
	220, 221, 94, 0, 0, 222, 223, 224, 0, 225,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 267, 106, 226, 107, 227, 228,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 229, 113, 114, 230, 231, 0,
	0, 0, 115, 116, 232, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 233, 0, 234, 0, 120, 121,
	122, 123, 488, 236, 0, 0, 127, 0, 124, 0,
	0, 125, 237, 126, 238, 239, 240, 0, 241, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 242,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 243, 139, 0, 140, 141, 143, 142, 0,
	0, 0, 244, 144, 245, 145, 146, 0, 147, 0,
	0, 148, 0, 0, 149, 246, 0, 150, 0, 247,
	151, 152, 153, 154, 0, 248, 155, 249, 156, 0,
	157, 158, 159, 250, 160, 161, 0, 162, 163, 164,
	165, 166, 168, 169, 167, 170, 171, 0, 172, 0,
	173, 174, 251, 175, 0, 176, 177, 178, 179, 0,
	252, 180, 181, 0, 182, 183, 0, 184, 253, 254,
	185, 0, 191, 186, 187, 188, 190, 255, 189, 256,
	0, 192, 0, 193, 194, 195, 0, 257, 258, 259,
	0, 0, 196, 260, 261, 0, 197, 198, 199, 200,
	83, 0, 201, 202, 203, 0, 204, 0, 205, 206,
	207, 262, 263, 0, 0, 208, 86, 87, 0, 88,
	209, 210, 211, 212, 213, 0, 0, 0, 0, 89,
	90, 91, 214, 215, 216, 217, 92, 218, 219, 0,
	93, 220, 221, 94, 0, 0, 222, 223, 224, 0,
	225, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 267, 106, 226, 107, 227,
	228, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 229, 113, 114, 230, 231,
	0, 0, 0, 115, 116, 232, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 233, 0, 234, 0, 120,
	121, 122, 123, 235, 236, 0, 0, 127, 0, 124,
	0, 0, 125, 237, 126, 238, 239, 240, 0, 241,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	242, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 243, 139, 0, 140, 141, 143, 142,
	0, 0, 0, 244, 144, 245, 145, 146, 0, 147,
	0, 0, 148, 0, 0, 149, 246, 0, 150, 0,
	247, 151, 152, 153, 154, 0, 248, 155, 249, 156,
	0, 157, 158, 159, 250, 469, 161, 0, 162, 163,
	164, 165, 166, 168, 169, 167, 170, 171, 0, 172,
	0, 173, 174, 251, 175, 0, 176, 177, 178, 179,
	0, 252, 180, 181, 0, 182, 183, 0, 184, 253,
	254, 185, 0, 191, 186, 187, 188, 190, 255, 189,
	256, 0, 192, 0, 193, 194, 195, 0, 257, 258,
	259, 0, 0, 196, 260, 261, 0, 197, 198, 199,
	200, 83, 0, 201, 202, 203, 0, 204, 0, 205,
	206, 207, 262, 263, 0, 0, 208, 86, 87, 0,
	88, 209, 210, 211, 212, 213, 0, 0, 0, 0,
	89, 90, 91, 214, 215, 216, 217, 92, 218, 219,
	0, 93, 220, 221, 94, 0, 0, 222, 223, 224,
	0, 225, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 267, 106, 226, 107,
	227, 228, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 229, 113, 114, 230,
	231, 0, 0, 0, 115, 116, 232, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 233, 0, 234, 0,
	120, 121, 122, 123, 235, 236, 0, 0, 127, 0,
	124, 0, 0, 125, 237, 126, 238, 239, 240, 0,
	241, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 242, 0, 133, 0, 0, 412, 0, 0, 135,
	0, 136, 137, 138, 243, 420, 0, 140, 141, 143,
	142, 0, 0, 0, 244, 144, 245, 145, 146, 0,
	147, 0, 0, 148, 0, 0, 149, 246, 0, 150,
	0, 247, 151, 152, 153, 154, 0, 248, 155, 249,
	156, 0, 157, 158, 159, 250, 160, 161, 0, 162,
	163, 164, 165, 166, 168, 169, 167, 170, 171, 0,
	172, 0, 173, 174, 414, 175, 0, 176, 177, 178,
	179, 0, 252, 180, 413, 0, 182, 183, 0, 184,
	253, 254, 185, 0, 191, 186, 187, 188, 190, 255,
	189, 256, 0, 192, 0, 193, 194, 195, 0, 419,
	258, 259, 0, 0, 415, 260, 261, 0, 197, 198,
	199, 200, 83, 0, 201, 202, 203, 0, 204, 0,
	205, 206, 207, 262, 263, 0, 0, 208, 86, 87,
	0, 88, 209, 210, 211, 212, 213, 0, 0, 0,
	0, 89, 90, 91, 214, 215, 216, 217, 92, 218,
	219, 0, 93, 220, 221, 94, 0, 0, 222, 223,
	224, 0, 225, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 267, 106, 226,
	107, 227, 228, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 229, 113, 114,
	230, 231, 0, 0, 0, 115, 116, 232, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 233, 0, 234,
	0, 120, 121, 122, 123, 235, 236, 0, 0, 127,
	0, 124, 0, 0, 125, 237, 126, 238, 239, 240,
	0, 241, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 242, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 243, 139, 0, 140, 141,
	143, 142, 0, 0, 0, 244, 144, 245, 145, 146,
	0, 147, 0, 0, 148, 0, 0, 149, 246, 0,
	150, 0, 247, 151, 152, 0, 154, 0, 248, 155,
	249, 156, 0, 157, 0, 159, 250, 160, 161, 0,
	162, 163, 164, 165, 166, 168, 169, 167, 170, 171,
	0, 172, 0, 173, 174, 251, 0, 0, 176, 177,
	178, 179, 0, 252, 180, 181, 0, 182, 183, 0,
	184, 253, 254, 185, 0, 191, 186, 187, 188, 190,
	255, 189, 256, 0, 192, 0, 193, 194, 195, 0,
	257, 258, 259, 0, 0, 196, 260, 261, 0, 197,
	198, 199, 200, 0, 0, 201, 202, 203, 0, 204,
	0, 205, 206, 207, 262, 263, 0, 0, 208, 0,
	0, 0, 0, 209, 210, 211, 212, 908, 909, 0,
	928, 929, 930, 938, 939, 940, 0, 0, 0, 0,
	0, 0, 0, 931, 0, 0, 0, 0, 0, 0,
	911, 0, 0, 942, 0, 0, 0, 0, 908, 909,
	0, 928, 929, 930, 938, 939, 940, 0, 0, 0,
	0, 0, 910, 0, 931, 0, 0, 0, 925, 0,
	0, 911, 0, 0, 942, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 910, 0, 0, 0, 0, 0, 925,
	0, 0, 0, 0, 0, 0, 0, 0, 908, 909,
	0, 928, 929, 930, 938, 939, 940, 916, 0, 0,
	0, 0, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 911, 0, 0, 942, 0, 935, 943, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 0, 941, 910, 0, 0, 0, 0, 0, 925,
	0, 0, 0, 0, 933, 0, 0, 935, 943, 0,
	926, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 932, 933, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 0, 935, 943, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 0, 0, 936, 0,
	0, 0, 0, 0, 0, 933, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 0, 927, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 934, 0, 0, 922,
	923, 924, 0, 921, 918, 919, 920, 912, 913, 914,
	915, 917, 0, 937, 0, 0, 0, 927, 0, 0,
	1463, 0, 0, 0, 0, 0, 0, 934, 0, 936,
	922, 923, 924, 0, 921, 918, 919, 920, 912, 913,
	914, 915, 917, 0, 937, 0, 0, 0, 1982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 908, 909,
	0, 928, 929, 930, 938, 939, 940, 0, 0, 0,
	0, 0, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 911, 0, 0, 942, 0, 0, 934, 0, 0,
	922, 923, 924, 0, 921, 918, 919, 920, 912, 913,
	914, 915, 917, 910, 937, 0, 0, 0, 1980, 925,
	908, 909, 0, 928, 929, 930, 938, 939, 940, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	0, 0, 0, 911, 0, 0, 942, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 908, 909, 0, 928,
	929, 930, 938, 939, 940, 910, 0, 0, 916, 0,
	0, 925, 931, 0, 0, 0, 0, 0, 0, 911,
	0, 0, 942, 0, 0, 0, 0, 935, 943, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 910, 0, 941, 0, 0, 0, 925, 0, 0,
	0, 0, 0, 0, 0, 933, 0, 0, 0, 0,
	916, 926, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 1472, 0, 1489, 1490, 1491, 0, 935,
	943, 0, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 916, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 933, 0, 0,
	0, 0, 0, 926, 0, 935, 943, 0, 0, 0,
	0, 0, 0, 1486, 0, 0, 0, 927, 0, 0,
	0, 941, 0, 0, 0, 0, 0, 932, 0, 936,
	0, 0, 0, 933, 0, 0, 0, 0, 0, 926,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1477, 932, 0, 0, 0, 0, 0, 927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 936, 0, 0, 0, 0, 0, 934, 0, 0,
	922, 923, 924, 0, 921, 918, 919, 920, 912, 913,
	914, 915, 917, 0, 937, 927, 0, 0, 1927, 0,
	0, 0, 0, 0, 0, 1487, 0, 936, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 934,
	0, 0, 922, 923, 924, 0, 921, 918, 919, 920,
	912, 913, 914, 915, 917, 0, 937, 0, 0, 0,
	1922, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 934, 0, 0, 922, 923,
	924, 1488, 921, 918, 919, 920, 912, 913, 914, 915,
	917, 0, 937, 0, 908, 909, 1918, 928, 929, 930,
	938, 939, 940, 0, 0, 0, 0, 0, 0, 0,
	931, 0, 0, 0, 0, 0, 0, 911, 0, 0,
	942, 0, 0, 0, 0, 908, 909, 0, 928, 929,
	930, 938, 939, 940, 0, 0, 0, 0, 0, 910,
	0, 931, 0, 0, 0, 925, 0, 0, 911, 0,
	0, 942, 0, 0, 1483, 1484, 1485, 0, 1482, 1479,
	1480, 1481, 1473, 1474, 1475, 1476, 1478, 0, 0, 0,
	910, 0, 0, 0, 0, 0, 925, 0, 0, 0,
	1471, 1472, 0, 1489, 1490, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 916, 0, 0, 0, 0, 0,
	0, 908, 909, 0, 928, 929, 930, 938, 939, 940,
	0, 0, 0, 935, 943, 0, 0, 931, 0, 0,
	0, 0, 0, 0, 911, 916, 0, 942, 0, 941,
	0, 1486, 908, 909, 0, 928, 929, 930, 938, 939,
	940, 933, 0, 0, 935, 943, 910, 926, 931, 0,
	0, 0, 925, 0, 0, 911, 0, 0, 942, 0,
	941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 932, 933, 0, 0, 0, 0, 910, 926, 0,
	1477, 0, 0, 925, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 916, 932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 927, 0, 1492, 0, 0, 0, 0,
	935, 943, 0, 0, 0, 936, 0, 0, 0, 0,
	0, 0, 916, 1487, 0, 0, 941, 0, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 0, 933, 0,
	0, 935, 943, 0, 926, 0, 936, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 933,
	0, 0, 0, 934, 0, 926, 922, 923, 924, 0,
	921, 918, 919, 920, 912, 913, 914, 915, 917, 1488,
	937, 0, 0, 0, 1860, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 934, 0, 0, 922, 923, 924,
	927, 921, 918, 919, 920, 912, 913, 914, 915, 917,
	0, 937, 936, 0, 0, 1838, 0, 0, 0, 0,
	0, 908, 909, 0, 928, 929, 930, 938, 939, 940,
	0, 927, 0, 0, 0, 0, 0, 931, 0, 0,
	0, 0, 0, 936, 911, 0, 0, 942, 0, 0,
	0, 0, 1483, 1484, 1485, 0, 1482, 1479, 1480, 1481,
	1473, 1474, 1475, 1476, 1478, 0, 910, 0, 0, 0,
	934, 0, 925, 922, 923, 924, 0, 921, 918, 919,
	920, 912, 913, 914, 915, 917, 0, 937, 0, 0,
	0, 1837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 934, 0, 0, 922, 923, 924, 0, 921, 918,
	919, 920, 912, 913, 914, 915, 917, 0, 937, 0,
	0, 916, 1728, 0, 0, 0, 908, 909, 0, 928,
	929, 930, 938, 939, 940, 0, 0, 0, 0, 0,
	935, 943, 931, 0, 0, 0, 0, 0, 0, 911,
	0, 0, 942, 0, 0, 0, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 933, 0,
	0, 910, 0, 0, 926, 0, 0, 925, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 916, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	927, 0, 0, 0, 0, 935, 943, 0, 0, 0,
	0, 0, 936, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 0, 0, 0, 926,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	934, 0, 0, 922, 923, 924, 0, 921, 918, 919,
	920, 912, 913, 914, 915, 917, 0, 937, 0, 0,
	0, 1662, 0, 908, 909, 0, 928, 929, 930, 938,
	939, 940, 0, 0, 0, 927, 0, 0, 0, 931,
	0, 0, 0, 0, 0, 0, 911, 936, 0, 942,
	0, 0, 0, 0, 0, 908, 909, 0, 928, 929,
	930, 938, 939, 940, 0, 0, 0, 0, 910, 0,
	0, 931, 0, 0, 925, 0, 0, 0, 911, 0,
	0, 942, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	910, 0, 0, 0, 0, 934, 925, 0, 922, 923,
	924, 0, 921, 918, 919, 920, 912, 913, 914, 915,
	917, 0, 937, 916, 0, 0, 1646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 935, 943, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 916, 908, 909, 941, 928,
	929, 930, 938, 939, 940, 0, 0, 0, 0, 0,
	933, 0, 0, 0, 935, 943, 926, 0, 0, 911,
	0, 0, 942, 0, 0, 0, 0, 0, 0, 0,
	941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	932, 910, 933, 0, 0, 0, 0, 925, 926, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 927, 0, 0, 908, 909, 0, 928, 929,
	930, 938, 939, 940, 936, 0, 916, 0, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 911, 0,
	0, 942, 0, 0, 927, 935, 943, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 936, 0, 0, 0,
	910, 941, 0, 0, 0, 0, 925, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 0, 0, 0, 926,
	0, 0, 934, 0, 0, 922, 923, 924, 0, 921,
	918, 919, 920, 912, 913, 914, 915, 917, 0, 937,
	0, 0, 0, 1225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 934, 916, 2061, 922, 923, 924,
	0, 921, 918, 919, 920, 912, 913, 914, 915, 917,
	0, 937, 0, 1438, 935, 943, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 927, 0, 0, 908, 909,
	941, 928, 929, 930, 938, 939, 940, 936, 0, 0,
	0, 0, 933, 0, 931, 0, 0, 0, 926, 0,
	0, 911, 0, 0, 942, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 910, 0, 0, 0, 0, 0, 925,
	0, 0, 0, 0, 0, 0, 2060, 0, 0, 0,
	0, 0, 0, 0, 0, 934, 0, 0, 922, 923,
	924, 0, 921, 918, 919, 920, 912, 913, 914, 915,
	917, 0, 937, 0, 927, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 936, 0, 916, 0,
	1503, 0, 0, 1502, 908, 909, 0, 928, 929, 930,
	938, 939, 940, 0, 0, 0, 0, 935, 943, 0,
	931, 0, 0, 0, 0, 1141, 0, 911, 0, 0,
	942, 0, 0, 941, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 933, 0, 0, 0, 910,
	0, 926, 0, 0, 934, 925, 0, 922, 923, 924,
	0, 921, 918, 919, 920, 912, 913, 914, 915, 917,
	0, 937, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 0, 0, 1142, 0, 0, 0, 946, 0, 0,
	0, 0, 0, 908, 909, 0, 928, 929, 930, 938,
	939, 940, 0, 0, 916, 0, 0, 0, 0, 931,
	0, 0, 0, 945, 0, 0, 911, 927, 0, 942,
	0, 0, 0, 935, 943, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 0, 0, 0, 0, 910, 941,
	0, 0, 0, 0, 925, 0, 0, 0, 0, 0,
	0, 933, 0, 0, 0, 0, 0, 926, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 932, 0, 0, 0, 0, 0, 934, 0, 0,
	922, 923, 924, 916, 921, 918, 919, 920, 912, 913,
	914, 915, 917, 0, 937, 0, 0, 0, 0, 0,
	0, 0, 935, 943, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 927, 0, 0, 908, 909, 941, 928,
	929, 930, 938, 939, 940, 936, 0, 0, 0, 0,
	933, 0, 931, 0, 0, 0, 926, 0, 0, 911,
	0, 0, 942, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	932, 910, 0, 0, 0, 0, 0, 925, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 934, 0, 0, 922, 923, 924, 0,
	921, 918, 919, 920, 912, 913, 914, 915, 917, 0,
	937, 0, 927, 0, 908, 909, 0, 928, 929, 930,
	938, 939, 940, 0, 936, 0, 916, 0, 0, 0,
	931, 0, 0, 0, 0, 0, 0, 911, 0, 0,
	942, 0, 0, 0, 0, 935, 943, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 910,
	0, 941, 0, 0, 0, 925, 0, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 0, 0, 0, 926,
	0, 0, 934, 0, 0, 922, 923, 924, 0, 921,
	918, 919, 920, 912, 913, 914, 915, 917, 0, 937,
	0, 0, 0, 932, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 916, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 935, 943, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 927, 0, 908, 909, 941,
	928, 929, 930, 938, 939, 940, 0, 936, 0, 0,
	0, 933, 0, 931, 0, 0, 0, 926, 0, 0,
	911, 0, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 932, 910, 0, 0, 0, 0, 0, 925, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 934, 0, 0, 922, 923,
	924, 0, 921, 918, 919, 920, 912, 913, 914, 915,
	917, 0, 937, 927, 0, 908, 909, 0, 928, 929,
	930, 938, 939, 940, 0, 936, 0, 916, 0, 0,
	0, 931, 1509, 0, 0, 1504, 0, 0, 911, 0,
	0, 942, 0, 0, 0, 1650, 935, 943, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	910, 0, 941, 0, 0, 0, 925, 0, 0, 0,
	0, 0, 0, 0, 933, 0, 0, 0, 0, 0,
	926, 0, 0, 934, 0, 0, 922, 923, 924, 0,
	921, 918, 919, 920, 912, 913, 914, 915, 917, 0,
	937, 0, 0, 0, 932, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 916, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 943, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 908, 909,
	941, 928, 929, 930, 938, 939, 940, 0, 936, 0,
	0, 0, 933, 0, 931, 0, 0, 0, 926, 0,
	0, 911, 0, 0, 942, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 910, 0, 0, 0, 0, 0, 925,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 934, 0, 0, 922,
	923, 924, 0, 921, 918, 919, 920, 912, 913, 914,
	915, 917, 0, 937, 927, 0, 908, 909, 0, 928,
	929, 930, 938, 939, 940, 0, 936, 0, 916, 0,
	0, 0, 931, 0, 0, 0, 1462, 0, 0, 911,
	0, 0, 942, 0, 0, 0, 0, 935, 943, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 910, 0, 941, 0, 0, 0, 925, 0, 0,
	0, 0, 0, 0, 0, 933, 0, 0, 0, 0,
	0, 926, 0, 0, 934, 0, 0, 922, 923, 924,
	0, 921, 918, 919, 920, 912, 913, 914, 915, 917,
	0, 937, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 916, 1469, 0, 0,
	0, 0, 0, 908, 909, 0, 928, 929, 930, 938,
	939, 940, 0, 0, 0, 935, 943, 0, 0, 931,
	0, 0, 0, 0, 0, 0, 911, 927, 0, 942,
	0, 941, 0, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 0, 933, 0, 0, 0, 0, 910, 926,
	0, 0, 0, 0, 925, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	922, 923, 924, 916, 921, 918, 919, 920, 912, 913,
	914, 915, 917, 0, 937, 927, 0, 0, 0, 0,
	0, 0, 935, 943, 0, 908, 909, 936, 928, 929,
	930, 938, 939, 940, 0, 0, 0, 0, 941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 911, 0,
	933, 942, 0, 0, 0, 0, 926, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	910, 0, 0, 0, 0, 0, 925, 0, 0, 0,
	932, 0, 0, 0, 0, 934, 0, 0, 922, 923,
	924, 0, 921, 918, 919, 920, 912, 913, 914, 915,
	917, 0, 937, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 927, 0, 0, 916, 0, 0, 0, 0,
	0, 0, 0, 0, 936, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 943, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 933, 0, 0, 28, 0, 0, 926, 0,
	0, 0, 0, 0, 0, 0, 29, 53, 0, 0,
	0, 0, 934, 0, 0, 922, 923, 924, 0, 921,
	918, 919, 920, 912, 913, 914, 915, 917, 0, 937,
	0, 55, 0, 0, 0, 0, 0, 31, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 927, 39, 0, 0, 56, 0,
	0, 0, 43, 40, 0, 0, 936, 0, 794, 786,
	811, 779, 802, 801, 0, 0, 781, 780, 0, 45,
	0, 813, 812, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 807, 0, 799, 798, 0, 0, 0, 0,
	0, 0, 0, 797, 934, 0, 0, 922, 923, 924,
	0, 921, 918, 919, 920, 912, 913, 914, 915, 917,
	796, 937, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 42, 0, 0, 789, 788,
	790, 791, 792, 0, 810, 0, 0, 0, 0, 0,
	0, 58, 30, 0, 0, 46, 0, 57, 0, 0,
	0, 0, 0, 47, 0, 0, 67, 0, 783, 0,
	0, 50, 52, 0, 0, 0, 0, 0, 0, 0,
	800, 54, 0, 0, 787, 0, 0, 0, 0, 69,
	0, 794, 786, 811, 779, 802, 801, 0, 0, 781,
	780, 0, 0, 59, 813, 812, 0, 0, 0, 795,
	0, 0, 0, 1160, 1158, 1159, 1162, 1161, 70, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 0, 0,
	0, 0, 66, 0, 0, 807, 784, 799, 798, 0,
	0, 0, 0, 0, 793, 785, 797, 0, 0, 0,
	0, 64, 0, 815, 0, 0, 0, 0, 0, 0,
	0, 782, 0, 796, 808, 809, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 814, 0,
	0, 789, 788, 790, 791, 792, 0, 810, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 783, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 800, 0, 0, 0, 787, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 795, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 784,
	0, 0, 0, 0, 0, 0, 0, 793, 785, 0,
	0, 0, 0, 0, 0, 0, 815, 0, 0, 0,
	0, 0, 0, 0, 782, 0, 0, 808, 809, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 814,
}
var sqlPact = [...]int{

	27232, -1000, 34, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 716, 15527,
	15527, 19080, -1000, -1000, -1000, -1000, -1000, -1000, 780, 709,
	339, 5256, 19080, 19080, 18809, 882, 882, 20435, -1000, -1000,
	23687, -1000, 3387, 507, 530, 507, 507, 556, 20435, 656,
	658, 129, -1000, 786, -5, 23416, 19080, 1372, 30, 17454,
	309, 27232, 18538, 23145, 19080, 18267, 622, 27, 16085, 19080,
	-1000, 36, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1222, 349, 36, -1000, 1221, 1123,
	1122, 17454, 22874, 22603, 22332, 22061, -1000, 12138, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 795,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 317, 316, -1000, 17996, -1000, 995, -1000, 28, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 993, -1000, 19080,
	-1000, -1000, 21790, 21519, 315, 945, -1000, -1000, 568, 421,
	1380, -1000, 40, -1000, -1000, -1000, 1220, -1000, 992, 1219,
	1218, 1217, 1216, 1211, 1207, 419, 866, 479, -1000, 945,
	-1000, 945, -1000, -1000, -1000, 621, 20435, -1000, 17454, -1000,
	21248, 19080, 19080, 1145, 20977, -1000, 786, -1000, -1000, -1000,
	1023, 1370, 1370, 1370, 1389, 140, 126, 129, 18, 19080,
	-1000, 312, 18, 9217, 9217, -1000, -1000, 309, -1000, 344,
	14961, -1000, 8302, -1000, 754, 1274, 439, 725, 1273, -127,
	826, 818, 1271, 15814, 16085, 27, 26, -1000, -1000, -1000,
	4961, 15814, 691, 14148, 36, -1000, -1000, -1000, 17454, 19080,
	19080, 729, 20706, -1000, 1270, 133, 1269, -1000, 131, 1267,
	-1000, 131, 1265, 13, -1000, -1000, -1000, -1000, -1000, -1000,
	309, 17725, 19080, 1487, 27454, -1000, 10408, -1000, -1000, 15527,
	808, 15527, -1000, -1000, 1486, -1000, 10408, -1000, 25, 24,
	1081, 1071, 12719, 12435, 1325, 810, -1000, -1000, -1000, 37,
	5256, 19080, 1231, 15527, 19080, 19080, 19080, 19080, 19080, 19080,
	-1000, 1079, -1000, -1000, 19080, 19080, -1000, 20, 19, -1000,
	20435, -1000, 134, -1000, 308, 1053, 428, 146, 20164, 428,
	1049, -1000, 1023, -1000, 981, 1074, 9517, 10408, 129, -1000,
	-1000, 129, 129, 10408, -1000, -1000, 19080, 18, 1459, 19080,
	119, -1000, 26203, -1000, -1000, 10408, 10408, 10408, 10408, 10408,
	919, 347, -1000, 302, 297, 6172, -1000, -1000, 1567, -1000,
	-1000, -1000, 142, -1000, -1000, 10408, 36, -1000, -1000, -1000,
	-1000, 296, 1580, -1000, 434, -1000, -1000, -1000, 425, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1230, 295,
	293, -1000, -1000, -1000, -1000, 292, 290, 286, 283, 280,
	279, 276, 274, 272, 269, 268, 265, 264, 255, 253,
	872, -1000, 442, -1000, -1000, 442, 442, -1000, 238, 238,
	241, -1000, -1000, -1000, -1000, 238, -1000, -1000, -1000, 410,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 244, 119, -1000,
	-1000, -1000, 19080, 7, -1000, 26973, -1000, 9, 816, -1000,
	16912, 1368, 1359, 1339, 17454, 1404, 1381, 617, 19080, 19080,
	615, 609, 17454, 402, -1000, -1000, -1000, 19080, -1000, -1000,
	8, -1000, -1000, 1206, 6, -1000, -1000, 435, 83, 1443,
	83, 14419, -1000, 19080, 19080, -1000, 19080, -1000, -1000, 19080,
	-1000, 19080, 19080, -1000, 19080, 144, 16370, 817, 1264, 703,
	-5, 5, -1000, 1491, -1000, -1000, -1000, -1000, 90, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 241, 872, 238, 238,
	238, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 410, -1000,
	-1000, 442, 442, 442, -1000, -1000, 1, 26973, 606, -1000,
	1204, 503, -1, 855, 1117, 857, -1000, -1000, -1000, -1000,
	16, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1537, -1000, -1000, 1565, 16, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1578, 5256, -1000, -1000, -1000,
	19080, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 855, 1117, -1000, -1000, 17454, 16641, 1436, 1262, 906,
	-1000, 1433, 19080, 986, 1048, -1000, 653, 1260, -1000, -1000,
	-1000, -1000, 26973, -1000, 26973, 796, 1127, -1000, 1127, 15,
	-1000, 26114, -1000, 237, -12, 435, 9217, 13861, 27301, 27454,
	19080, 645, 10408, 10408, 10408, 10408, 10408, 10408, 10408, 10408,
	10408, 10408, 10408, 10408, 10408, 10408, 10408, 10408, 10408, 10408,
	10408, 10408, 10408, 10408, 958, 10408, 605, 10408, 10408, 10408,
	10408, 815, 901, 219, 979, 5256, -1000, -1000, 688, 688,
	688, 25786, 25786, 231, 347, -1000, 10408, -1000, 8896, 126,
	25653, 14, -1000, -1000, -1000, 7063, 440, 26973, 36, 5851,
	-1000, 1564, 620, 1237, 1170, 232, 123, 116, 10408, 10408,
	10705, 10705, 10408, 11002, 10408, 10408, 6469, 10408, 10408, 10408,
	10408, 10408, 10408, -1000, 230, -1000, -1000, -1000, -1000, 1563,
	-1000, -1000, 1561, -1000, 640, 635, 1560, 435, 115, 8302,
	-1000, 817, 19080, 19080, 19080, -1000, -1000, 1040, 19893, 1039,
	27454, 19080, -1000, 229, 227, 1101, 1098, 19080, 19080, 19622,
	19351, 19080, 718, 226, 225, 19080, 804, -1000, 19080, 19080,
	800, 1157, 1003, -1000, 429, 15814, 682, 1203, 19080, 778,
	10408, 823, -1000, 13574, 460, 19080, 778, 89, -1000, -1000,
	-1000, 397, 19080, -1000, -1000, -1000, 133, -1000, 131, 131,
	-1000, -1000, 17454, -1000, -1000, -1000, -1000, -1000, -1000, 27454,
	345, 340, -1000, 1558, 604, -1000, 597, 594, 587, -1000,
	222, -1000, 10408, 19080, 19080, 1117, -1000, -1000, -1000, -1000,
	753, -1000, 841, -1000, 13003, -1000, -1000, -1000, -1000, -3,
	-1000, -1000, -1000, -1000, 111, -17, 11, 27454, -1000, -1000,
	-1000, -1000, -1000, 19080, 271, 19080, -5, 19080, -1000, 1577,
	-5, 19080, 1259, 1281, 391, 19080, -1000, -1000, -1000, 10408,
	-1000, -1000, -1000, -5, -1000, 1169, -1000, -31, 1244, 1340,
	-145, 122, 409, -1000, 13287, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 417, 608, 608, 575, 575,
	575, 575, 2058, 2058, 649, 363, 3178, 3178, 3178, 2004,
	335, 335, 3178, 3178, 3178, 25786, 3842, 208, 10408, 10408,
	586, 899, 219, 208, 10408, 1530, 208, 208, 208, -1000,
	930, -1000, -1000, -1000, 1202, 218, 11002, 11002, -1000, -1000,
	-1000, 6172, 11596, -1000, -1000, -1000, -1000, -1000, 216, 10408,
	-1000, 25685, -162, -22, -1000, -1000, 10408, -95, -110, -1000,
	-1000, 632, -1000, 10408, -1000, -11, 10408, 10408, 10408, 109,
	108, -1000, 931, 211, 206, 10408, -1000, -1000, 26866, 24247,
	106, 1201, -59, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	105, 104, 26778, -59, 103, 3017, -1000, 11002, 11002, 11002,
	6172, 204, 102, 26008, -59, 26645, 8599, 8599, 8599, 101,
	26557, 10408, -59, 3788, 3756, 3445, -23, -24, -30, 1557,
	-35, 100, 416, 414, 97, 1169, -1000, -1000, -1000, -1000,
	581, 571, 1258, -1000, 1034, -1000, 467, -1000, 853, 10408,
	11867, 189, 184, 858, -1000, 1256, 963, 1255, 963, -1000,
	9, 782, 10408, 10408, -1000, 570, -1000, -1000, 567, 429,
	1200, 662, -1000, 953, -1000, -1000, 664, -1000, -1000, 6766,
	26973, -1000, 778, 1342, -36, -1000, -1000, -1000, 435, 14419,
	13861, 8302, -41, -1000, -1000, -1000, 817, -1000, 498, 1555,
	96, 1065, 925, 832, 731, 1549, 26973, -3, -3, -1000,
	-1000, -1000, -1000, -1000, 19080, 1147, -1000, 16641, 181, 19080,
	180, -1000, 177, -1000, -1000, 173, 19080, 1087, 391, 15814,
	-1000, 428, -1000, 87, 1163, 1388, -1000, 13861, 1110, 1104,
	13861, 1056, 940, 940, 940, -1000, 172, 193, 409, 4357,
	10408, 17183, 933, 59, 84, 1244, 10408, 208, 208, 10408,
	11002, 11002, -1000, 208, -1000, -1000, -1000, -1000, 1184, 171,
	10408, 27454, 3880, 3815, -43, -1000, 7981, -8, -1000, 10408,
	-1000, 25446, -1000, -1000, 338, 1278, -1000, 10408, 26424, 80,
	7684, -1000, 26336, -13, -13, -1000, 1573, -1000, 14690, 436,
	946, 25341, 27301, 27454, -1000, 10408, -1000, -1000, 1181, 10408,
	-1000, 27301, 27454, 11002, 11002, 11002, 11002, 11002, 11002, 11002,
	11002, 11002, 11002, 11002, 11002, 11002, 11002, 11002, 11002, 11002,
	11002, 11002, 1062, 11002, 1520, 1520, 1520, -16, 7363, -1000,
	1229, 1181, 10408, 10408, 27454, 79, 78, 77, -1000, 10408,
	-59, 10408, 10408, 10408, -1000, -1000, -1000, 73, -1000, 1542,
	-1000, -1000, -1000, -1000, 1163, 19080, 19080, 19080, 1254, -1000,
	2075, -1000, 25132, -55, -1000, 305, 1374, 10408, -1000, -1000,
	170, 11867, 19080, -1000, 1112, 1139, 499, 19080, -1000, 19080,
	-1000, 19080, 19080, 19080, -61, -62, 19080, 19080, -1000, 15814,
	623, 169, -1000, -32, -1000, -1000, 210, -5, 778, -1000,
	-40, -1000, 393, -1000, 336, 334, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 72, -1000, -1000, 1152, -1000, 11867,
	167, 19080, 16641, 1415, 11867, 982, 1092, 391, 15814, -1000,
	653, -1000, 431, 10408, 10408, 1244, 13861, 13861, 1057, 1103,
	13861, -1000, -1000, -1000, -1000, 332, 358, 326, 12138, 17183,
	-1000, 1535, 1116, -66, -1000, -1000, 19080, 166, -1000, 409,
	548, 208, 3421, 674, 10408, 27454, 27095, -70, 10408, 10408,
	-1000, -72, -1000, 10408, 325, 26973, -1000, -1000, -1000, 26973,
	10408, 1570, 10408, 71, 69, 68, -1000, -1000, -1000, 23958,
	10408, 65, -1000, 62, 61, 26973, 1229, 26973, -1000, -1000,
	487, 487, 1520, 1520, 1520, 1520, 833, 833, 1164, 2077,
	2286, 2286, 2286, 1199, 496, 496, 2286, 2286, 2286, 1178,
	1090, 165, 25080, 10408, -74, -1000, -1000, -1000, 26973, 26973,
	60, -1000, -1000, -1000, -59, 3385, 25101, 25025, -1000, 56,
	431, -1000, -1000, -1000, 19080, -1000, 19080, -1000, 19080, 19080,
	1187, 1018, -1000, -1000, 1097, 164, 11002, 19080, -1000, 860,
	11867, 1358, 36, 19080, 1358, 24994, 5851, -76, -80, 1012,
	-1000, 1009, 10408, -1000, 27454, 963, 963, -1000, 564, 560,
	-1000, -1000, -1000, -1000, -52, 15256, 1572, 1286, 19080, 1337,
	-1000, -1000, 159, -1000, -1000, -1000, 913, -81, 11867, -85,
	55, -5, -87, 19080, -1000, 391, 15814, -1000, 1281, -1000,
	19080, 26973, -59, -1000, 1057, -1000, 158, 10408, 13861, -1000,
	-145, -1000, -93, -1000, 409, -98, -1000, 322, -160, -1000,
	389, -1000, 409, 157, 19080, 17183, 10408, 10408, 27095, -99,
	-1000, 208, 208, -1000, 24686, -1000, 26973, -1000, 26336, -1000,
	-1000, -1000, 902, -1000, 24650, -1000, -1000, -1000, -1000, 11002,
	1176, 156, 27454, 24598, -1000, -1000, 10408, -1000, -1000, -1000,
	-1000, -1000, 1064, -1000, -1000, 19080, 1027, -1000, -1000, 10408,
	25080, 153, 1147, 152, -1000, -1000, -1000, -1000, -1000, -1000,
	1374, -11, -1000, 822, -1000, -1000, 26973, 1366, -1000, -1000,
	19080, 19080, -1000, 150, 36, -103, -1000, 386, 589, -118,
	19080, -1000, -1000, 5551, 19080, 860, -122, -1000, 1147, -1000,
	860, 149, 15814, -1000, 1087, -57, -1000, 1412, -1000, 19080,
	26973, -1000, 409, -1000, 1529, 17183, 144, -1000, 1116, -1000,
	4663, 17183, 19080, -124, -1000, 208, 208, -1000, -1000, 52,
	946, 1386, -1000, 24762, 11002, 27454, -128, -1000, 24338, -1000,
	-1000, 1247, 24278, 1066, 19080, -1000, 19080, 1358, 50, 19080,
	474, 19080, -1000, -1000, 10408, 1572, -1000, -1000, 1571, 713,
	-1000, 435, -1000, 148, 1147, 860, -1000, 1147, 11867, -1000,
	1092, 19080, 147, -129, 17183, -1000, -1000, 319, -1000, -1000,
	1517, -1000, -134, -1000, -1000, 905, 10408, 24762, -135, -1000,
	-1000, 1240, -1000, 967, 876, 47, -136, -1000, -1000, 146,
	-1000, 10408, -1000, -13, -1000, -1000, 14419, -1000, 19080, -1000,
	1147, -1000, -147, -1000, -1000, -1000, -1000, -1000, 409, 209,
	-1000, 46, 10111, 10111, -59, -1000, 19080, -1000, 977, 969,
	670, -1000, -1000, -1000, -1000, -1000, 1066, 26973, 44, -123,
	-149, -1000, 860, 17183, -1000, -1000, -1000, -1000, 11299, 968,
	763, 25875, -1000, -1000, -1000, 1293, -1000, 483, 909, 909,
	967, 1570, -1000, 961, 1147, -1000, 1495, -1000, -1000, -1000,
	-1000, -1000, -1000, 1503, -1000, -1000, 1108, -1000, -1000, -1000,
	-1000, -1000, -1000, 9814, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1833, 1832, 1386, 1538, 1830, 1827, 1534, 1825, 1824,
	1821, 1819, 1816, 1815, 121, 1518, 1514, 36, 1497, 1812,
	112, 1807, 1802, 1801, 118, 1800, 1787, 1786, 71, 1784,
	1782, 1479, 1419, 1779, 1778, 110, 1776, 18, 1773, 93,
	1772, 35, 170, 2469, 145, 1771, 1769, 1767, 21, 123,
	94, 1766, 98, 1762, 1758, 56, 49, 34, 16, 1757,
	120, 131, 1228, 38, 1755, 1754, 153, 1752, 19, 26,
	1952, 158, 156, 136, 134, 1751, 1749, 1747, 1746, 69,
	1745, 5, 1744, 1743, 13, 86, 17, 1742, 39, 81,
	1740, 1735, 140, 1733, 95, 124, 1388, 29, 135, 85,
	1731, 96, 12, 103, 1730, 1729, 141, 47, 1727, 50,
	101, 147, 1726, 62, 160, 82, 41, 88, 127, 1722,
	1718, 1716, 105, 1714, 125, 92, 1713, 1711, 104, 1710,
	146, 148, 1708, 1707, 137, 1706, 1705, 1702, 164, 1701,
	1700, 162, 1699, 11, 84, 91, 3, 1406, 1403, 129,
	89, 40, 24, 1697, 1573, 936, 850, 55, 107, 64,
	58, 117, 78, 87, 151, 22, 1696, 1693, 128, 1691,
	1689, 1688, 1687, 1686, 106, 1685, 1682, 97, 149, 14,
	8, 15, 115, 52, 63, 109, 133, 157, 130, 1678,
	113, 132, 65, 116, 1672, 1669, 1439, 138, 1668, 1667,
	1666, 1325, 1189, 1186, 231, 1665, 1664, 419, 20, 1661,
	1653, 83, 1652, 144, 1651, 1648, 154, 214, 33, 1647,
	57, 37, 114, 1646, 77, 0, 2397, 302, 1643, 139,
	102, 1640, 1635, 1633, 1632, 46, 2, 10, 9, 7,
	4, 60, 54, 1630, 1626, 142, 27, 90, 1625, 159,
	1622, 1618, 1617, 53, 1616, 25, 1615, 23, 1613, 1605,
	6, 1, 1604, 1601, 152, 1600, 126, 1598, 1434, 1594,
	155, 1591, 1587, 1438, 61, 108,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 50, 50, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 47, 47,
	52, 52, 52, 54, 54, 51, 51, 46, 46, 5,
	5, 224, 224, 36, 36, 40, 40, 37, 38, 38,
	39, 39, 6, 6, 6, 7, 7, 7, 7, 7,
	7, 14, 15, 15, 15, 15, 15, 15, 15, 15,
	98, 98, 97, 97, 100, 100, 16, 16, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 192,
	192, 191, 19, 166, 166, 20, 20, 20, 20, 21,
	123, 123, 22, 22, 22, 22, 23, 27, 264, 264,
	264, 268, 268, 269, 269, 270, 270, 270, 270, 270,
	270, 270, 266, 266, 30, 30, 30, 30, 30, 142,
	138, 138, 140, 140, 140, 140, 61, 137, 137, 137,
	137, 139, 139, 139, 139, 217, 216, 216, 222, 222,
	222, 76, 76, 76, 76, 76, 77, 77, 77, 215,
	215, 215, 215, 223, 223, 223, 223, 223, 223, 78,
	78, 78, 221, 221, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 18, 265, 265, 267, 267, 32,
	32, 10, 10, 11, 11, 79, 79, 80, 80, 145,
	145, 145, 145, 81, 81, 53, 53, 53, 144, 233,
	233, 234, 234, 234, 234, 234, 234, 235, 235, 235,
	235, 235, 235, 235, 231, 231, 232, 229, 229, 230,
	230, 230, 230, 271, 271, 143, 143, 84, 84, 238,
	238, 238, 238, 236, 236, 236, 236, 236, 239, 237,
	240, 240, 240, 240, 240, 178, 178, 178, 34, 12,
	59, 59, 13, 9, 9, 127, 127, 88, 88, 183,
	183, 183, 69, 69, 48, 48, 48, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 128, 128,
	129, 129, 25, 29, 33, 33, 33, 33, 33, 273,
	273, 65, 65, 65, 65, 66, 66, 141, 141, 141,
	141, 141, 60, 8, 8, 55, 55, 56, 56, 57,
	57, 58, 58, 274, 274, 24, 24, 24, 72, 72,
	134, 134, 134, 136, 136, 135, 135, 135, 113, 113,
	113, 35, 93, 93, 102, 102, 103, 103, 189, 104,
	104, 28, 28, 43, 43, 41, 41, 41, 41, 41,
	41, 42, 42, 44, 44, 44, 44, 44, 44, 44,
	246, 246, 246, 249, 249, 245, 247, 247, 248, 248,
	272, 272, 114, 114, 114, 83, 82, 82, 86, 86,
	85, 87, 87, 182, 111, 111, 111, 111, 130, 131,
	131, 132, 132, 133, 133, 110, 110, 162, 162, 45,
	45, 92, 92, 94, 94, 152, 152, 152, 153, 153,
	151, 151, 151, 151, 184, 184, 184, 184, 184, 184,
	184, 184, 262, 262, 262, 263, 263, 181, 181, 185,
	185, 185, 185, 185, 185, 179, 179, 179, 179, 180,
	180, 190, 190, 117, 117, 117, 117, 115, 115, 116,
	116, 186, 186, 186, 186, 112, 112, 187, 187, 187,
	146, 146, 193, 193, 193, 211, 211, 91, 91, 91,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 195, 195, 195, 195,
	197, 197, 197, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 210, 210, 210,
	210, 210, 198, 198, 205, 205, 206, 206, 207, 208,
	199, 199, 200, 200, 201, 202, 209, 209, 209, 209,
	213, 213, 203, 203, 203, 203, 203, 204, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 125, 125, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 156, 156, 156, 156, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 241,
	241, 241, 241, 241, 241, 241, 243, 243, 244, 244,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 250, 250, 251,
	251, 253, 253, 254, 254, 255, 256, 256, 256, 257,
	258, 258, 252, 252, 259, 259, 259, 260, 260, 261,
	261, 261, 261, 261, 168, 168, 168, 169, 169, 170,
	176, 176, 176, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 67,
	67, 67, 67, 67, 99, 99, 165, 165, 163, 163,
	163, 167, 167, 118, 118, 212, 212, 212, 212, 212,
	212, 212, 119, 119, 119, 126, 120, 120, 121, 121,
	121, 121, 121, 121, 159, 160, 122, 122, 122, 161,
	161, 171, 175, 175, 174, 173, 173, 172, 172, 149,
	149, 150, 150, 148, 147, 107, 107, 106, 106, 105,
	105, 275, 275, 177, 177, 108, 108, 109, 101, 101,
	188, 188, 188, 188, 95, 95, 74, 74, 96, 96,
	70, 70, 73, 73, 71, 71, 71, 71, 89, 89,
	90, 90, 68, 68, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 214, 214, 214, 164, 62,
	62, 62, 63, 63, 64, 64, 219, 219, 219, 220,
	220, 220, 220, 218, 218, 218, 218, 218, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 4,
	6, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 7,
	6, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 1, 1, 1, 1, 1,
	1, 6, 3, 5, 4, 6, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 2, 4, 2, 4,
	4, 4, 4, 4, 4, 4, 2, 3, 4, 3,
	3, 4, 4, 2, 2, 2, 0, 2, 0, 8,
	8, 7, 10, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 5,
	2, 0, 6, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 1, 3,
	3, 0, 3, 8, 11, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 6, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 2,
	0, 8, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 2, 4, 4, 4,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 2, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	3, 3, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 7, 4, 6, 3, 1, 5,
	6, 9, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 3, 4, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	6, 4, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -27, -29,
	-28, -30, -31, -32, -33, -25, -34, -35, 23, 34,
	220, 65, -8, -9, -10, -11, -12, -13, -248, 93,
	101, 123, 203, 100, 86, 117, 223, 231, -41, -43,
	239, -142, 240, 35, 249, 59, 96, 225, 219, 271,
	67, -246, -44, -42, 319, 294, 300, 234, -45, 257,
	286, 322, 257, 132, 79, 289, -264, -96, 257, 79,
	-71, -62, 312, 4, -225, -227, 20, 21, 23, 33,
	34, 35, 40, 44, 47, 58, 59, 60, 62, 64,
	65, 66, 69, 70, 77, 78, 80, 82, 86, 88,
	92, 93, 95, 100, 101, 107, 108, 111, 113, 118,
	123, 124, 125, 126, 133, 136, 138, 131, 146, 148,
	149, 152, 151, 156, 159, 162, 164, 165, 166, 168,
	170, 171, 173, 172, 178, 180, 181, 183, 186, 189,
	192, 195, 196, 197, 198, 201, 203, 205, 206, 207,
	209, 210, 212, 213, 214, 215, 216, 219, 217, 218,
	220, 221, 223, 225, 226, 228, 230, 231, 232, 233,
	236, 237, 239, 240, 242, 245, 248, 249, 250, 253,
	251, 247, 256, 258, 259, 260, 267, 271, 272, 273,
	274, 277, 278, 279, 281, 283, 284, 285, 290, 295,
	296, 297, 298, 28, 36, 37, 38, 39, 41, 42,
	45, 46, 50, 51, 52, 54, 81, 83, 84, 99,
	102, 103, 109, 119, 121, 127, 128, 137, 139, 140,
	141, 143, 154, 167, 177, 179, 190, 194, 200, 202,
	208, 227, 235, 243, 244, 252, 254, 262, 263, 264,
	268, 269, 286, 287, -264, -70, -62, 79, 88, 136,
	279, 278, 79, 132, 257, 289, -17, 319, -28, -7,
	-15, -4, -24, -35, -14, -31, -18, -32, -16, 23,
	-218, 4, -225, -227, -226, -228, 56, 68, 116, 135,
	129, 145, 147, 155, 157, 169, 191, 193, 224, 241,
	22, 24, 25, 26, 27, 29, 30, 31, 32, 43,
	48, 49, 53, 55, 57, 63, 67, 71, 72, 73,
	74, 75, 76, 85, 87, 89, 90, 91, 94, 96,
	98, 104, 105, 106, 112, 114, 115, 117, 120, 122,
	130, 132, 134, 142, 144, 150, 153, 158, 160, 161,
	174, 175, 176, 182, 184, 185, 187, 188, 199, 204,
	211, 222, 234, 238, 246, 255, 257, 261, 265, 266,
	270, 275, 276, 280, 282, 288, 289, 291, 292, 293,
	294, -62, -62, -62, 203, 22, -268, 22, -269, -270,
	67, 93, 117, 234, 136, 88, 278, -268, -66, 231,
	-62, -138, 159, 237, 227, 267, -139, -137, -217, 262,
	168, -97, -62, 4, 22, 79, 58, 80, 118, 132,
	133, 63, 64, 149, 258, 262, 267, 67, 281, -273,
	267, 267, -273, -273, -65, 267, 265, -66, -272, 257,
	257, 280, 289, -127, 79, 276, -42, -44, -43, -85,
	-86, 275, 142, 98, 188, -41, -43, -246, -249, 209,
	-245, -62, -249, -82, -83, 22, 90, 323, -186, -70,
	185, -109, 319, -3, -186, 127, -70, -73, 127, -70,
	-62, -186, 127, 265, 323, -96, -89, -62, -148, -147,
	321, 115, 115, 319, -106, -107, -147, -148, 115, 144,
	144, -187, -186, -62, 127, -74, 127, -73, -98, 127,
	-97, -98, 127, -192, -191, -220, 4, -225, -227, -226,
	286, 257, 132, -166, 319, -123, 319, -62, 22, 184,
	323, 184, -62, -138, 52, -138, 319, -140, -60, -61,
	146, 205, 265, 304, 115, 298, -78, 5, 85, -100,
	321, 115, -265, 184, 115, 115, 115, 115, 115, 115,
	298, 146, 205, 230, 257, 289, -141, -60, -61, -141,
	265, -66, -112, -186, -97, 127, -62, -97, 132, -62,
	127, -85, -86, -111, -130, -131, 158, 182, -114, 22,
	90, -114, -114, 44, 320, 320, 323, -249, -90, 319,
	-101, -188, -154, 312, -156, 310, 311, 316, 174, 299,
	-168, -158, -171, 99, 227, 319, -70, -157, 324, 9,
	-243, -43, 29, -169, -170, 48, -62, 7, 8, 5,
	6, -68, -195, -164, -204, 270, 104, 176, -241, -242,
	4, -225, -219, -196, -206, -200, -203, 143, 56, 72,
	75, 73, 76, 238, 280, 49, 28, 102, 103, 194,
	200, 254, 268, 269, 127, 177, 128, 54, 119, 154,
	92, 37, 39, 41, 42, 50, 51, 81, 83, 84,
	109, 137, 139, 140, 141, 179, 208, 243, 252, 263,
	264, 287, -226, -207, -208, -201, -202, -209, -101, -109,
	312, -70, 319, -108, -177, -154, 85, -50, 217, -49,
	21, 23, 93, 284, 99, 247, 247, 217, 99, 324,
	217, 217, 99, -221, -220, 5, -71, 323, -218, 312,
	-224, -221, 250, 320, -95, -70, -107, -187, -72, -70,
	-72, 239, -62, 30, 99, -52, 323, 47, 221, 99,
	-52, 323, 99, -52, 99, 320, 323, -186, 127, -73,
	30, -165, -193, -194, -196, -205, -199, -203, -204, 40,
	46, 45, 260, 167, 235, 244, 38, 183, 138, 137,
	139, 140, 141, 243, 37, 208, 109, 92, 84, 83,
	179, 42, 41, -207, -208, -201, -202, 81, 263, 264,
	143, 39, 51, 50, 287, 252, -99, -154, -264, -270,
	-264, 30, -99, 323, 323, 156, -77, 162, 173, 124,
	-216, 85, -222, -215, -178, 9, 270, 104, 184, -221,
	8, 311, -214, 7, 310, -216, 85, 70, -223, 5,
	4, -164, -178, 85, 159, -204, 321, -218, -217, -267,
	112, -264, -217, -217, -217, -217, -217, -62, 156, -217,
	-217, 323, 323, -66, -52, 323, 319, -84, 174, -247,
	294, -84, 319, -63, 127, -62, -247, 174, -111, -131,
	-130, -132, -154, 22, -154, -156, -42, -42, -42, -87,
	-182, -154, -245, 30, -89, -92, 323, 115, 10, 11,
	55, 33, 310, 311, 312, 313, 110, 314, 307, 308,
	309, 306, 302, 303, 304, 61, 163, 229, 13, 14,
	15, 26, 187, 157, 299, 129, 241, 316, 16, 17,
	18, 145, 36, 130, -67, 30, 4, -75, -154, -154,
	-154, -154, -154, 193, -105, -149, 317, -43, 319, -43,
	-154, -99, 7, -43, -163, 317, -172, -154, -106, 319,
	5, 319, 5, -250, 295, 112, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 202, -213, 290, -213, -213, -197, 319,
	-197, -198, 319, -197, 296, 300, 319, -92, -70, 323,
	320, 323, 265, -128, 63, 57, -144, 127, 57, -229,
	-62, 63, -230, 53, 276, 204, 114, -128, 63, -128,
	63, 63, -186, 33, 33, 265, -73, -62, 265, 265,
	-186, -190, 301, -62, -190, 323, 115, 320, 323, -146,
	292, -134, -28, 319, 85, 30, -134, -102, -103, -189,
	-104, -70, 319, -62, -62, -73, -74, -97, -98, -98,
	-17, -191, 99, -20, -28, -24, -35, -14, 320, 323,
	-91, 29, -124, 319, 297, 166, 82, 125, 165, -125,
	233, 320, 323, 265, 115, 267, 320, -61, -60, -76,
	207, 245, 218, 236, 323, 8, 7, 7, -218, -266,
	-62, -61, -60, -186, -79, -89, -80, -62, -145, -144,
	-231, -232, -229, 132, 276, 105, 30, 99, -59, 198,
	30, 184, 174, -55, 259, 99, -133, 227, 228, 323,
	-48, 31, 89, 319, 320, -146, -188, -94, -184, 317,
	-186, -70, -43, -185, 319, -211, -193, -210, 213, 214,
	212, 216, 215, -193, -97, 262, -154, -154, -154, -154,
	-154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
	-154, -154, -154, -154, -154, -154, -154, -154, 157, 129,
	241, 36, 130, -154, 265, -154, -154, -154, -154, 176,
	174, 270, 104, 277, 90, 180, -275, 255, 32, -161,
	-43, 319, -176, 27, 246, 22, -218, -168, 227, 319,
	-149, -154, -150, -99, 320, 320, 323, -99, -167, 318,
	-163, -175, -174, 291, 320, -99, 288, 22, 90, 312,
	7, -124, -251, 107, 120, 319, 320, 320, -154, -154,
	-118, -212, -99, 4, 297, 166, 82, 125, 165, 233,
	-118, -119, -154, -99, -120, -155, -156, 310, 311, 316,
	319, 227, -121, -154, -99, -154, 43, 153, 266, -122,
	-154, 115, -99, -154, -154, -154, -99, -99, -99, 319,
	7, 7, 262, 262, 7, -146, 320, -177, -49, -70,
	-62, -62, 174, -144, 127, -54, 174, -193, -62, 319,
	319, 148, 148, -62, -62, 127, -62, 127, -62, -62,
	-50, 217, 319, 319, -62, 217, -62, -70, 217, -36,
	126, 180, -39, 294, -221, 250, 115, -70, -113, 222,
	-154, -113, -136, 184, -95, 286, -62, -113, -93, 323,
	115, 304, -95, -52, -52, -52, -186, -193, 317, 317,
	7, 265, 265, 265, 265, 319, -154, -266, -266, -60,
	274, 60, 207, -222, 323, 320, 320, 323, -63, 132,
	-63, -28, -97, 5, -28, -70, 99, -56, 95, -274,
	304, -62, -182, -20, -110, 120, -190, 323, 68, -117,
	147, 169, 116, 155, 224, 135, 7, 101, -151, 324,
	319, -181, 300, -43, -185, -184, 298, -154, -154, 265,
	-275, 255, -161, -154, 176, 270, 104, 277, 90, 180,
	115, 319, -155, -155, -99, -158, 319, -99, 318, 327,
	320, -154, 318, 318, 323, -173, -174, 94, -154, -86,
	323, -85, -154, -99, -99, 320, 320, -256, 192, 319,
	319, -154, 30, 323, 320, 115, 320, 320, -126, 199,
	320, 10, 11, 310, 311, 312, 313, 110, 314, 307,
	308, 309, 306, 302, 303, 304, 61, 163, 229, 13,
	14, 15, 145, 130, -155, -155, -155, -99, 319, 320,
	-159, -160, 115, 112, 30, -122, -122, -122, 320, 115,
	-99, 323, 323, 323, 320, 320, 320, 7, 320, 323,
	320, 298, 298, 320, -110, 265, 265, 99, 174, 283,
	-233, -230, -154, -88, -183, -62, -244, 319, -241, -242,
	-68, 319, 319, -47, 93, 239, -129, 99, -52, 99,
	-52, 265, -128, 63, -99, -99, 265, 265, -39, 115,
	256, 186, 250, -101, 175, -113, 62, 320, -146, -103,
	-94, -177, 320, 318, 7, 7, 320, 166, 125, 165,
	-125, 165, -125, -125, 7, -62, -81, 131, -145, 319,
	-63, 319, 319, -84, 319, -62, -57, 152, -274, -221,
	-247, 320, -162, 122, 44, -184, 147, 147, -184, -117,
	147, -115, 191, -115, -115, -262, 319, -17, 319, -181,
	-218, 317, 325, -99, -180, -179, 30, -62, 189, 320,
	-154, -154, -155, -155, 115, 319, -154, -165, 26, 26,
	320, -99, 320, 323, -150, -154, 320, -163, 96, -154,
	261, 320, 288, -86, -86, -86, 5, -257, -62, 319,
	292, -85, 320, -211, -193, -154, -159, -154, -211, -193,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, 90,
	174, 180, -155, 323, -99, 320, -160, -159, -154, -154,
	-193, 320, 320, 320, -99, -154, -154, -154, 320, 7,
	-162, -62, -62, -144, 99, -234, 63, -235, 55, 105,
	67, 174, 176, 276, 204, 53, 85, 211, 320, 320,
	323, -69, -106, 55, -69, -154, 319, -88, -89, 174,
	85, 174, 85, 78, 272, -62, -62, -70, -62, -62,
	320, 320, -62, -70, -224, 262, 319, -135, 319, 184,
	-28, -113, 304, 318, 318, 320, 130, -88, 319, -89,
	-79, 30, -88, 184, -58, 151, -274, -221, -55, -253,
	293, -154, -99, -184, -184, -116, 282, 184, 147, -184,
	318, 320, -263, 7, 318, -192, -180, 7, -153, -152,
	113, 172, 320, -62, 319, -181, 26, 26, -154, -165,
	320, -154, -154, 320, -154, 318, -154, 5, -154, 320,
	320, 320, -258, -62, -154, 320, 320, 320, -160, 115,
	90, 180, 319, -154, 320, 320, 323, 320, 320, 320,
	-253, -144, -62, -97, -62, 105, 127, 176, 148, 319,
	-155, -70, -143, -271, 66, 253, -183, -48, -97, -48,
	320, -99, 320, 320, 176, 176, -154, -193, -52, -52,
	265, 265, -157, -68, -62, -38, -37, 5, 91, -89,
	63, -109, -43, 319, 195, 320, -88, 320, 320, -28,
	320, -70, -274, -221, -56, -254, -255, -62, -116, 319,
	-154, -184, -151, 320, 323, -181, 320, 318, 323, 326,
	304, -181, 319, -89, -179, -154, -154, 320, 320, -86,
	-252, 197, 320, -155, 115, 319, -165, 320, -154, -235,
	-63, 174, -154, -64, 319, -81, 319, -69, -86, 211,
	-51, 55, -62, -62, 319, 323, 320, -40, 304, 278,
	175, 320, -62, -62, -143, 320, -81, -143, 319, -221,
	-57, 323, 30, -89, -181, 7, -180, -17, -152, -218,
	317, -180, -89, 320, 320, -86, 44, -155, -165, 320,
	320, 99, 320, -238, 164, -62, -89, -48, 320, -70,
	-46, 282, -97, -99, -37, 5, 239, -146, 319, -81,
	-143, -81, -88, -58, -255, -257, 320, -179, 318, 7,
	320, -259, 206, 228, -99, 320, 105, -236, -239, -237,
	184, 116, 196, 242, 320, 320, -84, -154, -86, -102,
	-89, -81, 320, -181, 318, 320, -260, -261, 36, 273,
	70, -154, -260, -62, -237, 184, -239, 184, 278, 88,
	-238, 320, -146, 320, -143, -180, -261, 201, 111, 227,
	201, 111, -240, 171, 221, 47, 239, -240, -236, -53,
	47, 221, -81, 26, 20, 176, 85, -261,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 0, 0,
	0, 0, 75, 76, 77, 78, 79, 80, 0, 0,
	409, 0, 0, 0, 0, 0, 0, 0, 381, -2,
	0, 148, 0, 330, 0, 330, 330, 334, 0, 411,
	296, 408, -2, 419, 0, 0, 0, 417, 395, 0,
	0, -2, 0, 0, 0, 0, 0, 128, 0, 938,
	868, 874, 875, 899, 900, 901, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 0, 0, 870, 938, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 0,
	214, 913, 914, 915, 916, 917, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 114, 121, 122, 989, 124, 0, 131, 132, 133,
	135, 136, 137, 138, 139, 140, 141, 0, 323, 1010,
	336, 144, 967, 1014, 1084, 1029, 151, 161, 0, 1090,
	-2, 165, 92, 194, 195, 196, 0, 198, 216, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 213, 341,
	329, 341, 326, 327, 328, 331, 0, 322, 0, 410,
	0, 0, 0, 0, 0, 295, -2, 391, 392, -2,
	0, 414, 414, 414, 0, 0, 392, 0, 400, 993,
	403, 881, 401, 0, 0, 416, 415, 0, 396, 491,
	0, 439, 0, 2, 0, 1068, 491, 0, 1068, 873,
	0, 0, 1068, 0, 0, 129, 130, 878, 876, 877,
	0, 0, 0, 0, 871, 847, 845, 846, 0, 0,
	0, 0, 497, 82, 1068, 52, 1068, 866, 52, 1068,
	90, 52, 1068, 0, 109, 111, 909, 910, 911, 912,
	1095, 0, 0, 0, 0, 119, 0, 123, 125, 0,
	0, 0, 335, 145, 1057, 147, 0, 150, 152, 153,
	0, 0, 0, 0, 0, 0, 164, 189, 190, 93,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 209, 210, 0, 0, 324, 337, 338, 325,
	0, 333, 52, 495, 268, 1068, 407, 268, 903, 407,
	1068, -2, 0, 387, 426, 427, 0, 0, 0, 412,
	413, 0, 0, 0, 383, 384, 0, 402, 0, 0,
	442, 858, 862, 863, 594, 0, 0, 0, 0, 0,
	0, 684, 686, 1062, 1084, 0, 688, 689, 0, 691,
	693, 694, 0, 697, 698, 838, 870, 884, 885, 886,
	887, 0, 0, 890, 0, 892, 893, 894, 738, 707,
	-2, -2, 882, 526, 527, 528, 529, -2, 1097, 711,
	713, 715, 716, 717, 718, 0, 1046, 1063, 1064, 1080,
	1081, 1089, 1093, 1094, 1068, 1077, 1069, 1058, 1066, 1075,
	943, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 908, 556, 557, 562, 563, 565, 442, 440,
	492, 493, 0, 0, 855, 853, 854, 29, 319, 31,
	0, 319, 319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 482, 192, 193, 869, 0, 843, 844,
	482, 61, 72, 0, 0, 864, 848, 501, 0, 358,
	0, 0, 498, 0, 0, 84, 0, 50, 51, 0,
	86, 0, 0, 88, 0, 409, 0, 0, 1068, 0,
	409, 0, 796, 509, 510, 511, 512, 513, 591, 516,
	517, 518, 519, 520, 521, 522, 523, 524, 525, 533,
	534, 535, 536, 537, 538, 539, 553, 0, 532, 532,
	532, 545, 546, 554, 555, 560, 561, 572, 573, 575,
	577, 571, 571, 571, 568, 569, 0, 794, 0, 134,
	0, 0, 0, 0, 0, 0, 156, 176, 177, 178,
	157, 159, 166, 168, 169, 170, 179, 180, 181, 182,
	285, 0, 287, 895, 0, 158, 160, 162, 163, 183,
	184, 185, 186, 187, 188, 0, 0, 94, 197, 199,
	0, 215, 200, 201, 202, 203, 204, 205, 208, 211,
	212, 0, 0, 332, 288, 0, 226, 0, 0, 291,
	406, 0, 0, 0, 1068, 902, 346, 0, 390, 424,
	425, 428, 431, 432, 429, 594, 397, 398, 399, 420,
	421, 306, 404, 0, 0, 501, 0, 0, 0, 0,
	0, 0, 773, 774, 775, 776, 777, 778, 781, 782,
	779, 780, 783, 784, 785, 0, 0, 0, 786, 787,
	788, 0, 0, 790, 0, 792, 0, 0, 0, 0,
	0, 0, 852, 0, 0, 0, 861, 789, 599, 600,
	601, 623, 624, 0, 685, 849, 842, 687, 0, -2,
	794, 0, 690, 695, 696, 0, 0, 837, -2, 0,
	889, 0, 591, 740, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 817, 823, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 559, 570, 567, 566, 543, 0,
	542, 540, 0, 544, 0, 0, 0, 501, 0, 0,
	857, 0, 0, 0, 0, 318, 33, 1068, 0, 54,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	0, 64, 0, 879, 71, 0, 0, 0, 0, 370,
	0, 370, 360, 0, 0, 0, 370, 373, 374, 376,
	377, 0, 0, 499, 83, 867, 52, 91, 52, 52,
	97, 110, 0, 112, 115, 116, 117, 118, 113, 0,
	502, 504, 514, 0, 578, 579, 580, 581, 582, 583,
	592, 120, 0, 0, 0, 0, 149, 154, 155, 342,
	0, 173, 0, 175, 0, 286, 897, 896, 95, 217,
	142, 339, 340, 496, 0, 0, 225, 878, 227, 229,
	230, 231, 232, 903, 0, 903, 0, 0, 289, 0,
	0, 0, 0, 348, 354, 0, 430, 433, 434, 0,
	423, 304, 305, 409, 880, 436, 859, 482, 443, 0,
	453, 491, 468, 458, 0, 595, 505, 506, 547, 548,
	549, 550, 551, 596, 597, 0, 602, 603, 604, 605,
	606, 607, 608, 609, 610, 611, -2, -2, -2, 615,
	616, 617, -2, -2, -2, 621, 622, -2, 791, 793,
	0, 852, 0, -2, 0, 631, -2, -2, -2, 635,
	0, 638, 640, 642, 0, 0, 0, 0, 851, 652,
	829, 0, 0, 770, 771, 772, 860, 637, 0, 0,
	850, 841, 0, 0, -2, 692, 0, 0, 0, 800,
	801, 836, 832, 0, 699, 419, 0, 0, 0, 0,
	0, 898, 748, 0, 0, 0, 712, 714, 0, 0,
	0, 0, 804, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 794, 814, 0, 0, 655, 0, 0, 0,
	0, 1084, 0, 794, 822, 0, 0, 0, 0, 0,
	794, 0, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 436, 494, 856, 32, 308,
	0, 0, 0, 35, 1068, 43, 0, 240, 0, 0,
	0, 0, 0, 321, 44, 1068, 52, 1068, 52, 45,
	30, 319, 0, 0, 312, 0, 307, 310, 0, 71,
	0, 0, 60, 0, 62, 73, 0, 865, 81, 0,
	500, 355, 370, 0, 0, 362, 359, 357, 501, 0,
	0, 0, 0, 85, 87, 89, 0, 797, 0, 0,
	0, 0, 0, 0, 0, 0, 795, 126, 127, 146,
	171, 172, 174, 167, 0, 234, 267, 0, 0, 903,
	0, 223, 268, 290, 292, 0, 0, 350, 354, 0,
	353, 407, 422, 0, 438, 0, 441, 0, 0, 0,
	0, 0, 488, 488, 488, 486, 462, 409, 468, 0,
	0, 480, 0, -2, 458, 0, 0, -2, -2, 0,
	0, 0, 653, -2, 636, 639, 641, 643, 0, 0,
	0, 0, 0, 0, 0, 654, 0, 0, 839, 842,
	-2, 795, 798, 799, 0, 0, 833, 0, 0, 0,
	0, 418, 419, 419, 419, 705, 0, 706, 0, 0,
	0, 0, 0, 0, 721, 0, 722, 723, 0, 0,
	724, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 658, 659, 660, 0, 0, 725,
	820, 821, 0, 0, 0, 0, 0, 0, 730, 0,
	827, 0, 0, 0, 734, 735, 736, 0, 530, 0,
	552, 574, 576, 564, 438, 0, 0, 0, 0, 53,
	238, 257, 0, 0, 297, 303, 303, 0, 708, 709,
	0, 0, 0, 37, 0, 0, 0, 0, 41, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 74, 368, 369, 356, 367, 0, 370, 375,
	372, 378, 0, 507, 0, 0, 515, 584, 585, 586,
	587, 588, 589, 590, 0, 143, 221, 0, 228, 0,
	0, 0, 226, 0, 0, 0, 352, 354, 0, 345,
	346, 405, 742, 0, 0, 444, 0, 0, 0, 0,
	0, 483, 487, 484, 485, 0, 0, 0, 0, 480,
	450, 0, 0, 0, 457, 479, 0, 478, 467, -2,
	598, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	830, 0, 765, 0, 0, 841, -2, 802, 831, 835,
	0, 700, 0, 0, 0, 0, 891, 746, 747, 751,
	0, 0, 710, 0, 0, 803, 813, 815, 656, 657,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	-2, -2, -2, 674, 675, 676, -2, -2, -2, 0,
	0, 0, 816, 0, 0, 768, 818, 819, 824, 825,
	0, 727, 728, 729, 826, 0, 0, 0, 558, 0,
	742, 314, 316, 34, 0, 239, 0, 242, 0, 0,
	0, 0, 248, 249, 0, 0, 0, 0, 259, 266,
	0, 306, 883, 0, 306, 0, 0, 0, 0, 0,
	49, 0, 0, 320, 0, 52, 52, 309, 0, 0,
	219, 220, 313, 311, 63, 0, 0, 0, 0, 0,
	361, 371, 0, 508, 503, 593, 0, 0, 0, 0,
	0, 0, 0, 0, 343, 354, 0, 347, 348, 393,
	0, 437, 435, 470, 0, 472, 0, 0, 0, 474,
	453, 463, 0, 465, 468, 0, 455, 0, 0, 448,
	0, 447, 468, 476, 0, 0, 0, 0, -2, 0,
	646, -2, -2, 764, 795, 840, 834, 888, 419, 701,
	703, 704, 753, 750, 0, 737, 719, 720, 812, 0,
	0, 0, 0, 795, 767, 726, 0, 732, 733, 531,
	394, 36, 0, 243, 244, 903, 0, 247, 250, 0,
	252, 905, 234, 0, 263, 264, 298, 299, 302, 300,
	303, 419, 261, 0, 38, 39, 48, 56, 40, 46,
	0, 0, 481, 0, 0, 0, 68, 66, 0, 0,
	0, 379, 380, 0, 0, 266, 0, 256, 234, 224,
	266, 0, 0, 349, 350, 741, 743, 0, 471, 0,
	490, 473, 468, 464, 0, 480, 409, 451, 0, 452,
	0, 480, 0, 0, 459, -2, -2, 647, 766, 0,
	419, 0, 739, -2, 0, 0, 0, 769, 0, 241,
	245, 0, 0, 272, 0, 260, 0, 306, 0, 0,
	58, 0, 315, 317, 0, 0, 70, 67, 0, 0,
	364, 501, 366, 0, 234, 266, 222, 234, 0, 351,
	352, 0, 0, 0, 0, 466, 460, 0, 449, 445,
	0, 456, 0, 477, 702, 756, 0, -2, 0, 682,
	731, 0, 251, 277, 0, 0, 0, 301, 700, 268,
	42, 0, 55, 419, 69, 65, 0, 365, 0, 254,
	234, 293, 0, 344, 744, 745, 489, 454, 468, 0,
	475, 0, 0, 0, 752, 683, 0, 253, 273, 274,
	0, 269, 270, 271, 904, 265, 272, 57, 0, 501,
	0, 255, 266, 480, 446, 749, 754, 757, -2, 1032,
	935, 0, 755, 246, 275, 0, 276, 0, 0, 0,
	277, 0, 363, 237, 234, 461, 0, 759, 760, 761,
	762, 763, 278, 0, 281, 282, 0, 279, 262, 233,
	235, 236, 294, 0, 280, 283, 284, 758,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 308, 3, 314, 309, 3,
	319, 320, 312, 310, 323, 311, 321, 313, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 327, 322,
	302, 304, 303, 3, 324, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 317, 3, 318, 307, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 325, 306, 326, 316,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 305,
	57645, 315, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:781
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:787
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:793
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:840
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:846
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:886
		{
			return unimplemented(sqllex)
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:909
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:919
		{
			return unimplemented(sqllex)
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = nil
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = DropCascade
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = DropRestrict
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = DropDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:981
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:982
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:985
		{
			return unimplemented(sqllex)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:986
		{
		}
	case 59:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:990
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].str, IncrementalFrom: sqlDollar[6].union.strs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:994
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.strs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 64:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = []string(nil)
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 66:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.str = ""
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1049
		{
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{ /* SKIP DOC */
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1304
		{
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1366
		{
			return unimplemented(sqllex)
		}
	case 146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{ /* SKIP DOC */
		}
	case 149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1438
		{
			return unimplemented(sqllex)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			return unimplemented(sqllex)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = Low
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = Normal
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = High
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			return unimplemented(sqllex)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1554
		{
			return unimplemented(sqllex)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1555
		{
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1651
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1747
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1751
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = DropDefault
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1761
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1967
		{
			return unimplemented(sqllex)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1968
		{
			return unimplemented(sqllex)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1969
		{
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1976
		{
			return unimplemented(sqllex)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{
			return unimplemented(sqllex)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1978
		{
			return unimplemented(sqllex)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			return unimplemented(sqllex)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1980
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			return unimplemented(sqllex)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1986
		{
			return unimplemented(sqllex)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1989
		{
			return unimplemented(sqllex)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1990
		{
			return unimplemented(sqllex)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1991
		{
			return unimplemented(sqllex)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			return unimplemented(sqllex)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1993
		{
			return unimplemented(sqllex)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = true
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = false
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2100
		{
			return unimplemented(sqllex)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2101
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2105
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = Ascending
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = Descending
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2159
		{
			return unimplemented(sqllex)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2160
		{
			return unimplemented(sqllex)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = true
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = false
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2173
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2174
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2207
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2216
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2217
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.str = ""
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.str = ""
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.str = ""
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.str = ""
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.str = ""
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.str = ""
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2339
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2340
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2408
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2412
		{
			return unimplemented(sqllex)
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2420
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 371:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2442
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2443
		{
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2670
		{
			return unimplemented(sqllex)
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2671
		{
			return unimplemented(sqllex)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2672
		{
			return unimplemented(sqllex)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2675
		{
			return unimplemented(sqllex)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2676
		{
			return unimplemented(sqllex)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2679
		{
			return unimplemented(sqllex)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2682
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2683
		{
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2686
		{
			return unimplemented(sqllex)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2687
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2690
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2691
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = true
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = false
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = false
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = true
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2714
		{
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2715
		{
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2753
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2773
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2814
		{
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2815
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2873
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = &From{}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2909
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2927
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2954
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2971
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = nil
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3032
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = true
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = false
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.str = astFullJoin
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.str = astLeftJoin
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.str = astRightJoin
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.str = astInnerJoin
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3149
		{
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3150
		{
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3236
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3249
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3250
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3264
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3273
		{
			return unimplemented(sqllex)
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3341
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = nil
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3390
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3485
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3517
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3556
		{
		}
	case 571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3557
		{
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = year
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = month
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = day
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = hour
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = minute
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = month
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = hour
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = minute
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = minute
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = nil
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = second
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3652
		{
			return unimplemented(sqllex)
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3687
		{
			return unimplemented(sqllex)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			return unimplemented(sqllex)
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3913
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4086
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4139
		{
			return unimplemented(sqllex)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4140
		{
			return unimplemented(sqllex)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4163
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4179
		{
			return unimplemented(sqllex)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4180
		{
			return unimplemented(sqllex)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4184
		{
			return unimplemented(sqllex)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4201
		{
			return unimplemented(sqllex)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4202
		{
			return unimplemented(sqllex)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4203
		{
			return unimplemented(sqllex)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4204
		{
			return unimplemented(sqllex)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4233
		{
			return unimplemented(sqllex)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4277
		{
			return unimplemented(sqllex)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4278
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = Window(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4313
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.str = ""
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4375
		{
			return unimplemented(sqllex)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4376
		{
			return unimplemented(sqllex)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4377
		{
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4380
		{
			return unimplemented(sqllex)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4381
		{
			return unimplemented(sqllex)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4387
		{
			return unimplemented(sqllex)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4388
		{
			return unimplemented(sqllex)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4389
		{
			return unimplemented(sqllex)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4390
		{
			return unimplemented(sqllex)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4391
		{
			return unimplemented(sqllex)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = Any
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = Some
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = All
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = Plus
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = Minus
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = Mult
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = Div
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = FloorDiv
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = Mod
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = Bitand
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = Bitor
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = Bitxor
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = Bitxor
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = LT
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = GT
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = EQ
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = LE
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = GE
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = NE
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = Like
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = NotLike
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = ILike
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = NotILike
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4616
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4756
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4916
		{
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4952
		{
			return unimplemented(sqllex)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = DNull
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4991
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.str = ""
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
