// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680
const HELPTOKEN = 57681

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6515

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	358, 53,
	-2, 674,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	141, 527,
	-2, 0,
	-1, 61,
	92, 674,
	145, 674,
	310, 674,
	311, 674,
	-2, 0,
	-1, 72,
	103, 649,
	112, 649,
	153, 649,
	172, 649,
	197, 649,
	203, 649,
	307, 649,
	-2, 638,
	-1, 104,
	4, 676,
	20, 676,
	21, 676,
	23, 676,
	28, 676,
	33, 676,
	34, 676,
	35, 676,
	36, 676,
	37, 676,
	38, 676,
	39, 676,
	40, 676,
	41, 676,
	42, 676,
	44, 676,
	45, 676,
	46, 676,
	47, 676,
	48, 676,
	51, 676,
	52, 676,
	53, 676,
	55, 676,
	56, 676,
	60, 676,
	61, 676,
	62, 676,
	64, 676,
	66, 676,
	67, 676,
	68, 676,
	71, 676,
	72, 676,
	73, 676,
	81, 676,
	82, 676,
	83, 676,
	84, 676,
	85, 676,
	86, 676,
	87, 676,
	88, 676,
	90, 676,
	92, 676,
	94, 676,
	97, 676,
	98, 676,
	100, 676,
	104, 676,
	105, 676,
	106, 676,
	107, 676,
	108, 676,
	109, 676,
	113, 676,
	114, 676,
	115, 676,
	116, 676,
	117, 676,
	119, 676,
	121, 676,
	126, 676,
	127, 676,
	129, 676,
	131, 676,
	132, 676,
	133, 676,
	134, 676,
	135, 676,
	136, 676,
	137, 676,
	140, 676,
	142, 676,
	145, 676,
	146, 676,
	147, 676,
	148, 676,
	149, 676,
	150, 676,
	151, 676,
	152, 676,
	154, 676,
	157, 676,
	158, 676,
	159, 676,
	161, 676,
	162, 676,
	163, 676,
	165, 676,
	166, 676,
	168, 676,
	170, 676,
	173, 676,
	176, 676,
	178, 676,
	179, 676,
	180, 676,
	181, 676,
	182, 676,
	183, 676,
	185, 676,
	186, 676,
	187, 676,
	188, 676,
	192, 676,
	193, 676,
	194, 676,
	195, 676,
	196, 676,
	198, 676,
	200, 676,
	201, 676,
	204, 676,
	205, 676,
	207, 676,
	209, 676,
	210, 676,
	211, 676,
	212, 676,
	213, 676,
	214, 676,
	216, 676,
	217, 676,
	218, 676,
	219, 676,
	220, 676,
	222, 676,
	223, 676,
	224, 676,
	225, 676,
	226, 676,
	227, 676,
	228, 676,
	229, 676,
	231, 676,
	232, 676,
	233, 676,
	234, 676,
	235, 676,
	236, 676,
	237, 676,
	238, 676,
	239, 676,
	240, 676,
	241, 676,
	242, 676,
	244, 676,
	246, 676,
	247, 676,
	248, 676,
	249, 676,
	251, 676,
	252, 676,
	253, 676,
	254, 676,
	256, 676,
	257, 676,
	258, 676,
	259, 676,
	260, 676,
	262, 676,
	263, 676,
	264, 676,
	265, 676,
	267, 676,
	268, 676,
	269, 676,
	270, 676,
	272, 676,
	273, 676,
	274, 676,
	275, 676,
	276, 676,
	277, 676,
	278, 676,
	279, 676,
	280, 676,
	281, 676,
	283, 676,
	285, 676,
	286, 676,
	287, 676,
	288, 676,
	289, 676,
	290, 676,
	291, 676,
	293, 676,
	294, 676,
	295, 676,
	298, 676,
	299, 676,
	300, 676,
	301, 676,
	303, 676,
	304, 676,
	305, 676,
	306, 676,
	309, 676,
	310, 676,
	311, 676,
	312, 676,
	314, 676,
	316, 676,
	317, 676,
	318, 676,
	319, 676,
	320, 676,
	321, 676,
	324, 676,
	329, 676,
	330, 676,
	331, 676,
	332, 676,
	333, 676,
	-2, 0,
	-1, 117,
	103, 648,
	112, 648,
	153, 648,
	172, 648,
	197, 648,
	203, 648,
	307, 648,
	-2, 641,
	-1, 122,
	1, 576,
	157, 576,
	222, 576,
	226, 576,
	357, 576,
	358, 576,
	-2, 0,
	-1, 124,
	1, 576,
	357, 576,
	358, 576,
	-2, 0,
	-1, 125,
	1, 576,
	357, 576,
	358, 576,
	-2, 0,
	-1, 126,
	1, 580,
	357, 580,
	358, 580,
	-2, 0,
	-1, 133,
	4, 682,
	5, 682,
	6, 682,
	7, 682,
	8, 682,
	9, 682,
	20, 682,
	21, 682,
	23, 682,
	28, 682,
	29, 682,
	33, 682,
	34, 682,
	35, 682,
	36, 682,
	37, 682,
	38, 682,
	39, 682,
	40, 682,
	41, 682,
	42, 682,
	44, 682,
	45, 682,
	46, 682,
	47, 682,
	48, 682,
	49, 682,
	50, 682,
	51, 682,
	52, 682,
	53, 682,
	55, 682,
	56, 682,
	58, 682,
	60, 682,
	61, 682,
	62, 682,
	64, 682,
	66, 682,
	67, 682,
	68, 682,
	70, 682,
	71, 682,
	72, 682,
	73, 682,
	75, 682,
	76, 682,
	77, 682,
	79, 682,
	80, 682,
	81, 682,
	82, 682,
	83, 682,
	84, 682,
	85, 682,
	86, 682,
	87, 682,
	88, 682,
	90, 682,
	92, 682,
	94, 682,
	97, 682,
	98, 682,
	100, 682,
	104, 682,
	105, 682,
	106, 682,
	107, 682,
	108, 682,
	109, 682,
	110, 682,
	113, 682,
	114, 682,
	115, 682,
	116, 682,
	117, 682,
	119, 682,
	121, 682,
	124, 682,
	126, 682,
	127, 682,
	129, 682,
	131, 682,
	132, 682,
	133, 682,
	134, 682,
	135, 682,
	136, 682,
	137, 682,
	138, 682,
	140, 682,
	142, 682,
	144, 682,
	145, 682,
	146, 682,
	147, 682,
	148, 682,
	149, 682,
	150, 682,
	151, 682,
	152, 682,
	154, 682,
	156, 682,
	157, 682,
	158, 682,
	159, 682,
	160, 682,
	161, 682,
	162, 682,
	163, 682,
	165, 682,
	166, 682,
	168, 682,
	169, 682,
	170, 682,
	171, 682,
	173, 682,
	176, 682,
	178, 682,
	179, 682,
	180, 682,
	181, 682,
	182, 682,
	183, 682,
	184, 682,
	185, 682,
	186, 682,
	187, 682,
	188, 682,
	189, 682,
	191, 682,
	192, 682,
	193, 682,
	194, 682,
	195, 682,
	196, 682,
	198, 682,
	201, 682,
	204, 682,
	205, 682,
	206, 682,
	207, 682,
	208, 682,
	209, 682,
	210, 682,
	211, 682,
	212, 682,
	213, 682,
	214, 682,
	216, 682,
	217, 682,
	218, 682,
	219, 682,
	220, 682,
	222, 682,
	223, 682,
	224, 682,
	225, 682,
	226, 682,
	227, 682,
	228, 682,
	229, 682,
	231, 682,
	232, 682,
	233, 682,
	234, 682,
	235, 682,
	236, 682,
	237, 682,
	238, 682,
	239, 682,
	240, 682,
	241, 682,
	242, 682,
	244, 682,
	245, 682,
	246, 682,
	247, 682,
	248, 682,
	249, 682,
	251, 682,
	252, 682,
	253, 682,
	254, 682,
	256, 682,
	257, 682,
	258, 682,
	259, 682,
	260, 682,
	261, 682,
	262, 682,
	263, 682,
	264, 682,
	265, 682,
	266, 682,
	267, 682,
	268, 682,
	269, 682,
	270, 682,
	272, 682,
	273, 682,
	274, 682,
	275, 682,
	276, 682,
	277, 682,
	278, 682,
	279, 682,
	280, 682,
	281, 682,
	283, 682,
	285, 682,
	286, 682,
	287, 682,
	288, 682,
	289, 682,
	290, 682,
	291, 682,
	293, 682,
	294, 682,
	295, 682,
	298, 682,
	299, 682,
	300, 682,
	301, 682,
	302, 682,
	303, 682,
	304, 682,
	305, 682,
	306, 682,
	309, 682,
	310, 682,
	311, 682,
	312, 682,
	313, 682,
	314, 682,
	316, 682,
	317, 682,
	318, 682,
	319, 682,
	320, 682,
	321, 682,
	324, 682,
	329, 682,
	330, 682,
	331, 682,
	332, 682,
	333, 682,
	334, 682,
	340, 682,
	345, 682,
	346, 682,
	347, 682,
	354, 682,
	360, 682,
	-2, 0,
	-1, 136,
	1, 53,
	358, 53,
	-2, 674,
	-1, 599,
	123, 1272,
	296, 1272,
	339, 1272,
	356, 1272,
	-2, 0,
	-1, 600,
	123, 1224,
	296, 1224,
	339, 1224,
	356, 1224,
	-2, 0,
	-1, 602,
	123, 1330,
	296, 1330,
	339, 1330,
	356, 1330,
	-2, 0,
	-1, 604,
	123, 1352,
	296, 1352,
	339, 1352,
	356, 1352,
	-2, 0,
	-1, 611,
	123, 1277,
	296, 1277,
	339, 1277,
	356, 1277,
	-2, 318,
	-1, 637,
	1, 395,
	353, 395,
	355, 395,
	357, 395,
	358, 395,
	-2, 0,
	-1, 638,
	1, 443,
	120, 443,
	353, 443,
	355, 443,
	357, 443,
	358, 443,
	-2, 0,
	-1, 644,
	1, 409,
	353, 409,
	355, 409,
	357, 409,
	358, 409,
	-2, 0,
	-1, 646,
	1, 413,
	353, 413,
	355, 413,
	357, 413,
	358, 413,
	-2, 0,
	-1, 649,
	1, 421,
	353, 421,
	355, 421,
	357, 421,
	358, 421,
	-2, 0,
	-1, 650,
	1, 426,
	353, 426,
	355, 426,
	357, 426,
	358, 426,
	-2, 0,
	-1, 653,
	1, 436,
	353, 436,
	355, 436,
	357, 436,
	358, 436,
	-2, 0,
	-1, 667,
	112, 684,
	172, 684,
	197, 684,
	-2, 644,
	-1, 670,
	112, 683,
	172, 683,
	197, 683,
	-2, 642,
	-1, 727,
	354, 1202,
	-2, 1195,
	-1, 728,
	354, 1203,
	-2, 1196,
	-1, 734,
	5, 859,
	354, 859,
	-2, 1403,
	-1, 759,
	5, 818,
	-2, 1373,
	-1, 760,
	5, 853,
	354, 853,
	-2, 1375,
	-1, 761,
	5, 828,
	-2, 1376,
	-1, 762,
	5, 827,
	-2, 1377,
	-1, 763,
	5, 853,
	354, 853,
	-2, 1380,
	-1, 764,
	5, 853,
	354, 853,
	-2, 1381,
	-1, 765,
	5, 854,
	-2, 1384,
	-1, 766,
	5, 810,
	-2, 1385,
	-1, 767,
	5, 810,
	-2, 1386,
	-1, 768,
	5, 835,
	-2, 1390,
	-1, 769,
	5, 820,
	-2, 1391,
	-1, 770,
	5, 821,
	-2, 1392,
	-1, 771,
	5, 811,
	-2, 1397,
	-1, 772,
	5, 812,
	-2, 1398,
	-1, 773,
	5, 813,
	-2, 1399,
	-1, 774,
	5, 814,
	-2, 1400,
	-1, 775,
	5, 815,
	-2, 1401,
	-1, 776,
	5, 816,
	-2, 1402,
	-1, 777,
	5, 810,
	-2, 1407,
	-1, 778,
	5, 819,
	-2, 1412,
	-1, 779,
	5, 817,
	-2, 1415,
	-1, 780,
	5, 851,
	354, 851,
	-2, 1417,
	-1, 781,
	5, 855,
	-2, 1420,
	-1, 782,
	5, 857,
	-2, 1421,
	-1, 783,
	5, 850,
	354, 850,
	-2, 1426,
	-1, 865,
	213, 672,
	-2, 520,
	-1, 869,
	199, 1199,
	-2, 0,
	-1, 904,
	1, 208,
	353, 208,
	355, 208,
	357, 208,
	358, 208,
	-2, 647,
	-1, 911,
	4, 1425,
	10, 1425,
	11, 1425,
	13, 1425,
	14, 1425,
	15, 1425,
	16, 1425,
	17, 1425,
	18, 1425,
	20, 1425,
	21, 1425,
	23, 1425,
	26, 1425,
	28, 1425,
	30, 1425,
	33, 1425,
	34, 1425,
	35, 1425,
	36, 1425,
	37, 1425,
	38, 1425,
	39, 1425,
	40, 1425,
	41, 1425,
	42, 1425,
	44, 1425,
	45, 1425,
	46, 1425,
	47, 1425,
	48, 1425,
	51, 1425,
	52, 1425,
	53, 1425,
	55, 1425,
	56, 1425,
	57, 1425,
	60, 1425,
	61, 1425,
	62, 1425,
	63, 1425,
	64, 1425,
	66, 1425,
	67, 1425,
	68, 1425,
	70, 1425,
	71, 1425,
	72, 1425,
	73, 1425,
	81, 1425,
	82, 1425,
	83, 1425,
	84, 1425,
	85, 1425,
	86, 1425,
	87, 1425,
	88, 1425,
	90, 1425,
	92, 1425,
	94, 1425,
	97, 1425,
	98, 1425,
	100, 1425,
	104, 1425,
	105, 1425,
	106, 1425,
	107, 1425,
	108, 1425,
	109, 1425,
	113, 1425,
	114, 1425,
	115, 1425,
	116, 1425,
	117, 1425,
	118, 1425,
	119, 1425,
	121, 1425,
	124, 1425,
	126, 1425,
	127, 1425,
	129, 1425,
	131, 1425,
	132, 1425,
	133, 1425,
	134, 1425,
	135, 1425,
	136, 1425,
	137, 1425,
	138, 1425,
	139, 1425,
	140, 1425,
	142, 1425,
	144, 1425,
	145, 1425,
	146, 1425,
	147, 1425,
	148, 1425,
	149, 1425,
	150, 1425,
	151, 1425,
	152, 1425,
	154, 1425,
	156, 1425,
	157, 1425,
	158, 1425,
	159, 1425,
	160, 1425,
	161, 1425,
	162, 1425,
	163, 1425,
	165, 1425,
	166, 1425,
	168, 1425,
	169, 1425,
	170, 1425,
	171, 1425,
	173, 1425,
	176, 1425,
	177, 1425,
	178, 1425,
	179, 1425,
	180, 1425,
	181, 1425,
	182, 1425,
	183, 1425,
	184, 1425,
	185, 1425,
	186, 1425,
	187, 1425,
	188, 1425,
	192, 1425,
	193, 1425,
	194, 1425,
	195, 1425,
	196, 1425,
	198, 1425,
	201, 1425,
	202, 1425,
	204, 1425,
	205, 1425,
	207, 1425,
	209, 1425,
	210, 1425,
	211, 1425,
	212, 1425,
	213, 1425,
	214, 1425,
	216, 1425,
	217, 1425,
	218, 1425,
	219, 1425,
	220, 1425,
	222, 1425,
	223, 1425,
	224, 1425,
	225, 1425,
	226, 1425,
	227, 1425,
	228, 1425,
	229, 1425,
	231, 1425,
	232, 1425,
	233, 1425,
	234, 1425,
	235, 1425,
	236, 1425,
	237, 1425,
	238, 1425,
	239, 1425,
	240, 1425,
	241, 1425,
	242, 1425,
	244, 1425,
	245, 1425,
	246, 1425,
	247, 1425,
	248, 1425,
	249, 1425,
	250, 1425,
	251, 1425,
	252, 1425,
	253, 1425,
	254, 1425,
	256, 1425,
	257, 1425,
	258, 1425,
	259, 1425,
	260, 1425,
	262, 1425,
	263, 1425,
	264, 1425,
	265, 1425,
	266, 1425,
	267, 1425,
	268, 1425,
	269, 1425,
	270, 1425,
	272, 1425,
	273, 1425,
	274, 1425,
	275, 1425,
	276, 1425,
	277, 1425,
	278, 1425,
	279, 1425,
	280, 1425,
	281, 1425,
	283, 1425,
	285, 1425,
	286, 1425,
	287, 1425,
	288, 1425,
	289, 1425,
	290, 1425,
	291, 1425,
	293, 1425,
	294, 1425,
	295, 1425,
	298, 1425,
	299, 1425,
	300, 1425,
	301, 1425,
	303, 1425,
	304, 1425,
	305, 1425,
	306, 1425,
	309, 1425,
	310, 1425,
	311, 1425,
	312, 1425,
	314, 1425,
	316, 1425,
	317, 1425,
	318, 1425,
	319, 1425,
	320, 1425,
	321, 1425,
	324, 1425,
	329, 1425,
	330, 1425,
	331, 1425,
	332, 1425,
	333, 1425,
	334, 1425,
	335, 1425,
	337, 1425,
	338, 1425,
	339, 1425,
	340, 1425,
	342, 1425,
	343, 1425,
	344, 1425,
	345, 1425,
	346, 1425,
	347, 1425,
	348, 1425,
	349, 1425,
	350, 1425,
	352, 1425,
	355, 1425,
	356, 1425,
	359, 1425,
	360, 1425,
	-2, 0,
	-1, 924,
	123, 1330,
	296, 1330,
	339, 1330,
	356, 1330,
	-2, 0,
	-1, 941,
	123, 1352,
	296, 1352,
	339, 1352,
	356, 1352,
	-2, 0,
	-1, 1011,
	112, 683,
	172, 683,
	197, 683,
	-2, 645,
	-1, 1080,
	103, 649,
	112, 649,
	153, 649,
	172, 649,
	197, 649,
	203, 649,
	307, 649,
	-2, 978,
	-1, 1090,
	354, 1179,
	-2, 1167,
	-1, 1107,
	355, 1119,
	-2, 0,
	-1, 1163,
	103, 649,
	112, 649,
	153, 649,
	172, 649,
	197, 649,
	203, 649,
	307, 649,
	-2, 745,
	-1, 1396,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 894,
	-1, 1397,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 895,
	-1, 1398,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 896,
	-1, 1402,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 900,
	-1, 1403,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 901,
	-1, 1404,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 902,
	-1, 1407,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 907,
	-1, 1413,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 909,
	-1, 1415,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 913,
	-1, 1416,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 914,
	-1, 1417,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 915,
	-1, 1418,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 916,
	-1, 1444,
	208, 1061,
	-2, 1064,
	-1, 1486,
	123, 1101,
	354, 1202,
	-2, 1195,
	-1, 1487,
	123, 1102,
	-2, 1369,
	-1, 1488,
	123, 1103,
	-2, 1276,
	-1, 1489,
	123, 1104,
	-2, 1239,
	-1, 1490,
	123, 1105,
	-2, 1256,
	-1, 1491,
	123, 1106,
	-2, 1275,
	-1, 1492,
	123, 1107,
	-2, 1327,
	-1, 1568,
	1, 746,
	70, 746,
	103, 746,
	112, 746,
	124, 746,
	128, 746,
	130, 746,
	144, 746,
	153, 746,
	160, 746,
	169, 746,
	172, 746,
	184, 746,
	197, 746,
	199, 746,
	203, 746,
	243, 746,
	245, 746,
	307, 746,
	315, 746,
	326, 746,
	327, 746,
	336, 746,
	353, 746,
	355, 746,
	357, 746,
	358, 746,
	359, 746,
	-2, 745,
	-1, 1708,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 908,
	-1, 1709,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 910,
	-1, 1714,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 911,
	-1, 1732,
	208, 1060,
	-2, 1063,
	-1, 1956,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 912,
	-1, 1961,
	156, 0,
	-2, 928,
	-1, 1971,
	208, 1062,
	-2, 1065,
	-1, 2013,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 955,
	-1, 2014,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 956,
	-1, 2015,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 957,
	-1, 2019,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 961,
	-1, 2020,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 962,
	-1, 2021,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 963,
	-1, 2147,
	156, 0,
	-2, 929,
	-1, 2150,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 932,
	-1, 2151,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 934,
	-1, 2268,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 933,
	-1, 2269,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 935,
	-1, 2276,
	156, 0,
	-2, 964,
	-1, 2353,
	156, 0,
	-2, 965,
	-1, 2430,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1372,
}

const sqlPrivate = 57344

const sqlLast = 41308

var sqlAct = [...]int{

	728, 2102, 2429, 2438, 2404, 1631, 2477, 2439, 2302, 2440,
	1990, 1200, 1639, 1938, 2358, 2428, 2248, 671, 687, 1611,
	71, 1292, 2112, 2201, 2137, 1563, 1905, 1242, 726, 2135,
	817, 1207, 859, 1243, 474, 962, 2215, 1907, 2282, 2074,
	174, 704, 1293, 1628, 174, 1846, 1610, 1798, 2181, 1157,
	1140, 1615, 174, 1014, 2129, 1825, 1203, 1161, 2073, 1581,
	1614, 174, 1640, 1564, 476, 679, 116, 174, 174, 1912,
	1833, 174, 2044, 1572, 174, 1797, 1743, 1468, 439, 1086,
	1604, 1442, 174, 1370, 1698, 1169, 1702, 1375, 1323, 1196,
	945, 610, 1171, 1141, 1515, 1686, 725, 1452, 698, 1430,
	718, 1427, 1319, 944, 1117, 894, 436, 1121, 1462, 1612,
	964, 891, 905, 823, 1633, 1166, 1618, 1550, 1537, 884,
	826, 590, 1148, 805, 1075, 607, 1482, 116, 174, 174,
	697, 1015, 1013, 1322, 720, 1131, 174, 117, 603, 466,
	676, 1214, 703, 881, 170, 165, 1130, 2216, 803, 1019,
	631, 118, 2058, 1731, 948, 2059, 1222, 1632, 1222, 1222,
	39, 1158, 174, 174, 174, 174, 675, 2473, 2454, 174,
	174, 1191, 2214, 42, 2450, 2449, 675, 1954, 1654, 1654,
	1768, 1769, 1922, 455, 25, 1605, 393, 2446, 2426, 847,
	1921, 1191, 1669, 2425, 2399, 670, 1188, 1669, 1662, 1654,
	1768, 1769, 116, 1786, 1787, 1788, 1539, 2394, 2047, 1735,
	685, 2263, 721, 582, 2390, 1736, 2146, 2382, 1191, 949,
	2355, 2214, 2333, 950, 1662, 786, 2214, 2330, 2328, 1734,
	2400, 1191, 2214, 1030, 1031, 1654, 1050, 1051, 1052, 1060,
	1061, 1062, 2313, 2312, 2290, 1669, 1191, 2214, 1191, 1053,
	1605, 820, 785, 1783, 668, 2263, 1033, 2287, 2047, 1064,
	64, 1191, 1030, 1031, 809, 2270, 810, 1538, 667, 1662,
	841, 680, 1949, 1669, 1570, 831, 835, 807, 824, 2026,
	1032, 1968, 1191, 733, 1895, 1033, 1047, 2236, 1774, 2234,
	2213, 1654, 2194, 1654, 2214, 2174, 1191, 2152, 2149, 1654,
	1701, 1654, 1662, 1684, 833, 837, 2128, 843, 1774, 1032,
	1609, 2123, 1135, 1446, 2054, 1609, 1030, 1031, 2055, 1965,
	25, 1932, 1654, 1654, 1894, 1895, 1849, 1822, 1191, 1815,
	1654, 1191, 1742, 1816, 1813, 845, 926, 923, 1654, 1033,
	65, 1038, 136, 1465, 1812, 2217, 1789, 1784, 1654, 1223,
	1811, 1223, 1223, 1732, 1654, 1673, 1300, 1654, 922, 1654,
	1661, 1057, 1065, 1032, 1662, 120, 67, 1784, 68, 1653,
	1038, 1608, 1544, 1654, 1235, 1609, 1543, 921, 1236, 1063,
	1220, 133, 1320, 133, 920, 133, 919, 918, 461, 917,
	1466, 100, 916, 915, 1055, 914, 913, 38, 912, 811,
	1048, 174, 808, 174, 174, 663, 174, 662, 39, 122,
	135, 174, 135, 661, 135, 629, 678, 174, 1921, 628,
	1785, 42, 627, 788, 1038, 1054, 626, 625, 624, 1048,
	174, 174, 174, 174, 174, 124, 1467, 1464, 623, 908,
	1785, 43, 1538, 48, 622, 621, 134, 620, 134, 619,
	134, 1636, 618, 898, 127, 617, 1768, 1769, 127, 676,
	616, 128, 174, 615, 51, 128, 614, 1228, 53, 1221,
	1354, 613, 59, 1049, 598, 125, 597, 596, 595, 60,
	119, 61, 119, 1048, 119, 1841, 594, 1479, 427, 1058,
	426, 425, 863, 424, 423, 867, 408, 407, 399, 62,
	398, 397, 1049, 396, 389, 63, 388, 159, 64, 1783,
	158, 1469, 1779, 1777, 1778, 1770, 1771, 1772, 1773, 1775,
	1776, 887, 887, 157, 156, 155, 154, 1780, 1781, 1782,
	883, 153, 1779, 1777, 1778, 1770, 1771, 1772, 1773, 1775,
	1776, 152, 858, 151, 150, 149, 148, 1477, 147, 906,
	888, 146, 145, 144, 143, 142, 1049, 1056, 141, 837,
	1044, 1045, 1046, 1059, 1774, 1043, 1041, 1042, 1034, 1035,
	1036, 1037, 1039, 1040, 843, 140, 139, 174, 138, 137,
	1768, 1769, 2176, 1786, 1787, 1788, 851, 1326, 65, 1463,
	1162, 957, 2472, 174, 66, 2445, 2145, 1034, 1035, 1036,
	1037, 1039, 1040, 174, 1768, 1769, 1475, 2256, 2427, 2409,
	1026, 1667, 73, 120, 67, 2350, 68, 133, 69, 2331,
	126, 2180, 2179, 1784, 2175, 70, 2167, 2166, 2165, 133,
	2161, 2160, 2159, 1783, 908, 2158, 81, 2134, 2041, 100,
	2036, 2035, 2034, 1897, 851, 1976, 135, 1893, 123, 1041,
	1042, 1034, 1035, 1036, 1037, 1039, 1040, 1853, 135, 1820,
	1817, 1438, 1805, 1796, 1767, 174, 1764, 1763, 927, 133,
	1761, 1748, 1030, 1031, 1747, 1568, 960, 104, 1026, 1239,
	818, 1094, 134, 1025, 1160, 1012, 121, 1087, 1774, 1078,
	127, 1159, 856, 1206, 134, 1033, 1785, 128, 135, 1992,
	955, 2417, 127, 2385, 2379, 1768, 1769, 2378, 2377, 128,
	2369, 2367, 1774, 2345, 1030, 1031, 1635, 2344, 2343, 1032,
	1321, 1697, 2299, 676, 2278, 2264, 1789, 2242, 119, 1696,
	2220, 2172, 2110, 2108, 134, 2107, 2105, 1033, 2082, 2081,
	942, 939, 127, 2062, 1011, 2050, 1960, 1784, 1884, 128,
	1936, 1879, 1866, 1865, 1851, 1768, 1769, 1821, 1795, 1757,
	1756, 1032, 2255, 1753, 1728, 1723, 1432, 1439, 119, 1122,
	1125, 1555, 1527, 1473, 1030, 1031, 1199, 1518, 1010, 819,
	1038, 1768, 1769, 958, 1138, 1129, 1115, 1114, 1779, 1777,
	1778, 1770, 1771, 1772, 1773, 1775, 1776, 1033, 1113, 1112,
	1160, 1111, 1110, 174, 1109, 174, 1108, 837, 1107, 1106,
	1105, 1104, 1103, 1774, 1102, 1101, 1100, 668, 1099, 1098,
	1785, 1032, 1038, 1022, 1023, 1091, 1079, 1078, 174, 174,
	938, 667, 1027, 1839, 930, 902, 2361, 2262, 1146, 2154,
	1478, 1139, 2133, 2057, 2053, 908, 174, 1664, 676, 1556,
	1768, 1769, 476, 1087, 1179, 1934, 1866, 1076, 174, 1908,
	1672, 1090, 954, 1774, 1144, 2266, 2265, 2259, 1119, 1120,
	174, 2060, 1784, 1923, 1177, 1123, 174, 1127, 174, 1205,
	174, 1048, 1128, 1162, 174, 1126, 1192, 1189, 116, 1774,
	1605, 1198, 1178, 1819, 1818, 1707, 951, 1008, 1453, 1939,
	1476, 1096, 691, 1671, 1204, 1465, 1307, 1780, 1781, 1782,
	2283, 1632, 1779, 1777, 1778, 1770, 1771, 1772, 1773, 1775,
	1776, 1993, 1784, 857, 1134, 174, 174, 1211, 1917, 1156,
	1118, 2069, 908, 2412, 174, 1002, 1658, 174, 2469, 2389,
	1132, 1772, 1773, 1775, 1776, 1785, 1739, 2470, 1164, 1160,
	1946, 2228, 1466, 1136, 1049, 1674, 800, 798, 476, 1474,
	413, 796, 2323, 1582, 1240, 794, 2322, 174, 994, 791,
	824, 1167, 174, 1574, 1003, 1574, 674, 174, 174, 2093,
	174, 1573, 174, 1172, 174, 1173, 174, 2321, 2320, 883,
	1190, 1172, 1327, 1173, 2097, 1785, 2095, 174, 1467, 1464,
	1197, 2066, 787, 174, 174, 2065, 1752, 1034, 1035, 1036,
	1037, 1039, 1040, 414, 1751, 1750, 1749, 1710, 837, 1213,
	1215, 1216, 1215, 1657, 1601, 1597, 673, 1595, 1414, 174,
	1093, 1585, 819, 476, 1133, 952, 844, 1308, 1500, 1778,
	1770, 1771, 1772, 1773, 1775, 1776, 1301, 2239, 1042, 1034,
	1035, 1036, 1037, 1039, 1040, 1531, 160, 116, 1328, 2388,
	1174, 1530, 1295, 939, 1376, 1383, 1238, 1384, 1174, 1357,
	1385, 1237, 1629, 1469, 428, 1352, 675, 1298, 953, 1294,
	2100, 2101, 2304, 175, 665, 1890, 1312, 1324, 1777, 1778,
	1770, 1771, 1772, 1773, 1775, 1776, 1935, 1332, 1342, 676,
	1194, 1030, 1031, 1336, 676, 1337, 1351, 1338, 2423, 1339,
	401, 1340, 1217, 1001, 1040, 422, 1770, 1771, 1772, 1773,
	1775, 1776, 1335, 1198, 1033, 1172, 1429, 1173, 1346, 1348,
	1584, 1429, 577, 2084, 174, 417, 174, 163, 1469, 174,
	1699, 1700, 2461, 1249, 988, 1355, 1356, 477, 1032, 1914,
	174, 1463, 1677, 1331, 1374, 432, 1280, 668, 1536, 476,
	668, 668, 174, 1679, 1316, 2469, 174, 1450, 967, 174,
	1665, 1366, 1453, 174, 1367, 1368, 1029, 174, 416, 415,
	672, 989, 174, 1279, 1680, 1186, 676, 937, 174, 476,
	1776, 405, 174, 1558, 1945, 164, 1678, 1886, 1877, 1440,
	174, 1185, 1174, 1986, 1437, 1881, 1170, 174, 1182, 1038,
	2091, 467, 1571, 431, 1248, 1557, 2442, 1583, 174, 1180,
	174, 1183, 174, 1603, 1575, 174, 730, 174, 1007, 174,
	174, 1493, 174, 174, 472, 1301, 2396, 908, 1915, 1184,
	468, 174, 2480, 1249, 1249, 2372, 1947, 1586, 1588, 1350,
	802, 2485, 1652, 801, 792, 1533, 1280, 1280, 792, 1534,
	2397, 1116, 793, 1542, 993, 1547, 792, 469, 998, 1225,
	1552, 1553, 1227, 1548, 1436, 1624, 1230, 1222, 1469, 1434,
	1175, 2274, 1914, 1279, 1279, 2327, 1164, 471, 1175, 1578,
	1591, 1299, 824, 1602, 2305, 1596, 713, 2085, 1073, 1567,
	1755, 116, 1551, 2443, 1768, 1769, 675, 116, 824, 2141,
	2209, 1569, 1018, 1646, 1248, 1248, 887, 1720, 887, 837,
	1660, 975, 2441, 390, 837, 2468, 2466, 476, 2460, 418,
	843, 1638, 1718, 999, 1649, 174, 171, 2247, 161, 1626,
	394, 1650, 1655, 933, 1647, 2210, 1648, 906, 409, 1656,
	1659, 174, 174, 174, 1282, 174, 430, 434, 1666, 2444,
	1643, 1685, 1593, 580, 171, 948, 666, 588, 1599, 419,
	593, 843, 843, 1668, 174, 943, 1712, 162, 612, 925,
	2478, 1428, 1123, 1889, 1126, 433, 1000, 1983, 1147, 968,
	1353, 1017, 400, 1120, 1119, 429, 2022, 470, 1634, 420,
	1634, 421, 1301, 1715, 1675, 1425, 2315, 1311, 1310, 116,
	1320, 1317, 1774, 1716, 576, 1330, 406, 1721, 1411, 2314,
	1423, 402, 1175, 2491, 806, 806, 969, 2459, 2297, 966,
	949, 403, 394, 1984, 950, 2479, 2364, 1028, 1036, 1037,
	1039, 1040, 1151, 1847, 2486, 2205, 948, 2206, 936, 2068,
	1689, 1016, 473, 676, 1282, 1282, 2481, 1691, 394, 394,
	839, 394, 1154, 1862, 1695, 171, 848, 1858, 1693, 2170,
	1223, 1784, 1627, 1741, 1212, 2227, 1018, 2208, 1149, 391,
	1082, 1201, 2226, 1151, 2224, 1362, 2211, 1152, 656, 1982,
	2023, 1419, 1314, 1690, 843, 1692, 2024, 837, 1306, 1420,
	1017, 1421, 1150, 1154, 2405, 1426, 684, 861, 1469, 1848,
	1345, 949, 1713, 1711, 860, 950, 1706, 1835, 976, 1549,
	1409, 1412, 909, 1435, 1717, 2490, 676, 1302, 1152, 167,
	948, 1719, 1727, 2113, 2249, 1836, 784, 2298, 1868, 1867,
	174, 476, 1304, 1823, 1785, 392, 174, 174, 1829, 1738,
	174, 1705, 1546, 1408, 1305, 174, 1363, 1286, 174, 1545,
	1016, 948, 1830, 1153, 2207, 585, 174, 657, 579, 2171,
	880, 673, 174, 174, 174, 1828, 1315, 869, 174, 878,
	2103, 174, 2225, 1843, 2223, 2240, 2295, 174, 174, 174,
	174, 174, 1888, 2182, 3, 949, 174, 2045, 174, 950,
	478, 1472, 174, 959, 1153, 656, 2277, 1802, 1803, 1804,
	174, 2296, 1422, 1863, 1842, 997, 2169, 2099, 1838, 1424,
	174, 1147, 174, 684, 174, 986, 1852, 174, 1799, 1859,
	1959, 174, 1824, 1834, 460, 33, 174, 1891, 174, 1770,
	1771, 1772, 1773, 1775, 1776, 174, 1762, 1863, 1410, 1910,
	1722, 1896, 1670, 1898, 1607, 1827, 676, 1600, 174, 908,
	1594, 1831, 1832, 1854, 1006, 1837, 1005, 658, 931, 1800,
	908, 174, 1343, 459, 32, 1151, 1334, 1876, 984, 849,
	1233, 1097, 824, 992, 657, 1471, 850, 982, 824, 824,
	2437, 2402, 824, 980, 978, 1154, 1933, 612, 846, 865,
	612, 1931, 870, 458, 29, 1973, 174, 873, 1919, 457,
	77, 1149, 1940, 394, 1855, 1900, 1296, 909, 456, 76,
	1152, 584, 2198, 879, 578, 1916, 612, 612, 394, 895,
	848, 829, 877, 790, 1924, 1150, 996, 587, 1880, 453,
	21, 454, 22, 972, 2089, 659, 985, 2087, 1321, 1318,
	2067, 1962, 1892, 1930, 1904, 1630, 174, 464, 612, 1623,
	1942, 1943, 1978, 1979, 1980, 1944, 1941, 452, 27, 1903,
	1232, 33, 1231, 1948, 451, 19, 1878, 660, 1197, 1950,
	449, 18, 1883, 1229, 658, 1952, 1226, 1197, 450, 17,
	443, 13, 1249, 1376, 1997, 1906, 1153, 445, 16, 983,
	1224, 991, 1376, 2002, 467, 1280, 1899, 1187, 981, 1902,
	32, 444, 14, 1969, 979, 977, 1972, 442, 12, 1181,
	448, 10, 441, 8, 876, 1176, 1249, 472, 1985, 1987,
	1988, 2470, 1279, 468, 1994, 2033, 2338, 174, 2261, 1280,
	29, 1999, 2260, 174, 1325, 2029, 77, 1996, 1953, 2130,
	462, 2340, 174, 174, 1590, 76, 2001, 1443, 795, 797,
	469, 1082, 659, 1248, 971, 1447, 1279, 2122, 2056, 1455,
	1703, 2063, 2374, 612, 2030, 1249, 21, 2217, 22, 970,
	471, 1485, 1485, 1498, 1574, 1510, 2352, 116, 1280, 934,
	1589, 1522, 1523, 1525, 660, 2079, 174, 1248, 174, 612,
	2043, 2098, 2048, 2049, 27, 174, 2046, 2061, 908, 447,
	6, 19, 2109, 446, 5, 1279, 2064, 18, 440, 4,
	586, 1365, 174, 174, 2071, 17, 2124, 13, 909, 2106,
	2183, 1020, 1704, 1281, 16, 477, 1249, 1561, 1024, 1598,
	174, 1574, 2127, 2115, 2114, 875, 1248, 1587, 14, 1280,
	174, 2092, 2052, 1592, 12, 476, 2104, 10, 2401, 8,
	2245, 394, 1637, 2078, 2118, 2120, 2116, 2080, 1625, 1030,
	1031, 1622, 1249, 1249, 1535, 910, 1279, 1297, 2126, 824,
	814, 1249, 1249, 2119, 2125, 1280, 1280, 2131, 2148, 2144,
	470, 1241, 1033, 174, 1280, 1280, 2476, 2489, 1768, 1769,
	815, 1030, 1031, 1282, 1021, 1682, 1681, 1248, 2289, 1501,
	1030, 1031, 1279, 1279, 1249, 909, 1032, 2188, 2132, 2042,
	1989, 1279, 1279, 1682, 1937, 1844, 1814, 1280, 1925, 1926,
	1683, 1927, 1928, 1281, 1281, 1532, 1529, 1282, 1827, 1528,
	2143, 477, 1461, 1248, 1248, 473, 6, 2168, 174, 1084,
	5, 174, 1248, 1248, 1279, 4, 2156, 1032, 1981, 1901,
	1094, 476, 174, 174, 1643, 824, 174, 174, 174, 1092,
	2186, 1004, 995, 816, 990, 987, 973, 935, 664, 2303,
	465, 1333, 2193, 174, 974, 1248, 1282, 2192, 174, 1840,
	174, 1554, 174, 174, 174, 2190, 174, 2185, 174, 593,
	908, 806, 2222, 2187, 2189, 2395, 2162, 1754, 174, 174,
	2079, 2357, 2273, 2218, 1470, 908, 477, 1095, 52, 2197,
	2076, 2238, 707, 2199, 394, 394, 2070, 2243, 1617, 1616,
	479, 1309, 729, 1484, 2079, 1377, 789, 731, 1246, 2079,
	2221, 732, 171, 1247, 1124, 719, 1244, 1282, 903, 1641,
	2251, 2250, 1313, 1433, 394, 2244, 1451, 1245, 1737, 1088,
	2252, 699, 711, 2184, 2241, 710, 1210, 1448, 929, 2246,
	910, 1845, 394, 1249, 394, 2272, 394, 1913, 2078, 2254,
	1218, 1361, 2080, 1282, 1282, 1694, 1280, 2253, 1358, 2117,
	824, 2086, 1282, 1282, 2258, 404, 1765, 901, 1507, 174,
	2279, 174, 2078, 476, 174, 1499, 2080, 2078, 1495, 1009,
	1726, 2080, 174, 1279, 1145, 1074, 1234, 1729, 476, 1642,
	956, 612, 171, 1920, 2286, 1282, 1663, 1137, 1369, 813,
	171, 2267, 812, 612, 2231, 1745, 1746, 2293, 2235, 1303,
	1676, 1067, 477, 2079, 1248, 2288, 1066, 799, 174, 1198,
	2291, 908, 2308, 2088, 2306, 2090, 174, 1245, 1245, 2366,
	947, 946, 2317, 612, 174, 174, 908, 908, 612, 1202,
	1861, 2079, 477, 171, 612, 2339, 612, 2484, 612, 2337,
	612, 2324, 612, 1794, 174, 2373, 2336, 2335, 2346, 174,
	2341, 2351, 2083, 1344, 2347, 1807, 174, 2411, 132, 612,
	612, 2329, 2307, 129, 2368, 2309, 2354, 2257, 2348, 2349,
	131, 2078, 130, 1887, 2360, 2080, 2362, 80, 31, 30,
	909, 174, 174, 99, 98, 612, 97, 2363, 174, 2371,
	1501, 1501, 96, 2383, 95, 94, 908, 2381, 689, 2078,
	2325, 174, 2384, 2080, 93, 908, 908, 2370, 92, 91,
	90, 89, 88, 87, 2301, 86, 85, 84, 83, 82,
	2387, 608, 1146, 605, 676, 79, 2392, 2393, 174, 78,
	174, 2386, 28, 174, 24, 476, 103, 23, 75, 1030,
	1031, 910, 74, 2418, 1282, 1249, 2420, 26, 478, 2407,
	2334, 2419, 15, 9, 20, 57, 2424, 58, 1280, 56,
	55, 174, 1033, 54, 2422, 1501, 1501, 1501, 11, 2413,
	477, 50, 2436, 2434, 2079, 2435, 49, 47, 174, 46,
	45, 2453, 2447, 44, 174, 1279, 1032, 7, 102, 2332,
	593, 41, 806, 2458, 2451, 848, 2455, 2452, 174, 2456,
	2457, 1249, 40, 101, 2421, 114, 394, 111, 2467, 2465,
	113, 110, 2471, 112, 1280, 115, 1248, 2408, 1566, 107,
	108, 2475, 394, 2474, 109, 394, 1724, 1725, 910, 1579,
	2380, 106, 105, 394, 37, 2483, 2487, 2482, 394, 2488,
	36, 1279, 2078, 35, 394, 34, 2080, 1038, 1606, 2,
	463, 1249, 1, 0, 478, 0, 1613, 0, 0, 0,
	0, 0, 0, 848, 1280, 0, 1966, 0, 0, 0,
	464, 0, 1248, 0, 394, 2410, 1645, 0, 612, 0,
	0, 612, 0, 612, 0, 394, 394, 0, 1651, 848,
	0, 1279, 0, 0, 0, 0, 0, 1579, 0, 0,
	0, 1791, 1792, 1793, 0, 0, 1048, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 467, 0, 0,
	0, 0, 1248, 0, 0, 0, 1643, 0, 0, 478,
	0, 0, 0, 2027, 0, 682, 0, 656, 0, 0,
	472, 0, 1281, 0, 2037, 0, 468, 0, 0, 0,
	0, 0, 0, 0, 0, 684, 1282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 852, 854,
	2318, 2319, 0, 469, 1501, 1501, 1281, 0, 0, 1049,
	0, 0, 0, 0, 477, 0, 0, 0, 683, 0,
	0, 1687, 0, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 394, 394, 394,
	0, 394, 1282, 0, 0, 0, 657, 2094, 0, 0,
	0, 0, 2096, 0, 0, 1281, 0, 0, 0, 0,
	394, 0, 0, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
	1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
	1501, 1501, 0, 1501, 0, 478, 0, 0, 0, 0,
	0, 0, 1282, 0, 0, 0, 0, 0, 0, 0,
	0, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040,
	0, 0, 0, 0, 0, 478, 1281, 0, 0, 1030,
	1031, 0, 1050, 1051, 1052, 1060, 1061, 1062, 0, 0,
	0, 0, 909, 470, 0, 1053, 0, 0, 0, 0,
	1957, 1958, 1033, 909, 0, 1064, 658, 0, 0, 0,
	0, 0, 1281, 1281, 0, 0, 0, 0, 0, 0,
	0, 1281, 1281, 910, 0, 0, 1032, 0, 0, 0,
	0, 0, 1047, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 928, 0, 0, 473, 0,
	0, 932, 0, 0, 1281, 0, 1245, 0, 0, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 689, 2025,
	0, 0, 681, 0, 659, 0, 394, 1038, 2209, 0,
	1245, 2202, 394, 394, 0, 0, 394, 0, 0, 2200,
	0, 1566, 0, 2204, 1566, 0, 0, 1057, 1065, 0,
	0, 0, 1850, 478, 0, 0, 660, 0, 394, 1856,
	1857, 0, 0, 2210, 1579, 1063, 0, 1864, 0, 0,
	0, 0, 0, 1869, 1870, 1872, 1874, 1875, 0, 1245,
	1055, 0, 394, 0, 1882, 2203, 1048, 0, 1885, 0,
	0, 0, 0, 0, 0, 0, 394, 0, 0, 1068,
	1069, 1070, 1071, 1072, 0, 0, 1210, 0, 1210, 1081,
	612, 1054, 0, 394, 0, 0, 0, 1909, 0, 1089,
	0, 0, 394, 0, 1918, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 0, 0, 0, 0, 0, 0,
	1245, 0, 0, 0, 1687, 0, 0, 0, 0, 0,
	0, 2285, 0, 1281, 0, 0, 0, 1687, 0, 1049,
	0, 0, 0, 2205, 0, 2206, 0, 0, 0, 0,
	0, 0, 708, 72, 0, 1058, 1245, 1245, 0, 0,
	0, 909, 0, 0, 0, 1245, 1245, 0, 2311, 0,
	0, 0, 394, 0, 0, 2208, 0, 0, 0, 0,
	0, 0, 0, 0, 2211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1245, 1142,
	1142, 0, 0, 0, 0, 0, 689, 0, 477, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 1991, 1056, 0, 0, 1044, 1045, 1046, 1059,
	0, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040,
	0, 0, 1501, 0, 0, 0, 0, 478, 1810, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2207, 0, 0, 0, 0, 0, 0, 669,
	0, 0, 677, 0, 38, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 39, 0, 0, 825, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 42, 0,
	2398, 0, 0, 394, 0, 0, 0, 1768, 1769, 1566,
	1786, 1787, 1788, 0, 477, 0, 0, 0, 848, 1566,
	48, 0, 0, 1964, 0, 2414, 2415, 2416, 0, 0,
	0, 0, 0, 2075, 0, 0, 0, 0, 0, 689,
	689, 0, 0, 0, 0, 1281, 0, 0, 0, 59,
	1501, 0, 0, 909, 0, 0, 60, 1245, 61, 0,
	1783, 0, 1579, 0, 1210, 910, 0, 0, 909, 0,
	0, 2111, 0, 0, 0, 0, 910, 0, 2276, 0,
	0, 0, 63, 0, 0, 64, 0, 0, 394, 394,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 0, 1359, 0, 1364, 2138, 0, 0, 0,
	0, 1371, 0, 0, 0, 1774, 2140, 0, 0, 2300,
	0, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
	1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404,
	1405, 1406, 1407, 0, 1413, 0, 1415, 1416, 1417, 1418,
	0, 1281, 0, 1789, 0, 0, 477, 0, 0, 2163,
	0, 0, 0, 1441, 0, 65, 0, 0, 0, 0,
	1081, 477, 0, 0, 1784, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2353, 0, 1480, 1481,
	120, 67, 1497, 68, 1509, 1511, 1516, 1519, 1520, 1521,
	0, 0, 0, 0, 909, 0, 133, 0, 0, 0,
	1688, 0, 0, 461, 394, 0, 100, 848, 0, 909,
	909, 0, 0, 0, 0, 0, 0, 0, 1566, 848,
	0, 0, 2195, 2196, 1579, 135, 0, 0, 0, 0,
	1030, 1031, 0, 0, 0, 0, 0, 1785, 2075, 848,
	0, 0, 0, 0, 2229, 0, 2230, 0, 394, 2232,
	2233, 0, 394, 1033, 2237, 0, 0, 0, 0, 1245,
	0, 134, 2075, 0, 848, 1613, 0, 2075, 0, 127,
	0, 0, 0, 0, 0, 0, 128, 1032, 0, 909,
	0, 677, 0, 1047, 0, 0, 0, 0, 909, 909,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 38,
	0, 0, 0, 0, 910, 0, 0, 0, 0, 0,
	39, 0, 0, 0, 0, 1245, 0, 0, 477, 0,
	0, 0, 0, 42, 1780, 1781, 1782, 0, 0, 1779,
	1777, 1778, 1770, 1771, 1772, 1773, 1775, 1776, 1038, 0,
	0, 0, 0, 0, 0, 48, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 1579, 0, 2292, 0, 0,
	2294, 0, 0, 0, 0, 1245, 0, 0, 394, 0,
	0, 2075, 0, 0, 59, 0, 0, 0, 0, 0,
	0, 60, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2326, 1048, 0, 2075,
	0, 0, 0, 0, 394, 0, 0, 63, 0, 0,
	64, 0, 848, 0, 0, 0, 0, 0, 0, 0,
	2138, 2138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2359, 0, 0, 0, 0, 1566, 0, 0, 0, 0,
	0, 0, 1210, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1049, 0, 0, 0, 0, 0, 0, 2375, 2376, 0,
	0, 0, 0, 0, 394, 1708, 1709, 0, 0, 0,
	65, 1714, 0, 0, 0, 0, 910, 2391, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 910, 0, 0, 0, 120, 67, 0, 68, 0,
	0, 0, 669, 1733, 2406, 0, 848, 0, 0, 394,
	1740, 133, 0, 1744, 0, 1341, 0, 0, 461, 0,
	0, 100, 2075, 1077, 0, 1080, 0, 0, 0, 0,
	1758, 0, 1085, 0, 0, 0, 0, 2359, 0, 0,
	135, 0, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039,
	1040, 0, 0, 0, 848, 0, 0, 0, 0, 0,
	394, 0, 1081, 0, 0, 0, 0, 0, 0, 1516,
	1516, 1516, 0, 0, 2464, 0, 134, 0, 0, 478,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 128, 0, 0, 478, 1142, 0, 0, 0, 0,
	689, 0, 0, 0, 0, 0, 0, 0, 1030, 1031,
	119, 1050, 1051, 1052, 1060, 1061, 1062, 0, 0, 0,
	0, 0, 0, 0, 1053, 0, 0, 910, 0, 0,
	0, 1033, 0, 0, 1064, 0, 0, 0, 0, 0,
	0, 0, 910, 910, 0, 72, 0, 0, 0, 0,
	1163, 0, 0, 0, 0, 1032, 0, 1030, 1031, 0,
	0, 1047, 0, 1060, 1061, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1033, 0, 0, 1064, 0, 0, 0, 0, 0, 1911,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1032, 0, 0, 0, 0, 0,
	1047, 1929, 910, 0, 0, 0, 1038, 0, 0, 0,
	0, 910, 910, 0, 0, 0, 0, 0, 689, 689,
	0, 0, 0, 0, 0, 0, 1057, 1065, 0, 0,
	0, 689, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 478, 0, 1951, 1063, 0, 0, 0, 1371, 0,
	0, 0, 0, 0, 1955, 1038, 0, 1956, 0, 1055,
	0, 0, 0, 0, 0, 1048, 0, 0, 0, 1961,
	0, 0, 0, 0, 0, 1057, 1065, 0, 1970, 0,
	0, 0, 0, 0, 0, 0, 1974, 0, 0, 1929,
	1054, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 1055, 1998,
	0, 0, 0, 2000, 1048, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 669, 0, 0, 669, 669, 0, 1049, 0,
	0, 0, 0, 0, 0, 0, 2031, 2032, 0, 0,
	0, 0, 0, 0, 1058, 2038, 2039, 2040, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1030, 1031, 0,
	1050, 1051, 1052, 1060, 1061, 1062, 0, 0, 1431, 0,
	0, 0, 2051, 1053, 0, 0, 0, 1049, 0, 0,
	1033, 677, 0, 1064, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 1058, 0, 0, 0, 0, 0, 0,
	0, 0, 2072, 0, 1032, 0, 0, 0, 0, 0,
	1047, 0, 1056, 0, 0, 1044, 1045, 1046, 1059, 0,
	1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0,
	0, 0, 0, 0, 0, 0, 0, 1809, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1142, 825, 0, 0, 0, 0, 0, 0, 0,
	689, 1056, 0, 0, 0, 1038, 0, 1059, 1163, 1043,
	1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0, 0,
	0, 72, 0, 0, 0, 1057, 1065, 72, 0, 0,
	0, 0, 0, 0, 1155, 0, 2147, 0, 0, 0,
	2150, 2151, 0, 1063, 0, 2153, 0, 0, 0, 0,
	38, 0, 2155, 0, 2157, 0, 0, 72, 1055, 72,
	0, 39, 0, 0, 1048, 0, 0, 0, 0, 0,
	2164, 0, 0, 0, 42, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 1054,
	0, 0, 0, 0, 0, 0, 48, 0, 0, 0,
	0, 0, 0, 2173, 0, 0, 0, 0, 0, 0,
	1030, 1031, 0, 1050, 1051, 1052, 1060, 1061, 1062, 0,
	0, 0, 0, 0, 0, 59, 1053, 0, 0, 0,
	0, 0, 60, 1033, 61, 0, 1064, 1049, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1058, 2219, 0, 0, 1032, 63, 0,
	0, 64, 0, 1047, 0, 0, 1030, 1031, 0, 1050,
	1051, 1052, 1060, 1061, 1062, 0, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 0, 72, 0, 0, 1033,
	1768, 1769, 1064, 1786, 1787, 1788, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1963, 0, 0, 0,
	0, 0, 0, 1032, 0, 0, 0, 0, 1038, 1047,
	0, 1056, 2268, 2269, 1044, 1045, 1046, 1059, 0, 1043,
	1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 1057, 1065,
	0, 65, 0, 1783, 0, 0, 1808, 0, 0, 0,
	0, 0, 0, 2281, 0, 1431, 1063, 1030, 1031, 2284,
	1050, 1051, 1052, 1060, 1061, 1062, 120, 67, 0, 68,
	0, 1055, 0, 1053, 1038, 1080, 0, 1048, 0, 0,
	1033, 0, 133, 1064, 0, 0, 0, 0, 0, 461,
	0, 0, 100, 0, 1057, 1065, 0, 437, 1774, 0,
	0, 0, 1054, 2316, 1032, 0, 0, 0, 0, 0,
	1047, 135, 1063, 0, 0, 0, 0, 0, 38, 1768,
	1769, 0, 1786, 1787, 1788, 0, 0, 1055, 0, 39,
	0, 0, 0, 1048, 0, 0, 1789, 0, 0, 0,
	0, 0, 42, 0, 0, 0, 0, 134, 1080, 0,
	1049, 0, 0, 0, 0, 127, 0, 1784, 1054, 0,
	0, 0, 128, 0, 48, 1038, 1058, 0, 0, 0,
	0, 0, 1783, 0, 0, 0, 2365, 0, 0, 0,
	0, 119, 825, 0, 0, 1057, 1065, 0, 825, 825,
	0, 0, 825, 59, 0, 0, 0, 0, 0, 0,
	60, 0, 61, 1063, 0, 0, 1049, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1055, 0,
	689, 0, 1058, 0, 1048, 0, 63, 1774, 0, 64,
	1785, 0, 0, 0, 1056, 72, 0, 1044, 1045, 1046,
	1059, 72, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039,
	1040, 0, 0, 0, 0, 0, 0, 0, 0, 1760,
	0, 0, 0, 0, 0, 72, 0, 0, 72, 0,
	0, 0, 0, 2433, 2433, 0, 0, 0, 677, 0,
	0, 0, 0, 0, 0, 0, 1784, 0, 0, 2448,
	1056, 0, 0, 1044, 1045, 1046, 1059, 1049, 1043, 1041,
	1042, 1034, 1035, 1036, 1037, 1039, 1040, 2433, 0, 65,
	0, 2403, 0, 1058, 0, 0, 0, 1780, 1781, 1782,
	0, 0, 1779, 1777, 1778, 1770, 1771, 1772, 1773, 1775,
	1776, 0, 0, 0, 120, 67, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 2433, 0, 0, 0, 461, 0, 1785,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 1056, 0, 0, 1044, 1045, 1046, 1059, 0, 1043,
	1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1780, 1781, 1782, 438,
	0, 1779, 1777, 1778, 1770, 1771, 1772, 1773, 1775, 1776,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 1460, 0, 727, 716, 717, 714, 715, 706, 825,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 1457, 178, 0, 0, 0, 0, 744, 709, 0,
	0, 0, 179, 180, 181, 333, 759, 335, 760, 182,
	761, 762, 0, 183, 339, 340, 184, 185, 712, 743,
	763, 764, 343, 0, 186, 755, 0, 735, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 481,
	194, 195, 196, 0, 736, 737, 739, 0, 738, 740,
	197, 198, 395, 199, 765, 200, 766, 767, 0, 201,
	0, 202, 0, 203, 1458, 825, 758, 205, 0, 206,
	0, 0, 0, 700, 207, 208, 209, 745, 746, 723,
	0, 0, 210, 211, 768, 769, 770, 0, 212, 0,
	213, 0, 0, 482, 0, 214, 756, 0, 355, 0,
	215, 216, 217, 218, 219, 752, 754, 484, 0, 223,
	0, 220, 0, 483, 221, 771, 222, 772, 773, 774,
	775, 776, 0, 734, 0, 485, 224, 225, 226, 486,
	227, 228, 229, 0, 231, 230, 0, 757, 487, 232,
	488, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 489, 240, 241, 243, 242, 695, 0,
	724, 753, 244, 777, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 490, 250, 491, 747, 251,
	252, 253, 254, 255, 0, 256, 748, 257, 372, 258,
	825, 259, 260, 261, 262, 263, 778, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 492, 279, 280, 701, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	741, 293, 282, 283, 294, 493, 295, 779, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 780, 300, 301,
	749, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 781, 782, 0, 72, 312, 313, 750,
	751, 722, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 742, 322, 0, 385, 323, 324, 325, 386,
	783, 1456, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 696, 0, 0, 0, 0, 0, 694,
	0, 0, 0, 0, 692, 693, 1459, 0, 0, 0,
	0, 0, 0, 702, 1454, 0, 0, 0, 0, 705,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2342, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 494, 178, 495, 496, 497,
	498, 332, 499, 500, 501, 502, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 503, 183, 339, 340,
	184, 185, 504, 505, 341, 342, 343, 506, 186, 344,
	507, 480, 508, 187, 188, 189, 1080, 190, 509, 191,
	192, 193, 510, 481, 194, 195, 196, 511, 512, 514,
	513, 515, 516, 517, 197, 198, 395, 199, 345, 200,
	346, 347, 518, 201, 519, 202, 520, 203, 521, 522,
	204, 205, 523, 206, 524, 0, 525, 348, 207, 208,
	209, 349, 350, 526, 527, 528, 210, 211, 351, 352,
	353, 0, 212, 529, 213, 530, 531, 482, 532, 214,
	354, 533, 355, 534, 215, 216, 217, 218, 219, 356,
	357, 484, 535, 223, 536, 220, 537, 483, 221, 358,
	222, 359, 360, 361, 362, 363, 538, 364, 539, 485,
	224, 225, 226, 486, 227, 228, 229, 540, 231, 230,
	541, 365, 487, 232, 488, 542, 233, 543, 544, 234,
	0, 235, 236, 237, 239, 366, 238, 489, 240, 241,
	243, 242, 545, 546, 547, 367, 244, 368, 245, 246,
	548, 247, 549, 550, 248, 551, 552, 249, 369, 490,
	250, 491, 370, 251, 252, 253, 254, 255, 553, 256,
	371, 257, 372, 258, 554, 259, 260, 261, 262, 263,
	373, 264, 265, 555, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 556, 278, 492, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 557, 290,
	375, 289, 291, 292, 558, 293, 282, 283, 294, 493,
	295, 376, 377, 296, 559, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 560, 304, 561, 305, 306,
	307, 308, 309, 310, 311, 562, 380, 381, 382, 563,
	564, 312, 313, 383, 384, 565, 314, 315, 316, 317,
	566, 567, 318, 319, 320, 321, 568, 322, 569, 385,
	323, 324, 325, 386, 387, 570, 571, 326, 572, 573,
	574, 575, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 0, 1559, 0, 0, 0, 0,
	0, 0, 0, 0, 1560, 176, 177, 494, 178, 495,
	496, 497, 498, 332, 499, 500, 501, 502, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 503, 183,
	339, 340, 184, 185, 504, 505, 341, 342, 343, 506,
	186, 344, 507, 480, 508, 187, 188, 189, 0, 190,
	509, 191, 192, 193, 510, 481, 194, 195, 196, 511,
	512, 514, 513, 515, 516, 517, 197, 198, 395, 199,
	345, 200, 346, 347, 518, 201, 519, 202, 520, 203,
	521, 522, 204, 205, 523, 206, 524, 0, 525, 348,
	207, 208, 209, 349, 350, 526, 527, 528, 210, 211,
	351, 352, 353, 0, 212, 529, 213, 530, 531, 482,
	532, 214, 354, 533, 355, 534, 215, 216, 217, 218,
	219, 356, 357, 484, 535, 223, 536, 220, 537, 483,
	221, 358, 222, 359, 360, 361, 362, 363, 538, 364,
	539, 485, 224, 225, 226, 486, 227, 228, 229, 540,
	231, 230, 541, 365, 487, 232, 488, 542, 233, 543,
	544, 234, 0, 235, 236, 237, 239, 366, 238, 489,
	240, 241, 243, 242, 545, 546, 547, 367, 244, 368,
	245, 246, 548, 247, 549, 550, 248, 551, 552, 249,
	369, 490, 250, 491, 370, 251, 252, 253, 254, 255,
	553, 256, 371, 257, 372, 258, 554, 259, 260, 261,
	262, 263, 373, 264, 265, 555, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 556, 278,
	492, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	557, 290, 375, 289, 291, 292, 558, 293, 282, 283,
	294, 493, 295, 376, 377, 296, 559, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 560, 304, 561,
	305, 306, 307, 308, 309, 310, 311, 562, 380, 381,
	382, 563, 564, 312, 313, 383, 384, 565, 314, 315,
	316, 317, 566, 567, 318, 319, 320, 321, 568, 322,
	569, 385, 323, 324, 325, 386, 387, 570, 571, 326,
	572, 573, 574, 575, 327, 328, 329, 330, 331, 0,
	0, 0, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2191, 176, 177,
	494, 178, 495, 496, 497, 498, 332, 499, 500, 501,
	502, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 503, 183, 339, 340, 184, 185, 504, 505, 341,
	342, 343, 506, 186, 344, 507, 480, 508, 187, 188,
	189, 0, 190, 509, 191, 192, 193, 510, 481, 194,
	195, 196, 511, 512, 514, 513, 515, 516, 517, 197,
	198, 395, 199, 345, 200, 346, 347, 518, 201, 519,
	202, 520, 203, 521, 522, 204, 205, 523, 206, 524,
	0, 525, 348, 207, 208, 209, 349, 350, 526, 527,
	528, 210, 211, 351, 352, 353, 0, 212, 529, 213,
	530, 531, 482, 532, 214, 354, 533, 355, 534, 215,
	216, 217, 218, 219, 356, 357, 484, 535, 223, 536,
	220, 537, 483, 221, 358, 222, 359, 360, 361, 362,
	363, 538, 364, 539, 485, 224, 225, 226, 486, 227,
	228, 229, 540, 231, 230, 541, 365, 487, 232, 488,
	542, 233, 543, 544, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 545, 546, 547,
	367, 244, 368, 245, 246, 548, 247, 549, 550, 248,
	551, 552, 249, 369, 490, 250, 491, 370, 251, 252,
	253, 254, 255, 553, 256, 371, 257, 372, 258, 554,
	259, 260, 261, 262, 263, 373, 264, 265, 555, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 556, 278, 492, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 557, 290, 375, 289, 291, 292, 558,
	293, 282, 283, 294, 493, 295, 376, 377, 296, 559,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	560, 304, 561, 305, 306, 307, 308, 309, 310, 311,
	562, 380, 381, 382, 563, 564, 312, 313, 383, 384,
	565, 314, 315, 316, 317, 566, 567, 318, 319, 320,
	321, 568, 322, 569, 385, 323, 324, 325, 386, 387,
	570, 571, 326, 572, 573, 574, 575, 327, 328, 329,
	330, 331, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1193, 0, 0, 176, 177,
	494, 178, 495, 496, 497, 498, 332, 499, 500, 501,
	502, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 503, 183, 339, 340, 184, 185, 504, 505, 341,
	342, 343, 506, 186, 344, 507, 480, 508, 187, 188,
	189, 0, 190, 509, 191, 192, 193, 510, 481, 194,
	195, 196, 511, 512, 514, 513, 515, 516, 517, 197,
	198, 395, 199, 345, 200, 346, 347, 518, 201, 519,
	202, 520, 203, 521, 522, 204, 205, 523, 206, 524,
	0, 525, 348, 207, 208, 209, 349, 350, 526, 527,
	528, 210, 211, 351, 352, 353, 0, 212, 529, 213,
	530, 531, 482, 532, 214, 354, 533, 355, 534, 215,
	216, 217, 218, 219, 356, 357, 484, 535, 223, 536,
	220, 537, 483, 221, 358, 222, 359, 360, 361, 362,
	363, 538, 364, 539, 485, 224, 225, 226, 486, 227,
	228, 229, 540, 231, 230, 541, 365, 487, 232, 488,
	542, 233, 543, 544, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 545, 546, 547,
	367, 244, 368, 245, 246, 548, 247, 549, 550, 248,
	551, 552, 249, 369, 490, 250, 491, 370, 251, 252,
	253, 254, 255, 553, 256, 371, 257, 372, 258, 554,
	259, 260, 261, 262, 263, 373, 264, 265, 555, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 556, 278, 492, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 557, 290, 375, 289, 291, 292, 558,
	293, 282, 283, 294, 493, 295, 376, 377, 296, 559,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	560, 304, 561, 305, 306, 307, 308, 309, 310, 311,
	562, 380, 381, 382, 563, 564, 312, 313, 383, 384,
	565, 314, 315, 316, 317, 566, 567, 318, 319, 320,
	321, 568, 322, 569, 385, 323, 324, 325, 386, 387,
	570, 571, 326, 572, 573, 574, 575, 327, 328, 329,
	330, 331, 727, 716, 717, 714, 715, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 744, 709, 0, 0,
	0, 179, 180, 181, 333, 759, 335, 760, 182, 761,
	762, 0, 183, 339, 340, 184, 185, 712, 743, 763,
	764, 343, 0, 186, 755, 0, 735, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 481, 194,
	195, 196, 0, 736, 737, 739, 0, 738, 740, 197,
	198, 395, 199, 765, 200, 766, 767, 690, 201, 0,
	202, 0, 203, 0, 0, 758, 205, 0, 206, 0,
	0, 0, 700, 207, 208, 209, 745, 746, 723, 0,
	0, 210, 211, 768, 769, 770, 0, 212, 0, 213,
	0, 0, 482, 0, 214, 756, 0, 355, 0, 215,
	216, 217, 218, 219, 752, 754, 484, 0, 223, 0,
	220, 0, 483, 221, 771, 222, 772, 773, 774, 775,
	776, 0, 734, 0, 485, 224, 225, 226, 486, 227,
	228, 229, 0, 231, 230, 0, 757, 487, 232, 488,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 695, 0, 724,
	753, 244, 777, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 490, 250, 491, 747, 251, 252,
	253, 254, 255, 0, 256, 748, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 778, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 492, 279, 280, 701, 281, 0, 285,
	286, 287, 288, 133, 290, 375, 289, 291, 292, 741,
	293, 282, 283, 294, 493, 295, 779, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 780, 300, 301, 749,
	0, 304, 135, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 781, 782, 0, 0, 312, 313, 750, 751,
	722, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 742, 322, 0, 385, 323, 324, 325, 911, 783,
	0, 0, 326, 0, 0, 0, 127, 327, 328, 329,
	330, 331, 696, 128, 0, 0, 0, 0, 694, 0,
	0, 0, 0, 692, 693, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 678, 705, 727,
	716, 717, 714, 715, 706, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 744, 709, 0, 0, 0, 179, 180,
	181, 333, 759, 335, 760, 182, 761, 762, 0, 183,
	339, 340, 184, 185, 712, 743, 763, 764, 343, 0,
	186, 755, 0, 735, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 481, 194, 195, 196, 0,
	736, 737, 739, 0, 738, 740, 197, 198, 395, 199,
	765, 200, 766, 767, 0, 201, 0, 202, 0, 203,
	0, 0, 758, 205, 0, 206, 0, 0, 0, 700,
	207, 208, 209, 745, 746, 723, 0, 0, 210, 211,
	768, 769, 770, 0, 212, 0, 213, 0, 0, 482,
	0, 214, 756, 0, 355, 0, 215, 216, 217, 218,
	219, 752, 754, 484, 0, 223, 0, 220, 0, 483,
	221, 771, 222, 772, 773, 774, 775, 776, 0, 734,
	0, 485, 224, 225, 226, 486, 227, 228, 229, 0,
	231, 230, 0, 757, 487, 232, 488, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 489,
	240, 241, 243, 242, 695, 0, 724, 753, 244, 777,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 490, 250, 491, 747, 251, 252, 253, 254, 255,
	0, 256, 748, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 778, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	492, 279, 280, 701, 281, 0, 285, 286, 287, 288,
	133, 290, 375, 289, 291, 292, 741, 293, 282, 283,
	294, 493, 295, 779, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 780, 300, 301, 749, 0, 304, 135,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 781,
	782, 0, 0, 312, 313, 750, 751, 722, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 742, 322,
	0, 385, 323, 324, 325, 911, 783, 0, 0, 326,
	0, 0, 0, 127, 327, 328, 329, 330, 331, 696,
	128, 0, 0, 0, 0, 694, 0, 0, 0, 0,
	692, 693, 727, 716, 717, 714, 715, 706, 0, 1083,
	0, 0, 0, 0, 0, 705, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 744, 709, 0, 0,
	0, 179, 180, 181, 333, 759, 335, 760, 182, 761,
	762, 0, 183, 339, 340, 184, 185, 712, 743, 763,
	764, 343, 0, 186, 755, 0, 735, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 481, 194,
	195, 196, 0, 736, 737, 739, 0, 738, 740, 197,
	198, 395, 199, 765, 200, 766, 767, 0, 201, 0,
	202, 0, 203, 0, 0, 758, 205, 0, 206, 0,
	0, 0, 700, 207, 208, 209, 745, 746, 723, 0,
	0, 210, 211, 768, 769, 770, 0, 212, 0, 213,
	0, 0, 482, 0, 214, 756, 0, 355, 0, 215,
	216, 217, 218, 219, 752, 754, 484, 0, 223, 0,
	220, 0, 483, 221, 771, 222, 772, 773, 774, 775,
	776, 0, 734, 0, 485, 224, 225, 226, 486, 227,
	228, 229, 0, 231, 230, 0, 757, 487, 232, 488,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 695, 0, 724,
	753, 244, 777, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 490, 250, 491, 747, 251, 252,
	253, 254, 255, 0, 256, 748, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 778, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 492, 279, 280, 701, 281, 0, 285,
	286, 287, 288, 133, 290, 375, 289, 291, 292, 741,
	293, 282, 283, 294, 493, 295, 779, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 780, 300, 301, 749,
	0, 304, 135, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 781, 782, 0, 0, 312, 313, 750, 751,
	722, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 742, 322, 0, 385, 323, 324, 325, 911, 783,
	0, 0, 326, 0, 0, 0, 127, 327, 328, 329,
	330, 331, 696, 128, 0, 0, 0, 0, 694, 0,
	0, 0, 0, 692, 693, 727, 716, 717, 714, 715,
	706, 0, 1083, 0, 0, 0, 0, 0, 705, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 744,
	709, 0, 0, 0, 179, 180, 181, 333, 759, 335,
	760, 182, 761, 762, 1512, 183, 339, 340, 184, 185,
	712, 743, 763, 764, 343, 0, 186, 755, 0, 735,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 481, 194, 195, 196, 0, 736, 737, 739, 0,
	738, 740, 197, 198, 395, 199, 765, 200, 766, 767,
	0, 201, 0, 202, 0, 203, 0, 0, 758, 205,
	0, 206, 0, 0, 0, 700, 207, 208, 209, 745,
	746, 723, 0, 0, 210, 211, 768, 769, 770, 0,
	212, 0, 213, 0, 1517, 482, 0, 214, 756, 0,
	355, 0, 215, 216, 217, 218, 219, 752, 754, 484,
	0, 223, 0, 220, 0, 483, 221, 771, 222, 772,
	773, 774, 775, 776, 0, 734, 0, 485, 224, 225,
	226, 486, 227, 228, 229, 0, 231, 230, 1513, 757,
	487, 232, 488, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 489, 240, 241, 243, 242,
	695, 0, 724, 753, 244, 777, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 490, 250, 491,
	747, 251, 252, 253, 254, 255, 0, 256, 748, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 778, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 492, 279, 280, 701,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 741, 293, 282, 283, 294, 493, 295, 779,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 780,
	300, 301, 749, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 781, 782, 0, 1514, 312,
	313, 750, 751, 722, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 742, 322, 0, 385, 323, 324,
	325, 386, 783, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 696, 0, 0, 0, 0,
	0, 694, 0, 0, 0, 0, 692, 693, 0, 0,
	0, 0, 0, 0, 0, 702, 0, 0, 0, 0,
	686, 705, 727, 716, 717, 714, 715, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 744, 709, 0, 0,
	0, 179, 180, 181, 333, 759, 335, 760, 182, 761,
	762, 0, 183, 339, 340, 184, 185, 712, 743, 763,
	764, 343, 0, 186, 755, 0, 735, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 481, 194,
	195, 196, 0, 736, 737, 739, 0, 738, 740, 197,
	198, 395, 199, 765, 200, 766, 767, 690, 201, 0,
	202, 0, 203, 0, 0, 758, 205, 0, 206, 0,
	0, 0, 700, 207, 208, 209, 745, 746, 723, 0,
	0, 210, 211, 768, 769, 770, 0, 212, 0, 213,
	0, 0, 482, 0, 214, 756, 0, 355, 0, 215,
	216, 217, 218, 219, 752, 754, 484, 0, 223, 0,
	220, 0, 483, 221, 771, 222, 772, 773, 774, 775,
	776, 0, 734, 0, 485, 224, 225, 226, 486, 227,
	228, 229, 0, 231, 230, 0, 757, 487, 232, 488,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 695, 0, 724,
	753, 244, 777, 245, 246, 0, 247, 688, 0, 248,
	0, 0, 249, 369, 490, 250, 491, 747, 251, 252,
	253, 254, 255, 0, 256, 748, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 778, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 492, 279, 280, 701, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 741,
	293, 282, 283, 294, 493, 295, 779, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 780, 300, 301, 749,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 781, 782, 0, 0, 312, 313, 750, 751,
	722, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 742, 322, 0, 385, 323, 324, 325, 386, 783,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 696, 0, 0, 0, 0, 0, 694, 0,
	0, 0, 0, 692, 693, 727, 716, 717, 714, 715,
	706, 0, 702, 0, 0, 0, 0, 0, 705, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 744,
	709, 0, 0, 0, 179, 180, 181, 333, 759, 335,
	760, 182, 761, 762, 0, 183, 339, 340, 184, 185,
	712, 743, 763, 764, 343, 0, 186, 755, 0, 735,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 481, 194, 195, 196, 0, 736, 737, 739, 0,
	738, 740, 197, 198, 395, 199, 765, 200, 766, 767,
	0, 201, 0, 202, 0, 203, 0, 0, 758, 205,
	0, 206, 0, 0, 0, 700, 207, 208, 209, 745,
	746, 723, 0, 0, 210, 211, 768, 769, 770, 0,
	212, 0, 213, 0, 0, 482, 0, 214, 756, 0,
	355, 0, 215, 216, 217, 218, 219, 752, 754, 484,
	0, 223, 0, 220, 0, 483, 221, 771, 222, 772,
	773, 774, 775, 776, 0, 734, 0, 485, 224, 225,
	226, 486, 227, 228, 229, 0, 231, 230, 0, 757,
	487, 232, 488, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 489, 240, 241, 243, 242,
	695, 2121, 724, 753, 244, 777, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 490, 250, 491,
	747, 251, 252, 253, 254, 255, 0, 256, 748, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 778, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 492, 279, 280, 701,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 741, 293, 282, 283, 294, 493, 295, 779,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 780,
	300, 301, 749, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 781, 782, 0, 0, 312,
	313, 750, 751, 722, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 742, 322, 0, 385, 323, 324,
	325, 386, 783, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 696, 0, 0, 0, 0,
	0, 694, 0, 0, 0, 0, 692, 693, 1143, 727,
	716, 717, 714, 715, 706, 702, 0, 0, 0, 0,
	0, 705, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 744, 709, 0, 0, 0, 179, 180,
	181, 333, 759, 335, 760, 182, 761, 762, 0, 183,
	339, 340, 184, 185, 712, 743, 763, 764, 343, 0,
	186, 755, 0, 735, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 481, 194, 195, 196, 0,
	736, 737, 739, 0, 738, 740, 197, 198, 395, 199,
	765, 200, 766, 767, 0, 201, 0, 202, 0, 203,
	0, 0, 758, 205, 0, 206, 0, 0, 0, 700,
	207, 208, 209, 745, 746, 723, 0, 0, 210, 211,
	768, 769, 770, 0, 212, 0, 213, 0, 0, 482,
	0, 214, 756, 0, 355, 0, 215, 216, 217, 218,
	219, 752, 754, 484, 0, 223, 1373, 220, 0, 483,
	221, 771, 222, 772, 773, 774, 775, 776, 0, 734,
	0, 485, 224, 225, 226, 486, 227, 228, 229, 0,
	231, 230, 0, 757, 487, 232, 488, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 489,
	240, 241, 243, 242, 695, 0, 724, 753, 244, 777,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 490, 250, 491, 747, 251, 252, 253, 254, 255,
	0, 256, 748, 257, 372, 258, 1372, 259, 260, 261,
	262, 263, 778, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	492, 279, 280, 701, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 741, 293, 282, 283,
	294, 493, 295, 779, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 780, 300, 301, 749, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 781,
	782, 0, 0, 312, 313, 750, 751, 722, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 742, 322,
	0, 385, 323, 324, 325, 386, 783, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 696,
	0, 0, 0, 0, 0, 694, 0, 0, 0, 0,
	692, 693, 727, 716, 717, 714, 715, 706, 0, 702,
	0, 0, 0, 0, 0, 705, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 744, 709, 0, 0,
	0, 179, 180, 181, 333, 759, 335, 760, 182, 761,
	762, 0, 183, 339, 340, 184, 185, 712, 743, 763,
	764, 343, 0, 186, 755, 0, 735, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 481, 194,
	195, 196, 0, 736, 737, 739, 0, 738, 740, 197,
	198, 395, 199, 765, 200, 766, 767, 690, 201, 0,
	202, 0, 203, 0, 0, 758, 205, 0, 206, 0,
	0, 0, 700, 207, 208, 209, 745, 746, 723, 0,
	0, 210, 211, 768, 769, 770, 0, 212, 0, 213,
	0, 0, 482, 0, 214, 756, 0, 355, 0, 215,
	216, 217, 218, 219, 752, 754, 484, 0, 223, 0,
	220, 0, 483, 221, 771, 222, 772, 773, 774, 775,
	776, 0, 734, 0, 485, 224, 225, 226, 486, 227,
	228, 229, 0, 231, 230, 0, 757, 487, 232, 488,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 695, 0, 724,
	753, 244, 777, 245, 246, 0, 247, 688, 0, 248,
	0, 0, 249, 369, 490, 250, 491, 747, 251, 252,
	253, 254, 255, 0, 256, 748, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 778, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 492, 279, 280, 701, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 741,
	293, 282, 283, 294, 493, 295, 779, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 780, 300, 301, 749,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 781, 782, 0, 0, 312, 313, 750, 751,
	722, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 742, 322, 0, 385, 323, 324, 325, 386, 783,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 696, 0, 0, 0, 0, 0, 694, 0,
	0, 0, 0, 692, 693, 727, 716, 717, 714, 715,
	706, 0, 702, 0, 0, 0, 0, 0, 705, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 744,
	709, 0, 0, 0, 179, 180, 181, 333, 759, 335,
	760, 182, 761, 762, 0, 183, 339, 340, 184, 185,
	712, 743, 763, 764, 343, 0, 186, 755, 0, 735,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 481, 194, 195, 196, 0, 736, 737, 739, 0,
	738, 740, 197, 198, 395, 199, 765, 200, 766, 767,
	0, 201, 0, 202, 0, 203, 0, 0, 758, 205,
	0, 206, 0, 0, 0, 700, 207, 208, 209, 745,
	746, 723, 0, 0, 210, 211, 768, 769, 770, 0,
	212, 0, 213, 0, 0, 482, 0, 214, 756, 0,
	355, 0, 215, 216, 217, 218, 219, 752, 754, 484,
	0, 223, 0, 220, 0, 483, 221, 771, 222, 772,
	773, 774, 775, 776, 0, 734, 0, 485, 224, 225,
	226, 486, 227, 228, 229, 0, 231, 230, 0, 757,
	487, 232, 488, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 489, 240, 241, 243, 242,
	695, 0, 724, 753, 244, 777, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 490, 250, 491,
	747, 251, 252, 253, 254, 255, 0, 256, 748, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 778, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 492, 279, 280, 701,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 741, 293, 282, 283, 294, 493, 295, 779,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 780,
	300, 301, 749, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 781, 782, 0, 0, 312,
	313, 750, 751, 722, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 742, 322, 0, 385, 323, 324,
	325, 386, 783, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 696, 0, 0, 0, 0,
	0, 694, 0, 0, 0, 0, 692, 693, 0, 0,
	0, 0, 0, 1087, 1449, 702, 0, 0, 0, 0,
	0, 705, 727, 716, 717, 714, 715, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 744, 709, 0, 0,
	0, 179, 180, 181, 333, 759, 335, 760, 182, 761,
	762, 0, 183, 339, 340, 184, 185, 712, 743, 763,
	764, 343, 0, 186, 755, 0, 735, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 481, 194,
	195, 196, 0, 736, 737, 739, 0, 738, 740, 197,
	198, 395, 199, 765, 200, 766, 767, 690, 201, 0,
	202, 0, 203, 0, 0, 758, 205, 0, 206, 0,
	0, 0, 700, 207, 208, 209, 745, 746, 723, 0,
	0, 210, 211, 768, 769, 770, 0, 212, 0, 213,
	0, 0, 482, 0, 214, 756, 0, 355, 0, 215,
	216, 217, 218, 219, 752, 754, 484, 0, 223, 0,
	220, 0, 483, 221, 771, 222, 772, 773, 774, 775,
	776, 0, 734, 0, 485, 224, 225, 226, 486, 227,
	228, 229, 0, 231, 230, 0, 757, 487, 232, 488,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 695, 0, 724,
	753, 244, 777, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 490, 250, 491, 747, 251, 252,
	253, 254, 255, 0, 256, 748, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 778, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 492, 279, 280, 701, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 741,
	293, 282, 283, 294, 493, 295, 779, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 780, 300, 301, 749,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 781, 782, 0, 0, 312, 313, 750, 751,
	722, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 742, 322, 0, 385, 323, 324, 325, 386, 783,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 696, 0, 0, 0, 0, 0, 694, 0,
	0, 0, 0, 692, 693, 727, 716, 717, 714, 715,
	706, 0, 702, 0, 0, 0, 0, 0, 705, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 744,
	709, 0, 0, 0, 179, 180, 181, 333, 759, 335,
	760, 182, 761, 762, 0, 183, 339, 340, 184, 185,
	712, 743, 763, 764, 343, 0, 186, 755, 0, 735,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 481, 194, 195, 196, 0, 736, 737, 739, 0,
	738, 740, 197, 198, 395, 199, 765, 200, 766, 767,
	0, 201, 0, 202, 0, 203, 0, 0, 758, 205,
	0, 206, 0, 0, 0, 700, 207, 208, 209, 745,
	746, 723, 0, 0, 210, 211, 768, 769, 770, 0,
	212, 0, 213, 0, 0, 482, 0, 214, 756, 0,
	355, 0, 215, 216, 217, 218, 219, 752, 754, 484,
	0, 223, 0, 220, 0, 483, 221, 771, 222, 772,
	773, 774, 775, 776, 0, 734, 0, 485, 224, 225,
	226, 486, 227, 228, 229, 0, 231, 230, 0, 757,
	487, 232, 488, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 489, 240, 241, 243, 242,
	695, 0, 724, 753, 244, 777, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 490, 250, 491,
	747, 251, 252, 253, 254, 255, 0, 256, 748, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 778, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 492, 279, 280, 701,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 741, 293, 282, 283, 294, 493, 295, 779,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 780,
	300, 301, 749, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 781, 782, 0, 0, 312,
	313, 750, 751, 722, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 742, 322, 0, 385, 323, 324,
	325, 386, 783, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 696, 0, 0, 0, 0,
	0, 694, 0, 0, 0, 0, 692, 693, 727, 716,
	717, 714, 715, 706, 0, 702, 2028, 0, 0, 0,
	0, 705, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 744, 709, 0, 0, 0, 179, 180, 181,
	333, 759, 335, 760, 182, 761, 762, 0, 183, 339,
	340, 184, 185, 712, 743, 763, 764, 343, 0, 186,
	755, 0, 735, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 481, 194, 195, 196, 0, 736,
	737, 739, 0, 738, 740, 197, 198, 395, 199, 765,
	200, 766, 767, 0, 201, 0, 202, 0, 203, 0,
	0, 758, 205, 0, 206, 0, 0, 0, 700, 207,
	208, 209, 745, 746, 723, 0, 0, 210, 211, 768,
	769, 770, 0, 212, 0, 213, 0, 0, 482, 0,
	214, 756, 0, 355, 0, 215, 216, 217, 218, 219,
	752, 754, 484, 0, 223, 0, 220, 0, 483, 221,
	771, 222, 772, 773, 774, 775, 776, 0, 734, 0,
	485, 224, 225, 226, 486, 227, 228, 229, 0, 231,
	230, 0, 757, 487, 232, 488, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 489, 240,
	241, 243, 242, 695, 0, 724, 753, 244, 777, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	490, 250, 491, 747, 251, 252, 253, 254, 255, 0,
	256, 748, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 778, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 492,
	279, 280, 701, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 741, 293, 282, 283, 294,
	493, 295, 779, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 780, 300, 301, 749, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 781, 782,
	0, 0, 312, 313, 750, 751, 722, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 742, 322, 0,
	385, 323, 324, 325, 386, 783, 1977, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 696, 0,
	0, 0, 0, 0, 694, 0, 0, 0, 0, 692,
	693, 727, 716, 717, 714, 715, 706, 0, 702, 0,
	0, 0, 0, 0, 705, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 744, 709, 0, 0, 0,
	179, 180, 181, 333, 759, 335, 760, 182, 761, 762,
	0, 183, 339, 340, 184, 185, 712, 743, 763, 764,
	343, 0, 186, 755, 0, 735, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 481, 194, 195,
	196, 0, 736, 737, 739, 0, 738, 740, 197, 198,
	395, 199, 765, 200, 766, 767, 0, 201, 0, 202,
	0, 203, 0, 0, 758, 205, 0, 206, 0, 0,
	0, 700, 207, 208, 209, 745, 746, 723, 0, 0,
	210, 211, 768, 769, 770, 0, 212, 0, 213, 0,
	0, 482, 0, 214, 756, 0, 355, 0, 215, 216,
	217, 218, 219, 752, 754, 484, 0, 223, 0, 220,
	0, 483, 221, 771, 222, 772, 773, 774, 775, 776,
	0, 734, 0, 485, 224, 225, 226, 486, 227, 228,
	229, 0, 231, 230, 0, 757, 487, 232, 488, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 489, 240, 241, 243, 242, 695, 0, 724, 753,
	244, 777, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 490, 250, 491, 747, 251, 252, 253,
	254, 255, 0, 256, 748, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 778, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 492, 279, 280, 701, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 741, 293,
	282, 283, 294, 493, 295, 779, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 780, 300, 301, 749, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 781, 782, 0, 0, 312, 313, 750, 751, 722,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	742, 322, 0, 385, 323, 324, 325, 386, 783, 0,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 696, 0, 0, 0, 0, 0, 694, 0, 0,
	0, 0, 692, 693, 727, 716, 717, 714, 715, 706,
	0, 702, 1967, 0, 0, 0, 0, 705, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 744, 709,
	0, 0, 0, 179, 180, 181, 333, 759, 335, 760,
	182, 761, 762, 0, 183, 339, 340, 184, 185, 712,
	743, 763, 764, 343, 0, 186, 755, 0, 735, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	481, 194, 195, 196, 0, 736, 737, 739, 0, 738,
	740, 197, 198, 395, 199, 765, 200, 766, 767, 0,
	201, 0, 202, 0, 203, 0, 0, 758, 205, 0,
	206, 0, 0, 0, 700, 207, 208, 209, 745, 746,
	723, 0, 0, 210, 211, 768, 769, 770, 0, 212,
	0, 213, 0, 0, 482, 0, 214, 756, 0, 355,
	0, 215, 216, 217, 218, 219, 752, 754, 484, 0,
	223, 0, 220, 0, 483, 221, 771, 222, 772, 773,
	774, 775, 776, 0, 734, 0, 485, 224, 225, 226,
	486, 227, 228, 229, 0, 231, 230, 0, 757, 487,
	232, 488, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 489, 240, 241, 243, 242, 695,
	0, 724, 753, 244, 777, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 490, 250, 491, 747,
	251, 252, 253, 254, 255, 0, 256, 748, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 778, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 492, 279, 280, 701, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 741, 293, 282, 283, 294, 493, 295, 779, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 780, 300,
	301, 749, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 781, 782, 0, 0, 312, 313,
	750, 751, 722, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 742, 322, 0, 385, 323, 324, 325,
	386, 783, 0, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 696, 0, 0, 0, 0, 0,
	694, 0, 0, 0, 0, 692, 693, 1143, 727, 716,
	717, 714, 715, 706, 702, 0, 0, 0, 0, 0,
	705, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 744, 709, 0, 0, 0, 179, 180, 181,
	333, 759, 335, 760, 182, 761, 762, 0, 183, 339,
	340, 184, 185, 712, 743, 763, 764, 343, 0, 186,
	755, 0, 735, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 481, 194, 195, 196, 0, 736,
	737, 739, 0, 738, 740, 197, 198, 395, 199, 765,
	200, 766, 767, 0, 201, 0, 202, 0, 203, 0,
	0, 758, 205, 0, 206, 0, 0, 0, 700, 207,
	208, 209, 745, 746, 723, 0, 0, 210, 211, 768,
	769, 770, 0, 212, 0, 213, 0, 1517, 482, 0,
	214, 756, 0, 355, 0, 215, 216, 217, 218, 219,
	752, 754, 484, 0, 223, 0, 220, 0, 483, 221,
	771, 222, 772, 773, 774, 775, 776, 0, 734, 0,
	485, 224, 225, 226, 486, 227, 228, 229, 0, 231,
	230, 0, 757, 487, 232, 488, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 489, 240,
	241, 243, 242, 695, 0, 724, 753, 244, 777, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	490, 250, 491, 747, 251, 252, 253, 254, 255, 0,
	256, 748, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 778, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 492,
	279, 280, 701, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 741, 293, 282, 283, 294,
	493, 295, 779, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 780, 300, 301, 749, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 781, 782,
	0, 0, 312, 313, 750, 751, 722, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 742, 322, 0,
	385, 323, 324, 325, 386, 783, 0, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 696, 0,
	0, 0, 0, 0, 694, 0, 0, 0, 0, 692,
	693, 0, 0, 0, 0, 0, 0, 0, 702, 0,
	0, 0, 0, 1562, 705, 727, 716, 717, 714, 715,
	706, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 744,
	709, 0, 0, 0, 179, 180, 181, 333, 759, 335,
	760, 182, 761, 762, 0, 183, 339, 340, 184, 185,
	712, 743, 763, 764, 343, 0, 186, 755, 0, 735,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 481, 194, 195, 196, 0, 736, 737, 739, 0,
	738, 740, 197, 198, 395, 199, 765, 200, 766, 767,
	0, 201, 0, 202, 0, 203, 0, 0, 758, 205,
	0, 206, 0, 0, 0, 700, 207, 208, 209, 745,
	746, 723, 0, 0, 210, 211, 768, 769, 770, 0,
	212, 0, 213, 0, 0, 482, 0, 214, 756, 0,
	355, 0, 215, 216, 217, 218, 219, 752, 754, 484,
	0, 223, 0, 220, 0, 483, 221, 771, 222, 772,
	773, 774, 775, 776, 0, 734, 0, 485, 224, 225,
	226, 486, 227, 228, 229, 0, 231, 230, 0, 757,
	487, 232, 488, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 489, 240, 241, 243, 242,
	695, 0, 724, 753, 244, 777, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 490, 250, 491,
	747, 251, 252, 253, 254, 255, 0, 256, 748, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 778, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 492, 279, 280, 701,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 741, 293, 282, 283, 294, 493, 295, 779,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 780,
	300, 301, 749, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 781, 782, 0, 0, 312,
	313, 750, 751, 722, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 742, 322, 0, 385, 323, 324,
	325, 386, 783, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 696, 0, 0, 0, 0,
	0, 694, 0, 0, 0, 0, 692, 693, 0, 0,
	0, 0, 0, 0, 0, 702, 0, 0, 0, 0,
	1526, 705, 727, 716, 717, 714, 715, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 744, 709, 0, 0,
	0, 179, 180, 181, 333, 759, 335, 760, 182, 761,
	762, 0, 183, 339, 340, 184, 185, 712, 743, 763,
	764, 343, 0, 186, 755, 0, 735, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 481, 194,
	195, 196, 0, 736, 737, 739, 0, 738, 740, 197,
	198, 395, 199, 765, 200, 766, 767, 0, 201, 0,
	202, 0, 203, 0, 0, 758, 205, 0, 206, 0,
	0, 0, 700, 207, 208, 209, 745, 746, 723, 0,
	0, 210, 211, 768, 769, 770, 0, 212, 0, 213,
	0, 0, 482, 0, 214, 756, 0, 355, 0, 215,
	216, 217, 218, 219, 752, 754, 484, 0, 223, 0,
	220, 0, 483, 221, 771, 222, 772, 773, 774, 775,
	776, 0, 734, 0, 485, 224, 225, 226, 486, 227,
	228, 229, 0, 231, 230, 0, 757, 487, 232, 488,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 695, 0, 724,
	753, 244, 777, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 490, 250, 491, 747, 251, 252,
	253, 254, 255, 0, 256, 748, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 778, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 492, 279, 280, 701, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 741,
	293, 282, 283, 294, 493, 295, 779, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 780, 300, 301, 749,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 781, 782, 0, 0, 312, 313, 750, 751,
	722, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 742, 322, 0, 385, 323, 324, 325, 386, 783,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 696, 0, 0, 0, 0, 0, 694, 0,
	0, 0, 0, 692, 693, 0, 0, 0, 0, 0,
	0, 0, 702, 0, 0, 0, 0, 1524, 705, 727,
	716, 717, 714, 715, 706, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 744, 709, 0, 0, 0, 179, 180,
	181, 333, 759, 335, 760, 182, 761, 762, 0, 183,
	339, 340, 184, 185, 712, 743, 763, 764, 343, 0,
	186, 755, 0, 735, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 481, 194, 195, 196, 0,
	736, 737, 739, 0, 738, 740, 197, 198, 395, 199,
	765, 200, 766, 767, 0, 201, 0, 202, 0, 203,
	0, 0, 758, 205, 0, 206, 0, 0, 0, 700,
	207, 208, 209, 745, 746, 723, 0, 0, 210, 211,
	768, 769, 770, 0, 212, 0, 213, 0, 0, 482,
	0, 214, 756, 0, 355, 0, 215, 216, 217, 218,
	219, 752, 754, 484, 0, 223, 0, 220, 0, 483,
	221, 771, 222, 772, 773, 774, 775, 776, 0, 734,
	0, 485, 224, 225, 226, 486, 227, 228, 229, 0,
	231, 230, 0, 757, 487, 232, 488, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 489,
	240, 241, 243, 242, 695, 0, 724, 753, 244, 777,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 490, 250, 491, 747, 251, 252, 253, 254, 255,
	0, 256, 748, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 778, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	492, 279, 280, 701, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 741, 293, 282, 283,
	294, 493, 295, 779, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 780, 300, 301, 749, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 781,
	782, 0, 0, 312, 313, 750, 751, 722, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 742, 322,
	0, 385, 323, 324, 325, 386, 783, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 696,
	0, 0, 0, 0, 0, 694, 0, 0, 0, 0,
	692, 693, 0, 0, 0, 0, 0, 0, 0, 702,
	0, 0, 0, 0, 1508, 705, 727, 716, 717, 714,
	715, 706, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	744, 709, 0, 0, 0, 179, 180, 181, 333, 759,
	335, 760, 182, 761, 762, 0, 183, 339, 340, 184,
	185, 712, 743, 763, 764, 343, 0, 186, 755, 0,
	735, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 481, 194, 195, 196, 0, 736, 737, 739,
	0, 738, 740, 197, 198, 395, 199, 765, 200, 766,
	767, 0, 201, 0, 202, 0, 203, 0, 0, 758,
	205, 0, 206, 0, 0, 0, 700, 207, 208, 209,
	745, 746, 723, 0, 0, 210, 211, 768, 769, 770,
	0, 212, 0, 213, 0, 0, 482, 0, 214, 756,
	0, 355, 0, 215, 216, 217, 218, 219, 752, 754,
	484, 0, 223, 0, 220, 0, 483, 221, 771, 222,
	772, 773, 774, 775, 776, 0, 734, 0, 485, 224,
	225, 226, 486, 227, 228, 229, 0, 231, 230, 0,
	757, 487, 232, 488, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 489, 240, 241, 243,
	242, 695, 0, 724, 753, 244, 777, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 490, 250,
	491, 747, 251, 252, 253, 254, 255, 0, 256, 748,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 778,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 492, 279, 280,
	701, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 741, 293, 282, 283, 294, 493, 295,
	779, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	780, 300, 301, 749, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 781, 782, 0, 0,
	312, 313, 750, 751, 722, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 742, 322, 0, 385, 323,
	324, 325, 386, 783, 0, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 696, 0, 0, 0,
	0, 0, 694, 0, 0, 0, 0, 692, 693, 0,
	0, 0, 0, 0, 0, 0, 702, 0, 0, 0,
	0, 1496, 705, 727, 716, 717, 714, 715, 706, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 744, 709, 0,
	0, 0, 179, 180, 181, 333, 759, 335, 760, 182,
	761, 762, 0, 183, 339, 340, 184, 185, 712, 743,
	763, 764, 343, 0, 186, 755, 0, 735, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 481,
	194, 195, 196, 0, 736, 737, 739, 0, 738, 740,
	197, 198, 395, 199, 765, 200, 766, 767, 0, 201,
	0, 202, 0, 203, 0, 0, 758, 205, 0, 206,
	0, 0, 0, 700, 207, 208, 209, 745, 746, 723,
	0, 0, 210, 211, 768, 769, 770, 0, 212, 0,
	213, 0, 0, 482, 0, 214, 756, 0, 355, 0,
	215, 216, 217, 218, 219, 752, 754, 484, 0, 223,
	0, 220, 0, 483, 221, 771, 222, 772, 773, 774,
	775, 776, 0, 734, 0, 485, 224, 225, 226, 486,
	227, 228, 229, 0, 231, 230, 0, 757, 487, 232,
	488, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 489, 240, 241, 243, 242, 695, 0,
	724, 753, 244, 777, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 490, 250, 491, 747, 251,
	252, 253, 254, 255, 0, 256, 748, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 778, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 492, 279, 280, 701, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	741, 293, 282, 283, 294, 493, 295, 779, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 780, 300, 301,
	749, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 781, 782, 0, 0, 312, 313, 750,
	751, 722, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 742, 322, 0, 385, 323, 324, 325, 386,
	783, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 696, 0, 0, 0, 0, 0, 694,
	0, 0, 0, 0, 692, 693, 0, 0, 0, 0,
	0, 0, 0, 702, 0, 0, 0, 0, 1494, 705,
	1486, 716, 717, 714, 715, 706, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 744, 709, 0, 0, 0, 179,
	180, 181, 333, 759, 335, 760, 182, 761, 762, 0,
	183, 339, 340, 184, 185, 712, 743, 763, 764, 343,
	0, 186, 755, 0, 735, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 481, 194, 195, 196,
	0, 736, 737, 739, 0, 738, 740, 197, 198, 395,
	199, 765, 1489, 766, 767, 0, 201, 0, 202, 0,
	203, 0, 0, 758, 205, 0, 206, 0, 0, 0,
	700, 207, 208, 209, 745, 746, 723, 0, 0, 210,
	211, 768, 769, 770, 0, 212, 0, 213, 0, 0,
	482, 0, 214, 756, 0, 355, 0, 215, 216, 1490,
	218, 219, 752, 754, 484, 0, 223, 0, 220, 0,
	483, 221, 771, 222, 772, 773, 774, 775, 776, 0,
	734, 0, 485, 224, 225, 226, 486, 227, 228, 229,
	0, 231, 230, 0, 757, 487, 232, 488, 0, 233,
	0, 0, 234, 0, 235, 1491, 1488, 239, 366, 238,
	489, 240, 241, 243, 242, 695, 0, 724, 753, 244,
	777, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 490, 250, 491, 747, 251, 252, 253, 254,
	255, 0, 256, 748, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 778, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 492, 279, 280, 701, 281, 0, 285, 286, 287,
	1492, 0, 290, 375, 289, 291, 292, 741, 293, 282,
	283, 294, 493, 295, 779, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 780, 300, 301, 749, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	781, 782, 0, 0, 312, 313, 750, 751, 722, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 742,
	322, 0, 385, 323, 324, 325, 386, 783, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 1487, 331,
	696, 0, 0, 0, 0, 0, 694, 0, 0, 0,
	0, 692, 693, 0, 0, 0, 0, 0, 0, 0,
	702, 0, 0, 0, 0, 1483, 705, 1486, 716, 717,
	714, 715, 706, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 744, 709, 0, 0, 0, 179, 180, 181, 333,
	759, 335, 760, 182, 761, 762, 0, 183, 339, 340,
	184, 185, 712, 743, 763, 764, 343, 0, 186, 755,
	0, 735, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 481, 194, 195, 196, 0, 736, 737,
	739, 0, 738, 740, 197, 198, 395, 199, 765, 1489,
	766, 767, 0, 201, 0, 202, 0, 203, 0, 0,
	758, 205, 0, 206, 0, 0, 0, 700, 207, 208,
	209, 745, 746, 723, 0, 0, 210, 211, 768, 769,
	770, 0, 212, 0, 213, 0, 0, 482, 0, 214,
	756, 0, 355, 0, 215, 216, 1490, 218, 219, 752,
	754, 484, 0, 223, 0, 220, 0, 483, 221, 771,
	222, 772, 773, 774, 775, 776, 0, 734, 0, 485,
	224, 225, 226, 486, 227, 228, 229, 0, 231, 230,
	0, 757, 487, 232, 488, 0, 233, 0, 0, 234,
	0, 235, 1491, 1488, 239, 366, 238, 489, 240, 241,
	243, 242, 695, 0, 724, 753, 244, 777, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 490,
	250, 491, 747, 251, 252, 253, 254, 255, 0, 256,
	748, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	778, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 492, 279,
	280, 701, 281, 0, 285, 286, 287, 1492, 0, 290,
	375, 289, 291, 292, 741, 293, 282, 283, 294, 493,
	295, 779, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 780, 300, 301, 749, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 781, 782, 0,
	0, 312, 313, 750, 751, 722, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 742, 322, 0, 385,
	323, 324, 325, 386, 783, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 1487, 331, 696, 0, 0,
	0, 0, 0, 694, 0, 0, 0, 0, 692, 693,
	727, 716, 717, 714, 715, 706, 0, 702, 0, 0,
	0, 0, 0, 705, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 744, 709, 0, 0, 0, 179,
	180, 181, 333, 759, 335, 760, 182, 761, 762, 0,
	183, 339, 340, 184, 185, 712, 743, 763, 764, 343,
	0, 186, 755, 0, 735, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 481, 194, 195, 196,
	0, 736, 737, 739, 0, 738, 740, 197, 198, 395,
	199, 765, 200, 766, 767, 0, 201, 0, 202, 0,
	203, 0, 0, 758, 205, 0, 206, 0, 0, 0,
	700, 207, 208, 209, 745, 746, 723, 0, 0, 210,
	211, 768, 769, 770, 0, 212, 0, 213, 0, 0,
	482, 0, 214, 756, 0, 355, 0, 215, 216, 217,
	218, 219, 752, 754, 484, 0, 223, 0, 220, 0,
	483, 221, 771, 222, 772, 773, 774, 775, 776, 0,
	734, 0, 485, 224, 225, 226, 486, 227, 228, 229,
	0, 231, 230, 0, 757, 487, 232, 488, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	489, 240, 241, 243, 242, 695, 0, 724, 753, 244,
	777, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 490, 250, 491, 747, 251, 252, 253, 254,
	255, 0, 256, 748, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 778, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 492, 279, 280, 701, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 741, 293, 282,
	283, 294, 493, 295, 779, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 780, 300, 301, 749, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	781, 782, 0, 0, 312, 313, 750, 751, 722, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 742,
	322, 0, 385, 323, 324, 325, 386, 783, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	696, 0, 0, 0, 0, 0, 694, 0, 0, 0,
	0, 692, 693, 727, 716, 717, 714, 715, 706, 0,
	702, 1444, 0, 0, 0, 0, 705, 0, 0, 176,
	177, 1360, 178, 0, 0, 0, 0, 744, 709, 0,
	0, 0, 179, 180, 181, 333, 759, 335, 760, 182,
	761, 762, 0, 183, 339, 340, 184, 185, 712, 743,
	763, 764, 343, 0, 186, 755, 0, 735, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 481,
	194, 195, 196, 0, 736, 737, 739, 0, 738, 740,
	197, 198, 395, 199, 765, 200, 766, 767, 0, 201,
	0, 202, 0, 203, 0, 0, 758, 205, 0, 206,
	0, 0, 0, 700, 207, 208, 209, 745, 746, 723,
	0, 0, 210, 211, 768, 769, 770, 0, 212, 0,
	213, 0, 0, 482, 0, 214, 756, 0, 355, 0,
	215, 216, 217, 218, 219, 752, 754, 484, 0, 223,
	0, 220, 0, 483, 221, 771, 222, 772, 773, 774,
	775, 776, 0, 734, 0, 485, 224, 225, 226, 486,
	227, 228, 229, 0, 231, 230, 0, 757, 487, 232,
	488, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 489, 240, 241, 243, 242, 695, 0,
	724, 753, 244, 777, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 490, 250, 491, 747, 251,
	252, 253, 254, 255, 0, 256, 748, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 778, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 492, 279, 280, 701, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	741, 293, 282, 283, 294, 493, 295, 779, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 780, 300, 301,
	749, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 781, 782, 0, 0, 312, 313, 750,
	751, 722, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 742, 322, 0, 385, 323, 324, 325, 386,
	783, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 696, 0, 0, 0, 0, 0, 694,
	0, 0, 0, 0, 692, 693, 0, 0, 0, 0,
	0, 0, 0, 702, 0, 0, 0, 0, 855, 705,
	727, 716, 717, 714, 715, 706, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 744, 709, 0, 0, 0, 179,
	180, 181, 333, 759, 335, 760, 182, 761, 762, 0,
	183, 339, 340, 184, 185, 712, 743, 763, 764, 343,
	0, 186, 755, 0, 735, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 481, 194, 195, 196,
	0, 736, 737, 739, 0, 738, 740, 197, 198, 395,
	199, 765, 200, 766, 767, 0, 201, 0, 202, 0,
	203, 0, 0, 758, 205, 0, 206, 0, 0, 0,
	700, 207, 208, 209, 745, 746, 723, 0, 0, 210,
	211, 768, 769, 770, 0, 212, 0, 213, 0, 0,
	482, 0, 214, 756, 0, 355, 0, 215, 216, 217,
	218, 219, 752, 754, 484, 0, 223, 0, 220, 0,
	483, 221, 771, 222, 772, 773, 774, 775, 776, 0,
	734, 0, 485, 224, 225, 226, 486, 227, 228, 229,
	0, 231, 230, 0, 757, 487, 232, 488, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	489, 240, 241, 243, 242, 695, 0, 724, 753, 244,
	777, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 490, 250, 491, 747, 251, 252, 253, 254,
	255, 0, 256, 748, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 778, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 492, 279, 280, 701, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 741, 293, 282,
	283, 294, 493, 295, 779, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 780, 300, 301, 749, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	781, 782, 0, 0, 312, 313, 750, 751, 722, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 742,
	322, 0, 385, 323, 324, 325, 386, 783, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	696, 0, 0, 0, 0, 0, 694, 0, 0, 0,
	0, 692, 693, 0, 0, 0, 0, 0, 0, 0,
	702, 0, 0, 0, 0, 853, 705, 727, 716, 717,
	714, 715, 706, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 744, 709, 0, 0, 0, 179, 180, 181, 333,
	759, 335, 760, 182, 761, 762, 0, 183, 339, 340,
	184, 185, 712, 743, 763, 764, 343, 0, 186, 755,
	0, 735, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 481, 194, 195, 196, 0, 736, 737,
	739, 0, 738, 740, 197, 198, 395, 199, 765, 200,
	766, 767, 0, 201, 0, 202, 0, 203, 0, 0,
	758, 205, 0, 206, 0, 0, 0, 700, 207, 208,
	209, 745, 746, 723, 0, 0, 210, 211, 768, 769,
	770, 0, 212, 0, 213, 0, 0, 482, 0, 214,
	756, 0, 355, 0, 215, 216, 217, 218, 219, 752,
	754, 484, 0, 223, 0, 220, 0, 483, 221, 771,
	222, 772, 773, 774, 775, 776, 0, 734, 0, 485,
	224, 225, 226, 486, 227, 228, 229, 0, 231, 230,
	0, 757, 487, 232, 488, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 489, 240, 241,
	243, 242, 695, 0, 724, 753, 244, 777, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 490,
	250, 491, 747, 251, 252, 253, 254, 255, 0, 256,
	748, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	778, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 492, 279,
	280, 701, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 741, 293, 282, 283, 294, 493,
	295, 779, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 780, 300, 301, 749, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 781, 782, 0,
	0, 312, 313, 750, 751, 722, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 742, 322, 0, 385,
	323, 324, 325, 386, 783, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 696, 0, 0,
	0, 0, 0, 694, 0, 0, 0, 0, 692, 693,
	727, 716, 717, 714, 715, 706, 0, 702, 0, 0,
	0, 0, 0, 705, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 744, 709, 0, 0, 0, 179,
	180, 181, 333, 759, 335, 760, 182, 761, 762, 0,
	183, 339, 340, 184, 185, 712, 743, 763, 764, 343,
	0, 186, 755, 0, 735, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 481, 194, 195, 2432,
	0, 736, 737, 739, 0, 738, 740, 197, 198, 395,
	199, 765, 200, 766, 767, 0, 201, 0, 202, 0,
	203, 0, 0, 758, 205, 0, 206, 0, 0, 0,
	700, 207, 208, 209, 745, 746, 723, 0, 0, 210,
	211, 768, 769, 770, 0, 212, 0, 213, 0, 0,
	482, 0, 214, 756, 0, 355, 0, 215, 216, 217,
	218, 219, 752, 754, 484, 0, 223, 0, 220, 0,
	483, 221, 771, 222, 772, 773, 774, 775, 776, 0,
	734, 0, 485, 224, 225, 226, 486, 227, 228, 229,
	0, 231, 230, 0, 757, 487, 232, 488, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	489, 240, 241, 243, 242, 695, 0, 724, 753, 244,
	777, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 490, 250, 491, 747, 251, 252, 253, 254,
	255, 0, 256, 748, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 778, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 492, 279, 280, 701, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 741, 293, 282,
	283, 294, 493, 295, 779, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 780, 300, 301, 749, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	781, 782, 0, 0, 312, 313, 750, 751, 722, 314,
	315, 2431, 317, 0, 0, 318, 319, 320, 321, 742,
	322, 0, 385, 323, 324, 325, 386, 783, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	696, 0, 0, 0, 0, 0, 694, 0, 0, 0,
	0, 692, 693, 727, 716, 717, 714, 715, 706, 0,
	702, 0, 0, 0, 0, 0, 705, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 744, 709, 0,
	0, 0, 179, 180, 181, 333, 759, 335, 760, 182,
	761, 762, 0, 183, 339, 340, 184, 185, 712, 743,
	763, 764, 343, 0, 186, 755, 0, 735, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 481,
	194, 195, 196, 0, 736, 737, 739, 0, 738, 740,
	197, 198, 395, 199, 765, 200, 766, 767, 0, 201,
	0, 202, 0, 203, 0, 0, 758, 205, 0, 206,
	0, 0, 0, 700, 207, 208, 209, 745, 746, 723,
	0, 0, 210, 211, 768, 769, 770, 0, 212, 0,
	213, 0, 0, 482, 0, 214, 756, 0, 355, 0,
	215, 216, 217, 218, 219, 752, 754, 484, 0, 223,
	0, 220, 0, 483, 221, 771, 222, 772, 773, 774,
	775, 776, 0, 734, 0, 485, 224, 225, 226, 486,
	227, 228, 229, 0, 231, 230, 0, 757, 487, 232,
	488, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 489, 240, 241, 243, 242, 695, 0,
	724, 753, 244, 777, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 490, 250, 491, 747, 251,
	252, 253, 254, 255, 0, 256, 748, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 778, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 492, 279, 280, 701, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	741, 293, 282, 283, 294, 493, 295, 779, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 780, 300, 301,
	749, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 781, 782, 0, 0, 312, 313, 750,
	751, 722, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 742, 322, 0, 385, 323, 324, 325, 386,
	783, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 696, 0, 0, 0, 0, 0, 694,
	0, 0, 0, 0, 692, 693, 727, 716, 717, 714,
	715, 706, 0, 702, 0, 0, 0, 0, 0, 705,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	744, 709, 0, 0, 0, 179, 180, 181, 2430, 759,
	335, 760, 182, 761, 762, 0, 183, 339, 340, 184,
	185, 712, 743, 763, 764, 343, 0, 186, 755, 0,
	735, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 481, 194, 195, 2432, 0, 736, 737, 739,
	0, 738, 740, 197, 198, 395, 199, 765, 200, 766,
	767, 0, 201, 0, 202, 0, 203, 0, 0, 758,
	205, 0, 206, 0, 0, 0, 700, 207, 208, 209,
	745, 746, 723, 0, 0, 210, 211, 768, 769, 770,
	0, 212, 0, 213, 0, 0, 482, 0, 214, 756,
	0, 355, 0, 215, 216, 217, 218, 219, 752, 754,
	484, 0, 223, 0, 220, 0, 483, 221, 771, 222,
	772, 773, 774, 775, 776, 0, 734, 0, 485, 224,
	225, 226, 486, 227, 228, 229, 0, 231, 230, 0,
	757, 487, 232, 488, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 489, 240, 241, 243,
	242, 695, 0, 724, 753, 244, 777, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 490, 250,
	491, 747, 251, 252, 253, 254, 255, 0, 256, 748,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 778,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 492, 279, 280,
	701, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 741, 293, 282, 283, 294, 493, 295,
	779, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	780, 300, 301, 749, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 781, 782, 0, 0,
	312, 313, 750, 751, 722, 314, 315, 2431, 317, 0,
	0, 318, 319, 320, 321, 742, 322, 0, 385, 323,
	324, 325, 386, 783, 0, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 696, 0, 0, 0,
	0, 0, 694, 0, 0, 0, 0, 692, 693, 727,
	716, 717, 714, 715, 706, 0, 702, 0, 0, 0,
	0, 0, 705, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 744, 709, 0, 0, 0, 179, 180,
	181, 333, 759, 335, 760, 182, 761, 762, 0, 183,
	339, 340, 184, 185, 712, 743, 763, 764, 343, 0,
	186, 755, 0, 735, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 481, 194, 195, 196, 0,
	736, 737, 739, 0, 738, 740, 197, 198, 395, 199,
	765, 200, 766, 767, 0, 201, 0, 202, 0, 203,
	0, 0, 758, 205, 0, 206, 0, 0, 0, 700,
	207, 208, 209, 745, 746, 723, 0, 0, 210, 211,
	768, 769, 770, 0, 212, 0, 213, 0, 0, 482,
	0, 214, 756, 0, 355, 0, 215, 216, 217, 218,
	219, 752, 754, 484, 0, 223, 0, 220, 0, 483,
	221, 771, 222, 772, 773, 774, 775, 776, 0, 734,
	0, 485, 224, 225, 226, 486, 227, 228, 229, 0,
	231, 230, 0, 757, 487, 232, 488, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 489,
	240, 241, 243, 242, 0, 0, 724, 753, 244, 777,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 490, 250, 491, 747, 251, 252, 253, 254, 255,
	0, 256, 748, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 778, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	492, 279, 280, 1506, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 741, 293, 282, 283,
	294, 493, 295, 779, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 780, 300, 301, 749, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 781,
	782, 0, 0, 312, 313, 750, 751, 722, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 742, 322,
	0, 385, 323, 324, 325, 386, 783, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 727,
	716, 717, 714, 715, 706, 1504, 0, 0, 0, 0,
	1502, 1503, 0, 0, 0, 176, 177, 0, 178, 1505,
	0, 0, 0, 744, 709, 705, 0, 0, 179, 180,
	181, 333, 759, 335, 760, 182, 761, 762, 0, 183,
	339, 340, 184, 185, 0, 743, 763, 764, 343, 0,
	186, 755, 0, 735, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 481, 194, 195, 196, 0,
	736, 737, 739, 0, 738, 740, 197, 198, 395, 199,
	765, 200, 766, 767, 0, 201, 0, 202, 0, 203,
	0, 0, 758, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 745, 746, 723, 0, 0, 210, 211,
	768, 769, 770, 0, 212, 0, 213, 0, 0, 482,
	0, 214, 756, 0, 355, 0, 215, 216, 217, 218,
	219, 752, 754, 484, 0, 223, 0, 220, 0, 483,
	221, 771, 222, 772, 773, 774, 775, 776, 0, 734,
	0, 485, 224, 225, 226, 486, 227, 228, 229, 0,
	231, 230, 0, 757, 487, 232, 488, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 489,
	240, 241, 243, 242, 0, 0, 724, 753, 244, 777,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 490, 250, 491, 747, 251, 252, 253, 254, 255,
	0, 256, 748, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 778, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	492, 279, 280, 1506, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 741, 293, 282, 283,
	294, 493, 295, 779, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 780, 300, 301, 749, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 781,
	782, 0, 0, 312, 313, 750, 751, 722, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 742, 322,
	0, 385, 323, 324, 325, 386, 783, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 727,
	716, 717, 714, 715, 706, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 1505,
	0, 0, 0, 744, 709, 705, 0, 0, 179, 180,
	181, 0, 759, 335, 760, 182, 761, 762, 0, 183,
	339, 340, 184, 185, 712, 743, 763, 764, 343, 0,
	186, 755, 0, 735, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 481, 194, 195, 2432, 0,
	736, 737, 739, 0, 738, 740, 197, 198, 395, 199,
	765, 200, 766, 767, 0, 201, 0, 202, 0, 203,
	0, 0, 758, 205, 0, 206, 0, 0, 0, 700,
	207, 208, 209, 745, 746, 723, 0, 0, 210, 211,
	768, 769, 770, 0, 212, 0, 213, 0, 0, 482,
	0, 214, 756, 0, 355, 0, 215, 216, 217, 218,
	219, 752, 754, 0, 0, 223, 0, 220, 0, 483,
	221, 771, 222, 772, 773, 774, 775, 776, 0, 734,
	0, 0, 224, 225, 226, 486, 227, 228, 229, 0,
	231, 230, 0, 757, 487, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 489,
	240, 241, 243, 242, 695, 0, 724, 753, 244, 777,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 490, 250, 491, 747, 251, 252, 253, 254, 255,
	0, 256, 748, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 778, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	492, 279, 280, 701, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 741, 293, 282, 283,
	294, 0, 295, 779, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 780, 300, 301, 749, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 781,
	782, 0, 0, 312, 313, 750, 751, 722, 314, 315,
	2431, 317, 0, 0, 318, 319, 320, 321, 742, 322,
	0, 385, 323, 324, 325, 386, 783, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 727,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	692, 693, 0, 0, 0, 176, 177, 0, 178, 702,
	0, 0, 0, 744, 0, 705, 0, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 743, 341, 342, 343, 0,
	186, 755, 0, 735, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 481, 194, 195, 196, 0,
	736, 737, 739, 0, 738, 740, 197, 198, 395, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 745, 746, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 482,
	0, 214, 756, 0, 355, 0, 215, 216, 217, 218,
	219, 752, 754, 484, 0, 223, 0, 220, 0, 483,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 485, 224, 225, 226, 486, 227, 228, 229, 0,
	231, 230, 0, 757, 487, 232, 488, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 489,
	240, 241, 243, 242, 0, 0, 0, 753, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 490, 250, 491, 747, 251, 252, 253, 254, 255,
	0, 256, 748, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	492, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 741, 293, 282, 283,
	294, 493, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 749, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 750, 751, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 742, 322,
	0, 385, 323, 324, 325, 386, 387, 0, 0, 326,
	904, 0, 907, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 2077,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 480, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 481, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 482, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 484, 0, 223, 0,
	220, 0, 483, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 485, 224, 225, 226, 486, 227,
	228, 229, 0, 231, 230, 0, 365, 487, 232, 488,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 489, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 490, 250, 491, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 492, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 133, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 493, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 135, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 911, 387,
	0, 0, 326, 678, 0, 173, 127, 327, 328, 329,
	330, 331, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 119, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 356, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 828, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 133, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 135, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 911, 387, 0, 0, 326, 0, 173, 0, 127,
	327, 328, 329, 330, 331, 0, 128, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 822, 0, 1165, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 828, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 133, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 135, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 911, 387, 0, 0, 326, 678, 0,
	173, 127, 327, 328, 329, 330, 331, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 822, 0, 1165, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 133, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	135, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 911, 387, 0, 0,
	326, 1826, 0, 173, 127, 327, 328, 329, 330, 331,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	119, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 828,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 0, 326, 821, 0, 173, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 822, 0, 827, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 828, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 0, 326, 0, 173, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 822, 0, 827, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 828, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 0, 0, 326, 0,
	173, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 822, 0, 827, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 0,
	326, 0, 0, 173, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 1195, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 0, 326, 0, 173, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 0, 1644, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 356, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 0, 326, 0, 173, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 1992, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 727, 716, 717,
	714, 715, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 1168, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	759, 335, 760, 182, 761, 762, 0, 183, 339, 340,
	184, 185, 0, 0, 763, 764, 343, 0, 186, 344,
	0, 480, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 481, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 765, 200,
	766, 767, 0, 201, 0, 202, 0, 203, 0, 0,
	758, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 723, 0, 0, 210, 211, 768, 769,
	770, 0, 212, 0, 213, 0, 0, 482, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 484, 0, 223, 0, 220, 0, 483, 221, 771,
	222, 772, 773, 774, 775, 776, 0, 734, 0, 485,
	224, 225, 226, 486, 227, 228, 229, 0, 231, 230,
	0, 365, 487, 232, 488, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 489, 240, 241,
	243, 242, 0, 0, 724, 367, 244, 777, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 490,
	250, 491, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	778, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 492, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 493,
	295, 779, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 780, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 781, 782, 0,
	0, 312, 313, 383, 384, 722, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 783, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 961, 0, 907,
	965, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 0,
	186, 344, 0, 480, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 481, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 482,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 356, 357, 484, 0, 223, 0, 220, 0, 483,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 485, 224, 225, 226, 486, 227, 228, 229, 0,
	231, 230, 0, 365, 487, 232, 488, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 489,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 490, 250, 491, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	492, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 493, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 0, 583, 326,
	173, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 169,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	168, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 166,
	326, 173, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 172, 0, 332, 0, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	169, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 168, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 907,
	965, 326, 0, 0, 963, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 172, 0, 0, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 0,
	186, 344, 0, 480, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 481, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 482,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 356, 357, 484, 0, 223, 0, 220, 0, 483,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 485, 224, 225, 226, 486, 227, 228, 229, 0,
	231, 230, 0, 365, 487, 232, 488, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 489,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 490, 250, 491, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	492, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 493, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 173, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 169, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 168, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 907, 965, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	172, 0, 0, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 480,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 481, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 482, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 356, 357, 484,
	0, 223, 0, 220, 0, 483, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 485, 224, 225,
	226, 486, 227, 228, 229, 0, 231, 230, 0, 365,
	487, 232, 488, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 489, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 490, 250, 491,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 492, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 493, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 173, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 907, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 332, 172, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 480, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 481, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	395, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 482, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 356, 357, 484, 0, 223, 0, 220,
	0, 483, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 485, 224, 225, 226, 486, 227, 228,
	229, 0, 231, 230, 0, 365, 487, 232, 488, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 489, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 490, 250, 491, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 492, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 493, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 173,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 1582,
	186, 344, 0, 0, 0, 187, 188, 189, 0, 190,
	1580, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 1621, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 1585, 0, 0,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 1619, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 1584, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 1620, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 173, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 1582, 186, 344,
	0, 0, 1577, 187, 188, 189, 0, 190, 1580, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 1585, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 1576,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 1584, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 1583, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 882, 326, 173, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 828, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 0, 834, 326, 173,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 0,
	186, 344, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 836, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 828, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 0, 830, 326,
	173, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 832, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 828, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 412,
	326, 173, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 411,
	178, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	395, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 410, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 173,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 0, 1565, 0, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 0,
	186, 344, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 173, 2139, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 173, 2139, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 356, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 2136, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 173, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 828,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 1349, 326, 173, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 0, 1347, 326, 173, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 356, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 173, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 176,
	177, 1329, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 609, 326, 173, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 940, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 611, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 606, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 0, 1209, 326, 173, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 1208, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 609, 326, 173, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 940, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 611, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 606, 381, 382, 0, 0,
	312, 941, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 609, 326, 173, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 600, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 611, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 924, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 606, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 900, 326, 173, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	899, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 0, 897, 326, 173,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 0,
	186, 344, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 896, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 0, 893, 326,
	173, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 892, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 890,
	326, 173, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	395, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 889, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	886, 326, 173, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 885, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	173, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 176, 177, 874, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 872,
	326, 173, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	395, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 871, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	868, 326, 173, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 179, 180, 181, 333, 334, 335, 336, 182, 337,
	338, 0, 183, 339, 340, 184, 185, 0, 0, 341,
	342, 343, 0, 186, 344, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 345, 200, 346, 347, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 348, 207, 208, 209, 349, 350, 0, 0,
	0, 210, 211, 351, 352, 353, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 354, 0, 355, 0, 215,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 866, 326, 173, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 862, 326, 173, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 179, 180, 181, 333, 334, 335, 336,
	182, 337, 338, 0, 183, 339, 340, 184, 185, 0,
	0, 341, 342, 343, 0, 186, 344, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 345, 200, 346, 347, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 348, 207, 208, 209, 349, 350,
	0, 0, 0, 210, 211, 351, 352, 353, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 354, 0, 355,
	0, 215, 216, 217, 218, 219, 864, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 0, 840, 326, 173, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 842, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 838, 326, 173, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 179, 180, 181, 333, 334,
	335, 336, 182, 337, 338, 0, 183, 339, 340, 184,
	185, 0, 0, 341, 342, 343, 0, 186, 344, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 345, 200, 346,
	347, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 348, 207, 208, 209,
	349, 350, 0, 0, 0, 210, 211, 351, 352, 353,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 354,
	0, 355, 0, 215, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 609, 326, 173, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 600, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 599, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 611, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 601, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 602, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 606, 381, 382, 0,
	0, 312, 604, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 591, 326, 173, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 179, 180, 181,
	333, 334, 335, 336, 182, 337, 338, 0, 183, 339,
	340, 184, 185, 0, 0, 341, 342, 343, 0, 186,
	344, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 345,
	200, 346, 347, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 348, 207,
	208, 209, 349, 350, 0, 0, 0, 210, 211, 351,
	352, 353, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 354, 0, 355, 0, 215, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 592, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 0, 589, 326, 173,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 0,
	186, 344, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 0, 581, 326,
	173, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 179,
	180, 181, 333, 334, 335, 336, 182, 337, 338, 0,
	183, 339, 340, 184, 185, 0, 0, 341, 342, 343,
	0, 186, 344, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 345, 200, 346, 347, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	348, 207, 208, 209, 349, 350, 0, 0, 0, 210,
	211, 351, 352, 353, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 354, 0, 355, 0, 215, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 435,
	326, 173, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	395, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 173,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 0,
	186, 344, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 173, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 1873,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 173, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 1871, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 173, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 179, 180, 181, 333, 334, 335, 336, 182,
	337, 338, 0, 183, 339, 340, 184, 185, 0, 0,
	341, 342, 343, 0, 186, 344, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 345, 200, 346, 347, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 348, 207, 208, 209, 349, 350, 0,
	0, 0, 210, 211, 351, 352, 353, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 354, 0, 355, 0,
	215, 216, 217, 218, 219, 1860, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 173, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	179, 180, 181, 333, 334, 335, 336, 182, 337, 338,
	0, 183, 339, 340, 184, 185, 0, 0, 341, 342,
	343, 0, 186, 344, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	395, 199, 345, 200, 346, 347, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 348, 207, 208, 209, 349, 350, 0, 0, 0,
	210, 211, 351, 352, 353, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 354, 0, 355, 0, 215, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 592, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 173,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 332, 0, 1219, 0, 0, 179, 180,
	181, 333, 334, 335, 336, 182, 337, 338, 0, 183,
	339, 340, 184, 185, 0, 0, 341, 342, 343, 0,
	186, 344, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	345, 200, 346, 347, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 348,
	207, 208, 209, 349, 350, 0, 0, 0, 210, 211,
	351, 352, 353, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 354, 0, 355, 0, 215, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 0, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 173, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 179, 180, 181, 333,
	334, 335, 336, 182, 337, 338, 0, 183, 339, 340,
	184, 185, 0, 0, 341, 342, 343, 0, 186, 344,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 345, 200,
	346, 347, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 348, 207, 208,
	209, 349, 350, 0, 0, 0, 210, 211, 351, 352,
	353, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	354, 0, 355, 0, 215, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 804, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 173, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 179, 180, 181, 333, 334, 335,
	336, 182, 337, 338, 0, 183, 339, 340, 184, 185,
	0, 0, 341, 342, 343, 0, 186, 344, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 345, 200, 346, 347,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 348, 207, 208, 209, 349,
	350, 0, 0, 0, 210, 211, 351, 352, 353, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 354, 0,
	355, 0, 215, 216, 217, 218, 219, 356, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 0, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 0, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	0, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 1030, 1031, 0, 1050, 1051,
	1052, 1060, 1061, 1062, 0, 0, 0, 0, 0, 0,
	0, 1053, 0, 0, 0, 0, 0, 0, 1033, 0,
	0, 1064, 0, 1030, 1031, 0, 1050, 1051, 1052, 1060,
	1061, 1062, 0, 0, 0, 0, 0, 0, 0, 1053,
	0, 0, 1032, 0, 0, 0, 1033, 0, 1047, 1064,
	0, 1030, 1031, 0, 1050, 1051, 1052, 1060, 1061, 1062,
	0, 0, 0, 0, 0, 0, 0, 1053, 0, 0,
	1032, 0, 0, 0, 1033, 0, 1047, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1032, 0,
	0, 0, 0, 1038, 1047, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1057, 1065, 0, 0, 0, 0, 0,
	0, 1038, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1057, 1065, 0, 0, 0, 1055, 0, 0, 1038,
	0, 0, 1048, 0, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1057,
	1065, 0, 0, 0, 1055, 0, 0, 1054, 0, 0,
	1048, 0, 0, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1055, 0, 0, 1054, 0, 0, 1048, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1049, 0, 0, 0, 0,
	0, 0, 0, 1054, 0, 0, 0, 0, 0, 0,
	0, 1058, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1049, 1030, 1031, 0, 1050, 1051, 1052,
	1060, 1061, 1062, 0, 0, 0, 0, 0, 0, 1058,
	1053, 0, 0, 0, 0, 0, 0, 1033, 0, 0,
	1064, 1049, 1030, 1031, 0, 1050, 1051, 1052, 1060, 1061,
	1062, 0, 0, 0, 0, 0, 0, 1058, 1053, 0,
	0, 1032, 0, 0, 0, 1033, 0, 1047, 1064, 1056,
	0, 0, 1044, 1045, 1046, 1059, 0, 1043, 1041, 1042,
	1034, 1035, 1036, 1037, 1039, 1040, 0, 0, 0, 1032,
	2356, 0, 0, 0, 0, 1047, 0, 1056, 0, 0,
	1044, 1045, 1046, 1059, 0, 1043, 1041, 1042, 1034, 1035,
	1036, 1037, 1039, 1040, 0, 0, 0, 0, 2310, 0,
	0, 0, 1038, 0, 0, 1056, 0, 0, 1044, 1045,
	1046, 1059, 0, 1043, 1041, 1042, 1034, 1035, 1036, 1037,
	1039, 1040, 1057, 1065, 0, 0, 2280, 0, 0, 0,
	1038, 0, 0, 0, 1768, 1769, 0, 1786, 1787, 1788,
	1063, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1057, 1065, 0, 0, 0, 1055, 0, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 0, 0, 1063, 0,
	0, 0, 0, 0, 1030, 1031, 0, 1050, 1051, 1052,
	1060, 1061, 1062, 1055, 0, 0, 1054, 1783, 0, 1048,
	1053, 0, 0, 0, 0, 0, 0, 1033, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1054, 0, 0, 0, 0, 0,
	0, 1032, 0, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 0, 1049, 0, 0, 0, 0, 0,
	1030, 1031, 1774, 1050, 1051, 1052, 1060, 1061, 1062, 0,
	1058, 0, 0, 0, 0, 0, 1053, 0, 0, 0,
	0, 0, 1049, 1033, 0, 0, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1058, 0,
	1789, 0, 1038, 0, 0, 0, 0, 1032, 0, 0,
	0, 1030, 1031, 1047, 1050, 1051, 1052, 1060, 1061, 1062,
	0, 1784, 1057, 1065, 0, 0, 0, 1053, 0, 0,
	0, 0, 0, 0, 1033, 0, 0, 1064, 1056, 0,
	1063, 1044, 1045, 1046, 1059, 0, 1043, 1041, 1042, 1034,
	1035, 1036, 1037, 1039, 1040, 1055, 0, 0, 1032, 2275,
	0, 1048, 0, 0, 1047, 0, 1056, 0, 1038, 1044,
	1045, 1046, 1059, 0, 1043, 1041, 1042, 1034, 1035, 1036,
	1037, 1039, 1040, 0, 0, 0, 1054, 2271, 1057, 1065,
	0, 0, 0, 0, 1785, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1038,
	0, 1055, 0, 0, 0, 0, 0, 1048, 0, 0,
	0, 0, 0, 0, 1049, 0, 0, 0, 0, 1057,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 1054, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1055, 0, 0, 0, 0, 0, 1048, 0,
	0, 1780, 1781, 1782, 0, 0, 1779, 1777, 1778, 1770,
	1771, 1772, 1773, 1775, 1776, 0, 0, 0, 0, 0,
	1049, 0, 0, 1054, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1058, 0, 1056, 0,
	0, 1044, 1045, 1046, 1059, 0, 1043, 1041, 1042, 1034,
	1035, 1036, 1037, 1039, 1040, 0, 0, 0, 0, 2212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1049, 0, 0, 1030, 1031, 0, 1050, 1051, 1052,
	1060, 1061, 1062, 0, 0, 0, 0, 1058, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 1033, 0, 0,
	1064, 0, 0, 0, 1056, 0, 0, 1044, 1045, 1046,
	1059, 0, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039,
	1040, 1032, 0, 0, 0, 2178, 0, 1047, 1030, 1031,
	0, 1050, 1051, 1052, 1060, 1061, 1062, 0, 0, 0,
	0, 0, 0, 0, 1053, 0, 0, 0, 0, 0,
	0, 1033, 0, 0, 1064, 1056, 0, 0, 1044, 1045,
	1046, 1059, 0, 1043, 1041, 1042, 1034, 1035, 1036, 1037,
	1039, 1040, 0, 0, 0, 1032, 2177, 0, 0, 0,
	0, 1047, 1038, 0, 0, 0, 0, 0, 0, 0,
	1030, 1031, 0, 1050, 1051, 1052, 1060, 1061, 1062, 0,
	0, 0, 1057, 1065, 0, 0, 1053, 0, 0, 0,
	0, 0, 0, 1033, 0, 0, 1064, 0, 0, 0,
	1063, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1055, 1038, 1032, 0, 0,
	0, 1048, 0, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1057, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 1054, 0, 0, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1055,
	0, 0, 0, 0, 0, 1048, 0, 0, 1038, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1049, 0, 0, 0, 1057, 1065,
	1054, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1055, 0, 0, 0, 0, 0, 1048, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1049, 0,
	1030, 1031, 0, 1050, 1051, 1052, 1060, 1061, 1062, 0,
	0, 0, 1054, 0, 1058, 0, 1053, 0, 0, 0,
	0, 0, 0, 1033, 0, 0, 1064, 0, 1056, 0,
	0, 1044, 1045, 1046, 1059, 0, 1043, 1041, 1042, 1034,
	1035, 1036, 1037, 1039, 1040, 0, 0, 1032, 0, 2142,
	0, 0, 0, 1047, 0, 0, 0, 0, 1030, 1031,
	1049, 1050, 1051, 1052, 1060, 1061, 1062, 0, 0, 0,
	0, 0, 0, 0, 1053, 0, 1058, 0, 0, 0,
	0, 1033, 1056, 0, 1064, 1044, 1045, 1046, 1059, 0,
	1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0,
	0, 0, 0, 1995, 0, 1032, 0, 0, 1038, 0,
	0, 1047, 0, 0, 0, 1030, 1031, 0, 1050, 1051,
	1052, 1060, 1061, 1062, 0, 0, 0, 0, 1057, 1065,
	0, 1053, 0, 0, 0, 0, 0, 0, 1033, 0,
	0, 1064, 0, 0, 1056, 0, 1063, 1044, 1045, 1046,
	1059, 0, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039,
	1040, 1055, 1032, 0, 0, 1971, 1038, 1048, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1057, 1065, 0, 0,
	0, 0, 1054, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1055,
	0, 0, 0, 1038, 2463, 1048, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1049, 0, 0, 1057, 1065, 0, 0, 0, 0, 0,
	1054, 0, 0, 0, 0, 0, 1058, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1055, 0, 0, 0,
	0, 0, 1048, 0, 0, 0, 0, 0, 0, 0,
	0, 1768, 1769, 0, 1786, 1787, 1788, 0, 1049, 0,
	0, 0, 0, 0, 0, 0, 0, 1054, 0, 0,
	0, 0, 0, 0, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 2462, 1056, 0, 0, 1044, 1045, 1046,
	1059, 0, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039,
	1040, 0, 0, 0, 1783, 1445, 0, 0, 0, 0,
	0, 0, 0, 1030, 1031, 1049, 1050, 1051, 1052, 1060,
	1061, 1062, 0, 0, 0, 0, 0, 0, 0, 1053,
	0, 1058, 0, 0, 0, 0, 1033, 0, 0, 1064,
	0, 0, 1056, 0, 0, 1044, 1045, 1046, 1059, 0,
	1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 1774,
	1032, 1730, 0, 0, 0, 0, 1047, 0, 0, 1030,
	1031, 0, 1050, 1051, 1052, 1060, 1061, 1062, 0, 0,
	1790, 0, 0, 0, 0, 1053, 0, 0, 0, 0,
	1703, 0, 1033, 0, 0, 1064, 0, 1789, 0, 1056,
	0, 0, 1044, 1045, 1046, 1059, 0, 1043, 1041, 1042,
	1034, 1035, 1036, 1037, 1039, 1040, 1032, 0, 1784, 0,
	0, 1038, 1047, 1800, 0, 1541, 1799, 0, 0, 0,
	0, 1030, 1031, 0, 1050, 1051, 1052, 1060, 1061, 1062,
	0, 1057, 1065, 0, 0, 0, 0, 1053, 0, 0,
	0, 1540, 1704, 0, 1033, 0, 0, 1064, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1055, 0, 0, 1038, 1032, 0,
	1048, 0, 0, 0, 1047, 0, 0, 0, 0, 0,
	0, 1785, 0, 0, 0, 0, 0, 1057, 1065, 0,
	0, 0, 0, 0, 0, 1054, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1055, 0, 0, 0, 0, 0, 1048, 0, 0, 1038,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1049, 0, 0, 0, 0, 0, 1057,
	1065, 1054, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 0, 0, 0, 0, 0, 0, 1063, 1780, 1781,
	1782, 0, 0, 1779, 1777, 1778, 1770, 1771, 1772, 1773,
	1775, 1776, 1055, 0, 0, 0, 0, 0, 1048, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1049,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1054, 0, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1056, 0, 0,
	1044, 1045, 1046, 1059, 0, 1043, 1041, 1042, 1034, 1035,
	1036, 1037, 1039, 1040, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1030,
	1031, 1049, 1050, 1051, 1052, 1060, 1061, 1062, 0, 0,
	0, 0, 0, 0, 0, 1053, 0, 1058, 0, 0,
	0, 0, 1033, 1056, 0, 1064, 1044, 1045, 1046, 1059,
	0, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040,
	0, 0, 0, 0, 0, 0, 1032, 0, 0, 0,
	0, 0, 1047, 0, 0, 0, 0, 0, 0, 0,
	0, 1030, 1031, 0, 1050, 1051, 1052, 1060, 1061, 1062,
	0, 0, 0, 0, 0, 0, 0, 1053, 0, 0,
	0, 0, 0, 0, 1033, 1056, 0, 1064, 1044, 1045,
	1046, 1059, 0, 1043, 1041, 1042, 1034, 1035, 1036, 1037,
	1039, 1040, 0, 0, 0, 0, 0, 1038, 1032, 0,
	0, 0, 0, 0, 1047, 0, 0, 1030, 1031, 0,
	1050, 1051, 1052, 1060, 1061, 1062, 0, 1057, 1065, 0,
	0, 0, 0, 1053, 0, 0, 0, 0, 0, 0,
	1033, 0, 0, 1064, 0, 1063, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1055, 0, 0, 0, 1032, 0, 1048, 0, 0, 1038,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 1030,
	1031, 0, 1050, 1051, 1052, 1060, 1061, 1062, 0, 1057,
	1065, 1054, 675, 0, 0, 1053, 0, 0, 0, 1801,
	0, 0, 1033, 0, 0, 1064, 0, 1063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1055, 0, 0, 1038, 1032, 0, 1048, 0,
	1806, 0, 1047, 0, 0, 0, 0, 0, 0, 1049,
	0, 0, 0, 0, 0, 1057, 1065, 0, 0, 0,
	0, 0, 0, 1054, 0, 1058, 0, 0, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1055, 0,
	0, 0, 0, 0, 1048, 0, 0, 1038, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1049, 0, 0, 0, 0, 0, 1057, 1065, 1054,
	0, 0, 0, 0, 0, 0, 0, 1058, 0, 0,
	0, 0, 0, 1056, 0, 1063, 1044, 1045, 1046, 1059,
	0, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040,
	1055, 0, 0, 1975, 0, 0, 1048, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1049, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1054, 0, 1058, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1056, 0, 0, 1044, 1045,
	1046, 1059, 0, 1043, 1041, 1042, 1034, 1035, 1036, 1037,
	1039, 1040, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1030, 1031, 1049,
	1050, 1051, 1052, 1060, 1061, 1062, 0, 0, 0, 0,
	0, 0, 0, 1053, 0, 1058, 0, 0, 0, 0,
	1033, 1056, 0, 1064, 1044, 1045, 1046, 1059, 0, 1043,
	1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0, 0,
	0, 0, 0, 0, 1032, 0, 0, 0, 0, 0,
	1047, 0, 0, 1030, 1031, 0, 1050, 1051, 1052, 1060,
	1061, 1062, 0, 0, 0, 0, 0, 0, 0, 1053,
	0, 0, 0, 1759, 0, 0, 1033, 0, 0, 1064,
	0, 0, 0, 1056, 0, 0, 1044, 1045, 1046, 1059,
	0, 1043, 1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040,
	1032, 0, 0, 0, 0, 1038, 1047, 0, 0, 0,
	0, 0, 0, 1030, 1031, 0, 1050, 1051, 1052, 1060,
	1061, 1062, 0, 0, 0, 1057, 1065, 0, 0, 1053,
	0, 0, 0, 0, 0, 0, 1033, 0, 0, 1064,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1055, 0,
	1032, 1038, 0, 0, 1048, 0, 1047, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1057, 1065, 0, 0, 0, 0, 0, 0, 1054,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 0, 1766, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1055, 0, 0, 0, 0, 0,
	1048, 1038, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1049, 0, 0,
	0, 1057, 1065, 0, 0, 1054, 0, 0, 0, 0,
	0, 0, 0, 1058, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 38, 0, 0,
	0, 0, 0, 0, 1055, 0, 0, 0, 39, 0,
	1048, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 42, 0, 1049, 1030, 1031, 0, 1050, 1051, 1052,
	1060, 1061, 1062, 0, 0, 1054, 0, 0, 0, 1058,
	0, 0, 0, 48, 0, 0, 0, 1033, 0, 0,
	1064, 1056, 0, 0, 1044, 1045, 1046, 1059, 0, 1043,
	1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0, 0,
	0, 1032, 59, 0, 0, 0, 0, 1047, 0, 60,
	0, 61, 0, 1049, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 0, 0, 0, 0, 63, 0, 1056, 64, 0,
	1044, 1045, 1046, 1059, 0, 1043, 1041, 1042, 1034, 1035,
	1036, 1037, 1039, 1040, 0, 0, 0, 0, 0, 0,
	0, 0, 1038, 0, 0, 0, 0, 1030, 1031, 0,
	1050, 1051, 1052, 1060, 1061, 1062, 0, 0, 0, 0,
	0, 0, 1057, 1065, 0, 0, 0, 0, 0, 0,
	1033, 0, 0, 1064, 0, 0, 0, 1056, 0, 0,
	1044, 1045, 1046, 1059, 0, 1043, 1041, 1042, 1034, 1035,
	1036, 1037, 1039, 1040, 1032, 1055, 0, 0, 65, 0,
	1047, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 67, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 0, 461, 0, 0, 100,
	0, 0, 0, 0, 0, 1038, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 0, 0, 1049, 1057, 1065, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 1055, 0,
	0, 0, 127, 0, 1048, 0, 0, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 0, 1268, 1258, 1287, 1250, 1278,
	1277, 0, 0, 1252, 1251, 0, 0, 0, 1056, 1289,
	1288, 1044, 1045, 1046, 1059, 0, 1043, 1041, 1042, 1034,
	1035, 1036, 1037, 1039, 1040, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1049, 0, 0,
	0, 0, 0, 1283, 0, 1275, 1274, 0, 0, 0,
	0, 0, 0, 1058, 0, 1273, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1272, 1270, 1271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1261, 1260, 1262, 1263, 1264, 1265,
	1266, 0, 1286, 0, 0, 0, 0, 0, 0, 0,
	0, 1056, 0, 0, 1044, 1045, 1046, 1059, 0, 1043,
	1041, 1042, 1034, 1035, 1036, 1037, 1039, 1040, 0, 0,
	1254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1276, 0, 0, 0, 1259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1269, 0, 0, 0, 1380,
	1378, 1379, 1382, 1381, 0, 0, 0, 1268, 1258, 1287,
	1250, 1278, 1277, 0, 0, 1252, 1251, 0, 0, 0,
	0, 1289, 1288, 0, 0, 1255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1267, 1256, 0, 0,
	0, 0, 0, 0, 0, 630, 1291, 656, 0, 0,
	0, 0, 0, 0, 0, 1283, 0, 1275, 1274, 1253,
	0, 0, 1284, 1285, 0, 635, 0, 1273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 633, 0, 0,
	0, 0, 0, 0, 1257, 1272, 1270, 1271, 0, 1290,
	0, 0, 0, 0, 0, 0, 0, 0, 634, 0,
	0, 0, 0, 636, 0, 0, 0, 0, 642, 643,
	0, 0, 652, 0, 0, 0, 1261, 1260, 1262, 1263,
	1264, 1265, 1266, 0, 1286, 0, 657, 637, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 655,
	0, 0, 1254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1276, 0, 0, 0, 1259, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 639, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1269, 0, 0,
	0, 0, 646, 0, 0, 641, 648, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 658, 1255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1267, 1256,
	0, 0, 0, 0, 0, 0, 0, 0, 1291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1253, 0, 0, 1284, 1285, 644, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1257, 0, 0, 0,
	0, 1290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 632, 649, 659, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 650, 0,
	0, 0, 654, 0, 0, 0, 660, 0, 0, 0,
	0, 647, 651, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 653,
}
var sqlPact = [...]int{

	374, -1000, -16, -1000, -1000, 222, -1000, -1000, -1000, 221,
	219, 218, -1000, 201, 198, 197, -1000, 196, 195, 194,
	191, 189, 188, 187, 186, -1000, 184, -1000, -1000, -1000,
	-1000, 174, 169, 168, 167, 166, 153, 150, 1054, 22557,
	149, 147, 1321, 35355, 146, 144, 143, 141, 1108, 140,
	139, 26067, 868, 1113, 137, 136, 134, 133, 131, 1072,
	35037, 4435, 2488, 6268, 1130, 1566, 34716, 22236, 1563, 1735,
	34395, -1000, -1000, 34074, 129, 121, 120, 119, 117, -1000,
	-1000, 33753, 114, 109, 106, 103, 98, 95, 92, 90,
	88, 87, 81, 71, 70, 69, -1000, 65, 62, 58,
	40993, 56, 50, 48, 1082, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 128, -1000, 873, 414,
	2573, 7998, 967, 963, 959, 955, 954, 37263, 35355, 45,
	-93, 42, -1000, 1978, 678, 19642, 374, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 25746, 25425, 33432, 33111, 740, -1000, -24, 23829, 35355,
	-1000, 230, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15343, 14986, 569, 230, -1000, -1000, -1000, -1000, -1000,
	32790, -1000, 32469, 32148, 1436, 31827, -1000, -1000, -1000, -1000,
	31506, -1000, -1000, 1822, 1577, 1568, 25104, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31188,
	30867, 30546, 30225, 29904, 481, -1000, -1000, -1000, 18028, -1000,
	-1000, -1000, -1000, 41, -1000, -1000, 39, -1000, 38, 36,
	35, 32, -1000, 30, 29, -1000, 27, 20, -1000, 1,
	-20, 29583, 1180, -1000, -1000, -23, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 35355, -1000, 16029, -1000,
	480, -1000, 1545, -1000, 16029, -1000, 1144, -1000, -1000, -1000,
	-1000, -1000, 35355, -1000, -1000, -1000, -1000, -1000, -1000, 2075,
	1185, 476, 29262, -1000, 1373, -1000, 563, 739, -1000, -1000,
	-1000, 9028, 235, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1601, 21915, 1166, 1824, 1741, 2074, 1319, 1692,
	1691, 1685, 1676, 1623, 2073, 921, 2072, 1681, 966, 2070,
	1613, 1111, 651, 2069, 1543, 1541, -1000, -1000, -1000, -1000,
	895, -1000, -1000, -1000, 27339, -1000, -1000, 873, -1000, -1000,
	-1000, 1279, 1909, 1909, 1909, 1894, 328, 323, -1000, 128,
	-1000, 1484, -1000, 1174, -1000, -1000, -1000, -1000, -1000, 40253,
	-1000, -1000, 16029, 16029, 16029, 16029, 16029, 1090, 505, -1000,
	473, 472, 7298, -1000, -1000, 2042, -1000, -1000, -1000, 335,
	-1000, -1000, 16029, 230, -1000, -1000, -1000, -1000, 471, 2064,
	-1000, 676, -1000, -1000, -1000, 572, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1561, 465, 464, 462, -1000,
	-1000, -1000, -1000, 461, 460, 458, 457, 456, 455, 454,
	452, 450, 448, 447, 445, 444, 433, 432, 1042, -1000,
	606, -1000, -1000, 606, 606, -1000, 415, 415, 416, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 415, -1000, -1000,
	-1000, 547, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 431,
	1208, -1000, -1000, 1208, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 738, 36627, -47, 35355, -1000, 430, -47, -1000, -1000,
	425, -1000, 11100, 11100, -1000, -1000, -1000, -1000, -1000, 9728,
	1551, -1000, 4167, -199, 337, 548, -1000, 18673, 21253, -1000,
	-1000, 970, 1721, 602, -1000, 983, 1715, 453, -1000, 972,
	-1000, 949, 1703, -164, 22875, 23829, -24, -77, -1000, -1000,
	-1000, 5938, 40253, -1000, 40253, -1000, 824, 20286, 230, -1000,
	-1000, -1000, -1000, 422, 1292, 576, -1000, 339, -1000, 28941,
	576, 1285, -1000, -1000, -1000, 27339, -1000, 35355, -1000, 35355,
	-1000, 850, -1000, 36945, 110, 1696, -1000, -1000, 110, 1682,
	-1000, 108, 1679, -1000, -1000, 1229, 1668, -1000, -77, 1666,
	-1000, -1000, 16029, 19, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 678, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 28620, 23193, 1142, 610, 40253, 1961,
	40920, 22875, 40253, 23193, -1000, -1000, 35355, -1000, 16029, -1000,
	1947, 1289, -3, -1000, -1000, -1000, -1000, -1000, 1357, 1366,
	706, 1403, 9028, 9028, 1771, -1000, 231, 6268, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 28299, -1000, -1000, -1000,
	1151, 35355, -1000, -1000, 1556, -1000, 23193, 35355, -1000, 35355,
	-1000, 35355, -1000, 35355, -1000, 35355, -1000, -1000, -1000, -1000,
	-1000, 3416, -1000, 1552, -1000, -1000, 35355, -1000, 1340, -1000,
	-1000, -1000, 27981, 27660, -1000, 965, 791, -1000, -1000, 111,
	-1000, -1000, 1279, -1000, 1115, 1388, 14629, 1371, 16029, 128,
	-1000, -1000, 128, 128, 8685, -1000, -1000, -1000, 35355, -1000,
	40718, 40920, 6268, 777, 16029, 16029, 16029, 16029, 16029, 16029,
	16029, 16029, 16029, 16029, 16029, 16029, 16029, 16029, 16029, 16029,
	16029, 16029, 16029, 16029, 16029, 16029, 1382, 16029, 732, 16029,
	16029, 16029, 16029, 1310, 1099, 412, 1252, -1000, 1991, 1991,
	1991, 40547, 40547, 413, 505, -1000, 16029, -1000, 130, 14286,
	323, 39010, -46, 6955, -1000, -1000, -1000, 9371, 573, 40253,
	230, 4809, -1000, 2035, 819, 1572, 1473, 419, 604, 545,
	485, 16029, 16029, 13943, 13586, 13229, 16715, 12872, 16029, 7641,
	16029, 16029, 16029, 16029, 12515, 12158, -1000, 418, -1000, -1000,
	-1000, -1000, 2032, -1000, -1000, 2029, -1000, 768, 762, 2028,
	-1000, -3, -1000, 36627, -1000, 35355, -47, 1944, 35355, -1000,
	83, -1000, 39481, -1000, 83, 17, -1000, 1399, 1392, 19964,
	1359, 1096, 1096, 1096, -1000, 417, 496, 548, 5263, 11801,
	-1000, 26385, 1095, 255, 320, 18351, 1551, -1000, 35355, -85,
	916, -1000, 24783, 1882, 1825, 1789, 27339, 1920, 130, 1537,
	731, 27339, 729, 1906, 130, 1534, 728, 35355, 6268, 554,
	-1000, 35355, -1000, -1000, -1000, 1531, 16, -1000, -1000, 24465,
	1941, 1655, -1000, 1062, -1000, 1938, 35355, 1140, 1283, -1000,
	-1000, 785, 1651, 585, 362, 1932, 362, 20609, -1000, 35355,
	-1000, 35355, -1000, -1000, 35355, -1000, 35355, -1000, 35355, 35355,
	-1000, 35355, 35355, 14, 40253, 40394, 24147, 727, -1000, 621,
	24465, 126, 5, -1000, 818, -1000, -1000, -1000, -1000, 257,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 416, 1042, 415, 415, 415, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 547, -1000, -1000, 606, 606, 606,
	-1000, -1000, -86, -1000, 1529, 564, 0, 656, -3, -1000,
	1208, -1000, 926, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2055, -1000, 1998, -1000,
	-1000, 2023, -56, -1000, -56, -1000, 6268, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35355, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3081, -1000, -1000, -1000, -1000, -1000, -1000,
	35355, 35355, 35355, -1000, 27339, -1000, -1000, -1000, -1000, 40253,
	-1000, 375, -1000, -1000, 40253, 892, 1418, -1000, 1418, -59,
	-1000, 39419, 1390, 35355, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 562, 1091, 1091, 764, 764,
	764, 764, 1959, 704, 252, 306, 3807, 3807, 3807, 2369,
	662, 662, 3807, 3807, 3807, 40547, 4387, 3360, 16029, 16029,
	721, 1094, 412, 3360, 16029, 3360, 3360, 3360, 3360, -1000,
	1222, -1000, -1000, -1000, -1000, 1527, 411, 16715, 16715, -1000,
	-1000, -1000, 7298, 17045, -1000, -1000, -1000, -1000, 410, 16029,
	-1000, 39068, -210, -2, -1000, -1000, 16029, -124, -144, -1000,
	-1000, 847, -1000, 16029, -1000, -27, 16029, 16029, 16029, 319,
	-1000, 316, -1000, 720, -1000, 719, 718, 710, -1000, 409,
	1093, 406, 405, 16029, -1000, -1000, -1000, -1000, -1000, -1000,
	40193, 4240, 315, -1000, 1523, -160, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 312, -1000, 311, -1000, 40137, -160, 309,
	39301, -1000, 16715, 16715, 16715, 7298, 404, 308, -1000, 39363,
	-160, 39899, 11444, 11444, 11444, 307, 39837, 16029, -160, 4027,
	3758, 2719, -5, -11, -1000, -21, -1000, 2019, -26, 305,
	561, 560, 304, -1000, -1000, 403, -28, 585, 11100, 19319,
	6268, -1000, 585, 9728, -1000, 19964, 19964, 1318, 1375, 19964,
	-1000, -1000, -1000, -1000, 26385, 478, 548, 26385, -1000, 2018,
	1322, -29, -1000, -1000, -1000, 35355, 400, -1000, 548, 302,
	1104, 35355, 35355, 35355, -1000, -1000, 1278, 36309, 1274, 40920,
	35355, -1000, 399, 398, 1378, 1377, 35355, 35355, 35991, 35673,
	35355, 962, 130, -1000, 397, 35355, 969, 35355, 130, -1000,
	394, 35355, 961, -1000, 1457, 1188, -1000, 809, 1514, 35355,
	292, -31, -75, 40920, -1000, -1000, -1000, -1000, -1000, 35355,
	502, 35355, 130, 35355, 2054, 130, 35355, 1650, 1695, 520,
	35355, 1103, 16029, 1039, -1000, 18996, 608, 35355, 906, 59,
	-1000, -1000, -1000, 534, 35355, -1000, -1000, 110, 110, -1000,
	108, 1229, -77, -1000, 16029, -1000, -1000, 35355, 22875, -34,
	-1000, -1000, 40920, -1000, 503, 743, -1000, 2017, 571, 22875,
	35355, 9028, 9028, -1000, 1404, -1000, -1000, 888, -1000, 1020,
	-1000, -1000, -1000, -1000, 9028, -1000, -87, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 892, -1000, 16029, 2016, -1000, -1000,
	-1000, 8685, -1000, -1000, -1000, 35355, -183, 16029, 3360, 3360,
	16029, 16715, 16715, -1000, 3360, -1000, -1000, -1000, -1000, -1000,
	1507, 392, 16029, 40920, 4320, 3127, -36, -1000, 10757, -78,
	-1000, 16029, -1000, 38830, -1000, -1000, 501, 1604, -1000, 16029,
	39781, 290, 10414, -1000, 39719, -37, -37, -1000, 2053, 1309,
	1254, 1024, 884, 2013, -1000, 20931, 595, 1103, 38768, 40718,
	40920, -1000, 16029, -1000, -1000, 1505, 16029, -1000, 40718, 40920,
	16715, 16715, 16715, 16715, 16715, 16715, 16715, 16715, 16715, 16715,
	16715, 16715, 16715, 16715, 16715, 16715, 16715, 16715, 16715, 1301,
	16715, 1988, 1988, 1988, -80, 10071, -1000, 1549, 1505, 16029,
	16029, 40920, 287, 286, 285, -1000, 16029, -160, 16029, 16029,
	16029, -1000, -1000, -1000, 283, -1000, 2012, -1000, -1000, -1000,
	-1000, 126, -1000, 1469, -1000, -151, -1000, 1551, -1000, 1469,
	-1000, -1000, 1318, -1000, 391, 16029, 19964, -1000, 491, -1000,
	-41, -1000, 26385, -1000, 490, -207, -1000, 532, -1000, 548,
	389, 35355, 26385, -1000, -1000, -1000, 709, 705, 1646, -1000,
	1260, -1000, 614, -1000, 909, 16029, 17705, 385, 384, 1035,
	-1000, 1643, 1229, 1640, 1229, -1000, -85, 914, -1000, 16029,
	-1000, 700, -1000, -1000, 16029, -1000, 698, 571, 1494, 797,
	-1000, 805, -1000, 1440, -1000, 24465, 382, 35355, 381, -1000,
	379, -1000, -1000, 378, 35355, 1367, 520, 23511, -1000, 576,
	1388, 40253, -1000, 906, 8341, 1803, -44, -1000, -1000, -1000,
	585, 20609, 19964, 9728, -49, -1000, -1000, -1000, -1000, 40253,
	-87, 1778, 1778, -1000, 2011, -1000, 489, 282, -1000, 27021,
	-1000, -87, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35355,
	1109, 38714, -1000, 1839, 6268, 2000, 3360, 570, 190, 16029,
	40920, 40434, -57, 16029, 16029, -1000, -58, -1000, 16029, 486,
	40253, -1000, -1000, -1000, 40253, 16029, 2051, 16029, 280, 277,
	276, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 275,
	-1000, -1000, 37581, 16029, 273, -1000, 272, 271, 40253, 1549,
	40253, -1000, -1000, 594, 594, 840, 840, 840, 840, 1988,
	695, 1294, 745, 446, 446, 446, 170, 771, 771, 446,
	446, 446, 1493, 1374, 377, 38314, 16029, -60, -1000, -1000,
	-1000, 40253, 40253, 269, -1000, -1000, -1000, -160, 223, 38471,
	38420, -1000, 267, 266, 1463, 1886, -1000, 19964, 1463, -1000,
	35355, 40253, -1000, -199, -1000, 2010, -1000, -1000, 1322, -1000,
	5605, 26385, 35355, -63, -1000, 35355, 35355, 35355, 1618, -1000,
	2784, -1000, 38354, -65, -1000, 288, 1820, 16029, -1000, -1000,
	376, 17705, 35355, -1000, 1395, 1393, 647, 35355, -1000, 35355,
	-1000, 35355, 35355, 35355, -66, 35355, -68, 35355, -1000, 22875,
	754, -1000, -1000, 1446, -1000, 17705, 373, 35355, 24465, 1930,
	17705, 1138, 1369, 520, 23511, -1000, 785, 906, -1000, -1000,
	-92, -1000, 408, 130, 906, -1000, -101, -1000, 528, 1760,
	-1000, 1756, 484, -1000, -1000, -104, 371, -1000, 527, 526,
	-1000, -1000, -1000, -1000, 1839, 16029, 16029, 40434, -90, -1000,
	3360, 3360, -1000, 38202, -1000, 40253, -1000, 39719, -1000, -1000,
	-1000, -1000, 1069, -1000, 38174, -1000, -1000, -1000, -1000, 16715,
	1483, 370, 40920, 37961, -1000, -1000, 16029, -1000, -1000, -1000,
	-1000, 583, 16029, 16029, 1551, 583, -98, 548, -1000, -1000,
	-1000, 2001, -1000, -111, -1000, -1000, -1000, -1000, 35355, -1000,
	35355, -1000, 6268, 35355, 1475, 1237, -1000, -1000, 1376, 368,
	16715, 35355, -1000, 1014, 17705, 1839, 230, 6268, 1839, 37933,
	4809, -112, -113, 1228, -1000, 1215, 16029, -1000, 40920, 1229,
	1229, -1000, 692, 691, 670, -1000, 666, -1000, -114, 21583,
	1075, -127, 17705, -128, 264, 130, -133, 35355, -1000, 520,
	23511, -1000, 1695, -1000, 1740, 35355, 1786, -1000, -1000, 364,
	363, 359, -1000, 26703, 26703, 22875, 22875, -1000, 3360, 3360,
	-1000, -1000, 260, 1103, 1842, -1000, 4449, 16715, 40920, -135,
	-1000, 37905, -1000, 35355, 40253, -160, -1000, -1000, 26385, 483,
	-1000, -1000, 1256, -1000, -1000, 35355, 1247, -1000, -1000, 16029,
	38314, 357, 1440, 356, -1000, -1000, -1000, -1000, -1000, -1000,
	1820, -27, -1000, 1015, -1000, -1000, 40253, 1815, -1000, -1000,
	35355, 35355, 354, 353, -1000, 350, 230, 35355, 1014, -138,
	-1000, 1440, -1000, 1014, 349, 23511, -1000, 1367, 749, -141,
	35355, -1000, -1000, 6598, 22875, 22875, -1000, -148, -1000, -1000,
	-1000, 1011, 16029, 4449, -161, -1000, -1000, -129, -1000, 1928,
	-1000, -1000, -1000, -1000, 1587, 4296, 1326, 35355, -1000, 35355,
	1839, 254, 35355, 618, 6268, -1000, -1000, 16029, 16029, 16029,
	347, 1440, 1014, -1000, 1440, 17705, -1000, 1369, 846, -1000,
	585, -1000, -162, -167, -1000, 253, 16372, 16372, -160, -1000,
	35355, 345, 1579, -1000, 1123, 1092, 240, -168, -1000, -1000,
	339, -1000, 16029, -1000, -180, -181, -37, 35355, -1000, 1440,
	-1000, -187, -1000, 20609, -1000, 571, 571, -1000, -1000, -1000,
	17375, 1209, 894, 39125, -1000, -1000, -1000, 35355, -1000, 1127,
	1126, 855, -1000, -1000, -1000, -1000, -1000, 1326, 40253, -1000,
	-1000, 237, -188, -1000, 1014, -169, -1000, -1000, 1970, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1739, -1000, 628, 1194,
	1194, 1123, 2051, 1203, 1440, -1000, 15686, -1000, 1977, -1000,
	-1000, 1334, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 2492, 2489, 1594, 1918, 2485, 2483, 2480, 2474, 2472,
	2471, 2464, 2460, 2459, 2455, 2453, 2451, 2450, 2447, 2445,
	1913, 2443, 1909, 2442, 2431, 2428, 2427, 1822, 2423, 2420,
	2419, 2417, 2416, 2411, 1820, 2408, 1817, 2403, 2400, 2399,
	2397, 2395, 1811, 1797, 2394, 78, 106, 1790, 2393, 2392,
	1788, 1780, 1774, 2387, 1767, 2382, 2378, 1741, 1739, 2377,
	183, 2376, 2374, 2372, 1718, 1709, 2369, 2365, 2363, 138,
	2361, 1703, 2359, 2358, 2357, 2356, 2355, 2353, 2352, 2351,
	2350, 2349, 2348, 2344, 2335, 2334, 2332, 2326, 2324, 2323,
	150, 2319, 2318, 1673, 1634, 2317, 2313, 24, 29, 13,
	54, 20, 151, 2982, 137, 2312, 2310, 2303, 2298, 2297,
	2292, 86, 92, 85, 2285, 380, 2277, 2270, 43, 26,
	22, 16, 2269, 90, 2261, 2260, 1296, 31, 2259, 2247,
	121, 2246, 100, 36, 142, 144, 141, 105, 111, 2241,
	2240, 2239, 46, 109, 1, 2232, 2229, 11, 76, 17,
	2228, 58, 19, 2227, 2226, 118, 2223, 55, 89, 1529,
	91, 119, 777, 2220, 50, 12, 62, 2219, 2215, 147,
	32, 2214, 30, 72, 132, 2209, 69, 149, 117, 70,
	122, 126, 2208, 2205, 2198, 94, 2197, 108, 77, 2196,
	2195, 73, 2191, 53, 131, 2189, 2188, 2185, 84, 2181,
	114, 2179, 2177, 146, 135, 103, 8, 51, 60, 5,
	1514, 1507, 124, 81, 49, 45, 2171, 2216, 1038, 902,
	41, 98, 75, 47, 99, 48, 79, 134, 27, 2168,
	2167, 130, 2165, 2162, 2161, 2159, 2158, 97, 2156, 2153,
	18, 2152, 63, 25, 57, 83, 39, 115, 120, 113,
	143, 93, 2149, 80, 112, 2148, 33, 2146, 2145, 1226,
	107, 2144, 2143, 2141, 1002, 423, 283, 212, 2138, 2137,
	252, 225, 2136, 2135, 87, 2133, 104, 102, 88, 133,
	125, 34, 2132, 110, 35, 2131, 42, 21, 0, 1536,
	1083, 2130, 116, 59, 2129, 2128, 2126, 2123, 23, 3,
	9, 4, 7, 6, 96, 28, 2122, 2120, 123, 65,
	56, 2118, 148, 2117, 2114, 2112, 38, 2111, 14, 2107,
	10, 2106, 2105, 15, 2, 2091, 2089, 145, 2084, 95,
	2081, 1850, 2080, 139, 2079, 2078, 1733, 37, 101,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 113, 113,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 110, 110, 115, 115, 115,
	117, 117, 114, 114, 109, 109, 20, 20, 58, 58,
	100, 51, 51, 51, 286, 286, 287, 287, 96, 96,
	97, 97, 97, 97, 98, 98, 99, 99, 99, 26,
	26, 26, 22, 22, 22, 22, 22, 23, 23, 24,
	24, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 34, 34, 35, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 41, 41, 41, 39, 39, 39,
	38, 38, 38, 37, 37, 37, 40, 40, 40, 161,
	161, 160, 160, 163, 163, 42, 42, 42, 42, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 46, 46, 46, 46, 46,
	46, 46, 46, 255, 255, 254, 44, 44, 229, 229,
	47, 47, 186, 186, 48, 48, 48, 48, 48, 49,
	49, 59, 59, 327, 327, 327, 331, 331, 332, 332,
	333, 333, 333, 333, 333, 333, 333, 329, 329, 54,
	54, 54, 54, 55, 55, 55, 56, 56, 95, 95,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 65,
	65, 65, 67, 64, 64, 64, 66, 66, 66, 66,
	68, 68, 69, 69, 69, 69, 69, 70, 70, 280,
	278, 278, 279, 279, 140, 140, 140, 140, 140, 141,
	141, 141, 285, 285, 285, 285, 285, 285, 284, 284,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 83, 83, 83, 90,
	90, 90, 90, 90, 90, 90, 72, 72, 77, 77,
	77, 77, 77, 73, 73, 78, 78, 79, 79, 80,
	80, 80, 80, 80, 80, 74, 74, 74, 74, 82,
	82, 82, 82, 81, 81, 87, 87, 87, 87, 87,
	87, 84, 84, 84, 84, 85, 85, 85, 88, 88,
	88, 88, 75, 75, 76, 76, 89, 89, 86, 86,
	86, 43, 328, 328, 330, 330, 52, 52, 30, 30,
	31, 31, 142, 142, 143, 143, 208, 208, 208, 208,
	144, 144, 116, 116, 116, 207, 296, 296, 297, 297,
	297, 297, 297, 297, 298, 298, 298, 298, 298, 298,
	298, 294, 294, 295, 292, 292, 293, 293, 293, 293,
	334, 334, 206, 206, 147, 147, 301, 301, 301, 301,
	299, 299, 299, 299, 299, 302, 300, 303, 303, 303,
	303, 303, 241, 241, 241, 92, 92, 32, 32, 122,
	122, 33, 33, 29, 29, 29, 190, 190, 151, 151,
	246, 246, 246, 133, 133, 111, 111, 111, 14, 11,
	11, 11, 11, 11, 11, 19, 19, 17, 17, 191,
	191, 192, 192, 53, 53, 57, 57, 62, 62, 91,
	91, 91, 91, 91, 91, 21, 21, 21, 21, 25,
	25, 25, 25, 61, 61, 336, 336, 129, 129, 129,
	129, 130, 130, 203, 203, 204, 204, 204, 205, 205,
	205, 124, 123, 125, 125, 28, 28, 28, 118, 118,
	119, 119, 120, 120, 121, 121, 337, 337, 50, 50,
	50, 94, 94, 136, 136, 200, 200, 200, 202, 202,
	201, 201, 201, 176, 176, 176, 93, 93, 156, 156,
	165, 165, 166, 166, 252, 167, 167, 60, 60, 103,
	103, 101, 101, 101, 101, 101, 101, 102, 102, 102,
	104, 104, 104, 104, 104, 104, 104, 107, 107, 107,
	108, 108, 108, 106, 106, 309, 309, 309, 312, 312,
	308, 310, 310, 311, 311, 335, 335, 177, 177, 177,
	146, 145, 145, 149, 149, 148, 150, 150, 245, 245,
	245, 174, 174, 174, 174, 195, 195, 193, 193, 194,
	194, 196, 196, 197, 197, 197, 198, 198, 199, 199,
	173, 173, 225, 225, 105, 105, 105, 155, 155, 155,
	157, 157, 215, 215, 215, 216, 216, 214, 214, 214,
	214, 247, 247, 247, 247, 247, 247, 247, 247, 325,
	325, 325, 326, 326, 244, 244, 248, 248, 248, 248,
	248, 248, 242, 242, 242, 242, 243, 243, 253, 253,
	180, 180, 180, 180, 178, 178, 179, 179, 249, 249,
	249, 249, 175, 175, 250, 250, 250, 209, 209, 256,
	256, 256, 274, 274, 154, 154, 154, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 258, 258, 258, 258, 260, 260,
	260, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 273,
	273, 273, 273, 273, 261, 261, 268, 268, 269, 269,
	270, 271, 262, 262, 263, 263, 264, 265, 272, 272,
	272, 272, 276, 276, 266, 266, 266, 266, 266, 267,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 188, 188, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 219, 219,
	219, 219, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 304, 304, 304, 304, 304, 304, 304,
	304, 306, 306, 307, 307, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 313, 313, 314, 314, 316, 316, 317,
	317, 318, 319, 319, 319, 320, 321, 321, 315, 315,
	322, 322, 322, 323, 323, 324, 324, 324, 324, 324,
	231, 231, 231, 232, 232, 233, 239, 239, 239, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 131, 131, 131, 131, 131,
	162, 162, 228, 228, 226, 226, 226, 230, 230, 181,
	181, 275, 275, 275, 275, 275, 275, 275, 182, 182,
	182, 189, 183, 183, 184, 184, 184, 184, 184, 184,
	222, 223, 185, 185, 185, 224, 224, 234, 238, 238,
	237, 236, 236, 235, 235, 212, 212, 213, 213, 211,
	210, 170, 170, 169, 169, 168, 168, 338, 338, 240,
	240, 171, 171, 172, 164, 164, 251, 251, 251, 251,
	158, 158, 138, 138, 159, 159, 134, 134, 137, 137,
	135, 135, 135, 135, 152, 152, 153, 153, 132, 132,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 277, 277, 277, 227, 126, 126, 126, 127, 127,
	128, 128, 282, 282, 282, 283, 283, 283, 283, 281,
	281, 281, 281, 281, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 3,
	1, 2, 1, 2, 2, 8, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 3, 1, 5, 2, 3, 0,
	3, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	2, 6, 2, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 3, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 4, 3, 5, 3, 4,
	5, 2, 3, 3, 3, 4, 2, 3, 4, 3,
	3, 3, 4, 4, 4, 4, 2, 3, 5, 5,
	5, 2, 2, 0, 2, 0, 3, 2, 7, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 3, 2, 0, 3, 1,
	2, 2, 3, 6, 2, 1, 1, 2, 4, 2,
	5, 7, 8, 5, 3, 1, 4, 6, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 2, 4, 3, 3,
	0, 6, 3, 11, 14, 4, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 8, 10, 8, 10, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 2, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 0, 1, 3, 2, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 2, 0, 8, 3, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 2, 2, 3, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 6, 3, 3, 1, 5, 5, 0,
	2, 3, 1, 3, 2, 0, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 2, 3, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 3, 1, 1, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 3, 3, 1,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 6,
	6, 4, 3, 4, 3, 4, 3, 4, 4, 3,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -52,
	-44, -58, -57, -59, -62, -60, -53, -54, -63, -71,
	-91, -92, -93, -94, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 90, -311, 94, -37, -38, -39, -41, -40, 98,
	105, 107, 125, 131, 134, 214, 220, 240, 242, 244,
	251, -101, -103, 238, -55, -56, -64, -65, -66, -67,
	-95, 262, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, -89,
	265, -21, -25, -61, 303, -9, -10, -13, -12, -11,
	-16, -18, -15, -17, -19, -14, -309, -104, -102, 354,
	239, 312, 35, 274, 61, 101, 246, 328, 335, -107,
	-105, -106, -108, 255, 320, 284, 358, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	2, 284, 323, 83, 141, -327, 2, -159, 284, 83,
	-135, -126, 347, 4, -288, -290, 20, 21, 23, 33,
	34, 35, 40, 44, 47, 48, 55, 60, 61, 62,
	64, 66, 67, 68, 71, 72, 73, 81, 82, 84,
	86, 90, 92, 94, 97, 98, 100, 105, 106, 107,
	113, 114, 119, 121, 126, 131, 132, 133, 134, 135,
	142, 145, 147, 140, 157, 158, 159, 161, 162, 163,
	166, 165, 170, 173, 176, 178, 179, 180, 183, 181,
	185, 186, 188, 187, 193, 195, 196, 198, 201, 204,
	207, 210, 211, 212, 213, 214, 216, 218, 220, 222,
	223, 224, 225, 226, 228, 229, 231, 232, 233, 234,
	235, 238, 236, 237, 239, 240, 241, 242, 244, 246,
	247, 249, 263, 264, 275, 251, 252, 253, 254, 258,
	256, 259, 260, 262, 265, 267, 270, 273, 274, 276,
	279, 280, 277, 272, 283, 285, 286, 287, 288, 289,
	290, 291, 298, 299, 303, 304, 305, 306, 309, 310,
	311, 312, 314, 317, 318, 319, 324, 329, 330, 331,
	332, 333, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 51, 52, 53, 56, 85, 87, 88, 104, 108,
	109, 115, 116, 117, 127, 129, 136, 137, 146, 148,
	149, 150, 151, 152, 154, 168, 182, 192, 194, 205,
	209, 217, 219, 227, 248, 257, 268, 269, 278, 281,
	293, 294, 295, 300, 301, 316, 320, 321, 357, 357,
	2, 158, 224, -134, -126, 83, 357, 357, 357, 357,
	284, 2, 313, 323, -190, 83, 308, 357, 357, -126,
	220, 22, 2, 92, 145, 311, 310, 22, 216, 256,
	286, 288, 2, 357, 357, 357, 357, 357, 2, 323,
	284, 141, 83, 313, -126, 2, -46, 2, 354, -45,
	-4, -27, -36, -47, -42, -43, -20, -22, -34, -51,
	-50, -52, -54, -58, -57, -60, -64, -65, -71, -93,
	-94, 262, -331, 2, 22, -332, -333, 69, 98, 125,
	255, 145, 92, 310, -281, 4, -288, -290, -289, -291,
	58, 70, 124, 144, 138, 156, 160, 169, 171, 184,
	206, 208, 245, 266, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 43, 49, 50, 54, 57, 59, 65,
	69, 74, 75, 77, 76, 78, 79, 80, 89, 91,
	93, 95, 96, 99, 101, 103, 110, 111, 112, 120,
	122, 123, 125, 128, 130, 139, 141, 143, 153, 155,
	164, 167, 172, 174, 175, 189, 190, 191, 197, 199,
	200, 202, 203, 215, 221, 230, 243, 255, 261, 271,
	282, 284, 292, 296, 297, 302, 307, 308, 313, 315,
	322, 323, 325, 326, 327, 328, 284, 2, 158, 2,
	-126, 2, -327, 2, 158, 2, -331, 2, -126, 2,
	-130, 2, 251, -126, 357, 357, 357, 357, 357, 173,
	55, 248, 259, -69, 299, -68, 293, -280, -70, 2,
	-160, 183, -126, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	2, -90, 259, 34, 55, 22, 60, 84, 126, 141,
	142, 162, 65, 66, 223, 173, 159, 298, 163, 260,
	285, 299, 69, 314, 289, 106, 4, 83, 183, 261,
	293, 357, 357, 357, -335, 2, 284, -102, -104, -103,
	-148, -149, 307, 153, 103, 203, -101, -103, 2, -309,
	-90, 259, 2, 55, 22, -278, 2, -240, 199, -217,
	89, -219, 345, 346, 340, 189, 334, -231, -221, -234,
	104, 248, 354, -134, -220, 360, 9, -306, -103, 29,
	-232, -233, 49, -126, 7, 8, 5, 6, -132, -258,
	-227, -267, 302, 110, 191, -304, -305, 4, -288, -282,
	-259, -269, -263, -266, 154, 58, 75, 76, 79, 77,
	80, 261, 313, 50, 28, 108, 109, 209, 217, 281,
	300, 301, 136, 192, 137, 56, 127, 168, 97, 37,
	39, 41, 42, 51, 52, 85, 87, 88, 115, 116,
	117, 146, 148, 149, 150, 151, 152, 194, 227, 268,
	278, 294, 295, 321, -289, -270, -271, -264, -265, -272,
	-336, 2, 299, 299, 2, -336, 2, -336, 2, -129,
	2, 299, 296, -312, 228, -308, -126, -312, 357, 357,
	359, 357, -145, -146, 2, 22, 95, -172, 2, 354,
	-247, 2, 352, -249, -134, -103, -248, 354, 200, -3,
	2, -249, 136, -134, 2, -249, 136, -134, 2, -126,
	2, -137, 136, -134, 296, 359, -159, -152, -126, -211,
	-210, 356, -217, 2, -217, 2, 123, 354, -169, -170,
	-210, -211, 2, -160, 136, -126, 2, -160, 2, 141,
	-126, 136, 2, -126, 22, 123, 2, 155, 2, 155,
	2, -250, 2, -249, -161, 136, 2, -160, -161, 136,
	2, -138, 136, 2, -137, -126, 136, 2, -152, 136,
	2, -186, 354, -255, 2, -254, -283, 4, -288, -290,
	-289, 320, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 259, 199, 359, -160, -217, -229,
	354, 123, -217, 199, -126, 2, 263, 2, 354, -69,
	53, 299, -204, 2, -205, -123, -124, -125, 157, 222,
	226, 333, 296, 339, 123, -278, -163, 356, -90, 2,
	-286, 2, -284, 9, -283, 5, 263, 2, 223, 260,
	55, 123, 2, 2, -328, 2, 199, 123, 2, 123,
	2, 123, 2, 123, 2, 123, 2, 2, 223, 260,
	2, 120, 2, 298, 2, 2, 123, 2, 157, 222,
	275, 2, 284, 323, 2, 123, 123, 333, 2, -175,
	-249, -148, -149, -174, -193, -194, 172, 112, 197, -177,
	22, 95, -177, -177, 44, 355, 355, -90, 263, 2,
	10, 11, 57, 33, 345, 346, 347, 348, 118, 349,
	350, 343, 344, 342, 337, 338, 339, 63, 177, 250,
	13, 14, 15, 26, 202, 171, 334, 138, 266, 340,
	16, 17, 18, 156, 36, 139, -131, -139, -217, -217,
	-217, -217, -217, 208, -168, -212, 352, -103, 354, 354,
	-103, -217, -162, 354, 7, -103, -226, 352, -235, -217,
	-169, 354, 5, 354, 5, -313, 329, 120, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 219, -276, 324, -276,
	-276, -260, 354, -260, -261, 354, -260, 330, 335, 354,
	-203, -204, -203, 296, -130, 359, -312, -153, 354, -172,
	-164, -251, -217, 347, -164, -171, -240, 70, -180, 160,
	184, 124, 169, 245, 144, 7, -46, -214, 360, 354,
	347, -244, 335, -103, -248, 354, -247, -134, 354, -113,
	236, -112, 21, 23, 98, 318, 104, 272, 290, 252,
	236, 104, 236, 272, 290, 252, 236, 104, 360, -286,
	-135, 359, -281, 347, 276, 355, -158, -134, -170, 354,
	-147, 189, -122, -310, 328, -147, 354, -127, 136, 2,
	-126, -310, 189, -250, -136, -134, -136, 262, -126, 30,
	-115, 359, 48, 241, 104, -115, 104, -115, 359, 104,
	-115, 104, 104, -162, -217, 355, 359, -327, -333, 69,
	354, 30, -228, -256, -257, -259, -268, -262, -266, -267,
	40, 46, 45, 291, 182, 257, 269, 316, 38, 198,
	147, 146, 148, 149, 150, 151, 152, 268, 37, 227,
	116, 117, 115, 97, 88, 87, 194, 42, 41, -270,
	-271, -264, -265, 85, 294, 295, 154, 39, 52, 51,
	321, 278, -287, -286, -327, -280, -162, 30, -204, 2,
	359, -205, 170, -141, 176, 188, 132, 200, 331, -285,
	5, 4, -227, -241, 89, 173, -267, 8, 346, -277,
	7, 345, -279, -278, -279, 73, 356, -281, -160, 22,
	264, 2, -280, -330, 120, -327, -280, -280, -280, -280,
	-280, 259, -46, 120, -126, 170, -280, 2, -280, 2,
	284, 141, 284, -115, 359, -174, -194, -193, -196, -217,
	22, -199, 114, 185, -217, -219, -102, -102, -102, -150,
	-245, -217, 221, 141, -280, -274, -256, -273, 232, 233,
	231, 235, 234, -256, -281, 293, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, 171, 138,
	266, 36, 139, -217, 296, -217, -217, -217, -217, 181,
	189, 191, 302, 110, 309, 95, 195, -338, 282, 32,
	-224, -103, 354, -239, 27, 271, 22, -231, 248, 354,
	-212, -217, -213, -162, 355, 355, 359, -162, -230, 353,
	-226, -238, -237, 325, 355, -162, 322, 22, 95, 347,
	2, 7, -187, 332, 180, 86, 133, 179, -188, 254,
	-314, 113, 128, 354, 355, 2, 355, 2, 355, 2,
	-217, -217, -181, 2, -275, -162, 4, 332, 180, 86,
	133, 179, 254, -181, 2, -182, 2, -217, -162, -183,
	-218, -219, 345, 346, 340, 354, 248, -184, 2, -217,
	-162, -217, 43, 167, 297, -185, -217, 123, -162, -217,
	-217, -217, -162, -162, 2, -162, 2, 354, 7, 7,
	293, 293, 7, -130, -308, 30, -152, -155, 359, 123,
	30, 4, -155, 359, 355, 160, 160, -247, -180, 160,
	-178, 206, -178, -178, -325, 354, 353, -244, -281, 352,
	361, -162, 2, -243, -242, 30, -126, 204, 355, -134,
	359, 296, -191, 65, 59, -207, 136, 59, -292, -126,
	65, -293, 54, 308, 221, 122, -191, 65, -191, 65,
	65, -249, 33, -60, 123, 296, -249, 296, 33, -60,
	123, 296, -137, -281, -253, 336, -126, 123, 355, 359,
	-142, -152, -143, -126, -208, -207, -294, -295, -292, 141,
	308, 111, 30, 104, 213, 30, 199, 189, -118, 287,
	104, -209, 326, -200, -60, 354, 89, 30, -200, -165,
	-166, -252, -167, -134, 354, -126, -160, -161, -161, -137,
	-138, -126, -152, 355, 359, -46, -254, 296, 315, -143,
	-45, 355, 359, -154, 29, 352, -187, 354, -253, 359,
	123, 339, 296, 355, 299, -205, -140, 226, 270, 237,
	258, 8, 7, 7, 359, -281, -329, -126, 259, -46,
	-134, -137, -134, -249, -197, -277, 354, 346, -198, 248,
	249, 359, -111, 31, 93, 161, -134, 333, -217, -217,
	296, -338, 282, -224, -217, 181, 191, 302, 110, 309,
	95, 195, 123, 354, -218, -218, -162, -221, 354, -162,
	353, 363, 355, -217, 353, 353, 359, -236, -237, 99,
	-217, -149, 359, -148, -217, -162, -162, 355, 355, 296,
	296, 296, 296, 354, -319, 207, 354, 354, -217, 30,
	359, 355, 123, 355, 355, -189, 215, 355, 10, 11,
	345, 346, 347, 348, 118, 349, 350, 343, 344, 342,
	337, 338, 339, 63, 177, 250, 13, 14, 15, 156,
	139, -218, -218, -218, -162, 354, 355, -222, -223, 123,
	120, 30, -185, -185, -185, 355, 123, -162, 359, 359,
	359, 355, 355, 355, 7, 355, 359, 355, 333, 333,
	355, 354, 355, -209, -251, -157, 2, -247, -281, -209,
	-240, -247, -247, -179, 315, 199, 160, -247, -242, 355,
	-326, 7, -244, -243, 7, -216, -215, 121, 187, 355,
	-126, 354, -244, 355, -112, -134, -126, -126, 189, -207,
	136, -117, 189, -256, -126, 354, 354, 161, 161, -126,
	-126, 136, -126, 136, -126, -126, -113, 236, -60, 354,
	-134, 236, -126, -60, 354, -126, 236, -96, 135, 195,
	276, 123, -134, 355, 355, 359, -127, 141, -127, -60,
	-160, 5, -60, -134, 104, -119, 100, -337, 339, -126,
	-149, -217, -176, -202, 243, 199, -158, 320, -126, -176,
	-156, 359, 123, 339, -158, -115, -115, -115, -115, -217,
	-329, -286, 355, -256, 352, 353, 7, 7, -99, 328,
	-286, -329, -278, -278, -123, 306, 62, 226, -278, 359,
	-198, -217, -245, -134, 360, -217, -217, -218, -218, 123,
	354, -217, -228, 26, 26, 355, -162, 355, 359, -213,
	-217, 355, -226, 101, -217, 292, 355, 322, -149, -149,
	-149, 5, 180, 133, 179, -188, 179, -188, -188, 7,
	-320, -126, 354, 326, -148, 355, -274, -256, -217, -222,
	-217, -274, -256, -218, -218, -218, -218, -218, -218, -218,
	-218, -218, -218, -218, -218, -218, -218, -218, -218, -218,
	-218, -218, 95, 189, 195, -218, 359, -162, 355, -223,
	-222, -217, -217, -256, 355, 355, 355, -162, -217, -217,
	-217, 355, 7, -45, -173, 128, -253, 359, -173, -179,
	354, -217, -247, 353, 355, 359, -243, 353, 359, 362,
	339, -244, 354, -152, -242, 296, 296, 104, 189, 317,
	-296, -293, -217, -151, -246, -126, -307, 354, -304, -305,
	-132, 354, 354, -110, 98, 262, -192, 104, -115, 104,
	-115, 296, -191, 65, -162, 296, -162, 296, -99, 123,
	283, 276, -144, 140, -208, 354, -127, 354, 354, -147,
	354, -126, -120, 166, -337, -284, -310, -195, -193, -176,
	-164, 190, 64, 355, -209, -166, -157, -240, 355, -100,
	71, -100, 7, 353, 355, -98, 201, -97, -126, 5,
	-126, 200, 355, -111, -281, 26, 26, -217, -228, 355,
	-217, -217, 355, -217, 353, -217, 5, -217, 355, 355,
	355, 355, -321, -126, -217, 355, 355, 355, -223, 123,
	95, 195, 354, -217, 355, 355, 359, 355, 355, 355,
	355, -225, 130, 44, -247, -225, -152, -214, 7, -215,
	-281, 352, -243, -152, 355, -126, -126, -207, 104, -297,
	65, -298, 57, 111, 69, 189, 191, 308, 221, 54,
	89, 230, 355, 355, 359, -133, -169, 57, -133, -217,
	354, -151, -152, 189, 89, 189, 89, 82, 304, -126,
	-126, -134, -126, -126, 355, -134, 355, -126, -287, 293,
	139, -151, 354, -152, -142, 30, -151, 199, -121, 165,
	-337, -284, -118, -176, -201, 354, 199, -60, -176, 339,
	82, 82, 353, 359, 354, 339, 339, -111, -217, -217,
	355, 355, -149, -315, 212, 355, -218, 123, 354, -228,
	355, -217, -316, 327, -217, -162, -316, 355, -244, 7,
	355, -207, -126, -281, -126, 111, 136, 191, 161, 354,
	-218, -134, -206, -334, 68, 280, -246, -111, -281, -111,
	355, -162, 355, 355, 191, 191, -217, -256, -115, -115,
	296, 296, 296, 296, -220, -132, -126, 210, 355, -151,
	355, 355, -60, 355, -134, -337, -284, -119, 96, -152,
	65, -172, -103, 354, 354, 354, -97, -98, -286, -286,
	355, -149, 44, -218, -228, 355, 355, -317, -318, -126,
	-243, 353, -298, -127, 189, -217, -128, 354, -144, 354,
	-133, -149, 230, -114, 57, -126, -126, 354, 354, 354,
	-134, -206, 355, -144, -206, 354, -284, -120, 310, 190,
	355, -126, -287, -287, 355, -322, 225, 249, -162, 355,
	359, 30, 104, 355, -301, 178, -126, -152, -111, 355,
	-134, -109, 315, -281, -162, -162, -162, 354, -144, -206,
	-144, -151, -121, 262, -209, 355, 355, 355, -323, -324,
	36, 305, 73, -217, -323, -318, -320, 111, -299, -302,
	-300, 199, 124, 211, 267, 355, 355, -147, -217, 355,
	355, -149, -152, -144, 355, -165, -99, -99, -324, 218,
	119, 248, 218, 119, -126, -300, 199, -302, 199, 310,
	92, -301, 355, 355, -206, -209, 26, -303, 186, 241,
	48, 262, -303, -299, -116, 48, 241, -144, -324, 20,
	191, 89,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 8, 9, 10,
	12, 14, 16, 17, 19, 21, 23, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 0, 0, 151, 153, 155, 157, -2, 160,
	162, 0, 0, 0, 173, 175, 177, 179, 181, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 637, -2, 0, 279, 281, 290, 292, 294, 296,
	297, 0, 340, 342, 344, 346, 348, 350, 352, 354,
	356, 358, 360, 362, 364, 366, 368, 369, 371, 373,
	0, 559, 561, 563, -2, 63, 64, 65, 66, 67,
	73, 74, 75, 76, 69, 71, 673, -2, 684, 0,
	0, 0, -2, 0, -2, -2, -2, 0, 0, 650,
	652, 654, 656, -2, 0, 0, -2, 6, 11, 13,
	15, 18, 20, 22, 25, 27, 29, 31, 33, 35,
	37, 39, 42, 48, 50, 52, 55, 57, 59, 61,
	62, 0, 0, 0, 0, 0, 117, 263, 0, 1237,
	1164, 1170, 1171, 1195, 1196, 1197, 1214, 1215, 1216, 1217,
	1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1238,
	1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
	1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
	1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 143, 145,
	146, 0, 0, 0, 1166, 1237, 152, 154, 156, 158,
	0, 164, 0, 0, 0, 0, 526, 161, 163, 254,
	1297, 256, 258, 0, 0, 0, 0, 167, 168, 169,
	170, 171, 172, 174, 176, 178, 180, 182, 183, 0,
	0, 0, 0, 0, 253, 251, 205, 206, 0, 235,
	236, 237, 238, 239, 241, 242, 209, 211, 212, 214,
	216, 218, 220, 221, 223, 225, 226, 228, 230, 231,
	233, 0, 0, 260, 266, 267, 268, 270, 271, 272,
	273, 274, 275, 276, 441, 1209, 1210, 1211, 1212, 1213,
	1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
	1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
	1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
	1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
	1517, 1518, 1519, 1520, 1521, 1522, 0, 123, 0, 447,
	249, 247, 0, 119, 0, 556, 0, 262, 557, 558,
	553, 554, 1324, 582, 280, 282, 291, 293, 295, -2,
	-2, 1413, -2, 304, -2, 312, 1419, 0, 315, 316,
	319, -2, 201, 341, 343, 345, 347, 349, 351, 353,
	355, 357, 359, 361, 363, 365, 367, 370, 372, 374,
	375, 376, 0, 0, 0, 380, 0, -2, -2, 0,
	0, 0, 0, 0, -2, 0, -2, 0, 0, -2,
	-2, 0, 0, -2, 0, 0, 379, 381, 382, 383,
	0, 560, 562, 564, 0, 516, 675, -2, 648, 649,
	-2, 0, 679, 679, 679, 0, 0, 649, 647, 0,
	283, 0, 285, 0, 380, 288, 289, 320, 321, 1149,
	1150, 876, 0, 0, 0, 0, 0, 0, 968, 970,
	1387, 1413, 0, 972, 973, 0, 975, 977, 978, 0,
	981, 982, 1134, 1166, 1180, 1181, 1182, 1183, 0, 0,
	1186, 0, 1188, 1189, 1190, 1034, 992, -2, -2, 1178,
	804, 805, 806, 807, -2, 1427, 996, 999, 1002, 1005,
	1006, 1007, 1008, 0, 1371, 1388, 1389, 1409, 1410, 1418,
	1422, 1423, 1395, 1406, 1396, 1383, 1393, 1404, 1243, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1204, 838, 839, 844, 845, 847,
	584, 566, 575, 584, 568, 569, 570, 571, 572, 573,
	574, 577, 0, 665, 1303, 668, 1177, 666, 651, 653,
	0, 655, 0, 0, 659, 681, 680, 714, 715, 0,
	663, 664, 674, 730, 768, 745, 736, 0, 0, 2,
	68, 0, 1395, 768, 70, 0, 1395, 768, 72, 0,
	77, 0, 1395, 1169, 0, 0, 264, 265, 1174, 1172,
	1173, 0, 147, 148, 149, 150, 0, 0, 1167, 1143,
	1141, 1142, 159, 495, 1395, -2, 518, 495, 522, -2,
	672, 1395, 597, 255, 257, 0, 166, 0, 610, 0,
	612, 0, 627, 774, 109, 1395, 186, 199, 109, 1395,
	189, 109, 1395, 192, 1162, 109, 1395, 195, 196, 1395,
	198, 250, 0, 0, -2, 243, 245, 1205, 1206, 1207,
	1208, -2, 240, 210, 213, 215, 217, 219, 222, 224,
	227, 229, 232, 234, -2, 0, 0, 0, 446, 0,
	0, 0, 555, 0, 581, 298, 0, 301, 0, 303,
	1382, -2, 306, 307, 585, 588, 589, 590, 0, 0,
	0, 0, 0, 0, 0, 317, 202, 0, 377, 378,
	386, 387, 124, 125, 338, 339, 0, 390, 411, 423,
	0, 0, 394, 396, 445, 398, 0, 0, 400, 0,
	402, 0, 404, 0, 406, 0, 408, 410, 412, 424,
	414, 674, 416, 0, 418, 422, 0, 427, 0, 429,
	430, 431, 0, 0, 437, 0, 0, 384, 385, 109,
	772, -2, 0, 643, 693, 694, 0, 0, 0, 0,
	677, 678, 0, 0, 0, 639, 640, 284, 0, 287,
	0, 0, 0, 0, 1069, 1070, 1071, 1072, 1073, 1074,
	1077, 1078, 1075, 1076, 1079, 1080, 1081, 0, 0, 0,
	1082, 1083, 1084, 0, 0, 1086, 0, 1088, 0, 0,
	0, 0, 0, 0, 1148, 0, 0, 1085, 881, 882,
	883, 905, 906, 0, 969, 1145, 1138, 971, 0, 0,
	-2, 1090, 0, 0, 974, 979, 980, 0, 0, 1133,
	-2, 0, 1185, 0, 873, 1036, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 823, 841, 852, 849,
	848, 825, 0, 824, 822, 0, 826, 0, 0, 0,
	565, 583, 567, 0, 579, 0, 667, 0, 0, 716,
	719, 1154, 1158, 1159, 719, 0, 1151, 0, 0, 0,
	0, 765, 765, 765, 763, 739, 0, 745, 0, 0,
	769, 757, 0, -2, 736, 0, 0, 770, 0, 78,
	550, 88, 0, 550, 550, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 759,
	1165, 0, 1139, 1140, 139, 0, 0, 1160, 1144, 453,
	0, 0, 517, 0, 671, 0, 0, 0, 1395, 525,
	1198, 599, 0, 778, 0, 613, 0, 0, 775, 0,
	184, 0, 107, 108, 0, 187, 0, 190, 0, 0,
	193, 0, 0, 0, 1090, 674, 0, 0, 269, 0,
	0, 674, 0, 1092, 786, 787, 788, 789, 790, 873,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 835, 0, 810, 810, 810, 827, 828, 836,
	837, 842, 843, 854, 855, 857, 859, 853, 853, 853,
	850, 851, 759, 126, 0, 0, 0, 0, 308, 309,
	0, 587, 0, 591, 329, 330, 331, 593, 594, 313,
	332, 333, 334, 335, 336, 337, 0, 512, 0, 514,
	1191, 0, 310, 322, 311, 314, 0, 203, 388, 389,
	391, 392, 393, 397, 0, 442, 399, 401, 403, 405,
	407, 415, 419, 674, 425, 428, 432, 433, 434, 435,
	0, 0, 0, 515, 0, 646, 691, 692, 697, 701,
	702, 705, 708, 709, 699, 876, 660, 661, 662, 685,
	686, 537, 0, 0, 286, 877, 782, 783, 829, 830,
	831, 832, 833, 878, 879, 0, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, -2, -2, -2, 897,
	898, 899, -2, -2, -2, 903, 904, -2, 1087, 1089,
	0, 1148, 0, -2, 0, -2, -2, -2, -2, 917,
	0, 919, 922, 924, 926, 0, 0, 0, 0, 1147,
	936, 1125, 0, 0, 1066, 1067, 1068, 921, 0, 0,
	1146, 1137, 0, 0, -2, 976, 0, 0, 0, 1096,
	1097, 1132, 1128, 0, 983, 684, 0, 0, 0, 0,
	990, 0, 1194, 860, 861, 862, 863, 864, 865, 874,
	1044, 0, 0, 0, 997, 998, 1000, 1001, 1003, 1004,
	0, 0, 0, 1012, 0, 1100, -2, -2, -2, -2,
	-2, -2, -2, 0, 1014, 0, 1016, 1090, 1110, 0,
	0, 939, 0, 0, 0, 0, 1413, 0, 1019, 1090,
	1118, 0, 0, 0, 0, 0, 1090, 0, 1124, 0,
	0, 0, 0, 0, 1030, 0, 1032, 0, 0, 0,
	0, 0, 0, 578, 669, 0, 0, 778, 0, 0,
	0, 1157, 778, 0, 1153, 0, 0, 0, 0, 0,
	760, 764, 761, 762, 0, 0, 745, 757, 727, 0,
	0, 0, 734, 735, 756, 0, 755, 744, -2, 0,
	0, 0, 0, 0, 549, 90, 1395, 0, 111, 0,
	0, 485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 83,
	0, 0, 0, 1168, 129, 0, 1175, 0, 0, 0,
	0, 0, 452, 1174, 454, 456, 457, 458, 459, 1199,
	0, 1199, 0, 0, 0, 0, 0, 0, 601, 607,
	0, 684, 0, 625, 615, 0, 0, 0, 625, 629,
	630, 632, 633, 0, 0, 776, 200, 109, 109, 1163,
	109, 109, 197, 252, 0, 207, 244, 0, 0, 0,
	246, 248, 0, 779, 781, 0, 791, 0, 138, 0,
	0, 0, 0, 302, 0, 586, 592, 0, 326, 0,
	328, 513, 1193, 1192, 0, 204, 444, 277, 417, 420,
	438, 439, 440, 773, 0, 703, 0, 0, 700, 706,
	707, 0, 688, 535, 536, 0, 0, 0, -2, -2,
	0, 0, 0, 937, -2, 918, 920, 923, 925, 927,
	0, 0, 0, 0, 0, 0, 0, 938, 0, 0,
	1135, 1138, -2, 1091, 1094, 1095, 0, 0, 1129, 0,
	0, 0, 0, 683, 684, 684, 684, 989, 0, 0,
	0, 0, 0, 0, 991, 0, 0, 0, 0, 0,
	0, 1011, 0, 1013, 1015, 0, 0, 1017, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 942, 943, 944, 0, 0, 1018, 1116, 1117, 0,
	0, 0, 0, 0, 0, 1024, 0, 1123, 0, 0,
	0, 1028, 1029, 1031, 0, 808, 0, 834, 856, 858,
	846, 674, 1176, 711, 1155, 759, 718, 720, 1156, 711,
	1152, 747, 0, 749, 0, 0, 0, 751, 0, 740,
	0, 742, 757, 732, 0, 0, 725, 0, 724, 745,
	753, 0, 0, 771, 89, 539, 0, 0, 0, 92,
	1395, 100, 0, 467, 0, 0, 0, 0, 0, 552,
	101, 1395, 109, 1395, 109, 102, 79, 550, 80, 0,
	545, 0, 538, 81, 0, 547, 0, 138, 0, 0,
	140, 0, 1161, 461, 494, 0, 0, 1199, 0, 450,
	495, 519, 521, 0, 0, 603, 607, 0, 606, 672,
	696, 777, 608, 625, 0, 0, 0, 617, 614, 611,
	778, 0, 0, 0, 0, 185, 188, 191, 194, 1091,
	259, 0, 0, 1093, 0, 784, 0, 0, 118, 0,
	127, 261, 299, 300, 305, 324, 325, 327, 323, 0,
	0, 0, 687, 537, 0, 880, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1126, 0, 1061, 0, 0,
	1137, -2, 1098, 1127, 1131, 0, 984, 0, 0, 0,
	0, 1187, 866, 867, 868, 869, 870, 871, 872, 0,
	1042, 1043, 1047, 0, 0, 995, 0, 0, 1099, 1109,
	1111, 940, 941, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, -2, -2, -2, 958, 959, 960, -2,
	-2, -2, 0, 0, 0, 1112, 0, 0, 1064, 1114,
	1115, 1120, 1121, 0, 1021, 1022, 1023, 1122, 0, 0,
	0, 840, 0, 0, 713, 0, 717, 0, 713, 748,
	0, 767, 750, 730, 741, 0, 738, 728, 0, 729,
	0, 757, 0, 0, 737, 0, 0, 0, 0, 110,
	465, 484, 0, 0, 528, 534, 534, 0, 993, 994,
	0, 0, 0, 94, 0, 0, 0, 0, 98, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 141, 448, 0, 455, 0, 0, 0, 453, 0,
	0, 0, 605, 607, 0, 598, 599, 625, 695, 609,
	623, 624, 622, 0, 625, 631, 628, 634, 0, 0,
	120, 0, 0, 785, 792, 136, 1287, 134, 131, 133,
	278, 698, 704, 689, 537, 0, 0, -2, 0, 930,
	-2, -2, 1060, 1091, 1136, 1130, 1184, 684, 985, 987,
	988, 875, 1049, 1046, 0, 1033, 1009, 1010, 1108, 0,
	0, 0, 0, 1091, 1063, 1020, 0, 1026, 1027, 809,
	670, 1038, 0, 0, 721, 1038, 0, 745, 743, 726,
	722, 0, 733, 0, 754, 541, 543, 91, 0, 466,
	0, 469, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 486, 493, 0, 537, 1179, 0, 537, 0,
	0, 0, 0, 0, 106, 0, 0, 551, 0, 109,
	109, 540, 0, 0, 0, 546, 0, 548, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 607,
	0, 600, 601, 165, 0, 0, 0, 616, 626, 0,
	0, 0, 780, 0, 0, 0, 0, 690, -2, -2,
	931, 1062, 0, 684, 0, 1035, -2, 0, 0, 0,
	1065, 0, 657, 0, 712, 710, 658, 766, 757, 0,
	752, 93, 0, 470, 471, 1199, 0, 474, 477, 0,
	479, 1201, 461, 0, 490, 491, 529, 530, 533, 531,
	534, 684, 488, 0, 95, 96, 105, 113, 97, 103,
	0, 0, 0, 0, 758, 0, 0, 0, 493, 0,
	483, 461, 451, 493, 0, 0, 602, 603, 0, 0,
	0, 635, 636, 0, 0, 0, 135, 0, 130, 132,
	986, 1052, 0, -2, 0, 966, 1025, 1037, 1039, 0,
	731, 723, 468, 472, 0, 0, 499, 0, 487, 0,
	537, 0, 0, 115, 0, 542, 544, 0, 0, 0,
	0, 461, 493, 449, 461, 0, 604, 605, 0, 619,
	778, 621, 0, 0, 137, 0, 0, 0, 1048, 967,
	0, 0, 0, 478, 504, 0, 0, 0, 532, 984,
	495, 99, 0, 112, 0, 0, 684, 0, 481, 461,
	523, 0, 596, 0, 620, 138, 138, 1045, 1050, 1053,
	-2, 1355, 1234, 0, 1051, 1040, 1041, 0, 480, 500,
	501, 0, 496, 497, 498, 1200, 492, 499, 114, 85,
	87, 0, 0, 482, 493, 778, 121, 122, 0, 1055,
	1056, 1057, 1058, 1059, 473, 502, 0, 503, 0, 0,
	0, 504, 0, 464, 461, 618, 0, 505, 0, 508,
	509, 0, 506, 489, 460, 462, 463, 524, 1054, 507,
	510, 511,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 359, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 363, 358,
	337, 339, 338, 3, 360, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 361, 342, 362, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 57681, 357, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:860
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:866
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:872
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:882
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:984
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1030
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1036
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1125
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1135
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1197
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1198
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1201
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1202
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1229
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1255
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1362
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1395
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1406
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "CREATE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1443
		{
			return helpWith(sqllex, "DELETE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			return helpWith(sqllex, "DROP")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1483
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1498
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1521
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1559
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1610
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1619
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1624
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "INSERT")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1627
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1629
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1630
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1638
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1639
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1646
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1647
		{ /* SKIP DOC */
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1735
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			return helpWith(sqllex, "GRANT")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return helpWith(sqllex, "RESET")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1854
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			return helpWith(sqllex, "RESET")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1880
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1885
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1888
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1892
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1893
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1894
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1895
		{ /* SKIP DOC */
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{ /* SKIP DOC */
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1897
		{
			return unimplemented(sqllex, "set local")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1913
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1968
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1985
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1988
		{
			return unimplemented(sqllex, "set from current")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1990
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1996
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = Low
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = Normal
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = High
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			return helpWith(sqllex, "SHOW")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2126
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.str = "client_encoding"
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2141
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2152
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2169
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2174
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2185
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2196
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2207
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2223
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2228
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2244
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2255
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2274
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2292
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2310
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2341
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2345
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2363
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2374
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2385
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2389
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2393
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2397
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2437
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2536
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2540
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = DropDefault
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2550
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2755
		{
			return unimplemented(sqllex, "match full")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
			return unimplemented(sqllex, "match partial")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2757
		{
			return unimplemented(sqllex, "match simple")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2758
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2764
		{
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2768
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2771
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2777
		{
			return unimplemented(sqllex, "no action")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2781
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2782
		{
			return unimplemented(sqllex, "action set null")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2783
		{
			return unimplemented(sqllex, "action set default")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2808
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2819
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2823
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2844
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2884
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = true
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = false
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2914
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2915
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2918
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2919
		{
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = Ascending
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = Descending
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 538:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2959
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2961
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = true
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = false
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2994
		{
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2995
		{
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3006
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3017
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3028
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3033
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3034
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3052
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3057
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3070
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3075
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3083
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3093
		{
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3094
		{
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.str = ""
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.str = ""
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3141
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3150
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[2].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = ReadOnly
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = ReadWrite
		}
	case 595:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3220
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.str = ""
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.str = ""
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.str = ""
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.str = ""
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3263
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3264
		{
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3288
		{
			return helpWith(sqllex, "INSERT")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3347
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3351
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3359
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 626:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3382
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3386
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3387
		{
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3516
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3551
		{
			return helpWith(sqllex, "SELECT")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3552
		{
			return helpWith(sqllex, "VALUES")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3553
		{
			return helpWith(sqllex, "TABLE")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3599
		{
			return helpWith(sqllex, "SELECT")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3643
		{
			return helpWith(sqllex, "TABLE")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3654
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3655
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3656
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3659
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3660
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3663
		{
			return unimplemented(sqllex, "cte")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3666
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3667
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3670
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3671
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3675
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = true
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = false
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = false
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = true
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3698
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3699
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3746
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3770
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3822
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3823
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3826
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3827
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3885
		{
			return helpWith(sqllex, "VALUES")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3902
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &From{}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3924
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3942
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3969
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4006
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = nil
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4072
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4078
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = true
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = false
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.str = astFullJoin
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.str = astLeftJoin
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.str = astRightJoin
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.str = astInnerJoin
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4189
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4190
		{
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4276
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4290
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4298
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4322
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4333
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4396
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4405
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = nil
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4470
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4566
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 846:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4598
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4637
		{
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4638
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 856:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 858:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = year
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = month
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = day
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = hour
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = minute
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = month
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = hour
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = minute
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = minute
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = nil
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = second
		}
	case 875:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4733
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4768
		{
			return unimplemented(sqllex, "at tz")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4936
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5002
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5175
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5188
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5192
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5228
		{
			return unimplemented(sqllex, "variadic")
		}
	case 986:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5229
		{
			return unimplemented(sqllex, "variadic")
		}
	case 987:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 991:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5253
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5269
		{
			return unimplemented(sqllex, "func_application")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5270
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 995:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5274
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5276
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5292
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5302
		{
			return unimplemented(sqllex, "current role")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5303
		{
			return unimplemented(sqllex, "current user")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5304
		{
			return unimplemented(sqllex, "session user")
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5305
		{
			return unimplemented(sqllex, "user")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5318
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5323
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5328
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5337
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5338
		{
			return unimplemented(sqllex, "treat")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5352
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5364
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5368
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5372
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5375
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5380
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5384
		{
			return unimplemented(sqllex, "within group")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5385
		{
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5420
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5462
		{
			sqlVAL.str = ""
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5482
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5483
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5484
		{
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5487
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5488
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5494
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5495
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5496
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5497
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5498
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5509
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5513
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5517
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5523
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5527
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = Any
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = Some
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = All
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = Plus
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = Minus
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = Mult
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = Div
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5557
		{
			sqlVAL.union.val = Mod
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = Bitand
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = Bitor
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = Pow
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5561
		{
			sqlVAL.union.val = Bitxor
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = LT
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = GT
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5564
		{
			sqlVAL.union.val = EQ
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5565
		{
			sqlVAL.union.val = LE
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = GE
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = NE
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = Like
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = NotLike
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5573
		{
			sqlVAL.union.val = ILike
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = NotILike
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5585
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5609
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5613
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5676
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5680
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5713
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5743
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5749
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5753
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5771
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5775
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5781
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5787
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5791
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5815
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5821
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5837
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5843
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5847
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5853
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5857
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5862
		{
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5863
		{
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5891
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5897
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5967
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5971
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5977
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5981
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6025
		{
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6050
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6061
		{
			return unimplemented(sqllex, "func const")
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6063
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6070
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6076
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6080
		{
			sqlVAL.union.val = DNull
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6087
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6091
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6097
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6132
		{
			sqlVAL.str = ""
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
