// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680
const HELPTOKEN = 57681

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6494

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	358, 53,
	-2, 658,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 47,
	141, 511,
	-2, 0,
	-1, 60,
	92, 658,
	145, 658,
	310, 658,
	311, 658,
	-2, 0,
	-1, 70,
	103, 633,
	112, 633,
	153, 633,
	172, 633,
	197, 633,
	203, 633,
	307, 633,
	-2, 622,
	-1, 101,
	4, 660,
	20, 660,
	21, 660,
	23, 660,
	28, 660,
	33, 660,
	34, 660,
	35, 660,
	36, 660,
	37, 660,
	38, 660,
	39, 660,
	40, 660,
	41, 660,
	42, 660,
	44, 660,
	45, 660,
	46, 660,
	47, 660,
	48, 660,
	51, 660,
	52, 660,
	53, 660,
	55, 660,
	56, 660,
	60, 660,
	61, 660,
	62, 660,
	64, 660,
	66, 660,
	67, 660,
	68, 660,
	71, 660,
	72, 660,
	73, 660,
	81, 660,
	82, 660,
	83, 660,
	84, 660,
	85, 660,
	86, 660,
	87, 660,
	88, 660,
	90, 660,
	92, 660,
	94, 660,
	97, 660,
	98, 660,
	100, 660,
	104, 660,
	105, 660,
	106, 660,
	107, 660,
	108, 660,
	109, 660,
	113, 660,
	114, 660,
	115, 660,
	116, 660,
	117, 660,
	119, 660,
	121, 660,
	126, 660,
	127, 660,
	129, 660,
	132, 660,
	133, 660,
	134, 660,
	135, 660,
	136, 660,
	137, 660,
	140, 660,
	142, 660,
	145, 660,
	146, 660,
	147, 660,
	148, 660,
	149, 660,
	150, 660,
	151, 660,
	152, 660,
	154, 660,
	157, 660,
	158, 660,
	159, 660,
	161, 660,
	162, 660,
	163, 660,
	165, 660,
	166, 660,
	168, 660,
	170, 660,
	173, 660,
	176, 660,
	178, 660,
	179, 660,
	180, 660,
	181, 660,
	182, 660,
	183, 660,
	185, 660,
	186, 660,
	187, 660,
	188, 660,
	192, 660,
	193, 660,
	194, 660,
	195, 660,
	196, 660,
	198, 660,
	200, 660,
	201, 660,
	204, 660,
	205, 660,
	207, 660,
	209, 660,
	210, 660,
	211, 660,
	212, 660,
	213, 660,
	214, 660,
	216, 660,
	217, 660,
	218, 660,
	219, 660,
	220, 660,
	222, 660,
	223, 660,
	224, 660,
	225, 660,
	226, 660,
	227, 660,
	228, 660,
	229, 660,
	231, 660,
	232, 660,
	233, 660,
	234, 660,
	235, 660,
	236, 660,
	237, 660,
	238, 660,
	239, 660,
	240, 660,
	241, 660,
	242, 660,
	244, 660,
	246, 660,
	247, 660,
	248, 660,
	249, 660,
	251, 660,
	252, 660,
	253, 660,
	254, 660,
	256, 660,
	257, 660,
	258, 660,
	259, 660,
	260, 660,
	262, 660,
	263, 660,
	264, 660,
	265, 660,
	267, 660,
	268, 660,
	269, 660,
	270, 660,
	272, 660,
	273, 660,
	274, 660,
	275, 660,
	276, 660,
	277, 660,
	278, 660,
	279, 660,
	280, 660,
	281, 660,
	283, 660,
	285, 660,
	286, 660,
	287, 660,
	288, 660,
	289, 660,
	290, 660,
	291, 660,
	293, 660,
	294, 660,
	295, 660,
	298, 660,
	299, 660,
	300, 660,
	301, 660,
	303, 660,
	304, 660,
	305, 660,
	306, 660,
	309, 660,
	310, 660,
	311, 660,
	312, 660,
	314, 660,
	316, 660,
	317, 660,
	318, 660,
	319, 660,
	320, 660,
	321, 660,
	324, 660,
	329, 660,
	330, 660,
	331, 660,
	332, 660,
	333, 660,
	-2, 0,
	-1, 114,
	103, 632,
	112, 632,
	153, 632,
	172, 632,
	197, 632,
	203, 632,
	307, 632,
	-2, 625,
	-1, 118,
	1, 560,
	157, 560,
	222, 560,
	226, 560,
	357, 560,
	358, 560,
	-2, 0,
	-1, 120,
	1, 560,
	357, 560,
	358, 560,
	-2, 0,
	-1, 121,
	1, 560,
	357, 560,
	358, 560,
	-2, 0,
	-1, 122,
	1, 564,
	357, 564,
	358, 564,
	-2, 0,
	-1, 129,
	4, 666,
	5, 666,
	6, 666,
	7, 666,
	8, 666,
	9, 666,
	20, 666,
	21, 666,
	23, 666,
	28, 666,
	29, 666,
	33, 666,
	34, 666,
	35, 666,
	36, 666,
	37, 666,
	38, 666,
	39, 666,
	40, 666,
	41, 666,
	42, 666,
	44, 666,
	45, 666,
	46, 666,
	47, 666,
	48, 666,
	49, 666,
	50, 666,
	51, 666,
	52, 666,
	53, 666,
	55, 666,
	56, 666,
	58, 666,
	60, 666,
	61, 666,
	62, 666,
	64, 666,
	66, 666,
	67, 666,
	68, 666,
	70, 666,
	71, 666,
	72, 666,
	73, 666,
	75, 666,
	76, 666,
	77, 666,
	79, 666,
	80, 666,
	81, 666,
	82, 666,
	83, 666,
	84, 666,
	85, 666,
	86, 666,
	87, 666,
	88, 666,
	90, 666,
	92, 666,
	94, 666,
	97, 666,
	98, 666,
	100, 666,
	104, 666,
	105, 666,
	106, 666,
	107, 666,
	108, 666,
	109, 666,
	110, 666,
	113, 666,
	114, 666,
	115, 666,
	116, 666,
	117, 666,
	119, 666,
	121, 666,
	124, 666,
	126, 666,
	127, 666,
	129, 666,
	132, 666,
	133, 666,
	134, 666,
	135, 666,
	136, 666,
	137, 666,
	138, 666,
	140, 666,
	142, 666,
	144, 666,
	145, 666,
	146, 666,
	147, 666,
	148, 666,
	149, 666,
	150, 666,
	151, 666,
	152, 666,
	154, 666,
	156, 666,
	157, 666,
	158, 666,
	159, 666,
	160, 666,
	161, 666,
	162, 666,
	163, 666,
	165, 666,
	166, 666,
	168, 666,
	169, 666,
	170, 666,
	171, 666,
	173, 666,
	176, 666,
	178, 666,
	179, 666,
	180, 666,
	181, 666,
	182, 666,
	183, 666,
	184, 666,
	185, 666,
	186, 666,
	187, 666,
	188, 666,
	189, 666,
	191, 666,
	192, 666,
	193, 666,
	194, 666,
	195, 666,
	196, 666,
	198, 666,
	201, 666,
	204, 666,
	205, 666,
	206, 666,
	207, 666,
	208, 666,
	209, 666,
	210, 666,
	211, 666,
	212, 666,
	213, 666,
	214, 666,
	216, 666,
	217, 666,
	218, 666,
	219, 666,
	220, 666,
	222, 666,
	223, 666,
	224, 666,
	225, 666,
	226, 666,
	227, 666,
	228, 666,
	229, 666,
	231, 666,
	232, 666,
	233, 666,
	234, 666,
	235, 666,
	236, 666,
	237, 666,
	238, 666,
	239, 666,
	240, 666,
	241, 666,
	242, 666,
	244, 666,
	245, 666,
	246, 666,
	247, 666,
	248, 666,
	249, 666,
	251, 666,
	252, 666,
	253, 666,
	254, 666,
	256, 666,
	257, 666,
	258, 666,
	259, 666,
	260, 666,
	261, 666,
	262, 666,
	263, 666,
	264, 666,
	265, 666,
	266, 666,
	267, 666,
	268, 666,
	269, 666,
	270, 666,
	272, 666,
	273, 666,
	274, 666,
	275, 666,
	276, 666,
	277, 666,
	278, 666,
	279, 666,
	280, 666,
	281, 666,
	283, 666,
	285, 666,
	286, 666,
	287, 666,
	288, 666,
	289, 666,
	290, 666,
	291, 666,
	293, 666,
	294, 666,
	295, 666,
	298, 666,
	299, 666,
	300, 666,
	301, 666,
	302, 666,
	303, 666,
	304, 666,
	305, 666,
	306, 666,
	309, 666,
	310, 666,
	311, 666,
	312, 666,
	313, 666,
	314, 666,
	316, 666,
	317, 666,
	318, 666,
	319, 666,
	320, 666,
	321, 666,
	324, 666,
	329, 666,
	330, 666,
	331, 666,
	332, 666,
	333, 666,
	334, 666,
	340, 666,
	345, 666,
	346, 666,
	347, 666,
	354, 666,
	360, 666,
	-2, 0,
	-1, 132,
	1, 53,
	358, 53,
	-2, 658,
	-1, 489,
	123, 1253,
	296, 1253,
	339, 1253,
	356, 1253,
	-2, 0,
	-1, 490,
	123, 1206,
	296, 1206,
	339, 1206,
	356, 1206,
	-2, 0,
	-1, 492,
	123, 1311,
	296, 1311,
	339, 1311,
	356, 1311,
	-2, 0,
	-1, 494,
	123, 1333,
	296, 1333,
	339, 1333,
	356, 1333,
	-2, 0,
	-1, 501,
	1, 298,
	357, 298,
	358, 298,
	-2, 1258,
	-1, 527,
	1, 380,
	353, 380,
	355, 380,
	357, 380,
	358, 380,
	-2, 0,
	-1, 528,
	1, 427,
	120, 427,
	353, 427,
	355, 427,
	357, 427,
	358, 427,
	-2, 0,
	-1, 534,
	1, 394,
	353, 394,
	355, 394,
	357, 394,
	358, 394,
	-2, 0,
	-1, 536,
	1, 398,
	353, 398,
	355, 398,
	357, 398,
	358, 398,
	-2, 0,
	-1, 539,
	1, 406,
	353, 406,
	355, 406,
	357, 406,
	358, 406,
	-2, 0,
	-1, 540,
	1, 411,
	353, 411,
	355, 411,
	357, 411,
	358, 411,
	-2, 0,
	-1, 543,
	1, 421,
	353, 421,
	355, 421,
	357, 421,
	358, 421,
	-2, 0,
	-1, 552,
	112, 668,
	172, 668,
	197, 668,
	-2, 628,
	-1, 555,
	112, 667,
	172, 667,
	197, 667,
	-2, 626,
	-1, 699,
	354, 1184,
	-2, 1177,
	-1, 700,
	354, 1185,
	-2, 1178,
	-1, 706,
	5, 841,
	354, 841,
	-2, 1384,
	-1, 731,
	5, 800,
	-2, 1354,
	-1, 732,
	5, 835,
	354, 835,
	-2, 1356,
	-1, 733,
	5, 810,
	-2, 1357,
	-1, 734,
	5, 809,
	-2, 1358,
	-1, 735,
	5, 835,
	354, 835,
	-2, 1361,
	-1, 736,
	5, 835,
	354, 835,
	-2, 1362,
	-1, 737,
	5, 836,
	-2, 1365,
	-1, 738,
	5, 792,
	-2, 1366,
	-1, 739,
	5, 792,
	-2, 1367,
	-1, 740,
	5, 817,
	-2, 1371,
	-1, 741,
	5, 802,
	-2, 1372,
	-1, 742,
	5, 803,
	-2, 1373,
	-1, 743,
	5, 793,
	-2, 1378,
	-1, 744,
	5, 794,
	-2, 1379,
	-1, 745,
	5, 795,
	-2, 1380,
	-1, 746,
	5, 796,
	-2, 1381,
	-1, 747,
	5, 797,
	-2, 1382,
	-1, 748,
	5, 798,
	-2, 1383,
	-1, 749,
	5, 792,
	-2, 1388,
	-1, 750,
	5, 801,
	-2, 1393,
	-1, 751,
	5, 799,
	-2, 1396,
	-1, 752,
	5, 833,
	354, 833,
	-2, 1398,
	-1, 753,
	5, 837,
	-2, 1401,
	-1, 754,
	5, 839,
	-2, 1402,
	-1, 755,
	5, 832,
	354, 832,
	-2, 1407,
	-1, 773,
	213, 656,
	-2, 504,
	-1, 777,
	199, 1181,
	-2, 0,
	-1, 812,
	1, 208,
	353, 208,
	355, 208,
	357, 208,
	358, 208,
	-2, 631,
	-1, 815,
	4, 1406,
	10, 1406,
	11, 1406,
	13, 1406,
	14, 1406,
	15, 1406,
	16, 1406,
	17, 1406,
	18, 1406,
	20, 1406,
	21, 1406,
	23, 1406,
	26, 1406,
	28, 1406,
	30, 1406,
	33, 1406,
	34, 1406,
	35, 1406,
	36, 1406,
	37, 1406,
	38, 1406,
	39, 1406,
	40, 1406,
	41, 1406,
	42, 1406,
	44, 1406,
	45, 1406,
	46, 1406,
	47, 1406,
	48, 1406,
	51, 1406,
	52, 1406,
	53, 1406,
	55, 1406,
	56, 1406,
	57, 1406,
	60, 1406,
	61, 1406,
	62, 1406,
	63, 1406,
	64, 1406,
	66, 1406,
	67, 1406,
	68, 1406,
	70, 1406,
	71, 1406,
	72, 1406,
	73, 1406,
	81, 1406,
	82, 1406,
	83, 1406,
	84, 1406,
	85, 1406,
	86, 1406,
	87, 1406,
	88, 1406,
	90, 1406,
	92, 1406,
	94, 1406,
	97, 1406,
	98, 1406,
	100, 1406,
	104, 1406,
	105, 1406,
	106, 1406,
	107, 1406,
	108, 1406,
	109, 1406,
	113, 1406,
	114, 1406,
	115, 1406,
	116, 1406,
	117, 1406,
	118, 1406,
	119, 1406,
	121, 1406,
	124, 1406,
	126, 1406,
	127, 1406,
	129, 1406,
	132, 1406,
	133, 1406,
	134, 1406,
	135, 1406,
	136, 1406,
	137, 1406,
	138, 1406,
	139, 1406,
	140, 1406,
	142, 1406,
	144, 1406,
	145, 1406,
	146, 1406,
	147, 1406,
	148, 1406,
	149, 1406,
	150, 1406,
	151, 1406,
	152, 1406,
	154, 1406,
	156, 1406,
	157, 1406,
	158, 1406,
	159, 1406,
	160, 1406,
	161, 1406,
	162, 1406,
	163, 1406,
	165, 1406,
	166, 1406,
	168, 1406,
	169, 1406,
	170, 1406,
	171, 1406,
	173, 1406,
	176, 1406,
	177, 1406,
	178, 1406,
	179, 1406,
	180, 1406,
	181, 1406,
	182, 1406,
	183, 1406,
	184, 1406,
	185, 1406,
	186, 1406,
	187, 1406,
	188, 1406,
	192, 1406,
	193, 1406,
	194, 1406,
	195, 1406,
	196, 1406,
	198, 1406,
	201, 1406,
	202, 1406,
	204, 1406,
	205, 1406,
	207, 1406,
	209, 1406,
	210, 1406,
	211, 1406,
	212, 1406,
	213, 1406,
	214, 1406,
	216, 1406,
	217, 1406,
	218, 1406,
	219, 1406,
	220, 1406,
	222, 1406,
	223, 1406,
	224, 1406,
	225, 1406,
	226, 1406,
	227, 1406,
	228, 1406,
	229, 1406,
	231, 1406,
	232, 1406,
	233, 1406,
	234, 1406,
	235, 1406,
	236, 1406,
	237, 1406,
	238, 1406,
	239, 1406,
	240, 1406,
	241, 1406,
	242, 1406,
	244, 1406,
	245, 1406,
	246, 1406,
	247, 1406,
	248, 1406,
	249, 1406,
	250, 1406,
	251, 1406,
	252, 1406,
	253, 1406,
	254, 1406,
	256, 1406,
	257, 1406,
	258, 1406,
	259, 1406,
	260, 1406,
	262, 1406,
	263, 1406,
	264, 1406,
	265, 1406,
	266, 1406,
	267, 1406,
	268, 1406,
	269, 1406,
	270, 1406,
	272, 1406,
	273, 1406,
	274, 1406,
	275, 1406,
	276, 1406,
	277, 1406,
	278, 1406,
	279, 1406,
	280, 1406,
	281, 1406,
	283, 1406,
	285, 1406,
	286, 1406,
	287, 1406,
	288, 1406,
	289, 1406,
	290, 1406,
	291, 1406,
	293, 1406,
	294, 1406,
	295, 1406,
	298, 1406,
	299, 1406,
	300, 1406,
	301, 1406,
	303, 1406,
	304, 1406,
	305, 1406,
	306, 1406,
	309, 1406,
	310, 1406,
	311, 1406,
	312, 1406,
	314, 1406,
	316, 1406,
	317, 1406,
	318, 1406,
	319, 1406,
	320, 1406,
	321, 1406,
	324, 1406,
	329, 1406,
	330, 1406,
	331, 1406,
	332, 1406,
	333, 1406,
	334, 1406,
	335, 1406,
	337, 1406,
	338, 1406,
	339, 1406,
	340, 1406,
	342, 1406,
	343, 1406,
	344, 1406,
	345, 1406,
	346, 1406,
	347, 1406,
	348, 1406,
	349, 1406,
	350, 1406,
	352, 1406,
	355, 1406,
	356, 1406,
	359, 1406,
	360, 1406,
	-2, 0,
	-1, 840,
	123, 1333,
	296, 1333,
	339, 1333,
	356, 1333,
	-2, 0,
	-1, 908,
	112, 667,
	172, 667,
	197, 667,
	-2, 629,
	-1, 962,
	103, 633,
	112, 633,
	153, 633,
	172, 633,
	197, 633,
	203, 633,
	307, 633,
	-2, 727,
	-1, 1130,
	103, 633,
	112, 633,
	153, 633,
	172, 633,
	197, 633,
	203, 633,
	307, 633,
	-2, 960,
	-1, 1140,
	354, 1161,
	-2, 1149,
	-1, 1157,
	355, 1101,
	-2, 0,
	-1, 1392,
	1, 728,
	70, 728,
	103, 728,
	112, 728,
	124, 728,
	128, 728,
	130, 728,
	144, 728,
	153, 728,
	160, 728,
	169, 728,
	172, 728,
	184, 728,
	197, 728,
	199, 728,
	203, 728,
	243, 728,
	245, 728,
	307, 728,
	315, 728,
	326, 728,
	327, 728,
	336, 728,
	353, 728,
	355, 728,
	357, 728,
	358, 728,
	359, 728,
	-2, 727,
	-1, 1452,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 876,
	-1, 1453,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 877,
	-1, 1454,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 878,
	-1, 1458,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 882,
	-1, 1459,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 883,
	-1, 1460,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 884,
	-1, 1463,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 889,
	-1, 1469,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 891,
	-1, 1471,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 895,
	-1, 1472,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 896,
	-1, 1473,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 897,
	-1, 1474,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 898,
	-1, 1500,
	208, 1043,
	-2, 1046,
	-1, 1542,
	123, 1083,
	354, 1184,
	-2, 1177,
	-1, 1543,
	123, 1084,
	-2, 1350,
	-1, 1544,
	123, 1085,
	-2, 1257,
	-1, 1545,
	123, 1086,
	-2, 1221,
	-1, 1546,
	123, 1087,
	-2, 1237,
	-1, 1547,
	123, 1088,
	-2, 1256,
	-1, 1548,
	123, 1089,
	-2, 1308,
	-1, 1754,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 890,
	-1, 1755,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 892,
	-1, 1760,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 893,
	-1, 1778,
	208, 1042,
	-2, 1045,
	-1, 1988,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 894,
	-1, 1993,
	156, 0,
	-2, 910,
	-1, 2003,
	208, 1044,
	-2, 1047,
	-1, 2045,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 937,
	-1, 2046,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 938,
	-1, 2047,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 939,
	-1, 2051,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 943,
	-1, 2052,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 944,
	-1, 2053,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 945,
	-1, 2179,
	156, 0,
	-2, 911,
	-1, 2182,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 914,
	-1, 2183,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 916,
	-1, 2284,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 915,
	-1, 2285,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 917,
	-1, 2292,
	156, 0,
	-2, 946,
	-1, 2347,
	156, 0,
	-2, 947,
	-1, 2418,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1353,
}

const sqlPrivate = 57344

const sqlLast = 41969

var sqlAct = [...]int{

	700, 2417, 2076, 2447, 2370, 2401, 1613, 2402, 2259, 2403,
	1621, 2416, 1914, 556, 1186, 2022, 2220, 2322, 1679, 1277,
	2152, 1193, 2086, 2138, 663, 2107, 1227, 1882, 1959, 69,
	1278, 2109, 626, 676, 767, 1960, 2239, 1610, 1593, 171,
	1592, 991, 698, 171, 1844, 690, 2118, 1887, 1206, 1884,
	1597, 171, 1622, 2101, 1709, 956, 943, 1596, 863, 1688,
	171, 1431, 1843, 1189, 1789, 171, 171, 937, 1387, 171,
	1396, 1405, 171, 1524, 1228, 1388, 1930, 1696, 1353, 171,
	697, 1136, 960, 1675, 1498, 435, 844, 1571, 1428, 1305,
	1182, 500, 1663, 1508, 1486, 968, 670, 441, 24, 1483,
	970, 938, 1167, 576, 843, 802, 432, 1171, 1518, 675,
	577, 1594, 564, 113, 799, 1538, 1615, 965, 582, 813,
	1125, 1600, 669, 632, 171, 171, 635, 1374, 947, 792,
	1361, 614, 171, 114, 911, 910, 473, 912, 568, 1303,
	115, 928, 495, 451, 692, 162, 561, 1200, 789, 2153,
	167, 612, 389, 927, 916, 477, 493, 1777, 847, 171,
	171, 171, 171, 1614, 560, 1944, 171, 171, 1945, 1208,
	2444, 2425, 560, 113, 990, 2151, 573, 957, 2413, 1208,
	555, 1208, 1636, 2412, 2409, 2397, 2396, 1636, 990, 1651,
	1651, 2387, 1928, 2365, 2361, 1644, 1898, 2234, 990, 2353,
	2349, 987, 2304, 2151, 1644, 656, 2151, 565, 2301, 2299,
	2286, 465, 990, 2151, 1644, 2270, 2269, 2247, 2244, 990,
	2151, 990, 990, 848, 2206, 2184, 497, 849, 1636, 1636,
	24, 2181, 2173, 2171, 2150, 1644, 1636, 1636, 2151, 1899,
	1429, 633, 2131, 1080, 1081, 113, 990, 553, 2100, 629,
	1636, 2095, 1591, 521, 552, 1591, 1997, 1940, 1781, 1363,
	1636, 1941, 37, 1933, 1782, 129, 1083, 650, 642, 646,
	1908, 652, 1780, 1871, 1872, 97, 616, 990, 1636, 2366,
	1861, 1859, 640, 644, 1862, 1636, 1429, 1858, 1857, 1778,
	1082, 1636, 1636, 1636, 131, 1712, 1097, 1685, 1653, 1636,
	1651, 990, 1636, 1643, 1574, 2234, 1933, 1644, 47, 1651,
	37, 37, 1635, 1590, 1368, 1220, 1636, 1591, 1367, 1221,
	1636, 38, 118, 618, 1362, 619, 1923, 2058, 1788, 2000,
	130, 1394, 990, 1872, 41, 1678, 1661, 58, 123, 563,
	1502, 932, 654, 822, 59, 124, 60, 954, 120, 132,
	129, 1088, 2154, 820, 42, 819, 47, 47, 1704, 818,
	1286, 579, 1209, 37, 116, 817, 816, 1535, 620, 617,
	548, 547, 1209, 546, 1209, 129, 519, 50, 518, 131,
	517, 52, 516, 515, 514, 58, 58, 513, 121, 512,
	511, 510, 59, 59, 60, 60, 509, 171, 508, 171,
	171, 507, 171, 506, 131, 505, 504, 171, 503, 47,
	1098, 488, 61, 171, 487, 130, 486, 423, 1521, 422,
	421, 62, 1814, 1815, 420, 419, 171, 171, 171, 171,
	171, 1618, 404, 403, 395, 582, 1814, 1815, 58, 394,
	130, 393, 392, 385, 384, 59, 156, 60, 123, 116,
	155, 154, 1224, 153, 152, 124, 151, 150, 149, 148,
	171, 147, 146, 145, 561, 1522, 144, 143, 806, 172,
	142, 141, 140, 660, 116, 1898, 171, 2227, 1533, 139,
	1214, 1814, 1815, 1099, 1832, 1833, 1834, 138, 771, 1829,
	1207, 775, 1337, 171, 129, 1362, 137, 2178, 1665, 136,
	135, 63, 582, 134, 97, 133, 1309, 64, 858, 2437,
	1531, 1523, 1520, 2415, 2408, 961, 2375, 795, 795, 2344,
	2302, 2211, 646, 131, 582, 71, 72, 65, 756, 66,
	1820, 67, 2207, 122, 1829, 923, 791, 652, 68, 2199,
	766, 2198, 129, 129, 1820, 814, 2197, 1324, 2193, 78,
	171, 823, 97, 97, 861, 2192, 796, 2191, 2190, 130,
	573, 119, 2117, 2106, 2073, 2068, 909, 123, 2067, 2066,
	2008, 131, 131, 1870, 124, 1093, 1091, 1092, 1084, 1085,
	1086, 1087, 1089, 1090, 1866, 1863, 1525, 583, 1144, 1820,
	101, 854, 129, 116, 1874, 129, 1851, 129, 1842, 117,
	1813, 1810, 1809, 1830, 1807, 97, 1794, 130, 130, 1793,
	1716, 923, 171, 1392, 171, 123, 123, 908, 1494, 922,
	764, 131, 124, 124, 131, 627, 131, 1835, 1137, 1192,
	1128, 2024, 2226, 959, 831, 2388, 841, 171, 171, 2356,
	958, 116, 116, 2343, 2342, 2341, 584, 2333, 1830, 838,
	2331, 660, 936, 2316, 582, 171, 2315, 130, 2314, 646,
	130, 994, 130, 2294, 1519, 123, 561, 2256, 123, 2235,
	123, 2214, 124, 907, 2204, 124, 1831, 124, 859, 1080,
	1081, 2157, 2084, 2082, 988, 2081, 1649, 2079, 1080, 1081,
	941, 116, 1992, 1968, 116, 1967, 1617, 1948, 553, 580,
	1674, 1936, 1083, 1841, 561, 552, 1702, 1803, 1673, 1802,
	1912, 1083, 1799, 919, 920, 1774, 1769, 1488, 1747, 2325,
	1534, 1831, 1742, 1729, 1495, 1728, 1082, 1714, 1684, 1172,
	1080, 1081, 1175, 1583, 1529, 1082, 1379, 1225, 955, 1185,
	1179, 1165, 1164, 1163, 113, 1162, 633, 966, 931, 1161,
	1160, 1159, 1158, 1083, 1157, 1156, 929, 1816, 1817, 1818,
	1819, 1821, 1822, 963, 1155, 933, 171, 1154, 1825, 1823,
	1824, 1816, 1817, 1818, 1819, 1821, 1822, 1082, 171, 1153,
	2233, 1814, 1815, 1152, 171, 1151, 171, 1088, 171, 1150,
	1191, 1149, 171, 1148, 1141, 1129, 1088, 1814, 1815, 1128,
	628, 1184, 935, 837, 826, 989, 810, 1729, 1826, 1827,
	1828, 2186, 2105, 1825, 1823, 1824, 1816, 1817, 1818, 1819,
	1821, 1822, 171, 1943, 1646, 1939, 1380, 1137, 582, 1910,
	171, 1532, 1126, 1080, 1081, 1140, 171, 959, 1169, 1170,
	1814, 1815, 1197, 851, 978, 1211, 1098, 1173, 1213, 1885,
	2237, 765, 582, 582, 2236, 1098, 1083, 1176, 2230, 994,
	1946, 1080, 1081, 1530, 976, 1900, 171, 1177, 853, 1429,
	961, 171, 1178, 1865, 833, 1183, 171, 171, 1864, 171,
	1082, 171, 977, 171, 1083, 171, 852, 1753, 850, 1820,
	1146, 1915, 1190, 646, 2240, 1201, 171, 1201, 1614, 2025,
	1310, 1785, 171, 171, 583, 1820, 433, 791, 1082, 1293,
	573, 573, 1509, 1168, 901, 1894, 693, 1955, 2378, 1099,
	424, 758, 1640, 2435, 2434, 2165, 2360, 37, 1099, 893,
	409, 171, 1199, 171, 1654, 1202, 171, 1143, 1521, 959,
	1348, 1088, 2280, 971, 2279, 972, 1287, 1814, 1815, 171,
	1832, 1833, 1834, 902, 607, 1336, 609, 1311, 994, 1920,
	605, 171, 603, 584, 1830, 171, 1223, 1222, 171, 1088,
	600, 583, 171, 47, 1360, 1279, 171, 628, 1280, 1132,
	2278, 171, 1284, 410, 397, 1522, 559, 171, 994, 1299,
	1398, 171, 1306, 583, 561, 1298, 1979, 1325, 1398, 1382,
	1829, 428, 58, 113, 1397, 1611, 2277, 1983, 1981, 59,
	1952, 60, 1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090,
	973, 1318, 1399, 1084, 1085, 1086, 1087, 1089, 1090, 1427,
	584, 1523, 1520, 1287, 1951, 1798, 558, 1831, 1797, 1381,
	1294, 851, 1406, 1410, 1412, 1338, 2359, 1340, 1796, 1339,
	553, 1795, 584, 553, 553, 1820, 1911, 1349, 633, 427,
	1350, 1351, 1281, 1756, 1358, 401, 1371, 1357, 1639, 1470,
	1090, 157, 1366, 1425, 633, 1417, 1421, 1393, 1372, 1376,
	1377, 1423, 1419, 994, 852, 646, 560, 930, 653, 2176,
	646, 963, 1426, 1402, 1587, 1335, 652, 1315, 1586, 1415,
	1441, 757, 550, 1319, 1420, 1320, 1525, 1321, 1986, 1322,
	1409, 1323, 460, 1485, 1830, 1218, 2075, 705, 1818, 1819,
	1821, 1822, 1334, 583, 1440, 1485, 1867, 1509, 1329, 1331,
	995, 1824, 1816, 1817, 1818, 1819, 1821, 1822, 2261, 1180,
	836, 2434, 1282, 1970, 971, 2018, 972, 1647, 412, 411,
	2394, 1657, 160, 1203, 1525, 1432, 1439, 2441, 561, 129,
	1888, 1492, 1659, 561, 1814, 1815, 1490, 2384, 1314, 97,
	1086, 1087, 1089, 1090, 946, 1184, 1676, 1677, 2336, 1749,
	1822, 1557, 584, 1660, 1519, 2450, 171, 1831, 131, 996,
	557, 2385, 971, 171, 972, 1658, 1084, 1085, 1086, 1087,
	1089, 1090, 426, 1919, 171, 832, 171, 985, 171, 1408,
	161, 171, 887, 171, 1744, 171, 171, 171, 171, 1506,
	1525, 973, 582, 984, 130, 892, 171, 1977, 950, 981,
	2456, 429, 123, 900, 1892, 1395, 1814, 1815, 1208, 124,
	974, 425, 2405, 982, 979, 1496, 1493, 1921, 953, 888,
	611, 601, 386, 610, 1606, 1166, 1634, 601, 434, 602,
	2290, 983, 2015, 1385, 948, 1333, 396, 601, 2298, 973,
	1549, 1123, 1820, 951, 1826, 1827, 1828, 1375, 1888, 1825,
	1823, 1824, 1816, 1817, 1818, 1819, 1821, 1822, 949, 847,
	402, 479, 1801, 480, 2440, 398, 1407, 583, 1616, 1628,
	1616, 866, 795, 1698, 795, 399, 1391, 1971, 2016, 560,
	994, 481, 1642, 1625, 1467, 2113, 874, 1556, 171, 1620,
	1631, 583, 583, 2448, 652, 652, 2404, 1637, 995, 2406,
	1632, 1830, 814, 113, 171, 171, 171, 1641, 171, 113,
	1629, 1638, 1630, 1648, 1820, 2433, 2431, 2219, 1608, 952,
	2262, 1662, 829, 158, 848, 821, 584, 171, 849, 1740,
	915, 2272, 1752, 1758, 171, 994, 1650, 1173, 1686, 1176,
	171, 171, 482, 1692, 171, 1484, 1170, 1169, 2449, 171,
	584, 584, 171, 1525, 551, 2407, 2271, 996, 897, 1287,
	171, 1655, 159, 2439, 459, 2254, 171, 171, 171, 2451,
	2328, 835, 171, 1830, 1831, 171, 1691, 969, 387, 1954,
	1491, 171, 171, 171, 171, 171, 1465, 1468, 1725, 1697,
	171, 1481, 171, 2457, 1693, 2461, 171, 995, 2202, 760,
	1313, 1209, 1721, 1666, 1499, 1285, 1479, 2161, 1132, 113,
	1668, 974, 1503, 1667, 652, 1669, 1511, 646, 1672, 1464,
	1706, 2054, 1722, 898, 1701, 1609, 1198, 995, 1541, 1541,
	1554, 1670, 1566, 1705, 1687, 1187, 1683, 1345, 1578, 1579,
	1581, 914, 483, 633, 388, 1715, 1831, 2014, 1726, 633,
	633, 1690, 759, 633, 2146, 2371, 996, 1694, 1695, 974,
	1328, 1700, 1710, 1288, 914, 1717, 1825, 1823, 1824, 1816,
	1817, 1818, 1819, 1821, 1822, 1718, 899, 1475, 1557, 1557,
	950, 1739, 2087, 875, 1741, 1476, 996, 1477, 561, 2147,
	1746, 1482, 867, 769, 452, 1787, 1766, 2460, 2203, 1743,
	953, 913, 842, 702, 768, 2164, 2255, 2160, 1346, 2221,
	418, 1764, 2163, 1292, 1466, 2055, 1373, 457, 478, 1731,
	484, 2056, 995, 453, 913, 951, 915, 1730, 1711, 868,
	413, 1682, 865, 1759, 685, 1699, 1370, 1757, 164, 1823,
	1824, 1816, 1817, 1818, 1819, 1821, 1822, 1369, 847, 468,
	454, 462, 485, 1557, 1557, 1557, 1773, 1290, 558, 777,
	847, 561, 171, 788, 786, 1751, 2077, 2212, 2119, 1291,
	456, 1784, 171, 168, 171, 1931, 171, 390, 1528, 171,
	2293, 996, 1761, 171, 2252, 405, 446, 32, 171, 2142,
	171, 2143, 1762, 1873, 430, 1875, 1767, 171, 1478, 463,
	168, 952, 2201, 471, 1845, 1480, 476, 1991, 3, 2253,
	171, 582, 2162, 502, 1985, 445, 31, 561, 442, 28,
	1868, 2145, 582, 171, 1808, 848, 1848, 1849, 1850, 849,
	2148, 1846, 582, 1890, 896, 444, 16, 1768, 1896, 885,
	1726, 1907, 1652, 1589, 439, 13, 1424, 1418, 1902, 1903,
	883, 1904, 1916, 171, 905, 904, 827, 847, 615, 615,
	891, 583, 658, 881, 440, 14, 390, 1877, 438, 12,
	171, 1869, 1876, 659, 879, 1879, 171, 877, 1893, 871,
	455, 784, 1527, 1326, 1317, 171, 171, 1901, 1880, 1909,
	573, 1147, 2400, 390, 390, 648, 390, 1183, 1814, 1815,
	168, 657, 1906, 1763, 655, 467, 1183, 461, 2144, 2368,
	1765, 1918, 860, 1234, 480, 1917, 787, 785, 1265, 32,
	584, 1922, 848, 1949, 414, 1924, 849, 1926, 443, 10,
	2135, 1975, 481, 1984, 1973, 458, 2005, 1302, 1953, 1934,
	1929, 638, 1965, 1935, 1942, 1966, 599, 1932, 31, 995,
	1881, 28, 1557, 1557, 1974, 895, 1976, 437, 8, 1612,
	884, 1950, 1927, 1772, 415, 1947, 1994, 113, 16, 1957,
	1775, 882, 171, 1605, 2010, 2011, 2012, 13, 890, 633,
	1964, 1978, 436, 4, 880, 1217, 1216, 1938, 1791, 1792,
	1215, 1212, 1883, 482, 416, 878, 417, 14, 876, 1210,
	870, 12, 783, 986, 995, 980, 1820, 975, 996, 2309,
	917, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
	1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
	2435, 1557, 2001, 1680, 2004, 2232, 1840, 2028, 2026, 2231,
	2017, 2019, 2020, 171, 2031, 171, 2033, 1308, 1853, 2102,
	1432, 2029, 171, 2338, 2311, 582, 1414, 447, 2061, 1432,
	2034, 10, 2083, 996, 2094, 1830, 2080, 604, 606, 171,
	171, 2346, 2154, 1398, 2096, 1398, 869, 2062, 1219, 1413,
	2120, 1411, 921, 918, 1422, 1416, 171, 2367, 1080, 1081,
	8, 623, 2065, 483, 171, 1681, 2217, 1619, 1264, 994,
	2078, 1607, 1604, 2088, 171, 1359, 1283, 171, 2454, 2093,
	1226, 624, 2459, 2089, 1233, 4, 2115, 994, 171, 171,
	2090, 2097, 171, 171, 171, 469, 2091, 2099, 2246, 2098,
	2125, 502, 2103, 773, 502, 1082, 778, 2104, 1831, 171,
	2116, 781, 1814, 1815, 171, 2123, 171, 390, 171, 171,
	171, 2122, 171, 2155, 171, 2074, 582, 2130, 2127, 2021,
	502, 502, 390, 803, 657, 2124, 2158, 1234, 1234, 2126,
	925, 484, 1265, 1265, 2134, 2175, 1913, 2159, 1625, 633,
	1965, 470, 1860, 1966, 625, 1707, 2129, 1690, 1588, 2180,
	1080, 1081, 1080, 1081, 502, 171, 925, 924, 1585, 1584,
	1517, 449, 1134, 485, 926, 2188, 2013, 1878, 2146, 1144,
	830, 2139, 1142, 633, 903, 1083, 894, 1980, 1964, 2137,
	889, 2121, 1982, 2141, 480, 886, 872, 502, 834, 549,
	2260, 450, 1316, 1816, 1817, 1818, 1819, 1821, 1822, 1082,
	873, 1703, 481, 2147, 1378, 2383, 2200, 2194, 452, 1998,
	1800, 2321, 171, 171, 2289, 1526, 1145, 2168, 51, 582,
	1962, 2172, 679, 2136, 1956, 2140, 1599, 1598, 997, 1295,
	701, 457, 567, 1540, 1433, 761, 703, 453, 2213, 1231,
	583, 704, 1232, 2218, 390, 1174, 691, 1229, 811, 1623,
	2215, 583, 1965, 2216, 1489, 1966, 1507, 1965, 2224, 1783,
	1966, 583, 1138, 482, 454, 2238, 171, 2222, 171, 671,
	994, 171, 683, 682, 2229, 1504, 2059, 2223, 825, 171,
	1708, 1891, 2225, 1344, 456, 994, 1671, 2069, 1341, 2243,
	1964, 1972, 400, 1811, 809, 1964, 1563, 1555, 1551, 584,
	906, 2264, 1557, 2142, 2266, 2143, 476, 942, 615, 1124,
	584, 2250, 1264, 1264, 1624, 857, 2248, 2263, 1184, 1897,
	584, 1645, 934, 2228, 1965, 1352, 2265, 1966, 1233, 1233,
	622, 390, 390, 2288, 621, 2145, 855, 2245, 1289, 1656,
	2281, 1117, 1116, 608, 2148, 2275, 2276, 2330, 846, 168,
	171, 845, 2282, 582, 1188, 1724, 1557, 171, 2455, 2337,
	1969, 2295, 1964, 483, 2377, 171, 171, 582, 582, 128,
	2274, 171, 125, 2300, 127, 126, 171, 1750, 77, 30,
	29, 96, 2308, 171, 95, 94, 1267, 1965, 2258, 93,
	1966, 2318, 2332, 2312, 455, 2310, 2317, 2319, 2320, 92,
	91, 2306, 90, 2326, 2327, 89, 88, 87, 171, 171,
	86, 2307, 2335, 85, 84, 83, 82, 81, 2334, 80,
	79, 498, 2144, 76, 75, 1964, 661, 762, 74, 171,
	73, 27, 23, 2345, 100, 2354, 22, 582, 2352, 1266,
	20, 484, 171, 2355, 2324, 2303, 582, 582, 1557, 458,
	1234, 2348, 21, 26, 25, 1265, 18, 17, 15, 2305,
	390, 2358, 171, 9, 171, 2363, 2364, 171, 19, 994,
	56, 57, 1196, 485, 561, 55, 54, 53, 390, 11,
	390, 49, 390, 2374, 583, 2389, 1204, 48, 2391, 46,
	1230, 45, 2390, 44, 43, 2357, 7, 171, 2395, 99,
	824, 40, 2373, 39, 6, 2393, 828, 98, 946, 5,
	2379, 1080, 1081, 2399, 2398, 2392, 168, 111, 108, 171,
	110, 2410, 107, 2424, 168, 171, 2414, 2422, 995, 1965,
	502, 171, 1966, 448, 1083, 2426, 109, 112, 2351, 2427,
	2428, 2432, 2430, 584, 104, 2436, 995, 105, 1297, 1296,
	2438, 579, 574, 449, 106, 2242, 103, 2423, 1082, 102,
	502, 36, 950, 2446, 2445, 502, 35, 1964, 34, 2452,
	168, 502, 2453, 502, 33, 502, 2376, 502, 2458, 502,
	2, 1, 953, 0, 0, 583, 2462, 996, 0, 0,
	1327, 0, 2268, 0, 0, 0, 502, 502, 948, 0,
	452, 0, 0, 0, 0, 996, 0, 951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 949, 457, 0, 476, 0, 615, 0, 453,
	657, 0, 0, 1300, 1625, 1264, 37, 0, 0, 0,
	1267, 1267, 1234, 390, 584, 1080, 1081, 1265, 0, 0,
	0, 1233, 0, 0, 0, 1390, 454, 0, 0, 390,
	939, 939, 390, 0, 0, 0, 1403, 944, 1083, 0,
	390, 0, 0, 0, 0, 390, 456, 0, 1098, 0,
	0, 390, 47, 952, 0, 1430, 0, 0, 583, 0,
	0, 1234, 1082, 1266, 1266, 0, 1265, 0, 1271, 0,
	0, 0, 0, 1118, 1119, 1120, 1121, 1122, 0, 0,
	0, 58, 0, 1131, 0, 0, 0, 1301, 59, 0,
	60, 0, 0, 1139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 995,
	0, 0, 0, 0, 1230, 1230, 0, 584, 0, 0,
	0, 1099, 0, 1088, 995, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2380, 2381, 2382, 0,
	0, 2386, 0, 0, 0, 0, 455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 996, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1098, 996, 0, 0, 1234, 0, 0, 0,
	0, 1265, 583, 0, 0, 0, 0, 1264, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 583, 0, 0,
	0, 458, 0, 1233, 0, 1092, 1084, 1085, 1086, 1087,
	1089, 1090, 1234, 1234, 0, 0, 0, 1265, 1265, 0,
	0, 1234, 1234, 0, 0, 0, 1265, 1265, 129, 0,
	0, 0, 0, 0, 0, 0, 1264, 0, 97, 0,
	1595, 584, 0, 0, 0, 1099, 0, 657, 0, 580,
	575, 0, 1233, 0, 1234, 584, 584, 131, 390, 1265,
	1627, 0, 502, 0, 0, 502, 583, 502, 0, 390,
	390, 1633, 657, 0, 0, 583, 583, 0, 0, 0,
	1403, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1770, 1771, 130, 0, 0, 0, 0, 995, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 1342, 0, 1347, 0, 0, 0, 0, 0,
	1354, 0, 0, 1267, 0, 584, 0, 116, 0, 0,
	0, 0, 0, 0, 584, 584, 0, 1093, 1091, 1092,
	1084, 1085, 1086, 1087, 1089, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 996, 0, 0,
	0, 1264, 0, 0, 0, 0, 1837, 1838, 1839, 0,
	0, 0, 1664, 0, 0, 0, 1266, 1233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 390, 390,
	390, 0, 390, 0, 0, 0, 0, 1264, 1264, 1234,
	0, 0, 0, 0, 1265, 0, 1264, 1264, 0, 0,
	0, 390, 0, 1233, 1233, 0, 0, 0, 390, 0,
	0, 0, 1233, 1233, 390, 390, 0, 1230, 390, 0,
	0, 0, 0, 1390, 0, 0, 1390, 0, 0, 1264,
	0, 0, 0, 0, 1713, 0, 0, 0, 0, 0,
	390, 1719, 1720, 0, 0, 1233, 1403, 0, 0, 1727,
	0, 0, 0, 0, 0, 1732, 1733, 1735, 1737, 1738,
	0, 0, 0, 0, 390, 0, 1745, 0, 0, 0,
	1748, 680, 70, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 1463, 0, 1469, 0, 1471, 1472,
	1473, 1474, 0, 0, 0, 1267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1497, 0, 0, 0, 0,
	0, 0, 1131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 0,
	1536, 1537, 0, 0, 1553, 0, 1565, 1567, 1572, 1575,
	1576, 1577, 0, 0, 1267, 1989, 1990, 0, 1266, 0,
	0, 0, 1234, 0, 0, 0, 0, 1265, 0, 0,
	0, 0, 0, 0, 1264, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 554, 0, 0, 562, 0,
	1233, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1234, 0, 634, 70, 0, 1265, 1266, 0, 1230,
	0, 0, 0, 0, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 0, 2057, 0, 390, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1196, 0, 1196, 0,
	502, 0, 0, 390, 0, 0, 0, 1886, 1230, 0,
	0, 0, 390, 0, 1895, 0, 0, 0, 0, 0,
	0, 390, 0, 0, 0, 0, 0, 0, 0, 1267,
	0, 0, 0, 0, 1664, 0, 0, 0, 0, 0,
	0, 1234, 0, 0, 0, 0, 1265, 1664, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1267, 1267, 0, 0, 0,
	0, 0, 0, 0, 1267, 1267, 0, 390, 0, 0,
	0, 0, 1266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 390, 0, 0, 1264, 0, 0,
	1390, 939, 0, 0, 0, 0, 944, 1267, 0, 657,
	1390, 1814, 1815, 1233, 1832, 1833, 1834, 0, 1266, 1266,
	0, 0, 0, 0, 1961, 0, 0, 1266, 1266, 0,
	0, 0, 0, 1230, 0, 0, 1264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1233, 0, 0, 0, 0, 0, 0, 0,
	1266, 0, 0, 0, 1829, 0, 0, 0, 0, 1230,
	1230, 0, 0, 0, 0, 0, 0, 0, 1230, 1230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2023, 0, 0, 0,
	0, 0, 0, 1754, 1755, 0, 0, 0, 0, 1760,
	0, 1230, 0, 0, 0, 0, 0, 0, 0, 1820,
	0, 0, 0, 0, 0, 0, 1264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1836, 1779, 1233, 0, 0, 0, 0, 0, 1786, 0,
	0, 1790, 1267, 0, 0, 0, 562, 1835, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1403, 1804, 1196,
	0, 0, 0, 0, 0, 0, 2085, 0, 1830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 390, 390, 2257, 0, 0, 0, 0,
	1131, 0, 0, 0, 0, 1266, 0, 1572, 1572, 1572,
	2110, 0, 0, 0, 0, 0, 0, 0, 2112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 390, 0,
	0, 657, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1390, 657, 0, 0, 2132, 2133, 1403, 2292,
	0, 1831, 0, 1889, 0, 0, 1230, 0, 0, 0,
	0, 0, 1961, 657, 0, 0, 0, 0, 2166, 0,
	2167, 0, 390, 2169, 2170, 1905, 390, 0, 2174, 0,
	0, 0, 0, 0, 0, 0, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1925, 0, 0, 0, 0, 1354, 0, 2195,
	0, 0, 0, 0, 0, 1267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1937, 1826, 1827,
	1828, 2347, 0, 1825, 1823, 1824, 1816, 1817, 1818, 1819,
	1821, 1822, 0, 70, 0, 0, 0, 0, 962, 0,
	0, 0, 0, 0, 1267, 0, 0, 1958, 0, 0,
	0, 0, 0, 0, 1961, 0, 657, 1595, 1266, 1961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1987, 0, 1127, 1988, 1130, 0, 0, 0,
	0, 0, 0, 1135, 0, 0, 0, 1993, 0, 0,
	0, 0, 0, 0, 0, 0, 2002, 1266, 0, 0,
	0, 0, 0, 0, 2006, 0, 0, 1905, 0, 1230,
	1403, 0, 2249, 0, 0, 2251, 0, 0, 0, 0,
	0, 0, 0, 390, 0, 0, 1961, 2030, 0, 0,
	0, 2032, 0, 0, 1267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1230, 0,
	0, 2283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2063, 2064, 0, 0, 0, 0,
	0, 0, 0, 2070, 2071, 2072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1266, 0, 1961,
	0, 0, 0, 0, 390, 0, 0, 0, 0, 0,
	0, 657, 0, 0, 0, 0, 0, 939, 0, 2110,
	2110, 0, 0, 0, 0, 2323, 0, 0, 0, 944,
	1390, 0, 0, 0, 0, 1080, 1081, 1196, 1100, 1101,
	1102, 1110, 1111, 1112, 0, 0, 0, 0, 1230, 0,
	0, 1103, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 1114, 2339, 2340, 1080, 1081, 0, 1100, 1101, 1102,
	1110, 1111, 1112, 0, 0, 0, 0, 0, 0, 0,
	1103, 0, 1082, 390, 0, 0, 0, 1083, 1097, 0,
	1114, 0, 2156, 0, 0, 0, 2362, 0, 0, 0,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 2372, 1097, 657, 0,
	2179, 390, 0, 0, 2182, 2183, 0, 0, 554, 2185,
	0, 554, 554, 0, 0, 0, 2187, 0, 2189, 0,
	0, 1961, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 2323, 0, 0, 2196, 0, 0, 0, 0, 0,
	634, 0, 0, 1107, 1115, 0, 1814, 1815, 0, 1832,
	1833, 1834, 1088, 657, 0, 0, 962, 0, 0, 390,
	0, 1113, 2177, 0, 0, 2429, 0, 2205, 0, 70,
	0, 0, 1107, 1115, 0, 70, 1105, 0, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 0, 0, 0, 0, 1829,
	0, 0, 0, 0, 0, 1105, 0, 1104, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2241, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1820, 1099, 0, 0, 0, 1080,
	1081, 0, 0, 0, 0, 1110, 1111, 1112, 0, 0,
	0, 1108, 2273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 1099, 1114, 2284, 2285, 0, 0,
	0, 0, 1835, 0, 0, 0, 0, 0, 0, 0,
	1108, 0, 0, 0, 0, 0, 1082, 1487, 0, 0,
	0, 0, 1097, 1830, 0, 0, 0, 2297, 0, 0,
	562, 0, 0, 0, 0, 1130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1106,
	0, 0, 1094, 1095, 1096, 1109, 0, 1093, 1091, 1092,
	1084, 1085, 1086, 1087, 1089, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 2208, 2329, 0, 1088, 1106, 0,
	0, 1094, 1095, 1096, 1109, 0, 1093, 1091, 1092, 1084,
	1085, 1086, 1087, 1089, 1090, 0, 1831, 1107, 1115, 0,
	0, 0, 70, 1856, 70, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 0, 0, 0, 0, 0, 70, 0,
	1105, 0, 0, 944, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1826, 1827, 1828, 0, 0, 1825, 1823,
	1824, 1816, 1817, 1818, 1819, 1821, 1822, 2411, 0, 0,
	0, 0, 0, 2421, 2421, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1108, 0, 0, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 2421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 634, 0, 0, 0, 0,
	0, 634, 634, 2421, 0, 634, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1106, 0, 0, 0, 0, 170, 1109,
	0, 1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090,
	0, 0, 0, 0, 173, 174, 0, 175, 70, 0,
	0, 0, 328, 0, 70, 0, 0, 176, 177, 178,
	329, 330, 331, 332, 179, 333, 334, 0, 180, 335,
	336, 181, 182, 0, 0, 337, 338, 339, 0, 183,
	340, 0, 0, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 0, 0, 191, 192, 193, 0, 0,
	1487, 0, 0, 0, 0, 194, 195, 391, 196, 341,
	197, 342, 343, 0, 198, 0, 199, 0, 200, 0,
	1130, 201, 202, 0, 203, 0, 0, 0, 344, 204,
	205, 206, 345, 346, 0, 0, 0, 207, 208, 347,
	348, 349, 0, 209, 0, 210, 0, 0, 0, 0,
	211, 350, 0, 351, 0, 0, 212, 213, 214, 215,
	352, 353, 0, 0, 219, 0, 216, 0, 0, 217,
	354, 218, 355, 356, 357, 358, 359, 0, 360, 0,
	0, 220, 221, 222, 0, 223, 224, 225, 0, 227,
	226, 0, 361, 1130, 228, 0, 0, 229, 0, 0,
	230, 0, 231, 232, 233, 235, 362, 234, 0, 236,
	237, 239, 238, 0, 0, 0, 363, 240, 364, 241,
	242, 0, 243, 0, 0, 244, 0, 0, 245, 365,
	0, 246, 0, 366, 247, 248, 70, 250, 251, 70,
	252, 367, 253, 368, 254, 0, 255, 256, 257, 562,
	259, 369, 260, 261, 0, 262, 263, 264, 265, 266,
	268, 269, 267, 270, 271, 272, 273, 0, 274, 0,
	275, 276, 370, 0, 0, 281, 282, 283, 284, 0,
	286, 371, 285, 287, 288, 0, 289, 278, 279, 290,
	0, 291, 372, 373, 292, 0, 299, 293, 294, 280,
	295, 298, 374, 296, 297, 375, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 70, 376, 377, 378,
	0, 0, 308, 309, 379, 380, 0, 310, 311, 312,
	313, 634, 0, 314, 315, 316, 317, 0, 318, 0,
	381, 319, 320, 321, 382, 383, 0, 0, 322, 0,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1516, 0, 699, 688, 689, 686, 687, 678, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 174,
	1513, 175, 0, 0, 0, 0, 716, 681, 0, 0,
	0, 176, 177, 178, 329, 731, 331, 732, 179, 733,
	734, 0, 180, 335, 336, 181, 182, 684, 715, 735,
	736, 339, 0, 183, 727, 0, 707, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 0, 586, 191,
	192, 193, 0, 708, 709, 711, 0, 710, 712, 194,
	195, 391, 196, 737, 197, 738, 739, 0, 198, 0,
	199, 0, 200, 1514, 0, 730, 202, 0, 203, 0,
	0, 0, 672, 204, 205, 206, 717, 718, 695, 0,
	0, 207, 208, 740, 741, 742, 0, 209, 0, 210,
	0, 0, 587, 0, 211, 728, 0, 351, 0, 0,
	212, 213, 214, 215, 724, 726, 589, 0, 219, 0,
	216, 634, 588, 217, 743, 218, 744, 745, 746, 747,
	748, 0, 706, 0, 590, 220, 221, 222, 591, 223,
	224, 225, 0, 227, 226, 0, 729, 592, 228, 593,
	0, 229, 0, 0, 230, 634, 231, 232, 233, 235,
	362, 234, 594, 236, 237, 239, 238, 667, 0, 696,
	725, 240, 749, 241, 242, 0, 243, 0, 0, 244,
	0, 0, 245, 365, 595, 246, 596, 719, 247, 248,
	249, 250, 251, 0, 252, 720, 253, 368, 254, 0,
	255, 256, 257, 258, 259, 750, 260, 261, 0, 262,
	263, 264, 265, 266, 268, 269, 267, 270, 271, 272,
	273, 0, 274, 597, 275, 276, 673, 277, 0, 281,
	282, 283, 284, 0, 286, 371, 285, 287, 288, 713,
	289, 278, 279, 290, 598, 291, 751, 373, 292, 0,
	299, 293, 294, 280, 295, 298, 752, 296, 297, 721,
	0, 300, 0, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 753, 754, 0, 0, 308, 309, 722, 723,
	694, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 714, 318, 0, 381, 319, 320, 321, 382, 755,
	1512, 0, 322, 0, 0, 0, 0, 323, 324, 325,
	326, 327, 668, 0, 0, 0, 0, 70, 666, 0,
	0, 0, 0, 664, 665, 1515, 0, 0, 0, 0,
	0, 0, 674, 1510, 0, 0, 0, 0, 677, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 993, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2313, 0, 173, 174, 998, 175, 999, 1000,
	1001, 1002, 328, 1003, 1004, 1005, 1006, 176, 177, 178,
	329, 330, 331, 332, 179, 333, 334, 1007, 180, 335,
	336, 181, 182, 1008, 1009, 337, 338, 339, 1010, 183,
	340, 1011, 585, 1012, 184, 185, 186, 0, 187, 1013,
	188, 189, 190, 1014, 586, 191, 192, 193, 1015, 1016,
	1018, 1017, 1019, 1020, 1021, 194, 195, 391, 196, 341,
	197, 342, 343, 1022, 198, 1023, 199, 1024, 200, 1025,
	1026, 201, 202, 1027, 203, 1028, 1130, 1029, 344, 204,
	205, 206, 345, 346, 1030, 1031, 1032, 207, 208, 347,
	348, 349, 0, 209, 1033, 210, 1034, 1035, 587, 1036,
	211, 350, 1037, 351, 1038, 0, 212, 213, 214, 215,
	352, 353, 589, 1039, 219, 1040, 216, 1041, 588, 217,
	354, 218, 355, 356, 357, 358, 359, 1042, 360, 1043,
	590, 220, 221, 222, 591, 223, 224, 225, 1044, 227,
	226, 1045, 361, 592, 228, 593, 1046, 229, 1047, 1048,
	230, 0, 231, 232, 233, 235, 362, 234, 594, 236,
	237, 239, 238, 1049, 1050, 1051, 363, 240, 364, 241,
	242, 1052, 243, 1053, 1054, 244, 1055, 1056, 245, 365,
	595, 246, 596, 366, 247, 248, 249, 250, 251, 1057,
	252, 367, 253, 368, 254, 1058, 255, 256, 257, 258,
	259, 369, 260, 261, 1059, 262, 263, 264, 265, 266,
	268, 269, 267, 270, 271, 272, 273, 1060, 274, 597,
	275, 276, 370, 277, 0, 281, 282, 283, 284, 1061,
	286, 371, 285, 287, 288, 1062, 289, 278, 279, 290,
	598, 291, 372, 373, 292, 1063, 299, 293, 294, 280,
	295, 298, 374, 296, 297, 375, 1064, 300, 1065, 301,
	302, 303, 304, 305, 306, 307, 1066, 376, 377, 378,
	1067, 1068, 308, 309, 379, 380, 1069, 310, 311, 312,
	313, 1070, 1071, 314, 315, 316, 317, 1072, 318, 1073,
	381, 319, 320, 321, 382, 383, 1074, 1075, 322, 1076,
	1077, 1078, 1079, 323, 324, 325, 326, 327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	993, 0, 0, 0, 0, 0, 1383, 0, 0, 0,
	0, 0, 0, 0, 0, 1384, 173, 174, 998, 175,
	999, 1000, 1001, 1002, 328, 1003, 1004, 1005, 1006, 176,
	177, 178, 329, 330, 331, 332, 179, 333, 334, 1007,
	180, 335, 336, 181, 182, 1008, 1009, 337, 338, 339,
	1010, 183, 340, 1011, 585, 1012, 184, 185, 186, 0,
	187, 1013, 188, 189, 190, 1014, 586, 191, 192, 193,
	1015, 1016, 1018, 1017, 1019, 1020, 1021, 194, 195, 391,
	196, 341, 197, 342, 343, 1022, 198, 1023, 199, 1024,
	200, 1025, 1026, 201, 202, 1027, 203, 1028, 0, 1029,
	344, 204, 205, 206, 345, 346, 1030, 1031, 1032, 207,
	208, 347, 348, 349, 0, 209, 1033, 210, 1034, 1035,
	587, 1036, 211, 350, 1037, 351, 1038, 0, 212, 213,
	214, 215, 352, 353, 589, 1039, 219, 1040, 216, 1041,
	588, 217, 354, 218, 355, 356, 357, 358, 359, 1042,
	360, 1043, 590, 220, 221, 222, 591, 223, 224, 225,
	1044, 227, 226, 1045, 361, 592, 228, 593, 1046, 229,
	1047, 1048, 230, 0, 231, 232, 233, 235, 362, 234,
	594, 236, 237, 239, 238, 1049, 1050, 1051, 363, 240,
	364, 241, 242, 1052, 243, 1053, 1054, 244, 1055, 1056,
	245, 365, 595, 246, 596, 366, 247, 248, 249, 250,
	251, 1057, 252, 367, 253, 368, 254, 1058, 255, 256,
	257, 258, 259, 369, 260, 261, 1059, 262, 263, 264,
	265, 266, 268, 269, 267, 270, 271, 272, 273, 1060,
	274, 597, 275, 276, 370, 277, 0, 281, 282, 283,
	284, 1061, 286, 371, 285, 287, 288, 1062, 289, 278,
	279, 290, 598, 291, 372, 373, 292, 1063, 299, 293,
	294, 280, 295, 298, 374, 296, 297, 375, 1064, 300,
	1065, 301, 302, 303, 304, 305, 306, 307, 1066, 376,
	377, 378, 1067, 1068, 308, 309, 379, 380, 1069, 310,
	311, 312, 313, 1070, 1071, 314, 315, 316, 317, 1072,
	318, 1073, 381, 319, 320, 321, 382, 383, 1074, 1075,
	322, 1076, 1077, 1078, 1079, 323, 324, 325, 326, 327,
	0, 0, 0, 993, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2128, 173,
	174, 998, 175, 999, 1000, 1001, 1002, 328, 1003, 1004,
	1005, 1006, 176, 177, 178, 329, 330, 331, 332, 179,
	333, 334, 1007, 180, 335, 336, 181, 182, 1008, 1009,
	337, 338, 339, 1010, 183, 340, 1011, 585, 1012, 184,
	185, 186, 0, 187, 1013, 188, 189, 190, 1014, 586,
	191, 192, 193, 1015, 1016, 1018, 1017, 1019, 1020, 1021,
	194, 195, 391, 196, 341, 197, 342, 343, 1022, 198,
	1023, 199, 1024, 200, 1025, 1026, 201, 202, 1027, 203,
	1028, 0, 1029, 344, 204, 205, 206, 345, 346, 1030,
	1031, 1032, 207, 208, 347, 348, 349, 0, 209, 1033,
	210, 1034, 1035, 587, 1036, 211, 350, 1037, 351, 1038,
	0, 212, 213, 214, 215, 352, 353, 589, 1039, 219,
	1040, 216, 1041, 588, 217, 354, 218, 355, 356, 357,
	358, 359, 1042, 360, 1043, 590, 220, 221, 222, 591,
	223, 224, 225, 1044, 227, 226, 1045, 361, 592, 228,
	593, 1046, 229, 1047, 1048, 230, 0, 231, 232, 233,
	235, 362, 234, 594, 236, 237, 239, 238, 1049, 1050,
	1051, 363, 240, 364, 241, 242, 1052, 243, 1053, 1054,
	244, 1055, 1056, 245, 365, 595, 246, 596, 366, 247,
	248, 249, 250, 251, 1057, 252, 367, 253, 368, 254,
	1058, 255, 256, 257, 258, 259, 369, 260, 261, 1059,
	262, 263, 264, 265, 266, 268, 269, 267, 270, 271,
	272, 273, 1060, 274, 597, 275, 276, 370, 277, 0,
	281, 282, 283, 284, 1061, 286, 371, 285, 287, 288,
	1062, 289, 278, 279, 290, 598, 291, 372, 373, 292,
	1063, 299, 293, 294, 280, 295, 298, 374, 296, 297,
	375, 1064, 300, 1065, 301, 302, 303, 304, 305, 306,
	307, 1066, 376, 377, 378, 1067, 1068, 308, 309, 379,
	380, 1069, 310, 311, 312, 313, 1070, 1071, 314, 315,
	316, 317, 1072, 318, 1073, 381, 319, 320, 321, 382,
	383, 1074, 1075, 322, 1076, 1077, 1078, 1079, 323, 324,
	325, 326, 327, 993, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 992, 0, 0, 173,
	174, 998, 175, 999, 1000, 1001, 1002, 328, 1003, 1004,
	1005, 1006, 176, 177, 178, 329, 330, 331, 332, 179,
	333, 334, 1007, 180, 335, 336, 181, 182, 1008, 1009,
	337, 338, 339, 1010, 183, 340, 1011, 585, 1012, 184,
	185, 186, 0, 187, 1013, 188, 189, 190, 1014, 586,
	191, 192, 193, 1015, 1016, 1018, 1017, 1019, 1020, 1021,
	194, 195, 391, 196, 341, 197, 342, 343, 1022, 198,
	1023, 199, 1024, 200, 1025, 1026, 201, 202, 1027, 203,
	1028, 0, 1029, 344, 204, 205, 206, 345, 346, 1030,
	1031, 1032, 207, 208, 347, 348, 349, 0, 209, 1033,
	210, 1034, 1035, 587, 1036, 211, 350, 1037, 351, 1038,
	0, 212, 213, 214, 215, 352, 353, 589, 1039, 219,
	1040, 216, 1041, 588, 217, 354, 218, 355, 356, 357,
	358, 359, 1042, 360, 1043, 590, 220, 221, 222, 591,
	223, 224, 225, 1044, 227, 226, 1045, 361, 592, 228,
	593, 1046, 229, 1047, 1048, 230, 0, 231, 232, 233,
	235, 362, 234, 594, 236, 237, 239, 238, 1049, 1050,
	1051, 363, 240, 364, 241, 242, 1052, 243, 1053, 1054,
	244, 1055, 1056, 245, 365, 595, 246, 596, 366, 247,
	248, 249, 250, 251, 1057, 252, 367, 253, 368, 254,
	1058, 255, 256, 257, 258, 259, 369, 260, 261, 1059,
	262, 263, 264, 265, 266, 268, 269, 267, 270, 271,
	272, 273, 1060, 274, 597, 275, 276, 370, 277, 0,
	281, 282, 283, 284, 1061, 286, 371, 285, 287, 288,
	1062, 289, 278, 279, 290, 598, 291, 372, 373, 292,
	1063, 299, 293, 294, 280, 295, 298, 374, 296, 297,
	375, 1064, 300, 1065, 301, 302, 303, 304, 305, 306,
	307, 1066, 376, 377, 378, 1067, 1068, 308, 309, 379,
	380, 1069, 310, 311, 312, 313, 1070, 1071, 314, 315,
	316, 317, 1072, 318, 1073, 381, 319, 320, 321, 382,
	383, 1074, 1075, 322, 1076, 1077, 1078, 1079, 323, 324,
	325, 326, 327, 699, 688, 689, 686, 687, 678, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 173,
	174, 0, 175, 0, 0, 0, 0, 716, 681, 0,
	0, 0, 176, 177, 178, 329, 731, 331, 732, 179,
	733, 734, 0, 180, 335, 336, 181, 182, 684, 715,
	735, 736, 339, 0, 183, 727, 0, 707, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 0, 586,
	191, 192, 193, 0, 708, 709, 711, 0, 710, 712,
	194, 195, 391, 196, 737, 197, 738, 739, 945, 198,
	0, 199, 0, 200, 0, 0, 730, 202, 0, 203,
	0, 0, 0, 672, 204, 205, 206, 717, 718, 695,
	0, 0, 207, 208, 740, 741, 742, 0, 209, 0,
	210, 0, 0, 587, 0, 211, 728, 0, 351, 0,
	0, 212, 213, 214, 215, 724, 726, 589, 0, 219,
	0, 216, 0, 588, 217, 743, 218, 744, 745, 746,
	747, 748, 0, 706, 0, 590, 220, 221, 222, 591,
	223, 224, 225, 0, 227, 226, 0, 729, 592, 228,
	593, 0, 229, 0, 0, 230, 0, 231, 232, 233,
	235, 362, 234, 594, 236, 237, 239, 238, 667, 0,
	696, 725, 240, 749, 241, 242, 0, 243, 0, 0,
	244, 0, 0, 245, 365, 595, 246, 596, 719, 247,
	248, 249, 250, 251, 0, 252, 720, 253, 368, 254,
	0, 255, 256, 257, 258, 259, 750, 260, 261, 0,
	262, 263, 264, 265, 266, 268, 269, 267, 270, 271,
	272, 273, 0, 274, 597, 275, 276, 673, 277, 0,
	281, 282, 283, 284, 129, 286, 371, 285, 287, 288,
	713, 289, 278, 279, 290, 598, 291, 751, 373, 292,
	0, 299, 293, 294, 280, 295, 298, 752, 296, 297,
	721, 0, 300, 131, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 753, 754, 0, 0, 308, 309, 722,
	723, 694, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 714, 318, 0, 381, 319, 320, 321, 815,
	755, 0, 0, 322, 0, 0, 0, 123, 323, 324,
	325, 326, 327, 668, 124, 0, 0, 0, 0, 666,
	0, 0, 0, 0, 664, 665, 0, 0, 0, 0,
	0, 0, 0, 1133, 0, 0, 0, 0, 563, 677,
	699, 688, 689, 686, 687, 678, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 173, 174, 0, 175,
	0, 0, 0, 0, 716, 681, 0, 0, 0, 176,
	177, 178, 329, 731, 331, 732, 179, 733, 734, 0,
	180, 335, 336, 181, 182, 684, 715, 735, 736, 339,
	0, 183, 727, 0, 707, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 0, 586, 191, 192, 193,
	0, 708, 709, 711, 0, 710, 712, 194, 195, 391,
	196, 737, 197, 738, 739, 0, 198, 0, 199, 0,
	200, 0, 0, 730, 202, 0, 203, 0, 0, 0,
	672, 204, 205, 206, 717, 718, 695, 0, 0, 207,
	208, 740, 741, 742, 0, 209, 0, 210, 0, 0,
	587, 0, 211, 728, 0, 351, 0, 0, 212, 213,
	214, 215, 724, 726, 589, 0, 219, 0, 216, 0,
	588, 217, 743, 218, 744, 745, 746, 747, 748, 0,
	706, 0, 590, 220, 221, 222, 591, 223, 224, 225,
	0, 227, 226, 0, 729, 592, 228, 593, 0, 229,
	0, 0, 230, 0, 231, 232, 233, 235, 362, 234,
	594, 236, 237, 239, 238, 667, 0, 696, 725, 240,
	749, 241, 242, 0, 243, 0, 0, 244, 0, 0,
	245, 365, 595, 246, 596, 719, 247, 248, 249, 250,
	251, 0, 252, 720, 253, 368, 254, 0, 255, 256,
	257, 258, 259, 750, 260, 261, 0, 262, 263, 264,
	265, 266, 268, 269, 267, 270, 271, 272, 273, 0,
	274, 597, 275, 276, 673, 277, 0, 281, 282, 283,
	284, 129, 286, 371, 285, 287, 288, 713, 289, 278,
	279, 290, 598, 291, 751, 373, 292, 0, 299, 293,
	294, 280, 295, 298, 752, 296, 297, 721, 0, 300,
	131, 301, 302, 303, 304, 305, 306, 307, 0, 376,
	753, 754, 0, 0, 308, 309, 722, 723, 694, 310,
	311, 312, 313, 0, 0, 314, 315, 316, 317, 714,
	318, 0, 381, 319, 320, 321, 815, 755, 0, 0,
	322, 0, 0, 0, 123, 323, 324, 325, 326, 327,
	668, 124, 0, 0, 0, 0, 666, 0, 0, 0,
	0, 664, 665, 699, 688, 689, 686, 687, 678, 0,
	1133, 0, 0, 0, 0, 0, 677, 0, 0, 173,
	174, 0, 175, 0, 0, 0, 0, 716, 681, 0,
	0, 0, 176, 177, 178, 329, 731, 331, 732, 179,
	733, 734, 0, 180, 335, 336, 181, 182, 684, 715,
	735, 736, 339, 0, 183, 727, 0, 707, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 0, 586,
	191, 192, 193, 0, 708, 709, 711, 0, 710, 712,
	194, 195, 391, 196, 737, 197, 738, 739, 0, 198,
	0, 199, 0, 200, 0, 0, 730, 202, 0, 203,
	0, 0, 0, 672, 204, 205, 206, 717, 718, 695,
	0, 0, 207, 208, 740, 741, 742, 0, 209, 0,
	210, 0, 0, 587, 0, 211, 728, 0, 351, 0,
	0, 212, 213, 214, 215, 724, 726, 589, 0, 219,
	0, 216, 0, 588, 217, 743, 218, 744, 745, 746,
	747, 748, 0, 706, 0, 590, 220, 221, 222, 591,
	223, 224, 225, 0, 227, 226, 0, 729, 592, 228,
	593, 0, 229, 0, 0, 230, 0, 231, 232, 233,
	235, 362, 234, 594, 236, 237, 239, 238, 667, 0,
	696, 725, 240, 749, 241, 242, 0, 243, 0, 0,
	244, 0, 0, 245, 365, 595, 246, 596, 719, 247,
	248, 249, 250, 251, 0, 252, 720, 253, 368, 254,
	0, 255, 256, 257, 258, 259, 750, 260, 261, 0,
	262, 263, 264, 265, 266, 268, 269, 267, 270, 271,
	272, 273, 0, 274, 597, 275, 276, 673, 277, 0,
	281, 282, 283, 284, 129, 286, 371, 285, 287, 288,
	713, 289, 278, 279, 290, 598, 291, 751, 373, 292,
	0, 299, 293, 294, 280, 295, 298, 752, 296, 297,
	721, 0, 300, 131, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 753, 754, 0, 0, 308, 309, 722,
	723, 694, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 714, 318, 0, 381, 319, 320, 321, 815,
	755, 0, 0, 322, 0, 0, 0, 123, 323, 324,
	325, 326, 327, 668, 124, 0, 0, 0, 0, 666,
	0, 0, 0, 0, 664, 665, 699, 688, 689, 686,
	687, 678, 0, 1133, 0, 0, 0, 0, 0, 677,
	0, 0, 173, 174, 0, 175, 0, 0, 0, 0,
	716, 681, 0, 0, 0, 176, 177, 178, 329, 731,
	331, 732, 179, 733, 734, 1568, 180, 335, 336, 181,
	182, 684, 715, 735, 736, 339, 0, 183, 727, 0,
	707, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 0, 586, 191, 192, 193, 0, 708, 709, 711,
	0, 710, 712, 194, 195, 391, 196, 737, 197, 738,
	739, 0, 198, 0, 199, 0, 200, 0, 0, 730,
	202, 0, 203, 0, 0, 0, 672, 204, 205, 206,
	717, 718, 695, 0, 0, 207, 208, 740, 741, 742,
	0, 209, 0, 210, 0, 1573, 587, 0, 211, 728,
	0, 351, 0, 0, 212, 213, 214, 215, 724, 726,
	589, 0, 219, 0, 216, 0, 588, 217, 743, 218,
	744, 745, 746, 747, 748, 0, 706, 0, 590, 220,
	221, 222, 591, 223, 224, 225, 0, 227, 226, 1569,
	729, 592, 228, 593, 0, 229, 0, 0, 230, 0,
	231, 232, 233, 235, 362, 234, 594, 236, 237, 239,
	238, 667, 0, 696, 725, 240, 749, 241, 242, 0,
	243, 0, 0, 244, 0, 0, 245, 365, 595, 246,
	596, 719, 247, 248, 249, 250, 251, 0, 252, 720,
	253, 368, 254, 0, 255, 256, 257, 258, 259, 750,
	260, 261, 0, 262, 263, 264, 265, 266, 268, 269,
	267, 270, 271, 272, 273, 0, 274, 597, 275, 276,
	673, 277, 0, 281, 282, 283, 284, 0, 286, 371,
	285, 287, 288, 713, 289, 278, 279, 290, 598, 291,
	751, 373, 292, 0, 299, 293, 294, 280, 295, 298,
	752, 296, 297, 721, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 753, 754, 0, 1570,
	308, 309, 722, 723, 694, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 714, 318, 0, 381, 319,
	320, 321, 382, 755, 0, 0, 322, 0, 0, 0,
	0, 323, 324, 325, 326, 327, 668, 0, 0, 0,
	0, 0, 666, 0, 0, 0, 0, 664, 665, 699,
	688, 689, 686, 687, 678, 0, 674, 0, 0, 0,
	0, 0, 677, 0, 0, 173, 174, 0, 175, 0,
	0, 0, 0, 716, 681, 0, 0, 0, 176, 177,
	178, 329, 731, 331, 732, 179, 733, 734, 0, 180,
	335, 336, 181, 182, 684, 715, 735, 736, 339, 0,
	183, 727, 0, 707, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 0, 586, 191, 192, 193, 0,
	708, 709, 711, 0, 710, 712, 194, 195, 391, 196,
	737, 197, 738, 739, 0, 198, 0, 199, 0, 200,
	0, 0, 730, 202, 0, 203, 0, 0, 0, 672,
	204, 205, 206, 717, 718, 695, 0, 0, 207, 208,
	740, 741, 742, 0, 209, 0, 210, 0, 0, 587,
	0, 211, 728, 0, 351, 0, 0, 212, 213, 214,
	215, 724, 726, 589, 0, 219, 0, 216, 0, 588,
	217, 743, 218, 744, 745, 746, 747, 748, 0, 706,
	0, 590, 220, 221, 222, 591, 223, 224, 225, 0,
	227, 226, 0, 729, 592, 228, 593, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 594,
	236, 237, 239, 238, 667, 2092, 696, 725, 240, 749,
	241, 242, 0, 243, 0, 0, 244, 0, 0, 245,
	365, 595, 246, 596, 719, 247, 248, 249, 250, 251,
	0, 252, 720, 253, 368, 254, 0, 255, 256, 257,
	258, 259, 750, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	597, 275, 276, 673, 277, 0, 281, 282, 283, 284,
	0, 286, 371, 285, 287, 288, 713, 289, 278, 279,
	290, 598, 291, 751, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 752, 296, 297, 721, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 753,
	754, 0, 0, 308, 309, 722, 723, 694, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 714, 318,
	0, 381, 319, 320, 321, 382, 755, 0, 0, 322,
	0, 0, 0, 0, 323, 324, 325, 326, 327, 668,
	0, 0, 0, 0, 0, 666, 0, 0, 0, 0,
	664, 665, 940, 699, 688, 689, 686, 687, 678, 674,
	0, 0, 0, 0, 0, 677, 0, 0, 0, 173,
	174, 0, 175, 0, 0, 0, 0, 716, 681, 0,
	0, 0, 176, 177, 178, 329, 731, 331, 732, 179,
	733, 734, 0, 180, 335, 336, 181, 182, 684, 715,
	735, 736, 339, 0, 183, 727, 0, 707, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 0, 586,
	191, 192, 193, 0, 708, 709, 711, 0, 710, 712,
	194, 195, 391, 196, 737, 197, 738, 739, 0, 198,
	0, 199, 0, 200, 0, 0, 730, 202, 0, 203,
	0, 0, 0, 672, 204, 205, 206, 717, 718, 695,
	0, 0, 207, 208, 740, 741, 742, 0, 209, 0,
	210, 0, 0, 587, 0, 211, 728, 0, 351, 0,
	0, 212, 213, 214, 215, 724, 726, 589, 0, 219,
	1356, 216, 0, 588, 217, 743, 218, 744, 745, 746,
	747, 748, 0, 706, 0, 590, 220, 221, 222, 591,
	223, 224, 225, 0, 227, 226, 0, 729, 592, 228,
	593, 0, 229, 0, 0, 230, 0, 231, 232, 233,
	235, 362, 234, 594, 236, 237, 239, 238, 667, 0,
	696, 725, 240, 749, 241, 242, 0, 243, 0, 0,
	244, 0, 0, 245, 365, 595, 246, 596, 719, 247,
	248, 249, 250, 251, 0, 252, 720, 253, 368, 254,
	1355, 255, 256, 257, 258, 259, 750, 260, 261, 0,
	262, 263, 264, 265, 266, 268, 269, 267, 270, 271,
	272, 273, 0, 274, 597, 275, 276, 673, 277, 0,
	281, 282, 283, 284, 0, 286, 371, 285, 287, 288,
	713, 289, 278, 279, 290, 598, 291, 751, 373, 292,
	0, 299, 293, 294, 280, 295, 298, 752, 296, 297,
	721, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 753, 754, 0, 0, 308, 309, 722,
	723, 694, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 714, 318, 0, 381, 319, 320, 321, 382,
	755, 0, 0, 322, 0, 0, 0, 0, 323, 324,
	325, 326, 327, 668, 0, 0, 0, 0, 0, 666,
	0, 0, 0, 0, 664, 665, 699, 688, 689, 686,
	687, 678, 0, 674, 0, 0, 0, 0, 0, 677,
	0, 0, 173, 174, 0, 175, 0, 0, 0, 0,
	716, 681, 0, 0, 0, 176, 177, 178, 329, 731,
	331, 732, 179, 733, 734, 0, 180, 335, 336, 181,
	182, 684, 715, 735, 736, 339, 0, 183, 727, 0,
	707, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 0, 586, 191, 192, 193, 0, 708, 709, 711,
	0, 710, 712, 194, 195, 391, 196, 737, 197, 738,
	739, 0, 198, 0, 199, 0, 200, 0, 0, 730,
	202, 0, 203, 0, 0, 0, 672, 204, 205, 206,
	717, 718, 695, 0, 0, 207, 208, 740, 741, 742,
	0, 209, 0, 210, 0, 0, 587, 0, 211, 728,
	0, 351, 0, 0, 212, 213, 214, 215, 724, 726,
	589, 0, 219, 0, 216, 0, 588, 217, 743, 218,
	744, 745, 746, 747, 748, 0, 706, 0, 590, 220,
	221, 222, 591, 223, 224, 225, 0, 227, 226, 0,
	729, 592, 228, 593, 0, 229, 0, 0, 230, 0,
	231, 232, 233, 235, 362, 234, 594, 236, 237, 239,
	238, 667, 0, 696, 725, 240, 749, 241, 242, 0,
	243, 0, 0, 244, 0, 0, 245, 365, 595, 246,
	596, 719, 247, 248, 249, 250, 251, 0, 252, 720,
	253, 368, 254, 0, 255, 256, 257, 258, 259, 750,
	260, 261, 0, 262, 263, 264, 265, 266, 268, 269,
	267, 270, 271, 272, 273, 0, 274, 597, 275, 276,
	673, 277, 0, 281, 282, 283, 284, 0, 286, 371,
	285, 287, 288, 713, 289, 278, 279, 290, 598, 291,
	751, 373, 292, 0, 299, 293, 294, 280, 295, 298,
	752, 296, 297, 721, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 753, 754, 0, 0,
	308, 309, 722, 723, 694, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 714, 318, 0, 381, 319,
	320, 321, 382, 755, 0, 0, 322, 0, 0, 0,
	0, 323, 324, 325, 326, 327, 668, 0, 0, 0,
	0, 0, 666, 0, 0, 0, 0, 664, 665, 0,
	0, 0, 0, 0, 1137, 1505, 674, 0, 0, 0,
	0, 0, 677, 699, 688, 689, 686, 687, 678, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 173,
	174, 0, 175, 0, 0, 0, 0, 716, 681, 0,
	0, 0, 176, 177, 178, 329, 731, 331, 732, 179,
	733, 734, 0, 180, 335, 336, 181, 182, 684, 715,
	735, 736, 339, 0, 183, 727, 0, 707, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 0, 586,
	191, 192, 193, 0, 708, 709, 711, 0, 710, 712,
	194, 195, 391, 196, 737, 197, 738, 739, 945, 198,
	0, 199, 0, 200, 0, 0, 730, 202, 0, 203,
	0, 0, 0, 672, 204, 205, 206, 717, 718, 695,
	0, 0, 207, 208, 740, 741, 742, 0, 209, 0,
	210, 0, 0, 587, 0, 211, 728, 0, 351, 0,
	0, 212, 213, 214, 215, 724, 726, 589, 0, 219,
	0, 216, 0, 588, 217, 743, 218, 744, 745, 746,
	747, 748, 0, 706, 0, 590, 220, 221, 222, 591,
	223, 224, 225, 0, 227, 226, 0, 729, 592, 228,
	593, 0, 229, 0, 0, 230, 0, 231, 232, 233,
	235, 362, 234, 594, 236, 237, 239, 238, 667, 0,
	696, 725, 240, 749, 241, 242, 0, 243, 0, 0,
	244, 0, 0, 245, 365, 595, 246, 596, 719, 247,
	248, 249, 250, 251, 0, 252, 720, 253, 368, 254,
	0, 255, 256, 257, 258, 259, 750, 260, 261, 0,
	262, 263, 264, 265, 266, 268, 269, 267, 270, 271,
	272, 273, 0, 274, 597, 275, 276, 673, 277, 0,
	281, 282, 283, 284, 0, 286, 371, 285, 287, 288,
	713, 289, 278, 279, 290, 598, 291, 751, 373, 292,
	0, 299, 293, 294, 280, 295, 298, 752, 296, 297,
	721, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 753, 754, 0, 0, 308, 309, 722,
	723, 694, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 714, 318, 0, 381, 319, 320, 321, 382,
	755, 0, 0, 322, 0, 0, 0, 0, 323, 324,
	325, 326, 327, 668, 0, 0, 0, 0, 0, 666,
	0, 0, 0, 0, 664, 665, 699, 688, 689, 686,
	687, 678, 0, 674, 0, 0, 0, 0, 0, 677,
	0, 0, 173, 174, 0, 175, 0, 0, 0, 0,
	716, 681, 0, 0, 0, 176, 177, 178, 329, 731,
	331, 732, 179, 733, 734, 0, 180, 335, 336, 181,
	182, 684, 715, 735, 736, 339, 0, 183, 727, 0,
	707, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 0, 586, 191, 192, 193, 0, 708, 709, 711,
	0, 710, 712, 194, 195, 391, 196, 737, 197, 738,
	739, 0, 198, 0, 199, 0, 200, 0, 0, 730,
	202, 0, 203, 0, 0, 0, 672, 204, 205, 206,
	717, 718, 695, 0, 0, 207, 208, 740, 741, 742,
	0, 209, 0, 210, 0, 0, 587, 0, 211, 728,
	0, 351, 0, 0, 212, 213, 214, 215, 724, 726,
	589, 0, 219, 0, 216, 0, 588, 217, 743, 218,
	744, 745, 746, 747, 748, 0, 706, 0, 590, 220,
	221, 222, 591, 223, 224, 225, 0, 227, 226, 0,
	729, 592, 228, 593, 0, 229, 0, 0, 230, 0,
	231, 232, 233, 235, 362, 234, 594, 236, 237, 239,
	238, 667, 0, 696, 725, 240, 749, 241, 242, 0,
	243, 0, 0, 244, 0, 0, 245, 365, 595, 246,
	596, 719, 247, 248, 249, 250, 251, 0, 252, 720,
	253, 368, 254, 0, 255, 256, 257, 258, 259, 750,
	260, 261, 0, 262, 263, 264, 265, 266, 268, 269,
	267, 270, 271, 272, 273, 0, 274, 597, 275, 276,
	673, 277, 0, 281, 282, 283, 284, 0, 286, 371,
	285, 287, 288, 713, 289, 278, 279, 290, 598, 291,
	751, 373, 292, 0, 299, 293, 294, 280, 295, 298,
	752, 296, 297, 721, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 753, 754, 0, 0,
	308, 309, 722, 723, 694, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 714, 318, 0, 381, 319,
	320, 321, 382, 755, 0, 0, 322, 0, 0, 0,
	0, 323, 324, 325, 326, 327, 668, 0, 0, 0,
	0, 0, 666, 0, 0, 0, 0, 664, 665, 699,
	688, 689, 686, 687, 678, 0, 674, 2060, 0, 0,
	0, 0, 677, 0, 0, 173, 174, 0, 175, 0,
	0, 0, 0, 716, 681, 0, 0, 0, 176, 177,
	178, 329, 731, 331, 732, 179, 733, 734, 0, 180,
	335, 336, 181, 182, 684, 715, 735, 736, 339, 0,
	183, 727, 0, 707, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 0, 586, 191, 192, 193, 0,
	708, 709, 711, 0, 710, 712, 194, 195, 391, 196,
	737, 197, 738, 739, 0, 198, 0, 199, 0, 200,
	0, 0, 730, 202, 0, 203, 0, 0, 0, 672,
	204, 205, 206, 717, 718, 695, 0, 0, 207, 208,
	740, 741, 742, 0, 209, 0, 210, 0, 0, 587,
	0, 211, 728, 0, 351, 0, 0, 212, 213, 214,
	215, 724, 726, 589, 0, 219, 0, 216, 0, 588,
	217, 743, 218, 744, 745, 746, 747, 748, 0, 706,
	0, 590, 220, 221, 222, 591, 223, 224, 225, 0,
	227, 226, 0, 729, 592, 228, 593, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 594,
	236, 237, 239, 238, 667, 0, 696, 725, 240, 749,
	241, 242, 0, 243, 0, 0, 244, 0, 0, 245,
	365, 595, 246, 596, 719, 247, 248, 249, 250, 251,
	0, 252, 720, 253, 368, 254, 0, 255, 256, 257,
	258, 259, 750, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	597, 275, 276, 673, 277, 0, 281, 282, 283, 284,
	0, 286, 371, 285, 287, 288, 713, 289, 278, 279,
	290, 598, 291, 751, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 752, 296, 297, 721, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 753,
	754, 0, 0, 308, 309, 722, 723, 694, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 714, 318,
	0, 381, 319, 320, 321, 382, 755, 2009, 0, 322,
	0, 0, 0, 0, 323, 324, 325, 326, 327, 668,
	0, 0, 0, 0, 0, 666, 0, 0, 0, 0,
	664, 665, 699, 688, 689, 686, 687, 678, 0, 674,
	0, 0, 0, 0, 0, 677, 0, 0, 173, 174,
	0, 175, 0, 0, 0, 0, 716, 681, 0, 0,
	0, 176, 177, 178, 329, 731, 331, 732, 179, 733,
	734, 0, 180, 335, 336, 181, 182, 684, 715, 735,
	736, 339, 0, 183, 727, 0, 707, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 0, 586, 191,
	192, 193, 0, 708, 709, 711, 0, 710, 712, 194,
	195, 391, 196, 737, 197, 738, 739, 0, 198, 0,
	199, 0, 200, 0, 0, 730, 202, 0, 203, 0,
	0, 0, 672, 204, 205, 206, 717, 718, 695, 0,
	0, 207, 208, 740, 741, 742, 0, 209, 0, 210,
	0, 0, 587, 0, 211, 728, 0, 351, 0, 0,
	212, 213, 214, 215, 724, 726, 589, 0, 219, 0,
	216, 0, 588, 217, 743, 218, 744, 745, 746, 747,
	748, 0, 706, 0, 590, 220, 221, 222, 591, 223,
	224, 225, 0, 227, 226, 0, 729, 592, 228, 593,
	0, 229, 0, 0, 230, 0, 231, 232, 233, 235,
	362, 234, 594, 236, 237, 239, 238, 667, 0, 696,
	725, 240, 749, 241, 242, 0, 243, 0, 0, 244,
	0, 0, 245, 365, 595, 246, 596, 719, 247, 248,
	249, 250, 251, 0, 252, 720, 253, 368, 254, 0,
	255, 256, 257, 258, 259, 750, 260, 261, 0, 262,
	263, 264, 265, 266, 268, 269, 267, 270, 271, 272,
	273, 0, 274, 597, 275, 276, 673, 277, 0, 281,
	282, 283, 284, 0, 286, 371, 285, 287, 288, 713,
	289, 278, 279, 290, 598, 291, 751, 373, 292, 0,
	299, 293, 294, 280, 295, 298, 752, 296, 297, 721,
	0, 300, 0, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 753, 754, 0, 0, 308, 309, 722, 723,
	694, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 714, 318, 0, 381, 319, 320, 321, 382, 755,
	0, 0, 322, 0, 0, 0, 0, 323, 324, 325,
	326, 327, 668, 0, 0, 0, 0, 0, 666, 0,
	0, 0, 0, 664, 665, 699, 688, 689, 686, 687,
	678, 0, 674, 1999, 0, 0, 0, 0, 677, 0,
	0, 173, 174, 0, 175, 0, 0, 0, 0, 716,
	681, 0, 0, 0, 176, 177, 178, 329, 731, 331,
	732, 179, 733, 734, 0, 180, 335, 336, 181, 182,
	684, 715, 735, 736, 339, 0, 183, 727, 0, 707,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	0, 586, 191, 192, 193, 0, 708, 709, 711, 0,
	710, 712, 194, 195, 391, 196, 737, 197, 738, 739,
	0, 198, 0, 199, 0, 200, 0, 0, 730, 202,
	0, 203, 0, 0, 0, 672, 204, 205, 206, 717,
	718, 695, 0, 0, 207, 208, 740, 741, 742, 0,
	209, 0, 210, 0, 1573, 587, 0, 211, 728, 0,
	351, 0, 0, 212, 213, 214, 215, 724, 726, 589,
	0, 219, 0, 216, 0, 588, 217, 743, 218, 744,
	745, 746, 747, 748, 0, 706, 0, 590, 220, 221,
	222, 591, 223, 224, 225, 0, 227, 226, 0, 729,
	592, 228, 593, 0, 229, 0, 0, 230, 0, 231,
	232, 233, 235, 362, 234, 594, 236, 237, 239, 238,
	667, 0, 696, 725, 240, 749, 241, 242, 0, 243,
	0, 0, 244, 0, 0, 245, 365, 595, 246, 596,
	719, 247, 248, 249, 250, 251, 0, 252, 720, 253,
	368, 254, 0, 255, 256, 257, 258, 259, 750, 260,
	261, 0, 262, 263, 264, 265, 266, 268, 269, 267,
	270, 271, 272, 273, 0, 274, 597, 275, 276, 673,
	277, 0, 281, 282, 283, 284, 0, 286, 371, 285,
	287, 288, 713, 289, 278, 279, 290, 598, 291, 751,
	373, 292, 0, 299, 293, 294, 280, 295, 298, 752,
	296, 297, 721, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 753, 754, 0, 0, 308,
	309, 722, 723, 694, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 714, 318, 0, 381, 319, 320,
	321, 382, 755, 0, 0, 322, 0, 0, 0, 0,
	323, 324, 325, 326, 327, 668, 0, 0, 0, 0,
	0, 666, 0, 0, 0, 0, 664, 665, 699, 688,
	689, 686, 687, 678, 0, 674, 0, 0, 0, 0,
	0, 677, 0, 0, 173, 174, 0, 175, 0, 0,
	0, 0, 716, 681, 0, 0, 0, 176, 177, 178,
	329, 731, 331, 732, 179, 733, 734, 0, 180, 335,
	336, 181, 182, 684, 715, 735, 736, 339, 0, 183,
	727, 0, 707, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 0, 586, 191, 192, 193, 0, 708,
	709, 711, 0, 710, 712, 194, 195, 391, 196, 737,
	197, 738, 739, 0, 198, 0, 199, 0, 200, 0,
	0, 730, 202, 0, 203, 0, 0, 0, 672, 204,
	205, 206, 717, 718, 695, 0, 0, 207, 208, 740,
	741, 742, 0, 209, 0, 210, 0, 0, 587, 0,
	211, 728, 0, 351, 0, 0, 212, 213, 214, 215,
	724, 726, 589, 0, 219, 0, 216, 0, 588, 217,
	743, 218, 744, 745, 746, 747, 748, 0, 706, 0,
	590, 220, 221, 222, 591, 223, 224, 225, 0, 227,
	226, 0, 729, 592, 228, 593, 0, 229, 0, 0,
	230, 0, 231, 232, 233, 235, 362, 234, 594, 236,
	237, 239, 238, 667, 0, 696, 725, 240, 749, 241,
	242, 0, 243, 0, 0, 244, 0, 0, 245, 365,
	595, 246, 596, 719, 247, 248, 249, 250, 251, 0,
	252, 720, 253, 368, 254, 0, 255, 256, 257, 258,
	259, 750, 260, 261, 0, 262, 263, 264, 265, 266,
	268, 269, 267, 270, 271, 272, 273, 0, 274, 597,
	275, 276, 673, 277, 0, 281, 282, 283, 284, 0,
	286, 371, 285, 287, 288, 713, 289, 278, 279, 290,
	598, 291, 751, 373, 292, 0, 299, 293, 294, 280,
	295, 298, 752, 296, 297, 721, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 753, 754,
	0, 0, 308, 309, 722, 723, 694, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 714, 318, 0,
	381, 319, 320, 321, 382, 755, 0, 0, 322, 0,
	0, 0, 0, 323, 324, 325, 326, 327, 668, 0,
	0, 0, 0, 0, 666, 0, 0, 0, 0, 664,
	665, 940, 0, 0, 0, 0, 0, 0, 674, 0,
	0, 0, 0, 1582, 677, 699, 688, 689, 686, 687,
	678, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 173, 174, 0, 175, 0, 0, 0, 0, 716,
	681, 0, 0, 0, 176, 177, 178, 329, 731, 331,
	732, 179, 733, 734, 0, 180, 335, 336, 181, 182,
	684, 715, 735, 736, 339, 0, 183, 727, 0, 707,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	0, 586, 191, 192, 193, 0, 708, 709, 711, 0,
	710, 712, 194, 195, 391, 196, 737, 197, 738, 739,
	0, 198, 0, 199, 0, 200, 0, 0, 730, 202,
	0, 203, 0, 0, 0, 672, 204, 205, 206, 717,
	718, 695, 0, 0, 207, 208, 740, 741, 742, 0,
	209, 0, 210, 0, 0, 587, 0, 211, 728, 0,
	351, 0, 0, 212, 213, 214, 215, 724, 726, 589,
	0, 219, 0, 216, 0, 588, 217, 743, 218, 744,
	745, 746, 747, 748, 0, 706, 0, 590, 220, 221,
	222, 591, 223, 224, 225, 0, 227, 226, 0, 729,
	592, 228, 593, 0, 229, 0, 0, 230, 0, 231,
	232, 233, 235, 362, 234, 594, 236, 237, 239, 238,
	667, 0, 696, 725, 240, 749, 241, 242, 0, 243,
	0, 0, 244, 0, 0, 245, 365, 595, 246, 596,
	719, 247, 248, 249, 250, 251, 0, 252, 720, 253,
	368, 254, 0, 255, 256, 257, 258, 259, 750, 260,
	261, 0, 262, 263, 264, 265, 266, 268, 269, 267,
	270, 271, 272, 273, 0, 274, 597, 275, 276, 673,
	277, 0, 281, 282, 283, 284, 0, 286, 371, 285,
	287, 288, 713, 289, 278, 279, 290, 598, 291, 751,
	373, 292, 0, 299, 293, 294, 280, 295, 298, 752,
	296, 297, 721, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 753, 754, 0, 0, 308,
	309, 722, 723, 694, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 714, 318, 0, 381, 319, 320,
	321, 382, 755, 0, 0, 322, 0, 0, 0, 0,
	323, 324, 325, 326, 327, 668, 0, 0, 0, 0,
	0, 666, 0, 0, 0, 0, 664, 665, 0, 0,
	0, 0, 0, 0, 0, 674, 0, 0, 0, 0,
	1580, 677, 699, 688, 689, 686, 687, 678, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 174,
	0, 175, 0, 0, 0, 0, 716, 681, 0, 0,
	0, 176, 177, 178, 329, 731, 331, 732, 179, 733,
	734, 0, 180, 335, 336, 181, 182, 684, 715, 735,
	736, 339, 0, 183, 727, 0, 707, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 0, 586, 191,
	192, 193, 0, 708, 709, 711, 0, 710, 712, 194,
	195, 391, 196, 737, 197, 738, 739, 0, 198, 0,
	199, 0, 200, 0, 0, 730, 202, 0, 203, 0,
	0, 0, 672, 204, 205, 206, 717, 718, 695, 0,
	0, 207, 208, 740, 741, 742, 0, 209, 0, 210,
	0, 0, 587, 0, 211, 728, 0, 351, 0, 0,
	212, 213, 214, 215, 724, 726, 589, 0, 219, 0,
	216, 0, 588, 217, 743, 218, 744, 745, 746, 747,
	748, 0, 706, 0, 590, 220, 221, 222, 591, 223,
	224, 225, 0, 227, 226, 0, 729, 592, 228, 593,
	0, 229, 0, 0, 230, 0, 231, 232, 233, 235,
	362, 234, 594, 236, 237, 239, 238, 667, 0, 696,
	725, 240, 749, 241, 242, 0, 243, 0, 0, 244,
	0, 0, 245, 365, 595, 246, 596, 719, 247, 248,
	249, 250, 251, 0, 252, 720, 253, 368, 254, 0,
	255, 256, 257, 258, 259, 750, 260, 261, 0, 262,
	263, 264, 265, 266, 268, 269, 267, 270, 271, 272,
	273, 0, 274, 597, 275, 276, 673, 277, 0, 281,
	282, 283, 284, 0, 286, 371, 285, 287, 288, 713,
	289, 278, 279, 290, 598, 291, 751, 373, 292, 0,
	299, 293, 294, 280, 295, 298, 752, 296, 297, 721,
	0, 300, 0, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 753, 754, 0, 0, 308, 309, 722, 723,
	694, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 714, 318, 0, 381, 319, 320, 321, 382, 755,
	0, 0, 322, 0, 0, 0, 0, 323, 324, 325,
	326, 327, 668, 0, 0, 0, 0, 0, 666, 0,
	0, 0, 0, 664, 665, 0, 0, 0, 0, 0,
	0, 0, 674, 0, 0, 0, 0, 1564, 677, 699,
	688, 689, 686, 687, 678, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 174, 0, 175, 0,
	0, 0, 0, 716, 681, 0, 0, 0, 176, 177,
	178, 329, 731, 331, 732, 179, 733, 734, 0, 180,
	335, 336, 181, 182, 684, 715, 735, 736, 339, 0,
	183, 727, 0, 707, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 0, 586, 191, 192, 193, 0,
	708, 709, 711, 0, 710, 712, 194, 195, 391, 196,
	737, 197, 738, 739, 0, 198, 0, 199, 0, 200,
	0, 0, 730, 202, 0, 203, 0, 0, 0, 672,
	204, 205, 206, 717, 718, 695, 0, 0, 207, 208,
	740, 741, 742, 0, 209, 0, 210, 0, 0, 587,
	0, 211, 728, 0, 351, 0, 0, 212, 213, 214,
	215, 724, 726, 589, 0, 219, 0, 216, 0, 588,
	217, 743, 218, 744, 745, 746, 747, 748, 0, 706,
	0, 590, 220, 221, 222, 591, 223, 224, 225, 0,
	227, 226, 0, 729, 592, 228, 593, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 594,
	236, 237, 239, 238, 667, 0, 696, 725, 240, 749,
	241, 242, 0, 243, 0, 0, 244, 0, 0, 245,
	365, 595, 246, 596, 719, 247, 248, 249, 250, 251,
	0, 252, 720, 253, 368, 254, 0, 255, 256, 257,
	258, 259, 750, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	597, 275, 276, 673, 277, 0, 281, 282, 283, 284,
	0, 286, 371, 285, 287, 288, 713, 289, 278, 279,
	290, 598, 291, 751, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 752, 296, 297, 721, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 753,
	754, 0, 0, 308, 309, 722, 723, 694, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 714, 318,
	0, 381, 319, 320, 321, 382, 755, 0, 0, 322,
	0, 0, 0, 0, 323, 324, 325, 326, 327, 668,
	0, 0, 0, 0, 0, 666, 0, 0, 0, 0,
	664, 665, 0, 0, 0, 0, 0, 0, 0, 674,
	0, 0, 0, 0, 1552, 677, 699, 688, 689, 686,
	687, 678, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 173, 174, 0, 175, 0, 0, 0, 0,
	716, 681, 0, 0, 0, 176, 177, 178, 329, 731,
	331, 732, 179, 733, 734, 0, 180, 335, 336, 181,
	182, 684, 715, 735, 736, 339, 0, 183, 727, 0,
	707, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 0, 586, 191, 192, 193, 0, 708, 709, 711,
	0, 710, 712, 194, 195, 391, 196, 737, 197, 738,
	739, 0, 198, 0, 199, 0, 200, 0, 0, 730,
	202, 0, 203, 0, 0, 0, 672, 204, 205, 206,
	717, 718, 695, 0, 0, 207, 208, 740, 741, 742,
	0, 209, 0, 210, 0, 0, 587, 0, 211, 728,
	0, 351, 0, 0, 212, 213, 214, 215, 724, 726,
	589, 0, 219, 0, 216, 0, 588, 217, 743, 218,
	744, 745, 746, 747, 748, 0, 706, 0, 590, 220,
	221, 222, 591, 223, 224, 225, 0, 227, 226, 0,
	729, 592, 228, 593, 0, 229, 0, 0, 230, 0,
	231, 232, 233, 235, 362, 234, 594, 236, 237, 239,
	238, 667, 0, 696, 725, 240, 749, 241, 242, 0,
	243, 0, 0, 244, 0, 0, 245, 365, 595, 246,
	596, 719, 247, 248, 249, 250, 251, 0, 252, 720,
	253, 368, 254, 0, 255, 256, 257, 258, 259, 750,
	260, 261, 0, 262, 263, 264, 265, 266, 268, 269,
	267, 270, 271, 272, 273, 0, 274, 597, 275, 276,
	673, 277, 0, 281, 282, 283, 284, 0, 286, 371,
	285, 287, 288, 713, 289, 278, 279, 290, 598, 291,
	751, 373, 292, 0, 299, 293, 294, 280, 295, 298,
	752, 296, 297, 721, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 753, 754, 0, 0,
	308, 309, 722, 723, 694, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 714, 318, 0, 381, 319,
	320, 321, 382, 755, 0, 0, 322, 0, 0, 0,
	0, 323, 324, 325, 326, 327, 668, 0, 0, 0,
	0, 0, 666, 0, 0, 0, 0, 664, 665, 0,
	0, 0, 0, 0, 0, 0, 674, 0, 0, 0,
	0, 1550, 677, 1542, 688, 689, 686, 687, 678, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 173,
	174, 0, 175, 0, 0, 0, 0, 716, 681, 0,
	0, 0, 176, 177, 178, 329, 731, 331, 732, 179,
	733, 734, 0, 180, 335, 336, 181, 182, 684, 715,
	735, 736, 339, 0, 183, 727, 0, 707, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 0, 586,
	191, 192, 193, 0, 708, 709, 711, 0, 710, 712,
	194, 195, 391, 196, 737, 1545, 738, 739, 0, 198,
	0, 199, 0, 200, 0, 0, 730, 202, 0, 203,
	0, 0, 0, 672, 204, 205, 206, 717, 718, 695,
	0, 0, 207, 208, 740, 741, 742, 0, 209, 0,
	210, 0, 0, 587, 0, 211, 728, 0, 351, 0,
	0, 212, 1546, 214, 215, 724, 726, 589, 0, 219,
	0, 216, 0, 588, 217, 743, 218, 744, 745, 746,
	747, 748, 0, 706, 0, 590, 220, 221, 222, 591,
	223, 224, 225, 0, 227, 226, 0, 729, 592, 228,
	593, 0, 229, 0, 0, 230, 0, 231, 1547, 1544,
	235, 362, 234, 594, 236, 237, 239, 238, 667, 0,
	696, 725, 240, 749, 241, 242, 0, 243, 0, 0,
	244, 0, 0, 245, 365, 595, 246, 596, 719, 247,
	248, 249, 250, 251, 0, 252, 720, 253, 368, 254,
	0, 255, 256, 257, 258, 259, 750, 260, 261, 0,
	262, 263, 264, 265, 266, 268, 269, 267, 270, 271,
	272, 273, 0, 274, 597, 275, 276, 673, 277, 0,
	281, 282, 283, 1548, 0, 286, 371, 285, 287, 288,
	713, 289, 278, 279, 290, 598, 291, 751, 373, 292,
	0, 299, 293, 294, 280, 295, 298, 752, 296, 297,
	721, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 753, 754, 0, 0, 308, 309, 722,
	723, 694, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 714, 318, 0, 381, 319, 320, 321, 382,
	755, 0, 0, 322, 0, 0, 0, 0, 323, 324,
	325, 1543, 327, 668, 0, 0, 0, 0, 0, 666,
	0, 0, 0, 0, 664, 665, 0, 0, 0, 0,
	0, 0, 0, 674, 0, 0, 0, 0, 1539, 677,
	1542, 688, 689, 686, 687, 678, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 173, 174, 0, 175,
	0, 0, 0, 0, 716, 681, 0, 0, 0, 176,
	177, 178, 329, 731, 331, 732, 179, 733, 734, 0,
	180, 335, 336, 181, 182, 684, 715, 735, 736, 339,
	0, 183, 727, 0, 707, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 0, 586, 191, 192, 193,
	0, 708, 709, 711, 0, 710, 712, 194, 195, 391,
	196, 737, 1545, 738, 739, 0, 198, 0, 199, 0,
	200, 0, 0, 730, 202, 0, 203, 0, 0, 0,
	672, 204, 205, 206, 717, 718, 695, 0, 0, 207,
	208, 740, 741, 742, 0, 209, 0, 210, 0, 0,
	587, 0, 211, 728, 0, 351, 0, 0, 212, 1546,
	214, 215, 724, 726, 589, 0, 219, 0, 216, 0,
	588, 217, 743, 218, 744, 745, 746, 747, 748, 0,
	706, 0, 590, 220, 221, 222, 591, 223, 224, 225,
	0, 227, 226, 0, 729, 592, 228, 593, 0, 229,
	0, 0, 230, 0, 231, 1547, 1544, 235, 362, 234,
	594, 236, 237, 239, 238, 667, 0, 696, 725, 240,
	749, 241, 242, 0, 243, 0, 0, 244, 0, 0,
	245, 365, 595, 246, 596, 719, 247, 248, 249, 250,
	251, 0, 252, 720, 253, 368, 254, 0, 255, 256,
	257, 258, 259, 750, 260, 261, 0, 262, 263, 264,
	265, 266, 268, 269, 267, 270, 271, 272, 273, 0,
	274, 597, 275, 276, 673, 277, 0, 281, 282, 283,
	1548, 0, 286, 371, 285, 287, 288, 713, 289, 278,
	279, 290, 598, 291, 751, 373, 292, 0, 299, 293,
	294, 280, 295, 298, 752, 296, 297, 721, 0, 300,
	0, 301, 302, 303, 304, 305, 306, 307, 0, 376,
	753, 754, 0, 0, 308, 309, 722, 723, 694, 310,
	311, 312, 313, 0, 0, 314, 315, 316, 317, 714,
	318, 0, 381, 319, 320, 321, 382, 755, 0, 0,
	322, 0, 0, 0, 0, 323, 324, 325, 1543, 327,
	668, 0, 0, 0, 0, 0, 666, 0, 0, 0,
	0, 664, 665, 699, 688, 689, 686, 687, 678, 0,
	674, 0, 0, 0, 0, 0, 677, 0, 0, 173,
	174, 0, 175, 0, 0, 0, 0, 716, 681, 0,
	0, 0, 176, 177, 178, 329, 731, 331, 732, 179,
	733, 734, 0, 180, 335, 336, 181, 182, 684, 715,
	735, 736, 339, 0, 183, 727, 0, 707, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 0, 586,
	191, 192, 193, 0, 708, 709, 711, 0, 710, 712,
	194, 195, 391, 196, 737, 197, 738, 739, 0, 198,
	0, 199, 0, 200, 0, 0, 730, 202, 0, 203,
	0, 0, 0, 672, 204, 205, 206, 717, 718, 695,
	0, 0, 207, 208, 740, 741, 742, 0, 209, 0,
	210, 0, 0, 587, 0, 211, 728, 0, 351, 0,
	0, 212, 213, 214, 215, 724, 726, 589, 0, 219,
	0, 216, 0, 588, 217, 743, 218, 744, 745, 746,
	747, 748, 0, 706, 0, 590, 220, 221, 222, 591,
	223, 224, 225, 0, 227, 226, 0, 729, 592, 228,
	593, 0, 229, 0, 0, 230, 0, 231, 232, 233,
	235, 362, 234, 594, 236, 237, 239, 238, 667, 0,
	696, 725, 240, 749, 241, 242, 0, 243, 0, 0,
	244, 0, 0, 245, 365, 595, 246, 596, 719, 247,
	248, 249, 250, 251, 0, 252, 720, 253, 368, 254,
	0, 255, 256, 257, 258, 259, 750, 260, 261, 0,
	262, 263, 264, 265, 266, 268, 269, 267, 270, 271,
	272, 273, 0, 274, 597, 275, 276, 673, 277, 0,
	281, 282, 283, 284, 0, 286, 371, 285, 287, 288,
	713, 289, 278, 279, 290, 598, 291, 751, 373, 292,
	0, 299, 293, 294, 280, 295, 298, 752, 296, 297,
	721, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 753, 754, 0, 0, 308, 309, 722,
	723, 694, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 714, 318, 0, 381, 319, 320, 321, 382,
	755, 0, 0, 322, 0, 0, 0, 0, 323, 324,
	325, 326, 327, 668, 0, 0, 0, 0, 0, 666,
	0, 0, 0, 0, 664, 665, 0, 0, 0, 0,
	0, 0, 0, 674, 1500, 0, 0, 0, 1386, 677,
	699, 688, 689, 686, 687, 678, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 173, 174, 0, 175,
	0, 0, 0, 0, 716, 681, 0, 0, 0, 176,
	177, 178, 329, 731, 331, 732, 179, 733, 734, 0,
	180, 335, 336, 181, 182, 684, 715, 735, 736, 339,
	0, 183, 727, 0, 707, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 0, 586, 191, 192, 193,
	0, 708, 709, 711, 0, 710, 712, 194, 195, 391,
	196, 737, 197, 738, 739, 0, 198, 0, 199, 0,
	200, 0, 0, 730, 202, 0, 203, 0, 0, 0,
	672, 204, 205, 206, 717, 718, 695, 0, 0, 207,
	208, 740, 741, 742, 0, 209, 0, 210, 0, 0,
	587, 0, 211, 728, 0, 351, 0, 0, 212, 213,
	214, 215, 724, 726, 589, 0, 219, 0, 216, 0,
	588, 217, 743, 218, 744, 745, 746, 747, 748, 0,
	706, 0, 590, 220, 221, 222, 591, 223, 224, 225,
	0, 227, 226, 0, 729, 592, 228, 593, 0, 229,
	0, 0, 230, 0, 231, 232, 233, 235, 362, 234,
	594, 236, 237, 239, 238, 667, 0, 696, 725, 240,
	749, 241, 242, 0, 243, 0, 0, 244, 0, 0,
	245, 365, 595, 246, 596, 719, 247, 248, 249, 250,
	251, 0, 252, 720, 253, 368, 254, 0, 255, 256,
	257, 258, 259, 750, 260, 261, 0, 262, 263, 264,
	265, 266, 268, 269, 267, 270, 271, 272, 273, 0,
	274, 597, 275, 276, 673, 277, 0, 281, 282, 283,
	284, 0, 286, 371, 285, 287, 288, 713, 289, 278,
	279, 290, 598, 291, 751, 373, 292, 0, 299, 293,
	294, 280, 295, 298, 752, 296, 297, 721, 0, 300,
	0, 301, 302, 303, 304, 305, 306, 307, 0, 376,
	753, 754, 0, 0, 308, 309, 722, 723, 694, 310,
	311, 312, 313, 0, 0, 314, 315, 316, 317, 714,
	318, 0, 381, 319, 320, 321, 382, 755, 0, 0,
	322, 0, 0, 0, 0, 323, 324, 325, 326, 327,
	668, 0, 0, 0, 0, 0, 666, 0, 0, 0,
	0, 664, 665, 699, 688, 689, 686, 687, 678, 0,
	674, 0, 0, 0, 0, 0, 677, 0, 0, 173,
	174, 1343, 175, 0, 0, 0, 0, 716, 681, 0,
	0, 0, 176, 177, 178, 329, 731, 331, 732, 179,
	733, 734, 0, 180, 335, 336, 181, 182, 684, 715,
	735, 736, 339, 0, 183, 727, 0, 707, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 0, 586,
	191, 192, 193, 0, 708, 709, 711, 0, 710, 712,
	194, 195, 391, 196, 737, 197, 738, 739, 0, 198,
	0, 199, 0, 200, 0, 0, 730, 202, 0, 203,
	0, 0, 0, 672, 204, 205, 206, 717, 718, 695,
	0, 0, 207, 208, 740, 741, 742, 0, 209, 0,
	210, 0, 0, 587, 0, 211, 728, 0, 351, 0,
	0, 212, 213, 214, 215, 724, 726, 589, 0, 219,
	0, 216, 0, 588, 217, 743, 218, 744, 745, 746,
	747, 748, 0, 706, 0, 590, 220, 221, 222, 591,
	223, 224, 225, 0, 227, 226, 0, 729, 592, 228,
	593, 0, 229, 0, 0, 230, 0, 231, 232, 233,
	235, 362, 234, 594, 236, 237, 239, 238, 667, 0,
	696, 725, 240, 749, 241, 242, 0, 243, 0, 0,
	244, 0, 0, 245, 365, 595, 246, 596, 719, 247,
	248, 249, 250, 251, 0, 252, 720, 253, 368, 254,
	0, 255, 256, 257, 258, 259, 750, 260, 261, 0,
	262, 263, 264, 265, 266, 268, 269, 267, 270, 271,
	272, 273, 0, 274, 597, 275, 276, 673, 277, 0,
	281, 282, 283, 284, 0, 286, 371, 285, 287, 288,
	713, 289, 278, 279, 290, 598, 291, 751, 373, 292,
	0, 299, 293, 294, 280, 295, 298, 752, 296, 297,
	721, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 753, 754, 0, 0, 308, 309, 722,
	723, 694, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 714, 318, 0, 381, 319, 320, 321, 382,
	755, 0, 0, 322, 0, 0, 0, 0, 323, 324,
	325, 326, 327, 668, 0, 0, 0, 0, 0, 666,
	0, 0, 0, 0, 664, 665, 0, 0, 0, 0,
	0, 0, 0, 674, 0, 0, 0, 0, 763, 677,
	699, 688, 689, 686, 687, 678, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 173, 174, 0, 175,
	0, 0, 0, 0, 716, 681, 0, 0, 0, 176,
	177, 178, 329, 731, 331, 732, 179, 733, 734, 0,
	180, 335, 336, 181, 182, 684, 715, 735, 736, 339,
	0, 183, 727, 0, 707, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 0, 586, 191, 192, 193,
	0, 708, 709, 711, 0, 710, 712, 194, 195, 391,
	196, 737, 197, 738, 739, 0, 198, 0, 199, 0,
	200, 0, 0, 730, 202, 0, 203, 0, 0, 0,
	672, 204, 205, 206, 717, 718, 695, 0, 0, 207,
	208, 740, 741, 742, 0, 209, 0, 210, 0, 0,
	587, 0, 211, 728, 0, 351, 0, 0, 212, 213,
	214, 215, 724, 726, 589, 0, 219, 0, 216, 0,
	588, 217, 743, 218, 744, 745, 746, 747, 748, 0,
	706, 0, 590, 220, 221, 222, 591, 223, 224, 225,
	0, 227, 226, 0, 729, 592, 228, 593, 0, 229,
	0, 0, 230, 0, 231, 232, 233, 235, 362, 234,
	594, 236, 237, 239, 238, 667, 0, 696, 725, 240,
	749, 241, 242, 0, 243, 0, 0, 244, 0, 0,
	245, 365, 595, 246, 596, 719, 247, 248, 249, 250,
	251, 0, 252, 720, 253, 368, 254, 0, 255, 256,
	257, 258, 259, 750, 260, 261, 0, 262, 263, 264,
	265, 266, 268, 269, 267, 270, 271, 272, 273, 0,
	274, 597, 275, 276, 673, 277, 0, 281, 282, 283,
	284, 0, 286, 371, 285, 287, 288, 713, 289, 278,
	279, 290, 598, 291, 751, 373, 292, 0, 299, 293,
	294, 280, 295, 298, 752, 296, 297, 721, 0, 300,
	0, 301, 302, 303, 304, 305, 306, 307, 0, 376,
	753, 754, 0, 0, 308, 309, 722, 723, 694, 310,
	311, 312, 313, 0, 0, 314, 315, 316, 317, 714,
	318, 0, 381, 319, 320, 321, 382, 755, 0, 0,
	322, 0, 0, 0, 0, 323, 324, 325, 326, 327,
	668, 0, 0, 0, 0, 0, 666, 0, 0, 0,
	0, 664, 665, 0, 0, 0, 0, 0, 0, 0,
	674, 0, 0, 0, 0, 662, 677, 699, 688, 689,
	686, 687, 678, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 173, 174, 0, 175, 0, 0, 0,
	0, 716, 681, 0, 0, 0, 176, 177, 178, 329,
	731, 331, 732, 179, 733, 734, 0, 180, 335, 336,
	181, 182, 684, 715, 735, 736, 339, 0, 183, 727,
	0, 707, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 0, 586, 191, 192, 193, 0, 708, 709,
	711, 0, 710, 712, 194, 195, 391, 196, 737, 197,
	738, 739, 0, 198, 0, 199, 0, 200, 0, 0,
	730, 202, 0, 203, 0, 0, 0, 672, 204, 205,
	206, 717, 718, 695, 0, 0, 207, 208, 740, 741,
	742, 0, 209, 0, 210, 0, 0, 587, 0, 211,
	728, 0, 351, 0, 0, 212, 213, 214, 215, 724,
	726, 589, 0, 219, 0, 216, 0, 588, 217, 743,
	218, 744, 745, 746, 747, 748, 0, 706, 0, 590,
	220, 221, 222, 591, 223, 224, 225, 0, 227, 226,
	0, 729, 592, 228, 593, 0, 229, 0, 0, 230,
	0, 231, 232, 233, 235, 362, 234, 594, 236, 237,
	239, 238, 667, 0, 696, 725, 240, 749, 241, 242,
	0, 243, 0, 0, 244, 0, 0, 245, 365, 595,
	246, 596, 719, 247, 248, 249, 250, 251, 0, 252,
	720, 253, 368, 254, 0, 255, 256, 257, 258, 259,
	750, 260, 261, 0, 262, 263, 264, 265, 266, 268,
	269, 267, 270, 271, 272, 273, 0, 274, 597, 275,
	276, 673, 277, 0, 281, 282, 283, 284, 0, 286,
	371, 285, 287, 288, 713, 289, 278, 279, 290, 598,
	291, 751, 373, 292, 0, 299, 293, 294, 280, 295,
	298, 752, 296, 297, 721, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 753, 754, 0,
	0, 308, 309, 722, 723, 694, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 714, 318, 0, 381,
	319, 320, 321, 382, 755, 0, 0, 322, 0, 0,
	0, 0, 323, 324, 325, 326, 327, 668, 0, 0,
	0, 0, 0, 666, 0, 0, 0, 0, 664, 665,
	699, 688, 689, 686, 687, 678, 0, 674, 0, 0,
	0, 0, 0, 677, 0, 0, 173, 174, 0, 175,
	0, 0, 0, 0, 716, 681, 0, 0, 0, 176,
	177, 178, 329, 731, 331, 732, 179, 733, 734, 0,
	180, 335, 336, 181, 182, 684, 715, 735, 736, 339,
	0, 183, 727, 0, 707, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 0, 586, 191, 192, 2420,
	0, 708, 709, 711, 0, 710, 712, 194, 195, 391,
	196, 737, 197, 738, 739, 0, 198, 0, 199, 0,
	200, 0, 0, 730, 202, 0, 203, 0, 0, 0,
	672, 204, 205, 206, 717, 718, 695, 0, 0, 207,
	208, 740, 741, 742, 0, 209, 0, 210, 0, 0,
	587, 0, 211, 728, 0, 351, 0, 0, 212, 213,
	214, 215, 724, 726, 589, 0, 219, 0, 216, 0,
	588, 217, 743, 218, 744, 745, 746, 747, 748, 0,
	706, 0, 590, 220, 221, 222, 591, 223, 224, 225,
	0, 227, 226, 0, 729, 592, 228, 593, 0, 229,
	0, 0, 230, 0, 231, 232, 233, 235, 362, 234,
	594, 236, 237, 239, 238, 667, 0, 696, 725, 240,
	749, 241, 242, 0, 243, 0, 0, 244, 0, 0,
	245, 365, 595, 246, 596, 719, 247, 248, 249, 250,
	251, 0, 252, 720, 253, 368, 254, 0, 255, 256,
	257, 258, 259, 750, 260, 261, 0, 262, 263, 264,
	265, 266, 268, 269, 267, 270, 271, 272, 273, 0,
	274, 597, 275, 276, 673, 277, 0, 281, 282, 283,
	284, 0, 286, 371, 285, 287, 288, 713, 289, 278,
	279, 290, 598, 291, 751, 373, 292, 0, 299, 293,
	294, 280, 295, 298, 752, 296, 297, 721, 0, 300,
	0, 301, 302, 303, 304, 305, 306, 307, 0, 376,
	753, 754, 0, 0, 308, 309, 722, 723, 694, 310,
	311, 2419, 313, 0, 0, 314, 315, 316, 317, 714,
	318, 0, 381, 319, 320, 321, 382, 755, 0, 0,
	322, 0, 0, 0, 0, 323, 324, 325, 326, 327,
	668, 0, 0, 0, 0, 0, 666, 0, 0, 0,
	0, 664, 665, 699, 688, 689, 686, 687, 678, 0,
	674, 0, 0, 0, 0, 0, 677, 0, 0, 173,
	174, 0, 175, 0, 0, 0, 0, 716, 681, 0,
	0, 0, 176, 177, 178, 2418, 731, 331, 732, 179,
	733, 734, 0, 180, 335, 336, 181, 182, 684, 715,
	735, 736, 339, 0, 183, 727, 0, 707, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 0, 586,
	191, 192, 2420, 0, 708, 709, 711, 0, 710, 712,
	194, 195, 391, 196, 737, 197, 738, 739, 0, 198,
	0, 199, 0, 200, 0, 0, 730, 202, 0, 203,
	0, 0, 0, 672, 204, 205, 206, 717, 718, 695,
	0, 0, 207, 208, 740, 741, 742, 0, 209, 0,
	210, 0, 0, 587, 0, 211, 728, 0, 351, 0,
	0, 212, 213, 214, 215, 724, 726, 589, 0, 219,
	0, 216, 0, 588, 217, 743, 218, 744, 745, 746,
	747, 748, 0, 706, 0, 590, 220, 221, 222, 591,
	223, 224, 225, 0, 227, 226, 0, 729, 592, 228,
	593, 0, 229, 0, 0, 230, 0, 231, 232, 233,
	235, 362, 234, 594, 236, 237, 239, 238, 667, 0,
	696, 725, 240, 749, 241, 242, 0, 243, 0, 0,
	244, 0, 0, 245, 365, 595, 246, 596, 719, 247,
	248, 249, 250, 251, 0, 252, 720, 253, 368, 254,
	0, 255, 256, 257, 258, 259, 750, 260, 261, 0,
	262, 263, 264, 265, 266, 268, 269, 267, 270, 271,
	272, 273, 0, 274, 597, 275, 276, 673, 277, 0,
	281, 282, 283, 284, 0, 286, 371, 285, 287, 288,
	713, 289, 278, 279, 290, 598, 291, 751, 373, 292,
	0, 299, 293, 294, 280, 295, 298, 752, 296, 297,
	721, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 753, 754, 0, 0, 308, 309, 722,
	723, 694, 310, 311, 2419, 313, 0, 0, 314, 315,
	316, 317, 714, 318, 0, 381, 319, 320, 321, 382,
	755, 0, 0, 322, 0, 0, 0, 0, 323, 324,
	325, 326, 327, 668, 0, 0, 0, 0, 0, 666,
	0, 0, 0, 0, 664, 665, 699, 688, 689, 686,
	687, 678, 0, 674, 0, 0, 0, 0, 0, 677,
	0, 0, 173, 174, 0, 175, 0, 0, 0, 0,
	716, 681, 0, 0, 0, 176, 177, 178, 329, 731,
	331, 732, 179, 733, 734, 0, 180, 335, 336, 181,
	182, 684, 715, 735, 736, 339, 0, 183, 727, 0,
	707, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 0, 586, 191, 192, 193, 0, 708, 709, 711,
	0, 710, 712, 194, 195, 391, 196, 737, 197, 738,
	739, 0, 198, 0, 199, 0, 200, 0, 0, 730,
	202, 0, 203, 0, 0, 0, 672, 204, 205, 206,
	717, 718, 695, 0, 0, 207, 208, 740, 741, 742,
	0, 209, 0, 210, 0, 0, 587, 0, 211, 728,
	0, 351, 0, 0, 212, 213, 214, 215, 724, 726,
	589, 0, 219, 0, 216, 0, 588, 217, 743, 218,
	744, 745, 746, 747, 748, 0, 706, 0, 590, 220,
	221, 222, 591, 223, 224, 225, 0, 227, 226, 0,
	729, 592, 228, 593, 0, 229, 0, 0, 230, 0,
	231, 232, 233, 235, 362, 234, 594, 236, 237, 239,
	238, 667, 0, 696, 725, 240, 749, 241, 242, 0,
	243, 0, 0, 244, 0, 0, 245, 365, 595, 246,
	596, 719, 247, 248, 249, 250, 251, 0, 252, 720,
	253, 368, 254, 0, 255, 256, 257, 258, 259, 750,
	260, 261, 0, 262, 263, 264, 265, 266, 268, 269,
	267, 270, 271, 272, 273, 0, 274, 597, 275, 276,
	673, 277, 0, 281, 282, 283, 284, 0, 286, 371,
	285, 287, 288, 713, 289, 278, 279, 290, 598, 291,
	751, 373, 292, 0, 299, 293, 294, 280, 295, 298,
	752, 296, 297, 721, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 753, 754, 0, 0,
	308, 309, 722, 723, 694, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 714, 318, 0, 381, 319,
	320, 321, 382, 755, 0, 0, 322, 0, 0, 0,
	0, 323, 324, 325, 326, 327, 668, 0, 0, 0,
	0, 0, 666, 0, 0, 0, 0, 664, 665, 699,
	688, 689, 686, 687, 678, 0, 674, 0, 0, 0,
	0, 0, 677, 0, 0, 173, 174, 0, 175, 0,
	0, 0, 0, 716, 681, 0, 0, 0, 176, 177,
	178, 329, 731, 331, 732, 179, 733, 734, 0, 180,
	335, 336, 181, 182, 684, 715, 735, 736, 339, 0,
	183, 727, 0, 707, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 0, 586, 191, 192, 193, 0,
	708, 709, 711, 0, 710, 712, 194, 195, 391, 196,
	737, 197, 738, 739, 0, 198, 0, 199, 0, 200,
	0, 0, 730, 202, 0, 203, 0, 0, 0, 672,
	204, 205, 206, 717, 718, 695, 0, 0, 207, 208,
	740, 741, 742, 0, 209, 0, 210, 0, 0, 587,
	0, 211, 728, 0, 351, 0, 0, 212, 213, 214,
	215, 724, 726, 589, 0, 219, 0, 216, 0, 588,
	217, 743, 218, 744, 745, 746, 747, 748, 0, 706,
	0, 590, 220, 221, 222, 591, 223, 224, 225, 0,
	227, 226, 0, 729, 592, 228, 593, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 594,
	236, 237, 239, 238, 0, 0, 696, 725, 240, 749,
	241, 242, 0, 243, 0, 0, 244, 0, 0, 245,
	365, 595, 246, 596, 719, 247, 248, 249, 250, 251,
	0, 252, 720, 253, 368, 254, 0, 255, 256, 257,
	258, 259, 750, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	597, 275, 276, 1562, 277, 0, 281, 282, 283, 284,
	0, 286, 371, 285, 287, 288, 713, 289, 278, 279,
	290, 598, 291, 751, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 752, 296, 297, 721, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 753,
	754, 0, 0, 308, 309, 722, 723, 694, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 714, 318,
	0, 381, 319, 320, 321, 382, 755, 0, 0, 322,
	0, 0, 0, 0, 323, 324, 325, 326, 327, 699,
	688, 689, 686, 687, 678, 1560, 0, 0, 0, 0,
	1558, 1559, 0, 0, 0, 173, 174, 0, 175, 1561,
	0, 0, 0, 716, 681, 677, 0, 0, 176, 177,
	178, 329, 731, 331, 732, 179, 733, 734, 0, 180,
	335, 336, 181, 182, 0, 715, 735, 736, 339, 0,
	183, 727, 0, 707, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 0, 586, 191, 192, 193, 0,
	708, 709, 711, 0, 710, 712, 194, 195, 391, 196,
	737, 197, 738, 739, 0, 198, 0, 199, 0, 200,
	0, 0, 730, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 717, 718, 695, 0, 0, 207, 208,
	740, 741, 742, 0, 209, 0, 210, 0, 0, 587,
	0, 211, 728, 0, 351, 0, 0, 212, 213, 214,
	215, 724, 726, 589, 0, 219, 0, 216, 0, 588,
	217, 743, 218, 744, 745, 746, 747, 748, 0, 706,
	0, 590, 220, 221, 222, 591, 223, 224, 225, 0,
	227, 226, 0, 729, 592, 228, 593, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 594,
	236, 237, 239, 238, 0, 0, 696, 725, 240, 749,
	241, 242, 0, 243, 0, 0, 244, 0, 0, 245,
	365, 595, 246, 596, 719, 247, 248, 249, 250, 251,
	0, 252, 720, 253, 368, 254, 0, 255, 256, 257,
	258, 259, 750, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	597, 275, 276, 1562, 277, 0, 281, 282, 283, 284,
	0, 286, 371, 285, 287, 288, 713, 289, 278, 279,
	290, 598, 291, 751, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 752, 296, 297, 721, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 753,
	754, 0, 0, 308, 309, 722, 723, 694, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 714, 318,
	0, 381, 319, 320, 321, 382, 755, 0, 0, 322,
	0, 0, 0, 0, 323, 324, 325, 326, 327, 699,
	688, 689, 686, 687, 678, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 174, 0, 175, 1561,
	0, 0, 0, 716, 681, 677, 0, 0, 176, 177,
	178, 0, 731, 331, 732, 179, 733, 734, 0, 180,
	335, 336, 181, 182, 684, 715, 735, 736, 339, 0,
	183, 727, 0, 707, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 0, 586, 191, 192, 2420, 0,
	708, 709, 711, 0, 710, 712, 194, 195, 391, 196,
	737, 197, 738, 739, 0, 198, 0, 199, 0, 200,
	0, 0, 730, 202, 0, 203, 0, 0, 0, 672,
	204, 205, 206, 717, 718, 695, 0, 0, 207, 208,
	740, 741, 742, 0, 209, 0, 210, 0, 0, 587,
	0, 211, 728, 0, 351, 0, 0, 212, 213, 214,
	215, 724, 726, 0, 0, 219, 0, 216, 0, 588,
	217, 743, 218, 744, 745, 746, 747, 748, 0, 706,
	0, 0, 220, 221, 222, 591, 223, 224, 225, 0,
	227, 226, 0, 729, 592, 228, 0, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 594,
	236, 237, 239, 238, 667, 0, 696, 725, 240, 749,
	241, 242, 0, 243, 0, 0, 244, 0, 0, 245,
	365, 595, 246, 596, 719, 247, 248, 249, 250, 251,
	0, 252, 720, 253, 368, 254, 0, 255, 256, 257,
	258, 259, 750, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	597, 275, 276, 673, 277, 0, 281, 282, 283, 284,
	0, 286, 371, 285, 287, 288, 713, 289, 278, 279,
	290, 0, 291, 751, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 752, 296, 297, 721, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 753,
	754, 0, 0, 308, 309, 722, 723, 694, 310, 311,
	2419, 313, 0, 0, 314, 315, 316, 317, 714, 318,
	0, 381, 319, 320, 321, 382, 755, 0, 0, 322,
	0, 0, 0, 0, 323, 324, 325, 326, 327, 699,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	664, 665, 0, 0, 0, 173, 174, 0, 175, 674,
	0, 0, 0, 716, 0, 677, 0, 0, 176, 177,
	178, 329, 330, 331, 332, 179, 333, 334, 0, 180,
	335, 336, 181, 182, 0, 715, 337, 338, 339, 0,
	183, 727, 0, 707, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 0, 586, 191, 192, 193, 0,
	708, 709, 711, 0, 710, 712, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 717, 718, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 587,
	0, 211, 728, 0, 351, 0, 0, 212, 213, 214,
	215, 724, 726, 589, 0, 219, 0, 216, 0, 588,
	217, 354, 218, 355, 356, 357, 358, 359, 0, 360,
	0, 590, 220, 221, 222, 591, 223, 224, 225, 0,
	227, 226, 0, 729, 592, 228, 593, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 594,
	236, 237, 239, 238, 0, 0, 0, 725, 240, 364,
	241, 242, 0, 243, 0, 0, 244, 0, 0, 245,
	365, 595, 246, 596, 719, 247, 248, 249, 250, 251,
	0, 252, 720, 253, 368, 254, 0, 255, 256, 257,
	258, 259, 369, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	597, 275, 276, 370, 277, 0, 281, 282, 283, 284,
	0, 286, 371, 285, 287, 288, 713, 289, 278, 279,
	290, 598, 291, 372, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 374, 296, 297, 721, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 377,
	378, 0, 0, 308, 309, 722, 723, 0, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 714, 318,
	0, 381, 319, 320, 321, 382, 383, 0, 0, 322,
	812, 0, 581, 0, 323, 324, 325, 326, 327, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 174,
	0, 175, 0, 0, 0, 0, 328, 0, 0, 1963,
	0, 176, 177, 178, 329, 330, 331, 332, 179, 333,
	334, 0, 180, 335, 336, 181, 182, 0, 0, 337,
	338, 339, 0, 183, 340, 0, 585, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 0, 586, 191,
	192, 193, 0, 0, 0, 0, 0, 0, 0, 194,
	195, 391, 196, 341, 197, 342, 343, 0, 198, 0,
	199, 0, 200, 0, 0, 201, 202, 0, 203, 0,
	0, 0, 344, 204, 205, 206, 345, 346, 0, 0,
	0, 207, 208, 347, 348, 349, 0, 209, 0, 210,
	0, 0, 587, 0, 211, 350, 0, 351, 0, 0,
	212, 213, 214, 215, 352, 353, 589, 0, 219, 0,
	216, 0, 588, 217, 354, 218, 355, 356, 357, 358,
	359, 0, 360, 0, 590, 220, 221, 222, 591, 223,
	224, 225, 0, 227, 226, 0, 361, 592, 228, 593,
	0, 229, 0, 0, 230, 0, 231, 232, 233, 235,
	362, 234, 594, 236, 237, 239, 238, 0, 0, 0,
	363, 240, 364, 241, 242, 0, 243, 0, 0, 244,
	0, 0, 245, 365, 595, 246, 596, 366, 247, 248,
	249, 250, 251, 0, 252, 367, 253, 368, 254, 0,
	255, 256, 257, 258, 259, 369, 260, 261, 0, 262,
	263, 264, 265, 266, 268, 269, 267, 270, 271, 272,
	273, 0, 274, 597, 275, 276, 370, 277, 0, 281,
	282, 283, 284, 129, 286, 371, 285, 287, 288, 0,
	289, 278, 279, 290, 598, 291, 372, 373, 292, 0,
	299, 293, 294, 280, 295, 298, 374, 296, 297, 375,
	0, 300, 131, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 377, 378, 0, 0, 308, 309, 379, 380,
	0, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 0, 318, 0, 381, 319, 320, 321, 815, 383,
	0, 0, 322, 0, 0, 0, 123, 323, 324, 325,
	326, 327, 0, 124, 581, 578, 0, 579, 574, 569,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	173, 174, 116, 175, 0, 0, 0, 0, 328, 0,
	0, 0, 0, 176, 177, 178, 329, 330, 331, 332,
	179, 333, 334, 0, 180, 335, 336, 181, 182, 0,
	0, 337, 338, 339, 0, 183, 340, 0, 585, 0,
	184, 185, 186, 0, 187, 0, 188, 189, 190, 0,
	586, 191, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 194, 195, 391, 196, 341, 197, 342, 343, 1307,
	198, 0, 199, 0, 200, 0, 0, 201, 202, 0,
	203, 0, 0, 0, 344, 204, 205, 206, 345, 346,
	571, 0, 0, 207, 208, 347, 348, 349, 0, 209,
	0, 210, 0, 0, 587, 0, 211, 350, 0, 351,
	0, 0, 212, 213, 214, 215, 352, 353, 589, 0,
	219, 0, 216, 0, 588, 217, 354, 218, 355, 356,
	357, 358, 359, 0, 360, 0, 590, 220, 221, 222,
	591, 223, 224, 225, 0, 227, 226, 0, 361, 592,
	228, 593, 0, 229, 0, 0, 230, 0, 231, 232,
	233, 235, 362, 234, 594, 236, 237, 239, 238, 0,
	0, 0, 363, 240, 364, 241, 242, 0, 243, 572,
	0, 244, 0, 0, 245, 365, 595, 246, 596, 366,
	247, 248, 249, 250, 251, 0, 252, 367, 253, 368,
	254, 0, 255, 256, 257, 258, 259, 369, 260, 261,
	0, 262, 263, 264, 265, 266, 268, 269, 267, 270,
	271, 272, 273, 0, 274, 597, 275, 276, 370, 277,
	0, 281, 282, 283, 284, 0, 286, 371, 285, 287,
	288, 0, 289, 278, 279, 290, 598, 291, 372, 373,
	292, 0, 299, 293, 294, 280, 295, 298, 374, 296,
	297, 375, 0, 300, 0, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 377, 378, 0, 0, 308, 309,
	379, 380, 570, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 318, 0, 381, 319, 320, 321,
	382, 383, 0, 0, 322, 0, 0, 0, 0, 323,
	324, 325, 326, 327, 581, 578, 0, 579, 574, 569,
	0, 0, 0, 0, 0, 580, 575, 0, 0, 0,
	173, 174, 0, 175, 0, 0, 0, 0, 328, 0,
	0, 0, 0, 176, 177, 178, 329, 330, 331, 332,
	179, 333, 334, 0, 180, 335, 336, 181, 182, 0,
	0, 337, 338, 339, 0, 183, 340, 0, 585, 0,
	184, 185, 186, 0, 187, 0, 188, 189, 190, 0,
	586, 191, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 194, 195, 391, 196, 341, 197, 342, 343, 1304,
	198, 0, 199, 0, 200, 0, 0, 201, 202, 0,
	203, 0, 0, 0, 344, 204, 205, 206, 345, 346,
	571, 0, 0, 207, 208, 347, 348, 349, 0, 209,
	0, 210, 0, 0, 587, 0, 211, 350, 0, 351,
	0, 0, 212, 213, 214, 215, 352, 353, 589, 0,
	219, 0, 216, 0, 588, 217, 354, 218, 355, 356,
	357, 358, 359, 0, 360, 0, 590, 220, 221, 222,
	591, 223, 224, 225, 0, 227, 226, 0, 361, 592,
	228, 593, 0, 229, 0, 0, 230, 0, 231, 232,
	233, 235, 362, 234, 594, 236, 237, 239, 238, 0,
	0, 0, 363, 240, 364, 241, 242, 0, 243, 572,
	0, 244, 0, 0, 245, 365, 595, 246, 596, 366,
	247, 248, 249, 250, 251, 0, 252, 367, 253, 368,
	254, 0, 255, 256, 257, 258, 259, 369, 260, 261,
	0, 262, 263, 264, 265, 266, 268, 269, 267, 270,
	271, 272, 273, 0, 274, 597, 275, 276, 370, 277,
	0, 281, 282, 283, 284, 0, 286, 371, 285, 287,
	288, 0, 289, 278, 279, 290, 598, 291, 372, 373,
	292, 0, 299, 293, 294, 280, 295, 298, 374, 296,
	297, 375, 0, 300, 0, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 377, 378, 0, 0, 308, 309,
	379, 380, 570, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 318, 0, 381, 319, 320, 321,
	382, 383, 0, 0, 322, 0, 0, 0, 0, 323,
	324, 325, 326, 327, 581, 578, 0, 579, 574, 569,
	0, 0, 0, 0, 0, 580, 575, 0, 0, 0,
	173, 174, 0, 175, 0, 0, 0, 0, 328, 0,
	0, 0, 0, 176, 177, 178, 329, 330, 331, 332,
	179, 333, 334, 0, 180, 335, 336, 181, 182, 0,
	0, 337, 338, 339, 0, 183, 340, 0, 585, 0,
	184, 185, 186, 0, 187, 0, 188, 189, 190, 0,
	586, 191, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 194, 195, 391, 196, 341, 197, 342, 343, 856,
	198, 0, 199, 0, 200, 0, 0, 201, 202, 0,
	203, 0, 0, 0, 344, 204, 205, 206, 345, 346,
	571, 0, 0, 207, 208, 347, 348, 349, 0, 209,
	0, 210, 0, 0, 587, 0, 211, 350, 0, 351,
	0, 0, 212, 213, 214, 215, 352, 353, 589, 0,
	219, 0, 216, 0, 588, 217, 354, 218, 355, 356,
	357, 358, 359, 0, 360, 0, 590, 220, 221, 222,
	591, 223, 224, 225, 0, 227, 226, 0, 361, 592,
	228, 593, 0, 229, 0, 0, 230, 0, 231, 232,
	233, 235, 362, 234, 594, 236, 237, 239, 238, 0,
	0, 0, 363, 240, 364, 241, 242, 0, 243, 572,
	0, 244, 0, 0, 245, 365, 595, 246, 596, 366,
	247, 248, 249, 250, 251, 0, 252, 367, 253, 368,
	254, 0, 255, 256, 257, 258, 259, 369, 260, 261,
	0, 262, 263, 264, 265, 266, 268, 269, 267, 270,
	271, 272, 273, 0, 274, 597, 275, 276, 370, 277,
	0, 281, 282, 283, 284, 0, 286, 371, 285, 287,
	288, 0, 289, 278, 279, 290, 598, 291, 372, 373,
	292, 0, 299, 293, 294, 280, 295, 298, 374, 296,
	297, 375, 0, 300, 0, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 377, 378, 0, 0, 308, 309,
	379, 380, 570, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 318, 0, 381, 319, 320, 321,
	382, 383, 0, 0, 322, 0, 0, 0, 0, 323,
	324, 325, 326, 327, 566, 0, 581, 578, 0, 579,
	574, 569, 0, 0, 0, 580, 575, 0, 0, 0,
	0, 0, 173, 174, 0, 175, 0, 0, 0, 0,
	328, 0, 0, 0, 0, 176, 177, 178, 329, 330,
	331, 332, 179, 333, 334, 0, 180, 335, 336, 181,
	182, 0, 0, 337, 338, 339, 0, 183, 340, 0,
	585, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 0, 586, 191, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 194, 195, 391, 196, 341, 197, 342,
	343, 0, 198, 0, 199, 0, 200, 0, 0, 201,
	202, 0, 203, 0, 0, 0, 344, 204, 205, 206,
	345, 346, 571, 0, 0, 207, 208, 347, 348, 349,
	0, 209, 0, 210, 0, 0, 587, 0, 211, 350,
	0, 351, 0, 0, 212, 213, 214, 215, 352, 353,
	589, 0, 219, 0, 216, 0, 588, 217, 354, 218,
	355, 356, 357, 358, 359, 0, 360, 0, 590, 220,
	221, 222, 591, 223, 224, 225, 0, 227, 226, 0,
	361, 592, 228, 593, 0, 229, 0, 0, 230, 0,
	231, 232, 233, 235, 362, 234, 594, 236, 237, 239,
	238, 0, 0, 0, 363, 240, 364, 241, 242, 0,
	243, 572, 0, 244, 0, 0, 245, 365, 595, 246,
	596, 366, 247, 248, 249, 250, 251, 0, 252, 367,
	253, 368, 254, 0, 255, 256, 257, 258, 259, 369,
	260, 261, 0, 262, 263, 264, 265, 266, 268, 269,
	267, 270, 271, 272, 273, 0, 274, 597, 275, 276,
	370, 277, 0, 281, 282, 283, 284, 0, 286, 371,
	285, 287, 288, 0, 289, 278, 279, 290, 598, 291,
	372, 373, 292, 0, 299, 293, 294, 280, 295, 298,
	374, 296, 297, 375, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 377, 378, 0, 0,
	308, 309, 379, 380, 570, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 0, 318, 0, 381, 319,
	320, 321, 382, 383, 0, 0, 322, 0, 0, 0,
	0, 323, 324, 325, 326, 327, 581, 578, 0, 579,
	574, 569, 0, 0, 0, 0, 0, 580, 575, 0,
	0, 0, 173, 174, 0, 175, 0, 0, 0, 0,
	328, 0, 0, 0, 0, 176, 177, 178, 329, 330,
	331, 332, 179, 333, 334, 0, 180, 335, 336, 181,
	182, 0, 0, 337, 338, 339, 0, 183, 340, 0,
	585, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 0, 586, 191, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 194, 195, 391, 196, 341, 197, 342,
	343, 0, 198, 0, 199, 0, 200, 0, 0, 201,
	202, 0, 203, 0, 0, 0, 344, 204, 205, 206,
	345, 346, 571, 0, 0, 207, 208, 347, 348, 349,
	0, 209, 0, 210, 0, 0, 587, 0, 211, 350,
	0, 351, 0, 0, 212, 213, 214, 215, 352, 353,
	589, 0, 219, 0, 216, 0, 588, 217, 354, 218,
	355, 356, 357, 358, 359, 0, 360, 0, 590, 220,
	221, 222, 591, 223, 224, 225, 0, 227, 226, 0,
	361, 592, 228, 593, 0, 229, 0, 0, 230, 0,
	231, 232, 233, 235, 362, 234, 594, 236, 237, 239,
	238, 0, 0, 0, 363, 240, 364, 241, 242, 0,
	243, 572, 0, 244, 0, 0, 245, 365, 595, 246,
	596, 366, 247, 248, 249, 250, 251, 0, 252, 367,
	253, 368, 254, 0, 255, 256, 257, 258, 259, 369,
	260, 261, 0, 262, 263, 264, 265, 266, 268, 269,
	267, 270, 271, 272, 273, 0, 274, 597, 275, 276,
	370, 277, 0, 281, 282, 283, 284, 0, 286, 371,
	285, 287, 288, 0, 289, 278, 279, 290, 598, 291,
	372, 373, 292, 0, 299, 293, 294, 280, 295, 298,
	374, 296, 297, 375, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 377, 378, 0, 0,
	308, 309, 379, 380, 570, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 0, 318, 0, 381, 319,
	320, 321, 382, 383, 0, 563, 322, 170, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 0, 0, 0,
	0, 0, 0, 173, 174, 0, 175, 580, 575, 0,
	0, 328, 0, 0, 0, 0, 176, 177, 178, 329,
	330, 331, 332, 179, 333, 334, 0, 180, 335, 336,
	181, 182, 0, 0, 337, 338, 339, 0, 183, 340,
	0, 0, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 0, 0, 191, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 0, 0, 0, 0, 211,
	350, 0, 351, 0, 0, 212, 213, 214, 215, 352,
	353, 0, 0, 219, 0, 216, 0, 0, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 0,
	220, 221, 222, 0, 223, 224, 225, 0, 227, 226,
	0, 361, 0, 228, 0, 0, 229, 0, 0, 230,
	0, 231, 232, 233, 235, 362, 234, 0, 236, 237,
	239, 238, 0, 0, 0, 363, 240, 364, 241, 242,
	0, 243, 0, 637, 244, 0, 0, 245, 365, 0,
	246, 0, 366, 247, 248, 249, 250, 251, 0, 252,
	367, 253, 368, 254, 0, 255, 256, 257, 258, 259,
	369, 260, 261, 0, 262, 263, 264, 265, 266, 268,
	269, 267, 270, 271, 272, 273, 0, 274, 0, 275,
	276, 370, 277, 0, 281, 282, 283, 284, 129, 286,
	371, 285, 287, 288, 0, 289, 278, 279, 290, 0,
	291, 372, 373, 292, 0, 299, 293, 294, 280, 295,
	298, 374, 296, 297, 375, 0, 300, 131, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 377, 378, 0,
	0, 308, 309, 379, 380, 0, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 815, 383, 0, 0, 322, 0, 170,
	0, 123, 323, 324, 325, 326, 327, 0, 124, 0,
	0, 0, 0, 0, 0, 173, 174, 0, 175, 0,
	0, 0, 0, 328, 0, 631, 0, 964, 176, 177,
	178, 329, 330, 331, 332, 179, 333, 334, 0, 180,
	335, 336, 181, 182, 0, 0, 337, 338, 339, 0,
	183, 340, 0, 0, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 0, 0, 191, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 0, 212, 213, 214,
	215, 352, 353, 0, 0, 219, 0, 216, 0, 0,
	217, 354, 218, 355, 356, 357, 358, 359, 0, 360,
	0, 0, 220, 221, 222, 0, 223, 224, 225, 0,
	227, 226, 0, 361, 0, 228, 0, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 0,
	236, 237, 239, 238, 0, 0, 0, 363, 240, 364,
	241, 242, 0, 243, 0, 637, 244, 0, 0, 245,
	365, 0, 246, 0, 366, 247, 248, 249, 250, 251,
	0, 252, 367, 253, 368, 254, 0, 255, 256, 257,
	258, 259, 369, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	0, 275, 276, 370, 277, 0, 281, 282, 283, 284,
	129, 286, 371, 285, 287, 288, 0, 289, 278, 279,
	290, 0, 291, 372, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 374, 296, 297, 375, 0, 300, 131,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 377,
	378, 0, 0, 308, 309, 379, 380, 0, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 318,
	0, 381, 319, 320, 321, 815, 383, 0, 0, 322,
	563, 0, 170, 123, 323, 324, 325, 326, 327, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 173, 174,
	0, 175, 0, 0, 0, 0, 328, 631, 0, 964,
	0, 176, 177, 178, 329, 330, 331, 332, 179, 333,
	334, 0, 180, 335, 336, 181, 182, 0, 0, 337,
	338, 339, 0, 183, 340, 0, 0, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 0, 0, 191,
	192, 193, 0, 0, 0, 0, 0, 0, 0, 194,
	195, 391, 196, 341, 197, 342, 343, 0, 198, 0,
	199, 0, 200, 0, 0, 201, 202, 0, 203, 0,
	0, 0, 344, 204, 205, 206, 345, 346, 0, 0,
	0, 207, 208, 347, 348, 349, 0, 209, 0, 210,
	0, 0, 0, 0, 211, 350, 0, 351, 0, 0,
	212, 213, 214, 215, 352, 353, 0, 0, 219, 0,
	216, 0, 0, 217, 354, 218, 355, 356, 357, 358,
	359, 0, 360, 0, 0, 220, 221, 222, 0, 223,
	224, 225, 0, 227, 226, 0, 361, 0, 228, 0,
	0, 229, 0, 0, 230, 0, 231, 232, 233, 235,
	362, 234, 0, 236, 237, 239, 238, 0, 0, 0,
	363, 240, 364, 241, 242, 0, 243, 0, 0, 244,
	0, 0, 245, 365, 0, 246, 0, 366, 247, 248,
	249, 250, 251, 0, 252, 367, 253, 368, 254, 0,
	255, 256, 257, 258, 259, 369, 260, 261, 0, 262,
	263, 264, 265, 266, 268, 269, 267, 270, 271, 272,
	273, 0, 274, 0, 275, 276, 370, 277, 0, 281,
	282, 283, 284, 129, 286, 371, 285, 287, 288, 0,
	289, 278, 279, 290, 0, 291, 372, 373, 292, 0,
	299, 293, 294, 280, 295, 298, 374, 296, 297, 375,
	0, 300, 131, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 377, 378, 0, 0, 308, 309, 379, 380,
	0, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 0, 318, 0, 381, 319, 320, 321, 815, 383,
	0, 0, 322, 1689, 0, 170, 123, 323, 324, 325,
	326, 327, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 173, 174, 0, 175, 0, 0, 0, 0, 328,
	0, 0, 116, 0, 176, 177, 178, 329, 330, 331,
	332, 179, 333, 334, 0, 180, 335, 336, 181, 182,
	0, 0, 337, 338, 339, 0, 183, 340, 0, 0,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	0, 0, 191, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 391, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 0, 0, 211, 350, 0,
	351, 0, 0, 212, 213, 214, 215, 352, 353, 0,
	0, 219, 0, 216, 0, 0, 217, 354, 218, 355,
	356, 357, 358, 359, 0, 360, 0, 0, 220, 221,
	222, 0, 223, 224, 225, 0, 227, 226, 0, 361,
	0, 228, 0, 0, 229, 0, 0, 230, 0, 231,
	232, 233, 235, 362, 234, 0, 236, 237, 239, 238,
	0, 0, 0, 363, 240, 364, 241, 242, 0, 243,
	0, 637, 244, 0, 0, 245, 365, 0, 246, 0,
	366, 247, 248, 249, 250, 251, 0, 252, 367, 253,
	368, 254, 0, 255, 256, 257, 258, 259, 369, 260,
	261, 0, 262, 263, 264, 265, 266, 268, 269, 267,
	270, 271, 272, 273, 0, 274, 0, 275, 276, 370,
	277, 0, 281, 282, 283, 284, 0, 286, 371, 285,
	287, 288, 0, 289, 278, 279, 290, 0, 291, 372,
	373, 292, 0, 299, 293, 294, 280, 295, 298, 374,
	296, 297, 375, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 377, 378, 0, 0, 308,
	309, 379, 380, 0, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 318, 0, 381, 319, 320,
	321, 382, 383, 0, 0, 322, 630, 0, 170, 0,
	323, 324, 325, 326, 327, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 173, 174, 0, 175, 0, 0,
	0, 0, 328, 631, 0, 636, 0, 176, 177, 178,
	329, 330, 331, 332, 179, 333, 334, 0, 180, 335,
	336, 181, 182, 0, 0, 337, 338, 339, 0, 183,
	340, 0, 0, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 0, 0, 191, 192, 193, 0, 0,
	0, 0, 0, 0, 0, 194, 195, 391, 196, 341,
	197, 342, 343, 0, 198, 0, 199, 0, 200, 0,
	0, 201, 202, 0, 203, 0, 0, 0, 344, 204,
	205, 206, 345, 346, 0, 0, 0, 207, 208, 347,
	348, 349, 0, 209, 0, 210, 0, 0, 0, 0,
	211, 350, 0, 351, 0, 0, 212, 213, 214, 215,
	352, 353, 0, 0, 219, 0, 216, 0, 0, 217,
	354, 218, 355, 356, 357, 358, 359, 0, 360, 0,
	0, 220, 221, 222, 0, 223, 224, 225, 0, 227,
	226, 0, 361, 0, 228, 0, 0, 229, 0, 0,
	230, 0, 231, 232, 233, 235, 362, 234, 0, 236,
	237, 239, 238, 0, 0, 0, 363, 240, 364, 241,
	242, 0, 243, 0, 637, 244, 0, 0, 245, 365,
	0, 246, 0, 366, 247, 248, 249, 250, 251, 0,
	252, 367, 253, 368, 254, 0, 255, 256, 257, 258,
	259, 369, 260, 261, 0, 262, 263, 264, 265, 266,
	268, 269, 267, 270, 271, 272, 273, 0, 274, 0,
	275, 276, 370, 277, 0, 281, 282, 283, 284, 0,
	286, 371, 285, 287, 288, 0, 289, 278, 279, 290,
	0, 291, 372, 373, 292, 0, 299, 293, 294, 280,
	295, 298, 374, 296, 297, 375, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 377, 378,
	0, 0, 308, 309, 379, 380, 0, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 0, 318, 0,
	381, 319, 320, 321, 382, 383, 0, 0, 322, 0,
	170, 0, 0, 323, 324, 325, 326, 327, 0, 0,
	0, 0, 0, 0, 0, 0, 173, 174, 0, 175,
	0, 0, 0, 0, 328, 0, 631, 0, 636, 176,
	177, 178, 329, 330, 331, 332, 179, 333, 334, 0,
	180, 335, 336, 181, 182, 0, 0, 337, 338, 339,
	0, 183, 340, 0, 0, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 0, 0, 191, 192, 193,
	0, 0, 0, 0, 0, 0, 0, 194, 195, 391,
	196, 341, 197, 342, 343, 0, 198, 0, 199, 0,
	200, 0, 0, 201, 202, 0, 203, 0, 0, 0,
	344, 204, 205, 206, 345, 346, 0, 0, 0, 207,
	208, 347, 348, 349, 0, 209, 0, 210, 0, 0,
	0, 0, 211, 350, 0, 351, 0, 0, 212, 213,
	214, 215, 352, 353, 0, 0, 219, 0, 216, 0,
	0, 217, 354, 218, 355, 356, 357, 358, 359, 0,
	360, 0, 0, 220, 221, 222, 0, 223, 224, 225,
	0, 227, 226, 0, 361, 0, 228, 0, 0, 229,
	0, 0, 230, 0, 231, 232, 233, 235, 362, 234,
	0, 236, 237, 239, 238, 0, 0, 0, 363, 240,
	364, 241, 242, 0, 243, 0, 637, 244, 0, 0,
	245, 365, 0, 246, 0, 366, 247, 248, 249, 250,
	251, 0, 252, 367, 253, 368, 254, 0, 255, 256,
	257, 258, 259, 369, 260, 261, 0, 262, 263, 264,
	265, 266, 268, 269, 267, 270, 271, 272, 273, 0,
	274, 0, 275, 276, 370, 277, 0, 281, 282, 283,
	284, 0, 286, 371, 285, 287, 288, 0, 289, 278,
	279, 290, 0, 291, 372, 373, 292, 0, 299, 293,
	294, 280, 295, 298, 374, 296, 297, 375, 0, 300,
	0, 301, 302, 303, 304, 305, 306, 307, 0, 376,
	377, 378, 0, 0, 308, 309, 379, 380, 0, 310,
	311, 312, 313, 0, 0, 314, 315, 316, 317, 0,
	318, 0, 381, 319, 320, 321, 382, 383, 0, 0,
	322, 0, 170, 0, 0, 323, 324, 325, 326, 327,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 174,
	0, 175, 0, 0, 0, 0, 328, 0, 631, 0,
	636, 176, 177, 178, 329, 330, 331, 332, 179, 333,
	334, 0, 180, 335, 336, 181, 182, 0, 0, 337,
	338, 339, 0, 183, 340, 0, 0, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 0, 0, 191,
	192, 193, 0, 0, 0, 0, 0, 0, 0, 194,
	195, 391, 196, 341, 197, 342, 343, 0, 198, 0,
	199, 0, 200, 0, 0, 201, 202, 0, 203, 0,
	0, 0, 344, 204, 205, 206, 345, 346, 0, 0,
	0, 207, 208, 347, 348, 349, 0, 209, 0, 210,
	0, 0, 0, 0, 211, 350, 0, 351, 0, 0,
	212, 213, 214, 215, 352, 353, 0, 0, 219, 0,
	216, 0, 0, 217, 354, 218, 355, 356, 357, 358,
	359, 0, 360, 0, 0, 220, 221, 222, 0, 223,
	224, 225, 0, 227, 226, 0, 361, 0, 228, 0,
	0, 229, 0, 0, 230, 0, 231, 232, 233, 235,
	362, 234, 0, 236, 237, 239, 238, 0, 0, 0,
	363, 240, 364, 241, 242, 0, 243, 0, 0, 244,
	0, 0, 245, 365, 0, 246, 0, 366, 247, 248,
	249, 250, 251, 0, 252, 367, 253, 368, 254, 0,
	255, 256, 257, 258, 259, 369, 260, 261, 0, 262,
	263, 264, 265, 266, 268, 269, 267, 270, 271, 272,
	273, 0, 274, 0, 275, 276, 370, 277, 0, 281,
	282, 283, 284, 0, 286, 371, 285, 287, 288, 0,
	289, 278, 279, 290, 0, 291, 372, 373, 292, 0,
	299, 293, 294, 280, 295, 298, 374, 296, 297, 375,
	0, 300, 0, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 377, 378, 0, 0, 308, 309, 379, 380,
	0, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 0, 318, 0, 381, 319, 320, 321, 382, 383,
	0, 0, 322, 0, 0, 170, 0, 323, 324, 325,
	326, 327, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 173, 174, 0, 175, 0, 0, 0, 0, 328,
	0, 0, 0, 1181, 176, 177, 178, 329, 330, 331,
	332, 179, 333, 334, 0, 180, 335, 336, 181, 182,
	0, 0, 337, 338, 339, 0, 183, 340, 0, 0,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	0, 0, 191, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 391, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 0, 0, 211, 350, 0,
	351, 0, 0, 212, 213, 214, 215, 352, 353, 0,
	0, 219, 0, 216, 0, 0, 217, 354, 218, 355,
	356, 357, 358, 359, 0, 360, 0, 0, 220, 221,
	222, 0, 223, 224, 225, 0, 227, 226, 0, 361,
	0, 228, 0, 0, 229, 0, 0, 230, 0, 231,
	232, 233, 235, 362, 234, 0, 236, 237, 239, 238,
	0, 0, 0, 363, 240, 364, 241, 242, 0, 243,
	0, 0, 244, 0, 0, 245, 365, 0, 246, 0,
	366, 247, 248, 249, 250, 251, 0, 252, 367, 253,
	368, 254, 0, 255, 256, 257, 258, 259, 369, 260,
	261, 0, 262, 263, 264, 265, 266, 268, 269, 267,
	270, 271, 272, 273, 0, 274, 0, 275, 276, 370,
	277, 0, 281, 282, 283, 284, 0, 286, 371, 285,
	287, 288, 0, 289, 278, 279, 290, 0, 291, 372,
	373, 292, 0, 299, 293, 294, 280, 295, 298, 374,
	296, 297, 375, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 377, 378, 0, 0, 308,
	309, 379, 380, 0, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 318, 0, 381, 319, 320,
	321, 382, 383, 0, 0, 322, 0, 170, 0, 0,
	323, 324, 325, 326, 327, 0, 0, 0, 0, 0,
	0, 0, 0, 173, 174, 0, 175, 0, 0, 0,
	0, 328, 0, 0, 0, 1626, 176, 177, 178, 329,
	330, 331, 332, 179, 333, 334, 0, 180, 335, 336,
	181, 182, 0, 0, 337, 338, 339, 0, 183, 340,
	0, 0, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 0, 0, 191, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 0, 0, 0, 0, 211,
	350, 0, 351, 0, 0, 212, 213, 214, 215, 352,
	353, 0, 0, 219, 0, 216, 0, 0, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 0,
	220, 221, 222, 0, 223, 224, 225, 0, 227, 226,
	0, 361, 0, 228, 0, 0, 229, 0, 0, 230,
	0, 231, 232, 233, 235, 362, 234, 0, 236, 237,
	239, 238, 0, 0, 0, 363, 240, 364, 241, 242,
	0, 243, 0, 0, 244, 0, 0, 245, 365, 0,
	246, 0, 366, 247, 248, 249, 250, 251, 0, 252,
	367, 253, 368, 254, 0, 255, 256, 257, 258, 259,
	369, 260, 261, 0, 262, 263, 264, 265, 266, 268,
	269, 267, 270, 271, 272, 273, 0, 274, 0, 275,
	276, 370, 277, 0, 281, 282, 283, 284, 0, 286,
	371, 285, 287, 288, 0, 289, 278, 279, 290, 0,
	291, 372, 373, 292, 0, 299, 293, 294, 280, 295,
	298, 374, 296, 297, 375, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 377, 378, 0,
	0, 308, 309, 379, 380, 0, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 382, 383, 0, 0, 322, 0, 170,
	0, 0, 323, 324, 325, 326, 327, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 174, 0, 175, 0,
	0, 0, 0, 328, 0, 0, 0, 2024, 176, 177,
	178, 329, 330, 331, 332, 179, 333, 334, 0, 180,
	335, 336, 181, 182, 0, 0, 337, 338, 339, 0,
	183, 340, 0, 0, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 0, 0, 191, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 0, 212, 213, 214,
	215, 352, 353, 0, 0, 219, 0, 216, 0, 0,
	217, 354, 218, 355, 356, 357, 358, 359, 0, 360,
	0, 0, 220, 221, 222, 0, 223, 224, 225, 0,
	227, 226, 0, 361, 0, 228, 0, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 0,
	236, 237, 239, 238, 0, 0, 0, 363, 240, 364,
	241, 242, 0, 243, 0, 0, 244, 0, 0, 245,
	365, 0, 246, 0, 366, 247, 248, 249, 250, 251,
	0, 252, 367, 253, 368, 254, 0, 255, 256, 257,
	258, 259, 369, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	0, 275, 276, 370, 277, 0, 281, 282, 283, 284,
	0, 286, 371, 285, 287, 288, 0, 289, 278, 279,
	290, 0, 291, 372, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 374, 296, 297, 375, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 377,
	378, 0, 0, 308, 309, 379, 380, 0, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 318,
	0, 381, 319, 320, 321, 382, 383, 0, 0, 322,
	0, 0, 0, 0, 323, 324, 325, 326, 327, 699,
	688, 689, 686, 687, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 174, 0, 175, 967,
	0, 0, 0, 328, 0, 0, 0, 0, 176, 177,
	178, 329, 731, 331, 732, 179, 733, 734, 0, 180,
	335, 336, 181, 182, 0, 0, 735, 736, 339, 0,
	183, 340, 0, 585, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 0, 586, 191, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	737, 197, 738, 739, 0, 198, 0, 199, 0, 200,
	0, 0, 730, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 695, 0, 0, 207, 208,
	740, 741, 742, 0, 209, 0, 210, 0, 0, 587,
	0, 211, 350, 0, 351, 0, 0, 212, 213, 214,
	215, 352, 353, 589, 0, 219, 0, 216, 0, 588,
	217, 743, 218, 744, 745, 746, 747, 748, 0, 706,
	0, 590, 220, 221, 222, 591, 223, 224, 225, 0,
	227, 226, 0, 361, 592, 228, 593, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 594,
	236, 237, 239, 238, 0, 0, 696, 363, 240, 749,
	241, 242, 0, 243, 0, 0, 244, 0, 0, 245,
	365, 595, 246, 596, 366, 247, 248, 249, 250, 251,
	0, 252, 367, 253, 368, 254, 0, 255, 256, 257,
	258, 259, 750, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	597, 275, 276, 370, 277, 0, 281, 282, 283, 284,
	0, 286, 371, 285, 287, 288, 0, 289, 278, 279,
	290, 598, 291, 751, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 752, 296, 297, 375, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 753,
	754, 0, 0, 308, 309, 379, 380, 694, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 318,
	0, 381, 319, 320, 321, 382, 755, 0, 0, 322,
	0, 0, 0, 0, 323, 324, 325, 326, 327, 862,
	0, 581, 578, 0, 0, 0, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 174, 0,
	175, 0, 0, 0, 0, 328, 0, 0, 0, 0,
	176, 177, 178, 329, 330, 331, 332, 179, 333, 334,
	0, 180, 335, 336, 181, 182, 0, 0, 337, 338,
	339, 0, 183, 340, 0, 585, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 0, 586, 191, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	391, 196, 341, 197, 342, 343, 0, 198, 0, 199,
	0, 200, 0, 0, 201, 202, 0, 203, 0, 0,
	0, 344, 204, 205, 206, 345, 346, 0, 0, 0,
	207, 208, 347, 348, 349, 0, 209, 0, 210, 0,
	0, 587, 0, 211, 350, 0, 351, 0, 0, 212,
	213, 214, 215, 352, 353, 589, 0, 219, 0, 216,
	0, 588, 217, 354, 218, 355, 356, 357, 358, 359,
	0, 360, 0, 590, 220, 221, 222, 591, 223, 224,
	225, 0, 227, 226, 0, 361, 592, 228, 593, 0,
	229, 0, 0, 230, 0, 231, 232, 233, 235, 362,
	234, 594, 236, 237, 239, 238, 0, 0, 0, 363,
	240, 364, 241, 242, 0, 243, 0, 0, 244, 0,
	0, 245, 365, 595, 246, 596, 366, 247, 248, 249,
	250, 251, 0, 252, 367, 253, 368, 254, 0, 255,
	256, 257, 258, 259, 369, 260, 261, 0, 262, 263,
	264, 265, 266, 268, 269, 267, 270, 271, 272, 273,
	0, 274, 597, 275, 276, 370, 277, 0, 281, 282,
	283, 284, 0, 286, 371, 285, 287, 288, 0, 289,
	278, 279, 290, 598, 291, 372, 373, 292, 0, 299,
	293, 294, 280, 295, 298, 374, 296, 297, 375, 0,
	300, 0, 301, 302, 303, 304, 305, 306, 307, 0,
	376, 377, 378, 0, 0, 308, 309, 379, 380, 0,
	310, 311, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 318, 0, 381, 319, 320, 321, 382, 383, 0,
	466, 322, 170, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 0, 0, 0, 0, 0, 0, 173, 174,
	0, 175, 0, 0, 0, 0, 328, 0, 0, 0,
	0, 176, 177, 178, 329, 330, 331, 332, 179, 333,
	334, 0, 180, 335, 336, 181, 182, 0, 0, 337,
	338, 339, 0, 183, 340, 0, 0, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 0, 0, 191,
	192, 193, 0, 0, 0, 0, 0, 0, 0, 194,
	195, 166, 196, 341, 197, 342, 343, 0, 198, 0,
	199, 0, 200, 0, 0, 201, 202, 0, 203, 0,
	0, 0, 344, 204, 205, 206, 345, 346, 0, 0,
	0, 207, 208, 347, 348, 349, 0, 209, 0, 210,
	0, 0, 0, 0, 211, 350, 0, 351, 0, 0,
	212, 213, 214, 215, 352, 353, 0, 0, 219, 0,
	216, 0, 0, 217, 354, 218, 355, 356, 357, 358,
	359, 0, 360, 0, 0, 220, 221, 222, 0, 223,
	224, 225, 0, 227, 226, 0, 361, 0, 228, 0,
	0, 229, 0, 0, 230, 0, 231, 232, 233, 235,
	362, 234, 0, 236, 237, 239, 238, 0, 0, 0,
	363, 240, 364, 241, 242, 0, 243, 0, 0, 244,
	0, 0, 245, 365, 0, 246, 0, 366, 247, 248,
	249, 250, 251, 0, 252, 367, 253, 368, 254, 0,
	255, 256, 257, 258, 259, 369, 260, 261, 0, 262,
	263, 264, 265, 266, 268, 269, 267, 270, 271, 272,
	273, 0, 274, 0, 275, 276, 370, 277, 0, 281,
	282, 283, 284, 0, 286, 371, 285, 287, 288, 0,
	289, 278, 279, 290, 0, 291, 372, 373, 292, 0,
	299, 293, 294, 280, 295, 298, 374, 296, 297, 375,
	0, 300, 165, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 377, 378, 0, 0, 308, 309, 379, 380,
	0, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 0, 318, 0, 381, 319, 320, 321, 382, 383,
	0, 163, 322, 170, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 0, 0, 0, 0, 0, 0, 173,
	174, 0, 175, 0, 0, 169, 0, 328, 0, 0,
	0, 0, 176, 177, 178, 329, 330, 331, 332, 179,
	333, 334, 0, 180, 335, 336, 181, 182, 0, 0,
	337, 338, 339, 0, 183, 340, 0, 0, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 0, 0,
	191, 192, 193, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 166, 196, 341, 197, 342, 343, 0, 198,
	0, 199, 0, 200, 0, 0, 201, 202, 0, 203,
	0, 0, 0, 344, 204, 205, 206, 345, 346, 0,
	0, 0, 207, 208, 347, 348, 349, 0, 209, 0,
	210, 0, 0, 0, 0, 211, 350, 0, 351, 0,
	0, 212, 213, 214, 215, 352, 353, 0, 0, 219,
	0, 216, 0, 0, 217, 354, 218, 355, 356, 357,
	358, 359, 0, 360, 0, 0, 220, 221, 222, 0,
	223, 224, 225, 0, 227, 226, 0, 361, 0, 228,
	0, 0, 229, 0, 0, 230, 0, 231, 232, 233,
	235, 362, 234, 0, 236, 237, 239, 238, 0, 0,
	0, 363, 240, 364, 241, 242, 0, 243, 0, 0,
	244, 0, 0, 245, 365, 0, 246, 0, 366, 247,
	248, 249, 250, 251, 0, 252, 367, 253, 368, 254,
	0, 255, 256, 257, 258, 259, 369, 260, 261, 0,
	262, 263, 264, 265, 266, 268, 269, 267, 270, 271,
	272, 273, 0, 274, 0, 275, 276, 370, 277, 0,
	281, 282, 283, 284, 0, 286, 371, 285, 287, 288,
	0, 289, 278, 279, 290, 0, 291, 372, 373, 292,
	0, 299, 293, 294, 280, 295, 298, 374, 296, 297,
	375, 0, 300, 165, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 377, 378, 0, 0, 308, 309, 379,
	380, 0, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 318, 0, 381, 319, 320, 321, 382,
	383, 581, 578, 322, 0, 0, 864, 0, 323, 324,
	325, 326, 327, 0, 0, 0, 0, 173, 174, 0,
	175, 0, 0, 0, 0, 328, 169, 0, 0, 0,
	176, 177, 178, 329, 330, 331, 332, 179, 333, 334,
	0, 180, 335, 336, 181, 182, 0, 0, 337, 338,
	339, 0, 183, 340, 0, 585, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 0, 586, 191, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	391, 196, 341, 197, 342, 343, 0, 198, 0, 199,
	0, 200, 0, 0, 201, 202, 0, 203, 0, 0,
	0, 344, 204, 205, 206, 345, 346, 0, 0, 0,
	207, 208, 347, 348, 349, 0, 209, 0, 210, 0,
	0, 587, 0, 211, 350, 0, 351, 0, 0, 212,
	213, 214, 215, 352, 353, 589, 0, 219, 0, 216,
	0, 588, 217, 354, 218, 355, 356, 357, 358, 359,
	0, 360, 0, 590, 220, 221, 222, 591, 223, 224,
	225, 0, 227, 226, 0, 361, 592, 228, 593, 0,
	229, 0, 0, 230, 0, 231, 232, 233, 235, 362,
	234, 594, 236, 237, 239, 238, 0, 0, 0, 363,
	240, 364, 241, 242, 0, 243, 0, 0, 244, 0,
	0, 245, 365, 595, 246, 596, 366, 247, 248, 249,
	250, 251, 0, 252, 367, 253, 368, 254, 0, 255,
	256, 257, 258, 259, 369, 260, 261, 0, 262, 263,
	264, 265, 266, 268, 269, 267, 270, 271, 272, 273,
	0, 274, 597, 275, 276, 370, 277, 0, 281, 282,
	283, 284, 0, 286, 371, 285, 287, 288, 0, 289,
	278, 279, 290, 598, 291, 372, 373, 292, 0, 299,
	293, 294, 280, 295, 298, 374, 296, 297, 375, 0,
	300, 0, 301, 302, 303, 304, 305, 306, 307, 0,
	376, 377, 378, 0, 0, 308, 309, 379, 380, 0,
	310, 311, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 318, 0, 381, 319, 320, 321, 382, 383, 170,
	0, 322, 0, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 0, 0, 0, 173, 174, 0, 175, 0,
	0, 0, 0, 328, 0, 0, 0, 0, 176, 177,
	178, 329, 330, 331, 332, 179, 333, 334, 0, 180,
	335, 336, 181, 182, 0, 0, 337, 338, 339, 0,
	183, 340, 0, 0, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 0, 0, 191, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 166, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 0, 212, 213, 214,
	215, 352, 353, 0, 0, 219, 0, 216, 0, 0,
	217, 354, 218, 355, 356, 357, 358, 359, 0, 360,
	0, 0, 220, 221, 222, 0, 223, 224, 225, 0,
	227, 226, 0, 361, 0, 228, 0, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 0,
	236, 237, 239, 238, 0, 0, 0, 363, 240, 364,
	241, 242, 0, 243, 0, 0, 244, 0, 0, 245,
	365, 0, 246, 0, 366, 247, 248, 249, 250, 251,
	0, 252, 367, 253, 368, 254, 0, 255, 256, 257,
	258, 259, 369, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	0, 275, 276, 370, 277, 0, 281, 282, 283, 284,
	0, 286, 371, 285, 287, 288, 0, 289, 278, 279,
	290, 0, 291, 372, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 374, 296, 297, 375, 0, 300, 165,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 377,
	378, 0, 0, 308, 309, 379, 380, 0, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 318,
	0, 381, 319, 320, 321, 382, 383, 581, 578, 322,
	0, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	0, 0, 0, 173, 174, 0, 175, 0, 0, 0,
	0, 328, 169, 0, 0, 0, 176, 177, 178, 329,
	330, 331, 332, 179, 333, 334, 0, 180, 335, 336,
	181, 182, 0, 0, 337, 338, 339, 0, 183, 340,
	0, 585, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 0, 586, 191, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 0, 0, 587, 0, 211,
	350, 0, 351, 0, 0, 212, 213, 214, 215, 352,
	353, 589, 0, 219, 0, 216, 0, 588, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 590,
	220, 221, 222, 591, 223, 224, 225, 0, 227, 226,
	0, 361, 592, 228, 593, 0, 229, 0, 0, 230,
	0, 231, 232, 233, 235, 362, 234, 594, 236, 237,
	239, 238, 0, 0, 0, 363, 240, 364, 241, 242,
	0, 243, 0, 0, 244, 0, 0, 245, 365, 595,
	246, 596, 366, 247, 248, 249, 250, 251, 0, 252,
	367, 253, 368, 254, 0, 255, 256, 257, 258, 259,
	369, 260, 261, 0, 262, 263, 264, 265, 266, 268,
	269, 267, 270, 271, 272, 273, 0, 274, 597, 275,
	276, 370, 277, 0, 281, 282, 283, 284, 0, 286,
	371, 285, 287, 288, 0, 289, 278, 279, 290, 598,
	291, 372, 373, 292, 0, 299, 293, 294, 280, 295,
	298, 374, 296, 297, 375, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 377, 378, 0,
	0, 308, 309, 379, 380, 0, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 382, 383, 170, 0, 322, 0, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 0, 0,
	0, 173, 174, 0, 175, 0, 0, 0, 0, 328,
	0, 0, 0, 0, 176, 177, 178, 329, 330, 331,
	332, 179, 333, 334, 0, 180, 335, 336, 181, 182,
	0, 0, 337, 338, 339, 0, 183, 340, 0, 0,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	0, 0, 191, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 391, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 0, 0, 211, 350, 0,
	351, 0, 0, 212, 213, 214, 215, 352, 353, 0,
	0, 219, 0, 216, 0, 0, 217, 354, 218, 355,
	356, 357, 358, 359, 0, 360, 0, 0, 220, 221,
	222, 0, 223, 224, 225, 0, 227, 226, 0, 361,
	0, 228, 0, 0, 229, 0, 0, 230, 0, 231,
	232, 233, 235, 362, 234, 0, 236, 237, 239, 238,
	0, 0, 0, 363, 240, 364, 241, 242, 0, 243,
	0, 0, 244, 0, 0, 245, 365, 0, 246, 0,
	366, 247, 248, 249, 250, 251, 0, 252, 367, 253,
	368, 254, 0, 255, 256, 257, 258, 259, 369, 260,
	261, 0, 262, 263, 264, 265, 266, 268, 269, 267,
	270, 271, 272, 273, 0, 274, 0, 275, 276, 370,
	277, 0, 281, 282, 283, 284, 0, 286, 371, 285,
	287, 288, 0, 289, 278, 279, 290, 0, 291, 372,
	373, 292, 0, 299, 293, 294, 280, 295, 298, 374,
	296, 297, 375, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 377, 378, 0, 0, 308,
	309, 379, 380, 0, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 318, 0, 381, 319, 320,
	321, 382, 383, 581, 0, 322, 0, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 0, 0, 0, 173,
	174, 0, 175, 0, 0, 0, 0, 328, 169, 0,
	0, 0, 176, 177, 178, 329, 330, 331, 332, 179,
	333, 334, 0, 180, 335, 336, 181, 182, 0, 0,
	337, 338, 339, 0, 183, 340, 0, 585, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 0, 586,
	191, 192, 193, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 391, 196, 341, 197, 342, 343, 0, 198,
	0, 199, 0, 200, 0, 0, 201, 202, 0, 203,
	0, 0, 0, 344, 204, 205, 206, 345, 346, 0,
	0, 0, 207, 208, 347, 348, 349, 0, 209, 0,
	210, 0, 0, 587, 0, 211, 350, 0, 351, 0,
	0, 212, 213, 214, 215, 352, 353, 589, 0, 219,
	0, 216, 0, 588, 217, 354, 218, 355, 356, 357,
	358, 359, 0, 360, 0, 590, 220, 221, 222, 591,
	223, 224, 225, 0, 227, 226, 0, 361, 592, 228,
	593, 0, 229, 0, 0, 230, 0, 231, 232, 233,
	235, 362, 234, 594, 236, 237, 239, 238, 0, 0,
	0, 363, 240, 364, 241, 242, 0, 243, 0, 0,
	244, 0, 0, 245, 365, 595, 246, 596, 366, 247,
	248, 249, 250, 251, 0, 252, 367, 253, 368, 254,
	0, 255, 256, 257, 258, 259, 369, 260, 261, 0,
	262, 263, 264, 265, 266, 268, 269, 267, 270, 271,
	272, 273, 0, 274, 597, 275, 276, 370, 277, 0,
	281, 282, 283, 284, 0, 286, 371, 285, 287, 288,
	0, 289, 278, 279, 290, 598, 291, 372, 373, 292,
	0, 299, 293, 294, 280, 295, 298, 374, 296, 297,
	375, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 377, 378, 0, 0, 308, 309, 379,
	380, 0, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 318, 0, 381, 319, 320, 321, 382,
	383, 170, 0, 322, 0, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 0, 0, 0, 173, 174, 0,
	175, 0, 0, 0, 0, 328, 0, 0, 0, 0,
	176, 177, 178, 329, 330, 331, 332, 179, 333, 334,
	0, 180, 335, 336, 181, 182, 0, 0, 337, 338,
	339, 1406, 183, 340, 0, 0, 0, 184, 185, 186,
	0, 187, 1404, 188, 189, 190, 0, 0, 191, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	391, 196, 341, 197, 342, 343, 0, 198, 0, 199,
	0, 200, 0, 0, 201, 202, 0, 203, 0, 0,
	0, 344, 204, 205, 206, 345, 346, 0, 1603, 0,
	207, 208, 347, 348, 349, 0, 209, 0, 210, 1409,
	0, 0, 0, 211, 350, 0, 351, 0, 0, 212,
	213, 214, 215, 352, 353, 0, 0, 219, 1601, 216,
	0, 0, 217, 354, 218, 355, 356, 357, 358, 359,
	0, 360, 0, 0, 220, 221, 222, 0, 223, 224,
	225, 0, 227, 226, 0, 361, 0, 228, 0, 0,
	229, 0, 0, 230, 0, 231, 232, 233, 235, 362,
	234, 0, 236, 237, 239, 238, 0, 0, 0, 363,
	240, 364, 241, 242, 0, 243, 0, 0, 244, 0,
	0, 245, 365, 0, 246, 0, 366, 247, 248, 249,
	250, 251, 0, 252, 367, 253, 368, 254, 1408, 255,
	256, 257, 258, 259, 369, 260, 261, 0, 262, 263,
	264, 265, 266, 268, 269, 267, 270, 271, 272, 273,
	0, 274, 0, 275, 276, 370, 277, 0, 281, 282,
	283, 284, 0, 286, 371, 285, 287, 288, 0, 289,
	278, 279, 290, 0, 291, 372, 373, 292, 0, 299,
	293, 294, 280, 295, 298, 374, 296, 297, 375, 0,
	300, 0, 301, 302, 303, 304, 305, 306, 307, 0,
	376, 377, 378, 0, 0, 308, 309, 379, 380, 0,
	310, 311, 312, 313, 0, 1602, 314, 315, 316, 317,
	0, 318, 0, 381, 319, 320, 321, 382, 383, 170,
	0, 322, 0, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 0, 0, 0, 173, 174, 0, 175, 0,
	0, 0, 0, 328, 0, 0, 0, 0, 176, 177,
	178, 329, 330, 331, 332, 179, 333, 334, 0, 180,
	335, 336, 181, 182, 0, 0, 337, 338, 339, 1406,
	183, 340, 0, 0, 1401, 184, 185, 186, 0, 187,
	1404, 188, 189, 190, 0, 0, 191, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 1409, 0, 0,
	0, 211, 350, 0, 351, 0, 0, 212, 213, 214,
	215, 1400, 353, 0, 0, 219, 0, 216, 0, 0,
	217, 354, 218, 355, 356, 357, 358, 359, 0, 360,
	0, 0, 220, 221, 222, 0, 223, 224, 225, 0,
	227, 226, 0, 361, 0, 228, 0, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 0,
	236, 237, 239, 238, 0, 0, 0, 363, 240, 364,
	241, 242, 0, 243, 0, 0, 244, 0, 0, 245,
	365, 0, 246, 0, 366, 247, 248, 249, 250, 251,
	0, 252, 367, 253, 368, 254, 1408, 255, 256, 257,
	258, 259, 369, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	0, 275, 276, 370, 277, 0, 281, 282, 283, 284,
	0, 286, 371, 285, 287, 288, 0, 289, 278, 279,
	290, 0, 291, 372, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 374, 296, 297, 375, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 377,
	378, 0, 0, 308, 309, 379, 380, 0, 310, 311,
	312, 313, 0, 1407, 314, 315, 316, 317, 0, 318,
	0, 381, 319, 320, 321, 382, 383, 0, 790, 322,
	170, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	0, 0, 0, 0, 0, 0, 173, 174, 0, 175,
	0, 0, 0, 0, 328, 0, 0, 0, 0, 176,
	177, 178, 329, 330, 331, 332, 179, 333, 334, 0,
	180, 335, 336, 181, 182, 0, 0, 337, 338, 339,
	0, 183, 340, 0, 0, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 0, 0, 191, 192, 193,
	0, 0, 0, 0, 0, 0, 0, 194, 195, 391,
	196, 341, 197, 342, 343, 0, 198, 0, 199, 0,
	200, 0, 0, 201, 202, 0, 203, 0, 0, 0,
	344, 204, 205, 206, 345, 346, 0, 0, 0, 207,
	208, 347, 348, 349, 0, 209, 0, 210, 0, 0,
	0, 0, 211, 350, 0, 351, 0, 0, 212, 213,
	214, 215, 352, 353, 0, 0, 219, 0, 216, 0,
	0, 217, 354, 218, 355, 356, 357, 358, 359, 0,
	360, 0, 0, 220, 221, 222, 0, 223, 224, 225,
	0, 227, 226, 0, 361, 0, 228, 0, 0, 229,
	0, 0, 230, 0, 231, 232, 233, 235, 362, 234,
	0, 236, 237, 239, 238, 0, 0, 0, 363, 240,
	364, 241, 242, 0, 243, 0, 637, 244, 0, 0,
	245, 365, 0, 246, 0, 366, 247, 248, 249, 250,
	251, 0, 252, 367, 253, 368, 254, 0, 255, 256,
	257, 258, 259, 369, 260, 261, 0, 262, 263, 264,
	265, 266, 268, 269, 267, 270, 271, 272, 273, 0,
	274, 0, 275, 276, 370, 277, 0, 281, 282, 283,
	284, 0, 286, 371, 285, 287, 288, 0, 289, 278,
	279, 290, 0, 291, 372, 373, 292, 0, 299, 293,
	294, 280, 295, 298, 374, 296, 297, 375, 0, 300,
	0, 301, 302, 303, 304, 305, 306, 307, 0, 376,
	377, 378, 0, 0, 308, 309, 379, 380, 0, 310,
	311, 312, 313, 0, 0, 314, 315, 316, 317, 0,
	318, 0, 381, 319, 320, 321, 382, 383, 0, 643,
	322, 170, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 0, 0, 0, 0, 0, 0, 173, 174, 0,
	175, 0, 0, 0, 0, 328, 0, 0, 0, 0,
	176, 177, 178, 329, 330, 331, 332, 179, 333, 334,
	0, 180, 335, 336, 181, 182, 0, 0, 337, 338,
	339, 0, 183, 340, 0, 0, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 0, 0, 191, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	391, 196, 341, 197, 342, 343, 0, 198, 0, 199,
	0, 200, 0, 0, 201, 202, 0, 203, 0, 0,
	0, 344, 204, 205, 206, 345, 346, 0, 0, 0,
	207, 208, 347, 348, 349, 0, 209, 0, 210, 0,
	0, 0, 0, 211, 350, 0, 351, 0, 0, 212,
	213, 214, 215, 645, 353, 0, 0, 219, 0, 216,
	0, 0, 217, 354, 218, 355, 356, 357, 358, 359,
	0, 360, 0, 0, 220, 221, 222, 0, 223, 224,
	225, 0, 227, 226, 0, 361, 0, 228, 0, 0,
	229, 0, 0, 230, 0, 231, 232, 233, 235, 362,
	234, 0, 236, 237, 239, 238, 0, 0, 0, 363,
	240, 364, 241, 242, 0, 243, 0, 637, 244, 0,
	0, 245, 365, 0, 246, 0, 366, 247, 248, 249,
	250, 251, 0, 252, 367, 253, 368, 254, 0, 255,
	256, 257, 258, 259, 369, 260, 261, 0, 262, 263,
	264, 265, 266, 268, 269, 267, 270, 271, 272, 273,
	0, 274, 0, 275, 276, 370, 277, 0, 281, 282,
	283, 284, 0, 286, 371, 285, 287, 288, 0, 289,
	278, 279, 290, 0, 291, 372, 373, 292, 0, 299,
	293, 294, 280, 295, 298, 374, 296, 297, 375, 0,
	300, 0, 301, 302, 303, 304, 305, 306, 307, 0,
	376, 377, 378, 0, 0, 308, 309, 379, 380, 0,
	310, 311, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 318, 0, 381, 319, 320, 321, 382, 383, 0,
	639, 322, 170, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 0, 0, 0, 0, 0, 0, 173, 174,
	0, 175, 0, 0, 0, 0, 328, 0, 0, 0,
	0, 176, 177, 178, 329, 330, 331, 332, 179, 333,
	334, 0, 180, 335, 336, 181, 182, 0, 0, 337,
	338, 339, 0, 183, 340, 0, 0, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 0, 0, 191,
	192, 193, 0, 0, 0, 0, 0, 0, 0, 194,
	195, 391, 196, 341, 197, 342, 343, 0, 198, 0,
	199, 0, 200, 0, 0, 201, 202, 0, 203, 0,
	0, 0, 344, 204, 205, 206, 345, 346, 0, 0,
	0, 207, 208, 347, 348, 349, 0, 209, 0, 210,
	0, 0, 0, 0, 211, 350, 0, 351, 0, 0,
	212, 213, 214, 215, 641, 353, 0, 0, 219, 0,
	216, 0, 0, 217, 354, 218, 355, 356, 357, 358,
	359, 0, 360, 0, 0, 220, 221, 222, 0, 223,
	224, 225, 0, 227, 226, 0, 361, 0, 228, 0,
	0, 229, 0, 0, 230, 0, 231, 232, 233, 235,
	362, 234, 0, 236, 237, 239, 238, 0, 0, 0,
	363, 240, 364, 241, 242, 0, 243, 0, 637, 244,
	0, 0, 245, 365, 0, 246, 0, 366, 247, 248,
	249, 250, 251, 0, 252, 367, 253, 368, 254, 0,
	255, 256, 257, 258, 259, 369, 260, 261, 0, 262,
	263, 264, 265, 266, 268, 269, 267, 270, 271, 272,
	273, 0, 274, 0, 275, 276, 370, 277, 0, 281,
	282, 283, 284, 0, 286, 371, 285, 287, 288, 0,
	289, 278, 279, 290, 0, 291, 372, 373, 292, 0,
	299, 293, 294, 280, 295, 298, 374, 296, 297, 375,
	0, 300, 0, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 377, 378, 0, 0, 308, 309, 379, 380,
	0, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 0, 318, 0, 381, 319, 320, 321, 382, 383,
	0, 408, 322, 170, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 0, 0, 0, 0, 0, 0, 173,
	174, 407, 175, 0, 0, 0, 0, 328, 0, 0,
	0, 0, 176, 177, 178, 329, 330, 331, 332, 179,
	333, 334, 0, 180, 335, 336, 181, 182, 0, 0,
	337, 338, 339, 0, 183, 340, 0, 0, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 0, 0,
	191, 192, 193, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 391, 196, 341, 197, 342, 343, 0, 198,
	0, 199, 0, 200, 0, 0, 201, 202, 0, 203,
	0, 0, 0, 344, 204, 205, 206, 345, 346, 0,
	0, 0, 207, 208, 347, 348, 349, 0, 209, 0,
	210, 0, 0, 0, 0, 211, 350, 0, 351, 0,
	0, 212, 213, 214, 215, 352, 353, 0, 0, 219,
	0, 216, 0, 0, 217, 354, 218, 355, 356, 357,
	358, 359, 0, 360, 0, 0, 220, 221, 222, 0,
	223, 224, 225, 0, 227, 226, 0, 361, 0, 228,
	0, 0, 229, 0, 0, 230, 0, 231, 232, 233,
	235, 362, 234, 0, 236, 237, 239, 238, 0, 0,
	0, 363, 240, 364, 241, 242, 0, 243, 0, 0,
	244, 0, 0, 245, 365, 0, 246, 0, 366, 247,
	248, 249, 250, 251, 0, 252, 367, 253, 368, 406,
	0, 255, 256, 257, 258, 259, 369, 260, 261, 0,
	262, 263, 264, 265, 266, 268, 269, 267, 270, 271,
	272, 273, 0, 274, 0, 275, 276, 370, 277, 0,
	281, 282, 283, 284, 0, 286, 371, 285, 287, 288,
	0, 289, 278, 279, 290, 0, 291, 372, 373, 292,
	0, 299, 293, 294, 280, 295, 298, 374, 296, 297,
	375, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 377, 378, 0, 0, 308, 309, 379,
	380, 0, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 318, 0, 381, 319, 320, 321, 382,
	383, 170, 0, 322, 0, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 0, 0, 0, 173, 174, 0,
	175, 0, 0, 0, 0, 328, 0, 1389, 0, 0,
	176, 177, 178, 329, 330, 331, 332, 179, 333, 334,
	0, 180, 335, 336, 181, 182, 0, 0, 337, 338,
	339, 0, 183, 340, 0, 0, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 0, 0, 191, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	391, 196, 341, 197, 342, 343, 0, 198, 0, 199,
	0, 200, 0, 0, 201, 202, 0, 203, 0, 0,
	0, 344, 204, 205, 206, 345, 346, 0, 0, 0,
	207, 208, 347, 348, 349, 0, 209, 0, 210, 0,
	0, 0, 0, 211, 350, 0, 351, 0, 0, 212,
	213, 214, 215, 352, 353, 0, 0, 219, 0, 216,
	0, 0, 217, 354, 218, 355, 356, 357, 358, 359,
	0, 360, 0, 0, 220, 221, 222, 0, 223, 224,
	225, 0, 227, 226, 0, 361, 0, 228, 0, 0,
	229, 0, 0, 230, 0, 231, 232, 233, 235, 362,
	234, 0, 236, 237, 239, 238, 0, 0, 0, 363,
	240, 364, 241, 242, 0, 243, 0, 0, 244, 0,
	0, 245, 365, 0, 246, 0, 366, 247, 248, 249,
	250, 251, 0, 252, 367, 253, 368, 254, 0, 255,
	256, 257, 258, 259, 369, 260, 261, 0, 262, 263,
	264, 265, 266, 268, 269, 267, 270, 271, 272, 273,
	0, 274, 0, 275, 276, 370, 277, 0, 281, 282,
	283, 284, 0, 286, 371, 285, 287, 288, 0, 289,
	278, 279, 290, 0, 291, 372, 373, 292, 0, 299,
	293, 294, 280, 295, 298, 374, 296, 297, 375, 0,
	300, 0, 301, 302, 303, 304, 305, 306, 307, 0,
	376, 377, 378, 0, 0, 308, 309, 379, 380, 0,
	310, 311, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 318, 0, 381, 319, 320, 321, 382, 383, 170,
	2111, 322, 0, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 0, 0, 0, 173, 174, 0, 175, 0,
	0, 0, 0, 328, 0, 0, 0, 0, 176, 177,
	178, 329, 330, 331, 332, 179, 333, 334, 0, 180,
	335, 336, 181, 182, 0, 0, 337, 338, 339, 0,
	183, 340, 0, 0, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 0, 0, 191, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 0, 212, 213, 214,
	215, 352, 353, 0, 0, 219, 0, 216, 0, 0,
	217, 354, 218, 355, 356, 357, 358, 359, 0, 360,
	0, 0, 220, 221, 222, 0, 223, 224, 225, 0,
	227, 226, 0, 361, 0, 228, 0, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 0,
	236, 237, 239, 238, 0, 0, 0, 363, 240, 364,
	241, 242, 0, 243, 0, 0, 244, 0, 0, 245,
	365, 0, 246, 0, 366, 247, 248, 249, 250, 251,
	0, 252, 367, 253, 368, 254, 0, 255, 256, 257,
	258, 259, 369, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	0, 275, 276, 370, 277, 0, 281, 282, 283, 284,
	0, 286, 371, 285, 287, 288, 0, 289, 278, 279,
	290, 0, 291, 372, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 374, 296, 297, 375, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 377,
	378, 0, 0, 308, 309, 379, 380, 0, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 318,
	0, 381, 319, 320, 321, 382, 383, 170, 2111, 322,
	0, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	0, 0, 0, 173, 174, 0, 175, 0, 0, 0,
	0, 328, 0, 0, 0, 0, 176, 177, 178, 329,
	330, 331, 332, 179, 333, 334, 0, 180, 335, 336,
	181, 182, 0, 0, 337, 338, 339, 0, 183, 340,
	0, 0, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 0, 0, 191, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 0, 0, 0, 0, 211,
	350, 0, 351, 0, 0, 212, 213, 214, 215, 352,
	353, 0, 0, 219, 0, 216, 0, 0, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 0,
	220, 221, 222, 0, 223, 224, 225, 0, 227, 226,
	0, 361, 0, 228, 0, 0, 229, 0, 0, 230,
	0, 231, 232, 233, 235, 362, 234, 0, 236, 237,
	239, 238, 0, 0, 0, 363, 240, 364, 241, 242,
	0, 243, 0, 0, 2108, 0, 0, 245, 365, 0,
	246, 0, 366, 247, 248, 249, 250, 251, 0, 252,
	367, 253, 368, 254, 0, 255, 256, 257, 258, 259,
	369, 260, 261, 0, 262, 263, 264, 265, 266, 268,
	269, 267, 270, 271, 272, 273, 0, 274, 0, 275,
	276, 370, 277, 0, 281, 282, 283, 284, 0, 286,
	371, 285, 287, 288, 0, 289, 278, 279, 290, 0,
	291, 372, 373, 292, 0, 299, 293, 294, 280, 295,
	298, 374, 296, 297, 375, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 377, 378, 0,
	0, 308, 309, 379, 380, 0, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 382, 383, 170, 0, 322, 0, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 0, 0,
	0, 173, 174, 0, 175, 0, 0, 0, 0, 328,
	0, 0, 0, 0, 176, 177, 178, 329, 330, 331,
	332, 179, 333, 334, 0, 180, 335, 336, 181, 182,
	0, 0, 337, 338, 339, 0, 183, 340, 0, 0,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	0, 0, 191, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 391, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 0, 0, 211, 350, 0,
	351, 0, 0, 212, 213, 214, 215, 352, 353, 0,
	0, 219, 0, 216, 0, 0, 217, 354, 218, 355,
	356, 357, 358, 359, 0, 360, 0, 0, 220, 221,
	222, 0, 223, 224, 225, 0, 227, 226, 0, 361,
	0, 228, 0, 0, 229, 0, 0, 230, 0, 231,
	232, 233, 235, 362, 234, 0, 236, 237, 239, 238,
	0, 0, 0, 363, 240, 364, 241, 242, 0, 243,
	0, 637, 244, 0, 0, 245, 365, 0, 246, 0,
	366, 247, 248, 249, 250, 251, 0, 252, 367, 253,
	368, 254, 0, 255, 256, 257, 258, 259, 369, 260,
	261, 0, 262, 263, 264, 265, 266, 268, 269, 267,
	270, 271, 272, 273, 0, 274, 0, 275, 276, 370,
	277, 0, 281, 282, 283, 284, 0, 286, 371, 285,
	287, 288, 0, 289, 278, 279, 290, 0, 291, 372,
	373, 292, 0, 299, 293, 294, 280, 295, 298, 374,
	296, 297, 375, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 377, 378, 0, 0, 308,
	309, 379, 380, 0, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 318, 0, 381, 319, 320,
	321, 382, 383, 0, 1332, 322, 170, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 0, 0, 0, 0,
	0, 0, 173, 174, 0, 175, 0, 0, 0, 0,
	328, 0, 0, 0, 0, 176, 177, 178, 329, 330,
	331, 332, 179, 333, 334, 0, 180, 335, 336, 181,
	182, 0, 0, 337, 338, 339, 0, 183, 340, 0,
	0, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 0, 0, 191, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 194, 195, 391, 196, 341, 197, 342,
	343, 0, 198, 0, 199, 0, 200, 0, 0, 201,
	202, 0, 203, 0, 0, 0, 344, 204, 205, 206,
	345, 346, 0, 0, 0, 207, 208, 347, 348, 349,
	0, 209, 0, 210, 0, 0, 0, 0, 211, 350,
	0, 351, 0, 0, 212, 213, 214, 215, 352, 353,
	0, 0, 219, 0, 216, 0, 0, 217, 354, 218,
	355, 356, 357, 358, 359, 0, 360, 0, 0, 220,
	221, 222, 0, 223, 224, 225, 0, 227, 226, 0,
	361, 0, 228, 0, 0, 229, 0, 0, 230, 0,
	231, 232, 233, 235, 362, 234, 0, 236, 237, 239,
	238, 0, 0, 0, 363, 240, 364, 241, 242, 0,
	243, 0, 0, 244, 0, 0, 245, 365, 0, 246,
	0, 366, 247, 248, 249, 250, 251, 0, 252, 367,
	253, 368, 254, 0, 255, 256, 257, 258, 259, 369,
	260, 261, 0, 262, 263, 264, 265, 266, 268, 269,
	267, 270, 271, 272, 273, 0, 274, 0, 275, 276,
	370, 277, 0, 281, 282, 283, 284, 0, 286, 371,
	285, 287, 288, 0, 289, 278, 279, 290, 0, 291,
	372, 373, 292, 0, 299, 293, 294, 280, 295, 298,
	374, 296, 297, 375, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 377, 378, 0, 0,
	308, 309, 379, 380, 0, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 0, 318, 0, 381, 319,
	320, 321, 382, 383, 0, 1330, 322, 170, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 0, 0, 0,
	0, 0, 0, 173, 174, 0, 175, 0, 0, 0,
	0, 328, 0, 0, 0, 0, 176, 177, 178, 329,
	330, 331, 332, 179, 333, 334, 0, 180, 335, 336,
	181, 182, 0, 0, 337, 338, 339, 0, 183, 340,
	0, 0, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 0, 0, 191, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 0, 0, 0, 0, 211,
	350, 0, 351, 0, 0, 212, 213, 214, 215, 352,
	353, 0, 0, 219, 0, 216, 0, 0, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 0,
	220, 221, 222, 0, 223, 224, 225, 0, 227, 226,
	0, 361, 0, 228, 0, 0, 229, 0, 0, 230,
	0, 231, 232, 233, 235, 362, 234, 0, 236, 237,
	239, 238, 0, 0, 0, 363, 240, 364, 241, 242,
	0, 243, 0, 0, 244, 0, 0, 245, 365, 0,
	246, 0, 366, 247, 248, 249, 250, 251, 0, 252,
	367, 253, 368, 254, 0, 255, 256, 257, 258, 259,
	369, 260, 261, 0, 262, 263, 264, 265, 266, 268,
	269, 267, 270, 271, 272, 273, 0, 274, 0, 275,
	276, 370, 277, 0, 281, 282, 283, 284, 0, 286,
	371, 285, 287, 288, 0, 289, 278, 279, 290, 0,
	291, 372, 373, 292, 0, 299, 293, 294, 280, 295,
	298, 374, 296, 297, 375, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 377, 378, 0,
	0, 308, 309, 379, 380, 0, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 382, 383, 170, 0, 322, 0, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 0, 0,
	0, 173, 174, 1312, 175, 0, 0, 0, 0, 328,
	0, 0, 0, 0, 176, 177, 178, 329, 330, 331,
	332, 179, 333, 334, 0, 180, 335, 336, 181, 182,
	0, 0, 337, 338, 339, 0, 183, 340, 0, 0,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	0, 0, 191, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 391, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 0, 0, 211, 350, 0,
	351, 0, 0, 212, 213, 214, 215, 352, 353, 0,
	0, 219, 0, 216, 0, 0, 217, 354, 218, 355,
	356, 357, 358, 359, 0, 360, 0, 0, 220, 221,
	222, 0, 223, 224, 225, 0, 227, 226, 0, 361,
	0, 228, 0, 0, 229, 0, 0, 230, 0, 231,
	232, 233, 235, 362, 234, 0, 236, 237, 239, 238,
	0, 0, 0, 363, 240, 364, 241, 242, 0, 243,
	0, 0, 244, 0, 0, 245, 365, 0, 246, 0,
	366, 247, 248, 249, 250, 251, 0, 252, 367, 253,
	368, 254, 0, 255, 256, 257, 258, 259, 369, 260,
	261, 0, 262, 263, 264, 265, 266, 268, 269, 267,
	270, 271, 272, 273, 0, 274, 0, 275, 276, 370,
	277, 0, 281, 282, 283, 284, 0, 286, 371, 285,
	287, 288, 0, 289, 278, 279, 290, 0, 291, 372,
	373, 292, 0, 299, 293, 294, 280, 295, 298, 374,
	296, 297, 375, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 377, 378, 0, 0, 308,
	309, 379, 380, 0, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 318, 0, 381, 319, 320,
	321, 382, 383, 0, 1195, 322, 170, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 0, 0, 0, 0,
	0, 0, 173, 174, 0, 175, 0, 0, 0, 0,
	328, 0, 0, 0, 0, 176, 177, 178, 329, 330,
	331, 332, 179, 333, 334, 0, 180, 335, 336, 181,
	182, 0, 0, 337, 338, 339, 0, 183, 340, 0,
	0, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 0, 0, 191, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 194, 195, 391, 196, 341, 197, 342,
	343, 0, 198, 0, 199, 0, 200, 0, 0, 201,
	202, 0, 203, 0, 0, 0, 344, 204, 205, 206,
	345, 346, 0, 0, 0, 207, 208, 347, 348, 349,
	0, 209, 0, 210, 0, 0, 0, 0, 211, 350,
	0, 351, 0, 0, 212, 213, 214, 215, 1194, 353,
	0, 0, 219, 0, 216, 0, 0, 217, 354, 218,
	355, 356, 357, 358, 359, 0, 360, 0, 0, 220,
	221, 222, 0, 223, 224, 225, 0, 227, 226, 0,
	361, 0, 228, 0, 0, 229, 0, 0, 230, 0,
	231, 232, 233, 235, 362, 234, 0, 236, 237, 239,
	238, 0, 0, 0, 363, 240, 364, 241, 242, 0,
	243, 0, 0, 244, 0, 0, 245, 365, 0, 246,
	0, 366, 247, 248, 249, 250, 251, 0, 252, 367,
	253, 368, 254, 0, 255, 256, 257, 258, 259, 369,
	260, 261, 0, 262, 263, 264, 265, 266, 268, 269,
	267, 270, 271, 272, 273, 0, 274, 0, 275, 276,
	370, 277, 0, 281, 282, 283, 284, 0, 286, 371,
	285, 287, 288, 0, 289, 278, 279, 290, 0, 291,
	372, 373, 292, 0, 299, 293, 294, 280, 295, 298,
	374, 296, 297, 375, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 377, 378, 0, 0,
	308, 309, 379, 380, 0, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 0, 318, 0, 381, 319,
	320, 321, 382, 383, 0, 499, 322, 170, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 0, 0, 0,
	0, 0, 0, 173, 174, 0, 175, 0, 0, 0,
	0, 328, 0, 0, 0, 0, 176, 177, 178, 329,
	330, 331, 332, 179, 333, 334, 0, 180, 335, 336,
	181, 182, 0, 0, 337, 338, 839, 0, 183, 340,
	0, 0, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 0, 0, 191, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 0, 0, 0, 0, 211,
	350, 0, 351, 0, 0, 212, 213, 214, 215, 352,
	353, 0, 0, 219, 0, 216, 0, 0, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 0,
	220, 221, 222, 0, 223, 224, 225, 0, 227, 226,
	0, 361, 0, 228, 0, 0, 229, 0, 0, 230,
	0, 231, 232, 233, 235, 362, 501, 0, 236, 237,
	239, 238, 0, 0, 0, 363, 240, 364, 241, 242,
	0, 243, 0, 0, 244, 0, 0, 245, 365, 0,
	246, 0, 366, 247, 248, 249, 250, 251, 0, 252,
	367, 253, 368, 254, 0, 255, 256, 257, 258, 259,
	369, 260, 261, 0, 262, 263, 264, 265, 266, 268,
	269, 267, 270, 271, 272, 273, 0, 274, 0, 275,
	276, 370, 277, 0, 281, 282, 283, 284, 0, 286,
	371, 285, 287, 288, 0, 289, 278, 279, 290, 0,
	291, 372, 373, 292, 0, 299, 293, 294, 280, 295,
	298, 374, 296, 297, 375, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 496, 377, 378, 0,
	0, 308, 840, 379, 380, 0, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 382, 383, 0, 808, 322, 170, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 0, 0,
	0, 0, 0, 0, 173, 174, 0, 175, 0, 0,
	0, 0, 328, 0, 0, 0, 0, 176, 177, 178,
	329, 330, 331, 332, 179, 333, 334, 0, 180, 335,
	336, 181, 182, 0, 0, 337, 338, 339, 0, 183,
	340, 0, 0, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 0, 0, 191, 192, 193, 0, 0,
	0, 0, 0, 0, 0, 194, 195, 391, 196, 341,
	197, 342, 343, 0, 198, 0, 199, 0, 200, 0,
	0, 201, 202, 0, 203, 0, 0, 0, 344, 204,
	205, 206, 345, 346, 0, 0, 0, 207, 208, 347,
	348, 349, 0, 209, 0, 210, 0, 0, 0, 0,
	211, 350, 0, 351, 0, 0, 212, 213, 214, 215,
	807, 353, 0, 0, 219, 0, 216, 0, 0, 217,
	354, 218, 355, 356, 357, 358, 359, 0, 360, 0,
	0, 220, 221, 222, 0, 223, 224, 225, 0, 227,
	226, 0, 361, 0, 228, 0, 0, 229, 0, 0,
	230, 0, 231, 232, 233, 235, 362, 234, 0, 236,
	237, 239, 238, 0, 0, 0, 363, 240, 364, 241,
	242, 0, 243, 0, 0, 244, 0, 0, 245, 365,
	0, 246, 0, 366, 247, 248, 249, 250, 251, 0,
	252, 367, 253, 368, 254, 0, 255, 256, 257, 258,
	259, 369, 260, 261, 0, 262, 263, 264, 265, 266,
	268, 269, 267, 270, 271, 272, 273, 0, 274, 0,
	275, 276, 370, 277, 0, 281, 282, 283, 284, 0,
	286, 371, 285, 287, 288, 0, 289, 278, 279, 290,
	0, 291, 372, 373, 292, 0, 299, 293, 294, 280,
	295, 298, 374, 296, 297, 375, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 377, 378,
	0, 0, 308, 309, 379, 380, 0, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 0, 318, 0,
	381, 319, 320, 321, 382, 383, 0, 805, 322, 170,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 0,
	0, 0, 0, 0, 0, 173, 174, 0, 175, 0,
	0, 0, 0, 328, 0, 0, 0, 0, 176, 177,
	178, 329, 330, 331, 332, 179, 333, 334, 0, 180,
	335, 336, 181, 182, 0, 0, 337, 338, 339, 0,
	183, 340, 0, 0, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 0, 0, 191, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 0, 212, 213, 214,
	215, 804, 353, 0, 0, 219, 0, 216, 0, 0,
	217, 354, 218, 355, 356, 357, 358, 359, 0, 360,
	0, 0, 220, 221, 222, 0, 223, 224, 225, 0,
	227, 226, 0, 361, 0, 228, 0, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 0,
	236, 237, 239, 238, 0, 0, 0, 363, 240, 364,
	241, 242, 0, 243, 0, 0, 244, 0, 0, 245,
	365, 0, 246, 0, 366, 247, 248, 249, 250, 251,
	0, 252, 367, 253, 368, 254, 0, 255, 256, 257,
	258, 259, 369, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	0, 275, 276, 370, 277, 0, 281, 282, 283, 284,
	0, 286, 371, 285, 287, 288, 0, 289, 278, 279,
	290, 0, 291, 372, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 374, 296, 297, 375, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 377,
	378, 0, 0, 308, 309, 379, 380, 0, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 318,
	0, 381, 319, 320, 321, 382, 383, 0, 801, 322,
	170, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	0, 0, 0, 0, 0, 0, 173, 174, 0, 175,
	0, 0, 0, 0, 328, 0, 0, 0, 0, 176,
	177, 178, 329, 330, 331, 332, 179, 333, 334, 0,
	180, 335, 336, 181, 182, 0, 0, 337, 338, 339,
	0, 183, 340, 0, 0, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 0, 0, 191, 192, 193,
	0, 0, 0, 0, 0, 0, 0, 194, 195, 391,
	196, 341, 197, 342, 343, 0, 198, 0, 199, 0,
	200, 0, 0, 201, 202, 0, 203, 0, 0, 0,
	344, 204, 205, 206, 345, 346, 0, 0, 0, 207,
	208, 347, 348, 349, 0, 209, 0, 210, 0, 0,
	0, 0, 211, 350, 0, 351, 0, 0, 212, 213,
	214, 215, 800, 353, 0, 0, 219, 0, 216, 0,
	0, 217, 354, 218, 355, 356, 357, 358, 359, 0,
	360, 0, 0, 220, 221, 222, 0, 223, 224, 225,
	0, 227, 226, 0, 361, 0, 228, 0, 0, 229,
	0, 0, 230, 0, 231, 232, 233, 235, 362, 234,
	0, 236, 237, 239, 238, 0, 0, 0, 363, 240,
	364, 241, 242, 0, 243, 0, 0, 244, 0, 0,
	245, 365, 0, 246, 0, 366, 247, 248, 249, 250,
	251, 0, 252, 367, 253, 368, 254, 0, 255, 256,
	257, 258, 259, 369, 260, 261, 0, 262, 263, 264,
	265, 266, 268, 269, 267, 270, 271, 272, 273, 0,
	274, 0, 275, 276, 370, 277, 0, 281, 282, 283,
	284, 0, 286, 371, 285, 287, 288, 0, 289, 278,
	279, 290, 0, 291, 372, 373, 292, 0, 299, 293,
	294, 280, 295, 298, 374, 296, 297, 375, 0, 300,
	0, 301, 302, 303, 304, 305, 306, 307, 0, 376,
	377, 378, 0, 0, 308, 309, 379, 380, 0, 310,
	311, 312, 313, 0, 0, 314, 315, 316, 317, 0,
	318, 0, 381, 319, 320, 321, 382, 383, 0, 798,
	322, 170, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 0, 0, 0, 0, 0, 0, 173, 174, 0,
	175, 0, 0, 0, 0, 328, 0, 0, 0, 0,
	176, 177, 178, 329, 330, 331, 332, 179, 333, 334,
	0, 180, 335, 336, 181, 182, 0, 0, 337, 338,
	339, 0, 183, 340, 0, 0, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 0, 0, 191, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	391, 196, 341, 197, 342, 343, 0, 198, 0, 199,
	0, 200, 0, 0, 201, 202, 0, 203, 0, 0,
	0, 344, 204, 205, 206, 345, 346, 0, 0, 0,
	207, 208, 347, 348, 349, 0, 209, 0, 210, 0,
	0, 0, 0, 211, 350, 0, 351, 0, 0, 212,
	213, 214, 215, 797, 353, 0, 0, 219, 0, 216,
	0, 0, 217, 354, 218, 355, 356, 357, 358, 359,
	0, 360, 0, 0, 220, 221, 222, 0, 223, 224,
	225, 0, 227, 226, 0, 361, 0, 228, 0, 0,
	229, 0, 0, 230, 0, 231, 232, 233, 235, 362,
	234, 0, 236, 237, 239, 238, 0, 0, 0, 363,
	240, 364, 241, 242, 0, 243, 0, 0, 244, 0,
	0, 245, 365, 0, 246, 0, 366, 247, 248, 249,
	250, 251, 0, 252, 367, 253, 368, 254, 0, 255,
	256, 257, 258, 259, 369, 260, 261, 0, 262, 263,
	264, 265, 266, 268, 269, 267, 270, 271, 272, 273,
	0, 274, 0, 275, 276, 370, 277, 0, 281, 282,
	283, 284, 0, 286, 371, 285, 287, 288, 0, 289,
	278, 279, 290, 0, 291, 372, 373, 292, 0, 299,
	293, 294, 280, 295, 298, 374, 296, 297, 375, 0,
	300, 0, 301, 302, 303, 304, 305, 306, 307, 0,
	376, 377, 378, 0, 0, 308, 309, 379, 380, 0,
	310, 311, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 318, 0, 381, 319, 320, 321, 382, 383, 0,
	794, 322, 170, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 0, 0, 0, 0, 0, 0, 173, 174,
	0, 175, 0, 0, 0, 0, 328, 0, 0, 0,
	0, 176, 177, 178, 329, 330, 331, 332, 179, 333,
	334, 0, 180, 335, 336, 181, 182, 0, 0, 337,
	338, 339, 0, 183, 340, 0, 0, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 0, 0, 191,
	192, 193, 0, 0, 0, 0, 0, 0, 0, 194,
	195, 391, 196, 341, 197, 342, 343, 0, 198, 0,
	199, 0, 200, 0, 0, 201, 202, 0, 203, 0,
	0, 0, 344, 204, 205, 206, 345, 346, 0, 0,
	0, 207, 208, 347, 348, 349, 0, 209, 0, 210,
	0, 0, 0, 0, 211, 350, 0, 351, 0, 0,
	212, 213, 214, 215, 793, 353, 0, 0, 219, 0,
	216, 0, 0, 217, 354, 218, 355, 356, 357, 358,
	359, 0, 360, 0, 0, 220, 221, 222, 0, 223,
	224, 225, 0, 227, 226, 0, 361, 0, 228, 0,
	0, 229, 0, 0, 230, 0, 231, 232, 233, 235,
	362, 234, 0, 236, 237, 239, 238, 0, 0, 0,
	363, 240, 364, 241, 242, 0, 243, 0, 0, 244,
	0, 0, 245, 365, 0, 246, 0, 366, 247, 248,
	249, 250, 251, 0, 252, 367, 253, 368, 254, 0,
	255, 256, 257, 258, 259, 369, 260, 261, 0, 262,
	263, 264, 265, 266, 268, 269, 267, 270, 271, 272,
	273, 0, 274, 0, 275, 276, 370, 277, 0, 281,
	282, 283, 284, 0, 286, 371, 285, 287, 288, 0,
	289, 278, 279, 290, 0, 291, 372, 373, 292, 0,
	299, 293, 294, 280, 295, 298, 374, 296, 297, 375,
	0, 300, 0, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 377, 378, 0, 0, 308, 309, 379, 380,
	0, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 0, 318, 0, 381, 319, 320, 321, 382, 383,
	170, 0, 322, 0, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 0, 0, 0, 173, 174, 782, 175,
	0, 0, 0, 0, 328, 0, 0, 0, 0, 176,
	177, 178, 329, 330, 331, 332, 179, 333, 334, 0,
	180, 335, 336, 181, 182, 0, 0, 337, 338, 339,
	0, 183, 340, 0, 0, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 0, 0, 191, 192, 193,
	0, 0, 0, 0, 0, 0, 0, 194, 195, 391,
	196, 341, 197, 342, 343, 0, 198, 0, 199, 0,
	200, 0, 0, 201, 202, 0, 203, 0, 0, 0,
	344, 204, 205, 206, 345, 346, 0, 0, 0, 207,
	208, 347, 348, 349, 0, 209, 0, 210, 0, 0,
	0, 0, 211, 350, 0, 351, 0, 0, 212, 213,
	214, 215, 352, 353, 0, 0, 219, 0, 216, 0,
	0, 217, 354, 218, 355, 356, 357, 358, 359, 0,
	360, 0, 0, 220, 221, 222, 0, 223, 224, 225,
	0, 227, 226, 0, 361, 0, 228, 0, 0, 229,
	0, 0, 230, 0, 231, 232, 233, 235, 362, 234,
	0, 236, 237, 239, 238, 0, 0, 0, 363, 240,
	364, 241, 242, 0, 243, 0, 0, 244, 0, 0,
	245, 365, 0, 246, 0, 366, 247, 248, 249, 250,
	251, 0, 252, 367, 253, 368, 254, 0, 255, 256,
	257, 258, 259, 369, 260, 261, 0, 262, 263, 264,
	265, 266, 268, 269, 267, 270, 271, 272, 273, 0,
	274, 0, 275, 276, 370, 277, 0, 281, 282, 283,
	284, 0, 286, 371, 285, 287, 288, 0, 289, 278,
	279, 290, 0, 291, 372, 373, 292, 0, 299, 293,
	294, 280, 295, 298, 374, 296, 297, 375, 0, 300,
	0, 301, 302, 303, 304, 305, 306, 307, 0, 376,
	377, 378, 0, 0, 308, 309, 379, 380, 0, 310,
	311, 312, 313, 0, 0, 314, 315, 316, 317, 0,
	318, 0, 381, 319, 320, 321, 382, 383, 0, 780,
	322, 170, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 0, 0, 0, 0, 0, 0, 173, 174, 0,
	175, 0, 0, 0, 0, 328, 0, 0, 0, 0,
	176, 177, 178, 329, 330, 331, 332, 179, 333, 334,
	0, 180, 335, 336, 181, 182, 0, 0, 337, 338,
	339, 0, 183, 340, 0, 0, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 0, 0, 191, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	391, 196, 341, 197, 342, 343, 0, 198, 0, 199,
	0, 200, 0, 0, 201, 202, 0, 203, 0, 0,
	0, 344, 204, 205, 206, 345, 346, 0, 0, 0,
	207, 208, 347, 348, 349, 0, 209, 0, 210, 0,
	0, 0, 0, 211, 350, 0, 351, 0, 0, 212,
	213, 214, 215, 779, 353, 0, 0, 219, 0, 216,
	0, 0, 217, 354, 218, 355, 356, 357, 358, 359,
	0, 360, 0, 0, 220, 221, 222, 0, 223, 224,
	225, 0, 227, 226, 0, 361, 0, 228, 0, 0,
	229, 0, 0, 230, 0, 231, 232, 233, 235, 362,
	234, 0, 236, 237, 239, 238, 0, 0, 0, 363,
	240, 364, 241, 242, 0, 243, 0, 0, 244, 0,
	0, 245, 365, 0, 246, 0, 366, 247, 248, 249,
	250, 251, 0, 252, 367, 253, 368, 254, 0, 255,
	256, 257, 258, 259, 369, 260, 261, 0, 262, 263,
	264, 265, 266, 268, 269, 267, 270, 271, 272, 273,
	0, 274, 0, 275, 276, 370, 277, 0, 281, 282,
	283, 284, 0, 286, 371, 285, 287, 288, 0, 289,
	278, 279, 290, 0, 291, 372, 373, 292, 0, 299,
	293, 294, 280, 295, 298, 374, 296, 297, 375, 0,
	300, 0, 301, 302, 303, 304, 305, 306, 307, 0,
	376, 377, 378, 0, 0, 308, 309, 379, 380, 0,
	310, 311, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 318, 0, 381, 319, 320, 321, 382, 383, 0,
	776, 322, 170, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 0, 0, 0, 0, 0, 0, 173, 174,
	0, 175, 0, 0, 0, 0, 328, 0, 0, 0,
	0, 176, 177, 178, 329, 330, 331, 332, 179, 333,
	334, 0, 180, 335, 336, 181, 182, 0, 0, 337,
	338, 339, 0, 183, 340, 0, 0, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 0, 0, 191,
	192, 193, 0, 0, 0, 0, 0, 0, 0, 194,
	195, 391, 196, 341, 197, 342, 343, 0, 198, 0,
	199, 0, 200, 0, 0, 201, 202, 0, 203, 0,
	0, 0, 344, 204, 205, 206, 345, 346, 0, 0,
	0, 207, 208, 347, 348, 349, 0, 209, 0, 210,
	0, 0, 0, 0, 211, 350, 0, 351, 0, 0,
	212, 213, 214, 215, 352, 353, 0, 0, 219, 0,
	216, 0, 0, 217, 354, 218, 355, 356, 357, 358,
	359, 0, 360, 0, 0, 220, 221, 222, 0, 223,
	224, 225, 0, 227, 226, 0, 361, 0, 228, 0,
	0, 229, 0, 0, 230, 0, 231, 232, 233, 235,
	362, 234, 0, 236, 237, 239, 238, 0, 0, 0,
	363, 240, 364, 241, 242, 0, 243, 0, 0, 244,
	0, 0, 245, 365, 0, 246, 0, 366, 247, 248,
	249, 250, 251, 0, 252, 367, 253, 368, 254, 0,
	255, 256, 257, 258, 259, 369, 260, 261, 0, 262,
	263, 264, 265, 266, 268, 269, 267, 270, 271, 272,
	273, 0, 274, 0, 275, 276, 370, 277, 0, 281,
	282, 283, 284, 0, 286, 371, 285, 287, 288, 0,
	289, 278, 279, 290, 0, 291, 372, 373, 292, 0,
	299, 293, 294, 280, 295, 298, 374, 296, 297, 375,
	0, 300, 0, 301, 302, 303, 304, 305, 306, 307,
	0, 376, 377, 378, 0, 0, 308, 309, 379, 380,
	0, 310, 311, 312, 313, 0, 0, 314, 315, 316,
	317, 0, 318, 0, 381, 319, 320, 321, 382, 383,
	0, 774, 322, 170, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 0, 0, 0, 0, 0, 0, 173,
	174, 0, 175, 0, 0, 0, 0, 328, 0, 0,
	0, 0, 176, 177, 178, 329, 330, 331, 332, 179,
	333, 334, 0, 180, 335, 336, 181, 182, 0, 0,
	337, 338, 339, 0, 183, 340, 0, 0, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 0, 0,
	191, 192, 193, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 391, 196, 341, 197, 342, 343, 0, 198,
	0, 199, 0, 200, 0, 0, 201, 202, 0, 203,
	0, 0, 0, 344, 204, 205, 206, 345, 346, 0,
	0, 0, 207, 208, 347, 348, 349, 0, 209, 0,
	210, 0, 0, 0, 0, 211, 350, 0, 351, 0,
	0, 212, 213, 214, 215, 352, 353, 0, 0, 219,
	0, 216, 0, 0, 217, 354, 218, 355, 356, 357,
	358, 359, 0, 360, 0, 0, 220, 221, 222, 0,
	223, 224, 225, 0, 227, 226, 0, 361, 0, 228,
	0, 0, 229, 0, 0, 230, 0, 231, 232, 233,
	235, 362, 234, 0, 236, 237, 239, 238, 0, 0,
	0, 363, 240, 364, 241, 242, 0, 243, 0, 0,
	244, 0, 0, 245, 365, 0, 246, 0, 366, 247,
	248, 249, 250, 251, 0, 252, 367, 253, 368, 254,
	0, 255, 256, 257, 258, 259, 369, 260, 261, 0,
	262, 263, 264, 265, 266, 268, 269, 267, 270, 271,
	272, 273, 0, 274, 0, 275, 276, 370, 277, 0,
	281, 282, 283, 284, 0, 286, 371, 285, 287, 288,
	0, 289, 278, 279, 290, 0, 291, 372, 373, 292,
	0, 299, 293, 294, 280, 295, 298, 374, 296, 297,
	375, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 377, 378, 0, 0, 308, 309, 379,
	380, 0, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 318, 0, 381, 319, 320, 321, 382,
	383, 0, 770, 322, 170, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 0, 0, 0, 0, 0, 0,
	173, 174, 0, 175, 0, 0, 0, 0, 328, 0,
	0, 0, 0, 176, 177, 178, 329, 330, 331, 332,
	179, 333, 334, 0, 180, 335, 336, 181, 182, 0,
	0, 337, 338, 339, 0, 183, 340, 0, 0, 0,
	184, 185, 186, 0, 187, 0, 188, 189, 190, 0,
	0, 191, 192, 193, 0, 0, 0, 0, 0, 0,
	0, 194, 195, 391, 196, 341, 197, 342, 343, 0,
	198, 0, 199, 0, 200, 0, 0, 201, 202, 0,
	203, 0, 0, 0, 344, 204, 205, 206, 345, 346,
	0, 0, 0, 207, 208, 347, 348, 349, 0, 209,
	0, 210, 0, 0, 0, 0, 211, 350, 0, 351,
	0, 0, 212, 213, 214, 215, 772, 353, 0, 0,
	219, 0, 216, 0, 0, 217, 354, 218, 355, 356,
	357, 358, 359, 0, 360, 0, 0, 220, 221, 222,
	0, 223, 224, 225, 0, 227, 226, 0, 361, 0,
	228, 0, 0, 229, 0, 0, 230, 0, 231, 232,
	233, 235, 362, 234, 0, 236, 237, 239, 238, 0,
	0, 0, 363, 240, 364, 241, 242, 0, 243, 0,
	0, 244, 0, 0, 245, 365, 0, 246, 0, 366,
	247, 248, 249, 250, 251, 0, 252, 367, 253, 368,
	254, 0, 255, 256, 257, 258, 259, 369, 260, 261,
	0, 262, 263, 264, 265, 266, 268, 269, 267, 270,
	271, 272, 273, 0, 274, 0, 275, 276, 370, 277,
	0, 281, 282, 283, 284, 0, 286, 371, 285, 287,
	288, 0, 289, 278, 279, 290, 0, 291, 372, 373,
	292, 0, 299, 293, 294, 280, 295, 298, 374, 296,
	297, 375, 0, 300, 0, 301, 302, 303, 304, 305,
	306, 307, 0, 376, 377, 378, 0, 0, 308, 309,
	379, 380, 0, 310, 311, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 318, 0, 381, 319, 320, 321,
	382, 383, 0, 649, 322, 170, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 0, 0, 0, 0, 0,
	0, 173, 174, 0, 175, 0, 0, 0, 0, 328,
	0, 0, 0, 0, 176, 177, 178, 329, 330, 331,
	332, 179, 333, 334, 0, 180, 335, 336, 181, 182,
	0, 0, 337, 338, 339, 0, 183, 340, 0, 0,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	0, 0, 191, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 391, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 0, 0, 211, 350, 0,
	351, 0, 0, 212, 213, 214, 215, 651, 353, 0,
	0, 219, 0, 216, 0, 0, 217, 354, 218, 355,
	356, 357, 358, 359, 0, 360, 0, 0, 220, 221,
	222, 0, 223, 224, 225, 0, 227, 226, 0, 361,
	0, 228, 0, 0, 229, 0, 0, 230, 0, 231,
	232, 233, 235, 362, 234, 0, 236, 237, 239, 238,
	0, 0, 0, 363, 240, 364, 241, 242, 0, 243,
	0, 0, 244, 0, 0, 245, 365, 0, 246, 0,
	366, 247, 248, 249, 250, 251, 0, 252, 367, 253,
	368, 254, 0, 255, 256, 257, 258, 259, 369, 260,
	261, 0, 262, 263, 264, 265, 266, 268, 269, 267,
	270, 271, 272, 273, 0, 274, 0, 275, 276, 370,
	277, 0, 281, 282, 283, 284, 0, 286, 371, 285,
	287, 288, 0, 289, 278, 279, 290, 0, 291, 372,
	373, 292, 0, 299, 293, 294, 280, 295, 298, 374,
	296, 297, 375, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 377, 378, 0, 0, 308,
	309, 379, 380, 0, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 318, 0, 381, 319, 320,
	321, 382, 383, 0, 647, 322, 170, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 0, 0, 0, 0,
	0, 0, 173, 174, 0, 175, 0, 0, 0, 0,
	328, 0, 0, 0, 0, 176, 177, 178, 329, 330,
	331, 332, 179, 333, 334, 0, 180, 335, 336, 181,
	182, 0, 0, 337, 338, 339, 0, 183, 340, 0,
	0, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 0, 0, 191, 192, 193, 0, 0, 0, 0,
	0, 0, 0, 194, 195, 391, 196, 341, 197, 342,
	343, 0, 198, 0, 199, 0, 200, 0, 0, 201,
	202, 0, 203, 0, 0, 0, 344, 204, 205, 206,
	345, 346, 0, 0, 0, 207, 208, 347, 348, 349,
	0, 209, 0, 210, 0, 0, 0, 0, 211, 350,
	0, 351, 0, 0, 212, 213, 214, 215, 352, 353,
	0, 0, 219, 0, 216, 0, 0, 217, 354, 218,
	355, 356, 357, 358, 359, 0, 360, 0, 0, 220,
	221, 222, 0, 223, 224, 225, 0, 227, 226, 0,
	361, 0, 228, 0, 0, 229, 0, 0, 230, 0,
	231, 232, 233, 235, 362, 234, 0, 236, 237, 239,
	238, 0, 0, 0, 363, 240, 364, 241, 242, 0,
	243, 0, 0, 244, 0, 0, 245, 365, 0, 246,
	0, 366, 247, 248, 249, 250, 251, 0, 252, 367,
	253, 368, 254, 0, 255, 256, 257, 258, 259, 369,
	260, 261, 0, 262, 263, 264, 265, 266, 268, 269,
	267, 270, 271, 272, 273, 0, 274, 0, 275, 276,
	370, 277, 0, 281, 282, 283, 284, 0, 286, 371,
	285, 287, 288, 0, 289, 278, 279, 290, 0, 291,
	372, 373, 292, 0, 299, 293, 294, 280, 295, 298,
	374, 296, 297, 375, 0, 300, 0, 301, 302, 303,
	304, 305, 306, 307, 0, 376, 377, 378, 0, 0,
	308, 309, 379, 380, 0, 310, 311, 312, 313, 0,
	0, 314, 315, 316, 317, 0, 318, 0, 381, 319,
	320, 321, 382, 383, 0, 499, 322, 170, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 0, 0, 0,
	0, 0, 0, 173, 174, 0, 175, 0, 0, 0,
	0, 328, 0, 0, 0, 0, 176, 177, 178, 329,
	330, 331, 332, 179, 333, 334, 0, 180, 335, 336,
	181, 182, 0, 0, 337, 338, 339, 0, 490, 340,
	0, 0, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 0, 0, 191, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 0, 0, 0, 0, 211,
	350, 0, 351, 0, 0, 212, 213, 214, 215, 352,
	353, 0, 0, 219, 0, 216, 0, 0, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 0,
	220, 221, 222, 0, 223, 224, 225, 0, 227, 226,
	0, 361, 0, 228, 0, 0, 489, 0, 0, 230,
	0, 231, 232, 233, 235, 362, 501, 0, 236, 237,
	239, 238, 0, 0, 0, 363, 240, 364, 241, 242,
	0, 243, 0, 0, 244, 0, 0, 245, 365, 0,
	246, 0, 366, 247, 248, 249, 250, 251, 0, 252,
	367, 253, 368, 254, 0, 255, 256, 257, 258, 259,
	369, 260, 261, 0, 262, 263, 264, 265, 266, 268,
	269, 267, 270, 271, 272, 273, 0, 274, 0, 275,
	276, 491, 277, 0, 281, 282, 283, 284, 0, 286,
	371, 285, 492, 288, 0, 289, 278, 279, 290, 0,
	291, 372, 373, 292, 0, 299, 293, 294, 280, 295,
	298, 374, 296, 297, 375, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 496, 377, 378, 0,
	0, 308, 494, 379, 380, 0, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 382, 383, 0, 474, 322, 170, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 0, 0,
	0, 0, 0, 0, 173, 174, 0, 175, 0, 0,
	0, 0, 328, 0, 0, 0, 0, 176, 177, 178,
	329, 330, 331, 332, 179, 333, 334, 0, 180, 335,
	336, 181, 182, 0, 0, 337, 338, 339, 0, 183,
	340, 0, 0, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 0, 0, 191, 192, 193, 0, 0,
	0, 0, 0, 0, 0, 194, 195, 391, 196, 341,
	197, 342, 343, 0, 198, 0, 199, 0, 200, 0,
	0, 201, 202, 0, 203, 0, 0, 0, 344, 204,
	205, 206, 345, 346, 0, 0, 0, 207, 208, 347,
	348, 349, 0, 209, 0, 210, 0, 0, 0, 0,
	211, 350, 0, 351, 0, 0, 212, 213, 214, 215,
	352, 353, 0, 0, 219, 0, 216, 0, 0, 217,
	354, 218, 355, 356, 357, 358, 359, 0, 360, 0,
	0, 220, 221, 222, 0, 223, 224, 225, 0, 227,
	226, 0, 361, 0, 228, 0, 0, 229, 0, 0,
	230, 0, 231, 232, 233, 235, 362, 234, 0, 236,
	237, 239, 238, 0, 0, 0, 363, 240, 364, 241,
	242, 0, 243, 0, 0, 244, 0, 0, 245, 365,
	0, 246, 0, 366, 247, 248, 249, 250, 251, 0,
	252, 367, 253, 368, 254, 0, 255, 256, 257, 258,
	259, 369, 260, 261, 0, 262, 263, 264, 265, 266,
	268, 269, 267, 270, 271, 272, 273, 0, 274, 0,
	275, 276, 370, 277, 0, 475, 282, 283, 284, 0,
	286, 371, 285, 287, 288, 0, 289, 278, 279, 290,
	0, 291, 372, 373, 292, 0, 299, 293, 294, 280,
	295, 298, 374, 296, 297, 375, 0, 300, 0, 301,
	302, 303, 304, 305, 306, 307, 0, 376, 377, 378,
	0, 0, 308, 309, 379, 380, 0, 310, 311, 312,
	313, 0, 0, 314, 315, 316, 317, 0, 318, 0,
	381, 319, 320, 321, 382, 383, 0, 472, 322, 170,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 0,
	0, 0, 0, 0, 0, 173, 174, 0, 175, 0,
	0, 0, 0, 328, 0, 0, 0, 0, 176, 177,
	178, 329, 330, 331, 332, 179, 333, 334, 0, 180,
	335, 336, 181, 182, 0, 0, 337, 338, 339, 0,
	183, 340, 0, 0, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 0, 0, 191, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 0, 212, 213, 214,
	215, 352, 353, 0, 0, 219, 0, 216, 0, 0,
	217, 354, 218, 355, 356, 357, 358, 359, 0, 360,
	0, 0, 220, 221, 222, 0, 223, 224, 225, 0,
	227, 226, 0, 361, 0, 228, 0, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 0,
	236, 237, 239, 238, 0, 0, 0, 363, 240, 364,
	241, 242, 0, 243, 0, 0, 244, 0, 0, 245,
	365, 0, 246, 0, 366, 247, 248, 249, 250, 251,
	0, 252, 367, 253, 368, 254, 0, 255, 256, 257,
	258, 259, 369, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	0, 275, 276, 370, 277, 0, 281, 282, 283, 284,
	0, 286, 371, 285, 287, 288, 0, 289, 278, 279,
	290, 0, 291, 372, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 374, 296, 297, 375, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 377,
	378, 0, 0, 308, 309, 379, 380, 0, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 318,
	0, 381, 319, 320, 321, 382, 383, 0, 464, 322,
	170, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	0, 0, 0, 0, 0, 0, 173, 174, 0, 175,
	0, 0, 0, 0, 328, 0, 0, 0, 0, 176,
	177, 178, 329, 330, 331, 332, 179, 333, 334, 0,
	180, 335, 336, 181, 182, 0, 0, 337, 338, 339,
	0, 183, 340, 0, 0, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 0, 0, 191, 192, 193,
	0, 0, 0, 0, 0, 0, 0, 194, 195, 391,
	196, 341, 197, 342, 343, 0, 198, 0, 199, 0,
	200, 0, 0, 201, 202, 0, 203, 0, 0, 0,
	344, 204, 205, 206, 345, 346, 0, 0, 0, 207,
	208, 347, 348, 349, 0, 209, 0, 210, 0, 0,
	0, 0, 211, 350, 0, 351, 0, 0, 212, 213,
	214, 215, 352, 353, 0, 0, 219, 0, 216, 0,
	0, 217, 354, 218, 355, 356, 357, 358, 359, 0,
	360, 0, 0, 220, 221, 222, 0, 223, 224, 225,
	0, 227, 226, 0, 361, 0, 228, 0, 0, 229,
	0, 0, 230, 0, 231, 232, 233, 235, 362, 234,
	0, 236, 237, 239, 238, 0, 0, 0, 363, 240,
	364, 241, 242, 0, 243, 0, 0, 244, 0, 0,
	245, 365, 0, 246, 0, 366, 247, 248, 249, 250,
	251, 0, 252, 367, 253, 368, 254, 0, 255, 256,
	257, 258, 259, 369, 260, 261, 0, 262, 263, 264,
	265, 266, 268, 269, 267, 270, 271, 272, 273, 0,
	274, 0, 275, 276, 370, 277, 0, 281, 282, 283,
	284, 0, 286, 371, 285, 287, 288, 0, 289, 278,
	279, 290, 0, 291, 372, 373, 292, 0, 299, 293,
	294, 280, 295, 298, 374, 296, 297, 375, 0, 300,
	0, 301, 302, 303, 304, 305, 306, 307, 0, 376,
	377, 378, 0, 0, 308, 309, 379, 380, 0, 310,
	311, 312, 313, 0, 0, 314, 315, 316, 317, 0,
	318, 0, 381, 319, 320, 321, 382, 383, 0, 431,
	322, 170, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 0, 0, 0, 0, 0, 0, 173, 174, 0,
	175, 0, 0, 0, 0, 328, 0, 0, 0, 0,
	176, 177, 178, 329, 330, 331, 332, 179, 333, 334,
	0, 180, 335, 336, 181, 182, 0, 0, 337, 338,
	339, 0, 183, 340, 0, 0, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 0, 0, 191, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	391, 196, 341, 197, 342, 343, 0, 198, 0, 199,
	0, 200, 0, 0, 201, 202, 0, 203, 0, 0,
	0, 344, 204, 205, 206, 345, 346, 0, 0, 0,
	207, 208, 347, 348, 349, 0, 209, 0, 210, 0,
	0, 0, 0, 211, 350, 0, 351, 0, 0, 212,
	213, 214, 215, 352, 353, 0, 0, 219, 0, 216,
	0, 0, 217, 354, 218, 355, 356, 357, 358, 359,
	0, 360, 0, 0, 220, 221, 222, 0, 223, 224,
	225, 0, 227, 226, 0, 361, 0, 228, 0, 0,
	229, 0, 0, 230, 0, 231, 232, 233, 235, 362,
	234, 0, 236, 237, 239, 238, 0, 0, 0, 363,
	240, 364, 241, 242, 0, 243, 0, 0, 244, 0,
	0, 245, 365, 0, 246, 0, 366, 247, 248, 249,
	250, 251, 0, 252, 367, 253, 368, 254, 0, 255,
	256, 257, 258, 259, 369, 260, 261, 0, 262, 263,
	264, 265, 266, 268, 269, 267, 270, 271, 272, 273,
	0, 274, 0, 275, 276, 370, 277, 0, 281, 282,
	283, 284, 0, 286, 371, 285, 287, 288, 0, 289,
	278, 279, 290, 0, 291, 372, 373, 292, 0, 299,
	293, 294, 280, 295, 298, 374, 296, 297, 375, 0,
	300, 0, 301, 302, 303, 304, 305, 306, 307, 0,
	376, 377, 378, 0, 0, 308, 309, 379, 380, 0,
	310, 311, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 318, 0, 381, 319, 320, 321, 382, 383, 170,
	0, 322, 0, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 0, 0, 0, 173, 174, 0, 175, 0,
	0, 0, 0, 328, 0, 0, 0, 0, 176, 177,
	178, 329, 330, 331, 332, 179, 333, 334, 0, 180,
	335, 336, 181, 182, 0, 0, 337, 338, 339, 0,
	183, 340, 0, 0, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 0, 0, 191, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 0, 212, 213, 214,
	215, 352, 353, 0, 0, 219, 0, 216, 0, 0,
	217, 354, 218, 355, 356, 357, 358, 359, 0, 360,
	0, 0, 220, 221, 222, 0, 223, 224, 225, 0,
	227, 226, 0, 361, 0, 228, 0, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 0,
	236, 237, 239, 238, 0, 0, 0, 363, 240, 364,
	241, 242, 0, 243, 0, 0, 244, 0, 0, 245,
	365, 0, 246, 0, 366, 247, 248, 249, 250, 251,
	0, 252, 367, 253, 368, 254, 0, 255, 256, 257,
	258, 259, 369, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	0, 275, 276, 370, 277, 0, 281, 282, 283, 284,
	0, 286, 371, 285, 287, 288, 0, 289, 278, 279,
	290, 0, 291, 372, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 374, 296, 297, 375, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 377,
	378, 0, 0, 308, 309, 379, 380, 0, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 318,
	0, 381, 319, 320, 321, 382, 383, 170, 0, 322,
	0, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	0, 0, 0, 173, 174, 0, 175, 0, 0, 0,
	0, 328, 0, 0, 0, 0, 176, 177, 178, 329,
	330, 331, 332, 179, 333, 334, 0, 180, 335, 336,
	181, 182, 0, 0, 337, 338, 339, 0, 183, 340,
	0, 0, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 0, 0, 191, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 0, 0, 0, 0, 211,
	350, 0, 351, 0, 0, 212, 213, 214, 215, 1736,
	353, 0, 0, 219, 0, 216, 0, 0, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 0,
	220, 221, 222, 0, 223, 224, 225, 0, 227, 226,
	0, 361, 0, 228, 0, 0, 229, 0, 0, 230,
	0, 231, 232, 233, 235, 362, 234, 0, 236, 237,
	239, 238, 0, 0, 0, 363, 240, 364, 241, 242,
	0, 243, 0, 0, 244, 0, 0, 245, 365, 0,
	246, 0, 366, 247, 248, 249, 250, 251, 0, 252,
	367, 253, 368, 254, 0, 255, 256, 257, 258, 259,
	369, 260, 261, 0, 262, 263, 264, 265, 266, 268,
	269, 267, 270, 271, 272, 273, 0, 274, 0, 275,
	276, 370, 277, 0, 281, 282, 283, 284, 0, 286,
	371, 285, 287, 288, 0, 289, 278, 279, 290, 0,
	291, 372, 373, 292, 0, 299, 293, 294, 280, 295,
	298, 374, 296, 297, 375, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 377, 378, 0,
	0, 308, 309, 379, 380, 0, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 382, 383, 170, 0, 322, 0, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 0, 0,
	0, 173, 174, 0, 175, 0, 0, 0, 0, 328,
	0, 0, 0, 0, 176, 177, 178, 329, 330, 331,
	332, 179, 333, 334, 0, 180, 335, 336, 181, 182,
	0, 0, 337, 338, 339, 0, 183, 340, 0, 0,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	0, 0, 191, 192, 193, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 391, 196, 341, 197, 342, 343,
	0, 198, 0, 199, 0, 200, 0, 0, 201, 202,
	0, 203, 0, 0, 0, 344, 204, 205, 206, 345,
	346, 0, 0, 0, 207, 208, 347, 348, 349, 0,
	209, 0, 210, 0, 0, 0, 0, 211, 350, 0,
	351, 0, 0, 212, 213, 214, 215, 1734, 353, 0,
	0, 219, 0, 216, 0, 0, 217, 354, 218, 355,
	356, 357, 358, 359, 0, 360, 0, 0, 220, 221,
	222, 0, 223, 224, 225, 0, 227, 226, 0, 361,
	0, 228, 0, 0, 229, 0, 0, 230, 0, 231,
	232, 233, 235, 362, 234, 0, 236, 237, 239, 238,
	0, 0, 0, 363, 240, 364, 241, 242, 0, 243,
	0, 0, 244, 0, 0, 245, 365, 0, 246, 0,
	366, 247, 248, 249, 250, 251, 0, 252, 367, 253,
	368, 254, 0, 255, 256, 257, 258, 259, 369, 260,
	261, 0, 262, 263, 264, 265, 266, 268, 269, 267,
	270, 271, 272, 273, 0, 274, 0, 275, 276, 370,
	277, 0, 281, 282, 283, 284, 0, 286, 371, 285,
	287, 288, 0, 289, 278, 279, 290, 0, 291, 372,
	373, 292, 0, 299, 293, 294, 280, 295, 298, 374,
	296, 297, 375, 0, 300, 0, 301, 302, 303, 304,
	305, 306, 307, 0, 376, 377, 378, 0, 0, 308,
	309, 379, 380, 0, 310, 311, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 318, 0, 381, 319, 320,
	321, 382, 383, 170, 0, 322, 0, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 0, 0, 0, 173,
	174, 0, 175, 0, 0, 0, 0, 328, 0, 0,
	0, 0, 176, 177, 178, 329, 330, 331, 332, 179,
	333, 334, 0, 180, 335, 336, 181, 182, 0, 0,
	337, 338, 339, 0, 183, 340, 0, 0, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 0, 0,
	191, 192, 193, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 391, 196, 341, 197, 342, 343, 0, 198,
	0, 199, 0, 200, 0, 0, 201, 202, 0, 203,
	0, 0, 0, 344, 204, 205, 206, 345, 346, 0,
	0, 0, 207, 208, 347, 348, 349, 0, 209, 0,
	210, 0, 0, 0, 0, 211, 350, 0, 351, 0,
	0, 212, 213, 214, 215, 1723, 353, 0, 0, 219,
	0, 216, 0, 0, 217, 354, 218, 355, 356, 357,
	358, 359, 0, 360, 0, 0, 220, 221, 222, 0,
	223, 224, 225, 0, 227, 226, 0, 361, 0, 228,
	0, 0, 229, 0, 0, 230, 0, 231, 232, 233,
	235, 362, 234, 0, 236, 237, 239, 238, 0, 0,
	0, 363, 240, 364, 241, 242, 0, 243, 0, 0,
	244, 0, 0, 245, 365, 0, 246, 0, 366, 247,
	248, 249, 250, 251, 0, 252, 367, 253, 368, 254,
	0, 255, 256, 257, 258, 259, 369, 260, 261, 0,
	262, 263, 264, 265, 266, 268, 269, 267, 270, 271,
	272, 273, 0, 274, 0, 275, 276, 370, 277, 0,
	281, 282, 283, 284, 0, 286, 371, 285, 287, 288,
	0, 289, 278, 279, 290, 0, 291, 372, 373, 292,
	0, 299, 293, 294, 280, 295, 298, 374, 296, 297,
	375, 0, 300, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 376, 377, 378, 0, 0, 308, 309, 379,
	380, 0, 310, 311, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 318, 0, 381, 319, 320, 321, 382,
	383, 170, 0, 322, 0, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 0, 0, 0, 173, 174, 0,
	175, 0, 0, 0, 0, 328, 0, 0, 0, 0,
	176, 177, 178, 329, 330, 331, 332, 179, 333, 334,
	0, 180, 335, 336, 181, 182, 0, 0, 337, 338,
	339, 0, 183, 340, 0, 0, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 0, 0, 191, 192,
	193, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	391, 196, 341, 197, 342, 343, 0, 198, 0, 199,
	0, 200, 0, 0, 201, 202, 0, 203, 0, 0,
	0, 344, 204, 205, 206, 345, 346, 0, 0, 0,
	207, 208, 347, 348, 349, 0, 209, 0, 210, 0,
	0, 0, 0, 211, 350, 0, 351, 0, 0, 212,
	213, 214, 215, 352, 353, 0, 0, 219, 0, 216,
	0, 0, 217, 354, 218, 355, 356, 357, 358, 359,
	0, 360, 0, 0, 220, 221, 222, 0, 223, 224,
	225, 0, 227, 226, 0, 361, 0, 228, 0, 0,
	229, 0, 0, 230, 0, 231, 232, 233, 235, 362,
	234, 0, 236, 237, 239, 238, 0, 0, 0, 363,
	240, 364, 241, 242, 0, 243, 0, 0, 244, 0,
	0, 245, 365, 0, 246, 0, 366, 247, 248, 249,
	250, 251, 0, 252, 367, 253, 368, 254, 0, 255,
	256, 257, 258, 259, 369, 260, 261, 0, 262, 263,
	264, 265, 266, 268, 269, 267, 270, 271, 272, 273,
	0, 274, 0, 275, 276, 370, 277, 0, 475, 282,
	283, 284, 0, 286, 371, 285, 287, 288, 0, 289,
	278, 279, 290, 0, 291, 372, 373, 292, 0, 299,
	293, 294, 280, 295, 298, 374, 296, 297, 375, 0,
	300, 0, 301, 302, 303, 304, 305, 306, 307, 0,
	376, 377, 378, 0, 0, 308, 309, 379, 380, 0,
	310, 311, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 318, 0, 381, 319, 320, 321, 382, 383, 170,
	0, 322, 0, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 0, 0, 0, 173, 174, 0, 175, 0,
	0, 0, 0, 328, 0, 1205, 0, 0, 176, 177,
	178, 329, 330, 331, 332, 179, 333, 334, 0, 180,
	335, 336, 181, 182, 0, 0, 337, 338, 339, 0,
	183, 340, 0, 0, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 0, 0, 191, 192, 193, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 391, 196,
	341, 197, 342, 343, 0, 198, 0, 199, 0, 200,
	0, 0, 201, 202, 0, 203, 0, 0, 0, 344,
	204, 205, 206, 345, 346, 0, 0, 0, 207, 208,
	347, 348, 349, 0, 209, 0, 210, 0, 0, 0,
	0, 211, 350, 0, 351, 0, 0, 212, 213, 214,
	215, 352, 353, 0, 0, 219, 0, 216, 0, 0,
	217, 354, 218, 355, 356, 357, 358, 359, 0, 360,
	0, 0, 220, 221, 222, 0, 223, 224, 225, 0,
	227, 226, 0, 361, 0, 228, 0, 0, 229, 0,
	0, 230, 0, 231, 232, 233, 235, 362, 234, 0,
	236, 237, 239, 238, 0, 0, 0, 363, 240, 364,
	241, 242, 0, 243, 0, 0, 244, 0, 0, 245,
	365, 0, 246, 0, 366, 247, 248, 249, 250, 251,
	0, 252, 367, 253, 368, 254, 0, 255, 256, 257,
	258, 259, 369, 260, 261, 0, 262, 263, 264, 265,
	266, 268, 269, 267, 270, 271, 272, 273, 0, 274,
	0, 275, 276, 370, 277, 0, 281, 282, 283, 284,
	0, 286, 371, 285, 287, 288, 0, 0, 278, 279,
	290, 0, 291, 372, 373, 292, 0, 299, 293, 294,
	280, 295, 298, 374, 296, 297, 375, 0, 300, 0,
	301, 302, 303, 304, 305, 306, 307, 0, 376, 377,
	378, 0, 0, 308, 309, 379, 380, 0, 310, 311,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 318,
	0, 381, 319, 320, 321, 382, 383, 170, 0, 322,
	0, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	0, 0, 0, 173, 174, 0, 175, 0, 0, 0,
	0, 328, 0, 0, 0, 0, 176, 177, 178, 329,
	330, 331, 332, 179, 333, 334, 0, 180, 335, 336,
	181, 182, 0, 0, 337, 338, 339, 0, 183, 340,
	0, 0, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 0, 0, 191, 192, 193, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 391, 196, 341, 197,
	342, 343, 0, 198, 0, 199, 0, 200, 0, 0,
	201, 202, 0, 203, 0, 0, 0, 344, 204, 205,
	206, 345, 346, 0, 0, 0, 207, 208, 347, 348,
	349, 0, 209, 0, 210, 0, 0, 0, 0, 211,
	350, 0, 351, 0, 0, 212, 213, 214, 215, 352,
	353, 0, 0, 219, 0, 216, 0, 0, 217, 354,
	218, 355, 356, 357, 358, 359, 0, 360, 0, 0,
	220, 221, 222, 0, 223, 224, 225, 0, 227, 226,
	0, 361, 0, 228, 0, 0, 229, 0, 0, 230,
	0, 231, 232, 233, 235, 362, 234, 0, 236, 237,
	239, 238, 0, 0, 0, 363, 240, 364, 241, 242,
	0, 243, 0, 0, 244, 0, 0, 245, 365, 0,
	246, 0, 366, 247, 248, 249, 250, 251, 0, 252,
	367, 253, 368, 254, 0, 255, 256, 257, 258, 259,
	369, 613, 261, 0, 262, 263, 264, 265, 266, 268,
	269, 267, 270, 271, 272, 273, 0, 274, 0, 275,
	276, 370, 277, 0, 281, 282, 283, 284, 0, 286,
	371, 285, 287, 288, 0, 289, 278, 279, 290, 0,
	291, 372, 373, 292, 0, 299, 293, 294, 280, 295,
	298, 374, 296, 297, 375, 0, 300, 0, 301, 302,
	303, 304, 305, 306, 307, 0, 376, 377, 378, 0,
	0, 308, 309, 379, 380, 0, 310, 311, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 318, 0, 381,
	319, 320, 321, 382, 383, 0, 0, 322, 0, 0,
	0, 0, 323, 324, 325, 326, 327, 1080, 1081, 0,
	1100, 1101, 1102, 1110, 1111, 1112, 0, 0, 0, 0,
	0, 0, 0, 1103, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 1114, 0, 1080, 1081, 0, 1100, 1101,
	1102, 1110, 1111, 1112, 0, 0, 0, 0, 0, 0,
	0, 1103, 0, 0, 1082, 0, 0, 0, 1083, 0,
	1097, 1114, 0, 1080, 1081, 0, 1100, 1101, 1102, 1110,
	1111, 1112, 0, 0, 0, 0, 0, 0, 0, 1103,
	0, 0, 1082, 0, 0, 0, 1083, 0, 1097, 1114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 0, 0, 1088, 1097, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 1115, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 1115, 0, 0, 0, 1105, 0,
	0, 1088, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 1113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1107, 1115, 0, 0, 0, 1105, 0, 0, 1104,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 1113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1105, 0, 0, 1104, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 1108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 1814, 1815, 0,
	1832, 1833, 1834, 0, 0, 0, 0, 0, 0, 0,
	0, 1108, 0, 1996, 0, 0, 0, 0, 0, 0,
	0, 1080, 1081, 1099, 1100, 1101, 1102, 1110, 1111, 1112,
	0, 0, 0, 0, 0, 0, 0, 1103, 0, 1108,
	0, 0, 0, 0, 1083, 0, 0, 1114, 0, 0,
	1829, 1106, 0, 0, 1094, 1095, 1096, 1109, 0, 1093,
	1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090, 1082, 0,
	0, 0, 0, 0, 1097, 0, 1855, 0, 0, 1106,
	0, 0, 1094, 1095, 1096, 1109, 0, 1093, 1091, 1092,
	1084, 1085, 1086, 1087, 1089, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 1854, 1820, 0, 1106, 0, 0,
	1094, 1095, 1096, 1109, 0, 1093, 1091, 1092, 1084, 1085,
	1086, 1087, 1089, 1090, 0, 0, 0, 0, 0, 1088,
	1080, 1081, 1806, 1100, 1101, 1102, 1110, 1111, 1112, 0,
	0, 0, 0, 1835, 0, 0, 1103, 0, 0, 1107,
	1115, 0, 0, 1083, 0, 0, 1114, 0, 0, 0,
	0, 0, 0, 0, 1830, 0, 0, 1113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 1105, 1097, 0, 0, 0, 0, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1831, 1088, 1080,
	1081, 0, 1100, 1101, 1102, 1110, 1111, 1112, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 1107, 1115,
	0, 1099, 1083, 0, 0, 1114, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 1108, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 0,
	0, 1105, 1097, 0, 0, 0, 0, 1098, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 1826, 1827, 1828, 0, 0, 1825,
	1823, 1824, 1816, 1817, 1818, 1819, 1821, 1822, 0, 0,
	0, 0, 0, 0, 0, 1106, 0, 1088, 1094, 1095,
	1096, 1109, 0, 1093, 1091, 1092, 1084, 1085, 1086, 1087,
	1089, 1090, 0, 0, 0, 0, 2369, 1107, 1115, 0,
	1099, 0, 1080, 1081, 0, 1100, 1101, 1102, 1110, 1111,
	1112, 0, 0, 0, 0, 1113, 1108, 0, 1103, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 1114, 0,
	1105, 0, 0, 0, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 0, 0, 1094, 1095, 1096,
	1109, 0, 1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089,
	1090, 0, 0, 0, 0, 2350, 0, 0, 0, 1099,
	1088, 1080, 1081, 0, 1100, 1101, 1102, 1110, 1111, 1112,
	0, 0, 0, 0, 0, 1108, 0, 1103, 0, 0,
	1107, 1115, 0, 0, 1083, 0, 0, 1114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 0, 0, 1105, 1097, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1106, 1104, 0, 1094, 1095, 1096, 1109,
	0, 1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090,
	0, 0, 0, 0, 2296, 0, 0, 0, 0, 1088,
	1080, 1081, 0, 1100, 1101, 1102, 1110, 1111, 1112, 0,
	0, 0, 0, 0, 0, 0, 1103, 0, 0, 1107,
	1115, 0, 1099, 1083, 0, 0, 1114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1108, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 1105, 1097, 0, 0, 0, 0, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1106, 0, 1088, 1094,
	1095, 1096, 1109, 0, 1093, 1091, 1092, 1084, 1085, 1086,
	1087, 1089, 1090, 0, 0, 0, 0, 2291, 1107, 1115,
	0, 1099, 0, 1080, 1081, 0, 1100, 1101, 1102, 1110,
	1111, 1112, 0, 0, 0, 0, 1113, 1108, 0, 1103,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 1114,
	0, 1105, 0, 0, 0, 0, 0, 1098, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1106, 0, 0, 1094, 1095,
	1096, 1109, 0, 1093, 1091, 1092, 1084, 1085, 1086, 1087,
	1089, 1090, 0, 0, 0, 0, 2287, 0, 0, 0,
	1099, 1088, 1080, 1081, 0, 1100, 1101, 1102, 1110, 1111,
	1112, 0, 0, 0, 0, 0, 1108, 0, 1103, 0,
	0, 1107, 1115, 0, 0, 1083, 0, 0, 1114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 0, 1105, 1097, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 1104, 0, 1094, 1095, 1096,
	1109, 0, 1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089,
	1090, 0, 0, 0, 0, 2267, 0, 0, 0, 0,
	1088, 1080, 1081, 0, 1100, 1101, 1102, 1110, 1111, 1112,
	0, 0, 0, 0, 0, 0, 0, 1103, 0, 0,
	1107, 1115, 0, 1099, 1083, 0, 0, 1114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1113, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 0, 0, 1105, 1097, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1106, 0, 1088,
	1094, 1095, 1096, 1109, 0, 1093, 1091, 1092, 1084, 1085,
	1086, 1087, 1089, 1090, 0, 0, 0, 0, 2210, 1107,
	1115, 0, 1099, 0, 1080, 1081, 0, 1100, 1101, 1102,
	1110, 1111, 1112, 0, 0, 0, 0, 1113, 1108, 0,
	1103, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	1114, 0, 1105, 0, 0, 0, 0, 0, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1106, 0, 0, 1094,
	1095, 1096, 1109, 0, 1093, 1091, 1092, 1084, 1085, 1086,
	1087, 1089, 1090, 0, 0, 0, 0, 2209, 0, 0,
	0, 1099, 1088, 1080, 1081, 0, 1100, 1101, 1102, 1110,
	1111, 1112, 0, 0, 0, 0, 0, 1108, 0, 1103,
	0, 0, 1107, 1115, 0, 0, 1083, 0, 0, 1114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 0, 0, 1105, 1097, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1106, 1104, 0, 1094, 1095,
	1096, 1109, 0, 1093, 1091, 1092, 1084, 1085, 1086, 1087,
	1089, 1090, 0, 0, 0, 0, 2149, 0, 0, 0,
	0, 1088, 1080, 1081, 0, 1100, 1101, 1102, 1110, 1111,
	1112, 0, 0, 0, 0, 0, 0, 0, 1103, 0,
	0, 1107, 1115, 0, 1099, 1083, 1814, 1815, 1114, 1832,
	1833, 1834, 0, 0, 0, 0, 0, 0, 0, 1113,
	1108, 0, 1995, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 0, 1105, 1097, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1829,
	0, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1106, 0,
	1088, 1094, 1095, 1096, 1109, 0, 1093, 1091, 1092, 1084,
	1085, 1086, 1087, 1089, 1090, 0, 0, 0, 0, 2114,
	1107, 1115, 0, 1099, 1820, 1080, 1081, 0, 1100, 1101,
	1102, 1110, 1111, 1112, 0, 0, 0, 0, 1113, 1108,
	0, 1103, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 1114, 0, 1105, 0, 0, 0, 0, 0, 1098,
	0, 0, 1835, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 0, 0, 0, 0, 0, 1097, 0,
	0, 0, 0, 1830, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1106, 0, 0,
	1094, 1095, 1096, 1109, 0, 1093, 1091, 1092, 1084, 1085,
	1086, 1087, 1089, 1090, 0, 0, 0, 0, 2027, 0,
	0, 0, 1099, 1088, 1080, 1081, 0, 1100, 1101, 1102,
	1110, 1111, 1112, 0, 0, 0, 0, 0, 1108, 0,
	1103, 0, 0, 1107, 1115, 0, 1831, 1083, 0, 0,
	1114, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 1105, 1097, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1106, 1104, 0, 1094,
	1095, 1096, 1109, 0, 1093, 1091, 1092, 1084, 1085, 1086,
	1087, 1089, 1090, 0, 0, 0, 0, 2003, 0, 0,
	0, 0, 1088, 1826, 1827, 1828, 0, 0, 1825, 1823,
	1824, 1816, 1817, 1818, 1819, 1821, 1822, 0, 0, 0,
	0, 0, 1107, 1115, 0, 1099, 0, 1080, 1081, 0,
	1100, 1101, 1102, 1110, 1111, 1112, 0, 0, 0, 0,
	1113, 1108, 0, 1103, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 1114, 0, 1105, 0, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1106,
	0, 0, 1094, 1095, 1096, 1109, 0, 1093, 1091, 1092,
	1084, 1085, 1086, 1087, 1089, 1090, 0, 0, 0, 0,
	1501, 0, 0, 0, 1099, 1088, 2443, 0, 0, 1814,
	1815, 0, 1832, 1833, 1834, 0, 0, 0, 0, 0,
	1108, 0, 0, 0, 0, 1107, 1115, 0, 1080, 1081,
	0, 1100, 1101, 1102, 1110, 1111, 1112, 0, 0, 0,
	0, 0, 0, 1113, 1103, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 1114, 0, 0, 0, 1105, 0,
	0, 0, 1829, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1106, 1104,
	0, 1094, 1095, 1096, 1109, 0, 1093, 1091, 1092, 1084,
	1085, 1086, 1087, 1089, 1090, 2442, 0, 1776, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1820, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 1099, 1846, 0,
	0, 1845, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1108, 0, 1835, 1107, 1115, 0, 1080,
	1081, 0, 1100, 1101, 1102, 1110, 1111, 1112, 0, 0,
	0, 0, 0, 0, 1113, 1103, 1830, 0, 0, 0,
	1680, 0, 1083, 0, 0, 1114, 0, 0, 0, 1105,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 0,
	0, 0, 1097, 0, 0, 0, 0, 0, 0, 0,
	1104, 1106, 0, 0, 1094, 1095, 1096, 1109, 0, 1093,
	1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090, 0, 0,
	0, 0, 1681, 0, 0, 0, 0, 0, 0, 1831,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 1099, 1365,
	0, 0, 0, 0, 0, 1080, 1081, 0, 1100, 1101,
	1102, 1110, 1111, 1112, 1108, 0, 0, 1107, 1115, 0,
	0, 1103, 0, 0, 0, 1364, 0, 0, 1083, 0,
	0, 1114, 0, 0, 0, 1113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1105, 0, 1082, 0, 0, 0, 1098, 0, 1097, 0,
	0, 0, 0, 0, 0, 0, 1826, 1827, 1828, 0,
	0, 1825, 1823, 1824, 1816, 1817, 1818, 1819, 1821, 1822,
	0, 1104, 1106, 0, 0, 1094, 1095, 1096, 1109, 0,
	1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 1107, 1115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1108, 0, 0, 0, 0,
	0, 1113, 0, 0, 1080, 1081, 0, 1100, 1101, 1102,
	1110, 1111, 1112, 0, 0, 0, 1105, 0, 0, 0,
	1103, 0, 1098, 0, 0, 0, 0, 1083, 0, 0,
	1114, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	0, 1082, 0, 0, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 1106, 0, 0, 1094, 1095, 1096, 1109,
	0, 1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1108, 1088, 1080, 1081, 0, 1100, 1101, 1102, 1110,
	1111, 1112, 0, 0, 0, 0, 0, 0, 0, 1103,
	0, 0, 1107, 1115, 0, 0, 1083, 0, 0, 1114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 0, 0, 1105, 1097, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 0, 1106,
	0, 0, 1094, 1095, 1096, 1109, 0, 1093, 1091, 1092,
	1084, 1085, 1086, 1087, 1089, 1090, 1104, 560, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 1080, 1081, 0, 1100, 1101, 1102, 1110, 1111,
	1112, 0, 0, 0, 0, 0, 0, 0, 1103, 0,
	0, 1107, 1115, 0, 1099, 1083, 0, 0, 1114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1113,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 0, 1105, 1097, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1106, 0,
	1088, 1094, 1095, 1096, 1109, 1852, 1093, 1091, 1092, 1084,
	1085, 1086, 1087, 1089, 1090, 0, 0, 0, 0, 0,
	1107, 1115, 0, 1099, 0, 1080, 1081, 0, 1100, 1101,
	1102, 1110, 1111, 1112, 0, 0, 0, 0, 1113, 1108,
	0, 1103, 0, 0, 0, 1847, 0, 0, 1083, 0,
	0, 1114, 0, 1105, 0, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 2007, 0, 0, 0, 0,
	0, 0, 1082, 0, 0, 0, 0, 0, 1097, 0,
	0, 0, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1106, 0, 0,
	1094, 1095, 1096, 1109, 0, 1093, 1091, 1092, 1084, 1085,
	1086, 1087, 1089, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 1088, 1080, 1081, 0, 1100, 1101, 1102,
	1110, 1111, 1112, 0, 0, 0, 0, 0, 1108, 0,
	1103, 0, 0, 1107, 1115, 0, 0, 1083, 0, 0,
	1114, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 1105, 1097, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1106, 1104, 0, 1094,
	1095, 1096, 1109, 0, 1093, 1091, 1092, 1084, 1085, 1086,
	1087, 1089, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 1115, 0, 1099, 0, 1080, 1081, 0,
	1100, 1101, 1102, 1110, 1111, 1112, 0, 0, 0, 0,
	1113, 1108, 0, 1103, 0, 0, 0, 1805, 0, 0,
	1083, 0, 0, 1114, 0, 1105, 0, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1106,
	0, 0, 1094, 1095, 1096, 1109, 0, 1093, 1091, 1092,
	1084, 1085, 1086, 1087, 1089, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 1088, 1080, 1081, 0, 1100,
	1101, 1102, 1110, 1111, 1112, 0, 0, 0, 0, 0,
	1108, 0, 1103, 0, 0, 1107, 1115, 0, 0, 1083,
	0, 0, 1114, 0, 1080, 1081, 0, 1100, 1101, 1102,
	1110, 1111, 1112, 1113, 0, 0, 0, 0, 0, 0,
	1103, 0, 0, 1082, 0, 0, 0, 1083, 1105, 1097,
	1114, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 0, 1097, 1106, 1104,
	0, 1094, 1095, 1096, 1109, 0, 1093, 1091, 1092, 1084,
	1085, 1086, 1087, 1089, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1107, 1115, 0, 1099, 0, 0,
	0, 0, 1088, 1080, 1081, 0, 1100, 1101, 1102, 1110,
	1111, 1112, 1113, 1108, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 1115, 0, 0, 1083, 1105, 0, 1114,
	0, 0, 0, 1098, 0, 0, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 0, 0, 1105, 1097, 0, 1104, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1106, 0, 0, 1094, 1095, 1096, 1109, 0, 1093,
	1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 1088, 1080, 1081, 0, 1100, 1101, 1102, 1110, 1111,
	1112, 0, 1108, 0, 0, 0, 0, 0, 0, 0,
	0, 1107, 1115, 0, 1099, 1083, 0, 0, 1114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1113,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 0, 1105, 1097, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1106, 0, 0, 1094, 1095, 1096, 1109, 0, 1093, 1091,
	1092, 1084, 1085, 1086, 1087, 1089, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1106, 0,
	1088, 1094, 1095, 1096, 1109, 0, 1093, 1091, 1092, 1084,
	1085, 1086, 1087, 1089, 1090, 0, 0, 0, 0, 0,
	1107, 1115, 0, 1099, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 1253, 1243, 1272, 1235,
	1263, 1262, 0, 1105, 1237, 1236, 0, 0, 0, 1098,
	1274, 1273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1268, 0, 1260, 1259, 0, 0,
	0, 0, 0, 0, 0, 0, 1258, 1106, 0, 0,
	1094, 1095, 1096, 1109, 0, 1093, 1091, 1092, 1084, 1085,
	1086, 1087, 1089, 1090, 1257, 1255, 1256, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1108, 0,
	0, 0, 0, 0, 0, 1246, 1245, 1247, 1248, 1249,
	1250, 1251, 0, 1271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1239, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1261, 0, 0, 0, 1244, 0, 0,
	0, 0, 0, 0, 0, 0, 1106, 0, 0, 1094,
	1095, 1096, 1109, 0, 1093, 1091, 1092, 1084, 1085, 1086,
	1087, 1089, 1090, 0, 0, 0, 1254, 0, 0, 0,
	1436, 1434, 1435, 1438, 1437, 0, 0, 0, 1253, 1243,
	1272, 1235, 1263, 1262, 0, 0, 1237, 1236, 0, 0,
	0, 0, 1274, 1273, 0, 0, 1240, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1252, 1241, 0,
	0, 0, 0, 0, 0, 0, 520, 1276, 480, 0,
	0, 0, 0, 0, 0, 0, 1268, 0, 1260, 1259,
	1238, 0, 0, 1269, 1270, 0, 525, 0, 1258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 523, 0,
	0, 0, 0, 0, 0, 1242, 1257, 1255, 1256, 0,
	1275, 0, 0, 0, 0, 0, 0, 0, 0, 524,
	0, 0, 0, 0, 526, 0, 0, 0, 0, 532,
	533, 0, 0, 542, 0, 0, 0, 1246, 1245, 1247,
	1248, 1249, 1250, 1251, 0, 1271, 0, 482, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	545, 0, 0, 1239, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1261, 0, 0, 0, 1244,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 529, 530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1254, 0,
	0, 0, 0, 536, 0, 0, 531, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 483, 1240, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1252,
	1241, 0, 0, 0, 0, 0, 0, 0, 0, 1276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1238, 0, 0, 1269, 1270, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1242, 0, 0,
	0, 0, 1275, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 522, 539, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	0, 0, 0, 544, 0, 0, 0, 485, 0, 0,
	0, 0, 537, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 543,
}
var sqlPact = [...]int{

	287, -1000, -9, -1000, -1000, 148, -1000, -1000, -1000, 146,
	143, 142, -1000, 139, 130, 122, 115, 114, 113, 110,
	109, 106, 105, 104, -1000, 102, 101, -1000, -1000, -1000,
	100, 99, 97, 96, 94, 93, 89, 1069, 23449, 87,
	86, 1250, 35605, 85, 84, 82, 77, 982, 76, 75,
	26959, 838, 1538, 68, 67, 63, 62, 60, 918, 35287,
	904, 2401, 1110, 1579, 34966, 23128, 1577, 2009, 34645, -1000,
	-1000, 34324, 1289, 59, 57, 54, -1000, -1000, 34003, 51,
	49, 48, 46, 44, 41, 39, 34, 33, 32, 30,
	27, 26, 25, -1000, 23, 21, 19, 41654, 16, 14,
	13, 1100, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 95, -1000, 883, 337, 18592, 968, 960,
	958, 952, 954, 37513, 35605, 12, -34, 11, -1000, 1919,
	623, 20534, 287, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26638, 26317,
	33682, 33361, 792, -1000, -17, 24721, 35605, -1000, 117, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 14583, 14226, 497,
	117, -1000, -1000, -1000, -1000, -1000, 33040, -1000, 32719, 32398,
	1448, 32077, -1000, -1000, -1000, -1000, 31756, -1000, -1000, 1709,
	1592, 1591, 25996, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 31438, 31117, 30796, 30475, 30154,
	452, -1000, -1000, -1000, 17268, -1000, -1000, -1000, -1000, 9,
	-1000, -1000, -1000, 8, 2, -2, -4, 1156, -1000, -1000,
	-16, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35605,
	-1000, 15612, -1000, 450, -1000, 1563, -1000, 15612, -1000, 1153,
	-1000, -1000, -1000, -1000, -1000, 35605, -1000, -1000, 2050, -1000,
	-1000, -1000, -1000, -1000, -1000, 872, -1000, -1000, -1000, 2056,
	1138, 449, 29833, -1000, 1530, -1000, 555, 745, -1000, -1000,
	-1000, 18260, 152, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1740, 22807, 1299, 1851, 1707, 2054, 1314, 1705,
	1702, 1691, 1678, 1667, 2053, 989, 2048, 1688, 927, 2044,
	1662, 1231, 630, 2042, 1562, 1561, -1000, -1000, -1000, 28231,
	-1000, -1000, 883, -1000, -1000, -1000, 1359, 1818, 1818, 1818,
	1868, 264, 256, -1000, 95, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2019, -1000, -1000, -1000, -1000,
	2027, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1132,
	-1000, -1000, 1132, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	791, 36877, -18, 35605, -1000, 448, -18, -1000, -1000, 446,
	-1000, 10684, 10684, -1000, -1000, -1000, -1000, -1000, 8969, 2308,
	-1000, 340, -183, 286, 535, -1000, 19565, 22145, -1000, -1000,
	1171, 1733, 592, -1000, 1008, 1731, 490, -1000, 993, -1000,
	971, 1729, -159, 23767, 24721, -17, -27, -1000, -1000, -1000,
	5879, 41006, -1000, -1000, 15612, 15612, 15612, 15612, 15612, 1063,
	480, -1000, 445, 441, 7239, -1000, -1000, 2025, -1000, -1000,
	-1000, 276, -1000, -1000, 15612, 117, -1000, -1000, -1000, -1000,
	440, 2037, -1000, 583, -1000, -1000, -1000, 561, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1601, 439, 437,
	435, -1000, -1000, -1000, -1000, 431, 429, 425, 413, 410,
	401, 400, 398, 397, 396, 395, 391, 389, 388, 387,
	1036, -1000, 589, -1000, -1000, 589, 589, -1000, 375, 375,
	378, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 375,
	-1000, -1000, -1000, 537, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 386, 41006, -1000, 863, 21178, 117, -1000, -1000, -1000,
	-1000, 385, 1276, 564, -1000, 275, -1000, 29512, 564, 1267,
	-1000, -1000, -1000, 28231, -1000, 35605, -1000, 35605, -1000, 891,
	-1000, 37195, 131, 1725, -1000, -1000, 131, 1717, -1000, 121,
	1716, -1000, -1000, -1000, 1712, -1000, -27, 1711, -1000, -1000,
	15612, -40, -1000, -1000, -1000, 623, -1000, -1000, -1000, -1000,
	-1000, 24085, 1455, 383, 41006, 1910, 41581, 23767, 41006, 24085,
	-1000, -1000, -1000, -1000, -1000, 35605, -1000, 15612, -1000, 1906,
	1433, 1, -1000, -1000, -1000, -1000, -1000, 1323, 1411, 709,
	2414, 17930, 17600, 1804, -1000, -1000, -1000, 150, 6209, -1000,
	-1000, -1000, -1000, -1000, -1000, 29191, -1000, -1000, -1000, 1166,
	35605, -1000, -1000, 1594, -1000, 24085, 35605, -1000, 35605, -1000,
	35605, -1000, 35605, -1000, 35605, -1000, -1000, -1000, -1000, -1000,
	288, -1000, 1593, -1000, -1000, 35605, -1000, 1320, -1000, -1000,
	-1000, 28873, 28552, -1000, 981, 811, 133, -1000, -1000, 1359,
	-1000, 1163, 1382, 13869, 1353, 15612, 95, -1000, -1000, 95,
	95, 8269, -1000, -1000, -1000, -1000, -1000, -1000, 1, -1000,
	36877, -1000, 35605, -18, 1905, 35605, -1000, 136, -1000, 40155,
	-1000, 136, -41, -1000, 41006, -1000, 1417, 1406, 20856, 1386,
	1071, 1071, 1071, -1000, 382, 473, 535, 5204, 13526, -1000,
	27277, 1102, 180, 258, 19243, 2308, -1000, 35605, -28, 939,
	-1000, 25675, 1846, 1844, 1821, 28231, 1882, 120, 1554, 786,
	28231, 780, 1881, 120, 1553, 777, 35605, 6209, 533, -1000,
	35605, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	41379, 41581, 6209, 807, 15612, 15612, 15612, 15612, 15612, 15612,
	15612, 15612, 15612, 15612, 15612, 15612, 15612, 15612, 15612, 15612,
	15612, 15612, 15612, 15612, 15612, 15612, 1278, 15612, 773, 15612,
	15612, 15612, 15612, 1326, 1093, 363, 1139, -1000, 2010, 2010,
	2010, 41143, 41143, 370, 480, -1000, 15612, -1000, 120, 13169,
	256, 39535, -19, 6896, -1000, -1000, -1000, 8612, 587, 41006,
	117, 4748, -1000, 2023, 852, 1599, 1480, 380, 508, 476,
	365, 15612, 15612, 12826, 12469, 12112, 15955, 11755, 15612, 7582,
	15612, 15612, 15612, 15612, 11398, 11041, -1000, 379, -1000, -1000,
	-1000, -1000, 2022, -1000, -1000, 2021, -1000, 805, 801, 2011,
	-1000, 1550, -42, -1000, -1000, 25357, 1902, 1699, -1000, 1041,
	-1000, 1901, 35605, 1149, 1266, -1000, -1000, 718, 1685, 572,
	342, 1897, 342, 21501, -1000, 35605, -1000, 35605, -1000, -1000,
	35605, -1000, 35605, -1000, 35605, 35605, 35605, 35605, -43, 41006,
	2483, 25039, 772, -1000, 607, 25357, 10, -52, -1000, 795,
	-1000, -1000, -1000, -1000, 332, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 378, 1036, 375,
	375, 375, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 537,
	-1000, -1000, 589, 589, 589, -1000, -1000, -50, -1000, 1549,
	-1000, 547, -57, 635, 1, -1000, 1132, -1000, 925, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2034, -23, -1000, -1000, -23, -1000, -1000, 6209,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35605, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 239, -1000, -1000, -1000,
	-1000, -1000, -1000, 35605, 35605, 35605, -1000, 28231, -1000, -1000,
	-1000, -1000, 41006, -1000, 354, -1000, -1000, 41006, 928, 1435,
	-1000, 1435, -24, -1000, 40039, 1400, 35605, -1000, -1000, 374,
	-58, 572, 10684, 20211, 6209, -1000, 572, 8969, -1000, 20856,
	20856, 1104, 1405, 20856, -1000, -1000, -1000, -1000, 27277, 351,
	535, 27277, -1000, 2008, 1371, -60, -1000, -1000, -1000, 35605,
	373, -1000, 535, 255, 922, 35605, 35605, 35605, -1000, -1000,
	1243, 36559, 1229, 41581, 35605, -1000, 371, 369, 1396, 1388,
	35605, 35605, 36241, 35923, 35605, 1123, 120, -1000, 368, 35605,
	978, 35605, 120, -1000, 364, 35605, 943, -1000, 1460, 1167,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 554, 823, 823, 720, 720, 720, 720, 2012, 2371,
	678, 669, 4049, 4049, 4049, 2505, 851, 851, 4049, 4049,
	4049, 41143, 41034, 233, 15612, 15612, 767, 1081, 363, 233,
	15612, 233, 233, 233, 233, -1000, 1431, -1000, -1000, -1000,
	-1000, 1544, 362, 15955, 15955, -1000, -1000, -1000, 7239, 16285,
	-1000, -1000, -1000, -1000, 361, 15612, -1000, 39644, -206, -66,
	-1000, -1000, 15612, -81, -95, -1000, -1000, 802, -1000, 15612,
	-1000, -31, 15612, 15612, 15612, 254, -1000, 251, -1000, 755,
	-1000, 752, 742, 739, -1000, 358, 1085, 355, 353, 15612,
	-1000, -1000, -1000, -1000, -1000, -1000, 40897, 37893, 249, -1000,
	1531, -109, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 247,
	-1000, 246, -1000, 40764, -109, 245, 3271, -1000, 15955, 15955,
	15955, 7239, 349, 243, -1000, 39908, -109, 40655, 10341, 10341,
	10341, 241, 40522, 15612, -109, 37865, 37837, 3834, -67, -68,
	-1000, -74, -1000, 2005, -75, 230, 545, 540, 229, 850,
	1527, 35605, 218, -82, -26, 41581, -1000, -1000, -1000, -1000,
	-1000, 35605, 453, 35605, 120, 35605, 2032, 120, 35605, 1676,
	1722, 510, 35605, 917, 15612, 1035, -1000, 19888, 595, 35605,
	917, 116, -1000, -1000, -1000, 526, 35605, -1000, -1000, 131,
	131, -1000, 121, -1000, -27, -1000, 15612, -1000, -1000, 35605,
	23767, -85, -1000, -1000, 41581, -1000, 477, 703, -1000, 1999,
	563, 23767, 35605, -1000, 1421, -1000, -1000, 897, -1000, 1021,
	-1000, 18922, -1000, -33, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 928, -1000, 15612, 1993, -1000, -1000, -1000, 8269, -1000,
	-1000, -1000, 35605, -168, 10, -1000, 1477, -1000, -96, -1000,
	2308, -1000, 1477, -1000, -1000, 1104, -1000, 347, 15612, 20856,
	-1000, 472, -1000, -98, -1000, 27277, -1000, 470, -194, -1000,
	521, -1000, 535, 343, 35605, 27277, -1000, -1000, -1000, 738,
	714, 1664, -1000, 1220, -1000, 600, -1000, 988, 15612, 16945,
	341, 339, 1045, -1000, 1660, 1190, 1657, 1190, -1000, -28,
	931, -1000, 15612, -1000, 712, -1000, -1000, 15612, -1000, 711,
	563, 1521, 825, 15612, 233, 233, 15612, 15955, 15955, -1000,
	233, -1000, -1000, -1000, -1000, -1000, 1514, 338, 15612, 41581,
	39426, 38107, -99, -1000, 9998, -30, -1000, 15612, -1000, 39402,
	-1000, -1000, 475, 1665, -1000, 15612, 40413, 215, 9655, -1000,
	40304, -39, -39, -1000, 2031, 1297, 1129, 966, 900, 1982,
	-1000, 21823, 573, 1106, 39293, 41379, 41581, -1000, 15612, -1000,
	-1000, 1511, 15612, -1000, 41379, 41581, 15955, 15955, 15955, 15955,
	15955, 15955, 15955, 15955, 15955, 15955, 15955, 15955, 15955, 15955,
	15955, 15955, 15955, 15955, 15955, 1356, 15955, 1962, 1962, 1962,
	-32, 9312, -1000, 1541, 1511, 15612, 15612, 41581, 214, 213,
	210, -1000, 15612, -109, 15612, 15612, 15612, -1000, -1000, -1000,
	209, -1000, 1978, -1000, -1000, -1000, -1000, -1000, 840, -1000,
	1456, -1000, 25357, 333, 35605, 331, -1000, 329, -1000, -1000,
	328, 35605, 1346, 510, 24403, -1000, 564, -1000, 7925, 41006,
	-1000, 917, 1830, -104, -1000, -1000, -1000, 572, 21501, 20856,
	8969, -107, -1000, -1000, -1000, 41006, -33, 1808, 1808, -1000,
	1960, -1000, 459, 208, -1000, 27913, -1000, -33, -1000, -1000,
	-1000, -1000, -1000, 35605, 1115, 39184, -1000, 1832, 6209, 207,
	1468, 1866, -1000, 20856, 1468, -1000, 35605, 41006, -1000, -183,
	-1000, 1953, -1000, -1000, 1371, -1000, 5546, 27277, 35605, -113,
	-1000, 35605, 35605, 35605, 1656, -1000, 1984, -1000, 39051, -121,
	-1000, 295, 1845, 15612, -1000, -1000, 327, 16945, 35605, -1000,
	1348, 1453, 621, 35605, -1000, 35605, -1000, 35605, 35605, 35605,
	-122, 35605, -123, 35605, -1000, 23767, 796, 1908, 233, 3936,
	471, 15612, 41581, 41252, -124, 15612, 15612, -1000, -130, -1000,
	15612, 458, 41006, -1000, -1000, -1000, 41006, 15612, 2030, 15612,
	203, 202, 200, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 193, -1000, -1000, 4384, 15612, 191, -1000, 186, 184,
	41006, 1541, 41006, -1000, -1000, 771, 771, 830, 830, 830,
	830, 1962, 787, 1718, 1226, 426, 426, 426, 1154, 412,
	412, 426, 426, 426, 1509, 1333, 320, 39889, 15612, -131,
	-1000, -1000, -1000, 41006, 41006, 177, -1000, -1000, -1000, -109,
	3805, 38942, 38833, -1000, 166, -1000, -1000, 1458, -1000, 16945,
	317, 35605, 25357, 1896, 16945, 1148, 1374, 510, 24403, -1000,
	718, -35, -1000, -1000, 278, 120, 917, -1000, -53, -1000,
	519, 1787, -1000, 1783, 427, -1000, -1000, -54, 315, -1000,
	515, 511, -1000, -1000, -1000, -1000, 1832, -1000, 567, 15612,
	15612, 2308, 567, -137, 535, -1000, -1000, -1000, 1951, -1000,
	-138, -1000, -1000, -1000, -1000, 35605, -1000, 35605, -1000, 6209,
	35605, 1503, 1204, -1000, -1000, 1375, 313, 15955, 35605, -1000,
	1070, 16945, 1832, 117, 6209, 1832, 38700, 4748, -139, -140,
	1195, -1000, 1170, 15612, -1000, 41581, 1190, 1190, -1000, 710,
	684, 648, -1000, 646, -1000, -59, 22475, 15612, 15612, 41252,
	-145, -1000, 233, 233, -1000, 38591, -1000, 41006, -1000, 40304,
	-1000, -1000, -1000, -1000, 1048, -1000, 38482, -1000, -1000, -1000,
	-1000, 15955, 1487, 309, 41581, 38349, -1000, -1000, 15612, -1000,
	-1000, -1000, 1058, -146, 16945, -147, 165, 120, -153, 35605,
	-1000, 510, 24403, -1000, 1722, 1743, 35605, 1819, -1000, -1000,
	304, 302, 299, -1000, 27595, 27595, 23767, 23767, -1000, -1000,
	35605, 41006, -109, -1000, -1000, 27277, 366, -1000, -1000, 1430,
	-1000, -1000, 35605, 1211, -1000, -1000, 15612, 39889, 296, 1456,
	293, -1000, -1000, -1000, -1000, -1000, -1000, 1845, -31, -1000,
	948, -1000, -1000, 41006, 1826, -1000, -1000, 35605, 35605, 291,
	290, -1000, 289, 117, 233, 233, -1000, -1000, 164, 1106,
	1857, -1000, 937, 15955, 41581, -155, -1000, 38240, 35605, 1070,
	-156, -1000, 1456, -1000, 1070, 285, 24403, -1000, 1346, 736,
	-161, 35605, -1000, -1000, 6539, 23767, 23767, -1000, -162, -1000,
	-1000, -80, -1000, 1887, -1000, -1000, -1000, -1000, 1635, 38131,
	1307, 35605, -1000, 35605, 1832, 161, 35605, 603, 6209, -1000,
	-1000, 15612, 15612, 15612, -1000, 942, 15612, 937, -164, -1000,
	-1000, 281, 1456, 1070, -1000, 1456, 16945, -1000, 1374, 888,
	-1000, 572, -1000, -169, -170, -1000, 35605, 277, 1611, -1000,
	1127, 1118, 159, -171, -1000, -1000, 275, -1000, 15612, -1000,
	-172, -177, -39, 158, 15269, 15269, -109, -1000, 35605, -1000,
	1456, -1000, -184, -1000, 21501, -1000, 563, 563, -1000, -1000,
	35605, -1000, 1147, 1146, 831, -1000, -1000, -1000, -1000, -1000,
	1307, 41006, -1000, -1000, 154, -1000, -1000, -1000, 16615, 1175,
	909, 39777, -1000, -185, -1000, 1070, -163, -1000, -1000, -1000,
	-1000, 1768, -1000, 614, 1137, 1137, 1127, 2030, 1912, -1000,
	-1000, -1000, -1000, -1000, 1182, 1456, -1000, -1000, 1922, -1000,
	-1000, 1336, -1000, -1000, 14926, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2451, 2450, 1638, 1812, 2444, 2438, 2436, 2431, 2429,
	2426, 2424, 2417, 2414, 2407, 2406, 2392, 2390, 2388, 2387,
	2379, 2377, 2374, 2373, 2371, 2369, 2366, 1787, 2364, 2363,
	2361, 2359, 2357, 2351, 1758, 2349, 1698, 2347, 2346, 2345,
	2341, 2340, 1694, 2338, 85, 106, 1674, 2333, 2328, 1665,
	2327, 2326, 2324, 2323, 2322, 2310, 2306, 97, 2304, 2302,
	2301, 2300, 2298, 2294, 2293, 142, 156, 2291, 1648, 2290,
	2289, 2287, 2286, 2285, 2284, 2283, 2280, 2277, 2276, 2275,
	2272, 2270, 2269, 2259, 2255, 2254, 2251, 155, 2250, 2249,
	1645, 1616, 2248, 2247, 31, 25, 12, 53, 29, 140,
	2991, 133, 2245, 2244, 2242, 2239, 2234, 2230, 18, 100,
	95, 2229, 48, 2228, 2225, 37, 27, 22, 16, 2224,
	86, 2221, 2218, 1564, 21, 2217, 2213, 136, 2212, 45,
	20, 109, 150, 147, 105, 114, 2211, 2209, 2208, 2206,
	40, 111, 2, 2204, 2200, 14, 64, 13, 2195, 28,
	38, 2192, 2191, 130, 2189, 59, 90, 1568, 91, 129,
	304, 2185, 67, 10, 52, 2184, 2179, 149, 34, 2177,
	32, 76, 135, 2170, 47, 154, 127, 77, 128, 115,
	2168, 2167, 2166, 87, 2164, 108, 73, 2163, 2162, 70,
	2161, 134, 137, 2158, 2156, 83, 2153, 116, 2152, 2151,
	153, 141, 104, 8, 50, 57, 6, 1534, 1523, 120,
	84, 55, 54, 2150, 1908, 1317, 24, 33, 96, 62,
	44, 94, 46, 81, 144, 26, 2148, 2145, 122, 2143,
	2142, 2139, 2132, 2129, 93, 2126, 2124, 56, 138, 75,
	68, 82, 78, 35, 117, 126, 123, 148, 101, 2119,
	88, 119, 2118, 74, 2117, 2116, 1533, 107, 2115, 2112,
	2111, 1482, 1429, 1117, 916, 2109, 2106, 1101, 921, 2105,
	2104, 61, 2103, 102, 103, 2102, 139, 226, 41, 2100,
	110, 58, 89, 2099, 30, 19, 0, 528, 469, 2098,
	121, 71, 2097, 2096, 2094, 2093, 23, 5, 9, 4,
	7, 3, 80, 42, 2092, 2090, 131, 112, 63, 2088,
	151, 2086, 2085, 2084, 36, 2081, 17, 2080, 15, 2077,
	2075, 11, 1, 2074, 2071, 145, 2070, 92, 2062, 1887,
	2061, 143, 2060, 2059, 1776, 49, 99,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 110, 110,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 107, 107, 112, 112, 112,
	114, 114, 111, 111, 106, 106, 20, 20, 55, 55,
	97, 50, 50, 50, 284, 284, 285, 285, 93, 93,
	94, 94, 94, 94, 95, 95, 96, 96, 96, 26,
	26, 26, 22, 22, 22, 22, 22, 23, 23, 24,
	24, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 34, 34, 35, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 41, 41, 41, 39, 39, 39,
	38, 38, 38, 37, 37, 37, 40, 40, 40, 159,
	159, 158, 158, 161, 161, 42, 42, 42, 42, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 45,
	45, 45, 45, 45, 45, 45, 252, 252, 251, 43,
	43, 226, 226, 46, 46, 184, 184, 47, 47, 47,
	47, 47, 48, 48, 56, 56, 325, 325, 325, 329,
	329, 330, 330, 331, 331, 331, 331, 331, 331, 331,
	327, 327, 53, 53, 53, 92, 92, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 62, 62, 64, 61,
	61, 61, 63, 63, 63, 63, 65, 65, 65, 65,
	66, 66, 66, 66, 66, 67, 67, 139, 139, 277,
	276, 276, 282, 282, 282, 137, 137, 137, 137, 137,
	138, 138, 138, 275, 275, 275, 275, 283, 283, 283,
	283, 283, 283, 281, 281, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 80, 80, 80, 87, 87, 87, 87, 87, 87,
	87, 69, 69, 74, 74, 74, 74, 74, 70, 70,
	75, 75, 76, 76, 77, 77, 77, 77, 77, 77,
	71, 71, 71, 71, 79, 79, 79, 79, 78, 78,
	84, 84, 84, 84, 84, 84, 81, 81, 81, 81,
	82, 82, 82, 85, 85, 85, 85, 72, 72, 73,
	73, 86, 86, 83, 83, 83, 326, 326, 328, 328,
	51, 51, 30, 30, 31, 31, 140, 140, 141, 141,
	205, 205, 205, 205, 142, 142, 113, 113, 113, 204,
	294, 294, 295, 295, 295, 295, 295, 295, 296, 296,
	296, 296, 296, 296, 296, 292, 292, 293, 290, 290,
	291, 291, 291, 291, 332, 332, 203, 203, 145, 145,
	299, 299, 299, 299, 297, 297, 297, 297, 297, 300,
	298, 301, 301, 301, 301, 301, 238, 238, 238, 89,
	89, 32, 32, 119, 119, 33, 33, 29, 29, 29,
	188, 188, 149, 149, 243, 243, 243, 130, 130, 108,
	108, 108, 14, 11, 11, 11, 11, 11, 11, 19,
	19, 17, 17, 189, 189, 190, 190, 52, 52, 54,
	54, 59, 59, 88, 88, 88, 88, 88, 88, 21,
	21, 21, 21, 25, 25, 25, 25, 58, 58, 334,
	334, 126, 126, 126, 126, 127, 127, 200, 200, 201,
	201, 201, 202, 202, 202, 121, 120, 122, 122, 28,
	28, 28, 115, 115, 116, 116, 117, 117, 118, 118,
	335, 335, 49, 49, 49, 91, 91, 133, 133, 197,
	197, 197, 199, 199, 198, 198, 198, 174, 174, 174,
	90, 90, 154, 154, 163, 163, 164, 164, 249, 165,
	165, 57, 57, 100, 100, 98, 98, 98, 98, 98,
	98, 99, 99, 99, 101, 101, 101, 101, 101, 101,
	101, 104, 104, 104, 105, 105, 105, 103, 103, 307,
	307, 307, 310, 310, 306, 308, 308, 309, 309, 333,
	333, 175, 175, 175, 144, 143, 143, 147, 147, 146,
	148, 148, 242, 242, 242, 172, 172, 172, 172, 191,
	191, 192, 192, 193, 193, 194, 194, 194, 195, 195,
	196, 196, 171, 171, 222, 222, 102, 102, 102, 153,
	153, 153, 155, 155, 212, 212, 212, 213, 213, 211,
	211, 211, 211, 244, 244, 244, 244, 244, 244, 244,
	244, 323, 323, 323, 324, 324, 241, 241, 245, 245,
	245, 245, 245, 245, 239, 239, 239, 239, 240, 240,
	250, 250, 178, 178, 178, 178, 176, 176, 177, 177,
	246, 246, 246, 246, 173, 173, 247, 247, 247, 206,
	206, 253, 253, 253, 271, 271, 152, 152, 152, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 255, 255, 255, 255,
	257, 257, 257, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 270, 270, 270, 270, 270, 258, 258, 265, 265,
	266, 266, 267, 268, 259, 259, 260, 260, 261, 262,
	269, 269, 269, 269, 273, 273, 263, 263, 263, 263,
	263, 264, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 186, 186, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	216, 216, 216, 216, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 302, 302, 302, 302, 302,
	302, 302, 302, 304, 304, 305, 305, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 311, 311, 312, 312, 314,
	314, 315, 315, 316, 317, 317, 317, 318, 319, 319,
	313, 313, 320, 320, 320, 321, 321, 322, 322, 322,
	322, 322, 228, 228, 228, 229, 229, 230, 236, 236,
	236, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 128, 128, 128,
	128, 128, 160, 160, 225, 225, 223, 223, 223, 227,
	227, 179, 179, 272, 272, 272, 272, 272, 272, 272,
	180, 180, 180, 187, 181, 181, 182, 182, 182, 182,
	182, 182, 219, 220, 183, 183, 183, 221, 221, 231,
	235, 235, 234, 233, 233, 232, 232, 209, 209, 210,
	210, 208, 207, 168, 168, 167, 167, 166, 166, 336,
	336, 237, 237, 169, 169, 170, 162, 162, 248, 248,
	248, 248, 156, 156, 135, 135, 157, 157, 131, 131,
	134, 134, 132, 132, 132, 132, 150, 150, 151, 151,
	129, 129, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 274, 274, 274, 224, 123, 123, 123,
	124, 124, 125, 125, 279, 279, 279, 280, 280, 280,
	280, 278, 278, 278, 278, 278, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 3,
	1, 2, 1, 2, 2, 6, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 2, 1, 1, 3, 1, 5,
	2, 3, 0, 3, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 2, 6, 2, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 4, 3, 5, 3,
	2, 6, 3, 3, 4, 4, 3, 3, 3, 3,
	1, 3, 3, 1, 1, 2, 2, 1, 0, 1,
	1, 3, 1, 1, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	2, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 3, 3, 4, 4, 3, 4, 4, 4, 3,
	2, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 2, 3, 3, 3, 2, 3,
	4, 3, 5, 3, 4, 5, 2, 3, 3, 3,
	4, 2, 3, 4, 3, 3, 3, 4, 4, 4,
	4, 2, 3, 5, 5, 5, 2, 0, 2, 0,
	3, 2, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	2, 4, 3, 3, 0, 6, 3, 11, 14, 4,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 8, 10, 8, 10, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 2, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 2, 0,
	8, 3, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 2, 2, 1, 1, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 2, 3, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 3, 3, 1, 5,
	5, 0, 2, 3, 1, 3, 2, 0, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 3, 4, 1, 1, 1, 5, 1, 3,
	3, 1, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 6, 6, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -47,
	-34, -35, -36, -46, -42, -48, -49, -50, -51, -43,
	-55, -54, -56, -59, -57, -52, -53, -60, -68, -88,
	-89, -90, -91, -5, -6, -7, -8, 23, 34, -23,
	-24, 47, 67, -28, -29, -30, -31, 69, -32, -33,
	90, -309, 94, -37, -38, -39, -41, -40, 98, 105,
	107, 125, 134, 214, 220, 240, 242, 244, 251, -98,
	-100, 238, 239, -61, -62, -63, -64, -92, 262, -69,
	-70, -71, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, 265, -21, -25,
	-58, 303, -9, -10, -13, -12, -11, -16, -18, -15,
	-17, -19, -14, -307, -101, -99, 354, 312, 35, 274,
	61, 101, 246, 328, 335, -104, -102, -103, -105, 255,
	320, 284, 358, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 2, 284, 323,
	83, 141, -325, 2, -157, 284, 83, -132, -123, 347,
	4, -286, -288, 20, 21, 23, 33, 34, 35, 40,
	44, 47, 48, 55, 60, 61, 62, 64, 66, 67,
	68, 71, 72, 73, 81, 82, 84, 86, 90, 92,
	94, 97, 98, 100, 105, 106, 107, 113, 114, 119,
	121, 126, 132, 133, 134, 135, 142, 145, 147, 140,
	157, 158, 159, 161, 162, 163, 166, 165, 170, 173,
	176, 178, 179, 180, 183, 181, 185, 186, 188, 187,
	193, 195, 196, 198, 201, 204, 207, 210, 211, 212,
	213, 214, 216, 218, 220, 222, 223, 224, 225, 226,
	228, 229, 231, 232, 233, 234, 235, 238, 236, 237,
	239, 240, 241, 242, 244, 246, 247, 249, 263, 264,
	275, 251, 252, 253, 254, 258, 256, 259, 260, 262,
	265, 267, 270, 273, 274, 276, 279, 280, 277, 272,
	283, 285, 286, 287, 288, 289, 290, 291, 298, 299,
	303, 304, 305, 306, 309, 310, 311, 312, 314, 317,
	318, 319, 324, 329, 330, 331, 332, 333, 28, 36,
	37, 38, 39, 41, 42, 45, 46, 51, 52, 53,
	56, 85, 87, 88, 104, 108, 109, 115, 116, 117,
	127, 129, 136, 137, 146, 148, 149, 150, 151, 152,
	154, 168, 182, 192, 194, 205, 209, 217, 219, 227,
	248, 257, 268, 269, 278, 281, 293, 294, 295, 300,
	301, 316, 320, 321, 357, 357, 2, 158, 224, -131,
	-123, 83, 357, 357, 357, 357, 284, 2, 313, 323,
	-188, 83, 308, 357, 357, -123, 220, 22, 2, 92,
	145, 311, 310, 22, 216, 256, 286, 288, 2, 357,
	357, 357, 357, 357, 2, 323, 284, 141, 83, 313,
	-123, 2, -45, 2, 354, -44, -4, -27, -36, -46,
	-42, -57, -68, -34, -49, -90, -91, -329, 2, 22,
	-330, -331, 69, 98, 125, 255, 145, 92, 310, 284,
	2, 158, 2, -123, 2, -325, 2, 158, 2, -329,
	2, -123, 2, -127, 2, 251, -123, -87, 259, 2,
	4, 22, 83, 183, 261, 293, 357, 357, 357, 173,
	55, 248, 259, -66, 299, -65, 293, -277, -67, 2,
	-158, 183, -123, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	2, -87, 259, 34, 55, 22, 60, 84, 126, 141,
	142, 162, 65, 66, 223, 173, 159, 298, 163, 260,
	285, 299, 69, 314, 289, 106, 357, 357, 357, -333,
	2, 284, -99, -101, -100, -146, -147, 307, 153, 103,
	203, -98, -100, 2, -307, -282, 2, -275, -238, 9,
	302, 110, 199, -281, 8, 346, -274, -280, 5, 7,
	345, 4, -286, -288, -287, 58, 70, 124, 144, 138,
	156, 160, 169, 171, 184, 206, 208, 245, 266, -334,
	2, 299, 299, 2, -334, 2, -334, 2, -126, 2,
	299, 296, -310, 228, -306, -123, -310, 357, 357, 359,
	357, -143, -144, 2, 22, 95, -170, 2, 354, -244,
	2, 352, -246, -131, -100, -245, 354, 200, -3, 2,
	-246, 136, -131, 2, -246, 136, -131, 2, -123, 2,
	-134, 136, -131, 296, 359, -157, -150, -123, -208, -207,
	356, -214, 2, -216, 345, 346, 340, 189, 334, -228,
	-218, -231, 104, 248, 354, -131, -217, 360, 9, -304,
	-100, 29, -229, -230, 49, -123, 7, 8, 5, 6,
	-129, -255, -224, -264, 302, 110, 191, -302, -303, 4,
	-286, -279, -256, -266, -260, -263, 154, 58, 75, 76,
	79, 77, 80, 261, 313, 50, 28, 108, 109, 209,
	217, 281, 300, 301, 136, 192, 137, 56, 127, 168,
	97, 37, 39, 41, 42, 51, 52, 85, 87, 88,
	115, 116, 117, 146, 148, 149, 150, 151, 152, 194,
	227, 268, 278, 294, 295, 321, -287, -267, -268, -261,
	-262, -269, -214, 2, 123, 354, -167, -168, -207, -208,
	2, -158, 136, -123, 2, -158, 2, 141, -123, 136,
	2, -123, 22, 123, 2, 155, 2, 155, 2, -247,
	2, -246, -159, 136, 2, -158, -159, 136, 2, -135,
	136, 2, -134, -123, 136, 2, -150, 136, 2, -184,
	354, -252, 2, -251, -280, 320, 357, 357, 357, 357,
	357, 199, 359, -158, -214, -226, 354, 123, -214, 199,
	-123, -87, 333, 2, 2, 263, 2, 354, -66, 53,
	299, -201, 2, -202, -120, -121, -122, 157, 222, 226,
	333, 296, 339, 123, -282, -139, 89, -161, 356, -87,
	2, -284, 2, -281, 9, 263, 2, 223, 260, 55,
	123, 2, 2, -326, 2, 199, 123, 2, 123, 2,
	123, 2, 123, 2, 123, 2, 2, 223, 260, 2,
	120, 2, 298, 2, 2, 123, 2, 157, 222, 275,
	2, 284, 323, 2, 123, 123, -173, -246, -146, -147,
	-172, -191, -192, 172, 112, 197, -175, 22, 95, -175,
	-175, 44, 355, 355, 8, 7, 7, -200, -201, -200,
	296, -127, 359, -310, -151, 354, -170, -162, -248, -214,
	347, -162, -169, -237, -214, 89, 70, -178, 160, 184,
	124, 169, 245, 144, 7, -45, -211, 360, 354, 347,
	-241, 335, -100, -245, 354, -244, -131, 354, -110, 236,
	-109, 21, 23, 98, 318, 104, 272, 290, 252, 236,
	104, 236, 272, 290, 252, 236, 104, 360, -284, -132,
	359, -278, 347, 4, -286, -288, -287, -289, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 43, 49, 50,
	54, 57, 59, 65, 69, 74, 75, 77, 76, 78,
	79, 80, 89, 91, 93, 95, 96, 99, 101, 103,
	110, 111, 112, 120, 122, 123, 125, 128, 130, 139,
	141, 143, 153, 155, 164, 167, 172, 174, 175, 189,
	190, 191, 197, 199, 200, 202, 203, 215, 221, 230,
	243, 255, 261, 271, 282, 284, 292, 296, 297, 302,
	307, 308, 313, 315, 322, 323, 325, 326, 327, 328,
	10, 11, 57, 33, 345, 346, 347, 348, 118, 349,
	350, 343, 344, 342, 337, 338, 339, 63, 177, 250,
	13, 14, 15, 26, 202, 171, 334, 138, 266, 340,
	16, 17, 18, 156, 36, 139, -128, -136, -214, -214,
	-214, -214, -214, 208, -166, -209, 352, -100, 354, 354,
	-100, -214, -160, 354, 7, -100, -223, 352, -232, -214,
	-167, 354, 5, 354, 5, -311, 329, 120, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 219, -273, 324, -273,
	-273, -257, 354, -257, -258, 354, -257, 330, 335, 354,
	276, 355, -156, -131, -168, 354, -145, 189, -119, -308,
	328, -145, 354, -124, 136, 2, -123, -308, 189, -247,
	-133, -131, -133, 262, -123, 30, -112, 359, 48, 241,
	104, -112, 104, -112, 359, 104, 104, 104, -160, -214,
	355, 359, -325, -331, 69, 354, 30, -225, -253, -254,
	-256, -265, -259, -263, -264, 40, 46, 45, 291, 182,
	257, 269, 316, 38, 198, 147, 146, 148, 149, 150,
	151, 152, 268, 37, 227, 116, 117, 115, 97, 88,
	87, 194, 42, 41, -267, -268, -261, -262, 85, 294,
	295, 154, 39, 52, 51, 321, 278, -285, -284, -325,
	-65, -277, -160, 30, -201, 2, 359, -202, 170, -138,
	176, 188, 132, 200, 331, -283, 5, 4, -224, -238,
	89, 173, -264, -276, 89, -282, -276, 89, 73, 356,
	-278, -158, 22, 264, 2, -277, -328, 120, -325, -277,
	-277, -277, -277, -277, 259, -45, 120, -123, 170, -277,
	2, -277, 2, 284, 141, 284, -112, 359, -172, -192,
	-191, -193, -214, 22, -196, 114, 185, -214, -216, -99,
	-99, -99, -148, -242, -214, 221, 141, -127, -306, 30,
	-150, -153, 359, 123, 30, 4, -153, 359, 355, 160,
	160, -244, -178, 160, -176, 206, -176, -176, -323, 354,
	353, -241, -278, 352, 361, -160, 2, -240, -239, 30,
	-123, 204, 355, -131, 359, 296, -189, 65, 59, -204,
	136, 59, -290, -123, 65, -291, 54, 308, 221, 122,
	-189, 65, -189, 65, 65, -246, 33, -57, 123, 296,
	-246, 296, 33, -57, 123, 296, -134, -278, -250, 336,
	-123, -271, -253, -270, 232, 233, 231, 235, 234, -253,
	-278, 293, -214, -214, -214, -214, -214, -214, -214, -214,
	-214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
	-214, -214, -214, -214, 171, 138, 266, 36, 139, -214,
	296, -214, -214, -214, -214, 181, 189, 191, 302, 110,
	309, 95, 195, -336, 282, 32, -221, -100, 354, -236,
	27, 271, 22, -228, 248, 354, -209, -214, -210, -160,
	355, 355, 359, -160, -227, 353, -223, -235, -234, 325,
	355, -160, 322, 22, 95, 347, 2, 7, -185, 332,
	180, 86, 133, 179, -186, 254, -312, 113, 128, 354,
	355, 2, 355, 2, 355, 2, -214, -214, -179, 2,
	-272, -160, 4, 332, 180, 86, 133, 179, 254, -179,
	2, -180, 2, -214, -160, -181, -215, -216, 345, 346,
	340, 354, 248, -182, 2, -214, -160, -214, 43, 167,
	297, -183, -214, 123, -160, -214, -214, -214, -160, -160,
	2, -160, 2, 354, 7, 7, 293, 293, 7, 123,
	355, 359, -140, -150, -141, -123, -205, -204, -292, -293,
	-290, 141, 308, 111, 30, 104, 213, 30, 199, 189,
	-115, 287, 104, -206, 326, -197, -57, 354, 89, 30,
	-197, -163, -164, -249, -165, -131, 354, -123, -158, -159,
	-159, -134, -135, -123, -150, 355, 359, -45, -251, 296,
	315, -141, -44, 355, 359, -152, 29, 352, -185, 354,
	-250, 359, 123, 355, 299, -202, -137, 226, 270, 237,
	258, 359, -278, -327, -123, 259, -45, -131, -134, -131,
	-246, -194, -274, 354, 346, -195, 248, 249, 359, -108,
	31, 93, 161, -131, 354, 355, -206, -248, -155, 2,
	-244, -278, -206, -237, -244, -244, -177, 315, 199, 160,
	-244, -239, 355, -324, 7, -241, -240, 7, -213, -212,
	121, 187, 355, -123, 354, -241, 355, -109, -131, -123,
	-123, 189, -204, 136, -114, 189, -253, -123, 354, 354,
	161, 161, -123, -123, 136, -123, 136, -123, -123, -110,
	236, -57, 354, -131, 236, -123, -57, 354, -123, 236,
	-93, 135, 195, 333, -214, -214, 296, -336, 282, -221,
	-214, 181, 191, 302, 110, 309, 95, 195, 123, 354,
	-215, -215, -160, -218, 354, -160, 353, 363, 355, -214,
	353, 353, 359, -233, -234, 99, -214, -147, 359, -146,
	-214, -160, -160, 355, 355, 296, 296, 296, 296, 354,
	-317, 207, 354, 354, -214, 30, 359, 355, 123, 355,
	355, -187, 215, 355, 10, 11, 345, 346, 347, 348,
	118, 349, 350, 343, 344, 342, 337, 338, 339, 63,
	177, 250, 13, 14, 15, 156, 139, -215, -215, -215,
	-160, 354, 355, -219, -220, 123, 120, 30, -183, -183,
	-183, 355, 123, -160, 359, 359, 359, 355, 355, 355,
	7, 355, 359, 355, 333, 333, 355, 276, 123, -131,
	355, 355, 359, -124, 141, -124, -57, -158, 5, -57,
	-131, 104, -116, 100, -335, 339, -123, -174, 243, -214,
	-174, -199, 199, -156, 320, -123, -174, -154, 359, 123,
	339, -156, -112, -112, -112, -214, -327, -284, 355, -253,
	352, 353, 7, 7, -96, 328, -284, -327, -120, 306,
	62, 226, -282, 359, -195, -214, -242, -131, 360, -44,
	-171, 128, -250, 359, -171, -177, 354, -214, -244, 353,
	355, 359, -240, 353, 359, 362, 339, -241, 354, -150,
	-239, 296, 296, 104, 189, 317, -294, -291, -214, -149,
	-243, -123, -305, 354, -302, -303, -129, 354, 354, -107,
	98, 262, -190, 104, -112, 104, -112, 296, -189, 65,
	-160, 296, -160, 296, -96, 123, 283, -214, -214, -215,
	-215, 123, 354, -214, -225, 26, 26, 355, -160, 355,
	359, -210, -214, 355, -223, 101, -214, 292, 355, 322,
	-147, -147, -147, 5, 180, 133, 179, -186, 179, -186,
	-186, 7, -318, -123, 354, 326, -146, 355, -271, -253,
	-214, -219, -214, -271, -253, -215, -215, -215, -215, -215,
	-215, -215, -215, -215, -215, -215, -215, -215, -215, -215,
	-215, -215, -215, -215, 95, 189, 195, -215, 359, -160,
	355, -220, -219, -214, -214, -253, 355, 355, 355, -160,
	-214, -214, -214, 355, 7, 276, -142, 140, -205, 354,
	-124, 354, 354, -145, 354, -123, -117, 166, -335, -281,
	-308, -162, 190, -174, 64, 355, -206, -164, -155, -237,
	355, -97, 71, -97, 7, 353, 355, -95, 201, -94,
	-123, 5, -123, 200, 355, -108, -278, 355, -222, 130,
	44, -244, -222, -150, -211, 7, -212, -278, 352, -240,
	-150, 355, -123, -123, -204, 104, -295, 65, -296, 57,
	111, 69, 189, 191, 308, 221, 54, 89, 230, 355,
	355, 359, -130, -167, 57, -130, -214, 354, -149, -150,
	189, 89, 189, 89, 82, 304, -123, -123, -131, -123,
	-123, 355, -131, 355, -123, -285, 293, 26, 26, -214,
	-225, 355, -214, -214, 355, -214, 353, -214, 5, -214,
	355, 355, 355, 355, -319, -123, -214, 355, 355, 355,
	-220, 123, 95, 195, 354, -214, 355, 355, 359, 355,
	355, 355, 139, -149, 354, -150, -140, 30, -149, 199,
	-118, 165, -335, -281, -115, -198, 354, 199, -57, -174,
	339, 82, 82, 353, 359, 354, 339, 339, -108, -314,
	327, -214, -160, -314, 355, -241, 7, 355, -204, -123,
	-278, -123, 111, 136, 191, 161, 354, -215, -131, -203,
	-332, 68, 280, -243, -108, -278, -108, 355, -160, 355,
	355, 191, 191, -214, -253, -112, -112, 296, 296, 296,
	296, -217, -129, -123, -214, -214, 355, 355, -147, -313,
	212, 355, -215, 123, 354, -225, 355, -214, 210, 355,
	-149, 355, 355, -57, 355, -131, -335, -281, -116, 96,
	-150, 65, -170, -100, 354, 354, 354, -94, -95, -284,
	-284, -315, -316, -123, -240, 353, -296, -124, 189, -214,
	-125, 354, -142, 354, -130, -147, 230, -111, 57, -123,
	-123, 354, 354, 354, 355, -147, 44, -215, -225, 355,
	355, -131, -203, 355, -142, -203, 354, -281, -117, 310,
	190, 355, -123, -285, -285, 355, 359, 30, 104, 355,
	-299, 178, -123, -150, -108, 355, -131, -106, 315, -278,
	-160, -160, -160, -320, 225, 249, -160, 355, 354, -142,
	-203, -142, -149, -118, 262, -206, 355, 355, -316, -318,
	111, -297, -300, -298, 199, 124, 211, 267, 355, 355,
	-145, -214, 355, 355, -147, 355, -321, -322, 36, 305,
	73, -214, -321, -150, -142, 355, -163, -96, -96, -123,
	-298, 199, -300, 199, 310, 92, -299, 355, -322, 218,
	119, 248, 218, 119, 355, -203, -206, -301, 186, 241,
	48, 262, -301, -297, 26, -113, 48, 241, -142, 20,
	191, 89, -322,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 8, 9, 10,
	12, 14, 16, 17, 19, 21, 23, 25, 27, 29,
	31, 33, 35, 37, 39, 40, 42, 44, 45, 46,
	47, 49, 51, 54, 56, 58, 60, 0, 0, 142,
	144, 0, 0, 151, 153, 155, 157, -2, 160, 162,
	0, 0, 0, 173, 175, 177, 179, 181, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 621,
	-2, 0, 0, 267, 269, 271, 273, 274, 0, 325,
	327, 329, 331, 333, 335, 337, 339, 341, 343, 345,
	347, 349, 351, 353, 354, 356, 358, 0, 543, 545,
	547, -2, 63, 64, 65, 66, 67, 73, 74, 75,
	76, 69, 71, 657, -2, 668, 0, 0, -2, 0,
	-2, -2, -2, 0, 0, 634, 636, 638, 640, -2,
	0, 0, -2, 6, 11, 13, 15, 18, 20, 22,
	24, 26, 28, 30, 32, 34, 36, 38, 41, 43,
	48, 50, 52, 55, 57, 59, 61, 62, 0, 0,
	0, 0, 0, 117, 246, 0, 1219, 1146, 1152, 1153,
	1177, 1178, 1179, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1223,
	1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233,
	1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243,
	1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 143, 145, 146, 0, 0, 0,
	1148, 1219, 152, 154, 156, 158, 0, 164, 0, 0,
	0, 0, 510, 161, 163, 237, 1278, 239, 241, 0,
	0, 0, 0, 167, 168, 169, 170, 171, 172, 174,
	176, 178, 180, 182, 183, 0, 0, 0, 0, 0,
	236, 234, 205, 206, 0, 219, 220, 221, 222, 223,
	225, 209, 210, 211, 213, 215, 217, 0, 243, 249,
	250, 251, 253, 254, 255, 256, 257, 258, 259, 0,
	123, 0, 431, 232, 230, 0, 119, 0, 540, 0,
	245, 541, 542, 537, 538, 1305, 566, 262, 0, 264,
	364, 365, 366, 367, 368, 0, 268, 270, 272, -2,
	-2, 1394, -2, 280, -2, 290, 1400, 0, 293, 294,
	299, -2, 201, 326, 328, 330, 332, 334, 336, 338,
	340, 342, 344, 346, 348, 350, 352, 355, 357, 359,
	360, 361, 0, 0, 0, 365, 0, -2, -2, 0,
	0, 0, 0, 0, -2, 0, -2, 0, 0, -2,
	-2, 0, 0, -2, 0, 0, 544, 546, 548, 0,
	500, 659, -2, 632, 633, -2, 0, 663, 663, 663,
	0, 0, 633, 631, 0, 265, 266, 302, 303, 304,
	313, 314, 315, 316, 496, 0, 498, 323, 324, 1173,
	0, 1187, 1188, 1189, 1190, 1408, 1409, 1410, 1411, 1412,
	1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 568,
	550, 559, 568, 552, 553, 554, 555, 556, 557, 558,
	561, 0, 649, 1284, 652, 1159, 650, 635, 637, 0,
	639, 0, 0, 643, 665, 664, 696, 697, 0, 647,
	648, 658, 712, 750, 727, 718, 0, 0, 2, 68,
	0, 1376, 750, 70, 0, 1376, 750, 72, 0, 77,
	0, 1376, 1151, 0, 0, 247, 248, 1156, 1154, 1155,
	0, 147, 148, 858, 0, 0, 0, 0, 0, 0,
	950, 952, 1368, 1394, 0, 954, 955, 0, 957, 959,
	960, 0, 963, 964, 1116, 1148, 1162, 1163, 1164, 1165,
	0, 0, 1168, 0, 1170, 1171, 1172, 1016, 974, -2,
	-2, 1160, 786, 787, 788, 789, -2, 1408, 978, 981,
	984, 987, 988, 989, 990, 0, 1352, 1369, 1370, 1390,
	1391, 1399, 1403, 1404, 1376, 1387, 1377, 1364, 1374, 1385,
	1225, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1186, 820, 821, 826,
	827, 829, 149, 150, 0, 0, 1149, 1125, 1123, 1124,
	159, 479, 1376, -2, 502, 479, 506, -2, 656, 1376,
	581, 238, 240, 0, 166, 0, 594, 0, 596, 0,
	611, 756, 109, 1376, 186, 199, 109, 1376, 189, 109,
	1376, 192, 1144, 193, 1376, 195, 196, 1376, 198, 233,
	0, 0, -2, 226, 228, -2, 224, 212, 214, 216,
	218, 0, 0, 0, 430, 0, 0, 0, 539, 0,
	565, 263, 369, 370, 275, 0, 277, 0, 279, 1363,
	-2, 282, 283, 569, 572, 573, 574, 0, 0, 0,
	0, 0, 0, 0, 295, 296, 297, 202, 0, 362,
	363, 371, 372, 124, 125, 0, 375, 396, 408, 0,
	0, 379, 381, 429, 383, 0, 0, 385, 0, 387,
	0, 389, 0, 391, 0, 393, 395, 397, 409, 399,
	658, 401, 0, 403, 407, 0, 412, 0, 414, 415,
	416, 0, 0, 422, 0, 0, 109, 754, -2, 0,
	627, 677, 678, 0, 0, 0, 0, 661, 662, 0,
	0, 0, 623, 624, 497, 1175, 1174, 549, 567, 551,
	0, 563, 0, 651, 0, 0, 698, 701, 1136, 1140,
	1141, 701, 0, 1133, 1131, 1132, 0, 0, 0, 0,
	747, 747, 747, 745, 721, 0, 727, 0, 0, 751,
	739, 0, -2, 718, 0, 0, 752, 0, 78, 534,
	88, 0, 534, 534, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 741, 1147,
	0, 1121, 1122, 1191, 1192, 1193, 1194, 1195, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
	1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
	1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
	1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493,
	1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	0, 0, 0, 0, 1051, 1052, 1053, 1054, 1055, 1056,
	1059, 1060, 1057, 1058, 1061, 1062, 1063, 0, 0, 0,
	1064, 1065, 1066, 0, 0, 1068, 0, 1070, 0, 0,
	0, 0, 0, 0, 1130, 0, 0, 1067, 863, 864,
	865, 887, 888, 0, 951, 1127, 1120, 953, 0, 0,
	-2, 1072, 0, 0, 956, 961, 962, 0, 0, 1115,
	-2, 0, 1167, 0, 855, 1018, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 805, 823, 834, 831,
	830, 807, 0, 806, 804, 0, 808, 0, 0, 0,
	139, 0, 0, 1142, 1126, 437, 0, 0, 501, 0,
	655, 0, 0, 0, 1376, 509, 1180, 583, 0, 760,
	0, 597, 0, 0, 757, 0, 184, 0, 107, 108,
	0, 187, 0, 190, 0, 0, 0, 0, 0, 1072,
	658, 0, 0, 252, 0, 0, 658, 0, 1074, 768,
	769, 770, 771, 772, 855, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 817, 0, 792,
	792, 792, 809, 810, 818, 819, 824, 825, 836, 837,
	839, 841, 835, 835, 835, 832, 833, 741, 126, 0,
	276, 0, 0, 0, 284, 285, 0, 571, 0, 575,
	310, 311, 312, 577, 578, 291, 317, 318, 319, 320,
	321, 322, 0, 286, 288, 300, 287, 289, 292, 0,
	203, 373, 374, 376, 377, 378, 382, 0, 426, 384,
	386, 388, 390, 392, 400, 404, 658, 410, 413, 417,
	418, 419, 420, 0, 0, 0, 499, 0, 630, 675,
	676, 679, 683, 684, 687, 690, 691, 681, 858, 644,
	645, 646, 669, 670, 521, 0, 0, 562, 653, 0,
	0, 760, 0, 0, 0, 1139, 760, 0, 1135, 0,
	0, 0, 0, 0, 742, 746, 743, 744, 0, 0,
	727, 739, 709, 0, 0, 0, 716, 717, 738, 0,
	737, 726, -2, 0, 0, 0, 0, 0, 533, 90,
	1376, 0, 111, 0, 0, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 83, 0, 0, 0, 1150, 129, 0,
	1157, 859, 764, 765, 811, 812, 813, 814, 815, 860,
	861, 0, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, -2, -2, -2, 879, 880, 881, -2, -2,
	-2, 885, 886, -2, 1069, 1071, 0, 1130, 0, -2,
	0, -2, -2, -2, -2, 899, 0, 901, 904, 906,
	908, 0, 0, 0, 0, 1129, 918, 1107, 0, 0,
	1048, 1049, 1050, 903, 0, 0, 1128, 1119, 0, 0,
	-2, 958, 0, 0, 0, 1078, 1079, 1114, 1110, 0,
	965, 668, 0, 0, 0, 0, 972, 0, 1176, 842,
	843, 844, 845, 846, 847, 856, 1026, 0, 0, 0,
	979, 980, 982, 983, 985, 986, 0, 0, 0, 994,
	0, 1082, -2, -2, -2, -2, -2, -2, -2, 0,
	996, 0, 998, 1072, 1092, 0, 0, 921, 0, 0,
	0, 0, 1394, 0, 1001, 1072, 1100, 0, 0, 0,
	0, 0, 1072, 0, 1106, 0, 0, 0, 0, 0,
	1012, 0, 1014, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 436, 1156, 438, 440, 441, 442,
	443, 1181, 0, 1181, 0, 0, 0, 0, 0, 0,
	585, 591, 0, 609, 0, 609, 599, 0, 0, 0,
	609, 613, 614, 616, 617, 0, 0, 758, 200, 109,
	109, 1145, 109, 194, 197, 235, 0, 207, 227, 0,
	0, 0, 229, 231, 0, 761, 763, 0, 773, 0,
	138, 0, 0, 278, 0, 570, 576, 0, 307, 0,
	309, 0, 204, 428, 260, 402, 405, 423, 424, 425,
	755, 0, 685, 0, 0, 682, 688, 689, 0, 672,
	519, 520, 0, 0, 658, 1158, 693, 1137, 741, 700,
	702, 1138, 693, 1134, 729, 0, 731, 0, 0, 0,
	733, 0, 722, 0, 724, 739, 714, 0, 0, 707,
	0, 706, 727, 735, 0, 0, 753, 89, 523, 0,
	0, 0, 92, 1376, 100, 0, 451, 0, 0, 0,
	0, 0, 536, 101, 1376, 109, 1376, 109, 102, 79,
	534, 80, 0, 529, 0, 522, 81, 0, 531, 0,
	138, 0, 0, 0, -2, -2, 0, 0, 0, 919,
	-2, 900, 902, 905, 907, 909, 0, 0, 0, 0,
	0, 0, 0, 920, 0, 0, 1117, 1120, -2, 1073,
	1076, 1077, 0, 0, 1111, 0, 0, 0, 0, 667,
	668, 668, 668, 971, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 993, 0, 995,
	997, 0, 0, 999, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 924, 925, 926,
	0, 0, 1000, 1098, 1099, 0, 0, 0, 0, 0,
	0, 1006, 0, 1105, 0, 0, 0, 1010, 1011, 1013,
	0, 790, 0, 816, 838, 840, 828, 140, 0, 1143,
	445, 478, 0, 0, 1181, 0, 434, 479, 503, 505,
	0, 0, 587, 591, 0, 590, 656, 165, 0, 759,
	592, 609, 0, 0, 601, 598, 595, 760, 0, 0,
	0, 0, 185, 188, 191, 1073, 242, 0, 0, 1075,
	0, 766, 0, 0, 118, 0, 127, 244, 281, 305,
	306, 308, 301, 0, 0, 0, 671, 521, 0, 0,
	695, 0, 699, 0, 695, 730, 0, 749, 732, 712,
	723, 0, 720, 710, 0, 711, 0, 739, 0, 0,
	719, 0, 0, 0, 0, 110, 449, 468, 0, 0,
	512, 518, 518, 0, 975, 976, 0, 0, 0, 94,
	0, 0, 0, 0, 98, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 862, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 1108, 0, 1043,
	0, 0, 1119, -2, 1080, 1109, 1113, 0, 966, 0,
	0, 0, 0, 1169, 848, 849, 850, 851, 852, 853,
	854, 0, 1024, 1025, 1029, 0, 0, 977, 0, 0,
	1081, 1091, 1093, 922, 923, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, -2, -2, -2, 940, 941,
	942, -2, -2, -2, 0, 0, 0, 1094, 0, 0,
	1046, 1096, 1097, 1102, 1103, 0, 1003, 1004, 1005, 1104,
	0, 0, 0, 822, 0, 141, 432, 0, 439, 0,
	0, 0, 437, 0, 0, 0, 589, 591, 0, 582,
	583, 607, 608, 593, 606, 0, 609, 615, 612, 618,
	0, 0, 120, 0, 0, 767, 774, 136, 1268, 134,
	131, 133, 261, 680, 686, 673, 521, 654, 1020, 0,
	0, 703, 1020, 0, 727, 725, 708, 704, 0, 715,
	0, 736, 525, 527, 91, 0, 450, 0, 453, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 470,
	477, 0, 521, 1161, 0, 521, 0, 0, 0, 0,
	0, 106, 0, 0, 535, 0, 109, 109, 524, 0,
	0, 0, 530, 0, 532, 128, 0, 0, 0, -2,
	0, 912, -2, -2, 1042, 1073, 1118, 1112, 1166, 668,
	967, 969, 970, 857, 1031, 1028, 0, 1015, 991, 992,
	1090, 0, 0, 0, 0, 1073, 1045, 1002, 0, 1008,
	1009, 791, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 591, 0, 584, 585, 0, 0, 0, 600, 610,
	0, 0, 0, 762, 0, 0, 0, 0, 674, 641,
	0, 694, 692, 642, 748, 739, 0, 734, 93, 0,
	454, 455, 1181, 0, 458, 461, 0, 463, 1183, 445,
	0, 474, 475, 513, 514, 517, 515, 518, 668, 472,
	0, 95, 96, 105, 113, 97, 103, 0, 0, 0,
	0, 740, 0, 0, -2, -2, 913, 1044, 0, 668,
	0, 1017, -2, 0, 0, 0, 1047, 0, 0, 477,
	0, 467, 445, 435, 477, 0, 0, 586, 587, 0,
	0, 0, 619, 620, 0, 0, 0, 135, 0, 130,
	132, 1019, 1021, 0, 713, 705, 452, 456, 0, 0,
	483, 0, 471, 0, 521, 0, 0, 115, 0, 526,
	528, 0, 0, 0, 968, 1034, 0, -2, 0, 948,
	1007, 0, 445, 477, 433, 445, 0, 588, 589, 0,
	603, 760, 605, 0, 0, 137, 0, 0, 0, 462,
	488, 0, 0, 0, 516, 966, 479, 99, 0, 112,
	0, 0, 668, 0, 0, 0, 1030, 949, 0, 465,
	445, 507, 0, 580, 0, 604, 138, 138, 1022, 1023,
	0, 464, 484, 485, 0, 480, 481, 482, 1182, 476,
	483, 114, 85, 87, 0, 1027, 1032, 1035, -2, 1336,
	1216, 0, 1033, 0, 466, 477, 760, 121, 122, 457,
	486, 0, 487, 0, 0, 0, 488, 0, 0, 1037,
	1038, 1039, 1040, 1041, 448, 445, 602, 489, 0, 492,
	493, 0, 490, 473, 0, 444, 446, 447, 508, 491,
	494, 495, 1036,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 359, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 363, 358,
	337, 339, 338, 3, 360, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 361, 342, 362, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 57681, 357, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:861
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:867
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:873
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:883
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "GRANT")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "INSERT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			return helpWith(sqllex, "RESET")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:984
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1030
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1036
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1125
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1135
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1197
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1198
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1201
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1202
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1229
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1255
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1362
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1395
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1406
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "CREATE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			return helpWith(sqllex, "DELETE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1445
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			return helpWith(sqllex, "DROP")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1511
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1526
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1541
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1592
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1601
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1609
		{
			return helpWith(sqllex, "DELETE")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1610
		{
			return helpWith(sqllex, "INSERT")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1611
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1619
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1620
		{ /* SKIP DOC */
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1672
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			return helpWith(sqllex, "GRANT")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1747
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1769
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			return helpWith(sqllex, "RESET")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1842
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1850
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1852
		{ /* SKIP DOC */
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1853
		{ /* SKIP DOC */
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1854
		{
			return unimplemented(sqllex, "set local")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1867
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1917
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1922
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1947
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1950
		{
			return unimplemented(sqllex, "set from current")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1952
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1958
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1968
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1970
		{
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = Low
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = Normal
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = High
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2089
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2090
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2091
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2092
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2093
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.str = "client_encoding"
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2142
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2164
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2175
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2186
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2197
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2208
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2264
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2277
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2300
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2331
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2342
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2353
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2364
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2375
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2379
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2383
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2387
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2393
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2421
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2520
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2524
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = DropDefault
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2534
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2739
		{
			return unimplemented(sqllex, "match full")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2740
		{
			return unimplemented(sqllex, "match partial")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2741
		{
			return unimplemented(sqllex, "match simple")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2742
		{
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2748
		{
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2749
		{
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2750
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2751
		{
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2752
		{
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2755
		{
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2758
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2761
		{
			return unimplemented(sqllex, "no action")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2764
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			return unimplemented(sqllex, "action set null")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
			return unimplemented(sqllex, "action set default")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2792
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2803
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2807
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2828
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2868
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = true
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = false
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2898
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2899
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2902
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2903
		{
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = Ascending
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = Descending
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 522:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2943
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2945
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = true
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = false
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2978
		{
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2979
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2990
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3012
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3016
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3017
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3018
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3036
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3054
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3067
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
		}
	case 560:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3078
		{
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.str = ""
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.str = ""
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3125
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3134
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[2].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = ReadOnly
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = ReadWrite
		}
	case 579:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.str = ""
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.str = ""
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.str = ""
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.str = ""
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3247
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3248
		{
		}
	case 592:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3272
		{
			return helpWith(sqllex, "INSERT")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3331
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3335
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3343
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 610:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3366
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3370
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3371
		{
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3500
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3535
		{
			return helpWith(sqllex, "SELECT")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			return helpWith(sqllex, "VALUES")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3537
		{
			return helpWith(sqllex, "TABLE")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3583
		{
			return helpWith(sqllex, "SELECT")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3627
		{
			return helpWith(sqllex, "TABLE")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3638
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3639
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3640
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3643
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3644
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3647
		{
			return unimplemented(sqllex, "cte")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3650
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3651
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3655
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3658
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3659
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = true
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = false
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = false
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = true
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3683
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3730
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3750
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3802
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3803
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3806
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3807
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3865
		{
			return helpWith(sqllex, "VALUES")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3867
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3882
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &From{}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3904
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3922
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3949
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3986
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = nil
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4052
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4058
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = true
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = false
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.str = astFullJoin
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.str = astLeftJoin
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.str = astRightJoin
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.str = astInnerJoin
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4169
		{
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4170
		{
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4256
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4270
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4278
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4302
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4313
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4376
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4385
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = nil
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4450
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4546
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 828:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4578
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4618
		{
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = year
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = month
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = day
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = hour
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = minute
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = month
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = hour
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = minute
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = minute
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = nil
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = second
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4713
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4748
		{
			return unimplemented(sqllex, "at tz")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4916
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4982
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5155
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5208
		{
			return unimplemented(sqllex, "variadic")
		}
	case 968:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5209
		{
			return unimplemented(sqllex, "variadic")
		}
	case 969:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5222
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 973:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5233
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5249
		{
			return unimplemented(sqllex, "func_application")
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5250
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 977:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5254
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5263
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5272
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5282
		{
			return unimplemented(sqllex, "current role")
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5283
		{
			return unimplemented(sqllex, "current user")
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5284
		{
			return unimplemented(sqllex, "session user")
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5285
		{
			return unimplemented(sqllex, "user")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5298
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5303
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5308
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5318
		{
			return unimplemented(sqllex, "treat")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5324
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5352
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5355
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5360
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5364
		{
			return unimplemented(sqllex, "within group")
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5365
		{
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5400
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.str = ""
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5462
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5463
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5464
		{
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5467
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5468
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5474
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5475
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5476
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5477
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5478
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5489
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5493
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5513
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5519
		{
			sqlVAL.union.val = Any
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5523
		{
			sqlVAL.union.val = Some
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5527
		{
			sqlVAL.union.val = All
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = Plus
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.union.val = Minus
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = Mult
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5535
		{
			sqlVAL.union.val = Div
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5537
		{
			sqlVAL.union.val = Mod
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = Bitand
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = Bitor
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = Pow
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5541
		{
			sqlVAL.union.val = Bitxor
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = LT
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = GT
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = EQ
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5545
		{
			sqlVAL.union.val = LE
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = GE
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = NE
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = Like
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = NotLike
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = ILike
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = NotILike
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5565
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5569
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5585
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5593
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5609
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5613
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5656
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5660
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5677
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5681
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5685
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5703
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5751
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5755
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5761
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5767
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5771
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5795
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5807
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5817
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5837
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5842
		{
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5843
		{
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5871
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5877
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5961
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6005
		{
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6041
		{
			return unimplemented(sqllex, "func const")
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6050
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6056
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6060
		{
			sqlVAL.union.val = DNull
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6071
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6077
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6112
		{
			sqlVAL.str = ""
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
