// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

//line sql.y:482
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const JSON = 57515
const JSONB = 57516
const KEY = 57517
const KEYS = 57518
const KV = 57519
const LATERAL = 57520
const LC_CTYPE = 57521
const LC_COLLATE = 57522
const LEADING = 57523
const LEAST = 57524
const LEFT = 57525
const LESS = 57526
const LEVEL = 57527
const LIKE = 57528
const LIMIT = 57529
const LIST = 57530
const LOCAL = 57531
const LOCALTIME = 57532
const LOCALTIMESTAMP = 57533
const LOW = 57534
const LSHIFT = 57535
const MATCH = 57536
const MAXVALUE = 57537
const MINUTE = 57538
const MONTH = 57539
const NAN = 57540
const NAME = 57541
const NAMES = 57542
const NATURAL = 57543
const NEXT = 57544
const NO = 57545
const NO_INDEX_JOIN = 57546
const NORMAL = 57547
const NOT = 57548
const NOTHING = 57549
const NULL = 57550
const NULLIF = 57551
const NULLS = 57552
const NUMERIC = 57553
const OF = 57554
const OFF = 57555
const OFFSET = 57556
const OID = 57557
const ON = 57558
const ONLY = 57559
const OPTIONS = 57560
const OR = 57561
const ORDER = 57562
const ORDINALITY = 57563
const OUT = 57564
const OUTER = 57565
const OVER = 57566
const OVERLAPS = 57567
const OVERLAY = 57568
const PARENT = 57569
const PARTIAL = 57570
const PARTITION = 57571
const PASSWORD = 57572
const PAUSE = 57573
const PLACING = 57574
const PLANS = 57575
const POSITION = 57576
const PRECEDING = 57577
const PRECISION = 57578
const PREPARE = 57579
const PRIMARY = 57580
const PRIORITY = 57581
const QUERIES = 57582
const QUERY = 57583
const RANGE = 57584
const READ = 57585
const REAL = 57586
const RECURSIVE = 57587
const REF = 57588
const REFERENCES = 57589
const REGCLASS = 57590
const REGPROC = 57591
const REGPROCEDURE = 57592
const REGNAMESPACE = 57593
const REGTYPE = 57594
const REMOVE_PATH = 57595
const RENAME = 57596
const REPEATABLE = 57597
const RELEASE = 57598
const RESET = 57599
const RESTORE = 57600
const RESTRICT = 57601
const RESUME = 57602
const RETURNING = 57603
const REVOKE = 57604
const RIGHT = 57605
const ROLLBACK = 57606
const ROLLUP = 57607
const ROW = 57608
const ROWS = 57609
const RSHIFT = 57610
const SAVEPOINT = 57611
const SCATTER = 57612
const SCRUB = 57613
const SEARCH = 57614
const SECOND = 57615
const SELECT = 57616
const SEQUENCES = 57617
const SERIAL = 57618
const SERIALIZABLE = 57619
const SESSION = 57620
const SESSIONS = 57621
const SESSION_USER = 57622
const SET = 57623
const SETTING = 57624
const SETTINGS = 57625
const SHOW = 57626
const SIMILAR = 57627
const SIMPLE = 57628
const SMALLINT = 57629
const SMALLSERIAL = 57630
const SNAPSHOT = 57631
const SOME = 57632
const SPLIT = 57633
const SQL = 57634
const START = 57635
const STATUS = 57636
const STDIN = 57637
const STRICT = 57638
const STRING = 57639
const STORE = 57640
const STORING = 57641
const SUBSTRING = 57642
const SYMMETRIC = 57643
const SYSTEM = 57644
const TABLE = 57645
const TABLES = 57646
const TEMP = 57647
const TEMPLATE = 57648
const TEMPORARY = 57649
const TESTING_RANGES = 57650
const TESTING_RELOCATE = 57651
const TEXT = 57652
const THAN = 57653
const THEN = 57654
const TIME = 57655
const TIMESTAMP = 57656
const TIMESTAMPTZ = 57657
const TO = 57658
const TRAILING = 57659
const TRACE = 57660
const TRANSACTION = 57661
const TREAT = 57662
const TRIM = 57663
const TRUE = 57664
const TRUNCATE = 57665
const TYPE = 57666
const UNBOUNDED = 57667
const UNCOMMITTED = 57668
const UNION = 57669
const UNIQUE = 57670
const UNKNOWN = 57671
const UPDATE = 57672
const UPSERT = 57673
const USE = 57674
const USER = 57675
const USERS = 57676
const USING = 57677
const UUID = 57678
const VALID = 57679
const VALIDATE = 57680
const VALUE = 57681
const VALUES = 57682
const VARCHAR = 57683
const VARIADIC = 57684
const VIEW = 57685
const VARYING = 57686
const WHEN = 57687
const WHERE = 57688
const WINDOW = 57689
const WITH = 57690
const WITHIN = 57691
const WITHOUT = 57692
const WRITE = 57693
const YEAR = 57694
const ZONE = 57695
const NOT_LA = 57696
const WITH_LA = 57697
const AS_LA = 57698
const CONTAINED_BY = 57699
const HAS_SOME_KEY = 57700
const HAS_ALL_KEYS = 57701
const POSTFIXOP = 57702
const UMINUS = 57703
const HELPTOKEN = 57704

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6916

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	382, 54,
	-2, 724,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	153, 572,
	-2, 0,
	-1, 54,
	96, 724,
	157, 724,
	330, 724,
	331, 724,
	-2, 0,
	-1, 64,
	1, 686,
	216, 686,
	261, 686,
	377, 686,
	379, 686,
	381, 686,
	382, 686,
	-2, 699,
	-1, 97,
	4, 726,
	20, 726,
	21, 726,
	23, 726,
	28, 726,
	33, 726,
	34, 726,
	35, 726,
	36, 726,
	37, 726,
	38, 726,
	39, 726,
	40, 726,
	41, 726,
	42, 726,
	44, 726,
	45, 726,
	46, 726,
	47, 726,
	48, 726,
	51, 726,
	52, 726,
	53, 726,
	55, 726,
	56, 726,
	60, 726,
	61, 726,
	62, 726,
	64, 726,
	65, 726,
	66, 726,
	67, 726,
	69, 726,
	71, 726,
	72, 726,
	75, 726,
	76, 726,
	77, 726,
	85, 726,
	86, 726,
	87, 726,
	88, 726,
	89, 726,
	90, 726,
	91, 726,
	92, 726,
	94, 726,
	96, 726,
	98, 726,
	101, 726,
	102, 726,
	104, 726,
	108, 726,
	109, 726,
	110, 726,
	111, 726,
	112, 726,
	113, 726,
	114, 726,
	122, 726,
	123, 726,
	124, 726,
	125, 726,
	126, 726,
	128, 726,
	130, 726,
	135, 726,
	136, 726,
	138, 726,
	141, 726,
	142, 726,
	145, 726,
	146, 726,
	147, 726,
	148, 726,
	151, 726,
	152, 726,
	154, 726,
	157, 726,
	158, 726,
	159, 726,
	160, 726,
	161, 726,
	162, 726,
	163, 726,
	164, 726,
	166, 726,
	169, 726,
	170, 726,
	171, 726,
	173, 726,
	174, 726,
	175, 726,
	176, 726,
	177, 726,
	179, 726,
	180, 726,
	182, 726,
	184, 726,
	185, 726,
	188, 726,
	189, 726,
	192, 726,
	194, 726,
	196, 726,
	197, 726,
	198, 726,
	199, 726,
	200, 726,
	202, 726,
	203, 726,
	204, 726,
	205, 726,
	209, 726,
	210, 726,
	211, 726,
	212, 726,
	213, 726,
	215, 726,
	217, 726,
	218, 726,
	221, 726,
	222, 726,
	224, 726,
	226, 726,
	227, 726,
	228, 726,
	229, 726,
	230, 726,
	231, 726,
	233, 726,
	234, 726,
	235, 726,
	236, 726,
	237, 726,
	239, 726,
	240, 726,
	241, 726,
	242, 726,
	243, 726,
	244, 726,
	245, 726,
	246, 726,
	248, 726,
	249, 726,
	250, 726,
	251, 726,
	252, 726,
	254, 726,
	255, 726,
	256, 726,
	257, 726,
	258, 726,
	259, 726,
	260, 726,
	262, 726,
	264, 726,
	265, 726,
	266, 726,
	267, 726,
	269, 726,
	270, 726,
	271, 726,
	272, 726,
	273, 726,
	275, 726,
	276, 726,
	277, 726,
	278, 726,
	279, 726,
	281, 726,
	282, 726,
	283, 726,
	284, 726,
	286, 726,
	287, 726,
	288, 726,
	289, 726,
	291, 726,
	292, 726,
	293, 726,
	294, 726,
	295, 726,
	296, 726,
	297, 726,
	298, 726,
	299, 726,
	300, 726,
	302, 726,
	304, 726,
	305, 726,
	306, 726,
	307, 726,
	308, 726,
	309, 726,
	310, 726,
	311, 726,
	313, 726,
	314, 726,
	315, 726,
	318, 726,
	319, 726,
	320, 726,
	321, 726,
	323, 726,
	324, 726,
	325, 726,
	326, 726,
	329, 726,
	330, 726,
	331, 726,
	332, 726,
	334, 726,
	336, 726,
	337, 726,
	338, 726,
	339, 726,
	340, 726,
	341, 726,
	344, 726,
	349, 726,
	350, 726,
	351, 726,
	352, 726,
	353, 726,
	-2, 0,
	-1, 115,
	1, 689,
	216, 689,
	261, 689,
	377, 689,
	379, 689,
	381, 689,
	382, 689,
	-2, 698,
	-1, 120,
	1, 623,
	169, 623,
	239, 623,
	243, 623,
	381, 623,
	382, 623,
	-2, 0,
	-1, 122,
	1, 623,
	381, 623,
	382, 623,
	-2, 0,
	-1, 123,
	1, 623,
	381, 623,
	382, 623,
	-2, 0,
	-1, 124,
	1, 627,
	381, 627,
	382, 627,
	-2, 0,
	-1, 145,
	4, 732,
	5, 732,
	6, 732,
	7, 732,
	8, 732,
	9, 732,
	20, 732,
	21, 732,
	23, 732,
	28, 732,
	29, 732,
	33, 732,
	34, 732,
	35, 732,
	36, 732,
	37, 732,
	38, 732,
	39, 732,
	40, 732,
	41, 732,
	42, 732,
	44, 732,
	45, 732,
	46, 732,
	47, 732,
	48, 732,
	49, 732,
	50, 732,
	51, 732,
	52, 732,
	53, 732,
	55, 732,
	56, 732,
	58, 732,
	60, 732,
	61, 732,
	62, 732,
	64, 732,
	65, 732,
	66, 732,
	67, 732,
	69, 732,
	71, 732,
	72, 732,
	74, 732,
	75, 732,
	76, 732,
	77, 732,
	79, 732,
	80, 732,
	81, 732,
	83, 732,
	84, 732,
	85, 732,
	86, 732,
	87, 732,
	88, 732,
	89, 732,
	90, 732,
	91, 732,
	92, 732,
	94, 732,
	96, 732,
	98, 732,
	101, 732,
	102, 732,
	104, 732,
	108, 732,
	109, 732,
	110, 732,
	111, 732,
	112, 732,
	113, 732,
	114, 732,
	115, 732,
	116, 732,
	122, 732,
	123, 732,
	124, 732,
	125, 732,
	126, 732,
	128, 732,
	130, 732,
	133, 732,
	135, 732,
	136, 732,
	138, 732,
	141, 732,
	142, 732,
	145, 732,
	146, 732,
	147, 732,
	148, 732,
	149, 732,
	151, 732,
	152, 732,
	154, 732,
	156, 732,
	157, 732,
	158, 732,
	159, 732,
	160, 732,
	161, 732,
	162, 732,
	163, 732,
	164, 732,
	166, 732,
	168, 732,
	169, 732,
	170, 732,
	171, 732,
	172, 732,
	173, 732,
	174, 732,
	175, 732,
	176, 732,
	177, 732,
	179, 732,
	180, 732,
	182, 732,
	183, 732,
	184, 732,
	185, 732,
	186, 732,
	188, 732,
	189, 732,
	192, 732,
	194, 732,
	195, 732,
	196, 732,
	197, 732,
	198, 732,
	199, 732,
	200, 732,
	201, 732,
	202, 732,
	203, 732,
	204, 732,
	205, 732,
	206, 732,
	208, 732,
	209, 732,
	210, 732,
	211, 732,
	212, 732,
	213, 732,
	215, 732,
	218, 732,
	221, 732,
	222, 732,
	223, 732,
	224, 732,
	225, 732,
	226, 732,
	227, 732,
	228, 732,
	229, 732,
	230, 732,
	231, 732,
	233, 732,
	234, 732,
	235, 732,
	236, 732,
	237, 732,
	239, 732,
	240, 732,
	241, 732,
	242, 732,
	243, 732,
	244, 732,
	245, 732,
	246, 732,
	248, 732,
	249, 732,
	250, 732,
	251, 732,
	252, 732,
	254, 732,
	255, 732,
	256, 732,
	257, 732,
	258, 732,
	259, 732,
	260, 732,
	262, 732,
	263, 732,
	264, 732,
	265, 732,
	266, 732,
	267, 732,
	269, 732,
	270, 732,
	271, 732,
	272, 732,
	273, 732,
	275, 732,
	276, 732,
	277, 732,
	278, 732,
	279, 732,
	280, 732,
	281, 732,
	282, 732,
	283, 732,
	284, 732,
	285, 732,
	286, 732,
	287, 732,
	288, 732,
	289, 732,
	291, 732,
	292, 732,
	293, 732,
	294, 732,
	295, 732,
	296, 732,
	297, 732,
	298, 732,
	299, 732,
	300, 732,
	302, 732,
	304, 732,
	305, 732,
	306, 732,
	307, 732,
	308, 732,
	309, 732,
	310, 732,
	311, 732,
	313, 732,
	314, 732,
	315, 732,
	318, 732,
	319, 732,
	320, 732,
	321, 732,
	322, 732,
	323, 732,
	324, 732,
	325, 732,
	326, 732,
	329, 732,
	330, 732,
	331, 732,
	332, 732,
	333, 732,
	334, 732,
	336, 732,
	337, 732,
	338, 732,
	339, 732,
	340, 732,
	341, 732,
	344, 732,
	349, 732,
	350, 732,
	351, 732,
	352, 732,
	353, 732,
	354, 732,
	364, 732,
	369, 732,
	370, 732,
	371, 732,
	378, 732,
	384, 732,
	-2, 0,
	-1, 148,
	1, 54,
	382, 54,
	-2, 724,
	-1, 515,
	132, 1346,
	316, 1346,
	359, 1346,
	380, 1346,
	-2, 0,
	-1, 516,
	132, 1293,
	316, 1293,
	359, 1293,
	380, 1293,
	-2, 0,
	-1, 518,
	132, 1405,
	316, 1405,
	359, 1405,
	380, 1405,
	-2, 0,
	-1, 520,
	132, 1428,
	316, 1428,
	359, 1428,
	380, 1428,
	-2, 0,
	-1, 527,
	132, 1351,
	316, 1351,
	359, 1351,
	380, 1351,
	-2, 340,
	-1, 553,
	1, 418,
	377, 418,
	379, 418,
	381, 418,
	382, 418,
	-2, 0,
	-1, 554,
	1, 470,
	129, 470,
	377, 470,
	379, 470,
	381, 470,
	382, 470,
	-2, 0,
	-1, 560,
	1, 432,
	377, 432,
	379, 432,
	381, 432,
	382, 432,
	-2, 0,
	-1, 562,
	1, 436,
	377, 436,
	379, 436,
	381, 436,
	382, 436,
	-2, 0,
	-1, 565,
	1, 444,
	377, 444,
	379, 444,
	381, 444,
	382, 444,
	-2, 0,
	-1, 566,
	1, 449,
	377, 449,
	379, 449,
	381, 449,
	382, 449,
	-2, 0,
	-1, 569,
	1, 459,
	377, 459,
	379, 459,
	381, 459,
	382, 459,
	-2, 0,
	-1, 594,
	117, 734,
	129, 734,
	187, 734,
	214, 734,
	-2, 693,
	-1, 601,
	117, 733,
	129, 733,
	187, 733,
	214, 733,
	-2, 690,
	-1, 658,
	378, 1271,
	-2, 1264,
	-1, 659,
	378, 1272,
	-2, 1265,
	-1, 665,
	5, 918,
	378, 918,
	-2, 1480,
	-1, 690,
	5, 877,
	-2, 1449,
	-1, 691,
	5, 912,
	378, 912,
	-2, 1451,
	-1, 692,
	5, 887,
	-2, 1452,
	-1, 693,
	5, 886,
	-2, 1453,
	-1, 694,
	5, 912,
	378, 912,
	-2, 1456,
	-1, 695,
	5, 912,
	378, 912,
	-2, 1457,
	-1, 696,
	5, 913,
	-2, 1460,
	-1, 697,
	5, 869,
	-2, 1461,
	-1, 698,
	5, 869,
	-2, 1462,
	-1, 699,
	5, 894,
	-2, 1466,
	-1, 700,
	5, 879,
	-2, 1467,
	-1, 701,
	5, 880,
	-2, 1468,
	-1, 702,
	5, 870,
	-2, 1474,
	-1, 703,
	5, 871,
	-2, 1475,
	-1, 704,
	5, 872,
	-2, 1476,
	-1, 705,
	5, 873,
	-2, 1477,
	-1, 706,
	5, 874,
	-2, 1478,
	-1, 707,
	5, 875,
	-2, 1479,
	-1, 708,
	5, 869,
	-2, 1486,
	-1, 709,
	5, 878,
	-2, 1491,
	-1, 710,
	5, 876,
	-2, 1494,
	-1, 711,
	5, 910,
	378, 910,
	-2, 1496,
	-1, 712,
	5, 914,
	-2, 1499,
	-1, 713,
	5, 916,
	-2, 1500,
	-1, 714,
	5, 909,
	378, 909,
	-2, 1505,
	-1, 910,
	230, 722,
	-2, 565,
	-1, 915,
	216, 1268,
	-2, 0,
	-1, 951,
	1, 223,
	377, 223,
	379, 223,
	381, 223,
	382, 223,
	-2, 697,
	-1, 954,
	4, 1504,
	10, 1504,
	11, 1504,
	13, 1504,
	14, 1504,
	15, 1504,
	16, 1504,
	17, 1504,
	18, 1504,
	20, 1504,
	21, 1504,
	23, 1504,
	26, 1504,
	28, 1504,
	30, 1504,
	33, 1504,
	34, 1504,
	35, 1504,
	36, 1504,
	37, 1504,
	38, 1504,
	39, 1504,
	40, 1504,
	41, 1504,
	42, 1504,
	44, 1504,
	45, 1504,
	46, 1504,
	47, 1504,
	48, 1504,
	51, 1504,
	52, 1504,
	53, 1504,
	55, 1504,
	56, 1504,
	57, 1504,
	60, 1504,
	61, 1504,
	62, 1504,
	63, 1504,
	64, 1504,
	65, 1504,
	66, 1504,
	67, 1504,
	69, 1504,
	70, 1504,
	71, 1504,
	72, 1504,
	74, 1504,
	75, 1504,
	76, 1504,
	77, 1504,
	85, 1504,
	86, 1504,
	87, 1504,
	88, 1504,
	89, 1504,
	90, 1504,
	91, 1504,
	92, 1504,
	94, 1504,
	96, 1504,
	98, 1504,
	101, 1504,
	102, 1504,
	104, 1504,
	108, 1504,
	109, 1504,
	110, 1504,
	111, 1504,
	112, 1504,
	113, 1504,
	114, 1504,
	118, 1504,
	119, 1504,
	120, 1504,
	121, 1504,
	122, 1504,
	123, 1504,
	124, 1504,
	125, 1504,
	126, 1504,
	127, 1504,
	128, 1504,
	130, 1504,
	133, 1504,
	135, 1504,
	136, 1504,
	138, 1504,
	141, 1504,
	142, 1504,
	145, 1504,
	146, 1504,
	147, 1504,
	148, 1504,
	149, 1504,
	150, 1504,
	151, 1504,
	152, 1504,
	154, 1504,
	156, 1504,
	157, 1504,
	158, 1504,
	159, 1504,
	160, 1504,
	161, 1504,
	162, 1504,
	163, 1504,
	164, 1504,
	166, 1504,
	168, 1504,
	169, 1504,
	170, 1504,
	171, 1504,
	172, 1504,
	173, 1504,
	174, 1504,
	175, 1504,
	176, 1504,
	177, 1504,
	179, 1504,
	180, 1504,
	182, 1504,
	183, 1504,
	184, 1504,
	185, 1504,
	186, 1504,
	188, 1504,
	189, 1504,
	192, 1504,
	193, 1504,
	194, 1504,
	196, 1504,
	197, 1504,
	198, 1504,
	199, 1504,
	200, 1504,
	201, 1504,
	202, 1504,
	203, 1504,
	204, 1504,
	205, 1504,
	209, 1504,
	210, 1504,
	211, 1504,
	212, 1504,
	213, 1504,
	215, 1504,
	218, 1504,
	219, 1504,
	221, 1504,
	222, 1504,
	224, 1504,
	226, 1504,
	227, 1504,
	228, 1504,
	229, 1504,
	230, 1504,
	231, 1504,
	233, 1504,
	234, 1504,
	235, 1504,
	236, 1504,
	237, 1504,
	239, 1504,
	240, 1504,
	241, 1504,
	242, 1504,
	243, 1504,
	244, 1504,
	245, 1504,
	246, 1504,
	248, 1504,
	249, 1504,
	250, 1504,
	251, 1504,
	252, 1504,
	253, 1504,
	254, 1504,
	255, 1504,
	256, 1504,
	257, 1504,
	258, 1504,
	259, 1504,
	260, 1504,
	262, 1504,
	263, 1504,
	264, 1504,
	265, 1504,
	266, 1504,
	267, 1504,
	268, 1504,
	269, 1504,
	270, 1504,
	271, 1504,
	272, 1504,
	273, 1504,
	275, 1504,
	276, 1504,
	277, 1504,
	278, 1504,
	279, 1504,
	281, 1504,
	282, 1504,
	283, 1504,
	284, 1504,
	285, 1504,
	286, 1504,
	287, 1504,
	288, 1504,
	289, 1504,
	291, 1504,
	292, 1504,
	293, 1504,
	294, 1504,
	295, 1504,
	296, 1504,
	297, 1504,
	298, 1504,
	299, 1504,
	300, 1504,
	302, 1504,
	304, 1504,
	305, 1504,
	306, 1504,
	307, 1504,
	308, 1504,
	309, 1504,
	310, 1504,
	311, 1504,
	313, 1504,
	314, 1504,
	315, 1504,
	318, 1504,
	319, 1504,
	320, 1504,
	321, 1504,
	323, 1504,
	324, 1504,
	325, 1504,
	326, 1504,
	329, 1504,
	330, 1504,
	331, 1504,
	332, 1504,
	334, 1504,
	336, 1504,
	337, 1504,
	338, 1504,
	339, 1504,
	340, 1504,
	341, 1504,
	344, 1504,
	349, 1504,
	350, 1504,
	351, 1504,
	352, 1504,
	353, 1504,
	354, 1504,
	355, 1504,
	357, 1504,
	358, 1504,
	359, 1504,
	360, 1504,
	361, 1504,
	362, 1504,
	363, 1504,
	364, 1504,
	366, 1504,
	367, 1504,
	368, 1504,
	369, 1504,
	370, 1504,
	371, 1504,
	372, 1504,
	373, 1504,
	374, 1504,
	376, 1504,
	379, 1504,
	380, 1504,
	383, 1504,
	384, 1504,
	-2, 0,
	-1, 970,
	132, 1405,
	316, 1405,
	359, 1405,
	380, 1405,
	-2, 0,
	-1, 987,
	132, 1428,
	316, 1428,
	359, 1428,
	380, 1428,
	-2, 0,
	-1, 988,
	169, 635,
	239, 635,
	243, 635,
	-2, 328,
	-1, 1056,
	117, 733,
	129, 733,
	187, 733,
	214, 733,
	-2, 694,
	-1, 1137,
	107, 699,
	117, 699,
	129, 699,
	165, 699,
	187, 699,
	214, 699,
	220, 699,
	327, 699,
	-2, 1047,
	-1, 1147,
	378, 1248,
	-2, 1236,
	-1, 1165,
	379, 1160,
	-2, 0,
	-1, 1189,
	169, 635,
	239, 635,
	243, 635,
	-2, 630,
	-1, 1217,
	379, 1160,
	-2, 0,
	-1, 1221,
	107, 699,
	117, 699,
	129, 699,
	165, 699,
	187, 699,
	214, 699,
	220, 699,
	327, 699,
	-2, 800,
	-1, 1366,
	169, 635,
	239, 635,
	243, 635,
	-2, 330,
	-1, 1474,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 953,
	-1, 1475,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 954,
	-1, 1476,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 955,
	-1, 1477,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 956,
	-1, 1478,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 957,
	-1, 1479,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 958,
	-1, 1480,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 959,
	-1, 1481,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 960,
	-1, 1490,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 969,
	-1, 1491,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 970,
	-1, 1492,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 971,
	-1, 1495,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 976,
	-1, 1501,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 978,
	-1, 1503,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 982,
	-1, 1504,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 983,
	-1, 1505,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 984,
	-1, 1506,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 985,
	-1, 1575,
	132, 1171,
	378, 1271,
	-2, 1264,
	-1, 1576,
	132, 1172,
	-2, 1445,
	-1, 1577,
	132, 1173,
	-2, 1350,
	-1, 1578,
	132, 1174,
	-2, 1311,
	-1, 1579,
	132, 1175,
	-2, 1328,
	-1, 1580,
	132, 1176,
	-2, 1349,
	-1, 1581,
	132, 1177,
	-2, 1402,
	-1, 1657,
	1, 801,
	74, 801,
	107, 801,
	117, 801,
	129, 801,
	133, 801,
	137, 801,
	139, 801,
	156, 801,
	165, 801,
	172, 801,
	183, 801,
	187, 801,
	201, 801,
	214, 801,
	216, 801,
	220, 801,
	261, 801,
	263, 801,
	327, 801,
	335, 801,
	346, 801,
	347, 801,
	356, 801,
	377, 801,
	379, 801,
	381, 801,
	382, 801,
	383, 801,
	-2, 800,
	-1, 1810,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 977,
	-1, 1811,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 979,
	-1, 1816,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 980,
	-1, 1834,
	225, 1131,
	-2, 1133,
	-1, 2009,
	230, 722,
	-2, 565,
	-1, 2067,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 981,
	-1, 2072,
	168, 0,
	-2, 997,
	-1, 2081,
	225, 1132,
	-2, 1134,
	-1, 2123,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1024,
	-1, 2124,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1025,
	-1, 2125,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1026,
	-1, 2129,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1030,
	-1, 2130,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1031,
	-1, 2131,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1032,
	-1, 2265,
	168, 0,
	-2, 998,
	-1, 2268,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 1001,
	-1, 2269,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 1003,
	-1, 2390,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 1002,
	-1, 2391,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 1004,
	-1, 2398,
	168, 0,
	-2, 1033,
	-1, 2475,
	168, 0,
	-2, 1034,
	-1, 2556,
	36, 0,
	149, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 1448,
	-1, 2642,
	378, 1516,
	-2, 505,
}

const sqlPrivate = 57344

const sqlLast = 44371

var sqlAct = [...]int{

	659, 2639, 2624, 2638, 2361, 2360, 2564, 2622, 2605, 2555,
	2528, 1726, 2217, 2565, 1263, 2566, 2554, 1734, 2371, 2100,
	2424, 2480, 2047, 618, 2319, 63, 2228, 657, 2333, 1307,
	649, 1804, 2250, 763, 1271, 944, 787, 2252, 2013, 185,
	904, 635, 1652, 2404, 185, 1709, 2183, 2015, 185, 1704,
	1219, 1723, 1948, 2021, 185, 2244, 1215, 1900, 2299, 185,
	185, 1927, 1198, 185, 1735, 1266, 185, 1708, 1265, 1670,
	1224, 947, 1935, 1698, 185, 656, 469, 26, 602, 1653,
	1899, 1453, 610, 110, 1661, 1143, 1705, 2153, 1530, 1845,
	1391, 2182, 1531, 1784, 991, 186, 1259, 451, 1284, 1227,
	1229, 1199, 1061, 1539, 629, 526, 1518, 1387, 1515, 769,
	1448, 1429, 1431, 448, 940, 802, 990, 1175, 1179, 1800,
	1555, 1549, 937, 1706, 930, 1712, 1206, 1728, 789, 952,
	772, 1626, 1604, 751, 506, 1132, 1639, 110, 628, 115,
	185, 185, 1571, 607, 1390, 1062, 1189, 651, 185, 176,
	484, 116, 1278, 1432, 1430, 519, 523, 927, 181, 749,
	1188, 2334, 1066, 547, 2167, 1833, 2362, 2168, 2362, 1286,
	1286, 185, 185, 792, 185, 185, 804, 1727, 1286, 2655,
	185, 185, 2654, 2648, 2647, 2601, 2648, 2600, 2648, 1254,
	2599, 1254, 2581, 2576, 1254, 2575, 2332, 1750, 2572, 1750,
	2552, 2551, 1254, 2523, 1296, 1296, 601, 1761, 2031, 498,
	616, 606, 1870, 1871, 2030, 1888, 1889, 1890, 766, 2518,
	2514, 606, 2506, 2385, 1254, 26, 2332, 1628, 2264, 2477,
	2455, 110, 2452, 1761, 2332, 2450, 1254, 2435, 2434, 2332,
	2660, 1254, 2332, 2412, 785, 1216, 2065, 1254, 1870, 1871,
	595, 1888, 1889, 1890, 2409, 2392, 2356, 2353, 1254, 1761,
	1750, 1750, 594, 1699, 1308, 1885, 2331, 892, 793, 2312,
	2332, 805, 2267, 1254, 2243, 2238, 1761, 1731, 1703, 1703,
	777, 781, 611, 2163, 2076, 1837, 1699, 2164, 1750, 799,
	2156, 1838, 2041, 1250, 1870, 1871, 2002, 1888, 1889, 1890,
	753, 1885, 2001, 1924, 1917, 1915, 1254, 1254, 1918, 1750,
	2263, 1914, 1913, 1296, 2646, 1750, 1750, 1077, 1078, 1771,
	2656, 1760, 2635, 1750, 1749, 1761, 715, 1750, 1750, 1876,
	1702, 1552, 1633, 1300, 1703, 2524, 1632, 1301, 1296, 755,
	1080, 756, 2385, 2156, 145, 1077, 1078, 1885, 1107, 1108,
	1109, 1117, 1118, 1119, 1627, 2057, 1659, 2136, 2078, 2002,
	1803, 1110, 1782, 1369, 1079, 1876, 1193, 1534, 1080, 1254,
	1891, 1121, 890, 147, 1750, 972, 148, 2335, 969, 968,
	1287, 1287, 1388, 1553, 1844, 967, 966, 965, 1892, 1287,
	964, 963, 1079, 962, 145, 1886, 961, 960, 1099, 959,
	958, 957, 956, 955, 757, 1096, 1891, 754, 600, 599,
	146, 1876, 598, 597, 593, 592, 591, 590, 139, 589,
	185, 792, 185, 147, 185, 140, 586, 185, 585, 584,
	583, 1886, 579, 185, 1085, 578, 577, 1554, 1551, 545,
	544, 543, 185, 185, 185, 185, 792, 542, 117, 541,
	540, 792, 1891, 1102, 1103, 1104, 1105, 896, 145, 2030,
	146, 539, 1085, 538, 537, 536, 535, 534, 533, 532,
	1887, 531, 1870, 1871, 530, 529, 607, 1886, 1627, 185,
	514, 513, 512, 511, 1114, 1122, 510, 147, 439, 417,
	410, 609, 910, 185, 409, 168, 167, 166, 117, 794,
	1870, 1871, 806, 1120, 1292, 1285, 1887, 165, 164, 185,
	163, 1568, 162, 1422, 1556, 161, 793, 1077, 1078, 185,
	160, 1112, 159, 158, 146, 908, 157, 913, 1100, 156,
	155, 154, 139, 153, 152, 151, 150, 149, 1394, 140,
	1080, 793, 929, 1003, 1870, 1871, 793, 933, 933, 1943,
	792, 2628, 1887, 1885, 1111, 1566, 1220, 1564, 1562, 1882,
	1883, 1884, 1730, 2378, 1079, 2626, 2623, 934, 1881, 1879,
	1880, 1872, 1873, 1874, 1875, 1877, 1878, 903, 2571, 953,
	1073, 185, 2553, 2538, 2533, 2472, 2453, 2298, 1106, 1876,
	2297, 2293, 2292, 1550, 2285, 1882, 1883, 1884, 973, 2284,
	2283, 2279, 2278, 1101, 1881, 1879, 1880, 1872, 1873, 1874,
	1875, 1877, 1878, 2277, 2276, 2270, 2249, 1876, 1001, 1766,
	1115, 1006, 2150, 2145, 2144, 2143, 2086, 2000, 2004, 1955,
	1951, 1922, 1919, 1907, 1085, 1898, 1869, 1866, 476, 1865,
	1863, 1882, 1883, 1884, 1850, 793, 1849, 1834, 1657, 38,
	1881, 1879, 1880, 1872, 1873, 1874, 1875, 1877, 1878, 607,
	1073, 1876, 41, 1304, 1218, 764, 1526, 988, 1144, 1151,
	1135, 1217, 2649, 1057, 985, 1072, 1081, 1082, 1083, 1084,
	1086, 1087, 2633, 1886, 1056, 1763, 2613, 2612, 475, 1113,
	1052, 901, 1091, 1092, 1098, 1097, 1093, 1094, 1095, 1116,
	896, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087,
	1270, 2102, 1004, 2045, 1213, 2645, 2543, 477, 2294, 2542,
	2541, 2509, 2501, 2500, 53, 2377, 479, 54, 2491, 2489,
	476, 2467, 1077, 1078, 2466, 2465, 2421, 2400, 2386, 2365,
	2352, 38, 2338, 2290, 1389, 1799, 2226, 794, 2223, 185,
	595, 185, 2222, 1798, 41, 1080, 1058, 1059, 1887, 2220,
	56, 2191, 594, 145, 2190, 2171, 2159, 1069, 1070, 2071,
	1990, 1982, 794, 1968, 185, 185, 1074, 794, 1527, 1079,
	475, 1967, 1953, 1923, 1897, 1099, 1859, 1858, 1855, 1204,
	1197, 1830, 147, 1825, 1870, 1871, 1520, 1180, 1183, 607,
	1299, 1644, 1616, 1077, 1078, 1560, 1147, 1262, 765, 477,
	1196, 1187, 1177, 1178, 1173, 1172, 53, 1181, 479, 54,
	1171, 1170, 1202, 1169, 1168, 1167, 1080, 1184, 1166, 146,
	1165, 1872, 1873, 1874, 1875, 1877, 1878, 139, 1164, 1163,
	1102, 1103, 1104, 1105, 140, 1162, 57, 1161, 1160, 1085,
	1079, 110, 56, 1968, 1159, 1158, 1881, 1879, 1880, 1872,
	1873, 1874, 1875, 1877, 1878, 1157, 1156, 117, 1218, 1155,
	1148, 1136, 118, 59, 1135, 60, 794, 984, 1083, 1084,
	1086, 1087, 1214, 1192, 976, 1000, 949, 2483, 1567, 145,
	792, 185, 2384, 1786, 2272, 2248, 478, 804, 2166, 93,
	1190, 2162, 1836, 185, 1222, 1874, 1875, 1877, 1878, 1645,
	1194, 1876, 1144, 1870, 1871, 1100, 185, 2043, 147, 1133,
	620, 1941, 185, 1770, 185, 2016, 185, 2388, 1269, 2387,
	185, 2381, 1565, 2169, 1563, 1561, 2032, 902, 57, 1699,
	1220, 1185, 1993, 1055, 1261, 1987, 1186, 1981, 1050, 1921,
	1920, 1809, 1426, 1552, 997, 146, 2405, 1153, 2048, 1267,
	1986, 1252, 1241, 139, 118, 59, 1769, 60, 1305, 1727,
	140, 185, 185, 1375, 2103, 1106, 1540, 1886, 792, 1237,
	185, 145, 1275, 185, 1176, 793, 2631, 2630, 478, 1044,
	1101, 93, 805, 117, 1841, 2026, 2178, 2536, 2596, 445,
	1754, 1230, 420, 1231, 804, 1553, 172, 2513, 2597, 185,
	147, 429, 1255, 1361, 185, 1870, 1871, 1433, 2346, 185,
	185, 169, 185, 746, 185, 2446, 185, 652, 185, 1045,
	1772, 929, 1764, 1289, 2445, 2443, 1291, 2442, 2359, 185,
	1294, 765, 1150, 2054, 1036, 185, 185, 146, 744, 1253,
	2211, 2207, 1887, 742, 792, 139, 2175, 2174, 1854, 1554,
	1551, 1853, 140, 1852, 740, 1230, 1851, 1231, 737, 998,
	605, 1812, 430, 793, 1753, 1694, 185, 1690, 1280, 1277,
	804, 1685, 1232, 2044, 1502, 117, 1191, 889, 1090, 1088,
	1089, 1081, 1082, 1083, 1084, 1086, 1087, 2643, 1620, 805,
	1379, 1378, 1619, 1388, 1385, 173, 173, 1376, 440, 1463,
	717, 1724, 999, 444, 1396, 1419, 110, 1420, 1053, 1395,
	2059, 1302, 2215, 1303, 2216, 1423, 985, 1532, 604, 1362,
	2512, 1663, 1876, 1663, 1366, 1997, 1556, 1257, 1238, 1363,
	2202, 418, 1662, 1517, 1392, 1380, 1232, 1410, 588, 793,
	1421, 1879, 1880, 1872, 1873, 1874, 1875, 1877, 1878, 1235,
	581, 607, 2549, 1281, 1589, 1435, 607, 1087, 1403, 1399,
	1400, 174, 174, 493, 1517, 805, 1404, 1236, 1405, 443,
	1406, 1556, 1407, 606, 1408, 1524, 2568, 587, 1261, 1382,
	1522, 2096, 185, 444, 185, 1462, 2588, 185, 1886, 2023,
	588, 1414, 1416, 1076, 1992, 2193, 595, 1434, 185, 595,
	595, 1427, 1428, 897, 899, 1550, 794, 804, 1444, 1984,
	185, 1445, 1446, 806, 185, 1239, 423, 185, 1870, 1871,
	1537, 185, 1452, 2426, 1979, 185, 1540, 1535, 1230, 1218,
	1231, 185, 2596, 792, 983, 432, 431, 423, 2327, 607,
	185, 804, 1801, 1802, 1822, 185, 2494, 2615, 1599, 443,
	175, 175, 1355, 185, 1671, 1418, 1646, 1528, 1556, 1525,
	1820, 185, 1030, 1887, 1054, 2058, 1664, 1878, 1636, 2055,
	438, 2569, 185, 1625, 185, 1383, 185, 2328, 1174, 185,
	603, 185, 1043, 185, 185, 974, 185, 792, 792, 1049,
	433, 978, 792, 2208, 794, 1582, 185, 2053, 1718, 1286,
	1650, 1031, 805, 1682, 1688, 622, 1675, 1677, 1233, 1232,
	1009, 170, 170, 1692, 2608, 1687, 1622, 1623, 620, 442,
	806, 1367, 1647, 1748, 1631, 1637, 2060, 748, 793, 2570,
	747, 1674, 1454, 1461, 1680, 1876, 805, 1641, 1642, 2587,
	1686, 172, 172, 1817, 1222, 1729, 1667, 1729, 2625, 445,
	1035, 171, 171, 1818, 1695, 738, 1696, 1823, 1747, 441,
	738, 1881, 1879, 1880, 1872, 1873, 1874, 1875, 1877, 1878,
	794, 739, 1233, 110, 2194, 738, 2623, 1130, 2200, 110,
	1660, 1741, 793, 793, 933, 804, 933, 793, 2396, 716,
	2323, 2362, 2324, 185, 1756, 2449, 806, 1744, 1733, 442,
	1205, 1886, 1814, 1742, 1751, 1743, 1745, 485, 503, 185,
	185, 185, 2520, 185, 1125, 1126, 1127, 1128, 1129, 1755,
	953, 1752, 2326, 1656, 1138, 1767, 1765, 1243, 482, 445,
	490, 2329, 419, 1516, 1146, 2093, 486, 2521, 1673, 441,
	1398, 1499, 185, 1523, 1248, 2024, 2586, 1077, 1078, 1040,
	2427, 582, 1181, 419, 1184, 1389, 1386, 424, 2616, 1209,
	1247, 1228, 420, 2502, 492, 1178, 1177, 1819, 487, 2606,
	1080, 1857, 421, 1075, 1821, 1773, 1887, 572, 424, 485,
	805, 1245, 1212, 420, 110, 1640, 2259, 606, 994, 2094,
	2023, 489, 1775, 421, 1079, 615, 1065, 2567, 1207, 1246,
	1783, 434, 490, 411, 1777, 1870, 1871, 2595, 486, 1210,
	1287, 2593, 2325, 2370, 982, 1787, 1721, 2503, 1017, 1041,
	989, 979, 1791, 971, 1789, 2607, 1778, 1208, 1672, 1794,
	664, 1795, 994, 806, 1996, 2437, 607, 1797, 1776, 2436,
	487, 1513, 1937, 435, 2419, 1233, 2288, 2609, 1010, 1200,
	1200, 2486, 2177, 1964, 1497, 1500, 620, 1511, 995, 794,
	573, 2342, 996, 489, 1085, 1064, 1556, 806, 2621, 1949,
	1244, 1960, 1374, 436, 1042, 437, 1880, 1872, 1873, 1874,
	1875, 1877, 1878, 1722, 2132, 2327, 1276, 1011, 2320, 1211,
	1008, 1496, 1209, 1268, 2345, 1064, 1264, 1815, 1813, 2318,
	2092, 2344, 995, 1440, 2322, 2529, 996, 1060, 488, 719,
	607, 1843, 1413, 794, 794, 1212, 1829, 1370, 794, 185,
	804, 2229, 1876, 1372, 2328, 185, 185, 2634, 1925, 185,
	1100, 1638, 1840, 1931, 185, 1063, 1373, 185, 906, 905,
	1507, 2372, 1210, 1950, 178, 185, 1932, 2321, 1508, 2420,
	1509, 185, 185, 185, 1514, 1938, 1970, 185, 1064, 2289,
	185, 1936, 1065, 1969, 491, 1063, 185, 185, 185, 185,
	185, 412, 1807, 574, 2341, 1635, 185, 1634, 792, 1945,
	488, 185, 1441, 2620, 994, 185, 1944, 994, 1886, 1929,
	1498, 2133, 1065, 501, 185, 1933, 1934, 2134, 1954, 1939,
	604, 915, 1961, 495, 185, 1101, 185, 718, 185, 792,
	792, 806, 185, 1940, 2343, 805, 185, 2218, 2363, 1926,
	1995, 185, 1211, 185, 1904, 1905, 1906, 1005, 1063, 572,
	185, 2300, 1018, 2154, 2417, 1930, 491, 2323, 2003, 2324,
	2005, 661, 413, 1559, 185, 792, 607, 615, 1980, 1985,
	1956, 1139, 2399, 575, 926, 924, 2287, 995, 1989, 185,
	2214, 996, 3, 1887, 1510, 2418, 1901, 2070, 1998, 2326,
	1978, 1512, 1864, 793, 1824, 1768, 1701, 2028, 2329, 1693,
	2008, 2009, 1684, 2006, 1048, 1047, 576, 2010, 1039, 620,
	620, 474, 34, 977, 473, 33, 1902, 1060, 185, 472,
	30, 1034, 1028, 1792, 793, 793, 1081, 1082, 1083, 1084,
	1086, 1087, 573, 2007, 1411, 1402, 2040, 2025, 1154, 2019,
	1558, 894, 895, 1026, 891, 1024, 2033, 471, 69, 470,
	68, 2034, 2035, 2563, 2036, 2037, 2526, 2039, 467, 22,
	793, 468, 23, 1251, 1022, 2073, 736, 2316, 185, 1020,
	2050, 2051, 2049, 2198, 1437, 1014, 1442, 2052, 922, 2325,
	2083, 500, 1449, 2056, 1872, 1873, 1874, 1875, 1877, 1878,
	2196, 494, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
	1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491,
	1492, 1493, 1494, 1495, 2063, 1501, 2061, 1503, 1504, 1505,
	1506, 775, 2079, 2077, 2082, 2088, 2089, 2090, 1038, 925,
	923, 466, 28, 1965, 1529, 574, 465, 20, 1033, 185,
	2176, 1138, 1027, 2106, 2012, 185, 1725, 1719, 2109, 2104,
	34, 1717, 2111, 33, 185, 185, 806, 2138, 30, 1297,
	1569, 1570, 1295, 1025, 1586, 1023, 1598, 1600, 1605, 1608,
	1609, 1610, 1965, 2095, 2097, 2098, 463, 19, 1293, 741,
	743, 2139, 464, 18, 1021, 1290, 69, 2165, 68, 1019,
	2137, 455, 15, 456, 16, 1013, 2188, 22, 921, 2189,
	23, 2155, 2170, 185, 1314, 185, 110, 2158, 1288, 2161,
	462, 51, 2204, 185, 794, 575, 792, 2213, 2204, 2157,
	1249, 2152, 2224, 2203, 2204, 1384, 2042, 1242, 1240, 2209,
	1234, 185, 185, 2014, 2173, 2212, 2180, 454, 50, 2221,
	2172, 2239, 461, 12, 2187, 794, 794, 760, 576, 185,
	2460, 1805, 2231, 1067, 2597, 2383, 2242, 2382, 185, 804,
	185, 185, 2230, 1393, 2201, 2245, 804, 761, 460, 44,
	2219, 2462, 2233, 2197, 1679, 2199, 2234, 1298, 2225, 481,
	28, 794, 2237, 2232, 1697, 20, 2235, 1349, 1689, 644,
	453, 45, 1683, 2241, 1793, 2240, 2261, 2246, 1012, 482,
	1663, 2266, 1929, 185, 480, 1314, 1314, 459, 7, 1678,
	1663, 793, 1364, 458, 6, 1077, 1078, 1806, 2496, 1676,
	1424, 1425, 457, 36, 2335, 19, 1454, 2107, 182, 2474,
	1068, 18, 2448, 415, 2301, 1454, 2112, 425, 452, 35,
	15, 1071, 16, 446, 762, 1691, 1077, 1078, 496, 182,
	485, 1681, 504, 2525, 805, 509, 2368, 185, 1732, 51,
	185, 805, 1079, 528, 1720, 1716, 502, 2286, 2142, 1080,
	804, 185, 185, 490, 2256, 185, 185, 185, 1624, 486,
	1365, 2262, 1306, 2604, 2619, 2411, 50, 2306, 1349, 1349,
	2247, 12, 185, 1079, 1870, 1871, 2151, 185, 2099, 185,
	1780, 185, 185, 185, 1077, 1078, 1780, 1779, 185, 792,
	2046, 487, 185, 2310, 2336, 792, 2303, 44, 2188, 2305,
	2307, 2189, 2315, 185, 185, 1946, 1916, 2302, 1781, 752,
	752, 792, 1621, 1618, 489, 1617, 1548, 415, 1141, 45,
	2274, 2091, 1151, 1149, 1046, 1037, 2304, 1032, 2188, 1029,
	2358, 2189, 1015, 981, 2188, 1368, 7, 2189, 2311, 580,
	415, 415, 6, 797, 415, 805, 2187, 2374, 1139, 182,
	893, 36, 2425, 2367, 483, 1401, 1542, 2373, 2340, 1016,
	2355, 1942, 2339, 1643, 2375, 2308, 2519, 35, 2280, 1574,
	1574, 1587, 1856, 2380, 2389, 1607, 2187, 1810, 1811, 1611,
	1612, 1614, 2187, 1816, 793, 2479, 2395, 1557, 1152, 2366,
	793, 48, 2364, 2185, 638, 2379, 2317, 185, 2369, 185,
	2401, 804, 185, 2179, 1711, 1710, 793, 807, 1377, 660,
	185, 1573, 1455, 735, 662, 1835, 804, 1311, 663, 1312,
	1182, 1842, 794, 650, 1846, 1309, 950, 2408, 1736, 1381,
	1521, 488, 1538, 1839, 2394, 1145, 2410, 630, 642, 641,
	2188, 1860, 2413, 2189, 1536, 2429, 975, 1947, 2431, 2022,
	2376, 185, 1439, 1796, 792, 1261, 1348, 1436, 185, 2428,
	2018, 1443, 2195, 422, 1867, 806, 185, 185, 792, 792,
	2204, 948, 806, 2188, 1596, 1138, 2189, 1588, 1584, 1051,
	1203, 2447, 1605, 1605, 1605, 1131, 185, 491, 2187, 1737,
	2458, 185, 1002, 2029, 2459, 2463, 805, 1762, 185, 2469,
	2457, 1195, 1447, 2468, 759, 758, 2632, 1371, 1200, 1774,
	2476, 805, 1124, 620, 1123, 745, 2415, 2490, 2488, 2484,
	993, 2187, 992, 185, 185, 2454, 2440, 2441, 1963, 2614,
	185, 2430, 2485, 2482, 2495, 2192, 2535, 2451, 792, 2470,
	2471, 2492, 144, 185, 2461, 141, 2507, 792, 792, 793,
	143, 2505, 142, 1994, 2473, 72, 2508, 1348, 1348, 32,
	1590, 31, 92, 793, 793, 91, 2511, 90, 89, 1204,
	185, 607, 185, 88, 2510, 185, 806, 804, 87, 86,
	85, 84, 2516, 2517, 83, 82, 81, 80, 79, 528,
	78, 528, 2493, 916, 77, 76, 919, 1313, 2544, 75,
	74, 2546, 415, 2499, 2532, 185, 2550, 2545, 2020, 524,
	2548, 528, 528, 415, 941, 794, 521, 2188, 2560, 71,
	2189, 794, 185, 185, 185, 2562, 2561, 70, 29, 2573,
	185, 2038, 25, 793, 96, 24, 67, 794, 2580, 66,
	27, 17, 793, 793, 185, 11, 2585, 2582, 528, 21,
	620, 620, 114, 113, 2583, 2584, 112, 111, 2531, 14,
	2594, 2592, 528, 620, 2598, 2187, 13, 109, 108, 107,
	106, 105, 805, 10, 2603, 9, 1351, 1205, 980, 2062,
	95, 2547, 2602, 42, 1449, 2611, 2610, 8, 528, 40,
	2066, 2439, 2537, 2067, 2618, 2617, 39, 94, 1313, 1313,
	135, 132, 134, 131, 804, 2072, 804, 133, 2577, 2578,
	2579, 103, 137, 634, 2080, 136, 129, 2636, 2637, 127,
	128, 130, 2084, 2644, 126, 2038, 125, 806, 1828, 2650,
	2652, 138, 102, 2653, 2651, 1831, 1209, 101, 100, 2659,
	2657, 2658, 806, 2661, 99, 2108, 98, 5, 2, 2110,
	415, 1, 1847, 1848, 0, 0, 0, 414, 0, 1212,
	1826, 1827, 0, 0, 613, 0, 572, 0, 0, 0,
	0, 0, 0, 0, 1350, 1207, 1314, 1351, 1351, 0,
	794, 0, 2140, 2141, 615, 0, 1210, 0, 0, 0,
	0, 2147, 2148, 2149, 794, 794, 0, 0, 0, 805,
	0, 805, 1896, 0, 1208, 0, 0, 0, 1310, 1607,
	1607, 1607, 0, 0, 1909, 1314, 0, 614, 2160, 2627,
	0, 2629, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1893, 1894, 1895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2181, 573,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1349,
	0, 770, 0, 0, 794, 0, 1211, 0, 0, 1314,
	0, 0, 0, 794, 794, 1350, 1350, 0, 0, 639,
	64, 0, 0, 0, 779, 783, 0, 0, 801, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1349, 0,
	0, 0, 0, 806, 1200, 0, 0, 0, 0, 1310,
	1310, 1590, 1590, 620, 0, 0, 0, 0, 509, 0,
	752, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1314, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 415, 415, 0, 0, 0, 0, 0,
	0, 2265, 1349, 0, 0, 2268, 2269, 0, 0, 2271,
	1870, 1871, 574, 1888, 1889, 1890, 2273, 0, 2275, 1314,
	1314, 0, 0, 0, 0, 1077, 1078, 0, 1314, 1314,
	0, 0, 0, 0, 2282, 0, 0, 1590, 1590, 1590,
	596, 0, 0, 0, 0, 0, 0, 608, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1314, 0, 1885, 0, 0, 1349, 2291, 0, 0,
	0, 0, 1079, 0, 0, 0, 0, 771, 64, 0,
	806, 0, 806, 0, 0, 0, 0, 0, 0, 0,
	612, 0, 575, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 1349, 0, 0, 0, 0, 2068, 2069,
	182, 1349, 1349, 0, 0, 0, 0, 2337, 0, 0,
	0, 0, 415, 0, 0, 576, 0, 1876, 0, 0,
	0, 0, 0, 0, 0, 1274, 0, 0, 0, 0,
	0, 415, 1085, 415, 1349, 415, 0, 0, 0, 1282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2146, 2113, 2114, 2115,
	2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125,
	2126, 2127, 2128, 2129, 2130, 2131, 0, 2135, 0, 0,
	528, 182, 0, 1886, 2390, 2391, 783, 0, 1348, 182,
	0, 0, 528, 0, 0, 0, 0, 801, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2403, 0, 0, 528, 1314,
	0, 2406, 0, 528, 0, 0, 0, 1348, 182, 528,
	2206, 528, 0, 528, 0, 528, 0, 528, 2210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1412, 1590,
	1590, 0, 0, 0, 528, 528, 0, 0, 1887, 0,
	0, 0, 0, 0, 0, 2438, 0, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	0, 1348, 0, 0, 0, 528, 0, 0, 1870, 1871,
	0, 1888, 1889, 1890, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 0, 2075, 0, 0, 0, 1590, 1590,
	1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
	1590, 1590, 1590, 1590, 1590, 1590, 1590, 0, 1590, 1313,
	0, 0, 0, 0, 783, 0, 0, 0, 0, 0,
	0, 1885, 2487, 0, 0, 1348, 0, 1882, 1883, 1884,
	0, 0, 0, 0, 0, 0, 1881, 1879, 1880, 1872,
	1873, 1874, 1875, 1877, 1878, 0, 0, 0, 1313, 0,
	608, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087,
	0, 1348, 1348, 0, 0, 0, 620, 0, 0, 0,
	1348, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 509, 0, 752, 0, 1876, 893, 0, 1351, 0,
	0, 0, 0, 0, 0, 0, 0, 415, 0, 0,
	0, 0, 1313, 1348, 0, 0, 0, 0, 0, 1655,
	0, 0, 0, 415, 0, 0, 415, 0, 1314, 0,
	1668, 2559, 2559, 0, 415, 0, 1891, 1351, 0, 0,
	415, 0, 0, 0, 0, 0, 0, 2574, 0, 415,
	0, 0, 0, 0, 1700, 0, 0, 0, 0, 0,
	0, 1886, 1707, 0, 0, 0, 0, 2559, 0, 0,
	893, 0, 0, 0, 0, 0, 1313, 0, 0, 0,
	0, 415, 0, 1740, 1314, 528, 0, 0, 528, 0,
	528, 1351, 415, 415, 0, 1746, 1350, 0, 0, 0,
	0, 0, 0, 0, 0, 1668, 0, 0, 0, 0,
	0, 1349, 1313, 1313, 0, 2559, 0, 770, 1225, 0,
	596, 1313, 1313, 0, 0, 0, 0, 0, 0, 0,
	1310, 0, 0, 0, 0, 1350, 1887, 0, 1314, 2407,
	0, 1134, 0, 1137, 2640, 0, 0, 0, 0, 0,
	1142, 0, 0, 0, 1313, 1351, 2640, 0, 0, 2640,
	2640, 0, 2398, 0, 0, 0, 0, 1349, 0, 1310,
	0, 0, 0, 0, 0, 0, 2433, 0, 0, 0,
	0, 1348, 0, 0, 0, 0, 0, 0, 0, 1350,
	2444, 1351, 1351, 0, 0, 0, 0, 0, 0, 0,
	1351, 1351, 1785, 2422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 415, 415,
	415, 1349, 415, 1310, 0, 1882, 1883, 1884, 0, 0,
	0, 0, 0, 1351, 1881, 1879, 1880, 1872, 1873, 1874,
	1875, 1877, 1878, 0, 0, 0, 1260, 0, 0, 0,
	0, 415, 0, 1350, 1077, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 783, 0, 1279, 0, 1279,
	0, 0, 0, 0, 2475, 0, 0, 1080, 64, 0,
	0, 0, 0, 1221, 0, 0, 0, 1310, 0, 1350,
	1350, 0, 0, 0, 476, 0, 0, 0, 1350, 1350,
	0, 1079, 0, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 2522, 1590, 0, 0, 0, 0, 41, 0,
	0, 0, 1313, 1310, 1310, 0, 0, 0, 0, 0,
	0, 1350, 1310, 1310, 0, 0, 0, 0, 2539, 2540,
	0, 0, 0, 0, 475, 0, 0, 0, 1757, 0,
	0, 0, 0, 0, 1590, 0, 0, 0, 0, 38,
	0, 0, 0, 0, 0, 1310, 0, 0, 0, 0,
	0, 1085, 41, 477, 0, 0, 0, 0, 0, 0,
	53, 0, 479, 54, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1758, 0,
	1348, 1351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 1590, 0, 1759, 415, 0,
	0, 0, 0, 0, 415, 415, 479, 1100, 415, 0,
	0, 0, 0, 1655, 0, 0, 1655, 0, 0, 0,
	0, 0, 0, 0, 1952, 0, 1348, 0, 0, 0,
	415, 1958, 1959, 0, 0, 0, 1668, 0, 0, 1966,
	56, 0, 0, 0, 0, 1971, 1972, 1974, 1976, 1977,
	0, 0, 0, 0, 0, 415, 0, 0, 0, 0,
	1988, 0, 0, 0, 1991, 0, 0, 0, 0, 1350,
	0, 0, 57, 415, 0, 0, 0, 0, 0, 0,
	1348, 0, 1101, 1274, 0, 1274, 0, 528, 0, 0,
	0, 415, 0, 0, 0, 2017, 0, 0, 118, 59,
	415, 60, 2027, 1310, 0, 0, 0, 0, 0, 415,
	0, 1313, 0, 64, 0, 145, 0, 0, 0, 1409,
	0, 770, 478, 1785, 0, 93, 57, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 770, 1785, 0,
	1658, 0, 0, 0, 147, 0, 596, 0, 783, 596,
	596, 0, 118, 59, 783, 60, 0, 0, 0, 0,
	0, 0, 0, 801, 0, 0, 0, 1313, 0, 145,
	0, 0, 0, 0, 0, 0, 478, 415, 0, 93,
	37, 146, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 139,
	1351, 38, 120, 0, 0, 1738, 140, 0, 147, 0,
	0, 0, 1519, 0, 41, 0, 801, 801, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 0, 122, 117,
	1137, 1313, 0, 0, 0, 1077, 1078, 2101, 43, 0,
	46, 0, 0, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 1351, 0, 1080, 0,
	140, 47, 0, 0, 0, 49, 0, 0, 0, 52,
	0, 0, 123, 0, 0, 0, 53, 0, 104, 54,
	0, 0, 1079, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 771, 1350, 0,
	0, 55, 0, 0, 0, 0, 0, 0, 0, 0,
	1351, 0, 56, 1221, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 1655, 0, 64, 0, 0, 0,
	0, 0, 1310, 893, 1655, 0, 64, 0, 0, 0,
	0, 0, 1788, 801, 1790, 0, 783, 0, 2184, 0,
	0, 0, 1085, 0, 1350, 0, 0, 0, 0, 0,
	0, 2205, 0, 0, 0, 0, 0, 2205, 64, 0,
	64, 0, 0, 2205, 0, 1808, 0, 0, 0, 0,
	0, 0, 1668, 0, 1274, 0, 0, 0, 1310, 0,
	64, 0, 2227, 0, 0, 0, 64, 0, 57, 0,
	0, 0, 0, 0, 58, 0, 0, 0, 1350, 0,
	415, 415, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 65, 118, 59, 0, 60, 2253, 61,
	0, 124, 0, 0, 0, 0, 62, 2255, 0, 2257,
	415, 145, 1310, 0, 0, 0, 0, 0, 73, 0,
	0, 93, 476, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 38, 0, 0, 0, 0, 0, 0,
	147, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 0, 2281, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 1101, 0, 0, 0, 0, 0, 119,
	0, 64, 475, 0, 0, 0, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 477, 0, 0, 0, 0, 415, 0, 53, 893,
	479, 54, 0, 0, 0, 117, 0, 0, 4, 0,
	1655, 893, 770, 0, 2313, 2314, 1668, 0, 770, 770,
	0, 0, 770, 0, 0, 0, 0, 0, 0, 0,
	2184, 893, 0, 0, 56, 0, 2347, 0, 2348, 0,
	415, 2350, 2351, 0, 1957, 0, 0, 415, 0, 0,
	1519, 2357, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087,
	2184, 0, 893, 1707, 0, 0, 2184, 0, 0, 1983,
	1137, 0, 1077, 1078, 0, 1107, 1108, 1109, 1117, 1118,
	1119, 0, 0, 0, 0, 0, 0, 1999, 1110, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 1121, 0,
	0, 0, 0, 0, 0, 2011, 0, 0, 0, 0,
	0, 0, 0, 0, 1260, 0, 0, 0, 0, 1079,
	57, 0, 0, 1260, 0, 1099, 0, 0, 0, 0,
	0, 0, 1096, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1137, 0, 118, 59, 0, 60,
	0, 0, 0, 0, 0, 0, 1668, 0, 2414, 0,
	0, 2416, 0, 145, 0, 0, 0, 0, 0, 415,
	478, 0, 2184, 93, 0, 0, 0, 0, 771, 0,
	1102, 1103, 1104, 1105, 771, 771, 0, 0, 771, 1085,
	0, 2064, 147, 0, 0, 0, 0, 0, 0, 2205,
	0, 0, 0, 0, 0, 2184, 0, 0, 0, 0,
	415, 1114, 1122, 0, 0, 0, 0, 893, 0, 0,
	0, 0, 0, 0, 0, 2253, 2253, 0, 0, 146,
	1120, 64, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 64, 0, 0, 140, 2481, 0, 0, 1112, 0,
	1655, 0, 0, 0, 0, 1100, 0, 1274, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 117, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	608, 1111, 2497, 2498, 0, 0, 0, 0, 0, 415,
	0, 0, 1870, 1871, 0, 1888, 1889, 1890, 0, 0,
	0, 0, 2515, 0, 0, 0, 0, 0, 2074, 0,
	0, 0, 0, 0, 0, 1106, 0, 0, 0, 0,
	0, 0, 770, 0, 0, 0, 0, 0, 0, 2530,
	1101, 893, 1077, 1078, 415, 1107, 1108, 1109, 1117, 1118,
	1119, 0, 0, 0, 0, 1885, 0, 1115, 1110, 2184,
	0, 0, 0, 0, 0, 1080, 0, 0, 1121, 0,
	0, 0, 0, 0, 2481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	0, 893, 893, 893, 0, 1099, 0, 0, 0, 415,
	0, 0, 1096, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2591, 0, 0, 0, 0, 0, 1876,
	0, 0, 0, 0, 1738, 770, 1113, 0, 0, 1091,
	1092, 1098, 1097, 1093, 1094, 1095, 1116, 0, 1090, 1088,
	1089, 1081, 1082, 1083, 1084, 1086, 1087, 0, 0, 0,
	1102, 1103, 1104, 1105, 2258, 1912, 0, 0, 0, 1085,
	1891, 0, 0, 0, 1077, 1078, 0, 1107, 1108, 1109,
	1117, 1118, 1119, 0, 0, 0, 0, 0, 0, 0,
	1110, 1114, 1122, 64, 0, 1886, 0, 1080, 0, 0,
	1121, 0, 0, 0, 0, 0, 0, 0, 771, 0,
	1120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 1099, 1112, 0,
	0, 0, 0, 0, 1096, 1100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1077, 1078, 0, 0, 0,
	0, 1117, 1118, 1119, 0, 0, 0, 0, 0, 0,
	770, 1111, 0, 0, 0, 0, 0, 0, 1080, 0,
	1887, 1121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 1103, 1104, 1105, 0, 0, 0, 0,
	0, 1085, 1079, 0, 0, 1106, 0, 0, 1099, 0,
	0, 771, 0, 0, 2349, 0, 0, 0, 0, 0,
	1101, 2354, 0, 1114, 1122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1115, 0, 0,
	0, 0, 1120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1112, 0, 0, 1102, 1103, 1104, 1105, 1100, 0, 1882,
	1883, 1884, 1085, 0, 0, 0, 0, 0, 1881, 1879,
	1880, 1872, 1873, 1874, 1875, 1877, 1878, 0, 0, 0,
	0, 0, 0, 1111, 1114, 1122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 0, 0, 1091,
	1092, 1098, 1097, 1093, 1094, 1095, 1116, 0, 1090, 1088,
	1089, 1081, 1082, 1083, 1084, 1086, 1087, 1106, 0, 0,
	0, 1112, 0, 0, 0, 1911, 771, 0, 1100, 0,
	0, 0, 1101, 2423, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1113, 0,
	1115, 1091, 1092, 1098, 1097, 1093, 1094, 1095, 1116, 0,
	1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 1910, 0, 0,
	0, 0, 0, 2504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1113,
	0, 0, 0, 0, 0, 0, 0, 0, 2534, 1116,
	0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2464, 0, 1738, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 803,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 808, 189, 809,
	810, 811, 812, 350, 813, 814, 815, 816, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 817, 194,
	357, 358, 195, 196, 818, 819, 359, 360, 361, 820,
	197, 362, 821, 795, 822, 198, 199, 200, 0, 202,
	203, 204, 201, 823, 205, 1137, 206, 207, 824, 720,
	208, 209, 210, 825, 826, 828, 827, 829, 830, 831,
	211, 212, 416, 213, 363, 214, 364, 365, 832, 215,
	833, 216, 834, 217, 835, 836, 218, 219, 837, 220,
	838, 0, 839, 366, 221, 223, 222, 224, 367, 368,
	840, 721, 841, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 842, 228, 843, 844, 722, 845,
	229, 372, 846, 373, 847, 0, 230, 231, 0, 0,
	232, 233, 374, 375, 724, 848, 376, 237, 849, 234,
	850, 723, 235, 377, 236, 378, 379, 380, 381, 382,
	851, 383, 852, 725, 238, 239, 240, 726, 384, 385,
	241, 242, 243, 853, 245, 244, 854, 386, 727, 246,
	247, 728, 855, 248, 249, 856, 857, 250, 0, 251,
	729, 252, 253, 255, 387, 254, 730, 256, 257, 259,
	258, 858, 859, 860, 388, 260, 389, 261, 262, 861,
	263, 862, 863, 264, 864, 865, 265, 390, 731, 266,
	732, 391, 267, 268, 269, 270, 271, 866, 272, 392,
	273, 393, 274, 867, 275, 276, 277, 278, 279, 394,
	280, 281, 868, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 869, 294, 733, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 870,
	307, 396, 306, 308, 309, 871, 310, 298, 299, 311,
	734, 312, 397, 398, 313, 872, 320, 314, 315, 300,
	316, 319, 399, 317, 318, 400, 873, 321, 874, 322,
	323, 324, 325, 326, 327, 328, 329, 875, 401, 402,
	403, 876, 877, 330, 331, 404, 405, 878, 332, 333,
	334, 335, 879, 880, 336, 337, 338, 339, 881, 340,
	882, 406, 341, 342, 343, 407, 408, 883, 884, 344,
	885, 886, 887, 888, 345, 346, 347, 348, 349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 803, 0, 0, 0, 0,
	0, 1648, 0, 0, 0, 0, 0, 0, 0, 0,
	1649, 187, 188, 808, 189, 809, 810, 811, 812, 350,
	813, 814, 815, 816, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 817, 194, 357, 358, 195, 196,
	818, 819, 359, 360, 361, 820, 197, 362, 821, 795,
	822, 198, 199, 200, 0, 202, 203, 204, 201, 823,
	205, 0, 206, 207, 824, 720, 208, 209, 210, 825,
	826, 828, 827, 829, 830, 831, 211, 212, 416, 213,
	363, 214, 364, 365, 832, 215, 833, 216, 834, 217,
	835, 836, 218, 219, 837, 220, 838, 0, 839, 366,
	221, 223, 222, 224, 367, 368, 840, 721, 841, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	842, 228, 843, 844, 722, 845, 229, 372, 846, 373,
	847, 0, 230, 231, 0, 0, 232, 233, 374, 375,
	724, 848, 376, 237, 849, 234, 850, 723, 235, 377,
	236, 378, 379, 380, 381, 382, 851, 383, 852, 725,
	238, 239, 240, 726, 384, 385, 241, 242, 243, 853,
	245, 244, 854, 386, 727, 246, 247, 728, 855, 248,
	249, 856, 857, 250, 0, 251, 729, 252, 253, 255,
	387, 254, 730, 256, 257, 259, 258, 858, 859, 860,
	388, 260, 389, 261, 262, 861, 263, 862, 863, 264,
	864, 865, 265, 390, 731, 266, 732, 391, 267, 268,
	269, 270, 271, 866, 272, 392, 273, 393, 274, 867,
	275, 276, 277, 278, 279, 394, 280, 281, 868, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 869, 294, 733, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 870, 307, 396, 306, 308,
	309, 871, 310, 298, 299, 311, 734, 312, 397, 398,
	313, 872, 320, 314, 315, 300, 316, 319, 399, 317,
	318, 400, 873, 321, 874, 322, 323, 324, 325, 326,
	327, 328, 329, 875, 401, 402, 403, 876, 877, 330,
	331, 404, 405, 878, 332, 333, 334, 335, 879, 880,
	336, 337, 338, 339, 881, 340, 882, 406, 341, 342,
	343, 407, 408, 883, 884, 344, 885, 886, 887, 888,
	345, 346, 347, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 803, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2309, 187, 188,
	808, 189, 809, 810, 811, 812, 350, 813, 814, 815,
	816, 190, 191, 192, 351, 352, 353, 354, 193, 355,
	356, 817, 194, 357, 358, 195, 196, 818, 819, 359,
	360, 361, 820, 197, 362, 821, 795, 822, 198, 199,
	200, 0, 202, 203, 204, 201, 823, 205, 0, 206,
	207, 824, 720, 208, 209, 210, 825, 826, 828, 827,
	829, 830, 831, 211, 212, 416, 213, 363, 214, 364,
	365, 832, 215, 833, 216, 834, 217, 835, 836, 218,
	219, 837, 220, 838, 0, 839, 366, 221, 223, 222,
	224, 367, 368, 840, 721, 841, 0, 0, 0, 0,
	225, 226, 369, 370, 371, 0, 227, 842, 228, 843,
	844, 722, 845, 229, 372, 846, 373, 847, 0, 230,
	231, 0, 0, 232, 233, 374, 375, 724, 848, 376,
	237, 849, 234, 850, 723, 235, 377, 236, 378, 379,
	380, 381, 382, 851, 383, 852, 725, 238, 239, 240,
	726, 384, 385, 241, 242, 243, 853, 245, 244, 854,
	386, 727, 246, 247, 728, 855, 248, 249, 856, 857,
	250, 0, 251, 729, 252, 253, 255, 387, 254, 730,
	256, 257, 259, 258, 858, 859, 860, 388, 260, 389,
	261, 262, 861, 263, 862, 863, 264, 864, 865, 265,
	390, 731, 266, 732, 391, 267, 268, 269, 270, 271,
	866, 272, 392, 273, 393, 274, 867, 275, 276, 277,
	278, 279, 394, 280, 281, 868, 282, 283, 284, 285,
	286, 0, 288, 289, 287, 290, 291, 292, 293, 869,
	294, 733, 295, 296, 395, 297, 0, 301, 302, 303,
	304, 305, 870, 307, 396, 306, 308, 309, 871, 310,
	298, 299, 311, 734, 312, 397, 398, 313, 872, 320,
	314, 315, 300, 316, 319, 399, 317, 318, 400, 873,
	321, 874, 322, 323, 324, 325, 326, 327, 328, 329,
	875, 401, 402, 403, 876, 877, 330, 331, 404, 405,
	878, 332, 333, 334, 335, 879, 880, 336, 337, 338,
	339, 881, 340, 882, 406, 341, 342, 343, 407, 408,
	883, 884, 344, 885, 886, 887, 888, 345, 346, 347,
	348, 349, 0, 0, 803, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1256,
	187, 188, 808, 189, 809, 810, 811, 812, 350, 813,
	814, 815, 816, 190, 191, 192, 351, 352, 353, 354,
	193, 355, 356, 817, 194, 357, 358, 195, 196, 818,
	819, 359, 360, 361, 820, 197, 362, 821, 795, 822,
	198, 199, 200, 0, 202, 203, 204, 201, 823, 205,
	0, 206, 207, 824, 720, 208, 209, 210, 825, 826,
	828, 827, 829, 830, 831, 211, 212, 416, 213, 363,
	214, 364, 365, 832, 215, 833, 216, 834, 217, 835,
	836, 218, 219, 837, 220, 838, 0, 839, 366, 221,
	223, 222, 224, 367, 368, 840, 721, 841, 0, 0,
	0, 0, 225, 226, 369, 370, 371, 0, 227, 842,
	228, 843, 844, 722, 845, 229, 372, 846, 373, 847,
	0, 230, 231, 0, 0, 232, 233, 374, 375, 724,
	848, 376, 237, 849, 234, 850, 723, 235, 377, 236,
	378, 379, 380, 381, 382, 851, 383, 852, 725, 238,
	239, 240, 726, 384, 385, 241, 242, 243, 853, 245,
	244, 854, 386, 727, 246, 247, 728, 855, 248, 249,
	856, 857, 250, 0, 251, 729, 252, 253, 255, 387,
	254, 730, 256, 257, 259, 258, 858, 859, 860, 388,
	260, 389, 261, 262, 861, 263, 862, 863, 264, 864,
	865, 265, 390, 731, 266, 732, 391, 267, 268, 269,
	270, 271, 866, 272, 392, 273, 393, 274, 867, 275,
	276, 277, 278, 279, 394, 280, 281, 868, 282, 283,
	284, 285, 286, 0, 288, 289, 287, 290, 291, 292,
	293, 869, 294, 733, 295, 296, 395, 297, 0, 301,
	302, 303, 304, 305, 870, 307, 396, 306, 308, 309,
	871, 310, 298, 299, 311, 734, 312, 397, 398, 313,
	872, 320, 314, 315, 300, 316, 319, 399, 317, 318,
	400, 873, 321, 874, 322, 323, 324, 325, 326, 327,
	328, 329, 875, 401, 402, 403, 876, 877, 330, 331,
	404, 405, 878, 332, 333, 334, 335, 879, 880, 336,
	337, 338, 339, 881, 340, 882, 406, 341, 342, 343,
	407, 408, 883, 884, 344, 885, 886, 887, 888, 345,
	346, 347, 348, 349, 1547, 0, 658, 647, 648, 645,
	646, 637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 1544, 189, 0, 0, 0, 0,
	675, 640, 0, 0, 0, 190, 191, 192, 351, 690,
	353, 691, 193, 692, 693, 0, 194, 357, 358, 195,
	196, 643, 674, 694, 695, 361, 0, 197, 686, 0,
	666, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 720, 208, 209, 210,
	0, 667, 668, 670, 0, 669, 671, 211, 212, 416,
	213, 696, 214, 697, 698, 0, 215, 0, 216, 0,
	217, 1545, 0, 689, 219, 0, 220, 0, 0, 0,
	631, 221, 223, 222, 224, 676, 677, 654, 721, 0,
	0, 0, 0, 0, 225, 226, 699, 700, 701, 0,
	227, 0, 228, 0, 0, 722, 0, 229, 687, 0,
	373, 0, 0, 230, 231, 0, 0, 232, 233, 683,
	685, 724, 0, 376, 237, 0, 234, 0, 723, 235,
	702, 236, 703, 704, 705, 706, 707, 0, 665, 0,
	725, 238, 239, 240, 726, 384, 385, 241, 242, 243,
	0, 245, 244, 0, 688, 727, 246, 247, 728, 0,
	248, 249, 0, 0, 250, 0, 251, 729, 252, 253,
	255, 387, 254, 730, 256, 257, 259, 258, 626, 0,
	655, 684, 260, 708, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 390, 731, 266, 732, 678, 267,
	268, 269, 270, 271, 0, 272, 679, 273, 393, 274,
	0, 275, 276, 277, 278, 279, 709, 280, 281, 0,
	282, 283, 284, 285, 286, 0, 288, 289, 287, 290,
	291, 292, 293, 0, 294, 733, 295, 296, 632, 297,
	0, 301, 302, 303, 304, 305, 0, 307, 396, 306,
	308, 309, 672, 310, 298, 299, 311, 734, 312, 710,
	398, 313, 0, 320, 314, 315, 300, 316, 319, 711,
	317, 318, 680, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 712, 713, 0, 0,
	330, 331, 681, 682, 653, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 673, 340, 0, 406, 341,
	342, 343, 407, 714, 1543, 0, 344, 0, 0, 0,
	0, 345, 346, 347, 348, 349, 627, 0, 658, 647,
	648, 645, 646, 637, 0, 0, 625, 0, 0, 0,
	0, 623, 624, 1546, 187, 188, 0, 189, 0, 0,
	633, 1541, 675, 640, 0, 0, 636, 190, 191, 192,
	351, 690, 353, 691, 193, 692, 693, 0, 194, 357,
	358, 195, 196, 643, 674, 694, 695, 361, 0, 197,
	686, 0, 666, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 720, 208,
	209, 210, 0, 667, 668, 670, 0, 669, 671, 211,
	212, 416, 213, 696, 214, 697, 698, 621, 215, 0,
	216, 0, 217, 0, 0, 689, 219, 0, 220, 0,
	0, 0, 631, 221, 223, 222, 224, 676, 677, 654,
	721, 0, 0, 0, 0, 0, 225, 226, 699, 700,
	701, 0, 227, 0, 228, 0, 0, 722, 0, 229,
	687, 0, 373, 0, 0, 230, 231, 0, 0, 232,
	233, 683, 685, 724, 0, 376, 237, 0, 234, 0,
	723, 235, 702, 236, 703, 704, 705, 706, 707, 0,
	665, 0, 725, 238, 239, 240, 726, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 688, 727, 246, 247,
	728, 0, 248, 249, 0, 0, 250, 0, 251, 729,
	252, 253, 255, 387, 254, 730, 256, 257, 259, 258,
	626, 0, 655, 684, 260, 708, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 731, 266, 732,
	678, 267, 268, 269, 270, 271, 0, 272, 679, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 709, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 733, 295, 296,
	632, 297, 0, 301, 302, 303, 304, 305, 145, 307,
	396, 306, 308, 309, 672, 310, 298, 299, 311, 734,
	312, 710, 398, 313, 0, 320, 314, 315, 300, 316,
	319, 711, 317, 318, 680, 0, 321, 147, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 712, 713,
	0, 0, 330, 331, 681, 682, 653, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 673, 340, 0,
	406, 341, 342, 343, 954, 714, 0, 0, 344, 0,
	0, 0, 139, 345, 346, 347, 348, 349, 627, 140,
	609, 0, 658, 647, 648, 645, 646, 637, 625, 0,
	0, 0, 0, 623, 624, 0, 0, 0, 187, 188,
	0, 189, 1140, 0, 0, 0, 675, 640, 636, 0,
	0, 190, 191, 192, 351, 690, 353, 691, 193, 692,
	693, 0, 194, 357, 358, 195, 196, 643, 674, 694,
	695, 361, 0, 197, 686, 0, 666, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 720, 208, 209, 210, 0, 667, 668, 670,
	0, 669, 671, 211, 212, 416, 213, 696, 214, 697,
	698, 0, 215, 0, 216, 0, 217, 0, 0, 689,
	219, 0, 220, 0, 0, 0, 631, 221, 223, 222,
	224, 676, 677, 654, 721, 0, 0, 0, 0, 0,
	225, 226, 699, 700, 701, 0, 227, 0, 228, 0,
	0, 722, 0, 229, 687, 0, 373, 0, 0, 230,
	231, 0, 0, 232, 233, 683, 685, 724, 0, 376,
	237, 0, 234, 0, 723, 235, 702, 236, 703, 704,
	705, 706, 707, 0, 665, 0, 725, 238, 239, 240,
	726, 384, 385, 241, 242, 243, 0, 245, 244, 0,
	688, 727, 246, 247, 728, 0, 248, 249, 0, 0,
	250, 0, 251, 729, 252, 253, 255, 387, 254, 730,
	256, 257, 259, 258, 626, 0, 655, 684, 260, 708,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	390, 731, 266, 732, 678, 267, 268, 269, 270, 271,
	0, 272, 679, 273, 393, 274, 0, 275, 276, 277,
	278, 279, 709, 280, 281, 0, 282, 283, 284, 285,
	286, 0, 288, 289, 287, 290, 291, 292, 293, 0,
	294, 733, 295, 296, 632, 297, 0, 301, 302, 303,
	304, 305, 145, 307, 396, 306, 308, 309, 672, 310,
	298, 299, 311, 734, 312, 710, 398, 313, 0, 320,
	314, 315, 300, 316, 319, 711, 317, 318, 680, 0,
	321, 147, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 712, 713, 0, 0, 330, 331, 681, 682,
	653, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 673, 340, 0, 406, 341, 342, 343, 954, 714,
	0, 0, 344, 0, 0, 0, 139, 345, 346, 347,
	348, 349, 627, 140, 658, 647, 648, 645, 646, 637,
	0, 0, 625, 0, 0, 0, 0, 623, 624, 0,
	187, 188, 0, 189, 0, 0, 1140, 0, 675, 640,
	0, 0, 636, 190, 191, 192, 351, 690, 353, 691,
	193, 692, 693, 0, 194, 357, 358, 195, 196, 643,
	674, 694, 695, 361, 0, 197, 686, 0, 666, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 720, 208, 209, 210, 0, 667,
	668, 670, 0, 669, 671, 211, 212, 416, 213, 696,
	214, 697, 698, 0, 215, 0, 216, 0, 217, 0,
	0, 689, 219, 0, 220, 0, 0, 0, 631, 221,
	223, 222, 224, 676, 677, 654, 721, 0, 0, 0,
	0, 0, 225, 226, 699, 700, 701, 0, 227, 0,
	228, 0, 0, 722, 0, 229, 687, 0, 373, 0,
	0, 230, 231, 0, 0, 232, 233, 683, 685, 724,
	0, 376, 237, 0, 234, 0, 723, 235, 702, 236,
	703, 704, 705, 706, 707, 0, 665, 0, 725, 238,
	239, 240, 726, 384, 385, 241, 242, 243, 0, 245,
	244, 0, 688, 727, 246, 247, 728, 0, 248, 249,
	0, 0, 250, 0, 251, 729, 252, 253, 255, 387,
	254, 730, 256, 257, 259, 258, 626, 0, 655, 684,
	260, 708, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 390, 731, 266, 732, 678, 267, 268, 269,
	270, 271, 0, 272, 679, 273, 393, 274, 0, 275,
	276, 277, 278, 279, 709, 280, 281, 0, 282, 283,
	284, 285, 286, 0, 288, 289, 287, 290, 291, 292,
	293, 0, 294, 733, 295, 296, 632, 297, 0, 301,
	302, 303, 304, 305, 145, 307, 396, 306, 308, 309,
	672, 310, 298, 299, 311, 734, 312, 710, 398, 313,
	0, 320, 314, 315, 300, 316, 319, 711, 317, 318,
	680, 0, 321, 147, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 712, 713, 0, 0, 330, 331,
	681, 682, 653, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 673, 340, 0, 406, 341, 342, 343,
	954, 714, 0, 0, 344, 0, 0, 0, 139, 345,
	346, 347, 348, 349, 627, 140, 658, 647, 648, 645,
	646, 637, 0, 0, 625, 0, 0, 0, 0, 623,
	624, 0, 187, 188, 0, 189, 0, 0, 1140, 0,
	675, 640, 0, 0, 636, 190, 191, 192, 351, 690,
	353, 691, 193, 692, 693, 1601, 194, 357, 358, 195,
	196, 643, 674, 694, 695, 361, 0, 197, 686, 0,
	666, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 720, 208, 209, 210,
	0, 667, 668, 670, 0, 669, 671, 211, 212, 416,
	213, 696, 214, 697, 698, 0, 215, 0, 216, 0,
	217, 0, 0, 689, 219, 0, 220, 0, 0, 0,
	631, 221, 223, 222, 224, 676, 677, 654, 721, 0,
	0, 0, 0, 0, 225, 226, 699, 700, 701, 0,
	227, 0, 228, 0, 1606, 722, 0, 229, 687, 0,
	373, 0, 0, 230, 231, 0, 0, 232, 233, 683,
	685, 724, 0, 376, 237, 0, 234, 0, 723, 235,
	702, 236, 703, 704, 705, 706, 707, 0, 665, 0,
	725, 238, 239, 240, 726, 384, 385, 241, 242, 243,
	0, 245, 244, 1602, 688, 727, 246, 247, 728, 0,
	248, 249, 0, 0, 250, 0, 251, 729, 252, 253,
	255, 387, 254, 730, 256, 257, 259, 258, 626, 0,
	655, 684, 260, 708, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 390, 731, 266, 732, 678, 267,
	268, 269, 270, 271, 0, 272, 679, 273, 393, 274,
	0, 275, 276, 277, 278, 279, 709, 280, 281, 0,
	282, 283, 284, 285, 286, 0, 288, 289, 287, 290,
	291, 292, 293, 0, 294, 733, 295, 296, 632, 297,
	0, 301, 302, 303, 304, 305, 0, 307, 396, 306,
	308, 309, 672, 310, 298, 299, 311, 734, 312, 710,
	398, 313, 0, 320, 314, 315, 300, 316, 319, 711,
	317, 318, 680, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 712, 713, 0, 1603,
	330, 331, 681, 682, 653, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 673, 340, 0, 406, 341,
	342, 343, 407, 714, 0, 0, 344, 0, 0, 0,
	0, 345, 346, 347, 348, 349, 627, 617, 0, 658,
	647, 648, 645, 646, 637, 0, 625, 0, 0, 0,
	0, 623, 624, 0, 0, 187, 188, 0, 189, 0,
	633, 0, 0, 675, 640, 0, 636, 0, 190, 191,
	192, 351, 690, 353, 691, 193, 692, 693, 0, 194,
	357, 358, 195, 196, 643, 674, 694, 695, 361, 0,
	197, 686, 0, 666, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 720,
	208, 209, 210, 0, 667, 668, 670, 0, 669, 671,
	211, 212, 416, 213, 696, 214, 697, 698, 621, 215,
	0, 216, 0, 217, 0, 0, 689, 219, 0, 220,
	0, 0, 0, 631, 221, 223, 222, 224, 676, 677,
	654, 721, 0, 0, 0, 0, 0, 225, 226, 699,
	700, 701, 0, 227, 0, 228, 0, 0, 722, 0,
	229, 687, 0, 373, 0, 0, 230, 231, 0, 0,
	232, 233, 683, 685, 724, 0, 376, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 387, 254, 730, 256, 257, 259,
	258, 626, 0, 655, 684, 260, 708, 261, 262, 0,
	263, 619, 0, 264, 0, 0, 265, 390, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 0, 272, 679,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 709,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 733, 295,
	296, 632, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 672, 310, 298, 299, 311,
	734, 312, 710, 398, 313, 0, 320, 314, 315, 300,
	316, 319, 711, 317, 318, 680, 0, 321, 0, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 401, 712,
	713, 0, 0, 330, 331, 681, 682, 653, 332, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 673, 340,
	0, 406, 341, 342, 343, 407, 714, 0, 0, 344,
	0, 0, 0, 0, 345, 346, 347, 348, 349, 627,
	0, 658, 647, 648, 645, 646, 637, 0, 0, 625,
	0, 0, 0, 0, 623, 624, 0, 187, 188, 0,
	189, 0, 0, 633, 0, 675, 640, 0, 0, 636,
	190, 191, 192, 351, 690, 353, 691, 193, 692, 693,
	0, 194, 357, 358, 195, 196, 643, 674, 694, 695,
	361, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 416, 213, 696, 214, 697, 698,
	0, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 373, 0, 0, 230, 231,
	0, 0, 232, 233, 683, 685, 724, 0, 376, 237,
	0, 234, 0, 723, 235, 702, 236, 703, 704, 705,
	706, 707, 0, 665, 0, 725, 238, 239, 240, 726,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 688,
	727, 246, 247, 728, 0, 248, 249, 0, 0, 250,
	0, 251, 729, 252, 253, 255, 387, 254, 730, 256,
	257, 259, 258, 626, 2236, 655, 684, 260, 708, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	731, 266, 732, 678, 267, 268, 269, 270, 271, 0,
	272, 679, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 709, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	733, 295, 296, 632, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 672, 310, 298,
	299, 311, 734, 312, 710, 398, 313, 0, 320, 314,
	315, 300, 316, 319, 711, 317, 318, 680, 0, 321,
	0, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	401, 712, 713, 0, 0, 330, 331, 681, 682, 653,
	332, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	673, 340, 0, 406, 341, 342, 343, 407, 714, 0,
	0, 344, 0, 0, 0, 0, 345, 346, 347, 348,
	349, 627, 0, 658, 647, 648, 645, 646, 637, 0,
	0, 625, 0, 0, 0, 0, 623, 624, 1201, 187,
	188, 0, 189, 0, 0, 633, 0, 675, 640, 0,
	0, 636, 190, 191, 192, 351, 690, 353, 691, 193,
	692, 693, 0, 194, 357, 358, 195, 196, 643, 674,
	694, 695, 361, 0, 197, 686, 0, 666, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 210, 0, 667, 668,
	670, 0, 669, 671, 211, 212, 416, 213, 696, 214,
	697, 698, 0, 215, 0, 216, 0, 217, 0, 0,
	689, 219, 0, 220, 0, 0, 0, 631, 221, 223,
	222, 224, 676, 677, 654, 721, 0, 0, 0, 0,
	0, 225, 226, 699, 700, 701, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 687, 0, 373, 0, 0,
	230, 231, 0, 0, 232, 233, 683, 685, 724, 0,
	376, 237, 1451, 234, 0, 723, 235, 702, 236, 703,
	704, 705, 706, 707, 0, 665, 0, 725, 238, 239,
	240, 726, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 688, 727, 246, 247, 728, 0, 248, 249, 0,
	0, 250, 0, 251, 729, 252, 253, 255, 387, 254,
	730, 256, 257, 259, 258, 626, 0, 655, 684, 260,
	708, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 731, 266, 732, 678, 267, 268, 269, 270,
	271, 0, 272, 679, 273, 393, 274, 1450, 275, 276,
	277, 278, 279, 709, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 733, 295, 296, 632, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 672,
	310, 298, 299, 311, 734, 312, 710, 398, 313, 0,
	320, 314, 315, 300, 316, 319, 711, 317, 318, 680,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 712, 713, 0, 0, 330, 331, 681,
	682, 653, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 673, 340, 0, 406, 341, 342, 343, 407,
	714, 0, 0, 344, 0, 0, 0, 0, 345, 346,
	347, 348, 349, 627, 0, 658, 647, 648, 645, 646,
	637, 0, 0, 625, 0, 0, 0, 0, 623, 624,
	0, 187, 188, 0, 189, 0, 0, 633, 0, 675,
	640, 0, 0, 636, 190, 191, 192, 351, 690, 353,
	691, 193, 692, 693, 0, 194, 357, 358, 195, 196,
	643, 674, 694, 695, 361, 0, 197, 686, 0, 666,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 720, 208, 209, 210, 0,
	667, 668, 670, 0, 669, 671, 211, 212, 416, 213,
	696, 214, 697, 698, 621, 215, 0, 216, 0, 217,
	0, 0, 689, 219, 0, 220, 0, 0, 0, 631,
	221, 223, 222, 224, 676, 677, 654, 721, 0, 0,
	0, 0, 0, 225, 226, 699, 700, 701, 0, 227,
	0, 228, 0, 0, 722, 0, 229, 687, 0, 373,
	0, 0, 230, 231, 0, 0, 232, 233, 683, 685,
	724, 0, 376, 237, 0, 234, 0, 723, 235, 702,
	236, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	238, 239, 240, 726, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 252, 253, 255,
	387, 254, 730, 256, 257, 259, 258, 626, 0, 655,
	684, 260, 708, 261, 262, 0, 263, 619, 0, 264,
	0, 0, 265, 390, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 0, 272, 679, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 709, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 733, 295, 296, 632, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 672, 310, 298, 299, 311, 734, 312, 710, 398,
	313, 0, 320, 314, 315, 300, 316, 319, 711, 317,
	318, 680, 0, 321, 0, 322, 323, 324, 325, 326,
	327, 328, 329, 0, 401, 712, 713, 0, 0, 330,
	331, 681, 682, 653, 332, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 673, 340, 0, 406, 341, 342,
	343, 407, 714, 0, 0, 344, 0, 0, 0, 0,
	345, 346, 347, 348, 349, 627, 0, 658, 647, 648,
	645, 646, 637, 0, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 187, 188, 0, 189, 0, 0, 633,
	0, 675, 640, 0, 0, 636, 190, 191, 192, 351,
	690, 353, 691, 193, 692, 693, 0, 194, 357, 358,
	195, 196, 643, 674, 694, 695, 361, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	416, 213, 696, 214, 697, 698, 2641, 215, 0, 216,
	0, 217, 0, 0, 689, 219, 0, 220, 0, 0,
	0, 631, 221, 223, 222, 224, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 687,
	0, 373, 0, 0, 230, 231, 0, 0, 232, 233,
	683, 685, 724, 0, 376, 237, 0, 234, 0, 723,
	235, 702, 236, 703, 704, 705, 706, 707, 0, 665,
	0, 725, 238, 239, 240, 726, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 688, 727, 246, 247, 728,
	0, 248, 249, 0, 0, 250, 0, 251, 2642, 252,
	253, 255, 387, 254, 730, 256, 257, 259, 258, 626,
	0, 655, 684, 260, 708, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 731, 266, 732, 678,
	267, 268, 269, 270, 271, 0, 272, 679, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 709, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 733, 295, 296, 632,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 672, 310, 298, 299, 311, 734, 312,
	710, 398, 313, 0, 320, 314, 315, 300, 316, 319,
	711, 317, 318, 680, 0, 321, 0, 322, 323, 324,
	325, 326, 327, 328, 329, 0, 401, 712, 713, 0,
	0, 330, 331, 681, 682, 653, 332, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 673, 340, 0, 406,
	341, 342, 343, 407, 714, 0, 0, 344, 0, 0,
	0, 0, 345, 346, 347, 348, 349, 627, 0, 658,
	647, 648, 645, 646, 637, 0, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 187, 188, 0, 189, 0,
	0, 633, 0, 675, 640, 0, 0, 636, 190, 191,
	192, 351, 690, 353, 691, 193, 692, 693, 0, 194,
	357, 358, 195, 196, 643, 674, 694, 695, 361, 0,
	197, 686, 0, 666, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 720,
	208, 209, 210, 0, 667, 668, 670, 0, 669, 671,
	211, 212, 416, 213, 696, 214, 697, 698, 621, 215,
	0, 216, 0, 217, 0, 0, 689, 219, 0, 220,
	0, 0, 0, 631, 221, 223, 222, 224, 676, 677,
	654, 721, 0, 0, 0, 0, 0, 225, 226, 699,
	700, 701, 0, 227, 0, 228, 0, 0, 722, 0,
	229, 687, 0, 373, 0, 0, 230, 231, 0, 0,
	232, 233, 683, 685, 724, 0, 376, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 387, 254, 730, 256, 257, 259,
	258, 626, 0, 655, 684, 260, 708, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 0, 272, 679,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 709,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 733, 295,
	296, 632, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 672, 310, 298, 299, 311,
	734, 312, 710, 398, 313, 0, 320, 314, 315, 300,
	316, 319, 711, 317, 318, 680, 0, 321, 0, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 401, 712,
	713, 0, 0, 330, 331, 681, 682, 653, 332, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 673, 340,
	0, 406, 341, 342, 343, 407, 714, 0, 0, 344,
	0, 0, 0, 0, 345, 346, 347, 348, 349, 627,
	0, 658, 647, 648, 645, 646, 637, 0, 0, 625,
	0, 0, 0, 0, 623, 624, 0, 187, 188, 0,
	189, 0, 0, 633, 0, 675, 640, 0, 0, 636,
	190, 191, 192, 351, 690, 353, 691, 193, 692, 693,
	0, 194, 357, 358, 195, 196, 643, 674, 694, 695,
	361, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 416, 213, 696, 214, 697, 698,
	0, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 373, 0, 0, 230, 231,
	0, 0, 232, 233, 683, 685, 724, 0, 376, 237,
	0, 234, 0, 723, 235, 702, 236, 703, 704, 705,
	706, 707, 0, 665, 0, 725, 238, 239, 240, 726,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 688,
	727, 246, 247, 728, 0, 248, 249, 0, 0, 250,
	0, 251, 729, 252, 253, 255, 387, 254, 730, 256,
	257, 259, 258, 626, 0, 655, 684, 260, 708, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	731, 266, 732, 678, 267, 268, 269, 270, 271, 0,
	272, 679, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 709, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	733, 295, 296, 632, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 672, 310, 298,
	299, 311, 734, 312, 710, 398, 313, 0, 320, 314,
	315, 300, 316, 319, 711, 317, 318, 680, 0, 321,
	0, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	401, 712, 713, 0, 0, 330, 331, 681, 682, 653,
	332, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	673, 340, 0, 406, 341, 342, 343, 407, 714, 2087,
	0, 344, 0, 0, 0, 0, 345, 346, 347, 348,
	349, 627, 0, 658, 647, 648, 645, 646, 637, 0,
	0, 625, 0, 0, 0, 0, 623, 624, 0, 187,
	188, 0, 189, 0, 0, 633, 0, 675, 640, 0,
	0, 636, 190, 191, 192, 351, 690, 353, 691, 193,
	692, 693, 0, 194, 357, 358, 195, 196, 643, 674,
	694, 695, 361, 0, 197, 686, 0, 666, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 210, 0, 667, 668,
	670, 0, 669, 671, 211, 212, 416, 213, 696, 214,
	697, 698, 0, 215, 0, 216, 0, 217, 0, 0,
	689, 219, 0, 220, 0, 0, 0, 631, 221, 223,
	222, 224, 676, 677, 654, 721, 0, 0, 0, 0,
	0, 225, 226, 699, 700, 701, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 687, 0, 373, 0, 0,
	230, 231, 0, 0, 232, 233, 683, 685, 724, 0,
	376, 237, 0, 234, 0, 723, 235, 702, 236, 703,
	704, 705, 706, 707, 0, 665, 0, 725, 238, 239,
	240, 726, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 688, 727, 246, 247, 728, 0, 248, 249, 0,
	0, 250, 0, 251, 729, 252, 253, 255, 387, 254,
	730, 256, 257, 259, 258, 626, 0, 655, 684, 260,
	708, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 731, 266, 732, 678, 267, 268, 269, 270,
	271, 0, 272, 679, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 709, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 733, 295, 296, 632, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 672,
	310, 298, 299, 311, 734, 312, 710, 398, 313, 0,
	320, 314, 315, 300, 316, 319, 711, 317, 318, 680,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 712, 713, 0, 0, 330, 331, 681,
	682, 653, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 673, 340, 0, 406, 341, 342, 343, 407,
	714, 0, 0, 344, 0, 0, 0, 0, 345, 346,
	347, 348, 349, 627, 0, 658, 647, 648, 645, 646,
	637, 0, 0, 625, 0, 0, 0, 0, 623, 624,
	1201, 187, 188, 0, 189, 0, 0, 633, 0, 675,
	640, 0, 0, 636, 190, 191, 192, 351, 690, 353,
	691, 193, 692, 693, 0, 194, 357, 358, 195, 196,
	643, 674, 694, 695, 361, 0, 197, 686, 0, 666,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 720, 208, 209, 210, 0,
	667, 668, 670, 0, 669, 671, 211, 212, 416, 213,
	696, 214, 697, 698, 0, 215, 0, 216, 0, 217,
	0, 0, 689, 219, 0, 220, 0, 0, 0, 631,
	221, 223, 222, 224, 676, 677, 654, 721, 0, 0,
	0, 0, 0, 225, 226, 699, 700, 701, 0, 227,
	0, 228, 0, 1606, 722, 0, 229, 687, 0, 373,
	0, 0, 230, 231, 0, 0, 232, 233, 683, 685,
	724, 0, 376, 237, 0, 234, 0, 723, 235, 702,
	236, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	238, 239, 240, 726, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 252, 253, 255,
	387, 254, 730, 256, 257, 259, 258, 626, 0, 655,
	684, 260, 708, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 0, 272, 679, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 709, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 733, 295, 296, 632, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 672, 310, 298, 299, 311, 734, 312, 710, 398,
	313, 0, 320, 314, 315, 300, 316, 319, 711, 317,
	318, 680, 0, 321, 0, 322, 323, 324, 325, 326,
	327, 328, 329, 0, 401, 712, 713, 0, 0, 330,
	331, 681, 682, 653, 332, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 673, 340, 0, 406, 341, 342,
	343, 407, 714, 0, 0, 344, 0, 0, 0, 0,
	345, 346, 347, 348, 349, 627, 1651, 0, 658, 647,
	648, 645, 646, 637, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 187, 188, 0, 189, 0, 633,
	0, 0, 675, 640, 0, 636, 0, 190, 191, 192,
	351, 690, 353, 691, 193, 692, 693, 0, 194, 357,
	358, 195, 196, 643, 674, 694, 695, 361, 0, 197,
	686, 0, 666, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 720, 208,
	209, 210, 0, 667, 668, 670, 0, 669, 671, 211,
	212, 416, 213, 696, 214, 697, 698, 0, 215, 0,
	216, 0, 217, 0, 0, 689, 219, 0, 220, 0,
	0, 0, 631, 221, 223, 222, 224, 676, 677, 654,
	721, 0, 0, 0, 0, 0, 225, 226, 699, 700,
	701, 0, 227, 0, 228, 0, 0, 722, 0, 229,
	687, 0, 373, 0, 0, 230, 231, 0, 0, 232,
	233, 683, 685, 724, 0, 376, 237, 0, 234, 0,
	723, 235, 702, 236, 703, 704, 705, 706, 707, 0,
	665, 0, 725, 238, 239, 240, 726, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 688, 727, 246, 247,
	728, 0, 248, 249, 0, 0, 250, 0, 251, 729,
	252, 253, 255, 387, 254, 730, 256, 257, 259, 258,
	626, 0, 655, 684, 260, 708, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 731, 266, 732,
	678, 267, 268, 269, 270, 271, 0, 272, 679, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 709, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 733, 295, 296,
	632, 297, 0, 301, 302, 303, 304, 305, 0, 307,
	396, 306, 308, 309, 672, 310, 298, 299, 311, 734,
	312, 710, 398, 313, 0, 320, 314, 315, 300, 316,
	319, 711, 317, 318, 680, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 712, 713,
	0, 0, 330, 331, 681, 682, 653, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 673, 340, 0,
	406, 341, 342, 343, 407, 714, 0, 0, 344, 0,
	0, 0, 0, 345, 346, 347, 348, 349, 627, 1615,
	0, 658, 647, 648, 645, 646, 637, 0, 625, 0,
	0, 0, 0, 623, 624, 0, 0, 187, 188, 0,
	189, 0, 633, 0, 0, 675, 640, 0, 636, 0,
	190, 191, 192, 351, 690, 353, 691, 193, 692, 693,
	0, 194, 357, 358, 195, 196, 643, 674, 694, 695,
	361, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 416, 213, 696, 214, 697, 698,
	0, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 373, 0, 0, 230, 231,
	0, 0, 232, 233, 683, 685, 724, 0, 376, 237,
	0, 234, 0, 723, 235, 702, 236, 703, 704, 705,
	706, 707, 0, 665, 0, 725, 238, 239, 240, 726,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 688,
	727, 246, 247, 728, 0, 248, 249, 0, 0, 250,
	0, 251, 729, 252, 253, 255, 387, 254, 730, 256,
	257, 259, 258, 626, 0, 655, 684, 260, 708, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	731, 266, 732, 678, 267, 268, 269, 270, 271, 0,
	272, 679, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 709, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	733, 295, 296, 632, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 672, 310, 298,
	299, 311, 734, 312, 710, 398, 313, 0, 320, 314,
	315, 300, 316, 319, 711, 317, 318, 680, 0, 321,
	0, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	401, 712, 713, 0, 0, 330, 331, 681, 682, 653,
	332, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	673, 340, 0, 406, 341, 342, 343, 407, 714, 0,
	0, 344, 0, 0, 0, 0, 345, 346, 347, 348,
	349, 627, 1613, 0, 658, 647, 648, 645, 646, 637,
	0, 625, 0, 0, 0, 0, 623, 624, 0, 0,
	187, 188, 0, 189, 0, 633, 0, 0, 675, 640,
	0, 636, 0, 190, 191, 192, 351, 690, 353, 691,
	193, 692, 693, 0, 194, 357, 358, 195, 196, 643,
	674, 694, 695, 361, 0, 197, 686, 0, 666, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 720, 208, 209, 210, 0, 667,
	668, 670, 0, 669, 671, 211, 212, 416, 213, 696,
	214, 697, 698, 0, 215, 0, 216, 0, 217, 0,
	0, 689, 219, 0, 220, 0, 0, 0, 631, 221,
	223, 222, 224, 676, 677, 654, 721, 0, 0, 0,
	0, 0, 225, 226, 699, 700, 701, 0, 227, 0,
	228, 0, 0, 722, 0, 229, 687, 0, 373, 0,
	0, 230, 231, 0, 0, 232, 233, 683, 685, 724,
	0, 376, 237, 0, 234, 0, 723, 235, 702, 236,
	703, 704, 705, 706, 707, 0, 665, 0, 725, 238,
	239, 240, 726, 384, 385, 241, 242, 243, 0, 245,
	244, 0, 688, 727, 246, 247, 728, 0, 248, 249,
	0, 0, 250, 0, 251, 729, 252, 253, 255, 387,
	254, 730, 256, 257, 259, 258, 626, 0, 655, 684,
	260, 708, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 390, 731, 266, 732, 678, 267, 268, 269,
	270, 271, 0, 272, 679, 273, 393, 274, 0, 275,
	276, 277, 278, 279, 709, 280, 281, 0, 282, 283,
	284, 285, 286, 0, 288, 289, 287, 290, 291, 292,
	293, 0, 294, 733, 295, 296, 632, 297, 0, 301,
	302, 303, 304, 305, 0, 307, 396, 306, 308, 309,
	672, 310, 298, 299, 311, 734, 312, 710, 398, 313,
	0, 320, 314, 315, 300, 316, 319, 711, 317, 318,
	680, 0, 321, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 712, 713, 0, 0, 330, 331,
	681, 682, 653, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 673, 340, 0, 406, 341, 342, 343,
	407, 714, 0, 0, 344, 0, 0, 0, 0, 345,
	346, 347, 348, 349, 627, 1597, 0, 658, 647, 648,
	645, 646, 637, 0, 625, 0, 0, 0, 0, 623,
	624, 0, 0, 187, 188, 0, 189, 0, 633, 0,
	0, 675, 640, 0, 636, 0, 190, 191, 192, 351,
	690, 353, 691, 193, 692, 693, 0, 194, 357, 358,
	195, 196, 643, 674, 694, 695, 361, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	416, 213, 696, 214, 697, 698, 0, 215, 0, 216,
	0, 217, 0, 0, 689, 219, 0, 220, 0, 0,
	0, 631, 221, 223, 222, 224, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 687,
	0, 373, 0, 0, 230, 231, 0, 0, 232, 233,
	683, 685, 724, 0, 376, 237, 0, 234, 0, 723,
	235, 702, 236, 703, 704, 705, 706, 707, 0, 665,
	0, 725, 238, 239, 240, 726, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 688, 727, 246, 247, 728,
	0, 248, 249, 0, 0, 250, 0, 251, 729, 252,
	253, 255, 387, 254, 730, 256, 257, 259, 258, 626,
	0, 655, 684, 260, 708, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 731, 266, 732, 678,
	267, 268, 269, 270, 271, 0, 272, 679, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 709, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 733, 295, 296, 632,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 672, 310, 298, 299, 311, 734, 312,
	710, 398, 313, 0, 320, 314, 315, 300, 316, 319,
	711, 317, 318, 680, 0, 321, 0, 322, 323, 324,
	325, 326, 327, 328, 329, 0, 401, 712, 713, 0,
	0, 330, 331, 681, 682, 653, 332, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 673, 340, 0, 406,
	341, 342, 343, 407, 714, 0, 0, 344, 0, 0,
	0, 0, 345, 346, 347, 348, 349, 627, 1585, 0,
	658, 647, 648, 645, 646, 637, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 187, 188, 0, 189,
	0, 633, 0, 0, 675, 640, 0, 636, 0, 190,
	191, 192, 351, 690, 353, 691, 193, 692, 693, 0,
	194, 357, 358, 195, 196, 643, 674, 694, 695, 361,
	0, 197, 686, 0, 666, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	720, 208, 209, 210, 0, 667, 668, 670, 0, 669,
	671, 211, 212, 416, 213, 696, 214, 697, 698, 0,
	215, 0, 216, 0, 217, 0, 0, 689, 219, 0,
	220, 0, 0, 0, 631, 221, 223, 222, 224, 676,
	677, 654, 721, 0, 0, 0, 0, 0, 225, 226,
	699, 700, 701, 0, 227, 0, 228, 0, 0, 722,
	0, 229, 687, 0, 373, 0, 0, 230, 231, 0,
	0, 232, 233, 683, 685, 724, 0, 376, 237, 0,
	234, 0, 723, 235, 702, 236, 703, 704, 705, 706,
	707, 0, 665, 0, 725, 238, 239, 240, 726, 384,
	385, 241, 242, 243, 0, 245, 244, 0, 688, 727,
	246, 247, 728, 0, 248, 249, 0, 0, 250, 0,
	251, 729, 252, 253, 255, 387, 254, 730, 256, 257,
	259, 258, 626, 0, 655, 684, 260, 708, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 390, 731,
	266, 732, 678, 267, 268, 269, 270, 271, 0, 272,
	679, 273, 393, 274, 0, 275, 276, 277, 278, 279,
	709, 280, 281, 0, 282, 283, 284, 285, 286, 0,
	288, 289, 287, 290, 291, 292, 293, 0, 294, 733,
	295, 296, 632, 297, 0, 301, 302, 303, 304, 305,
	0, 307, 396, 306, 308, 309, 672, 310, 298, 299,
	311, 734, 312, 710, 398, 313, 0, 320, 314, 315,
	300, 316, 319, 711, 317, 318, 680, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	712, 713, 0, 0, 330, 331, 681, 682, 653, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 673,
	340, 0, 406, 341, 342, 343, 407, 714, 0, 0,
	344, 0, 0, 0, 0, 345, 346, 347, 348, 349,
	627, 1583, 0, 1575, 647, 648, 645, 646, 637, 0,
	625, 0, 0, 0, 0, 623, 624, 0, 0, 187,
	188, 0, 189, 0, 633, 0, 0, 675, 640, 0,
	636, 0, 190, 191, 192, 351, 690, 353, 691, 193,
	692, 693, 0, 194, 357, 358, 195, 196, 643, 674,
	694, 695, 361, 0, 197, 686, 0, 666, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 210, 0, 667, 668,
	670, 0, 669, 671, 211, 212, 416, 213, 696, 1578,
	697, 698, 0, 215, 0, 216, 0, 217, 0, 0,
	689, 219, 0, 220, 0, 0, 0, 631, 221, 223,
	222, 224, 676, 677, 654, 721, 0, 0, 0, 0,
	0, 225, 226, 699, 700, 701, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 687, 0, 373, 0, 0,
	230, 1579, 0, 0, 232, 233, 683, 685, 724, 0,
	376, 237, 0, 234, 0, 723, 235, 702, 236, 703,
	704, 705, 706, 707, 0, 665, 0, 725, 238, 239,
	240, 726, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 688, 727, 246, 247, 728, 0, 248, 249, 0,
	0, 250, 0, 251, 729, 1580, 1577, 255, 387, 254,
	730, 256, 257, 259, 258, 626, 0, 655, 684, 260,
	708, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 731, 266, 732, 678, 267, 268, 269, 270,
	271, 0, 272, 679, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 709, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 733, 295, 296, 632, 297, 0, 301, 302,
	303, 304, 1581, 0, 307, 396, 306, 308, 309, 672,
	310, 298, 299, 311, 734, 312, 710, 398, 313, 0,
	320, 314, 315, 300, 316, 319, 711, 317, 318, 680,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 712, 713, 0, 0, 330, 331, 681,
	682, 653, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 673, 340, 0, 406, 341, 342, 343, 407,
	714, 0, 0, 344, 0, 0, 0, 0, 345, 346,
	347, 1576, 349, 627, 1572, 0, 1575, 647, 648, 645,
	646, 637, 0, 625, 0, 0, 0, 0, 623, 624,
	0, 0, 187, 188, 0, 189, 0, 633, 0, 0,
	675, 640, 0, 636, 0, 190, 191, 192, 351, 690,
	353, 691, 193, 692, 693, 0, 194, 357, 358, 195,
	196, 643, 674, 694, 695, 361, 0, 197, 686, 0,
	666, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 720, 208, 209, 210,
	0, 667, 668, 670, 0, 669, 671, 211, 212, 416,
	213, 696, 1578, 697, 698, 0, 215, 0, 216, 0,
	217, 0, 0, 689, 219, 0, 220, 0, 0, 0,
	631, 221, 223, 222, 224, 676, 677, 654, 721, 0,
	0, 0, 0, 0, 225, 226, 699, 700, 701, 0,
	227, 0, 228, 0, 0, 722, 0, 229, 687, 0,
	373, 0, 0, 230, 1579, 0, 0, 232, 233, 683,
	685, 724, 0, 376, 237, 0, 234, 0, 723, 235,
	702, 236, 703, 704, 705, 706, 707, 0, 665, 0,
	725, 238, 239, 240, 726, 384, 385, 241, 242, 243,
	0, 245, 244, 0, 688, 727, 246, 247, 728, 0,
	248, 249, 0, 0, 250, 0, 251, 729, 1580, 1577,
	255, 387, 254, 730, 256, 257, 259, 258, 626, 0,
	655, 684, 260, 708, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 390, 731, 266, 732, 678, 267,
	268, 269, 270, 271, 0, 272, 679, 273, 393, 274,
	0, 275, 276, 277, 278, 279, 709, 280, 281, 0,
	282, 283, 284, 285, 286, 0, 288, 289, 287, 290,
	291, 292, 293, 0, 294, 733, 295, 296, 632, 297,
	0, 301, 302, 303, 304, 1581, 0, 307, 396, 306,
	308, 309, 672, 310, 298, 299, 311, 734, 312, 710,
	398, 313, 0, 320, 314, 315, 300, 316, 319, 711,
	317, 318, 680, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 712, 713, 0, 0,
	330, 331, 681, 682, 653, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 673, 340, 0, 406, 341,
	342, 343, 407, 714, 0, 0, 344, 0, 0, 0,
	0, 345, 346, 347, 1576, 349, 627, 0, 658, 647,
	648, 645, 646, 637, 0, 0, 625, 0, 0, 0,
	0, 623, 624, 0, 187, 188, 0, 189, 0, 0,
	633, 0, 675, 640, 0, 0, 636, 190, 191, 192,
	351, 690, 353, 691, 193, 692, 693, 0, 194, 357,
	358, 195, 196, 643, 674, 694, 695, 361, 0, 197,
	686, 0, 666, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 720, 208,
	209, 210, 0, 667, 668, 670, 0, 669, 671, 211,
	212, 416, 213, 696, 214, 697, 698, 0, 215, 0,
	216, 0, 217, 0, 0, 689, 219, 0, 220, 0,
	0, 0, 631, 221, 223, 222, 224, 676, 677, 654,
	721, 0, 0, 0, 0, 0, 225, 226, 699, 700,
	701, 0, 227, 0, 228, 0, 0, 722, 0, 229,
	687, 0, 373, 0, 0, 230, 231, 0, 0, 232,
	233, 683, 685, 724, 0, 376, 237, 0, 234, 0,
	723, 235, 702, 236, 703, 704, 705, 706, 707, 0,
	665, 0, 725, 238, 239, 240, 726, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 688, 727, 246, 247,
	728, 0, 248, 249, 0, 0, 250, 0, 251, 729,
	252, 253, 255, 387, 254, 730, 256, 257, 259, 258,
	626, 0, 655, 684, 260, 708, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 731, 266, 732,
	678, 267, 268, 269, 270, 271, 0, 272, 679, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 709, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 733, 295, 296,
	632, 297, 0, 301, 302, 303, 304, 305, 0, 307,
	396, 306, 308, 309, 672, 310, 298, 299, 311, 734,
	312, 710, 398, 313, 0, 320, 314, 315, 300, 316,
	319, 711, 317, 318, 680, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 712, 713,
	0, 0, 330, 331, 681, 682, 653, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 673, 340, 0,
	406, 341, 342, 343, 407, 714, 0, 0, 344, 0,
	0, 0, 0, 345, 346, 347, 348, 349, 627, 0,
	658, 647, 648, 645, 646, 637, 0, 0, 625, 0,
	0, 0, 0, 623, 624, 0, 187, 188, 1438, 189,
	1144, 0, 633, 0, 675, 640, 0, 0, 636, 190,
	191, 192, 351, 690, 353, 691, 193, 692, 693, 0,
	194, 357, 358, 195, 196, 643, 674, 694, 695, 361,
	0, 197, 686, 0, 666, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	720, 208, 209, 210, 0, 667, 668, 670, 0, 669,
	671, 211, 212, 416, 213, 696, 214, 697, 698, 0,
	215, 0, 216, 0, 217, 0, 0, 689, 219, 0,
	220, 0, 0, 0, 631, 221, 223, 222, 224, 676,
	677, 654, 721, 0, 0, 0, 0, 0, 225, 226,
	699, 700, 701, 0, 227, 0, 228, 0, 0, 722,
	0, 229, 687, 0, 373, 0, 0, 230, 231, 0,
	0, 232, 233, 683, 685, 724, 0, 376, 237, 0,
	234, 0, 723, 235, 702, 236, 703, 704, 705, 706,
	707, 0, 665, 0, 725, 238, 239, 240, 726, 384,
	385, 241, 242, 243, 0, 245, 244, 0, 688, 727,
	246, 247, 728, 0, 248, 249, 0, 0, 250, 0,
	251, 729, 252, 253, 255, 387, 254, 730, 256, 257,
	259, 258, 626, 0, 655, 684, 260, 708, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 390, 731,
	266, 732, 678, 267, 268, 269, 270, 271, 0, 272,
	679, 273, 393, 274, 0, 275, 276, 277, 278, 279,
	709, 280, 281, 0, 282, 283, 284, 285, 286, 0,
	288, 289, 287, 290, 291, 292, 293, 0, 294, 733,
	295, 296, 632, 297, 0, 301, 302, 303, 304, 305,
	0, 307, 396, 306, 308, 309, 672, 310, 298, 299,
	311, 734, 312, 710, 398, 313, 0, 320, 314, 315,
	300, 316, 319, 711, 317, 318, 680, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	712, 713, 0, 0, 330, 331, 681, 682, 653, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 673,
	340, 0, 406, 341, 342, 343, 407, 714, 0, 0,
	344, 0, 0, 0, 0, 345, 346, 347, 348, 349,
	627, 900, 0, 658, 647, 648, 645, 646, 637, 0,
	625, 0, 0, 0, 0, 623, 624, 0, 0, 187,
	188, 0, 189, 0, 633, 0, 0, 675, 640, 0,
	636, 0, 190, 191, 192, 351, 690, 353, 691, 193,
	692, 693, 0, 194, 357, 358, 195, 196, 643, 674,
	694, 695, 361, 0, 197, 686, 0, 666, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 210, 0, 667, 668,
	670, 0, 669, 671, 211, 212, 416, 213, 696, 214,
	697, 698, 0, 215, 0, 216, 0, 217, 0, 0,
	689, 219, 0, 220, 0, 0, 0, 631, 221, 223,
	222, 224, 676, 677, 654, 721, 0, 0, 0, 0,
	0, 225, 226, 699, 700, 701, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 687, 0, 373, 0, 0,
	230, 231, 0, 0, 232, 233, 683, 685, 724, 0,
	376, 237, 0, 234, 0, 723, 235, 702, 236, 703,
	704, 705, 706, 707, 0, 665, 0, 725, 238, 239,
	240, 726, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 688, 727, 246, 247, 728, 0, 248, 249, 0,
	0, 250, 0, 251, 729, 252, 253, 255, 387, 254,
	730, 256, 257, 259, 258, 626, 0, 655, 684, 260,
	708, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 731, 266, 732, 678, 267, 268, 269, 270,
	271, 0, 272, 679, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 709, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 733, 295, 296, 632, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 672,
	310, 298, 299, 311, 734, 312, 710, 398, 313, 0,
	320, 314, 315, 300, 316, 319, 711, 317, 318, 680,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 712, 713, 0, 0, 330, 331, 681,
	682, 653, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 673, 340, 0, 406, 341, 342, 343, 407,
	714, 0, 0, 344, 0, 0, 0, 0, 345, 346,
	347, 348, 349, 627, 898, 0, 658, 647, 648, 645,
	646, 637, 0, 625, 0, 0, 0, 0, 623, 624,
	0, 0, 187, 188, 0, 189, 0, 633, 0, 0,
	675, 640, 0, 636, 0, 190, 191, 192, 351, 690,
	353, 691, 193, 692, 693, 0, 194, 357, 358, 195,
	196, 643, 674, 694, 695, 361, 0, 197, 686, 0,
	666, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 720, 208, 209, 210,
	0, 667, 668, 670, 0, 669, 671, 211, 212, 416,
	213, 696, 214, 697, 698, 0, 215, 0, 216, 0,
	217, 0, 0, 689, 219, 0, 220, 0, 0, 0,
	631, 221, 223, 222, 224, 676, 677, 654, 721, 0,
	0, 0, 0, 0, 225, 226, 699, 700, 701, 0,
	227, 0, 228, 0, 0, 722, 0, 229, 687, 0,
	373, 0, 0, 230, 231, 0, 0, 232, 233, 683,
	685, 724, 0, 376, 237, 0, 234, 0, 723, 235,
	702, 236, 703, 704, 705, 706, 707, 0, 665, 0,
	725, 238, 239, 240, 726, 384, 385, 241, 242, 243,
	0, 245, 244, 0, 688, 727, 246, 247, 728, 0,
	248, 249, 0, 0, 250, 0, 251, 729, 252, 253,
	255, 387, 254, 730, 256, 257, 259, 258, 626, 0,
	655, 684, 260, 708, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 390, 731, 266, 732, 678, 267,
	268, 269, 270, 271, 0, 272, 679, 273, 393, 274,
	0, 275, 276, 277, 278, 279, 709, 280, 281, 0,
	282, 283, 284, 285, 286, 0, 288, 289, 287, 290,
	291, 292, 293, 0, 294, 733, 295, 296, 632, 297,
	0, 301, 302, 303, 304, 305, 0, 307, 396, 306,
	308, 309, 672, 310, 298, 299, 311, 734, 312, 710,
	398, 313, 0, 320, 314, 315, 300, 316, 319, 711,
	317, 318, 680, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 712, 713, 0, 0,
	330, 331, 681, 682, 653, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 673, 340, 0, 406, 341,
	342, 343, 407, 714, 0, 0, 344, 0, 0, 0,
	0, 345, 346, 347, 348, 349, 627, 0, 658, 647,
	648, 645, 646, 637, 0, 0, 625, 0, 0, 0,
	0, 623, 624, 0, 187, 188, 0, 189, 0, 0,
	633, 0, 675, 640, 0, 0, 636, 190, 191, 192,
	351, 690, 353, 691, 193, 692, 693, 0, 194, 357,
	358, 195, 196, 643, 674, 694, 695, 361, 0, 197,
	686, 0, 666, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 720, 208,
	209, 2558, 0, 667, 668, 670, 0, 669, 671, 211,
	212, 416, 213, 696, 214, 697, 698, 0, 215, 0,
	216, 0, 217, 0, 0, 689, 219, 0, 220, 0,
	0, 0, 631, 221, 223, 222, 224, 676, 677, 654,
	721, 0, 0, 0, 0, 0, 225, 226, 699, 700,
	701, 0, 227, 0, 228, 0, 0, 722, 0, 229,
	687, 0, 373, 0, 0, 230, 231, 0, 0, 232,
	233, 683, 685, 724, 0, 376, 237, 0, 234, 0,
	723, 235, 702, 236, 703, 704, 705, 706, 707, 0,
	665, 0, 725, 238, 239, 240, 726, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 688, 727, 246, 247,
	728, 0, 248, 249, 0, 0, 250, 0, 251, 729,
	252, 253, 255, 387, 254, 730, 256, 257, 259, 258,
	626, 0, 655, 684, 260, 708, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 731, 266, 732,
	678, 267, 268, 269, 270, 271, 0, 272, 679, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 709, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 733, 295, 296,
	632, 297, 0, 301, 302, 303, 304, 305, 0, 307,
	396, 306, 308, 309, 672, 310, 298, 299, 311, 734,
	312, 710, 398, 313, 0, 320, 314, 315, 300, 316,
	319, 711, 317, 318, 680, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 712, 713,
	0, 0, 330, 331, 681, 682, 653, 332, 333, 2557,
	335, 0, 0, 336, 337, 338, 339, 673, 340, 0,
	406, 341, 342, 343, 407, 714, 0, 0, 344, 0,
	0, 0, 0, 345, 346, 347, 348, 349, 627, 0,
	658, 647, 648, 645, 646, 637, 0, 0, 625, 0,
	0, 0, 0, 623, 624, 0, 187, 188, 0, 189,
	0, 0, 633, 0, 675, 640, 0, 0, 636, 190,
	191, 192, 351, 690, 353, 691, 193, 692, 693, 0,
	194, 357, 358, 195, 196, 643, 674, 694, 695, 361,
	0, 197, 686, 0, 666, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	720, 208, 209, 210, 0, 667, 668, 670, 0, 669,
	671, 211, 212, 416, 213, 696, 214, 697, 698, 0,
	215, 0, 216, 0, 217, 0, 0, 689, 219, 0,
	220, 0, 0, 0, 631, 221, 223, 222, 224, 676,
	677, 654, 721, 0, 0, 0, 0, 0, 225, 226,
	699, 700, 701, 0, 227, 0, 228, 0, 0, 722,
	0, 229, 687, 0, 373, 0, 0, 230, 231, 0,
	0, 232, 233, 683, 685, 724, 0, 376, 237, 0,
	234, 0, 723, 235, 702, 236, 703, 704, 705, 706,
	707, 0, 665, 0, 725, 238, 239, 240, 726, 384,
	385, 241, 242, 243, 0, 245, 244, 0, 688, 727,
	246, 247, 728, 0, 248, 249, 0, 0, 250, 0,
	251, 729, 252, 253, 255, 387, 254, 730, 256, 257,
	259, 258, 626, 0, 655, 684, 260, 708, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 390, 731,
	266, 732, 678, 267, 268, 269, 270, 271, 0, 272,
	679, 273, 393, 274, 0, 275, 276, 277, 278, 279,
	709, 280, 281, 0, 282, 283, 284, 285, 286, 0,
	288, 289, 287, 290, 291, 292, 293, 0, 294, 733,
	295, 296, 632, 297, 0, 301, 302, 303, 304, 305,
	0, 307, 396, 306, 308, 309, 672, 310, 298, 299,
	311, 734, 312, 710, 398, 313, 0, 320, 314, 315,
	300, 316, 319, 711, 317, 318, 680, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	712, 713, 0, 0, 330, 331, 681, 682, 653, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 673,
	340, 0, 406, 341, 342, 343, 407, 714, 0, 0,
	344, 0, 0, 0, 0, 345, 346, 347, 348, 349,
	627, 0, 658, 647, 648, 645, 646, 637, 0, 0,
	625, 0, 0, 0, 0, 623, 624, 0, 187, 188,
	0, 189, 0, 0, 633, 0, 675, 640, 0, 0,
	636, 190, 191, 192, 2556, 690, 353, 691, 193, 692,
	693, 0, 194, 357, 358, 195, 196, 643, 674, 694,
	695, 361, 0, 197, 686, 0, 666, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 720, 208, 209, 2558, 0, 667, 668, 670,
	0, 669, 671, 211, 212, 416, 213, 696, 214, 697,
	698, 0, 215, 0, 216, 0, 217, 0, 0, 689,
	219, 0, 220, 0, 0, 0, 631, 221, 223, 222,
	224, 676, 677, 654, 721, 0, 0, 0, 0, 0,
	225, 226, 699, 700, 701, 0, 227, 0, 228, 0,
	0, 722, 0, 229, 687, 0, 373, 0, 0, 230,
	231, 0, 0, 232, 233, 683, 685, 724, 0, 376,
	237, 0, 234, 0, 723, 235, 702, 236, 703, 704,
	705, 706, 707, 0, 665, 0, 725, 238, 239, 240,
	726, 384, 385, 241, 242, 243, 0, 245, 244, 0,
	688, 727, 246, 247, 728, 0, 248, 249, 0, 0,
	250, 0, 251, 729, 252, 253, 255, 387, 254, 730,
	256, 257, 259, 258, 626, 0, 655, 684, 260, 708,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	390, 731, 266, 732, 678, 267, 268, 269, 270, 271,
	0, 272, 679, 273, 393, 274, 0, 275, 276, 277,
	278, 279, 709, 280, 281, 0, 282, 283, 284, 285,
	286, 0, 288, 289, 287, 290, 291, 292, 293, 0,
	294, 733, 295, 296, 632, 297, 0, 301, 302, 303,
	304, 305, 0, 307, 396, 306, 308, 309, 672, 310,
	298, 299, 311, 734, 312, 710, 398, 313, 0, 320,
	314, 315, 300, 316, 319, 711, 317, 318, 680, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 712, 713, 0, 0, 330, 331, 681, 682,
	653, 332, 333, 2557, 335, 0, 0, 336, 337, 338,
	339, 673, 340, 0, 406, 341, 342, 343, 407, 714,
	0, 0, 344, 0, 0, 0, 0, 345, 346, 347,
	348, 349, 627, 0, 658, 647, 648, 645, 646, 637,
	0, 0, 625, 0, 0, 0, 0, 623, 624, 0,
	187, 188, 0, 189, 0, 0, 633, 0, 675, 640,
	0, 0, 636, 190, 191, 192, 351, 690, 353, 691,
	193, 692, 693, 0, 194, 357, 358, 195, 196, 643,
	674, 694, 695, 361, 0, 197, 686, 0, 666, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 720, 208, 209, 210, 0, 667,
	668, 670, 0, 669, 671, 211, 212, 416, 213, 696,
	214, 697, 698, 0, 215, 0, 216, 0, 217, 0,
	0, 689, 219, 0, 220, 0, 0, 0, 631, 221,
	223, 222, 224, 676, 677, 654, 721, 0, 0, 0,
	0, 0, 225, 226, 699, 700, 701, 0, 227, 0,
	228, 0, 0, 722, 0, 229, 687, 0, 373, 0,
	0, 230, 231, 0, 0, 232, 233, 683, 685, 724,
	0, 376, 237, 0, 234, 0, 723, 235, 702, 236,
	703, 704, 705, 706, 707, 0, 665, 0, 725, 238,
	239, 240, 726, 384, 385, 241, 242, 243, 0, 245,
	244, 0, 688, 727, 246, 247, 728, 0, 248, 249,
	0, 0, 250, 0, 251, 729, 252, 253, 255, 387,
	254, 730, 256, 257, 259, 258, 0, 0, 655, 684,
	260, 708, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 390, 731, 266, 732, 678, 267, 268, 269,
	270, 271, 0, 272, 679, 273, 393, 274, 0, 275,
	276, 277, 278, 279, 709, 280, 281, 0, 282, 283,
	284, 285, 286, 0, 288, 289, 287, 290, 291, 292,
	293, 0, 294, 733, 295, 296, 1595, 297, 0, 301,
	302, 303, 304, 305, 0, 307, 396, 306, 308, 309,
	672, 310, 298, 299, 311, 734, 312, 710, 398, 313,
	0, 320, 314, 315, 300, 316, 319, 711, 317, 318,
	680, 0, 321, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 712, 713, 0, 0, 330, 331,
	681, 682, 653, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 673, 340, 0, 406, 341, 342, 343,
	407, 714, 0, 0, 344, 0, 0, 0, 0, 345,
	346, 347, 348, 349, 0, 0, 658, 647, 648, 645,
	646, 637, 0, 0, 1593, 0, 0, 0, 0, 1591,
	1592, 0, 187, 188, 0, 189, 0, 0, 1594, 0,
	675, 640, 0, 0, 636, 190, 191, 192, 351, 690,
	353, 691, 193, 692, 693, 0, 194, 357, 358, 195,
	196, 0, 674, 694, 695, 361, 0, 197, 686, 0,
	666, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 720, 208, 209, 210,
	0, 667, 668, 670, 0, 669, 671, 211, 212, 416,
	213, 696, 214, 697, 698, 0, 215, 0, 216, 0,
	217, 0, 0, 689, 219, 0, 220, 0, 0, 0,
	366, 221, 223, 222, 224, 676, 677, 654, 721, 0,
	0, 0, 0, 0, 225, 226, 699, 700, 701, 0,
	227, 0, 228, 0, 0, 722, 0, 229, 687, 0,
	373, 0, 0, 230, 231, 0, 0, 232, 233, 683,
	685, 724, 0, 376, 237, 0, 234, 0, 723, 235,
	702, 236, 703, 704, 705, 706, 707, 0, 665, 0,
	725, 238, 239, 240, 726, 384, 385, 241, 242, 243,
	0, 245, 244, 0, 688, 727, 246, 247, 728, 0,
	248, 249, 0, 0, 250, 0, 251, 729, 252, 253,
	255, 387, 254, 730, 256, 257, 259, 258, 0, 0,
	655, 684, 260, 708, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 390, 731, 266, 732, 678, 267,
	268, 269, 270, 271, 0, 272, 679, 273, 393, 274,
	0, 275, 276, 277, 278, 279, 709, 280, 281, 0,
	282, 283, 284, 285, 286, 0, 288, 289, 287, 290,
	291, 292, 293, 0, 294, 733, 295, 296, 1595, 297,
	0, 301, 302, 303, 304, 305, 0, 307, 396, 306,
	308, 309, 672, 310, 298, 299, 311, 734, 312, 710,
	398, 313, 0, 320, 314, 315, 300, 316, 319, 711,
	317, 318, 680, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 712, 713, 0, 0,
	330, 331, 681, 682, 653, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 673, 340, 0, 406, 341,
	342, 343, 407, 714, 0, 0, 344, 0, 0, 0,
	0, 345, 346, 347, 348, 349, 0, 0, 658, 647,
	648, 645, 646, 637, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 189, 0, 0,
	1594, 0, 675, 640, 0, 0, 636, 190, 191, 192,
	0, 690, 353, 691, 193, 692, 693, 0, 194, 357,
	358, 195, 196, 643, 674, 694, 695, 361, 0, 197,
	686, 0, 666, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 720, 208,
	209, 2558, 0, 667, 668, 670, 0, 669, 671, 211,
	212, 416, 213, 696, 214, 697, 698, 0, 215, 0,
	216, 0, 217, 0, 0, 689, 219, 0, 220, 0,
	0, 0, 631, 221, 223, 222, 224, 676, 677, 654,
	721, 0, 0, 0, 0, 0, 225, 226, 699, 700,
	701, 0, 227, 0, 228, 0, 0, 722, 0, 229,
	687, 0, 373, 0, 0, 230, 231, 0, 0, 232,
	233, 683, 685, 0, 0, 376, 237, 0, 234, 0,
	723, 235, 702, 236, 703, 704, 705, 706, 707, 0,
	665, 0, 0, 238, 239, 240, 726, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 688, 727, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 729,
	252, 253, 255, 387, 254, 730, 256, 257, 259, 258,
	626, 0, 655, 684, 260, 708, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 731, 266, 732,
	678, 267, 268, 269, 270, 271, 0, 272, 679, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 709, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 733, 295, 296,
	632, 297, 0, 301, 302, 303, 304, 305, 0, 307,
	396, 306, 308, 309, 672, 310, 298, 299, 311, 0,
	312, 710, 398, 313, 0, 320, 314, 315, 300, 316,
	319, 711, 317, 318, 680, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 712, 713,
	0, 0, 330, 331, 681, 682, 653, 332, 333, 2557,
	335, 0, 0, 336, 337, 338, 339, 673, 340, 0,
	406, 341, 342, 343, 407, 714, 0, 0, 344, 0,
	0, 0, 0, 345, 346, 347, 348, 349, 0, 0,
	658, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 623, 624, 0, 187, 188, 0, 189,
	0, 0, 633, 0, 675, 0, 0, 0, 636, 190,
	191, 192, 351, 352, 353, 354, 193, 355, 356, 0,
	194, 357, 358, 195, 196, 0, 674, 359, 360, 361,
	0, 197, 686, 0, 666, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	720, 208, 209, 210, 0, 667, 668, 670, 0, 669,
	671, 211, 212, 416, 213, 363, 214, 364, 365, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 366, 221, 223, 222, 224, 676,
	677, 0, 721, 0, 0, 0, 0, 0, 225, 226,
	369, 370, 371, 0, 227, 0, 228, 0, 0, 722,
	0, 229, 687, 0, 373, 0, 0, 230, 231, 0,
	0, 232, 233, 683, 685, 724, 0, 376, 237, 0,
	234, 0, 723, 235, 377, 236, 378, 379, 380, 381,
	382, 0, 383, 0, 725, 238, 239, 240, 726, 384,
	385, 241, 242, 243, 0, 245, 244, 0, 688, 727,
	246, 247, 728, 0, 248, 249, 0, 0, 250, 0,
	251, 729, 252, 253, 255, 387, 254, 730, 256, 257,
	259, 258, 0, 0, 0, 684, 260, 389, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 390, 731,
	266, 732, 678, 267, 268, 269, 270, 271, 0, 272,
	679, 273, 393, 274, 0, 275, 276, 277, 278, 279,
	394, 280, 281, 0, 282, 283, 284, 285, 286, 0,
	288, 289, 287, 290, 291, 292, 293, 0, 294, 733,
	295, 296, 395, 297, 0, 301, 302, 303, 304, 305,
	0, 307, 396, 306, 308, 309, 672, 310, 298, 299,
	311, 734, 312, 397, 398, 313, 0, 320, 314, 315,
	300, 316, 319, 399, 317, 318, 680, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	402, 403, 0, 0, 330, 331, 681, 682, 0, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 673,
	340, 0, 406, 341, 342, 343, 407, 408, 0, 0,
	344, 0, 0, 0, 0, 345, 346, 347, 348, 349,
	951, 0, 791, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 189, 0, 0, 2186, 0, 350, 0, 0, 0,
	0, 190, 191, 192, 351, 352, 353, 354, 193, 355,
	356, 0, 194, 357, 358, 195, 196, 0, 0, 359,
	360, 361, 0, 197, 362, 0, 795, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 720, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 416, 213, 363, 214, 364,
	365, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 366, 221, 223, 222,
	224, 367, 368, 0, 721, 0, 0, 0, 0, 0,
	225, 226, 369, 370, 371, 0, 227, 0, 228, 0,
	0, 722, 0, 229, 372, 0, 373, 0, 0, 230,
	231, 0, 0, 232, 233, 374, 375, 724, 0, 376,
	237, 0, 234, 0, 723, 235, 377, 236, 378, 379,
	380, 381, 382, 0, 383, 0, 725, 238, 239, 240,
	726, 384, 385, 241, 242, 243, 0, 245, 244, 0,
	386, 727, 246, 247, 728, 0, 248, 249, 0, 0,
	250, 0, 251, 729, 252, 253, 255, 387, 254, 730,
	256, 257, 259, 258, 0, 0, 0, 388, 260, 389,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	390, 731, 266, 732, 391, 267, 268, 269, 270, 271,
	0, 272, 392, 273, 393, 274, 0, 275, 276, 277,
	278, 279, 394, 280, 281, 0, 282, 283, 284, 285,
	286, 0, 288, 289, 287, 290, 291, 292, 293, 0,
	294, 733, 295, 296, 395, 297, 0, 301, 302, 303,
	304, 305, 145, 307, 396, 306, 308, 309, 0, 310,
	298, 299, 311, 734, 312, 397, 398, 313, 0, 320,
	314, 315, 300, 316, 319, 399, 317, 318, 400, 0,
	321, 147, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 402, 403, 0, 0, 330, 331, 404, 405,
	0, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 0, 406, 341, 342, 343, 954, 408,
	0, 0, 344, 0, 0, 0, 139, 345, 346, 347,
	348, 349, 609, 140, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 189, 0, 0, 117, 0, 350, 0,
	0, 0, 0, 190, 191, 192, 351, 352, 353, 354,
	193, 355, 356, 0, 194, 357, 358, 195, 196, 0,
	0, 359, 360, 361, 0, 197, 362, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 416, 213, 363,
	214, 364, 365, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 366, 221,
	223, 222, 224, 367, 368, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 369, 370, 371, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 372, 0, 373, 0,
	0, 230, 231, 0, 0, 232, 233, 374, 375, 0,
	0, 376, 237, 0, 234, 0, 0, 235, 377, 236,
	378, 379, 380, 381, 382, 0, 383, 0, 0, 238,
	239, 240, 0, 384, 385, 241, 242, 243, 0, 245,
	244, 0, 386, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 387,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 388,
	260, 389, 261, 262, 0, 263, 0, 774, 264, 0,
	0, 265, 390, 0, 266, 0, 391, 267, 268, 269,
	270, 271, 0, 272, 392, 273, 393, 274, 0, 275,
	276, 277, 278, 279, 394, 280, 281, 0, 282, 283,
	284, 285, 286, 0, 288, 289, 287, 290, 291, 292,
	293, 0, 294, 0, 295, 296, 395, 297, 0, 301,
	302, 303, 304, 305, 145, 307, 396, 306, 308, 309,
	0, 310, 298, 299, 311, 0, 312, 397, 398, 313,
	0, 320, 314, 315, 300, 316, 319, 399, 317, 318,
	400, 0, 321, 147, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 402, 403, 0, 0, 330, 331,
	404, 405, 0, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 0, 406, 341, 342, 343,
	954, 408, 0, 0, 344, 0, 0, 0, 139, 345,
	346, 347, 348, 349, 0, 140, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 189, 768, 0, 1223, 0,
	350, 0, 0, 0, 0, 190, 191, 192, 351, 352,
	353, 354, 193, 355, 356, 0, 194, 357, 358, 195,
	196, 0, 0, 359, 360, 361, 0, 197, 362, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 416,
	213, 363, 214, 364, 365, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	366, 221, 223, 222, 224, 367, 368, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 369, 370, 371, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 372, 0,
	373, 0, 0, 230, 231, 0, 0, 232, 233, 374,
	375, 0, 0, 376, 237, 0, 234, 0, 0, 235,
	377, 236, 378, 379, 380, 381, 382, 0, 383, 0,
	0, 238, 239, 240, 0, 384, 385, 241, 242, 243,
	0, 245, 244, 0, 386, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 387, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 388, 260, 389, 261, 262, 0, 263, 0, 774,
	264, 0, 0, 265, 390, 0, 266, 0, 391, 267,
	268, 269, 270, 271, 0, 272, 392, 273, 393, 274,
	0, 275, 276, 277, 278, 279, 394, 280, 281, 0,
	282, 283, 284, 285, 286, 0, 288, 289, 287, 290,
	291, 292, 293, 0, 294, 0, 295, 296, 395, 297,
	0, 301, 302, 303, 304, 305, 145, 307, 396, 306,
	308, 309, 0, 310, 298, 299, 311, 0, 312, 397,
	398, 313, 0, 320, 314, 315, 300, 316, 319, 399,
	317, 318, 400, 0, 321, 147, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 402, 403, 0, 0,
	330, 331, 404, 405, 0, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 0, 406, 341,
	342, 343, 954, 408, 0, 0, 344, 0, 0, 0,
	139, 345, 346, 347, 348, 349, 609, 140, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 189, 768, 0,
	1223, 0, 350, 0, 0, 0, 0, 190, 191, 192,
	351, 352, 353, 354, 193, 355, 356, 0, 194, 357,
	358, 195, 196, 0, 0, 359, 360, 361, 0, 197,
	362, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 416, 213, 363, 214, 364, 365, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 366, 221, 223, 222, 224, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 369, 370,
	371, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	372, 0, 373, 0, 0, 230, 231, 0, 0, 232,
	233, 374, 375, 0, 0, 376, 237, 0, 234, 0,
	0, 235, 377, 236, 378, 379, 380, 381, 382, 0,
	383, 0, 0, 238, 239, 240, 0, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 386, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 387, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 388, 260, 389, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 0, 266, 0,
	391, 267, 268, 269, 270, 271, 0, 272, 392, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 394, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 0, 295, 296,
	395, 297, 0, 301, 302, 303, 304, 305, 145, 307,
	396, 306, 308, 309, 0, 310, 298, 299, 311, 0,
	312, 397, 398, 313, 0, 320, 314, 315, 300, 316,
	319, 399, 317, 318, 400, 0, 321, 147, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 402, 403,
	0, 0, 330, 331, 404, 405, 0, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 0,
	406, 341, 342, 343, 954, 408, 0, 0, 344, 0,
	0, 0, 139, 345, 346, 347, 348, 349, 1928, 140,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 189,
	0, 0, 117, 0, 350, 0, 0, 0, 0, 190,
	191, 192, 351, 352, 353, 354, 193, 355, 356, 0,
	194, 357, 358, 195, 196, 0, 0, 359, 360, 361,
	0, 197, 362, 0, 0, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	0, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 416, 213, 363, 214, 364, 365, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 366, 221, 223, 222, 224, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	369, 370, 371, 0, 227, 0, 228, 0, 0, 0,
	0, 229, 372, 0, 373, 0, 0, 230, 231, 0,
	0, 232, 233, 374, 375, 0, 0, 376, 237, 0,
	234, 0, 0, 235, 377, 236, 378, 379, 380, 381,
	382, 0, 383, 0, 0, 238, 239, 240, 0, 384,
	385, 241, 242, 243, 0, 245, 244, 0, 386, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 0, 252, 253, 255, 387, 254, 0, 256, 257,
	259, 258, 0, 0, 0, 388, 260, 389, 261, 262,
	0, 263, 0, 774, 264, 0, 0, 265, 390, 0,
	266, 0, 391, 267, 268, 269, 270, 271, 0, 272,
	392, 273, 393, 274, 0, 275, 276, 277, 278, 279,
	394, 280, 281, 0, 282, 283, 284, 285, 286, 0,
	288, 289, 287, 290, 291, 292, 293, 0, 294, 0,
	295, 296, 395, 297, 0, 301, 302, 303, 304, 305,
	0, 307, 396, 306, 308, 309, 0, 310, 298, 299,
	311, 0, 312, 397, 398, 313, 0, 320, 314, 315,
	300, 316, 319, 399, 317, 318, 400, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	402, 403, 0, 0, 330, 331, 404, 405, 0, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 0, 406, 341, 342, 343, 407, 408, 0, 0,
	344, 0, 0, 0, 0, 345, 346, 347, 348, 349,
	767, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 189, 768, 0, 773, 0, 350, 0, 0, 0,
	0, 190, 191, 192, 351, 352, 353, 354, 193, 355,
	356, 0, 194, 357, 358, 195, 196, 0, 0, 359,
	360, 361, 0, 197, 362, 0, 0, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 416, 213, 363, 214, 364,
	365, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 366, 221, 223, 222,
	224, 367, 368, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 369, 370, 371, 0, 227, 0, 228, 0,
	0, 0, 0, 229, 372, 0, 373, 0, 0, 230,
	231, 0, 0, 232, 233, 374, 375, 0, 0, 376,
	237, 0, 234, 0, 0, 235, 377, 236, 378, 379,
	380, 381, 382, 0, 383, 0, 0, 238, 239, 240,
	0, 384, 385, 241, 242, 243, 0, 245, 244, 0,
	386, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 387, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 388, 260, 389,
	261, 262, 0, 263, 0, 774, 264, 0, 0, 265,
	390, 0, 266, 0, 391, 267, 268, 269, 270, 271,
	0, 272, 392, 273, 393, 274, 0, 275, 276, 277,
	278, 279, 394, 280, 281, 0, 282, 283, 284, 285,
	286, 0, 288, 289, 287, 290, 291, 292, 293, 0,
	294, 0, 295, 296, 395, 297, 0, 301, 302, 303,
	304, 305, 0, 307, 396, 306, 308, 309, 0, 310,
	298, 299, 311, 0, 312, 397, 398, 313, 0, 320,
	314, 315, 300, 316, 319, 399, 317, 318, 400, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 402, 403, 0, 0, 330, 331, 404, 405,
	0, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 0, 406, 341, 342, 343, 407, 408,
	0, 0, 344, 0, 0, 0, 0, 345, 346, 347,
	348, 349, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 189, 0, 768, 0, 773, 350, 0, 0,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 0, 197, 362, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 0, 0, 232, 233, 374, 375, 0, 0,
	376, 237, 0, 234, 0, 0, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 0, 238, 239,
	240, 0, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 387, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 774, 264, 0, 0,
	265, 390, 0, 266, 0, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 0, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 0, 312, 397, 398, 313, 0,
	320, 314, 315, 300, 316, 319, 399, 317, 318, 400,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 402, 403, 0, 0, 330, 331, 404,
	405, 0, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 0, 406, 341, 342, 343, 407,
	408, 0, 0, 344, 0, 0, 0, 0, 345, 346,
	347, 348, 349, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 189, 0, 768, 0, 773, 350, 0,
	0, 0, 0, 190, 191, 192, 351, 352, 353, 354,
	193, 355, 356, 0, 194, 357, 358, 195, 196, 0,
	0, 359, 360, 361, 0, 197, 362, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 416, 213, 363,
	214, 364, 365, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 366, 221,
	223, 222, 224, 367, 368, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 369, 370, 371, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 372, 0, 373, 0,
	0, 230, 231, 0, 0, 232, 233, 374, 375, 0,
	0, 376, 237, 0, 234, 0, 0, 235, 377, 236,
	378, 379, 380, 381, 382, 0, 383, 0, 0, 238,
	239, 240, 0, 384, 385, 241, 242, 243, 0, 245,
	244, 0, 386, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 387,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 388,
	260, 389, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 390, 0, 266, 0, 391, 267, 268, 269,
	270, 271, 0, 272, 392, 273, 393, 274, 0, 275,
	276, 277, 278, 279, 394, 280, 281, 0, 282, 283,
	284, 285, 286, 0, 288, 289, 287, 290, 291, 292,
	293, 0, 294, 0, 295, 296, 395, 297, 0, 301,
	302, 303, 304, 305, 0, 307, 396, 306, 308, 309,
	0, 310, 298, 299, 311, 0, 312, 397, 398, 313,
	0, 320, 314, 315, 300, 316, 319, 399, 317, 318,
	400, 0, 321, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 402, 403, 0, 0, 330, 331,
	404, 405, 0, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 0, 406, 341, 342, 343,
	407, 408, 0, 0, 344, 0, 0, 0, 0, 345,
	346, 347, 348, 349, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 189, 0, 0, 0, 0, 350, 1258,
	0, 0, 0, 190, 191, 192, 351, 352, 353, 354,
	193, 355, 356, 0, 194, 357, 358, 195, 196, 0,
	0, 359, 360, 361, 0, 197, 362, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 416, 213, 363,
	214, 364, 365, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 366, 221,
	223, 222, 224, 367, 368, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 369, 370, 371, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 372, 0, 373, 0,
	0, 230, 231, 0, 0, 232, 233, 374, 375, 0,
	0, 376, 237, 0, 234, 0, 0, 235, 377, 236,
	378, 379, 380, 381, 382, 0, 383, 0, 0, 238,
	239, 240, 0, 384, 385, 241, 242, 243, 0, 245,
	244, 0, 386, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 387,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 388,
	260, 389, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 390, 0, 266, 0, 391, 267, 268, 269,
	270, 271, 0, 272, 392, 273, 393, 274, 0, 275,
	276, 277, 278, 279, 394, 280, 281, 0, 282, 283,
	284, 285, 286, 0, 288, 289, 287, 290, 291, 292,
	293, 0, 294, 0, 295, 296, 395, 297, 0, 301,
	302, 303, 304, 305, 0, 307, 396, 306, 308, 309,
	0, 310, 298, 299, 311, 0, 312, 397, 398, 313,
	0, 320, 314, 315, 300, 316, 319, 399, 317, 318,
	400, 0, 321, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 402, 403, 0, 0, 330, 331,
	404, 405, 0, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 0, 406, 341, 342, 343,
	407, 408, 0, 0, 344, 0, 0, 0, 0, 345,
	346, 347, 348, 349, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 0, 189, 0, 0, 0, 1739, 350,
	0, 0, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 0, 197, 362, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 0, 0, 232, 233, 374, 375,
	0, 0, 376, 237, 0, 234, 0, 0, 235, 377,
	236, 378, 379, 380, 381, 382, 0, 383, 0, 0,
	238, 239, 240, 0, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	387, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	388, 260, 389, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 0, 266, 0, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 394, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 0, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 0, 310, 298, 299, 311, 0, 312, 397, 398,
	313, 0, 320, 314, 315, 300, 316, 319, 399, 317,
	318, 400, 0, 321, 0, 322, 323, 324, 325, 326,
	327, 328, 329, 0, 401, 402, 403, 0, 0, 330,
	331, 404, 405, 0, 332, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 0, 406, 341, 342,
	343, 407, 408, 0, 0, 344, 0, 0, 0, 0,
	345, 346, 347, 348, 349, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 189, 0, 0, 0, 2102,
	350, 0, 0, 0, 0, 190, 191, 192, 351, 352,
	353, 354, 193, 355, 356, 0, 194, 357, 358, 195,
	196, 0, 0, 359, 360, 361, 0, 197, 362, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 416,
	213, 363, 214, 364, 365, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	366, 221, 223, 222, 224, 367, 368, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 369, 370, 371, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 372, 0,
	373, 0, 0, 230, 231, 0, 0, 232, 233, 374,
	375, 0, 0, 376, 237, 0, 234, 0, 0, 235,
	377, 236, 378, 379, 380, 381, 382, 0, 383, 0,
	0, 238, 239, 240, 0, 384, 385, 241, 242, 243,
	0, 245, 244, 0, 386, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 387, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 388, 260, 389, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 390, 0, 266, 0, 391, 267,
	268, 269, 270, 271, 0, 272, 392, 273, 393, 274,
	0, 275, 276, 277, 278, 279, 394, 280, 281, 0,
	282, 283, 284, 285, 286, 0, 288, 289, 287, 290,
	291, 292, 293, 0, 294, 0, 295, 296, 395, 297,
	0, 301, 302, 303, 304, 305, 0, 307, 396, 306,
	308, 309, 0, 310, 298, 299, 311, 0, 312, 397,
	398, 313, 0, 320, 314, 315, 300, 316, 319, 399,
	317, 318, 400, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 402, 403, 0, 0,
	330, 331, 404, 405, 0, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 0, 406, 341,
	342, 343, 407, 408, 0, 0, 344, 0, 0, 0,
	0, 345, 346, 347, 348, 349, 0, 658, 647, 648,
	645, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 189, 0, 0, 0,
	1226, 350, 0, 0, 0, 0, 190, 191, 192, 351,
	690, 353, 691, 193, 692, 693, 0, 194, 357, 358,
	195, 196, 0, 0, 694, 695, 361, 0, 197, 362,
	0, 795, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 696, 214, 697, 698, 0, 215, 0, 216,
	0, 217, 0, 0, 689, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 0, 0, 232, 233,
	374, 375, 724, 0, 376, 237, 0, 234, 0, 723,
	235, 702, 236, 703, 704, 705, 706, 707, 0, 665,
	0, 725, 238, 239, 240, 726, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 727, 246, 247, 728,
	0, 248, 249, 0, 0, 250, 0, 251, 729, 252,
	253, 255, 387, 254, 730, 256, 257, 259, 258, 0,
	0, 655, 388, 260, 708, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 731, 266, 732, 391,
	267, 268, 269, 270, 271, 0, 272, 392, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 709, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 733, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 734, 312,
	710, 398, 313, 0, 320, 314, 315, 300, 316, 319,
	711, 317, 318, 400, 0, 321, 0, 322, 323, 324,
	325, 326, 327, 328, 329, 0, 401, 712, 713, 0,
	0, 330, 331, 404, 405, 653, 332, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 0, 406,
	341, 342, 343, 407, 714, 0, 499, 344, 184, 0,
	0, 0, 345, 346, 347, 348, 349, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 189, 0, 0,
	0, 0, 350, 0, 0, 0, 0, 190, 191, 192,
	351, 352, 353, 354, 193, 355, 356, 0, 194, 357,
	358, 195, 196, 0, 0, 359, 360, 361, 0, 197,
	362, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 180, 213, 363, 214, 364, 365, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 366, 221, 223, 222, 224, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 369, 370,
	371, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	372, 0, 373, 0, 0, 230, 231, 0, 0, 232,
	233, 374, 375, 0, 0, 376, 237, 0, 234, 0,
	0, 235, 377, 236, 378, 379, 380, 381, 382, 0,
	383, 0, 0, 238, 239, 240, 0, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 386, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 387, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 388, 260, 389, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 0, 266, 0,
	391, 267, 268, 269, 270, 271, 0, 272, 392, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 394, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 0, 295, 296,
	395, 297, 0, 301, 302, 303, 304, 305, 0, 307,
	396, 306, 308, 309, 0, 310, 298, 299, 311, 0,
	312, 397, 398, 313, 0, 320, 314, 315, 300, 316,
	319, 399, 317, 318, 400, 0, 321, 179, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 402, 403,
	0, 0, 330, 331, 404, 405, 0, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 0,
	406, 341, 342, 343, 407, 408, 0, 177, 344, 184,
	0, 0, 0, 345, 346, 347, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 0, 189, 0,
	0, 0, 0, 350, 0, 183, 0, 0, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 0, 194,
	357, 358, 195, 196, 0, 0, 359, 360, 361, 0,
	197, 362, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 180, 213, 363, 214, 364, 365, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 366, 221, 223, 222, 224, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 372, 0, 373, 0, 0, 230, 231, 0, 0,
	232, 233, 374, 375, 0, 0, 376, 237, 0, 234,
	0, 0, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 0, 238, 239, 240, 0, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 387, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 0, 266,
	0, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 394,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 0, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 0, 310, 298, 299, 311,
	0, 312, 397, 398, 313, 0, 320, 314, 315, 300,
	316, 319, 399, 317, 318, 400, 0, 321, 179, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 401, 402,
	403, 0, 0, 330, 331, 404, 405, 0, 332, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	0, 406, 341, 342, 343, 407, 408, 0, 184, 344,
	0, 0, 0, 0, 345, 346, 347, 348, 349, 0,
	0, 0, 0, 0, 187, 188, 0, 189, 0, 0,
	0, 0, 350, 0, 0, 0, 183, 190, 191, 192,
	351, 352, 353, 354, 193, 355, 356, 0, 194, 357,
	358, 195, 196, 0, 0, 359, 360, 361, 0, 197,
	362, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 180, 213, 363, 214, 364, 365, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 366, 221, 223, 222, 224, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 369, 370,
	371, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	372, 0, 373, 0, 0, 230, 231, 0, 0, 232,
	233, 374, 375, 0, 0, 376, 237, 0, 234, 0,
	0, 235, 377, 236, 378, 379, 380, 381, 382, 0,
	383, 0, 0, 238, 239, 240, 0, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 386, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 387, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 388, 260, 389, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 0, 266, 0,
	391, 267, 268, 269, 270, 271, 0, 272, 392, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 394, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 0, 295, 296,
	395, 297, 0, 301, 302, 303, 304, 305, 0, 307,
	396, 306, 308, 309, 0, 310, 298, 299, 311, 0,
	312, 397, 398, 313, 0, 320, 314, 315, 300, 316,
	319, 399, 317, 318, 400, 0, 321, 179, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 402, 403,
	0, 0, 330, 331, 404, 405, 0, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 0,
	406, 341, 342, 343, 407, 408, 0, 184, 344, 0,
	0, 0, 0, 345, 346, 347, 348, 349, 0, 0,
	0, 0, 0, 187, 188, 0, 189, 0, 0, 0,
	0, 350, 0, 0, 0, 183, 190, 191, 192, 351,
	352, 353, 354, 193, 355, 356, 0, 194, 357, 358,
	195, 196, 0, 0, 359, 360, 361, 0, 197, 362,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 363, 214, 364, 365, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 369, 370, 371,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 0, 0, 232, 233,
	374, 375, 0, 0, 376, 237, 0, 234, 0, 0,
	235, 377, 236, 378, 379, 380, 381, 382, 0, 383,
	0, 0, 238, 239, 240, 0, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 387, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 388, 260, 389, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 0, 266, 0, 391,
	267, 268, 269, 270, 271, 0, 272, 392, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 394, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 0, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 0, 312,
	397, 398, 313, 0, 320, 314, 315, 300, 316, 319,
	399, 317, 318, 400, 0, 321, 0, 322, 323, 324,
	325, 326, 327, 328, 329, 0, 401, 402, 403, 0,
	0, 330, 331, 404, 405, 0, 332, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 0, 406,
	341, 342, 343, 407, 408, 0, 0, 344, 0, 0,
	0, 0, 345, 346, 347, 348, 349, 1007, 0, 791,
	790, 0, 0, 0, 788, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 187, 188, 0, 189, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 0, 194,
	357, 358, 195, 196, 0, 0, 359, 360, 361, 0,
	197, 362, 0, 795, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 720,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 416, 213, 363, 214, 364, 365, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 366, 221, 223, 222, 224, 367, 368,
	0, 721, 0, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 0, 228, 0, 0, 722, 0,
	229, 372, 0, 373, 0, 0, 230, 231, 0, 0,
	232, 233, 374, 375, 724, 0, 376, 237, 0, 234,
	0, 723, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 725, 238, 239, 240, 726, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 387, 254, 730, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 731, 266,
	732, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 394,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 733, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 0, 310, 298, 299, 311,
	734, 312, 397, 398, 313, 0, 320, 314, 315, 300,
	316, 319, 399, 317, 318, 400, 0, 321, 0, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 401, 402,
	403, 0, 0, 330, 331, 404, 405, 0, 332, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	0, 406, 341, 342, 343, 407, 408, 0, 0, 344,
	0, 0, 0, 0, 345, 346, 347, 348, 349, 946,
	0, 791, 790, 0, 0, 0, 788, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 0,
	189, 0, 0, 0, 0, 350, 0, 0, 0, 0,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 197, 362, 0, 795, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 721, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	0, 0, 232, 233, 945, 375, 724, 0, 376, 237,
	0, 234, 0, 723, 235, 377, 236, 378, 379, 380,
	381, 382, 0, 383, 0, 725, 238, 239, 240, 726,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 386,
	727, 246, 247, 728, 0, 248, 249, 0, 0, 250,
	0, 251, 729, 252, 253, 255, 387, 254, 730, 256,
	257, 259, 258, 0, 0, 0, 388, 260, 389, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	731, 266, 732, 391, 267, 268, 269, 270, 271, 0,
	272, 392, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 394, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	733, 295, 296, 395, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 0, 310, 298,
	299, 311, 734, 312, 397, 398, 313, 0, 320, 314,
	315, 300, 316, 319, 399, 317, 318, 400, 0, 321,
	0, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	401, 402, 403, 0, 0, 330, 331, 404, 405, 0,
	332, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 0, 406, 341, 342, 343, 407, 408, 0,
	0, 344, 0, 0, 0, 0, 345, 346, 347, 348,
	349, 912, 0, 791, 790, 0, 0, 0, 788, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 189, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 0, 197, 362, 0, 795, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 721, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 0, 0, 232, 233, 911, 375, 724, 0,
	376, 237, 0, 234, 0, 723, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 725, 238, 239,
	240, 726, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 727, 246, 247, 728, 0, 248, 249, 0,
	0, 250, 0, 251, 729, 252, 253, 255, 387, 254,
	730, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 731, 266, 732, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 733, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 734, 312, 397, 398, 313, 0,
	320, 314, 315, 300, 316, 319, 399, 317, 318, 400,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 402, 403, 0, 0, 330, 331, 404,
	405, 0, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 0, 406, 341, 342, 343, 407,
	408, 0, 0, 344, 0, 0, 0, 0, 345, 346,
	347, 348, 349, 784, 0, 791, 790, 0, 0, 0,
	788, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 0, 189, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 0, 197, 362, 0, 795,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 720, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 721, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 0, 0, 722, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 0, 0, 232, 233, 786, 375,
	724, 0, 376, 237, 0, 234, 0, 723, 235, 377,
	236, 378, 379, 380, 381, 382, 0, 383, 0, 725,
	238, 239, 240, 726, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 252, 253, 255,
	387, 254, 730, 256, 257, 259, 258, 0, 0, 0,
	388, 260, 389, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 731, 266, 732, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 394, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 733, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 0, 310, 298, 299, 311, 734, 312, 397, 398,
	313, 0, 320, 314, 315, 300, 316, 319, 399, 317,
	318, 400, 0, 321, 0, 322, 323, 324, 325, 326,
	327, 328, 329, 0, 401, 402, 403, 0, 0, 330,
	331, 404, 405, 0, 332, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 0, 406, 341, 342,
	343, 407, 408, 791, 790, 344, 0, 0, 788, 0,
	345, 346, 347, 348, 349, 0, 0, 0, 0, 187,
	188, 0, 189, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 0, 197, 362, 0, 795, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 721, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 0, 0, 232, 233, 374, 375, 724, 0,
	376, 237, 0, 234, 0, 723, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 725, 238, 239,
	240, 726, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 727, 246, 247, 728, 0, 248, 249, 0,
	0, 250, 0, 251, 729, 252, 253, 255, 387, 254,
	730, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 731, 266, 732, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 733, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 734, 312, 397, 398, 313, 0,
	320, 314, 315, 300, 316, 319, 399, 317, 318, 400,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 402, 403, 0, 0, 330, 331, 404,
	405, 0, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 0, 406, 341, 342, 343, 407,
	408, 791, 790, 344, 0, 0, 0, 0, 345, 346,
	347, 348, 349, 0, 0, 0, 0, 187, 188, 0,
	189, 0, 0, 0, 0, 350, 0, 0, 0, 0,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 197, 362, 0, 795, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 721, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	0, 0, 232, 233, 374, 375, 724, 0, 376, 237,
	0, 234, 0, 723, 235, 377, 236, 378, 379, 380,
	381, 382, 0, 383, 0, 725, 238, 239, 240, 726,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 386,
	727, 246, 247, 728, 0, 248, 249, 0, 0, 250,
	0, 251, 729, 252, 253, 255, 387, 254, 730, 256,
	257, 259, 258, 0, 0, 0, 388, 260, 389, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	731, 266, 732, 391, 267, 268, 269, 270, 271, 0,
	272, 392, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 394, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	733, 295, 296, 395, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 0, 310, 298,
	299, 311, 734, 312, 397, 398, 313, 0, 320, 314,
	315, 300, 316, 319, 399, 317, 318, 400, 0, 321,
	0, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	401, 402, 403, 0, 0, 330, 331, 404, 405, 0,
	332, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 0, 406, 341, 342, 343, 407, 408, 791,
	0, 344, 0, 0, 0, 0, 345, 346, 347, 348,
	349, 0, 0, 0, 0, 187, 188, 0, 189, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 0, 194,
	357, 358, 195, 196, 0, 0, 359, 360, 361, 0,
	197, 362, 0, 795, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 720,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 416, 213, 363, 214, 364, 365, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 366, 221, 223, 222, 224, 367, 368,
	0, 721, 0, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 0, 228, 0, 0, 722, 0,
	229, 372, 0, 373, 0, 0, 230, 231, 0, 0,
	232, 233, 374, 375, 724, 0, 376, 237, 0, 234,
	0, 723, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 725, 238, 239, 240, 726, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 387, 254, 730, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 731, 266,
	732, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 394,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 733, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 0, 310, 298, 299, 311,
	734, 312, 397, 398, 313, 0, 320, 314, 315, 300,
	316, 319, 399, 317, 318, 400, 0, 321, 0, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 401, 402,
	403, 0, 0, 330, 331, 404, 405, 0, 332, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	0, 406, 341, 342, 343, 407, 408, 184, 0, 344,
	0, 0, 0, 0, 345, 346, 347, 348, 349, 0,
	0, 0, 0, 187, 188, 0, 189, 0, 0, 0,
	0, 350, 0, 0, 0, 0, 190, 191, 192, 351,
	352, 353, 354, 193, 355, 356, 0, 194, 357, 358,
	195, 196, 0, 0, 359, 360, 361, 1671, 197, 362,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 1669, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 363, 214, 364, 365, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 0, 1715,
	0, 0, 0, 0, 0, 225, 226, 369, 370, 371,
	0, 227, 0, 228, 1674, 0, 0, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 0, 0, 232, 233,
	374, 375, 0, 0, 376, 237, 1713, 234, 0, 0,
	235, 377, 236, 378, 379, 380, 381, 382, 0, 383,
	0, 0, 238, 239, 240, 0, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 387, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 388, 260, 389, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 0, 266, 0, 391,
	267, 268, 269, 270, 271, 0, 272, 392, 273, 393,
	274, 1673, 275, 276, 277, 278, 279, 394, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 0, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 0, 312,
	397, 398, 313, 0, 320, 314, 315, 300, 316, 319,
	399, 317, 318, 400, 0, 321, 0, 322, 323, 324,
	325, 326, 327, 328, 329, 0, 401, 402, 403, 0,
	0, 330, 331, 404, 405, 0, 332, 333, 334, 335,
	0, 1714, 336, 337, 338, 339, 0, 340, 0, 406,
	341, 342, 343, 407, 408, 184, 0, 344, 0, 0,
	0, 0, 345, 346, 347, 348, 349, 0, 0, 0,
	0, 187, 188, 0, 189, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 1671, 197, 362, 0, 0,
	1666, 198, 199, 200, 0, 202, 203, 204, 201, 1669,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 1674, 0, 0, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 0, 0, 232, 233, 1665, 375,
	0, 0, 376, 237, 0, 234, 0, 0, 235, 377,
	236, 378, 379, 380, 381, 382, 0, 383, 0, 0,
	238, 239, 240, 0, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	387, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	388, 260, 389, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 0, 266, 0, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 274, 1673,
	275, 276, 277, 278, 279, 394, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 0, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 0, 310, 298, 299, 311, 0, 312, 397, 398,
	313, 0, 320, 314, 315, 300, 316, 319, 399, 317,
	318, 400, 0, 321, 0, 322, 323, 324, 325, 326,
	327, 328, 329, 0, 401, 402, 403, 0, 0, 330,
	331, 404, 405, 0, 332, 333, 334, 335, 0, 1672,
	336, 337, 338, 339, 0, 340, 0, 406, 341, 342,
	343, 407, 408, 0, 928, 344, 184, 0, 0, 0,
	345, 346, 347, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 189, 0, 0, 0, 0,
	350, 0, 0, 0, 0, 190, 191, 192, 351, 352,
	353, 354, 193, 355, 356, 0, 194, 357, 358, 195,
	196, 0, 0, 359, 360, 361, 0, 197, 362, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 416,
	213, 363, 214, 364, 365, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	366, 221, 223, 222, 224, 367, 368, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 369, 370, 371, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 372, 0,
	373, 0, 0, 230, 231, 0, 0, 232, 233, 374,
	375, 0, 0, 376, 237, 0, 234, 0, 0, 235,
	377, 236, 378, 379, 380, 381, 382, 0, 383, 0,
	0, 238, 239, 240, 0, 384, 385, 241, 242, 243,
	0, 245, 244, 0, 386, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 387, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 388, 260, 389, 261, 262, 0, 263, 0, 774,
	264, 0, 0, 265, 390, 0, 266, 0, 391, 267,
	268, 269, 270, 271, 0, 272, 392, 273, 393, 274,
	0, 275, 276, 277, 278, 279, 394, 280, 281, 0,
	282, 283, 284, 285, 286, 0, 288, 289, 287, 290,
	291, 292, 293, 0, 294, 0, 295, 296, 395, 297,
	0, 301, 302, 303, 304, 305, 0, 307, 396, 306,
	308, 309, 0, 310, 298, 299, 311, 0, 312, 397,
	398, 313, 0, 320, 314, 315, 300, 316, 319, 399,
	317, 318, 400, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 402, 403, 0, 0,
	330, 331, 404, 405, 0, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 0, 406, 341,
	342, 343, 407, 408, 0, 780, 344, 184, 0, 0,
	0, 345, 346, 347, 348, 349, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 189, 0, 0, 0,
	0, 350, 0, 0, 0, 0, 190, 191, 192, 351,
	352, 353, 354, 193, 355, 356, 0, 194, 357, 358,
	195, 196, 0, 0, 359, 360, 361, 0, 197, 362,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 363, 214, 364, 365, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 369, 370, 371,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 0, 0, 232, 233,
	782, 375, 0, 0, 376, 237, 0, 234, 0, 0,
	235, 377, 236, 378, 379, 380, 381, 382, 0, 383,
	0, 0, 238, 239, 240, 0, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 387, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 388, 260, 389, 261, 262, 0, 263, 0,
	774, 264, 0, 0, 265, 390, 0, 266, 0, 391,
	267, 268, 269, 270, 271, 0, 272, 392, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 394, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 0, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 0, 312,
	397, 398, 313, 0, 320, 314, 315, 300, 316, 319,
	399, 317, 318, 400, 0, 321, 0, 322, 323, 324,
	325, 326, 327, 328, 329, 0, 401, 402, 403, 0,
	0, 330, 331, 404, 405, 0, 332, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 0, 406,
	341, 342, 343, 407, 408, 0, 776, 344, 184, 0,
	0, 0, 345, 346, 347, 348, 349, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 189, 0, 0,
	0, 0, 350, 0, 0, 0, 0, 190, 191, 192,
	351, 352, 353, 354, 193, 355, 356, 0, 194, 357,
	358, 195, 196, 0, 0, 359, 360, 361, 0, 197,
	362, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 416, 213, 363, 214, 364, 365, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 366, 221, 223, 222, 224, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 369, 370,
	371, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	372, 0, 373, 0, 0, 230, 231, 0, 0, 232,
	233, 778, 375, 0, 0, 376, 237, 0, 234, 0,
	0, 235, 377, 236, 378, 379, 380, 381, 382, 0,
	383, 0, 0, 238, 239, 240, 0, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 386, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 387, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 388, 260, 389, 261, 262, 0, 263,
	0, 774, 264, 0, 0, 265, 390, 0, 266, 0,
	391, 267, 268, 269, 270, 271, 0, 272, 392, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 394, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 0, 295, 296,
	395, 297, 0, 301, 302, 303, 304, 305, 0, 307,
	396, 306, 308, 309, 0, 310, 298, 299, 311, 0,
	312, 397, 398, 313, 0, 320, 314, 315, 300, 316,
	319, 399, 317, 318, 400, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 402, 403,
	0, 0, 330, 331, 404, 405, 0, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 0,
	406, 341, 342, 343, 407, 408, 0, 428, 344, 184,
	0, 0, 0, 345, 346, 347, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 427, 189, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 0, 194,
	357, 358, 195, 196, 0, 0, 359, 360, 361, 0,
	197, 362, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 416, 213, 363, 214, 364, 365, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 366, 221, 223, 222, 224, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 372, 0, 373, 0, 0, 230, 231, 0, 0,
	232, 233, 374, 375, 0, 0, 376, 237, 0, 234,
	0, 0, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 0, 238, 239, 240, 0, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 387, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 0, 266,
	0, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 426, 0, 275, 276, 277, 278, 279, 394,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 0, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 0, 310, 298, 299, 311,
	0, 312, 397, 398, 313, 0, 320, 314, 315, 300,
	316, 319, 399, 317, 318, 400, 0, 321, 0, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 401, 402,
	403, 0, 0, 330, 331, 404, 405, 0, 332, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	0, 406, 341, 342, 343, 407, 408, 184, 0, 344,
	0, 0, 0, 0, 345, 346, 347, 348, 349, 0,
	0, 0, 0, 187, 188, 0, 189, 0, 0, 0,
	0, 350, 0, 1654, 0, 0, 190, 191, 192, 351,
	352, 353, 354, 193, 355, 356, 0, 194, 357, 358,
	195, 196, 0, 0, 359, 360, 361, 0, 197, 362,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 363, 214, 364, 365, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 369, 370, 371,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 0, 0, 232, 233,
	374, 375, 0, 0, 376, 237, 0, 234, 0, 0,
	235, 377, 236, 378, 379, 380, 381, 382, 0, 383,
	0, 0, 238, 239, 240, 0, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 387, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 388, 260, 389, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 0, 266, 0, 391,
	267, 268, 269, 270, 271, 0, 272, 392, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 394, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 0, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 0, 312,
	397, 398, 313, 0, 320, 314, 315, 300, 316, 319,
	399, 317, 318, 400, 0, 321, 0, 322, 323, 324,
	325, 326, 327, 328, 329, 0, 401, 402, 403, 0,
	0, 330, 331, 404, 405, 0, 332, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 0, 406,
	341, 342, 343, 407, 408, 184, 2254, 344, 0, 0,
	0, 0, 345, 346, 347, 348, 349, 0, 0, 0,
	0, 187, 188, 0, 189, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 0, 197, 362, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 0, 0, 232, 233, 374, 375,
	0, 0, 376, 237, 0, 234, 0, 0, 235, 377,
	236, 378, 379, 380, 381, 382, 0, 383, 0, 0,
	238, 239, 240, 0, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	387, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	388, 260, 389, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 0, 266, 0, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 394, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 0, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 0, 310, 298, 299, 311, 0, 312, 397, 398,
	313, 0, 320, 314, 315, 300, 316, 319, 399, 317,
	318, 400, 0, 321, 0, 322, 323, 324, 325, 326,
	327, 328, 329, 0, 401, 402, 403, 0, 0, 330,
	331, 404, 405, 0, 332, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 0, 406, 341, 342,
	343, 407, 408, 184, 2254, 344, 0, 0, 0, 0,
	345, 346, 347, 348, 349, 0, 0, 0, 0, 187,
	188, 0, 189, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 0, 197, 362, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 0, 0, 232, 233, 374, 375, 0, 0,
	376, 237, 0, 234, 0, 0, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 0, 238, 239,
	240, 0, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 387, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 2251, 0, 0,
	265, 390, 0, 266, 0, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 0, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 0, 312, 397, 398, 313, 0,
	320, 314, 315, 300, 316, 319, 399, 317, 318, 400,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 402, 403, 0, 0, 330, 331, 404,
	405, 0, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 0, 406, 341, 342, 343, 407,
	408, 184, 0, 344, 0, 0, 0, 0, 345, 346,
	347, 348, 349, 0, 0, 0, 0, 187, 188, 0,
	189, 0, 0, 0, 0, 350, 0, 0, 0, 0,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 197, 362, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	0, 0, 232, 233, 374, 375, 0, 0, 376, 237,
	0, 234, 0, 0, 235, 377, 236, 378, 379, 380,
	381, 382, 0, 383, 0, 0, 238, 239, 240, 0,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 386,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 387, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 388, 260, 389, 261,
	262, 0, 263, 0, 774, 264, 0, 0, 265, 390,
	0, 266, 0, 391, 267, 268, 269, 270, 271, 0,
	272, 392, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 394, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	0, 295, 296, 395, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 0, 310, 298,
	299, 311, 0, 312, 397, 398, 313, 0, 320, 314,
	315, 300, 316, 319, 399, 317, 318, 400, 0, 321,
	0, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	401, 402, 403, 0, 0, 330, 331, 404, 405, 0,
	332, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 0, 406, 341, 342, 343, 407, 408, 0,
	1417, 344, 184, 0, 0, 0, 345, 346, 347, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 189, 0, 0, 0, 0, 350, 0, 0, 0,
	0, 190, 191, 192, 351, 352, 353, 354, 193, 355,
	356, 0, 194, 357, 358, 195, 196, 0, 0, 359,
	360, 361, 0, 197, 362, 0, 0, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 416, 213, 363, 214, 364,
	365, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 366, 221, 223, 222,
	224, 367, 368, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 369, 370, 371, 0, 227, 0, 228, 0,
	0, 0, 0, 229, 372, 0, 373, 0, 0, 230,
	231, 0, 0, 232, 233, 374, 375, 0, 0, 376,
	237, 0, 234, 0, 0, 235, 377, 236, 378, 379,
	380, 381, 382, 0, 383, 0, 0, 238, 239, 240,
	0, 384, 385, 241, 242, 243, 0, 245, 244, 0,
	386, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 387, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 388, 260, 389,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	390, 0, 266, 0, 391, 267, 268, 269, 270, 271,
	0, 272, 392, 273, 393, 274, 0, 275, 276, 277,
	278, 279, 394, 280, 281, 0, 282, 283, 284, 285,
	286, 0, 288, 289, 287, 290, 291, 292, 293, 0,
	294, 0, 295, 296, 395, 297, 0, 301, 302, 303,
	304, 305, 0, 307, 396, 306, 308, 309, 0, 310,
	298, 299, 311, 0, 312, 397, 398, 313, 0, 320,
	314, 315, 300, 316, 319, 399, 317, 318, 400, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 402, 403, 0, 0, 330, 331, 404, 405,
	0, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 0, 406, 341, 342, 343, 407, 408,
	0, 1415, 344, 184, 0, 0, 0, 345, 346, 347,
	348, 349, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 189, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 0, 197, 362, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 0, 0, 232, 233, 374, 375, 0, 0,
	376, 237, 0, 234, 0, 0, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 0, 238, 239,
	240, 0, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 387, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 0, 266, 0, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 0, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 0, 312, 397, 398, 313, 0,
	320, 314, 315, 300, 316, 319, 399, 317, 318, 400,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 402, 403, 0, 0, 330, 331, 404,
	405, 0, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 0, 406, 341, 342, 343, 407,
	408, 184, 0, 344, 0, 0, 0, 0, 345, 346,
	347, 348, 349, 0, 0, 0, 0, 187, 188, 1397,
	189, 0, 0, 0, 0, 350, 0, 0, 0, 0,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 197, 362, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	0, 0, 232, 233, 374, 375, 0, 0, 376, 237,
	0, 234, 0, 0, 235, 377, 236, 378, 379, 380,
	381, 382, 0, 383, 0, 0, 238, 239, 240, 0,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 386,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 387, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 388, 260, 389, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	0, 266, 0, 391, 267, 268, 269, 270, 271, 0,
	272, 392, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 394, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	0, 295, 296, 395, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 0, 310, 298,
	299, 311, 0, 312, 397, 398, 313, 0, 320, 314,
	315, 300, 316, 319, 399, 317, 318, 400, 0, 321,
	0, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	401, 402, 403, 0, 0, 330, 331, 404, 405, 0,
	332, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 0, 406, 341, 342, 343, 407, 408, 0,
	525, 344, 184, 0, 0, 0, 345, 346, 347, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 189, 0, 0, 0, 0, 350, 0, 0, 0,
	0, 190, 191, 192, 351, 352, 353, 354, 193, 355,
	356, 0, 194, 357, 358, 195, 196, 0, 0, 359,
	360, 986, 0, 197, 362, 0, 0, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 416, 213, 363, 214, 364,
	365, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 366, 221, 223, 222,
	224, 367, 368, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 369, 370, 371, 0, 227, 0, 228, 0,
	0, 0, 0, 229, 372, 0, 373, 0, 0, 230,
	231, 0, 0, 232, 233, 374, 375, 0, 0, 376,
	237, 0, 234, 0, 0, 235, 377, 236, 378, 379,
	380, 381, 382, 0, 383, 0, 0, 238, 239, 240,
	0, 384, 385, 241, 242, 243, 0, 245, 244, 0,
	386, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 387, 527, 0,
	256, 257, 259, 258, 0, 0, 0, 388, 260, 389,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	390, 0, 266, 0, 391, 267, 268, 269, 270, 271,
	0, 272, 392, 273, 393, 274, 0, 275, 276, 277,
	278, 279, 394, 280, 281, 0, 282, 283, 284, 285,
	286, 0, 288, 289, 287, 290, 291, 292, 293, 0,
	294, 0, 295, 296, 395, 297, 0, 301, 302, 303,
	304, 305, 0, 307, 396, 306, 308, 309, 0, 310,
	298, 299, 311, 0, 312, 397, 398, 313, 0, 320,
	314, 315, 300, 316, 319, 399, 317, 318, 400, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 522, 402, 403, 0, 0, 330, 331, 404, 405,
	0, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 0, 406, 341, 342, 343, 407, 408,
	0, 1273, 344, 184, 0, 0, 0, 345, 346, 347,
	348, 349, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 189, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 0, 197, 362, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 0, 0, 232, 233, 1272, 375, 0, 0,
	376, 237, 0, 234, 0, 0, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 0, 238, 239,
	240, 0, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 387, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 0, 266, 0, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 0, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 0, 312, 397, 398, 313, 0,
	320, 314, 315, 300, 316, 319, 399, 317, 318, 400,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 402, 403, 0, 0, 330, 331, 404,
	405, 0, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 0, 406, 341, 342, 343, 407,
	408, 0, 525, 344, 184, 0, 0, 0, 345, 346,
	347, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 189, 0, 0, 0, 0, 350, 0,
	0, 0, 0, 190, 191, 192, 351, 352, 353, 354,
	193, 355, 356, 0, 194, 357, 358, 195, 196, 0,
	0, 359, 360, 986, 0, 197, 362, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 416, 213, 363,
	214, 364, 365, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 366, 221,
	223, 222, 224, 367, 368, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 369, 370, 371, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 372, 0, 373, 0,
	0, 230, 231, 0, 0, 232, 233, 374, 375, 0,
	0, 376, 237, 0, 234, 0, 0, 235, 377, 236,
	378, 379, 380, 381, 382, 0, 383, 0, 0, 238,
	239, 240, 0, 384, 385, 241, 242, 243, 0, 245,
	244, 0, 386, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 387,
	527, 0, 256, 257, 259, 258, 0, 0, 0, 388,
	260, 389, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 390, 0, 266, 0, 391, 267, 268, 269,
	270, 271, 0, 272, 392, 273, 393, 274, 0, 275,
	276, 277, 278, 279, 394, 280, 281, 0, 282, 283,
	284, 285, 286, 0, 288, 289, 287, 290, 291, 292,
	293, 0, 294, 0, 295, 296, 395, 297, 0, 301,
	302, 303, 304, 305, 0, 307, 396, 306, 308, 309,
	0, 310, 298, 299, 311, 0, 312, 397, 398, 313,
	0, 320, 314, 315, 300, 316, 319, 399, 317, 318,
	400, 0, 321, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 522, 402, 403, 0, 0, 330, 987,
	404, 405, 0, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 0, 406, 341, 342, 343,
	407, 408, 0, 525, 344, 184, 0, 0, 0, 345,
	346, 347, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 0, 189, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 0, 516, 362, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 0, 0, 232, 233, 374, 375,
	0, 0, 376, 237, 0, 234, 0, 0, 235, 377,
	236, 378, 379, 380, 381, 382, 0, 383, 0, 0,
	238, 239, 240, 0, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	387, 527, 0, 256, 257, 259, 258, 0, 0, 0,
	388, 260, 389, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 0, 266, 0, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 394, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 0, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 970,
	309, 0, 310, 298, 299, 311, 0, 312, 397, 398,
	313, 0, 320, 314, 315, 300, 316, 319, 399, 317,
	318, 400, 0, 321, 0, 322, 323, 324, 325, 326,
	327, 328, 329, 0, 522, 402, 403, 0, 0, 330,
	331, 404, 405, 0, 332, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 0, 406, 341, 342,
	343, 407, 408, 0, 943, 344, 184, 0, 0, 0,
	345, 346, 347, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 189, 0, 0, 0, 0,
	350, 0, 0, 0, 0, 190, 191, 192, 351, 352,
	353, 354, 193, 355, 356, 0, 194, 357, 358, 195,
	196, 0, 0, 359, 360, 361, 0, 197, 362, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 416,
	213, 363, 214, 364, 365, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	366, 221, 223, 222, 224, 367, 368, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 369, 370, 371, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 372, 0,
	373, 0, 0, 230, 231, 0, 0, 232, 233, 942,
	375, 0, 0, 376, 237, 0, 234, 0, 0, 235,
	377, 236, 378, 379, 380, 381, 382, 0, 383, 0,
	0, 238, 239, 240, 0, 384, 385, 241, 242, 243,
	0, 245, 244, 0, 386, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 387, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 388, 260, 389, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 390, 0, 266, 0, 391, 267,
	268, 269, 270, 271, 0, 272, 392, 273, 393, 274,
	0, 275, 276, 277, 278, 279, 394, 280, 281, 0,
	282, 283, 284, 285, 286, 0, 288, 289, 287, 290,
	291, 292, 293, 0, 294, 0, 295, 296, 395, 297,
	0, 301, 302, 303, 304, 305, 0, 307, 396, 306,
	308, 309, 0, 310, 298, 299, 311, 0, 312, 397,
	398, 313, 0, 320, 314, 315, 300, 316, 319, 399,
	317, 318, 400, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 402, 403, 0, 0,
	330, 331, 404, 405, 0, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 0, 406, 341,
	342, 343, 407, 408, 0, 939, 344, 184, 0, 0,
	0, 345, 346, 347, 348, 349, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 189, 0, 0, 0,
	0, 350, 0, 0, 0, 0, 190, 191, 192, 351,
	352, 353, 354, 193, 355, 356, 0, 194, 357, 358,
	195, 196, 0, 0, 359, 360, 361, 0, 197, 362,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 363, 214, 364, 365, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 369, 370, 371,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 0, 0, 232, 233,
	938, 375, 0, 0, 376, 237, 0, 234, 0, 0,
	235, 377, 236, 378, 379, 380, 381, 382, 0, 383,
	0, 0, 238, 239, 240, 0, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 387, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 388, 260, 389, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 0, 266, 0, 391,
	267, 268, 269, 270, 271, 0, 272, 392, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 394, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 0, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 0, 312,
	397, 398, 313, 0, 320, 314, 315, 300, 316, 319,
	399, 317, 318, 400, 0, 321, 0, 322, 323, 324,
	325, 326, 327, 328, 329, 0, 401, 402, 403, 0,
	0, 330, 331, 404, 405, 0, 332, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 0, 406,
	341, 342, 343, 407, 408, 0, 936, 344, 184, 0,
	0, 0, 345, 346, 347, 348, 349, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 189, 0, 0,
	0, 0, 350, 0, 0, 0, 0, 190, 191, 192,
	351, 352, 353, 354, 193, 355, 356, 0, 194, 357,
	358, 195, 196, 0, 0, 359, 360, 361, 0, 197,
	362, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 416, 213, 363, 214, 364, 365, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 366, 221, 223, 222, 224, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 369, 370,
	371, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	372, 0, 373, 0, 0, 230, 231, 0, 0, 232,
	233, 935, 375, 0, 0, 376, 237, 0, 234, 0,
	0, 235, 377, 236, 378, 379, 380, 381, 382, 0,
	383, 0, 0, 238, 239, 240, 0, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 386, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 387, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 388, 260, 389, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 0, 266, 0,
	391, 267, 268, 269, 270, 271, 0, 272, 392, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 394, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 0, 295, 296,
	395, 297, 0, 301, 302, 303, 304, 305, 0, 307,
	396, 306, 308, 309, 0, 310, 298, 299, 311, 0,
	312, 397, 398, 313, 0, 320, 314, 315, 300, 316,
	319, 399, 317, 318, 400, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 402, 403,
	0, 0, 330, 331, 404, 405, 0, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 0,
	406, 341, 342, 343, 407, 408, 0, 932, 344, 184,
	0, 0, 0, 345, 346, 347, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 0, 189, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 0, 194,
	357, 358, 195, 196, 0, 0, 359, 360, 361, 0,
	197, 362, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 416, 213, 363, 214, 364, 365, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 366, 221, 223, 222, 224, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 372, 0, 373, 0, 0, 230, 231, 0, 0,
	232, 233, 931, 375, 0, 0, 376, 237, 0, 234,
	0, 0, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 0, 238, 239, 240, 0, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 387, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 0, 266,
	0, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 394,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 0, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 0, 310, 298, 299, 311,
	0, 312, 397, 398, 313, 0, 320, 314, 315, 300,
	316, 319, 399, 317, 318, 400, 0, 321, 0, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 401, 402,
	403, 0, 0, 330, 331, 404, 405, 0, 332, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	0, 406, 341, 342, 343, 407, 408, 184, 0, 344,
	0, 0, 0, 0, 345, 346, 347, 348, 349, 0,
	0, 0, 0, 187, 188, 920, 189, 0, 0, 0,
	0, 350, 0, 0, 0, 0, 190, 191, 192, 351,
	352, 353, 354, 193, 355, 356, 0, 194, 357, 358,
	195, 196, 0, 0, 359, 360, 361, 0, 197, 362,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 363, 214, 364, 365, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 369, 370, 371,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 0, 0, 232, 233,
	374, 375, 0, 0, 376, 237, 0, 234, 0, 0,
	235, 377, 236, 378, 379, 380, 381, 382, 0, 383,
	0, 0, 238, 239, 240, 0, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 387, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 388, 260, 389, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 0, 266, 0, 391,
	267, 268, 269, 270, 271, 0, 272, 392, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 394, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 0, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 0, 312,
	397, 398, 313, 0, 320, 314, 315, 300, 316, 319,
	399, 317, 318, 400, 0, 321, 0, 322, 323, 324,
	325, 326, 327, 328, 329, 0, 401, 402, 403, 0,
	0, 330, 331, 404, 405, 0, 332, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 0, 406,
	341, 342, 343, 407, 408, 0, 918, 344, 184, 0,
	0, 0, 345, 346, 347, 348, 349, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 189, 0, 0,
	0, 0, 350, 0, 0, 0, 0, 190, 191, 192,
	351, 352, 353, 354, 193, 355, 356, 0, 194, 357,
	358, 195, 196, 0, 0, 359, 360, 361, 0, 197,
	362, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 416, 213, 363, 214, 364, 365, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 366, 221, 223, 222, 224, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 369, 370,
	371, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	372, 0, 373, 0, 0, 230, 231, 0, 0, 232,
	233, 917, 375, 0, 0, 376, 237, 0, 234, 0,
	0, 235, 377, 236, 378, 379, 380, 381, 382, 0,
	383, 0, 0, 238, 239, 240, 0, 384, 385, 241,
	242, 243, 0, 245, 244, 0, 386, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 387, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 388, 260, 389, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 390, 0, 266, 0,
	391, 267, 268, 269, 270, 271, 0, 272, 392, 273,
	393, 274, 0, 275, 276, 277, 278, 279, 394, 280,
	281, 0, 282, 283, 284, 285, 286, 0, 288, 289,
	287, 290, 291, 292, 293, 0, 294, 0, 295, 296,
	395, 297, 0, 301, 302, 303, 304, 305, 0, 307,
	396, 306, 308, 309, 0, 310, 298, 299, 311, 0,
	312, 397, 398, 313, 0, 320, 314, 315, 300, 316,
	319, 399, 317, 318, 400, 0, 321, 0, 322, 323,
	324, 325, 326, 327, 328, 329, 0, 401, 402, 403,
	0, 0, 330, 331, 404, 405, 0, 332, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 0,
	406, 341, 342, 343, 407, 408, 0, 914, 344, 184,
	0, 0, 0, 345, 346, 347, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 0, 189, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 0, 194,
	357, 358, 195, 196, 0, 0, 359, 360, 361, 0,
	197, 362, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 416, 213, 363, 214, 364, 365, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 366, 221, 223, 222, 224, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 372, 0, 373, 0, 0, 230, 231, 0, 0,
	232, 233, 374, 375, 0, 0, 376, 237, 0, 234,
	0, 0, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 0, 238, 239, 240, 0, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 387, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 0, 266,
	0, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 394,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 0, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 0, 310, 298, 299, 311,
	0, 312, 397, 398, 313, 0, 320, 314, 315, 300,
	316, 319, 399, 317, 318, 400, 0, 321, 0, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 401, 402,
	403, 0, 0, 330, 331, 404, 405, 0, 332, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	0, 406, 341, 342, 343, 407, 408, 0, 907, 344,
	184, 0, 0, 0, 345, 346, 347, 348, 349, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 189,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 190,
	191, 192, 351, 352, 353, 354, 193, 355, 356, 0,
	194, 357, 358, 195, 196, 0, 0, 359, 360, 361,
	0, 197, 362, 0, 0, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	0, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 416, 213, 363, 214, 364, 365, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 366, 221, 223, 222, 224, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	369, 370, 371, 0, 227, 0, 228, 0, 0, 0,
	0, 229, 372, 0, 373, 0, 0, 230, 231, 0,
	0, 232, 233, 909, 375, 0, 0, 376, 237, 0,
	234, 0, 0, 235, 377, 236, 378, 379, 380, 381,
	382, 0, 383, 0, 0, 238, 239, 240, 0, 384,
	385, 241, 242, 243, 0, 245, 244, 0, 386, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 0, 252, 253, 255, 387, 254, 0, 256, 257,
	259, 258, 0, 0, 0, 388, 260, 389, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 390, 0,
	266, 0, 391, 267, 268, 269, 270, 271, 0, 272,
	392, 273, 393, 274, 0, 275, 276, 277, 278, 279,
	394, 280, 281, 0, 282, 283, 284, 285, 286, 0,
	288, 289, 287, 290, 291, 292, 293, 0, 294, 0,
	295, 296, 395, 297, 0, 301, 302, 303, 304, 305,
	0, 307, 396, 306, 308, 309, 0, 310, 298, 299,
	311, 0, 312, 397, 398, 313, 0, 320, 314, 315,
	300, 316, 319, 399, 317, 318, 400, 0, 321, 0,
	322, 323, 324, 325, 326, 327, 328, 329, 0, 401,
	402, 403, 0, 0, 330, 331, 404, 405, 0, 332,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 0, 406, 341, 342, 343, 407, 408, 0, 798,
	344, 184, 0, 0, 0, 345, 346, 347, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 0,
	189, 0, 0, 0, 0, 350, 0, 0, 0, 0,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 197, 362, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	0, 0, 232, 233, 800, 375, 0, 0, 376, 237,
	0, 234, 0, 0, 235, 377, 236, 378, 379, 380,
	381, 382, 0, 383, 0, 0, 238, 239, 240, 0,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 386,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 387, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 388, 260, 389, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	0, 266, 0, 391, 267, 268, 269, 270, 271, 0,
	272, 392, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 394, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	0, 295, 296, 395, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 0, 310, 298,
	299, 311, 0, 312, 397, 398, 313, 0, 320, 314,
	315, 300, 316, 319, 399, 317, 318, 400, 0, 321,
	0, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	401, 402, 403, 0, 0, 330, 331, 404, 405, 0,
	332, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 0, 406, 341, 342, 343, 407, 408, 0,
	796, 344, 184, 0, 0, 0, 345, 346, 347, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 189, 0, 0, 0, 0, 350, 0, 0, 0,
	0, 190, 191, 192, 351, 352, 353, 354, 193, 355,
	356, 0, 194, 357, 358, 195, 196, 0, 0, 359,
	360, 361, 0, 197, 362, 0, 0, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 416, 213, 363, 214, 364,
	365, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 366, 221, 223, 222,
	224, 367, 368, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 369, 370, 371, 0, 227, 0, 228, 0,
	0, 0, 0, 229, 372, 0, 373, 0, 0, 230,
	231, 0, 0, 232, 233, 374, 375, 0, 0, 376,
	237, 0, 234, 0, 0, 235, 377, 236, 378, 379,
	380, 381, 382, 0, 383, 0, 0, 238, 239, 240,
	0, 384, 385, 241, 242, 243, 0, 245, 244, 0,
	386, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 387, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 388, 260, 389,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	390, 0, 266, 0, 391, 267, 268, 269, 270, 271,
	0, 272, 392, 273, 393, 274, 0, 275, 276, 277,
	278, 279, 394, 280, 281, 0, 282, 283, 284, 285,
	286, 0, 288, 289, 287, 290, 291, 292, 293, 0,
	294, 0, 295, 296, 395, 297, 0, 301, 302, 303,
	304, 305, 0, 307, 396, 306, 308, 309, 0, 310,
	298, 299, 311, 0, 312, 397, 398, 313, 0, 320,
	314, 315, 300, 316, 319, 399, 317, 318, 400, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 329,
	0, 401, 402, 403, 0, 0, 330, 331, 404, 405,
	0, 332, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 0, 406, 341, 342, 343, 407, 408,
	0, 525, 344, 184, 0, 0, 0, 345, 346, 347,
	348, 349, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 189, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 0, 516, 362, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 0, 0, 232, 233, 374, 375, 0, 0,
	376, 237, 0, 234, 0, 0, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 0, 238, 239,
	240, 0, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 0, 246, 247, 0, 0, 248, 515, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 387, 527,
	0, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 0, 266, 0, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 0, 295, 296, 517, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 518, 309, 0,
	310, 298, 299, 311, 0, 312, 397, 398, 313, 0,
	320, 314, 315, 300, 316, 319, 399, 317, 318, 400,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 522, 402, 403, 0, 0, 330, 520, 404,
	405, 0, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 0, 406, 341, 342, 343, 407,
	408, 0, 507, 344, 184, 0, 0, 0, 345, 346,
	347, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 189, 0, 0, 0, 0, 350, 0,
	0, 0, 0, 190, 191, 192, 351, 352, 353, 354,
	193, 355, 356, 0, 194, 357, 358, 195, 196, 0,
	0, 359, 360, 361, 0, 197, 362, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 416, 213, 363,
	214, 364, 365, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 366, 221,
	223, 222, 224, 367, 368, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 369, 370, 371, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 372, 0, 373, 0,
	0, 230, 231, 0, 0, 232, 233, 374, 375, 0,
	0, 376, 237, 0, 234, 0, 0, 235, 377, 236,
	378, 379, 380, 381, 382, 0, 383, 0, 0, 238,
	239, 240, 0, 384, 385, 241, 242, 243, 0, 245,
	244, 0, 386, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 387,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 388,
	260, 389, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 390, 0, 266, 0, 391, 267, 268, 269,
	270, 271, 0, 272, 392, 273, 393, 274, 0, 275,
	276, 277, 278, 279, 394, 280, 281, 0, 282, 283,
	284, 285, 286, 0, 288, 289, 287, 290, 291, 292,
	293, 0, 294, 0, 295, 296, 395, 297, 0, 508,
	302, 303, 304, 305, 0, 307, 396, 306, 308, 309,
	0, 310, 298, 299, 311, 0, 312, 397, 398, 313,
	0, 320, 314, 315, 300, 316, 319, 399, 317, 318,
	400, 0, 321, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 0, 401, 402, 403, 0, 0, 330, 331,
	404, 405, 0, 332, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 0, 406, 341, 342, 343,
	407, 408, 0, 505, 344, 184, 0, 0, 0, 345,
	346, 347, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 0, 189, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 0, 197, 362, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 0, 0, 232, 233, 374, 375,
	0, 0, 376, 237, 0, 234, 0, 0, 235, 377,
	236, 378, 379, 380, 381, 382, 0, 383, 0, 0,
	238, 239, 240, 0, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	387, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	388, 260, 389, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 0, 266, 0, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 394, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 0, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 0, 310, 298, 299, 311, 0, 312, 397, 398,
	313, 0, 320, 314, 315, 300, 316, 319, 399, 317,
	318, 400, 0, 321, 0, 322, 323, 324, 325, 326,
	327, 328, 329, 0, 401, 402, 403, 0, 0, 330,
	331, 404, 405, 0, 332, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 0, 406, 341, 342,
	343, 407, 408, 0, 497, 344, 184, 0, 0, 0,
	345, 346, 347, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 189, 0, 0, 0, 0,
	350, 0, 0, 0, 0, 190, 191, 192, 351, 352,
	353, 354, 193, 355, 356, 0, 194, 357, 358, 195,
	196, 0, 0, 359, 360, 361, 0, 197, 362, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 416,
	213, 363, 214, 364, 365, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	366, 221, 223, 222, 224, 367, 368, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 369, 370, 371, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 372, 0,
	373, 0, 0, 230, 231, 0, 0, 232, 233, 374,
	375, 0, 0, 376, 237, 0, 234, 0, 0, 235,
	377, 236, 378, 379, 380, 381, 382, 0, 383, 0,
	0, 238, 239, 240, 0, 384, 385, 241, 242, 243,
	0, 245, 244, 0, 386, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 387, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 388, 260, 389, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 390, 0, 266, 0, 391, 267,
	268, 269, 270, 271, 0, 272, 392, 273, 393, 274,
	0, 275, 276, 277, 278, 279, 394, 280, 281, 0,
	282, 283, 284, 285, 286, 0, 288, 289, 287, 290,
	291, 292, 293, 0, 294, 0, 295, 296, 395, 297,
	0, 301, 302, 303, 304, 305, 0, 307, 396, 306,
	308, 309, 0, 310, 298, 299, 311, 0, 312, 397,
	398, 313, 0, 320, 314, 315, 300, 316, 319, 399,
	317, 318, 400, 0, 321, 0, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 401, 402, 403, 0, 0,
	330, 331, 404, 405, 0, 332, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 0, 406, 341,
	342, 343, 407, 408, 0, 447, 344, 184, 0, 0,
	0, 345, 346, 347, 348, 349, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 189, 0, 0, 0,
	0, 350, 0, 0, 0, 0, 190, 191, 192, 351,
	352, 353, 354, 193, 355, 356, 0, 194, 357, 358,
	195, 196, 0, 0, 359, 360, 361, 0, 197, 362,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 363, 214, 364, 365, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 369, 370, 371,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 0, 0, 232, 233,
	374, 375, 0, 0, 376, 237, 0, 234, 0, 0,
	235, 377, 236, 378, 379, 380, 381, 382, 0, 383,
	0, 0, 238, 239, 240, 0, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 387, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 388, 260, 389, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 0, 266, 0, 391,
	267, 268, 269, 270, 271, 0, 272, 392, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 394, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 0, 295, 296, 395,
	297, 0, 301, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 0, 312,
	397, 398, 313, 0, 320, 314, 315, 300, 316, 319,
	399, 317, 318, 400, 0, 321, 0, 322, 323, 324,
	325, 326, 327, 328, 329, 0, 401, 402, 403, 0,
	0, 330, 331, 404, 405, 0, 332, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 0, 406,
	341, 342, 343, 407, 408, 184, 0, 344, 0, 0,
	0, 0, 345, 346, 347, 348, 349, 0, 0, 0,
	0, 187, 188, 0, 189, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 0, 197, 362, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 0, 0, 232, 233, 374, 375,
	0, 0, 376, 237, 0, 234, 0, 0, 235, 377,
	236, 378, 379, 380, 381, 382, 0, 383, 0, 0,
	238, 239, 240, 0, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	387, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	388, 260, 389, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 0, 266, 0, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 394, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 0, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 0, 310, 298, 299, 311, 0, 312, 397, 398,
	313, 0, 320, 314, 315, 300, 316, 319, 399, 317,
	318, 400, 0, 321, 0, 322, 323, 324, 325, 326,
	327, 328, 329, 0, 401, 402, 403, 0, 0, 330,
	331, 404, 405, 0, 332, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 0, 406, 341, 342,
	343, 407, 408, 184, 0, 344, 0, 0, 0, 0,
	345, 346, 347, 348, 349, 0, 0, 0, 0, 187,
	188, 0, 189, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 0, 197, 362, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 0, 0, 232, 233, 1975, 375, 0, 0,
	376, 237, 0, 234, 0, 0, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 0, 238, 239,
	240, 0, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 387, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 0, 266, 0, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 280, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 0, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 0, 312, 397, 398, 313, 0,
	320, 314, 315, 300, 316, 319, 399, 317, 318, 400,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 402, 403, 0, 0, 330, 331, 404,
	405, 0, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 0, 406, 341, 342, 343, 407,
	408, 184, 0, 344, 0, 0, 0, 0, 345, 346,
	347, 348, 349, 0, 0, 0, 0, 187, 188, 0,
	189, 0, 0, 0, 0, 350, 0, 0, 0, 0,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 197, 362, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	0, 0, 232, 233, 1973, 375, 0, 0, 376, 237,
	0, 234, 0, 0, 235, 377, 236, 378, 379, 380,
	381, 382, 0, 383, 0, 0, 238, 239, 240, 0,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 386,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 387, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 388, 260, 389, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	0, 266, 0, 391, 267, 268, 269, 270, 271, 0,
	272, 392, 273, 393, 274, 0, 275, 276, 277, 278,
	279, 394, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	0, 295, 296, 395, 297, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 0, 310, 298,
	299, 311, 0, 312, 397, 398, 313, 0, 320, 314,
	315, 300, 316, 319, 399, 317, 318, 400, 0, 321,
	0, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	401, 402, 403, 0, 0, 330, 331, 404, 405, 0,
	332, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 0, 406, 341, 342, 343, 407, 408, 184,
	0, 344, 0, 0, 0, 0, 345, 346, 347, 348,
	349, 0, 0, 0, 0, 187, 188, 0, 189, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 190, 191,
	192, 351, 352, 353, 354, 193, 355, 356, 0, 194,
	357, 358, 195, 196, 0, 0, 359, 360, 361, 0,
	197, 362, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 416, 213, 363, 214, 364, 365, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 366, 221, 223, 222, 224, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 369,
	370, 371, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 372, 0, 373, 0, 0, 230, 231, 0, 0,
	232, 233, 1962, 375, 0, 0, 376, 237, 0, 234,
	0, 0, 235, 377, 236, 378, 379, 380, 381, 382,
	0, 383, 0, 0, 238, 239, 240, 0, 384, 385,
	241, 242, 243, 0, 245, 244, 0, 386, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 387, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 388, 260, 389, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 390, 0, 266,
	0, 391, 267, 268, 269, 270, 271, 0, 272, 392,
	273, 393, 274, 0, 275, 276, 277, 278, 279, 394,
	280, 281, 0, 282, 283, 284, 285, 286, 0, 288,
	289, 287, 290, 291, 292, 293, 0, 294, 0, 295,
	296, 395, 297, 0, 301, 302, 303, 304, 305, 0,
	307, 396, 306, 308, 309, 0, 310, 298, 299, 311,
	0, 312, 397, 398, 313, 0, 320, 314, 315, 300,
	316, 319, 399, 317, 318, 400, 0, 321, 0, 322,
	323, 324, 325, 326, 327, 328, 329, 0, 401, 402,
	403, 0, 0, 330, 331, 404, 405, 0, 332, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	0, 406, 341, 342, 343, 407, 408, 184, 0, 344,
	0, 0, 0, 0, 345, 346, 347, 348, 349, 0,
	0, 0, 0, 187, 188, 0, 189, 0, 0, 0,
	0, 350, 0, 0, 0, 0, 190, 191, 192, 351,
	352, 353, 354, 193, 355, 356, 0, 194, 357, 358,
	195, 196, 0, 0, 359, 360, 361, 0, 197, 362,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	416, 213, 363, 214, 364, 365, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 366, 221, 223, 222, 224, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 369, 370, 371,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 372,
	0, 373, 0, 0, 230, 231, 0, 0, 232, 233,
	374, 375, 0, 0, 376, 237, 0, 234, 0, 0,
	235, 377, 236, 378, 379, 380, 381, 382, 0, 383,
	0, 0, 238, 239, 240, 0, 384, 385, 241, 242,
	243, 0, 245, 244, 0, 386, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 387, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 388, 260, 389, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 390, 0, 266, 0, 391,
	267, 268, 269, 270, 271, 0, 272, 392, 273, 393,
	274, 0, 275, 276, 277, 278, 279, 394, 280, 281,
	0, 282, 283, 284, 285, 286, 0, 288, 289, 287,
	290, 291, 292, 293, 0, 294, 0, 295, 296, 395,
	297, 0, 508, 302, 303, 304, 305, 0, 307, 396,
	306, 308, 309, 0, 310, 298, 299, 311, 0, 312,
	397, 398, 313, 0, 320, 314, 315, 300, 316, 319,
	399, 317, 318, 400, 0, 321, 0, 322, 323, 324,
	325, 326, 327, 328, 329, 0, 401, 402, 403, 0,
	0, 330, 331, 404, 405, 0, 332, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 0, 406,
	341, 342, 343, 407, 408, 184, 0, 344, 0, 0,
	0, 0, 345, 346, 347, 348, 349, 0, 0, 0,
	0, 187, 188, 0, 189, 0, 0, 0, 0, 350,
	0, 1283, 0, 0, 190, 191, 192, 351, 352, 353,
	354, 193, 355, 356, 0, 194, 357, 358, 195, 196,
	0, 0, 359, 360, 361, 0, 197, 362, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 416, 213,
	363, 214, 364, 365, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 366,
	221, 223, 222, 224, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 369, 370, 371, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 372, 0, 373,
	0, 0, 230, 231, 0, 0, 232, 233, 374, 375,
	0, 0, 376, 237, 0, 234, 0, 0, 235, 377,
	236, 378, 379, 380, 381, 382, 0, 383, 0, 0,
	238, 239, 240, 0, 384, 385, 241, 242, 243, 0,
	245, 244, 0, 386, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	387, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	388, 260, 389, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 390, 0, 266, 0, 391, 267, 268,
	269, 270, 271, 0, 272, 392, 273, 393, 274, 0,
	275, 276, 277, 278, 279, 394, 280, 281, 0, 282,
	283, 284, 285, 286, 0, 288, 289, 287, 290, 291,
	292, 293, 0, 294, 0, 295, 296, 395, 297, 0,
	301, 302, 303, 304, 305, 0, 307, 396, 306, 308,
	309, 0, 0, 298, 299, 311, 0, 312, 397, 398,
	313, 0, 320, 314, 315, 300, 316, 319, 399, 317,
	318, 400, 0, 321, 0, 322, 323, 324, 325, 326,
	327, 328, 329, 0, 401, 402, 403, 0, 0, 330,
	331, 404, 405, 0, 332, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 0, 406, 341, 342,
	343, 407, 408, 184, 0, 344, 0, 0, 0, 0,
	345, 346, 347, 348, 349, 0, 0, 0, 0, 187,
	188, 0, 189, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 190, 191, 192, 351, 352, 353, 354, 193,
	355, 356, 0, 194, 357, 358, 195, 196, 0, 0,
	359, 360, 361, 0, 197, 362, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 416, 213, 363, 214,
	364, 365, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 366, 221, 223,
	222, 224, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 369, 370, 371, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 372, 0, 373, 0, 0,
	230, 231, 0, 0, 232, 233, 374, 375, 0, 0,
	376, 237, 0, 234, 0, 0, 235, 377, 236, 378,
	379, 380, 381, 382, 0, 383, 0, 0, 238, 239,
	240, 0, 384, 385, 241, 242, 243, 0, 245, 244,
	0, 386, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 387, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 388, 260,
	389, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 390, 0, 266, 0, 391, 267, 268, 269, 270,
	271, 0, 272, 392, 273, 393, 274, 0, 275, 276,
	277, 278, 279, 394, 750, 281, 0, 282, 283, 284,
	285, 286, 0, 288, 289, 287, 290, 291, 292, 293,
	0, 294, 0, 295, 296, 395, 297, 0, 301, 302,
	303, 304, 305, 0, 307, 396, 306, 308, 309, 0,
	310, 298, 299, 311, 0, 312, 397, 398, 313, 0,
	320, 314, 315, 300, 316, 319, 399, 317, 318, 400,
	0, 321, 0, 322, 323, 324, 325, 326, 327, 328,
	329, 0, 401, 402, 403, 0, 0, 330, 331, 404,
	405, 0, 332, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 0, 406, 341, 342, 343, 407,
	408, 184, 0, 344, 0, 0, 0, 0, 345, 346,
	347, 348, 349, 0, 0, 0, 0, 187, 188, 0,
	189, 0, 0, 0, 0, 350, 0, 0, 0, 0,
	190, 191, 192, 351, 352, 353, 354, 193, 355, 356,
	0, 194, 357, 358, 195, 196, 0, 0, 359, 360,
	361, 0, 197, 362, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 416, 213, 363, 214, 364, 365,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 366, 221, 223, 222, 224,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 369, 370, 371, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 372, 0, 373, 0, 0, 230, 231,
	0, 0, 232, 233, 374, 375, 0, 0, 376, 237,
	0, 234, 0, 0, 235, 377, 236, 378, 379, 380,
	381, 382, 0, 383, 0, 0, 238, 239, 240, 0,
	384, 385, 241, 242, 243, 0, 245, 244, 0, 386,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 387, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 388, 260, 389, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 390,
	0, 266, 0, 391, 267, 268, 0, 270, 271, 0,
	272, 392, 273, 393, 274, 0, 275, 276, 277, 0,
	279, 394, 280, 281, 0, 282, 283, 284, 285, 286,
	0, 288, 289, 287, 290, 291, 292, 293, 0, 294,
	0, 295, 296, 395, 0, 0, 301, 302, 303, 304,
	305, 0, 307, 396, 306, 308, 309, 0, 310, 298,
	299, 311, 0, 312, 397, 398, 313, 0, 320, 314,
	315, 300, 316, 319, 399, 317, 318, 400, 0, 321,
	0, 322, 323, 324, 325, 326, 327, 328, 329, 0,
	401, 402, 403, 0, 0, 330, 331, 404, 405, 0,
	332, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 0, 406, 341, 342, 343, 407, 408, 0,
	0, 344, 0, 0, 0, 0, 345, 346, 347, 348,
	349, 1077, 1078, 0, 1107, 1108, 1109, 1117, 1118, 1119,
	0, 0, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 1121, 0, 0,
	0, 0, 0, 0, 0, 0, 1077, 1078, 0, 1107,
	1108, 1109, 1117, 1118, 1119, 0, 0, 0, 1079, 0,
	0, 0, 1110, 0, 1099, 0, 0, 0, 0, 1080,
	0, 1096, 1121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	1103, 1104, 1105, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1870, 1871, 0, 1888, 1889, 1890, 0,
	1114, 1122, 0, 0, 1102, 1103, 1104, 1105, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 1120,
	0, 0, 0, 0, 1077, 1078, 0, 1107, 1108, 1109,
	1117, 1118, 1119, 0, 0, 1114, 1122, 1112, 0, 0,
	1110, 0, 0, 0, 1100, 0, 1885, 1080, 0, 0,
	1121, 0, 0, 0, 1120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1111, 1079, 1112, 0, 0, 0, 0, 1099, 0, 1100,
	0, 0, 0, 0, 1096, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 1111, 0, 0, 0, 0,
	1876, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 1103, 1104, 1105, 1115, 0, 0, 1106,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1891, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 1114, 1122, 0, 0, 0, 0, 0,
	0, 1115, 0, 0, 0, 0, 1886, 0, 0, 0,
	0, 0, 1120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1112, 0, 0, 0, 0, 1113, 0, 1100, 1091, 1092,
	1098, 1097, 1093, 1094, 1095, 1116, 0, 1090, 1088, 1089,
	1081, 1082, 1083, 1084, 1086, 1087, 0, 0, 0, 0,
	0, 0, 0, 1111, 1862, 0, 0, 0, 0, 0,
	1113, 0, 0, 1091, 1092, 1098, 1097, 1093, 1094, 1095,
	1116, 1887, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086,
	1087, 0, 0, 0, 0, 2527, 0, 1106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 1077, 1078, 0, 1107,
	1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0, 1115,
	0, 0, 1110, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 1121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 1099,
	1882, 1883, 1884, 0, 0, 0, 1096, 0, 0, 1881,
	1879, 1880, 1872, 1873, 1874, 1875, 1877, 1878, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1113, 0,
	0, 1091, 1092, 1098, 1097, 1093, 1094, 1095, 1116, 0,
	1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 0,
	0, 0, 0, 2478, 1102, 1103, 1104, 1105, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 1077, 1078,
	0, 1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0,
	0, 0, 0, 0, 1110, 1114, 1122, 0, 0, 0,
	0, 1080, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 0,
	0, 1099, 1112, 0, 0, 0, 0, 0, 1096, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 1103, 1104, 1105,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 1106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 1114, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1115, 0, 0, 0, 0, 1120, 1077, 1078, 0,
	1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0,
	0, 0, 0, 1110, 1112, 0, 0, 0, 0, 0,
	1080, 1100, 0, 1121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1077, 1078, 0, 1107, 1108,
	1109, 1117, 1118, 1119, 1079, 0, 0, 1111, 0, 0,
	1099, 1110, 0, 0, 0, 0, 0, 1096, 1080, 0,
	1113, 1121, 0, 1091, 1092, 1098, 1097, 1093, 1094, 1095,
	1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086,
	1087, 1106, 1079, 0, 0, 2432, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1096, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 1103, 1104, 1105, 0,
	0, 0, 0, 1115, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1114, 1122, 0, 0,
	0, 0, 0, 1102, 1103, 1104, 1105, 0, 0, 0,
	0, 0, 1085, 0, 0, 1120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1112, 1114, 1122, 0, 0, 0, 0,
	1100, 0, 1113, 0, 0, 1091, 1092, 1098, 1097, 1093,
	1094, 1095, 1116, 1120, 1090, 1088, 1089, 1081, 1082, 1083,
	1084, 1086, 1087, 0, 0, 0, 1111, 2402, 0, 0,
	0, 1112, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1106, 0, 0, 0, 1111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 1077, 1078, 0, 1107, 1108, 1109, 1117, 1118, 1119,
	0, 0, 1115, 0, 0, 0, 0, 1110, 1106, 0,
	0, 0, 0, 0, 1080, 0, 0, 1121, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 0,
	1115, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 1096, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1113, 0, 0, 1091, 1092, 1098, 1097, 1093, 1094,
	1095, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084,
	1086, 1087, 0, 0, 0, 0, 2397, 0, 0, 1102,
	1103, 1104, 1105, 0, 0, 0, 0, 0, 1085, 1113,
	0, 0, 1091, 1092, 1098, 1097, 1093, 1094, 1095, 1116,
	0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087,
	1114, 1122, 0, 0, 2393, 0, 0, 1077, 1078, 0,
	1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0, 1120,
	0, 0, 0, 1110, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 1121, 0, 0, 0, 1112, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 1096, 0, 0,
	1111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 1103, 1104, 1105, 1101,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1077, 1078, 1115, 1107, 1108, 1109,
	1117, 1118, 1119, 0, 0, 0, 1114, 1122, 0, 0,
	1110, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	1121, 0, 0, 0, 0, 1120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 0, 1112, 0, 0, 0, 1099, 0, 0,
	1100, 0, 0, 0, 1096, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1113, 0, 0, 1091, 1092,
	1098, 1097, 1093, 1094, 1095, 1116, 1111, 1090, 1088, 1089,
	1081, 1082, 1083, 1084, 1086, 1087, 0, 0, 0, 0,
	2330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 1103, 1104, 1105, 0, 0, 0, 0,
	1106, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 1114, 1122, 0, 0, 0, 0, 0,
	1077, 1078, 1115, 1107, 1108, 1109, 1117, 1118, 1119, 0,
	0, 0, 1120, 0, 0, 0, 1110, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 1121, 0, 0, 0,
	1112, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1096, 0, 0, 1111, 0, 0, 0, 0, 0, 0,
	0, 1113, 0, 0, 1091, 1092, 1098, 1097, 1093, 1094,
	1095, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084,
	1086, 1087, 0, 0, 0, 0, 2296, 1106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 1103,
	1104, 1105, 1101, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1077, 1078, 1115,
	1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0, 1114,
	1122, 0, 0, 1110, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 1121, 0, 0, 0, 0, 1120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 0, 1112, 0, 0, 0,
	1099, 0, 0, 1100, 0, 0, 0, 1096, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1113, 0,
	0, 1091, 1092, 1098, 1097, 1093, 1094, 1095, 1116, 1111,
	1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 0,
	0, 0, 0, 2295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 1103, 1104, 1105, 0,
	0, 0, 0, 1106, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 1114, 1122, 0, 0,
	0, 0, 0, 1077, 1078, 1115, 1107, 1108, 1109, 1117,
	1118, 1119, 0, 0, 0, 1120, 0, 0, 0, 1110,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 1121,
	0, 0, 0, 1112, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 1096, 0, 0, 1111, 0, 0, 0,
	0, 0, 0, 0, 1113, 0, 0, 1091, 1092, 1098,
	1097, 1093, 1094, 1095, 1116, 0, 1090, 1088, 1089, 1081,
	1082, 1083, 1084, 1086, 1087, 0, 0, 0, 0, 2260,
	1106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 1103, 1104, 1105, 1101, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1077, 1078, 1115, 1107, 1108, 1109, 1117, 1118, 1119, 0,
	0, 0, 1114, 1122, 0, 0, 1110, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 1121, 0, 0, 0,
	0, 1120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 0, 1112,
	0, 0, 0, 1099, 0, 0, 1100, 0, 0, 0,
	1096, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1113, 0, 0, 1091, 1092, 1098, 1097, 1093, 1094,
	1095, 1116, 1111, 1090, 1088, 1089, 1081, 1082, 1083, 1084,
	1086, 1087, 0, 0, 0, 0, 2105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 1103,
	1104, 1105, 0, 0, 0, 0, 1106, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 1114,
	1122, 0, 0, 0, 0, 0, 1077, 1078, 1115, 1107,
	1108, 1109, 1117, 1118, 1119, 0, 0, 0, 1120, 0,
	0, 0, 1110, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 1121, 0, 0, 0, 1112, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 1096, 0, 0, 1111,
	0, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
	1091, 1092, 1098, 1097, 1093, 1094, 1095, 1116, 0, 1090,
	1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 0, 0,
	0, 0, 2081, 1106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 1103, 1104, 1105, 1101, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1114, 1122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1112, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1113, 0, 0, 1091, 1092, 1098,
	1097, 1093, 1094, 1095, 1116, 1111, 1090, 1088, 1089, 1081,
	1082, 1083, 1084, 1086, 1087, 0, 0, 0, 0, 1533,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 0, 1077, 1078, 0, 1107,
	1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0, 0,
	0, 1115, 1110, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 1121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 0, 0, 1091, 1092, 1098, 1097, 1093, 1094, 1095,
	1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086,
	1087, 0, 0, 1832, 1102, 1103, 1104, 1105, 0, 0,
	0, 0, 0, 1085, 2590, 0, 0, 0, 1077, 1078,
	0, 1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0,
	0, 0, 0, 0, 1110, 1114, 1122, 0, 0, 0,
	0, 1080, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 0,
	0, 1099, 1112, 0, 0, 0, 0, 0, 1096, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2589, 0, 0, 0, 0, 1102, 1103, 1104, 1105,
	0, 0, 0, 0, 0, 1085, 0, 1902, 0, 1106,
	1901, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 1114, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1115, 0, 0, 0, 0, 1120, 1077, 1078, 0,
	1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0,
	0, 0, 0, 1110, 1112, 0, 0, 0, 1805, 0,
	1080, 1100, 0, 1121, 0, 0, 0, 0, 0, 1630,
	0, 0, 0, 0, 0, 1077, 1078, 0, 1107, 1108,
	1109, 1117, 1118, 1119, 1079, 0, 0, 1111, 0, 0,
	1099, 1110, 0, 0, 0, 1629, 0, 1096, 1080, 0,
	1113, 1121, 0, 1091, 1092, 1098, 1097, 1093, 1094, 1095,
	1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086,
	1087, 1106, 1079, 0, 1806, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1096, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 1103, 1104, 1105, 0,
	0, 0, 0, 1115, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1114, 1122, 0, 0,
	0, 0, 0, 1102, 1103, 1104, 1105, 0, 0, 0,
	0, 0, 1085, 0, 0, 1120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1112, 1114, 1122, 0, 0, 0, 0,
	1100, 0, 1113, 0, 0, 1091, 1092, 1098, 1097, 1093,
	1094, 1095, 1116, 1120, 1090, 1088, 1089, 1081, 1082, 1083,
	1084, 1086, 1087, 0, 0, 0, 1111, 0, 0, 0,
	0, 1112, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1106, 0, 0, 0, 1111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 1077, 1078, 0, 1107, 1108, 1109, 1117, 1118, 1119,
	0, 0, 1115, 0, 0, 0, 0, 1110, 1106, 0,
	0, 0, 0, 0, 1080, 0, 0, 1121, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 0,
	1115, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 1096, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1113, 0, 0, 1091, 1092, 1098, 1097, 1093, 1094,
	1095, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084,
	1086, 1087, 0, 0, 0, 0, 0, 0, 0, 1102,
	1103, 1104, 1105, 0, 0, 0, 0, 0, 1085, 1113,
	0, 0, 1091, 1092, 1098, 1097, 1093, 1094, 1095, 1116,
	0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087,
	1114, 1122, 0, 0, 0, 0, 0, 1077, 1078, 0,
	1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0, 1120,
	0, 0, 0, 1110, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 1121, 0, 0, 0, 1112, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 1096, 0, 0,
	1111, 606, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 1103, 1104, 1105, 1101,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1077, 1078, 1115, 1107, 1108, 1109,
	1117, 1118, 1119, 0, 0, 0, 1114, 1122, 0, 0,
	1110, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	1121, 0, 0, 0, 0, 1120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 0, 1112, 0, 0, 0, 1099, 0, 0,
	1100, 0, 0, 0, 1096, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1113, 0, 0, 1091, 1092,
	1098, 1097, 1093, 1094, 1095, 1116, 1111, 1090, 1088, 1089,
	1081, 1082, 1083, 1084, 1086, 1087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 1103, 1104, 1105, 0, 0, 0, 0,
	1106, 1085, 0, 0, 0, 0, 1908, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 1114, 1122, 0, 0, 0, 0, 0,
	1077, 1078, 1115, 1107, 1108, 1109, 1117, 1118, 1119, 0,
	0, 0, 1120, 0, 0, 0, 1110, 0, 0, 0,
	1903, 0, 0, 1080, 0, 0, 1121, 0, 0, 2085,
	1112, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1096, 0, 0, 1111, 0, 0, 0, 0, 0, 0,
	0, 1113, 0, 0, 1091, 1092, 1098, 1097, 1093, 1094,
	1095, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084,
	1086, 1087, 0, 0, 0, 0, 0, 1106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 1103,
	1104, 1105, 1101, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1114,
	1122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1112, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1113, 0,
	0, 1091, 1092, 1098, 1097, 1093, 1094, 1095, 1116, 1111,
	1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 0,
	0, 0, 0, 0, 0, 0, 1077, 1078, 0, 1107,
	1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0, 0,
	0, 0, 1110, 1106, 0, 0, 0, 0, 0, 1080,
	0, 0, 1121, 0, 0, 0, 0, 0, 1101, 0,
	0, 1077, 1078, 0, 1107, 1108, 1109, 1117, 1118, 1119,
	0, 0, 0, 1079, 0, 1115, 0, 1110, 0, 1099,
	0, 1861, 0, 0, 1080, 0, 1096, 1121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 1096, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 1103, 1104, 1105, 0, 0,
	0, 0, 0, 1085, 1113, 0, 0, 1091, 1092, 1098,
	1097, 1093, 1094, 1095, 1116, 0, 1090, 1088, 1089, 1081,
	1082, 1083, 1084, 1086, 1087, 1114, 1122, 0, 0, 1102,
	1103, 1104, 1105, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 1120, 0, 0, 0, 0, 1077,
	1078, 0, 1107, 1108, 1109, 1117, 1118, 1119, 0, 0,
	1114, 1122, 1112, 0, 0, 1110, 0, 0, 0, 1100,
	0, 0, 1080, 0, 0, 1121, 0, 0, 0, 1120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1111, 1079, 1112, 0, 0,
	0, 0, 1099, 0, 1100, 0, 0, 0, 1868, 1096,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1106,
	1111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 1103, 1104,
	1105, 1115, 0, 0, 1106, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 1114, 1122,
	0, 0, 0, 0, 0, 0, 1115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1112, 0, 0, 0, 0,
	1113, 0, 1100, 1091, 1092, 1098, 1097, 1093, 1094, 1095,
	1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086,
	1087, 0, 0, 0, 0, 0, 0, 0, 1111, 0,
	0, 0, 0, 0, 0, 1113, 0, 0, 1091, 1092,
	1098, 1097, 1093, 1094, 1095, 1116, 0, 1090, 1088, 1089,
	1081, 1082, 1083, 1084, 1086, 1087, 0, 0, 0, 0,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 0, 1077,
	1078, 0, 1107, 1108, 1109, 1117, 1118, 1119, 0, 0,
	0, 0, 0, 0, 1115, 1110, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 1121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 1096,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1113, 0, 0, 1091, 1092, 1098, 1097,
	1093, 1094, 1095, 1116, 0, 1090, 1088, 1089, 1081, 1082,
	1083, 1084, 1086, 1087, 0, 0, 0, 1102, 1103, 1104,
	1105, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 1077, 1078, 0, 1107, 1108, 1109, 1117, 1118, 1119,
	0, 0, 0, 0, 0, 0, 0, 0, 1114, 1122,
	0, 0, 0, 0, 1080, 0, 0, 1121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1120, 0, 0,
	0, 0, 449, 0, 0, 0, 0, 0, 1079, 0,
	0, 0, 0, 0, 1099, 1112, 0, 0, 0, 0,
	0, 1096, 1100, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 1077, 1078, 38, 1107, 1108, 1109, 1117, 1118,
	1119, 0, 0, 0, 0, 0, 0, 41, 0, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 1121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	1103, 1104, 1105, 475, 0, 0, 0, 0, 1085, 1079,
	0, 0, 1106, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 1096, 0, 0, 0, 0, 1101, 0, 0,
	1114, 1122, 477, 0, 0, 0, 0, 0, 0, 53,
	0, 479, 54, 0, 1115, 0, 0, 0, 0, 1120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1112, 0, 0,
	1102, 1103, 1104, 1105, 1100, 56, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1114, 1122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1113, 0, 0, 1091, 1092, 1098, 1097,
	1093, 1094, 1095, 1116, 0, 1090, 1088, 1089, 1081, 1082,
	1083, 1084, 1086, 1087, 1106, 0, 0, 0, 1112, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 0, 0, 1115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 59, 0,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 1106, 0, 0, 0, 0,
	0, 478, 0, 0, 93, 0, 0, 0, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 1113, 0, 1115, 1091, 1092,
	1098, 1097, 1093, 1094, 1095, 1116, 1329, 1090, 1088, 1089,
	1081, 1082, 1083, 1084, 1086, 1087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 0, 0, 0, 0, 0, 0, 0, 139, 1337,
	1326, 1356, 1315, 1347, 1346, 140, 0, 1317, 1316, 0,
	0, 0, 0, 1358, 1357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 0, 450, 1091,
	1092, 1098, 1097, 1093, 1094, 1095, 1116, 0, 1090, 1088,
	1089, 1081, 1082, 1083, 1084, 1086, 1087, 0, 0, 0,
	0, 1352, 0, 1344, 1343, 0, 0, 0, 0, 0,
	0, 0, 1329, 1342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1341, 1339, 1340, 0,
	0, 0, 0, 0, 0, 1337, 1326, 1356, 1315, 1347,
	1346, 0, 0, 1317, 1316, 0, 0, 0, 0, 1358,
	1357, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	1330, 1328, 1331, 1332, 1333, 1334, 1335, 0, 1355, 0,
	0, 0, 0, 0, 0, 1319, 1318, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 0, 1344,
	1343, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 0, 0, 0, 1327, 0, 0,
	0, 0, 1341, 1339, 1340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 1325,
	1458, 1456, 1457, 1460, 1459, 0, 1330, 1328, 1331, 1332,
	1333, 1334, 1335, 0, 1355, 0, 0, 0, 546, 0,
	572, 1319, 1318, 0, 0, 0, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 551, 1336,
	1323, 0, 0, 0, 0, 0, 0, 1321, 0, 1360,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	0, 0, 1320, 1327, 0, 0, 1353, 1354, 0, 0,
	0, 550, 0, 0, 0, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 558, 559, 0, 0, 1324, 568,
	0, 0, 1338, 1359, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 0, 571, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 1360, 0, 0, 0, 0,
	0, 554, 0, 0, 0, 0, 0, 0, 1320, 0,
	0, 0, 1353, 1354, 0, 0, 0, 0, 0, 555,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1324, 0, 0, 562, 0, 1359,
	0, 0, 557, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 561, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 565, 575, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	566, 0, 0, 0, 570, 0, 0, 0, 0, 576,
	0, 0, 0, 0, 563, 567, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569,
}
var sqlPact = [...]int{

	3877, -1000, -6, -1000, -1000, -1000, 156, -1000, -1000, -1000,
	-1000, 155, 154, 153, -1000, 152, 150, 149, 148, 145,
	142, 141, 139, 134, 131, 129, -1000, 127, -1000, -1000,
	-1000, -1000, 126, 116, 115, -1000, 114, 1019, 22445, 113,
	109, 1511, -1000, 36771, 108, -1000, 1139, 27585, 915, 1278,
	-1000, 107, 1106, 36433, 43460, 2077, 1171, 1711, 36092, 22104,
	1701, 1416, 35751, -1000, -1000, 35410, 105, 102, 101, 100,
	99, -1000, -1000, 35069, 94, 93, 90, 88, 87, 86,
	85, 84, 83, 82, 80, 69, 68, 66, -1000, 60,
	59, 58, -1000, 44036, 55, 54, 51, 1158, 49, 48,
	47, 45, -1000, -1000, 916, 38, 36, 35, 34, 33,
	120, 32, 31, 28, 27, -1000, 963, 489, 2682, 8385,
	1066, 1062, 1051, 1046, 1021, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 38799,
	36771, 26, -42, 23, -1000, 2045, 663, 19658, 3877, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	27244, 26903, 24531, 34728, 34387, 6270, 771, -1000, -11, 23123,
	36771, -1000, 77, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15082, 14729, 559, 77, -1000, -1000, -1000, 34046,
	24179, 33705, 1558, 33364, -1000, -1000, 33023, -1000, -1000, 1866,
	1763, 1762, 26562, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 32685, 32344, 32003, 31662, 23827, 508, -1000, -1000, -1000,
	17898, -1000, -1000, -1000, -1000, 22, -1000, 21, 20, -1000,
	19, 18, 16, 15, 12, 10, -1000, 9, 6, -1000,
	5, 4, -1000, -2, -3, 1160, 1018, 1026, 31321, 864,
	1317, -1000, -1000, -8, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 36771, -1000, 15786, -1000, 506, -1000, 1671, -1000,
	15786, -1000, 1315, -1000, -1000, -1000, -1000, -1000, 36771, -1000,
	-1000, -1000, -1000, -1000, -1000, 2251, 1242, 499, 30980, -1000,
	1528, -1000, 601, 753, -1000, -1000, -1000, 9441, 163, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1735, 23475,
	1318, 2043, 1863, 2250, 1526, 1857, 1852, 1833, 1831, 1810,
	2247, 1032, 2245, 1809, 1042, 2243, 1796, 1290, 686, 2242,
	1663, 1662, -1000, -1000, -1000, -1000, 946, -1000, -1000, -1000,
	28937, -1000, -1000, -1000, -1000, -1000, -1000, 815, 921, -1000,
	-1000, -1000, -1000, -1000, 963, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1488, 2031, 2031, 2031, 2097, 296, 281, -1000,
	120, -1000, 1483, -1000, 1201, -1000, -1000, -1000, -1000, -1000,
	43029, -1000, -1000, 15786, 15786, 15786, 15786, 15786, 1162, 543,
	-1000, 496, 493, 7680, -1000, -1000, 2231, -1000, -1000, -1000,
	292, -1000, -1000, 15786, 77, -1000, -1000, -1000, -1000, 492,
	2238, -1000, 664, -1000, -1000, -1000, 608, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1699, 491, 488, 487,
	-1000, 477, -1000, -1000, 476, 470, 469, 467, 461, 460,
	452, 450, 447, 446, 445, 443, 442, 437, 436, 1052,
	-1000, 640, -1000, -1000, 640, 640, -1000, 419, 419, 420,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 419, -1000,
	-1000, -1000, 591, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 433, 1373, -1000, -1000, 1373,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 770, 38123, -17,
	36771, -1000, 432, -17, -1000, -1000, 430, -1000, 10849, 10849,
	-1000, -1000, -1000, -1000, -1000, 10145, 2523, -1000, 707, -139,
	293, 585, -1000, 18602, 21412, -1000, -1000, 1217, 1922, 868,
	-1000, 971, 1920, 497, -1000, 614, 1919, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1326, -1000, 1200,
	1912, -91, 1742, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 24869,
	23123, -11, -14, -1000, -1000, -1000, 5918, 43029, -1000, 43029,
	-1000, 842, 20360, 77, -1000, -1000, -1000, -1000, 429, 1400,
	611, 1397, -1000, 332, -1000, 30639, 611, 1390, -1000, -1000,
	-1000, 28937, -1000, 36771, -1000, 36771, -1000, 882, -1000, 38461,
	122, 1900, -1000, -1000, 122, 1877, -1000, 121, 1870, -1000,
	-1000, 1261, 1854, -1000, -45, 1851, -1000, -1000, -1000, 15786,
	-46, -1000, -1000, -1000, 663, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	30298, 22784, 1344, 590, 43029, 2152, 43868, 24869, 43029, 22784,
	-1000, -1000, 36771, -1000, 15786, -1000, 2150, 1329, -20, -1000,
	-1000, -1000, -1000, -1000, 1442, 1441, 756, 1096, 9441, 9441,
	1986, -1000, 158, 6270, -1000, -1000, -1000, -1000, 29957, -1000,
	-1000, -1000, 1167, 36771, -1000, -1000, 1696, -1000, 22784, 36771,
	-1000, 36771, -1000, 36771, -1000, 36771, -1000, 36771, -1000, -1000,
	-1000, -1000, -1000, 3561, -1000, 1695, -1000, -1000, 36771, -1000,
	1437, -1000, -1000, -1000, 29619, 29278, -1000, 962, 814, -1000,
	-1000, 130, -1000, 24869, 2056, 599, -1000, 1488, 1458, 1678,
	687, 1292, 1551, 14376, 1490, 15786, 120, -1000, -1000, 120,
	120, 9089, -1000, -1000, -1000, 36771, -1000, 43772, 43868, 6270,
	796, 15786, 15786, 15786, 15786, 15786, 15786, 15786, 15786, 15786,
	15786, 15786, 15786, 15786, 15786, 15786, 15786, 15786, 15786, 15786,
	15786, 15786, 15786, 15786, 15786, 15786, 15786, 15786, 15786, 15786,
	15786, 15786, 15786, 1415, 15786, 768, 15786, 15786, 15786, 15786,
	1452, 1142, 418, 1163, -1000, 2194, 2194, 2194, 43411, 43411,
	400, 543, -1000, 15786, -1000, 70, 15786, 281, 41270, -16,
	7328, -1000, -1000, -1000, 14024, 631, 43029, 77, 6622, -1000,
	2229, 863, 1708, 1616, 427, 556, 555, 553, 509, 15786,
	15786, 13672, 13319, 12966, 16490, 12613, 15786, 8032, 15786, 15786,
	15786, 15786, 12260, 11907, -1000, 424, -1000, -1000, -1000, -1000,
	2228, -1000, -1000, 2226, -1000, 789, 785, 2225, -1000, -20,
	-1000, 38123, -1000, 36771, -17, 2148, 36771, -1000, 95, -1000,
	41995, -1000, 95, -47, -1000, 1515, 1513, 20009, 1469, 1272,
	1272, 1272, -1000, 423, 532, 585, 5195, 11554, -1000, 27923,
	1212, 201, 269, 18250, 2523, -1000, 36771, -27, 1074, -1000,
	26221, 2051, 2041, 2006, 28937, 2118, 70, 2026, 1660, 765,
	28937, 1095, 24869, 2022, 761, 2112, 70, 1657, 759, 36771,
	6270, 2018, 583, -1000, 36771, -1000, -1000, -1000, 1654, -49,
	-1000, -1000, 25883, 2135, 1843, -1000, 1078, -1000, 1839, 2134,
	36771, 1310, 1387, -1000, -1000, 805, 1838, 623, 184, 2128,
	184, 20710, -1000, 36771, -1000, 36771, -1000, -1000, 36771, -1000,
	36771, -1000, 36771, 36771, -1000, 36771, 24869, 24869, -55, 43029,
	4139, 25545, 758, -1000, 665, 25883, 3615, -58, -1000, 656,
	-1000, -1000, -1000, -1000, 241, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 420, 1052, 419, 419, 419, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 591, -1000, -1000, 640, 640, 640, -1000,
	-1000, -70, 1653, 607, -60, 711, -20, -1000, 1373, -1000,
	1259, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2237, -1000, 2199, -1000, -1000, 2221,
	-21, -1000, -21, -1000, 6270, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 36771, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 615, -1000, -1000, -1000, -1000, -1000, -1000, 36771, 36771,
	36771, -1000, 28937, -1000, 1684, -1000, 2029, 1458, 1678, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 43029, -1000, 375,
	-1000, -1000, 43029, 986, 1545, -1000, 1545, -23, -1000, 41957,
	1507, 36771, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 598, 507, 507, 793, 793, 793, 793,
	2136, 3534, 1447, 3935, 4765, 4765, 4765, 4765, 4765, 4765,
	4765, 4765, 2885, 307, 307, 2885, 2885, 2885, 2885, 2885,
	4765, 4765, 4765, 43411, 43289, 722, 15786, 15786, 755, 1111,
	418, 722, 15786, 722, 722, 722, 722, -1000, 1155, -1000,
	-1000, -1000, -1000, 1652, 415, 16490, 16490, -1000, -1000, -1000,
	7680, 16842, -1000, -1000, -1000, -1000, 413, 15786, -1000, 41416,
	-222, 268, -56, -1000, 15786, 525, -92, -1000, 891, -1000,
	15786, -1000, 1, 15786, 15786, 15786, 267, -1000, 265, -1000,
	750, -1000, 747, 745, 742, -1000, 410, 1257, 409, 408,
	15786, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42901,
	39481, 261, -1000, 1650, -56, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 260, -1000, 258, -1000, 42866, -56, 257, 238,
	-1000, 16490, 16490, 16490, 7680, 406, 256, -1000, 41798, -1000,
	42640, 11201, 11201, 11201, 254, 42494, 15786, -56, 4694, 4572,
	4312, -67, -68, -1000, -74, -1000, 2219, -75, 253, 597,
	596, 252, -1000, -1000, 405, -76, 623, 10849, 19306, 6270,
	-1000, 623, 10145, -1000, 20009, 20009, 1336, 1493, 20009, -1000,
	-1000, -1000, -1000, 27923, 542, 585, 27923, -1000, 2218, 1449,
	251, -1000, -1000, -1000, 36771, 404, -1000, 585, 250, 1044,
	36771, 36771, 36771, -1000, -1000, 1375, 37785, 1357, 43868, 36771,
	-1000, 403, 395, 1498, 1491, 36771, 36771, 37447, 37109, 36771,
	980, 70, -1000, 594, 393, 36771, 965, 24869, 612, 592,
	36771, 70, -1000, 392, 36771, 950, -1000, 589, 1584, 1332,
	-1000, 840, 1646, 36771, 248, -77, -24, 43868, -1000, -1000,
	-1000, -1000, -1000, 36771, 475, 36771, 70, 36771, 24869, 24869,
	70, 36771, 1836, 1929, 566, 36771, 1551, 15786, 1239, -1000,
	18954, 655, 36771, 938, 76, -1000, -1000, -1000, 577, 36771,
	-1000, -1000, 122, 122, -1000, 121, 1261, -1000, -45, -1000,
	15786, -1000, -1000, 36771, 24869, -87, -1000, 673, 669, 666,
	-1000, 43868, -1000, 541, 706, -1000, 2203, 610, 36771, 9441,
	9441, -1000, 1525, -1000, -1000, 981, -1000, 1036, -1000, -1000,
	-1000, -1000, 9441, -1000, -28, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1033, -1000, -1000, -1000, 986, -1000, 15786, 2193,
	-1000, -1000, -1000, 9089, -1000, -1000, -1000, 36771, -138, 15786,
	722, 722, 15786, 16490, 16490, -1000, 722, -1000, -1000, -1000,
	-1000, -1000, 1645, 391, 15786, 43868, 4532, 3158, -95, -1000,
	15786, -25, -1000, 15786, -1000, 41143, -1000, -1000, 536, 1765,
	-1000, 15786, 42367, 247, 10497, -1000, 42221, -9, -9, -1000,
	2236, 1413, 1303, 995, 908, 2191, -1000, 21061, 628, 1277,
	40997, 43772, 43868, -1000, 15786, -1000, -1000, 1644, 15786, -1000,
	43772, 43868, 16490, 16490, 16490, 16490, 16490, 16490, 16490, 16490,
	16490, 16490, 16490, 16490, 16490, 16490, 16490, 16490, 16490, 16490,
	16490, 1495, 16490, 2184, 2184, 2184, -26, 15786, -1000, 1677,
	1644, 15786, 15786, 43868, 246, 245, 244, -1000, 15786, -56,
	15786, 15786, 15786, -1000, -1000, -1000, 243, -1000, 2189, -1000,
	-1000, -1000, -1000, 3615, -1000, 1606, -1000, -93, -1000, 2523,
	-1000, 1606, -1000, -1000, 1336, -1000, 388, 15786, 20009, -1000,
	524, -1000, -96, -1000, 27923, -1000, 521, -219, -1000, 574,
	-1000, 585, 387, 36771, 27923, -1000, -1000, -1000, 741, 740,
	1832, -1000, 1356, -1000, 659, -1000, 1210, 15786, 17546, 386,
	383, 1103, -1000, 1772, 1261, 1755, 1261, -1000, -27, 1072,
	-1000, 21763, 15786, -1000, 735, -1000, 1073, 21763, -1000, -1000,
	15786, -1000, 734, 21763, 610, 1638, 820, -1000, 829, -1000,
	1575, -1000, 25883, 381, 36771, 374, -1000, 370, -1000, 611,
	-1000, 368, 36771, 1451, 566, 25207, -1000, 611, 938, -1000,
	43029, -1000, 938, 8737, 2015, -104, -1000, -1000, -1000, 623,
	20710, 20009, 10145, -105, -1000, -1000, -1000, -1000, 43029, -28,
	1990, 1990, -1000, 2183, -1000, 518, 237, -1000, 28599, -28,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36771, 6270, 36771,
	36771, 1279, 40870, -1000, 2020, 6270, 2105, 722, 284, 202,
	15786, 43868, 43482, -107, 15786, 15786, -1000, 236, 15786, 517,
	43029, -1000, -1000, -1000, 43029, 15786, 2235, 15786, 235, 234,
	223, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 222,
	-1000, -1000, 39137, 15786, 221, -1000, 220, 215, 43029, 1677,
	43029, -1000, -1000, 534, 534, 903, 903, 903, 903, 2184,
	1218, 1505, 784, 490, 490, 490, 1005, 462, 462, 490,
	490, 490, 1634, 1457, 365, 39613, 15786, 213, -1000, -1000,
	43029, 43029, 212, -1000, -1000, -1000, -56, 335, 40724, 40597,
	-1000, 211, 208, 1602, 2090, -1000, 20009, 1602, -1000, 36771,
	43029, -1000, -139, -1000, 2180, -1000, -1000, 1449, -1000, 5561,
	27923, 36771, -110, -1000, 36771, 36771, 36771, 1749, -1000, 1541,
	-1000, 40451, -113, -1000, 320, 2067, 15786, -1000, -1000, 364,
	17546, 36771, -1000, 1478, 1518, 694, 36771, -1000, 36771, -1000,
	36771, 36771, 36771, -1000, 362, 77, -122, 36771, 24869, -1000,
	-123, 36771, -1000, -1000, 24869, 725, -1000, 1172, 1578, -1000,
	17546, 361, 36771, 25883, 2126, -1000, 17546, 1307, 1472, 566,
	25207, -1000, 805, -1000, -1000, -29, -1000, 347, 70, 938,
	-1000, -40, -1000, 572, 1971, -1000, 1969, 515, -1000, -1000,
	-41, 360, -1000, 570, 568, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2020, 15786, 15786, 43482, -124, -1000, 722, 722,
	-1000, 40225, -1000, 43029, -1000, 42221, -1000, -1000, -1000, -1000,
	1169, -1000, 40187, -1000, -1000, -1000, -1000, 16490, 1630, 359,
	43868, 40028, -1000, -1000, 15786, -1000, -1000, -1000, -1000, 609,
	15786, 15786, 2523, 609, -125, 585, -1000, -1000, -1000, 2178,
	-1000, -136, -1000, -1000, -1000, -1000, 36771, -1000, 36771, -1000,
	6270, 36771, 1628, 1346, -1000, -1000, 1484, 358, 16490, 36771,
	-1000, 1161, 17546, 2020, 77, 6270, 2020, 39906, 6622, -141,
	-142, 1341, -1000, 1337, 15786, -1000, 43868, 1261, 1261, -1000,
	721, 719, 15786, 718, -1000, -1000, 709, -1000, -45, 21763,
	-1000, -1000, 2088, 1178, -144, 17546, -147, 207, 70, -149,
	36771, -1000, 566, 25207, -1000, 1929, 1950, 36771, 2003, -1000,
	-1000, 357, 356, 353, -1000, 28261, 28261, 24869, 24869, -1000,
	722, 722, -1000, -1000, 206, 1277, 2085, -1000, 2870, 16490,
	43868, -150, -1000, 39644, -1000, 36771, 43029, -56, -1000, -1000,
	27923, 510, -1000, -1000, 1194, -1000, -1000, 36771, 1355, -1000,
	-1000, 15786, 39613, 351, 1575, 350, -1000, -1000, -1000, -1000,
	-1000, -1000, 2067, 1, -1000, 1009, -1000, -1000, 43029, 2061,
	-1000, -1000, 36771, 36771, -9, 345, 344, -1000, 1285, 36771,
	1161, -157, -1000, 1575, -1000, 1161, 343, 25207, -1000, 1451,
	800, -159, 36771, -1000, -1000, 6974, 24869, 24869, -1000, -160,
	-1000, -1000, -1000, 1180, 15786, 2870, -176, -1000, -1000, -48,
	-1000, 2123, -1000, -1000, -1000, -1000, 1738, 39516, 1421, 36771,
	-1000, 36771, 2020, 205, 36771, 662, 6270, -1000, -1000, 204,
	15786, 15786, 342, 341, 338, 1575, 1161, -1000, 1575, 17546,
	-1000, 1472, 881, -1000, 623, -1000, -178, -179, -1000, 203,
	16138, 16138, -56, -1000, 36771, 333, 1727, -1000, 1291, 1053,
	199, -181, -1000, -1000, 332, -1000, 15786, -1000, 2235, -184,
	-186, 36771, 36771, 36771, -1000, 1575, -1000, -187, -1000, 20710,
	-1000, 610, 610, -1000, -1000, -1000, 17194, 1221, 930, 41676,
	-1000, -1000, -1000, 36771, -1000, 1305, 1301, 912, -1000, -1000,
	-1000, -1000, -1000, 1421, 43029, -1000, -1000, -189, -192, -194,
	-1000, 1161, -169, -1000, -1000, 2157, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1958, -1000, 668, 1276, 1276, 1291, 309,
	308, 1209, 1575, -1000, 15434, -1000, 2164, -1000, -1000, 1485,
	-1000, -1000, 1157, 1129, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 186, 6270, 172, 6270, -1000, 647, -1000, 646,
	304, 1453, -61, 9793, 786, 337, -69, -1000, -195, -1000,
	43029, -1000, -1000, 294, -1000, 9793, 1157, -1000, 9793, 9793,
	-197, -1000, -1000, -200, -1000, -63, 1129, -143, -1000, -1000,
	1129, -1000,
}
var sqlPgo = [...]int{

	0, 2671, 2668, 1772, 2667, 2138, 2666, 2664, 2658, 2657,
	2122, 2652, 2651, 2646, 2644, 2641, 2640, 2639, 2636, 2635,
	2632, 2631, 2627, 2623, 2622, 2621, 2620, 2113, 2617, 2107,
	2616, 2609, 2607, 2603, 2600, 2595, 2593, 2090, 2591, 2590,
	2589, 2588, 2068, 2587, 2042, 2586, 2579, 2037, 2577, 2576,
	2573, 2010, 2572, 1993, 2569, 97, 113, 1991, 2565, 2561,
	1982, 1976, 1936, 2560, 1931, 2559, 2556, 1851, 1848, 2555,
	76, 2554, 2552, 2548, 1839, 1837, 2547, 2539, 2536, 155,
	2529, 1809, 2520, 2519, 2515, 2514, 2510, 2508, 2507, 2506,
	2505, 2504, 2501, 2500, 2499, 2498, 2493, 2488, 2487, 2485,
	2482, 163, 2481, 2479, 1804, 1801, 2475, 2473, 37, 32,
	22, 55, 25, 151, 2799, 139, 2472, 2470, 2465, 2462,
	2456, 2455, 31, 100, 99, 2454, 98, 2449, 2448, 51,
	38, 26, 18, 68, 94, 2442, 2440, 2089, 34, 2438,
	2435, 134, 2434, 30, 28, 2633, 158, 152, 114, 122,
	2432, 2429, 2427, 49, 123, 12, 5, 4, 7, 2,
	2426, 3, 1, 2425, 2424, 14, 89, 78, 2422, 91,
	86, 2421, 2417, 131, 2413, 61, 96, 1654, 105, 124,
	1127, 92, 2412, 62, 17, 64, 2409, 2405, 161, 40,
	2400, 33, 87, 154, 111, 2399, 53, 162, 136, 72,
	126, 142, 2398, 2397, 2394, 132, 2391, 121, 120, 2384,
	2383, 84, 2382, 102, 145, 2380, 153, 112, 2377, 2373,
	119, 2372, 127, 2370, 2369, 160, 146, 116, 20, 45,
	67, 11, 1649, 1648, 135, 88, 56, 52, 2367, 800,
	1164, 1315, 41, 104, 80, 57, 106, 58, 85, 147,
	29, 2366, 2364, 138, 2359, 2358, 2357, 2355, 2353, 103,
	2352, 2350, 23, 2349, 79, 42, 50, 110, 46, 70,
	130, 109, 157, 101, 2348, 73, 129, 2346, 264, 2345,
	2343, 1751, 118, 2340, 2339, 2338, 1717, 1619, 1540, 1027,
	2337, 2334, 1399, 1110, 2333, 2332, 81, 2331, 117, 107,
	90, 144, 156, 115, 2329, 128, 36, 2328, 71, 35,
	0, 326, 95, 2327, 125, 69, 2325, 2324, 2323, 2316,
	24, 10, 6, 8, 15, 13, 75, 27, 2314, 2313,
	133, 82, 65, 2311, 159, 2308, 2307, 2306, 43, 2305,
	21, 2292, 19, 2288, 2286, 16, 9, 2283, 2281, 149,
	2279, 93, 2275, 2104, 2274, 150, 2272, 2259, 1856, 2255,
	47, 108,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 10, 10, 9,
	9, 9, 11, 7, 7, 7, 7, 7, 13, 13,
	14, 23, 17, 25, 12, 20, 18, 16, 16, 22,
	22, 124, 124, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 121, 121,
	126, 126, 126, 128, 128, 125, 125, 120, 120, 27,
	27, 68, 68, 111, 61, 61, 61, 308, 308, 309,
	309, 107, 107, 108, 108, 108, 108, 109, 109, 110,
	110, 110, 35, 35, 35, 29, 29, 29, 29, 29,
	30, 30, 31, 31, 36, 36, 36, 36, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 44,
	44, 45, 45, 45, 45, 45, 45, 46, 46, 46,
	46, 47, 47, 47, 47, 47, 47, 47, 47, 52,
	52, 52, 50, 50, 50, 49, 49, 49, 48, 48,
	48, 51, 51, 51, 179, 179, 178, 178, 182, 182,
	53, 53, 53, 53, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 56, 56, 56, 56,
	56, 56, 56, 277, 277, 276, 54, 54, 251, 251,
	57, 57, 206, 206, 58, 58, 58, 58, 58, 59,
	59, 69, 69, 349, 349, 349, 353, 353, 354, 354,
	355, 355, 355, 355, 355, 355, 355, 351, 351, 64,
	64, 64, 64, 65, 65, 65, 66, 66, 106, 106,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 32,
	33, 75, 75, 75, 77, 74, 74, 74, 76, 76,
	76, 76, 78, 78, 79, 79, 79, 79, 79, 80,
	80, 302, 300, 300, 301, 301, 151, 151, 151, 151,
	151, 152, 152, 152, 307, 307, 307, 307, 307, 307,
	306, 306, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 93,
	93, 93, 101, 101, 101, 101, 101, 101, 101, 82,
	82, 87, 87, 87, 87, 87, 83, 83, 88, 88,
	89, 89, 90, 90, 90, 90, 90, 90, 84, 84,
	84, 84, 92, 92, 92, 92, 91, 91, 97, 97,
	97, 97, 97, 97, 94, 94, 94, 94, 95, 95,
	95, 98, 98, 98, 98, 85, 85, 86, 86, 99,
	99, 100, 100, 100, 100, 100, 96, 96, 96, 350,
	350, 352, 352, 62, 62, 40, 40, 41, 41, 153,
	153, 154, 154, 230, 230, 230, 230, 155, 155, 127,
	127, 127, 156, 156, 157, 157, 158, 158, 158, 160,
	160, 161, 161, 162, 162, 162, 159, 159, 159, 229,
	318, 318, 319, 319, 319, 319, 319, 319, 320, 320,
	320, 320, 320, 320, 320, 316, 316, 317, 314, 314,
	315, 315, 315, 315, 356, 356, 228, 228, 165, 165,
	321, 321, 321, 321, 322, 322, 322, 322, 322, 325,
	324, 323, 323, 323, 323, 323, 263, 263, 263, 103,
	103, 42, 42, 42, 133, 133, 43, 43, 39, 39,
	39, 210, 210, 169, 169, 268, 268, 268, 144, 144,
	122, 122, 122, 19, 21, 21, 15, 15, 15, 15,
	15, 15, 26, 26, 24, 24, 211, 211, 212, 212,
	63, 63, 67, 67, 72, 72, 102, 102, 102, 102,
	102, 102, 28, 28, 28, 28, 34, 34, 34, 34,
	71, 71, 358, 358, 140, 140, 140, 140, 141, 141,
	225, 225, 226, 226, 359, 359, 227, 227, 227, 135,
	134, 136, 136, 38, 38, 38, 129, 129, 130, 130,
	131, 131, 132, 132, 360, 360, 60, 60, 60, 105,
	105, 147, 147, 222, 222, 222, 224, 224, 223, 223,
	223, 196, 196, 196, 104, 104, 174, 174, 184, 184,
	185, 185, 274, 186, 186, 70, 70, 114, 114, 112,
	112, 112, 112, 112, 112, 112, 112, 113, 113, 113,
	115, 115, 115, 115, 115, 115, 115, 118, 118, 118,
	119, 119, 119, 117, 117, 331, 331, 331, 334, 334,
	330, 332, 332, 333, 333, 357, 357, 197, 197, 197,
	164, 163, 163, 167, 167, 166, 168, 168, 267, 267,
	267, 194, 194, 193, 193, 193, 193, 215, 215, 213,
	213, 214, 214, 218, 218, 219, 219, 219, 220, 220,
	221, 221, 192, 192, 247, 247, 217, 217, 216, 116,
	116, 116, 173, 173, 173, 175, 175, 237, 237, 237,
	238, 238, 236, 236, 236, 236, 269, 269, 269, 269,
	269, 269, 269, 269, 347, 347, 347, 348, 348, 266,
	266, 270, 270, 270, 270, 270, 270, 264, 264, 264,
	264, 265, 265, 275, 275, 200, 200, 200, 200, 198,
	198, 199, 199, 271, 271, 271, 271, 195, 195, 272,
	272, 272, 231, 231, 278, 278, 278, 296, 296, 172,
	172, 172, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 280, 280, 280, 280, 282, 282, 282,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 295, 295,
	295, 295, 295, 283, 283, 290, 290, 291, 291, 292,
	293, 284, 284, 285, 285, 286, 287, 294, 294, 294,
	294, 298, 298, 288, 288, 288, 288, 288, 289, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 208, 208, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 241, 241, 241,
	241, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 326, 326, 326, 326, 326, 326, 326, 326,
	328, 328, 329, 329, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 335, 335, 336, 336, 338, 338,
	339, 339, 340, 341, 341, 341, 342, 343, 343, 337,
	337, 344, 344, 344, 345, 345, 346, 346, 346, 346,
	346, 253, 253, 254, 255, 261, 261, 261, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 142, 142, 142, 142, 142, 181,
	181, 180, 180, 250, 250, 248, 248, 252, 252, 201,
	201, 297, 297, 297, 297, 297, 297, 297, 202, 202,
	202, 209, 203, 203, 204, 204, 204, 204, 204, 244,
	245, 205, 205, 205, 246, 246, 256, 260, 260, 259,
	258, 258, 257, 257, 234, 234, 235, 235, 233, 232,
	189, 189, 188, 188, 187, 187, 361, 361, 262, 262,
	190, 190, 191, 183, 183, 273, 273, 273, 273, 176,
	176, 149, 149, 177, 177, 145, 145, 148, 148, 146,
	146, 146, 146, 170, 170, 171, 171, 143, 143, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	299, 299, 299, 249, 137, 137, 137, 138, 138, 139,
	139, 304, 304, 304, 305, 305, 305, 305, 303, 303,
	303, 303, 303, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 7, 7, 7, 4, 12, 4,
	12, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 7,
	2, 6, 2, 1, 12, 12, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 4, 6, 7, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 1, 2, 7,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 3, 5, 3, 1, 3, 1, 2, 2, 3,
	2, 2, 5, 3, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 1, 5, 2, 3, 0,
	3, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	2, 6, 2, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 1,
	4, 6, 6, 3, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 3, 1, 3, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 3,
	3, 4, 4, 3, 4, 4, 4, 3, 2, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 2, 3, 3, 3, 2, 3, 4, 3,
	5, 3, 4, 5, 2, 3, 3, 3, 4, 2,
	3, 4, 3, 3, 3, 4, 4, 4, 4, 2,
	3, 7, 7, 7, 4, 5, 5, 5, 5, 2,
	0, 2, 0, 3, 2, 8, 10, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 1, 0, 9, 9, 6, 7, 5, 3,
	5, 1, 3, 1, 1, 1, 10, 11, 9, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	2, 4, 7, 3, 3, 0, 6, 3, 11, 14,
	4, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 8, 10,
	8, 10, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 3, 6,
	3, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 2, 0, 8, 3, 2, 0, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 4, 4, 2, 3, 5, 5, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 1, 0, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 1, 0, 2, 2,
	2, 3, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 6, 3,
	3, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 2,
	3, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 3,
	4, 1, 1, 1, 5, 1, 3, 3, 1, 3,
	3, 1, 3, 3, 1, 1, 3, 3, 1, 1,
	6, 6, 4, 3, 4, 3, 4, 3, 4, 4,
	3, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 5, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 381, -4, -27, -29, -32, -35,
	-36, -58, -44, -45, -46, -57, -53, -59, -60, -61,
	-62, -54, -68, -67, -69, -72, -70, -63, -64, -73,
	-81, -102, -103, -104, -105, -5, -10, 23, 34, -30,
	-31, 47, -33, 71, -42, -37, 73, 94, -333, 98,
	-47, -51, 102, 109, 112, 134, 145, 231, 237, 258,
	260, 262, 269, -112, -114, 256, -65, -66, -74, -75,
	-76, -77, -106, 281, -82, -83, -84, -85, -86, -87,
	-88, -89, -90, -91, -92, -93, -94, -95, -96, -97,
	-98, -99, -100, 284, -28, -34, -71, 323, -6, -7,
	-8, -9, -11, -21, 111, -38, -39, -40, -41, -43,
	-331, -48, -49, -50, -52, -115, -113, 378, 257, 332,
	35, 293, 61, 105, 264, -13, -14, -17, -16, -18,
	-15, -23, -25, -22, -24, -26, -19, -20, -12, 348,
	355, -118, -116, -117, -119, 274, 340, 303, 382, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 2,
	303, 343, 333, 87, 153, 242, -349, 2, -177, 303,
	87, -146, -137, 371, 4, -310, -312, 20, 21, 23,
	33, 34, 35, 40, 44, 47, 48, 55, 60, 61,
	62, 67, 64, 65, 66, 69, 71, 72, 75, 76,
	77, 85, 86, 88, 90, 94, 96, 98, 101, 102,
	104, 109, 111, 110, 112, 122, 123, 128, 130, 135,
	141, 142, 145, 146, 154, 157, 159, 152, 169, 170,
	171, 175, 176, 177, 180, 179, 184, 185, 188, 189,
	192, 194, 196, 197, 200, 198, 202, 203, 205, 204,
	210, 212, 213, 215, 218, 221, 224, 227, 228, 229,
	230, 231, 233, 235, 237, 239, 240, 241, 242, 243,
	245, 246, 248, 249, 250, 251, 252, 256, 254, 255,
	257, 258, 259, 260, 262, 264, 265, 267, 282, 283,
	294, 269, 270, 271, 272, 273, 277, 275, 278, 279,
	281, 284, 286, 289, 292, 293, 295, 298, 299, 296,
	291, 302, 304, 305, 306, 307, 308, 309, 310, 311,
	318, 319, 323, 324, 325, 326, 329, 330, 331, 332,
	334, 337, 338, 339, 344, 349, 350, 351, 352, 353,
	28, 36, 37, 38, 39, 41, 42, 45, 46, 51,
	52, 53, 56, 89, 91, 92, 108, 113, 114, 124,
	125, 126, 136, 138, 147, 148, 151, 158, 160, 161,
	162, 163, 164, 166, 173, 174, 182, 199, 209, 211,
	222, 226, 234, 236, 244, 266, 276, 287, 288, 297,
	300, 313, 314, 315, 320, 321, 336, 340, 341, 381,
	381, 2, 170, 241, -145, -137, 87, 381, 2, 303,
	333, 343, -210, 87, 328, -137, 237, 22, 2, 96,
	157, 331, 330, 22, 233, 275, 305, 307, 2, 381,
	2, 343, 303, 153, 87, 333, -137, 2, -56, 2,
	378, -55, -5, -37, -47, -57, -53, -10, -27, -29,
	-42, -44, -51, -61, -60, -62, -64, -68, -67, -70,
	-74, -75, -81, -104, -105, 73, 23, 102, 281, 111,
	-353, 2, 22, -354, -355, 73, 102, 134, 274, 157,
	96, 330, 303, 2, 170, 2, -137, 2, -349, 2,
	170, 2, -353, 2, -137, 2, -141, 2, 269, -137,
	381, 381, 381, 381, 381, 189, 55, 266, 278, -79,
	319, -78, 313, -302, -80, 2, -178, 200, -137, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 2, -101, 278, 34,
	55, 22, 60, 88, 135, 153, 154, 176, 68, 69,
	240, 189, 171, 318, 177, 279, 304, 319, 73, 334,
	308, 110, 4, 87, 200, 280, 313, 381, 381, 381,
	-357, 2, 303, 381, 381, 381, 381, 271, 284, 381,
	381, 381, 381, 381, -113, -115, -114, 381, 381, 381,
	381, -166, -167, 327, 165, 107, 220, -112, -114, 2,
	-331, -101, 278, 2, 55, 22, -300, 2, -262, 216,
	-239, 93, -241, 369, 370, 364, 206, 354, -253, -243,
	-256, 108, 266, 378, -145, -242, 384, 9, -328, -114,
	29, -254, -255, 49, -137, 7, 8, 5, 6, -143,
	-280, -249, -289, 322, 115, 208, -326, -327, 4, -310,
	-304, -281, -291, -285, -288, 166, 58, 79, 80, 83,
	81, 84, 280, 333, 50, 28, 113, 114, 226, 234,
	300, 320, 321, 147, 209, 148, 56, 136, 182, 101,
	37, 39, 41, 42, 51, 52, 89, 91, 92, 124,
	125, 126, 158, 160, 161, 162, 163, 164, 211, 244,
	287, 297, 314, 315, 341, -311, -292, -293, -286, -287,
	74, 116, 133, 156, 149, 168, 172, 183, 186, 195,
	201, 223, 225, 263, 285, -294, -358, 2, 319, 319,
	2, -358, 2, -358, 2, -140, 2, 319, 316, -334,
	245, -330, -137, -334, 381, 381, 383, 381, -163, -164,
	2, 22, 99, -191, 2, 378, -269, 2, 376, -271,
	-145, -114, -270, 378, 217, -3, 2, -271, 147, -145,
	2, -271, 147, -145, 2, -308, 147, -306, 9, -305,
	5, 4, -310, -312, -311, 58, 2, -137, 2, -148,
	147, -145, -303, 4, -310, -312, -311, -313, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 43, 49, 50,
	54, 57, 59, 68, 73, 78, 79, 81, 80, 82,
	83, 84, 93, 95, 97, 99, 100, 103, 105, 107,
	115, 117, 129, 131, 132, 134, 137, 139, 150, 153,
	155, 165, 167, 178, 181, 187, 190, 191, 206, 207,
	208, 214, 216, 217, 219, 220, 232, 238, 247, 261,
	274, 280, 290, 301, 303, 312, 316, 317, 322, 327,
	328, 333, 335, 342, 343, 345, 346, 347, 348, 316,
	383, -177, -170, -137, -233, -232, 380, -239, 2, -239,
	2, 132, 378, -188, -189, -232, -233, 2, -178, 147,
	-308, 147, 2, -178, 2, 153, -137, 147, 2, -137,
	22, 132, 2, 167, 2, 167, 2, -272, 2, -271,
	-179, 147, 2, -178, -179, 147, 2, -149, 147, 2,
	-148, -137, 147, 2, -309, 147, 2, -308, -206, 378,
	-277, 2, -276, -305, 340, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	278, 216, 383, -178, -239, -251, 378, 132, -239, 216,
	-137, 2, 282, 2, 378, -79, 53, 319, -226, 2,
	-227, -134, -135, -136, 169, 239, 243, 353, 316, 359,
	132, -300, -182, 380, -101, 2, -308, 2, 282, 2,
	240, 279, 55, 132, 2, 2, -350, 2, 216, 132,
	2, 132, 2, 132, 2, 132, 2, 132, 2, 2,
	240, 279, 2, 129, 2, 318, 2, 2, 132, 2,
	169, 239, 294, 2, 303, 343, 2, 132, 132, 353,
	2, -195, -271, 303, 353, 22, -166, -167, -216, -193,
	129, -213, -214, 187, 117, 214, -197, 22, 99, -197,
	-197, 44, 379, 379, -101, 282, 2, 10, 11, 57,
	33, 369, 370, 371, 372, 127, 373, 374, 367, 368,
	366, 357, 358, 361, 362, 363, 70, 360, 359, 63,
	193, 268, 118, 119, 120, 121, 253, 13, 14, 15,
	26, 219, 186, 354, 149, 285, 364, 16, 17, 18,
	168, 36, 150, -142, -150, -239, -239, -239, -239, -239,
	225, -187, -234, 376, -114, 378, 378, -114, -239, -180,
	378, 7, -114, -248, 376, -257, -239, -188, 378, 5,
	378, 5, -335, 349, 129, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 236, -298, 344, -298, -298, -282,
	378, -282, -283, 378, -282, 350, 355, 378, -225, -226,
	-225, 316, -141, 383, -334, -171, 378, -191, -183, -273,
	-239, 371, -183, -190, -262, 74, -200, 172, 201, 133,
	183, 263, 156, 7, -56, -236, 384, 378, 371, -266,
	355, -114, -270, 378, -269, -145, 378, -124, 254, -123,
	21, 23, 102, 338, 108, 291, 309, 111, 270, 254,
	108, 348, 108, 111, 254, 291, 309, 270, 254, 108,
	384, 111, -308, -146, 383, -303, 371, 295, 379, -176,
	-145, -189, 378, -165, 206, -133, -332, 348, 206, -165,
	378, -138, 147, 2, -137, -332, 206, -272, -147, -145,
	-147, 281, -137, 30, -126, 383, 48, 259, 108, -126,
	108, -126, 383, 108, -126, 108, 383, 108, -180, -239,
	379, 383, -349, -355, 73, 378, 30, -250, -278, -279,
	-281, -290, -284, -288, -289, 40, 46, 45, 174, 173,
	310, 199, 276, 288, 336, 151, 38, 215, 159, 4,
	158, 160, 161, 162, 163, 164, 287, 37, 244, 125,
	126, 124, 101, 92, 91, 211, 42, 41, -292, -293,
	-286, -287, 89, 314, 315, 166, 39, 52, 51, 341,
	297, -309, -349, -302, -180, 30, -226, 2, -359, 383,
	185, -152, 192, 205, 141, 217, 351, -307, 5, 4,
	-249, -263, 93, 189, -289, 8, 370, -299, 7, 369,
	-301, -300, -301, 77, 380, -303, -178, 22, 283, 2,
	-302, -352, 129, -349, -302, -302, -302, -302, -302, 278,
	-56, 129, -137, 185, -302, 2, -302, 2, 303, 153,
	303, -126, 383, -308, 64, 65, 353, -216, -193, -194,
	-193, -217, -216, 330, -214, -213, -218, -239, 22, -221,
	123, 202, -239, -241, -113, -113, -113, -168, -267, -239,
	238, 153, -302, -296, -278, -295, 249, 250, 248, 252,
	251, -278, -303, 313, -239, -239, -239, -239, -239, -239,
	-239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
	-239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
	-239, -239, -239, -239, -239, -239, 186, 149, 285, 36,
	150, -239, 316, -239, -239, -239, -239, 198, 206, 208,
	322, 115, 329, 99, 212, -361, 301, 32, -246, -114,
	378, -261, 27, 290, 22, -253, 266, 378, -234, -239,
	-235, -181, -180, 379, 383, -181, -252, -248, -260, -259,
	345, 379, -180, 342, 22, 99, 371, 2, 7, -207,
	352, 197, 90, 142, 196, -208, 273, -336, 122, 137,
	378, 379, 2, 379, 2, 379, 2, 379, 2, -239,
	-239, -201, 2, -297, -180, 4, 352, 197, 90, 142,
	196, 273, -201, 2, -202, 2, -239, -180, -203, -240,
	-241, 369, 370, 364, 378, 266, -204, 2, -239, -181,
	-239, 43, 181, 317, -205, -239, 132, -180, -239, -239,
	-239, -180, -180, 2, -180, 2, 378, 7, 7, 313,
	313, 7, -141, -330, 30, -170, -173, 383, 132, 30,
	4, -173, 383, 379, 172, 172, -269, -200, 172, -198,
	223, -198, -198, -347, 378, 377, -266, -303, 376, 385,
	-181, 2, -265, -264, 30, -137, 221, 379, -145, 383,
	316, -211, 68, 59, -229, 147, 59, -314, -137, 68,
	-315, 54, 328, 238, 131, -211, 68, -211, 68, 68,
	-271, 33, -70, 66, 132, 316, -271, 230, -308, 66,
	316, 33, -70, 132, 316, -148, -303, 66, -275, 356,
	-137, 132, 379, 383, -153, -170, -154, -137, -230, -229,
	-316, -317, -314, 153, 328, 116, 30, 108, 230, 108,
	30, 216, 206, -129, 306, 108, -231, 346, -222, -70,
	378, 93, 30, -222, -184, -185, -274, -186, -145, 378,
	-137, -178, -179, -179, -148, -149, -137, -308, -309, 379,
	383, -56, -276, 316, 335, -154, -55, 23, 73, 102,
	379, 383, -172, 29, 376, -207, 378, -275, 132, 359,
	316, 379, 319, -227, -151, 243, 289, 255, 277, 8,
	7, 7, 383, -303, -351, -137, 278, -56, -145, -148,
	-145, -271, 129, 65, -194, -217, -219, -299, 378, 370,
	-220, 266, 267, 383, -122, 31, 97, 175, -145, 353,
	-239, -239, 316, -361, 301, -246, -239, 198, 208, 322,
	115, 329, 99, 212, 132, 378, -240, -240, -180, -243,
	378, -180, 377, 387, 379, -239, 377, 377, 383, -258,
	-259, 103, -239, -167, 383, -166, -239, -180, -180, 379,
	379, 316, 316, 316, 316, 378, -341, 224, 378, 378,
	-239, 30, 383, 379, 132, 379, 379, -209, 232, 379,
	10, 11, 369, 370, 371, 372, 127, 373, 374, 367,
	368, 366, 357, 358, 359, 63, 193, 268, 13, 14,
	15, 168, 150, -240, -240, -240, -180, 378, 379, -244,
	-245, 132, 129, 30, -205, -205, -205, 379, 132, -180,
	383, 383, 383, 379, 379, 379, 7, 379, 383, 379,
	353, 353, 379, 378, 379, -231, -273, -175, 2, -269,
	-303, -231, -262, -269, -269, -199, 335, 216, 172, -269,
	-264, 379, -348, 7, -266, -265, 7, -238, -237, 130,
	204, 379, -137, 378, -266, 379, -123, -145, -137, -137,
	206, -229, 147, -128, 206, -278, -137, 378, 378, 175,
	175, -137, -137, 147, -137, 147, -137, -137, -124, 254,
	-70, 353, 378, -145, 254, -308, 348, 353, -137, -70,
	378, -137, 254, 353, -107, 146, 212, 295, 132, -145,
	379, 379, 383, -138, 153, -138, -70, -178, -308, -308,
	-70, -145, 108, -130, 104, -360, 359, -137, -215, -213,
	-239, -196, -224, 261, 216, -176, 340, -137, -196, -174,
	383, 132, 359, -176, -126, -126, -126, -126, -239, -351,
	-308, 379, -278, 376, 377, 7, 7, -110, 348, -351,
	-300, -300, -134, 326, 62, 243, -300, 383, 242, 87,
	303, -220, -239, -267, -145, 384, -239, -239, -240, -240,
	132, 378, -239, -250, 26, 26, 379, -181, 383, -235,
	-239, 379, -248, 105, -239, 312, 379, 342, -167, -167,
	-167, 5, 197, 142, 196, -208, 196, -208, -208, 7,
	-342, -137, 378, 346, -166, 379, -296, -278, -239, -244,
	-239, -296, -278, -240, -240, -240, -240, -240, -240, -240,
	-240, -240, -240, -240, -240, -240, -240, -240, -240, -240,
	-240, -240, 99, 206, 212, -240, 383, -181, -245, -244,
	-239, -239, -278, 379, 379, 379, -180, -239, -239, -239,
	379, 7, -55, -192, 137, -275, 383, -192, -199, 378,
	-239, -269, 377, 379, 383, -265, 377, 383, 386, 359,
	-266, 378, -170, -264, 316, 316, 108, 206, 337, -318,
	-315, -239, -169, -268, -137, -329, 378, -326, -327, -143,
	378, 378, -121, 102, 281, -212, 108, -126, 108, -126,
	316, -211, 68, -242, -143, -137, -180, 316, 230, -242,
	-180, 316, -242, -110, 132, 302, 295, -155, 152, -230,
	378, -138, 378, 378, -165, -133, 378, -137, -131, 180,
	-360, -306, -332, -196, -196, -183, 207, 67, 379, -231,
	-185, -175, -262, 379, -111, 75, -111, 7, 377, 379,
	-109, 218, -108, -137, 5, -137, -303, -137, -145, 217,
	379, -122, -303, 26, 26, -239, -250, 379, -239, -239,
	379, -239, 377, -239, 5, -239, 379, 379, 379, 379,
	-343, -137, -239, 379, 379, 379, -245, 132, 99, 212,
	378, -239, 379, 379, 383, 379, 379, 379, 379, -247,
	139, 44, -269, -247, -170, -236, 7, -237, -303, 376,
	-265, -170, 379, -137, -137, -229, 108, -319, 68, -320,
	57, 116, 73, 206, 208, 328, 238, 54, 93, 247,
	379, 379, 383, -144, -188, 57, -144, -239, 378, -169,
	-170, 206, 93, 206, 93, 86, 324, -137, -137, -145,
	-137, -137, 378, 379, -145, -308, 379, -137, -309, 313,
	-156, -157, 229, 150, -169, 378, -170, -153, 30, -169,
	216, -132, 179, -360, -306, -129, -223, 378, 216, -70,
	-196, 359, 86, 86, 377, 383, 378, 359, 359, -122,
	-239, -239, 379, 379, -167, -337, 229, 379, -240, 132,
	378, -250, 379, -239, -338, 347, -239, -180, -338, 379,
	-266, 7, 379, -229, -137, -303, -137, 116, 147, 208,
	175, 378, -240, -145, -228, -356, 72, 299, -268, -122,
	-303, -122, 379, -180, 379, 379, 208, 208, -239, -278,
	-126, -126, 316, 316, -180, 316, 316, -242, 44, 227,
	379, -169, 379, 379, -70, 379, -145, -360, -306, -130,
	100, -170, 68, -191, -114, 378, 378, 378, -108, -109,
	-308, -308, 379, -167, 44, -240, -250, 379, 379, -339,
	-340, -137, -265, 377, -320, -138, 206, -239, -139, 378,
	-155, 378, -144, -167, 247, -125, 57, -137, -137, -167,
	378, 378, 188, 242, -145, -228, 379, -155, -228, 378,
	-306, -131, 330, 207, 379, -137, -309, -309, 379, -344,
	242, 267, -180, 379, 383, 30, 108, 379, -321, 194,
	-137, -170, -122, 379, -145, -120, 335, -303, 379, -180,
	-180, 378, 378, 378, -155, -228, -155, -169, -132, 281,
	-231, 379, 379, 379, -345, -346, 36, 325, 77, -239,
	-345, -340, -342, 116, -322, -325, -324, 216, 133, 228,
	286, 379, 379, -165, -239, 379, 379, -170, -170, -170,
	-155, 379, -184, -110, -110, -346, 235, 128, 266, 235,
	128, -137, -324, 216, -325, 216, 330, 96, -321, 379,
	379, 379, -228, -231, 26, -323, 203, 259, 48, 281,
	-323, -322, 378, 378, -127, 48, 259, -155, -346, 20,
	208, 93, -158, 229, -159, 229, 379, -303, 379, -303,
	340, 340, -160, 378, 184, 383, -157, -156, -161, -162,
	-239, 93, 195, 311, -158, 378, 383, 379, 383, 378,
	-161, -158, -162, -161, 379, 379, 383, -157, -156, -159,
	383, -159,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 56, 0, 0, 155,
	157, 0, 319, 0, 164, 166, -2, 0, 0, 0,
	187, 188, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 685, -2, 0, 299, 301, 310, 312,
	314, 316, 317, 0, 362, 364, 366, 368, 370, 372,
	374, 376, 378, 380, 382, 384, 386, 388, 390, 391,
	393, 395, 397, 0, 606, 608, 610, -2, 59, 61,
	63, 65, 67, 77, 0, 168, 170, 172, 174, 177,
	723, 191, 193, 195, 197, -2, 734, 0, 0, 0,
	-2, 0, -2, -2, -2, 68, 69, 70, 71, 72,
	73, 83, 84, 85, 86, 75, 79, 80, 82, 0,
	0, 700, 702, 704, 706, -2, 0, 0, -2, 7,
	13, 15, 17, 20, 22, 24, 26, 28, 30, 32,
	34, 36, 38, 40, 43, 49, 51, 53, 57, 58,
	0, 0, 0, 0, 0, 0, 0, 130, 283, 0,
	1309, 1233, 1239, 1240, 1264, 1265, 1266, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
	1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326,
	1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
	1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
	1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
	1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
	1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
	1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
	1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
	1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
	1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
	1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
	1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 156,
	158, 159, 0, 0, 0, 1235, 1309, 165, 167, 0,
	0, 0, 0, 0, 571, 274, 1371, 276, 278, 0,
	0, 0, 0, 181, 182, 183, 184, 185, 186, 189,
	190, 0, 0, 0, 0, 0, 273, 271, 220, 221,
	0, 256, 257, 258, 259, 260, 262, 224, 226, 228,
	229, 231, 233, 235, 237, 239, 241, 242, 244, 246,
	247, 249, 251, 252, 254, 572, 0, 0, 0, 0,
	0, 280, 286, 287, 288, 290, 291, 292, 293, 294,
	295, 296, 0, 136, 0, 474, 269, 267, 0, 132,
	0, 603, 0, 282, 604, 605, 600, 601, 1398, 629,
	300, 302, 311, 313, 315, -2, -2, 1492, -2, 326,
	-2, 334, 1498, 0, 337, 338, 341, -2, 216, 363,
	365, 367, 369, 371, 373, 375, 377, 379, 381, 383,
	385, 387, 389, 392, 394, 396, 398, 399, 0, 0,
	0, 403, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, 0, 0, -2,
	0, 0, 402, 404, 405, 406, 0, 607, 609, 611,
	0, 560, 725, 60, 62, 64, 66, 0, 0, 169,
	171, 173, 175, 178, -2, 698, 699, 192, 194, 196,
	198, -2, 0, 729, 729, 729, 0, 0, 699, 697,
	0, 303, 0, 305, 0, 403, 308, 309, 342, 343,
	1218, 1219, 935, 0, 0, 0, 0, 0, 0, 1037,
	1039, 1463, 1492, 0, 1041, 1042, 0, 1044, 1046, 1047,
	0, 1050, 1051, 1203, 1235, 1249, 1250, 1251, 1252, 0,
	0, 1255, 0, 1257, 1258, 1259, 1105, 1061, -2, -2,
	1247, 863, 864, 865, 866, -2, 1506, 1065, 1068, 1071,
	1074, 1075, 1078, 1079, 0, 1447, 1464, 1465, 1488, 1489,
	1497, 1501, 1502, 1471, 1485, 1472, 1459, 1469, 1483, 1315,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1273, 897, 898, 903, 904,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
	1517, 1518, 1519, 1520, 1521, 906, 631, 613, 622, 631,
	615, 616, 617, 618, 619, 620, 621, 624, 0, 715,
	1377, 718, 1246, 716, 701, 703, 0, 705, 0, 0,
	709, 731, 730, 769, 770, 0, 713, 714, 724, 785,
	823, 800, 791, 0, 0, 2, 74, 0, 1471, 823,
	76, 0, 1471, 823, 78, 0, 1471, 137, 138, 360,
	361, 1274, 1275, 1276, 1277, 1506, 81, 0, 87, 0,
	1471, 1238, 0, 1278, 1279, 1280, 1281, 1282, 1522, 1523,
	1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
	1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
	1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553,
	1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563,
	1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
	1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
	1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 0,
	0, 284, 285, 1243, 1241, 1242, 0, 160, 161, 162,
	163, 0, 0, 1236, 1212, 1210, 1211, 176, 539, 1471,
	-2, 1471, 563, 539, 567, -2, 722, 1471, 645, 275,
	277, 0, 180, 0, 658, 0, 660, 0, 675, 829,
	122, 1471, 201, 214, 122, 1471, 204, 122, 1471, 207,
	1231, 122, 1471, 210, 211, 1471, 213, 139, 270, 0,
	0, -2, 263, 265, -2, 261, 225, 227, 230, 232,
	234, 236, 238, 240, 243, 245, 248, 250, 253, 255,
	-2, 0, 0, 0, 473, 0, 0, 0, 602, 0,
	628, 318, 0, 323, 0, 325, 1458, -2, -2, 329,
	632, 636, 637, 638, 0, 0, 0, 0, 0, 0,
	0, 339, 217, 0, 400, 401, 409, 410, 0, 413,
	434, 446, 0, 0, 417, 419, 472, 421, 0, 0,
	423, 0, 425, 0, 427, 0, 429, 0, 431, 433,
	435, 447, 437, 724, 439, 0, 441, 445, 0, 450,
	0, 452, 453, 454, 0, 0, 460, 0, 0, 407,
	408, 122, 827, 0, 0, 0, -2, 0, 742, 767,
	0, 745, 746, 0, 0, 0, 0, 727, 728, 0,
	0, 0, 687, 688, 304, 0, 307, 0, 0, 0,
	0, 1138, 1139, 1140, 1141, 1142, 1143, 1146, 1147, 1144,
	1145, 1148, 1149, 0, 0, 0, 0, 0, 1150, 0,
	0, 0, 0, 0, 0, 0, 0, 1151, 1152, 1153,
	0, 0, 1155, 0, 1157, 0, 0, 0, 0, 0,
	0, 1217, 0, 0, 1154, 940, 941, 942, 974, 975,
	0, 1038, 1214, 1207, 1040, 0, 1160, -2, 1161, 0,
	0, 1043, 1048, 1049, 1160, 0, 1202, -2, 0, 1254,
	0, 932, 1107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1183, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 882, 900, 911, 908, 907, 884,
	0, 883, 881, 0, 885, 0, 0, 0, 612, -2,
	614, 0, 626, 0, 717, 0, 0, 771, 774, 1223,
	1227, 1228, 774, 0, 1220, 0, 0, 0, 0, 820,
	820, 820, 818, 794, 0, 800, 0, -2, 824, 812,
	0, -2, 791, 0, 0, 825, 0, 88, 597, 101,
	0, 597, 597, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 814, 1234, 0, 1208, 1209, 152, 0, 0,
	1229, 1213, 480, 0, 0, 561, 0, 721, 0, 0,
	0, 0, 1471, 570, 1267, 647, 0, 833, 0, 661,
	0, 0, 830, 0, 199, 0, 120, 121, 0, 202,
	0, 205, 0, 0, 208, 0, 0, 0, 0, 1161,
	724, 0, 0, 289, 0, 0, 724, 0, 1163, 841,
	842, 843, 844, 845, 932, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 894, 0, 869, 869, 869, 886, 887, 895, 896,
	901, 902, 913, 914, 916, 918, 912, 912, 912, 909,
	910, 814, 0, 0, 0, 0, -2, 331, 0, 634,
	0, 639, 351, 352, 353, 641, 642, 335, 354, 355,
	356, 357, 358, 359, 0, 556, 0, 558, 1260, 0,
	332, 344, 333, 336, 0, 218, 411, 412, 414, 415,
	416, 420, 0, 469, 422, 424, 426, 428, 430, 438,
	442, 724, 448, 451, 455, 456, 457, 458, 0, 0,
	0, 559, 0, 320, 0, 464, 0, 742, 767, 691,
	741, 692, 766, 768, 743, 744, 749, 753, 754, 757,
	760, 761, 751, 935, 710, 711, 712, 735, 736, 582,
	0, 0, 306, 936, 837, 838, 888, 889, 890, 891,
	892, 937, 938, 0, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, -2, -2, -2, -2, -2, -2,
	-2, -2, 961, 962, 963, 964, 965, 966, 967, 968,
	-2, -2, -2, 972, 973, -2, 1156, 1158, 0, 1217,
	0, -2, 0, -2, -2, -2, -2, 986, 0, 988,
	991, 993, 995, 0, 0, 0, 0, 1216, 1005, 1194,
	0, 0, 1135, 1136, 1137, 990, 0, 0, 1215, 1206,
	0, 0, 1159, 1045, 0, 0, 0, 1167, 1201, 1197,
	0, 1052, 734, 0, 0, 0, 0, 1059, 0, 1263,
	919, 920, 921, 922, 923, 924, 933, 1115, 0, 0,
	0, 1066, 1067, 1069, 1070, 1072, 1073, 1076, 1077, 0,
	0, 0, 1083, 0, 1170, -2, -2, -2, -2, -2,
	-2, -2, 0, 1085, 0, 1087, 1161, 1180, 0, 0,
	1008, 0, 0, 0, 0, 1492, 0, 1090, 1161, 1188,
	0, 0, 0, 0, 0, 1161, 0, 1193, 0, 0,
	0, 0, 0, 1101, 0, 1103, 0, 0, 0, 0,
	0, 0, 625, 719, 0, 0, 833, 0, 0, 0,
	1226, 833, 0, 1222, 0, 0, 0, 0, 0, 815,
	819, 816, 817, 0, 0, 800, 812, 782, 0, 0,
	0, 789, 790, 811, 0, 810, 799, -2, 0, 0,
	0, 0, 0, 596, 103, 1471, 0, 124, 0, 0,
	529, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 1237, 0, 142, 0,
	1244, 0, 0, 0, 0, 0, 479, 1243, 481, 483,
	484, 485, 486, 1268, 0, 1268, 0, 0, 0, 0,
	0, 0, 0, 649, 655, 0, 748, 0, 673, 663,
	0, 0, 0, 673, 677, 678, 680, 681, 0, 0,
	831, 215, 122, 122, 1232, 122, 122, 140, 212, 272,
	0, 222, 264, 0, 0, 0, 266, 0, 0, 0,
	268, 0, 834, 836, 0, 846, 0, 151, 0, 0,
	0, 324, 0, 633, 640, 0, 348, 0, 350, 557,
	1262, 1261, 0, 219, 471, 297, 440, 443, 466, 467,
	468, 828, 0, 465, 695, 696, 0, 755, 0, 0,
	752, 758, 759, 0, 738, 580, 581, 0, 0, 0,
	-2, -2, 0, 0, 0, 1006, -2, 987, 989, 992,
	994, 996, 0, 0, 0, 0, 0, 0, 0, 1007,
	1160, 0, 1204, 1207, -2, 1162, 1165, 1166, 0, 0,
	1198, 0, 0, 0, 0, 733, 734, 734, 734, 1058,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 0,
	0, 0, 0, 1082, 0, 1084, 1086, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1011, 1012, 1013, 0, 1160, 1089, 1186,
	1187, 0, 0, 0, 0, 0, 0, 1095, 0, 1192,
	0, 0, 0, 1099, 1100, 1102, 0, 867, 0, 893,
	915, 917, 905, 724, 1245, 763, 1224, 814, 773, 775,
	1225, 763, 1221, 802, 0, 804, 0, 0, 0, 806,
	0, 795, 0, 797, 812, 787, 0, 0, 780, 0,
	779, 800, 808, 0, 0, 826, 102, 586, 0, 0,
	0, 105, 1471, 113, 0, 511, 0, 0, 0, 0,
	0, 599, 114, 1471, 122, 1471, 122, 115, 89, 597,
	90, 0, 0, 592, 0, 584, 0, 0, 583, 91,
	0, 594, 0, 0, 151, 0, 0, 153, 0, 1230,
	488, 538, 0, 0, 1268, 0, 477, 539, 564, -2,
	566, 0, 0, 651, 655, 0, 654, 722, 673, 747,
	832, 656, 673, 0, 0, 0, 665, 662, 659, 833,
	0, 0, 0, 0, 200, 203, 206, 209, 1162, 279,
	0, 0, 1164, 0, 839, 0, 0, 131, 0, 281,
	321, 322, 327, 346, 347, 349, 345, 0, 0, 0,
	0, 0, 0, 737, 582, 0, 939, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 1195, 0, 0, 0,
	1206, -2, 1168, 1196, 1200, 0, 1053, 0, 0, 0,
	0, 1256, 925, 926, 927, 928, 929, 930, 931, 0,
	1113, 1114, 1118, 0, 0, 1064, 0, 0, 1169, 1179,
	1181, 1009, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, -2, -2, -2, 1027, 1028, 1029, -2,
	-2, -2, 0, 0, 0, 1182, 0, 0, 1184, 1185,
	1189, 1190, 0, 1092, 1093, 1094, 1191, 0, 0, 0,
	899, 0, 0, 765, 0, 772, 0, 765, 803, 0,
	822, 805, 785, 796, 0, 793, 783, 0, 784, 0,
	812, 0, 0, 792, 0, 0, 0, 0, 123, 509,
	528, 0, 0, 573, 579, 579, 0, 1062, 1063, 0,
	0, 0, 107, 0, 0, 0, 0, 111, 0, 117,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 95,
	0, 0, 94, 129, 0, 0, 154, 493, 0, 482,
	0, 0, 0, 480, 0, 562, 0, 0, 653, 655,
	0, 646, 647, 179, 657, 671, 672, 670, 0, 673,
	679, 676, 682, 0, 0, 133, 0, 0, 840, 847,
	149, 1361, 147, 144, 146, 298, 461, 462, 463, 750,
	756, 739, 582, 0, 0, -2, 0, 999, -2, -2,
	1131, 1162, 1205, 1199, 1253, 734, 1054, 1056, 1057, 934,
	1120, 1117, 0, 1104, 1080, 1081, 1178, 0, 0, 0,
	0, 1162, 1133, 1091, 0, 1097, 1098, 868, 720, 1109,
	0, 0, 776, 1109, 0, 800, 798, 781, 777, 0,
	788, 0, 809, 588, 590, 104, 0, 510, 0, 513,
	0, 0, 0, 0, 519, 520, 0, 0, 0, 0,
	530, 537, 0, 582, 1248, 0, 582, 0, 0, 0,
	0, 0, 119, 0, 0, 598, 0, 122, 122, 587,
	0, 0, 0, 0, 593, 585, 0, 595, 141, 0,
	475, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 643, 655, 0, 648, 649, 0, 0, 0, 664,
	674, 0, 0, 0, 835, 0, 0, 0, 0, 740,
	-2, -2, 1000, 1132, 0, 734, 0, 1106, -2, 0,
	0, 0, 1134, 0, 707, 0, 764, 762, 708, 821,
	812, 0, 807, 106, 0, 514, 515, 1268, 0, 518,
	521, 0, 523, 1270, 488, 0, 534, 535, 574, 575,
	578, 576, 579, 734, 532, 0, 108, 109, 118, 126,
	110, 116, 0, 0, 734, 0, 0, 813, 0, 0,
	537, 0, 527, 488, 478, 537, 0, 0, 650, 651,
	0, 0, 0, 683, 684, 0, 0, 0, 148, 0,
	143, 145, 1055, 1123, 0, -2, 0, 1035, 1096, 1108,
	1110, 0, 786, 778, 512, 516, 0, 0, 543, 0,
	531, 0, 582, 0, 0, 128, 0, 589, 591, 0,
	0, 0, 0, 0, 0, 488, 537, 476, 488, 0,
	652, 653, 0, 667, 833, 669, 0, 0, 150, 0,
	0, 0, 1119, 1036, 0, 0, 0, 522, 548, 0,
	0, 0, 577, 1053, 539, 112, 0, 125, 0, 0,
	0, 0, 0, 0, 525, 488, 568, 0, 644, 0,
	668, 151, 151, 1116, 1121, 1124, -2, 1431, 1306, 0,
	1122, 1111, 1112, 0, 524, 544, 545, 0, 540, 541,
	542, 1269, 536, 543, 127, 98, 100, 0, 0, 0,
	526, 537, 833, 134, 135, 0, 1126, 1127, 1128, 1129,
	1130, 517, 546, 0, 547, 0, 0, 0, 548, 0,
	0, 491, 488, 666, 0, 549, 0, 552, 553, 0,
	550, 533, 0, 0, 487, 489, 490, 569, 1125, 551,
	554, 555, 0, 0, 0, 0, 494, 0, 495, 0,
	0, 0, 493, 0, 0, 0, 492, 498, 0, 501,
	503, 504, -2, 0, 496, 0, 0, 499, 0, 0,
	0, 497, 502, 0, 500, 493, 0, 492, 508, 506,
	0, 507,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 367, 3, 373, 368, 3,
	378, 379, 371, 369, 383, 370, 380, 372, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 387, 382,
	357, 359, 358, 361, 384, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 376, 3, 377, 374, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 385, 366, 386, 364,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 360,
	57700, 362, 57701, 363, 57702, 365, 57703, 375, 57704, 381,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:904
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:910
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:916
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:969
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:970
		{
			return helpWith(sqllex, "ALTER")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:976
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1013
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1033
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1045
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1068
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1094
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1100
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1106
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1115
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1124
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1193
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1216
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = nil
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = DropCascade
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = DropRestrict
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = DropDefault
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1288
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1289
		{
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			return unimplemented(sqllex, "alter using")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1293
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1320
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1346
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.str = "CSV"
		}
	case 134:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1453
		{
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1474
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1486
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1497
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			return helpWith(sqllex, "CREATE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1511
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1513
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1515
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1516
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1535
		{
			return helpWith(sqllex, "DELETE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1556
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1557
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1563
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1578
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1593
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1616
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1639
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1654
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1714
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			return helpWith(sqllex, "DELETE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1722
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			return helpWith(sqllex, "INSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1728
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1733
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1734
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1736
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1737
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1744
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1745
		{ /* SKIP DOC */
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1773
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1797
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1832
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			return helpWith(sqllex, "GRANT")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1872
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1950
		{
			return helpWith(sqllex, "RESET")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1951
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			return helpWith(sqllex, "RESET")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1977
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1982
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1985
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1989
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1990
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1992
		{ /* SKIP DOC */
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1993
		{ /* SKIP DOC */
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			return unimplemented(sqllex, "set local")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.expr()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2020
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2070
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2075
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2092
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2095
		{
			return unimplemented(sqllex, "set from current")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2097
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2107
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = Low
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = Normal
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = High
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2206
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2207
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2208
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2209
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2211
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2212
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2213
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2214
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2215
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2216
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2217
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2221
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2222
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2223
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SHOW")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.str = "client_encoding"
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2249
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2260
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2277
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2293
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2304
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2315
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2326
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2331
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2336
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2382
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2441
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2449
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2453
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2457
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2471
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2482
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2493
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2497
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2501
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2505
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2509
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2513
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2519
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2523
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2527
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2533
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2561
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2668
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2672
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = DropDefault
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2786
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2993
		{
			return unimplemented(sqllex, "match full")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2994
		{
			return unimplemented(sqllex, "match partial")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			return unimplemented(sqllex, "match simple")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2996
		{
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = NoAction
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = Restrict
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = Cascade
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = SetNull
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = SetDefault
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3082
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3097
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = nil
		}
	case 566:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3122
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3162
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = true
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = false
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3192
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3193
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3196
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3197
		{
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = Ascending
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = Descending
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 583:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3248
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3250
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = true
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = false
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3283
		{
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3284
		{
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3295
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3306
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3317
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3321
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3322
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3323
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3341
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3346
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3359
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3364
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3379
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3382
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3383
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.str = ""
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.str = ""
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3442
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3444
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = ReadOnly
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = ReadWrite
		}
	case 643:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3508
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.str = ""
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.str = ""
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.str = ""
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.str = ""
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3551
		{
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3552
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3576
		{
			return helpWith(sqllex, "INSERT")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3593
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3635
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3639
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3647
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 674:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3670
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3674
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3675
		{
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3812
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3847
		{
			return helpWith(sqllex, "SELECT")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3848
		{
			return helpWith(sqllex, "VALUES")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3849
		{
			return helpWith(sqllex, "TABLE")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3896
		{
			return helpWith(sqllex, "SELECT")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3940
		{
			return helpWith(sqllex, "TABLE")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3951
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3952
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3953
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3956
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3957
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3960
		{
			return unimplemented(sqllex, "cte")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3963
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3964
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3967
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3968
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3971
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3972
		{
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = true
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = false
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = false
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = true
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3995
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3996
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4050
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4074
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4126
		{
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4127
		{
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4130
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4131
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = false
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = true
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4202
		{
			return helpWith(sqllex, "VALUES")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4204
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4219
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &From{}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4241
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4259
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4286
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4323
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4348
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = nil
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4389
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4395
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = true
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = false
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.str = astFullJoin
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.str = astLeftJoin
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.str = astRightJoin
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.str = astInnerJoin
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4506
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4507
		{
		}
	case 821:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4593
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4607
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4615
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4639
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4650
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = jsonbColType
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = jsonColType
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4708
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4739
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4748
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = nil
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4813
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4909
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4941
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4980
		{
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4981
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = year
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = month
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = day
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = hour
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = minute
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = month
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = hour
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = minute
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = minute
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = nil
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = second
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5076
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5111
		{
			return unimplemented(sqllex, "at tz")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5188
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5192
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5196
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5204
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5208
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5236
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5244
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5264
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5268
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5272
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5276
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5284
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5288
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5292
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5296
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5316
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5385
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5421
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5425
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5429
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5433
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5437
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5441
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5445
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5453
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5457
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5461
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5477
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5481
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5485
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5489
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5493
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5501
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5505
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5509
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5513
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5517
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5521
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5558
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5596
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5604
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5611
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5612
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5625
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5636
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5652
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5653
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5657
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5666
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5675
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5677
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5681
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5684
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5685
		{
			return unimplemented(sqllex, "current role")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5694
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5696
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5715
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5720
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5722
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5725
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5731
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5734
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5735
		{
			return unimplemented(sqllex, "treat")
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5737
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5741
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5745
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5749
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5753
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5757
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5761
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5772
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5774
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5777
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5781
		{
			return unimplemented(sqllex, "within group")
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5782
		{
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5786
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5797
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5807
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5811
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5817
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5825
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5829
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5859
		{
			sqlVAL.str = ""
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5865
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5869
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5879
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5880
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5881
		{
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5884
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5885
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5891
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5892
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5893
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5894
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5895
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = Any
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = Some
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = All
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5941
		{
			sqlVAL.union.val = Plus
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = Minus
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = Mult
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = Div
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = Mod
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = Bitand
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = Bitor
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = Pow
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = Bitxor
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = LT
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = GT
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = EQ
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5954
		{
			sqlVAL.union.val = LE
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5955
		{
			sqlVAL.union.val = GE
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = NE
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5960
		{
			sqlVAL.union.val = Like
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = NotLike
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = ILike
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5963
		{
			sqlVAL.union.val = NotILike
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5981
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5985
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5995
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6021
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6025
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6089
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6093
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6097
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6101
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6105
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6111
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6117
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6123
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6127
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6131
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6137
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6152
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6159
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6169
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6175
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6179
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6186
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6192
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6196
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6203
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6209
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6215
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6221
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6225
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6231
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6235
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6241
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6245
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6250
		{
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6251
		{
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6260
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6266
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6270
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6279
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6285
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6289
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6295
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6304
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6308
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6312
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6320
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6324
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6330
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6334
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6340
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6344
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6355
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6359
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6365
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6369
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6382
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6386
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6390
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6394
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6400
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6404
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6410
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6413
		{
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6423
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6427
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6434
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6438
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6442
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6446
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6449
		{
			return unimplemented(sqllex, "func const")
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6451
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6455
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6458
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6460
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6464
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6468
		{
			sqlVAL.union.val = DNull
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6475
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6479
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6485
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6520
		{
			sqlVAL.str = ""
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6526
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6530
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
