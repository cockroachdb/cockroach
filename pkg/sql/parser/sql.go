// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:335
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT2VECTOR = 57480
const INT8 = 57481
const INT64 = 57482
const INTEGER = 57483
const INTERSECT = 57484
const INTERVAL = 57485
const INTO = 57486
const IS = 57487
const ISOLATION = 57488
const JOIN = 57489
const KEY = 57490
const KEYS = 57491
const LATERAL = 57492
const LC_CTYPE = 57493
const LC_COLLATE = 57494
const LEADING = 57495
const LEAST = 57496
const LEFT = 57497
const LEVEL = 57498
const LIKE = 57499
const LIMIT = 57500
const LOCAL = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const LOW = 57504
const LSHIFT = 57505
const MATCH = 57506
const MINUTE = 57507
const MONTH = 57508
const NAME = 57509
const NAMES = 57510
const NATURAL = 57511
const NEXT = 57512
const NO = 57513
const NO_INDEX_JOIN = 57514
const NORMAL = 57515
const NOT = 57516
const NOTHING = 57517
const NULL = 57518
const NULLIF = 57519
const NULLS = 57520
const NUMERIC = 57521
const OF = 57522
const OFF = 57523
const OFFSET = 57524
const OID = 57525
const ON = 57526
const ONLY = 57527
const OPTIONS = 57528
const OR = 57529
const ORDER = 57530
const ORDINALITY = 57531
const OUT = 57532
const OUTER = 57533
const OVER = 57534
const OVERLAPS = 57535
const OVERLAY = 57536
const PARENT = 57537
const PARTIAL = 57538
const PARTITION = 57539
const PASSWORD = 57540
const PLACING = 57541
const POSITION = 57542
const PRECEDING = 57543
const PRECISION = 57544
const PREPARE = 57545
const PRIMARY = 57546
const PRIORITY = 57547
const RANGE = 57548
const READ = 57549
const REAL = 57550
const RECURSIVE = 57551
const REF = 57552
const REFERENCES = 57553
const REGCLASS = 57554
const REGPROC = 57555
const REGPROCEDURE = 57556
const REGNAMESPACE = 57557
const REGTYPE = 57558
const RENAME = 57559
const REPEATABLE = 57560
const RELEASE = 57561
const RESTORE = 57562
const RESTRICT = 57563
const RETURNING = 57564
const REVOKE = 57565
const RIGHT = 57566
const ROLLBACK = 57567
const ROLLUP = 57568
const ROW = 57569
const ROWS = 57570
const RSHIFT = 57571
const STATUS = 57572
const SAVEPOINT = 57573
const SEARCH = 57574
const SECOND = 57575
const SELECT = 57576
const SERIAL = 57577
const SERIALIZABLE = 57578
const SESSION = 57579
const SESSION_USER = 57580
const SET = 57581
const SHOW = 57582
const SIMILAR = 57583
const SIMPLE = 57584
const SMALLINT = 57585
const SMALLSERIAL = 57586
const SNAPSHOT = 57587
const SOME = 57588
const SPLIT = 57589
const SQL = 57590
const START = 57591
const STDIN = 57592
const STRICT = 57593
const STRING = 57594
const STORING = 57595
const SUBSTRING = 57596
const SYMMETRIC = 57597
const SYSTEM = 57598
const TABLE = 57599
const TABLES = 57600
const TEMPLATE = 57601
const TEXT = 57602
const THEN = 57603
const TIME = 57604
const TIMESTAMP = 57605
const TIMESTAMPTZ = 57606
const TO = 57607
const TRAILING = 57608
const TRANSACTION = 57609
const TREAT = 57610
const TRIM = 57611
const TRUE = 57612
const TRUNCATE = 57613
const TYPE = 57614
const UNBOUNDED = 57615
const UNCOMMITTED = 57616
const UNION = 57617
const UNIQUE = 57618
const UNKNOWN = 57619
const UPDATE = 57620
const UPSERT = 57621
const USER = 57622
const USERS = 57623
const USING = 57624
const VALID = 57625
const VALIDATE = 57626
const VALUE = 57627
const VALUES = 57628
const VARCHAR = 57629
const VARIADIC = 57630
const VIEW = 57631
const VARYING = 57632
const WHEN = 57633
const WHERE = 57634
const WINDOW = 57635
const WITH = 57636
const WITHIN = 57637
const WITHOUT = 57638
const YEAR = 57639
const ZONE = 57640
const NOT_LA = 57641
const WITH_LA = 57642
const AS_LA = 57643
const POSTFIXOP = 57644
const UMINUS = 57645

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5309

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	322, 28,
	-2, 410,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	98, 393,
	142, 393,
	158, 393,
	182, 393,
	188, 393,
	275, 393,
	-2, 383,
	-1, 62,
	98, 392,
	142, 392,
	158, 392,
	182, 392,
	188, 392,
	275, 392,
	-2, 386,
	-1, 71,
	1, 28,
	322, 28,
	-2, 410,
	-1, 420,
	1, 191,
	322, 191,
	-2, 966,
	-1, 456,
	158, 420,
	182, 420,
	-2, 389,
	-1, 459,
	158, 419,
	182, 419,
	-2, 387,
	-1, 591,
	158, 419,
	182, 419,
	-2, 390,
	-1, 649,
	319, 900,
	-2, 893,
	-1, 650,
	319, 901,
	-2, 894,
	-1, 656,
	5, 570,
	319, 570,
	-2, 1069,
	-1, 680,
	5, 531,
	-2, 1043,
	-1, 681,
	5, 564,
	319, 564,
	-2, 1045,
	-1, 682,
	5, 539,
	-2, 1046,
	-1, 683,
	5, 538,
	-2, 1047,
	-1, 684,
	5, 564,
	319, 564,
	-2, 1050,
	-1, 685,
	5, 564,
	319, 564,
	-2, 1051,
	-1, 686,
	5, 565,
	-2, 1054,
	-1, 687,
	5, 525,
	-2, 1055,
	-1, 688,
	5, 525,
	-2, 1056,
	-1, 689,
	5, 546,
	-2, 1060,
	-1, 690,
	5, 526,
	-2, 1065,
	-1, 691,
	5, 527,
	-2, 1066,
	-1, 692,
	5, 528,
	-2, 1067,
	-1, 693,
	5, 529,
	-2, 1068,
	-1, 694,
	5, 525,
	-2, 1073,
	-1, 695,
	5, 532,
	-2, 1078,
	-1, 696,
	5, 530,
	-2, 1081,
	-1, 697,
	5, 562,
	319, 562,
	-2, 1083,
	-1, 698,
	5, 566,
	-2, 1086,
	-1, 699,
	5, 568,
	-2, 1087,
	-1, 700,
	5, 561,
	319, 561,
	-2, 1091,
	-1, 957,
	98, 393,
	142, 393,
	158, 393,
	182, 393,
	188, 393,
	275, 393,
	-2, 687,
	-1, 966,
	319, 878,
	-2, 866,
	-1, 1175,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 605,
	-1, 1176,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 606,
	-1, 1177,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 607,
	-1, 1181,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 611,
	-1, 1182,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 612,
	-1, 1183,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 613,
	-1, 1186,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 618,
	-1, 1192,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 620,
	-1, 1195,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 625,
	-1, 1196,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 626,
	-1, 1197,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 627,
	-1, 1223,
	193, 758,
	-2, 761,
	-1, 1252,
	115, 798,
	319, 900,
	-2, 893,
	-1, 1253,
	115, 799,
	-2, 1039,
	-1, 1254,
	115, 800,
	-2, 965,
	-1, 1255,
	115, 801,
	-2, 934,
	-1, 1256,
	115, 802,
	-2, 949,
	-1, 1257,
	115, 803,
	-2, 964,
	-1, 1258,
	115, 804,
	-2, 1007,
	-1, 1411,
	98, 393,
	142, 393,
	158, 393,
	182, 393,
	188, 393,
	275, 393,
	-2, 461,
	-1, 1416,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 619,
	-1, 1417,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 621,
	-1, 1422,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 622,
	-1, 1439,
	193, 757,
	-2, 760,
	-1, 1616,
	1, 462,
	68, 462,
	98, 462,
	116, 462,
	120, 462,
	122, 462,
	135, 462,
	142, 462,
	147, 462,
	155, 462,
	158, 462,
	169, 462,
	182, 462,
	184, 462,
	188, 462,
	222, 462,
	224, 462,
	275, 462,
	282, 462,
	292, 462,
	293, 462,
	301, 462,
	318, 462,
	320, 462,
	322, 462,
	323, 462,
	-2, 461,
	-1, 1620,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 623,
	-1, 1625,
	145, 0,
	-2, 637,
	-1, 1635,
	193, 759,
	-2, 762,
	-1, 1669,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 664,
	-1, 1670,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 665,
	-1, 1671,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 666,
	-1, 1675,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 670,
	-1, 1676,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 671,
	-1, 1677,
	13, 0,
	14, 0,
	15, 0,
	302, 0,
	303, 0,
	304, 0,
	-2, 672,
	-1, 1793,
	145, 0,
	-2, 638,
	-1, 1796,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 641,
	-1, 1797,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 643,
	-1, 1897,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 642,
	-1, 1898,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 644,
	-1, 1905,
	145, 0,
	-2, 673,
	-1, 1960,
	145, 0,
	-2, 674,
	-1, 2020,
	36, 0,
	129, 0,
	157, 0,
	241, 0,
	299, 0,
	-2, 1042,
}

const sqlNprod = 1186
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 26946

var sqlAct = [...]int{

	650, 2019, 1998, 1611, 2044, 1966, 1578, 2000, 1047, 1999,
	1409, 1837, 1281, 1055, 2018, 1139, 1646, 1855, 1882, 1750,
	1764, 460, 1782, 1114, 277, 770, 1588, 291, 875, 1866,
	84, 84, 84, 421, 48, 1751, 881, 467, 61, 1612,
	505, 1775, 293, 84, 84, 84, 1387, 641, 84, 481,
	1706, 84, 627, 1118, 1769, 1500, 279, 20, 733, 84,
	648, 647, 523, 1132, 1337, 754, 84, 84, 1389, 1594,
	84, 739, 1113, 84, 84, 84, 84, 1154, 61, 84,
	84, 610, 1117, 1221, 962, 1499, 1147, 1450, 1399, 877,
	716, 713, 838, 1146, 1331, 1056, 1603, 1011, 1020, 465,
	1394, 1231, 621, 496, 1208, 1151, 1039, 898, 1278, 61,
	1205, 1071, 1080, 831, 284, 27, 283, 16, 285, 8,
	1108, 1249, 743, 953, 718, 620, 611, 577, 20, 524,
	1148, 515, 518, 517, 996, 578, 1121, 1049, 1867, 903,
	1087, 470, 992, 62, 594, 593, 595, 76, 833, 408,
	643, 459, 399, 829, 511, 80, 747, 468, 598, 576,
	411, 1888, 1438, 1048, 1889, 756, 63, 290, 1052, 756,
	2035, 290, 2015, 736, 2006, 1865, 464, 736, 265, 1407,
	756, 1996, 1084, 464, 1077, 1349, 27, 1040, 16, 1990,
	8, 905, 736, 1989, 1348, 1090, 736, 1040, 771, 1962,
	478, 1954, 1077, 484, 736, 457, 491, 487, 447, 1397,
	1941, 60, 418, 1865, 1931, 60, 290, 736, 1947, 1043,
	28, 1470, 1471, 1926, 472, 1085, 1925, 1899, 456, 1442,
	1077, 29, 53, 1441, 1443, 906, 907, 39, 1090, 1896,
	1876, 39, 765, 1865, 904, 40, 728, 614, 1873, 40,
	1864, 736, 1842, 1865, 1841, 736, 55, 736, 909, 1043,
	60, 1397, 31, 1682, 60, 1086, 1083, 41, 1632, 1374,
	1009, 41, 1485, 84, 84, 84, 84, 84, 67, 527,
	908, 1819, 1798, 44, 1090, 1090, 39, 703, 1795, 1785,
	39, 1077, 1090, 56, 40, 1377, 1733, 43, 40, 1090,
	1732, 69, 1718, 1090, 1629, 736, 1225, 1090, 1138, 520,
	520, 1090, 1564, 465, 45, 1046, 41, 67, 1449, 1558,
	41, 1476, 1046, 1517, 1515, 1514, 1518, 1090, 1090, 1513,
	70, 1439, 1090, 1088, 1090, 914, 1102, 525, 65, 757,
	69, 606, 1376, 757, 66, 736, 1143, 1094, 1089, 736,
	1090, 1090, 1076, 1045, 757, 1077, 1046, 1008, 764, 870,
	1007, 765, 869, 64, 823, 822, 906, 907, 736, 70,
	494, 540, 477, 67, 1486, 1868, 71, 65, 67, 500,
	854, 560, 67, 66, 52, 2033, 2017, 1410, 52, 909,
	702, 2013, 2005, 1348, 1957, 84, 69, 1082, 1874, 904,
	42, 69, 1051, 512, 1824, 69, 504, 605, 1820, 521,
	84, 908, 1812, 84, 84, 1811, 58, 30, 1810, 1081,
	46, 1806, 57, 1805, 1804, 70, 1748, 67, 47, 1697,
	70, 67, 1692, 52, 70, 1691, 50, 52, 65, 1690,
	1487, 760, 65, 1742, 66, 755, 54, 84, 66, 84,
	69, 84, 84, 84, 69, 84, 873, 1640, 64, 1379,
	1616, 1593, 1568, 64, 1991, 1522, 914, 1618, 59, 1519,
	84, 1507, 1498, 1469, 1466, 1465, 1463, 1455, 592, 70,
	1454, 84, 709, 70, 584, 1375, 587, 65, 1295, 1408,
	1217, 65, 1246, 66, 527, 84, 1245, 66, 605, 604,
	969, 293, 527, 963, 84, 64, 502, 906, 907, 84,
	84, 84, 278, 84, 880, 1648, 64, 1481, 1478, 1479,
	1480, 1472, 1473, 1474, 1475, 1477, 1979, 708, 737, 1944,
	909, 1924, 84, 84, 1918, 910, 911, 912, 913, 915,
	84, 935, 84, 548, 591, 745, 1916, 1907, 1892, 815,
	1885, 549, 908, 527, 527, 1871, 707, 1862, 1834, 821,
	1817, 293, 84, 1787, 84, 84, 84, 84, 84, 84,
	84, 1758, 1738, 543, 545, 84, 84, 1624, 1741, 583,
	1586, 84, 1218, 1584, 759, 1583, 732, 762, 855, 84,
	1581, 1534, 1533, 1566, 740, 1497, 581, 906, 907, 906,
	907, 579, 1459, 1458, 1435, 1430, 1210, 84, 1364, 1322,
	84, 457, 1321, 1309, 906, 907, 879, 1308, 1288, 1244,
	909, 601, 602, 1142, 997, 1470, 1471, 607, 1000, 1004,
	990, 989, 988, 902, 456, 1470, 1471, 909, 959, 512,
	987, 500, 908, 986, 908, 985, 1309, 984, 872, 983,
	735, 982, 981, 980, 979, 978, 977, 976, 975, 908,
	465, 974, 766, 746, 967, 655, 768, 749, 912, 913,
	915, 956, 935, 64, 874, 709, 482, 609, 546, 884,
	536, 534, 1800, 1470, 1471, 777, 1789, 817, 1747, 819,
	1746, 963, 1358, 818, 906, 907, 1357, 914, 954, 1928,
	1890, 1390, 1745, 554, 851, 1350, 850, 844, 1040, 1084,
	503, 859, 84, 1410, 914, 1521, 1520, 724, 849, 848,
	84, 842, 839, 1002, 84, 1476, 1415, 1003, 84, 84,
	871, 570, 84, 555, 972, 1476, 878, 84, 886, 1332,
	888, 887, 457, 1770, 1048, 457, 457, 1649, 900, 1446,
	924, 84, 1085, 84, 84, 454, 84, 1232, 993, 84,
	1344, 84, 84, 1528, 84, 894, 527, 924, 895, 896,
	1264, 574, 1972, 1014, 856, 966, 1930, 860, 861, 862,
	863, 864, 709, 1476, 2030, 2031, 273, 867, 868, 1068,
	463, 1726, 1086, 1083, 1065, 520, 74, 520, 446, 852,
	445, 1370, 61, 575, 1050, 1093, 1050, 61, 440, 441,
	1850, 1013, 1849, 935, 970, 1549, 925, 1545, 1025, 1027,
	1548, 1525, 803, 998, 525, 1013, 1072, 994, 995, 1001,
	1021, 1012, 1524, 925, 462, 719, 1486, 720, 1418, 274,
	1363, 1470, 1471, 1362, 1361, 893, 1042, 1005, 1360, 73,
	719, 1133, 720, 552, 1030, 293, 1017, 809, 1193, 84,
	1088, 1034, 1038, 1203, 1091, 1037, 449, 1036, 1033, 1737,
	580, 493, 1292, 853, 84, 84, 1291, 1201, 269, 1929,
	464, 84, 1107, 1164, 1074, 532, 1073, 1054, 1075, 1063,
	1064, 1024, 553, 1552, 1066, 1069, 1067, 910, 911, 912,
	913, 915, 1487, 935, 1565, 935, 84, 721, 1554, 84,
	1839, 1334, 1144, 918, 910, 911, 912, 913, 915, 741,
	935, 725, 721, 1207, 1082, 802, 270, 1474, 1475, 1477,
	726, 1573, 998, 450, 1001, 1472, 1473, 1474, 1475, 1477,
	400, 1476, 1163, 1214, 293, 1207, 1232, 1199, 1212, 1198,
	1536, 1096, 455, 1204, 995, 994, 451, 1977, 1095, 750,
	725, 405, 1470, 1471, 275, 452, 401, 461, 1088, 1222,
	719, 1215, 720, 2041, 72, 2030, 1226, 1136, 1137, 1338,
	1234, 1023, 1480, 1472, 1473, 1474, 1475, 1477, 2052, 1556,
	402, 1251, 1251, 1262, 1486, 1273, 276, 705, 1111, 1088,
	935, 1285, 1286, 1287, 1112, 1110, 75, 745, 1398, 404,
	531, 84, 84, 84, 1294, 1369, 1346, 84, 1427, 1543,
	84, 1327, 906, 907, 843, 840, 84, 84, 84, 84,
	84, 1145, 1425, 1010, 84, 756, 1342, 84, 84, 2002,
	1570, 1324, 721, 1200, 527, 909, 1320, 84, 1229, 730,
	1202, 729, 84, 1022, 84, 1371, 1402, 777, 777, 1993,
	1487, 84, 1476, 1190, 551, 1919, 991, 908, 272, 271,
	1302, 84, 1128, 923, 1338, 1405, 1219, 1216, 1903, 951,
	1571, 1994, 1239, 397, 1863, 1714, 465, 1400, 571, 2040,
	1457, 1098, 84, 84, 1604, 1403, 1537, 1840, 722, 1296,
	2047, 1259, 1100, 527, 1423, 1155, 1162, 403, 1428, 1401,
	464, 550, 1553, 722, 1340, 1486, 704, 1715, 1615, 2003,
	1101, 1319, 914, 84, 1777, 84, 597, 84, 400, 1099,
	1352, 84, 1353, 1354, 1297, 84, 1333, 1481, 1478, 1479,
	1480, 1472, 1473, 1474, 1475, 1477, 1420, 572, 1088, 405,
	2001, 406, 2029, 84, 401, 2027, 1188, 1191, 1763, 1378,
	1382, 1380, 2053, 1130, 1404, 2004, 717, 1213, 1206, 777,
	551, 1402, 573, 563, 1343, 924, 541, 539, 402, 2039,
	61, 1487, 1381, 1351, 1187, 1678, 1384, 465, 1815, 1330,
	1405, 596, 2058, 1844, 803, 803, 1843, 404, 1424, 1072,
	776, 1355, 1602, 1913, 1832, 1426, 1710, 1725, 1711, 757,
	1403, 1722, 1366, 1367, 1724, 597, 1372, 1306, 1527, 1373,
	1305, 1368, 1776, 1433, 2045, 1301, 1131, 1783, 777, 1265,
	885, 1436, 876, 722, 1569, 828, 1713, 1967, 1714, 1413,
	1707, 925, 596, 1716, 866, 465, 1392, 824, 1705, 1452,
	1453, 652, 1709, 1396, 1393, 1589, 1448, 1074, 1412, 1073,
	1765, 1075, 1472, 1473, 1474, 1475, 1477, 777, 1189, 1679,
	1715, 1833, 1311, 826, 2046, 1680, 1356, 1778, 1816, 1404,
	1310, 1398, 1496, 2057, 827, 1599, 1784, 1598, 550, 510,
	1708, 509, 2048, 1509, 462, 403, 1421, 802, 802, 588,
	1721, 1419, 1579, 1723, 465, 1749, 803, 1329, 1712, 1830,
	84, 1595, 1395, 1243, 1434, 1306, 1906, 1814, 919, 916,
	917, 918, 910, 911, 912, 913, 915, 1501, 935, 1402,
	1623, 1831, 1445, 1532, 1546, 1547, 1551, 1464, 1429, 406,
	1335, 1092, 1044, 569, 568, 567, 566, 565, 1405, 84,
	84, 564, 561, 508, 501, 1502, 1560, 973, 858, 1710,
	1400, 1711, 1242, 1997, 1414, 803, 1964, 1703, 1403, 1541,
	1539, 1526, 1386, 1134, 1126, 84, 1070, 763, 84, 761,
	84, 1540, 1401, 1542, 1504, 1505, 1506, 84, 758, 1713,
	527, 753, 731, 727, 723, 1523, 1716, 1637, 84, 1388,
	1857, 84, 2031, 599, 803, 3, 1530, 1140, 293, 802,
	84, 1585, 475, 846, 507, 506, 1582, 1607, 1544, 636,
	1555, 1610, 1859, 1550, 1013, 557, 1013, 77, 1559, 1029,
	1028, 1959, 1026, 1557, 1868, 1608, 396, 1404, 1921, 1617,
	288, 23, 1563, 1562, 1561, 1596, 1319, 603, 1630, 81,
	81, 267, 61, 1265, 1265, 1032, 1626, 1590, 84, 1031,
	1580, 1712, 391, 392, 393, 1141, 1948, 410, 802, 1761,
	422, 600, 1129, 1642, 1643, 1644, 1125, 483, 410, 1053,
	476, 1592, 1591, 407, 1597, 471, 471, 1600, 901, 267,
	1601, 820, 267, 267, 490, 267, 498, 499, 81, 497,
	1605, 1606, 1572, 1574, 1575, 558, 495, 802, 769, 439,
	1683, 1079, 23, 2055, 1265, 1265, 1265, 286, 22, 2056,
	1698, 1693, 1633, 287, 11, 84, 84, 84, 1636, 289,
	10, 1576, 805, 1802, 84, 84, 1470, 1471, 1567, 1652,
	84, 1516, 84, 1359, 84, 84, 84, 1650, 1657, 84,
	84, 1293, 527, 1655, 1290, 1685, 1289, 1719, 1720, 281,
	9, 280, 7, 282, 4, 442, 443, 906, 907, 1104,
	1103, 1240, 776, 776, 1105, 960, 1976, 1856, 1645, 1383,
	1702, 777, 1106, 968, 84, 84, 1686, 448, 1838, 22,
	398, 527, 857, 1699, 562, 11, 1992, 1807, 1456, 84,
	84, 10, 1881, 84, 1902, 1241, 1762, 1759, 84, 1772,
	971, 1780, 777, 777, 84, 1743, 38, 1753, 630, 527,
	1704, 777, 777, 1736, 1529, 1744, 1120, 1788, 1119, 1757,
	296, 9, 847, 7, 1757, 4, 651, 832, 1739, 841,
	1250, 1156, 1756, 1755, 740, 706, 653, 1756, 1755, 84,
	1794, 804, 774, 465, 777, 654, 1768, 1760, 1766, 775,
	1155, 1653, 999, 642, 772, 1057, 1211, 1265, 1265, 1155,
	1658, 1230, 1444, 964, 622, 634, 633, 525, 1227, 533,
	1781, 1790, 1406, 1767, 776, 1773, 1774, 51, 547, 1779,
	416, 417, 267, 513, 267, 422, 422, 1341, 1740, 1135,
	889, 1538, 1689, 453, 84, 1467, 84, 535, 84, 84,
	1271, 1813, 1263, 1260, 582, 712, 952, 84, 803, 1058,
	1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
	1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 559,
	1265, 1828, 84, 776, 1347, 1078, 608, 897, 474, 803,
	803, 473, 1115, 556, 1825, 825, 1097, 1826, 803, 803,
	945, 942, 444, 1915, 84, 1858, 1127, 527, 1304, 2051,
	1920, 84, 1535, 1971, 68, 777, 1927, 1854, 1872, 84,
	1328, 26, 776, 1869, 24, 1852, 773, 21, 84, 84,
	1851, 803, 19, 1847, 1848, 1860, 1891, 18, 17, 25,
	1895, 15, 14, 13, 12, 37, 1757, 36, 35, 34,
	33, 1893, 32, 6, 537, 1880, 1884, 5, 1875, 1756,
	1755, 802, 2, 1, 0, 1901, 0, 0, 1894, 542,
	0, 84, 422, 422, 1878, 0, 0, 0, 0, 0,
	0, 0, 0, 1908, 1917, 0, 0, 0, 0, 0,
	84, 84, 802, 802, 0, 0, 0, 0, 0, 1879,
	84, 802, 802, 0, 84, 1887, 410, 1912, 267, 84,
	422, 586, 422, 0, 589, 0, 1934, 777, 1911, 527,
	0, 1942, 1936, 0, 1940, 1938, 84, 0, 1943, 471,
	0, 293, 84, 84, 802, 1952, 84, 465, 0, 1955,
	267, 1935, 1937, 0, 805, 805, 0, 1946, 745, 1949,
	0, 1950, 803, 1757, 81, 0, 1953, 84, 1951, 84,
	84, 1956, 84, 267, 1958, 1846, 1756, 1755, 267, 267,
	267, 0, 751, 1961, 61, 0, 0, 1974, 0, 0,
	1978, 1980, 1969, 1975, 0, 0, 0, 0, 84, 0,
	1984, 267, 267, 1983, 0, 1973, 0, 0, 0, 81,
	0, 81, 1982, 1265, 1985, 1988, 1987, 1986, 777, 1981,
	0, 1945, 1995, 0, 0, 0, 1431, 1432, 84, 0,
	84, 422, 0, 81, 422, 422, 422, 422, 422, 865,
	2014, 2010, 1757, 0, 422, 422, 2009, 2012, 84, 2007,
	410, 0, 2016, 2011, 0, 1756, 1755, 2026, 883, 2024,
	2028, 906, 907, 2032, 803, 802, 805, 84, 0, 2034,
	2037, 0, 2038, 804, 804, 0, 471, 2036, 0, 497,
	0, 0, 0, 0, 909, 2050, 2049, 1493, 1494, 1495,
	0, 0, 0, 2054, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 908, 2059, 777, 0,
	1470, 1471, 1265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 776, 0, 0, 0,
	0, 0, 0, 0, 0, 803, 0, 85, 0, 0,
	0, 914, 0, 0, 805, 0, 0, 802, 0, 0,
	0, 0, 0, 906, 907, 0, 0, 776, 776, 0,
	0, 267, 0, 0, 0, 804, 776, 776, 0, 1018,
	0, 0, 626, 267, 0, 0, 909, 267, 1035, 294,
	0, 267, 0, 0, 1265, 0, 1041, 0, 773, 773,
	1476, 0, 816, 0, 924, 0, 0, 0, 908, 776,
	267, 0, 1061, 1062, 266, 267, 0, 0, 267, 0,
	422, 422, 0, 422, 0, 0, 701, 0, 0, 0,
	1621, 1622, 0, 0, 804, 803, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 802, 0,
	0, 0, 479, 1486, 0, 486, 489, 0, 479, 0,
	0, 1470, 1471, 914, 1488, 1489, 1490, 0, 295, 0,
	925, 0, 0, 804, 0, 1470, 1471, 1792, 1488, 1489,
	1490, 0, 0, 1659, 1660, 1661, 1662, 1663, 1664, 1665,
	1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675,
	1676, 1677, 0, 1681, 0, 0, 0, 0, 0, 0,
	773, 0, 1485, 0, 0, 0, 924, 0, 1109, 1487,
	0, 0, 631, 49, 0, 0, 1485, 0, 0, 0,
	776, 0, 0, 267, 1116, 0, 0, 0, 802, 0,
	497, 0, 0, 0, 0, 0, 0, 919, 916, 917,
	918, 910, 911, 912, 913, 915, 0, 935, 0, 0,
	0, 1476, 0, 49, 0, 267, 0, 0, 422, 773,
	0, 0, 0, 0, 0, 1476, 0, 0, 0, 0,
	0, 0, 925, 0, 458, 0, 0, 466, 0, 0,
	0, 0, 0, 0, 49, 1492, 1491, 1478, 1479, 1480,
	1472, 1473, 1474, 1475, 1477, 0, 0, 0, 773, 0,
	1491, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 528, 0, 1486, 0,
	0, 0, 776, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 479, 0, 489, 0, 0,
	916, 917, 918, 910, 911, 912, 913, 915, 805, 935,
	267, 1299, 1300, 0, 0, 0, 1018, 0, 0, 1307,
	1487, 0, 0, 0, 0, 1312, 1313, 1315, 1317, 1318,
	0, 0, 0, 1323, 1487, 0, 1325, 267, 0, 805,
	805, 0, 0, 0, 0, 529, 267, 0, 805, 805,
	0, 267, 0, 1345, 0, 0, 0, 0, 0, 0,
	267, 0, 0, 776, 0, 0, 1835, 0, 0, 0,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 805, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1109, 1109, 1482, 1483, 1484, 0, 1481, 1478, 1479,
	1480, 1472, 1473, 1474, 1475, 1477, 0, 1482, 1483, 1484,
	0, 1481, 1478, 1479, 1480, 1472, 1473, 1474, 1475, 1477,
	0, 0, 883, 0, 883, 0, 422, 804, 0, 0,
	267, 0, 0, 0, 1391, 0, 423, 0, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 776, 424, 0, 0, 0, 804, 804,
	0, 0, 0, 0, 0, 1905, 0, 804, 804, 0,
	0, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 528, 0, 0, 0, 0, 0, 0, 294, 528,
	426, 0, 0, 0, 0, 431, 432, 0, 0, 437,
	804, 0, 805, 710, 0, 0, 0, 0, 0, 0,
	0, 425, 427, 0, 0, 0, 612, 612, 0, 0,
	0, 0, 0, 0, 0, 714, 744, 0, 0, 0,
	0, 479, 748, 748, 0, 0, 0, 0, 0, 0,
	528, 528, 0, 0, 0, 0, 0, 0, 294, 0,
	428, 0, 0, 0, 486, 489, 0, 1960, 0, 0,
	529, 0, 773, 0, 429, 430, 0, 295, 529, 0,
	0, 0, 906, 907, 0, 926, 927, 928, 936, 937,
	938, 433, 0, 0, 0, 0, 0, 0, 929, 0,
	0, 0, 0, 773, 773, 909, 0, 0, 940, 0,
	0, 0, 773, 773, 805, 0, 0, 0, 0, 497,
	0, 0, 0, 0, 0, 0, 0, 908, 0, 529,
	529, 804, 0, 923, 0, 0, 0, 295, 0, 0,
	458, 0, 0, 0, 0, 773, 0, 0, 0, 890,
	892, 0, 0, 0, 0, 0, 899, 0, 267, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 946, 947,
	948, 949, 950, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 914, 0, 1577, 0, 0, 1018, 965, 883,
	0, 0, 0, 0, 0, 0, 1587, 0, 0, 0,
	434, 933, 941, 0, 435, 805, 0, 267, 0, 436,
	267, 0, 0, 0, 0, 0, 0, 939, 0, 1614,
	0, 0, 0, 438, 0, 0, 0, 0, 0, 931,
	0, 0, 0, 804, 0, 924, 0, 0, 0, 0,
	0, 0, 0, 0, 1006, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 479, 0, 0, 930,
	489, 0, 0, 528, 479, 0, 773, 1647, 0, 0,
	0, 458, 0, 0, 458, 458, 0, 0, 0, 0,
	0, 0, 0, 1059, 0, 0, 0, 0, 489, 0,
	0, 489, 0, 0, 0, 805, 955, 0, 957, 0,
	0, 925, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 0, 934, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 804, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1700, 1701, 1018, 0, 0, 0,
	0, 0, 529, 497, 497, 0, 0, 0, 0, 1727,
	0, 1728, 294, 267, 1730, 1731, 0, 0, 1734, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 773, 0,
	0, 932, 0, 0, 920, 921, 922, 0, 919, 916,
	917, 918, 910, 911, 912, 913, 915, 0, 935, 0,
	0, 1752, 0, 497, 1116, 1821, 1752, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 479, 0, 267, 267,
	0, 0, 267, 0, 804, 0, 0, 1614, 0, 0,
	49, 0, 49, 1786, 0, 0, 0, 0, 0, 0,
	0, 295, 0, 0, 0, 0, 0, 49, 1149, 0,
	0, 294, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 612, 1808, 773,
	0, 0, 0, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1182, 1183, 1184, 1185, 1186, 0, 1192, 0, 1194, 1195,
	1196, 1197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1220, 0, 0,
	0, 0, 0, 1018, 0, 1827, 0, 422, 1829, 0,
	295, 0, 0, 0, 0, 0, 267, 0, 0, 1247,
	1248, 0, 0, 1261, 0, 1272, 1274, 1279, 1282, 1283,
	1284, 528, 0, 1298, 0, 0, 0, 1853, 0, 773,
	0, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	714, 0, 0, 0, 0, 0, 0, 0, 1752, 0,
	1326, 0, 0, 267, 0, 0, 0, 0, 1150, 1336,
	1883, 0, 0, 0, 744, 0, 0, 0, 267, 0,
	0, 0, 0, 744, 0, 0, 0, 497, 1614, 0,
	528, 1339, 0, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1209, 0, 0, 0, 0, 0,
	529, 0, 0, 906, 907, 0, 926, 927, 928, 936,
	937, 938, 0, 0, 0, 0, 0, 0, 0, 929,
	883, 0, 0, 1365, 0, 0, 909, 0, 0, 940,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1922,
	1923, 1470, 1471, 1385, 1488, 1489, 1490, 0, 908, 1932,
	0, 0, 0, 1933, 923, 1752, 0, 1791, 422, 529,
	0, 0, 0, 0, 0, 1149, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 497, 0, 0, 0, 0,
	0, 1614, 497, 0, 0, 1614, 0, 0, 0, 0,
	0, 0, 1485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 914, 466, 0, 1968, 0, 497, 267,
	0, 422, 1470, 1471, 0, 1488, 1489, 1490, 0, 0,
	1416, 1417, 933, 941, 0, 0, 1422, 0, 1628, 0,
	0, 0, 0, 0, 1752, 0, 0, 1883, 939, 0,
	0, 1476, 0, 0, 0, 0, 0, 0, 0, 0,
	931, 0, 0, 0, 0, 0, 924, 0, 1440, 0,
	0, 0, 0, 1485, 0, 1447, 0, 267, 1451, 497,
	0, 0, 0, 0, 0, 0, 1491, 1460, 49, 0,
	930, 0, 49, 0, 0, 0, 0, 2025, 0, 0,
	0, 0, 0, 0, 1486, 49, 0, 0, 0, 0,
	0, 0, 958, 0, 0, 1411, 1614, 0, 1279, 1279,
	1279, 0, 1476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 925, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 934, 0, 0, 0, 0, 0,
	0, 1531, 0, 0, 1209, 0, 0, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1487, 1059, 1149, 957, 0, 1486, 0, 528, 0, 0,
	0, 612, 0, 0, 0, 0, 0, 0, 0, 612,
	0, 0, 0, 714, 0, 294, 0, 0, 0, 0,
	0, 0, 932, 0, 0, 920, 921, 922, 0, 919,
	916, 917, 918, 910, 911, 912, 913, 915, 0, 935,
	1149, 0, 0, 1149, 0, 0, 1512, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 0,
	0, 1487, 0, 1482, 1483, 1484, 0, 1481, 1478, 1479,
	1480, 1472, 1473, 1474, 1475, 1477, 529, 0, 1619, 0,
	0, 1620, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1625, 0, 295, 0, 0, 0, 0, 0,
	0, 1634, 0, 0, 0, 0, 0, 0, 0, 1638,
	0, 0, 1365, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1654, 0, 0,
	0, 1656, 1150, 0, 1482, 1483, 1484, 0, 1481, 1478,
	1479, 1480, 1472, 1473, 1474, 1475, 1477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 528,
	0, 906, 907, 0, 1687, 1688, 0, 936, 937, 938,
	0, 0, 0, 1694, 1695, 1696, 0, 0, 0, 0,
	1150, 0, 0, 1150, 909, 0, 1729, 940, 0, 0,
	0, 0, 1735, 0, 0, 0, 0, 49, 528, 0,
	0, 0, 0, 0, 0, 0, 908, 0, 0, 0,
	0, 0, 923, 0, 0, 0, 0, 906, 907, 612,
	926, 927, 928, 936, 937, 938, 528, 0, 0, 0,
	0, 0, 0, 929, 0, 0, 0, 0, 529, 0,
	909, 1149, 1149, 940, 0, 1149, 0, 0, 0, 906,
	907, 0, 926, 927, 928, 936, 937, 938, 1771, 0,
	0, 914, 908, 0, 0, 929, 0, 0, 923, 0,
	0, 0, 909, 0, 0, 940, 0, 529, 0, 0,
	933, 941, 0, 0, 0, 0, 1793, 0, 0, 0,
	1796, 1797, 0, 0, 908, 1799, 0, 0, 0, 0,
	923, 0, 1801, 0, 1803, 529, 0, 0, 931, 0,
	0, 0, 1809, 0, 924, 0, 0, 914, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 933, 941, 0, 0,
	0, 49, 0, 0, 0, 1818, 0, 0, 0, 914,
	0, 0, 939, 0, 0, 0, 0, 0, 0, 1836,
	0, 0, 0, 0, 931, 0, 0, 0, 933, 941,
	924, 0, 0, 0, 528, 0, 0, 0, 0, 0,
	925, 1150, 1150, 0, 939, 1150, 0, 1845, 0, 0,
	0, 0, 934, 0, 930, 0, 931, 0, 0, 0,
	0, 466, 924, 0, 0, 0, 1877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1870, 0, 0,
	0, 1149, 0, 0, 0, 0, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 925, 0, 0, 0,
	1886, 0, 0, 0, 0, 0, 0, 0, 934, 0,
	932, 0, 0, 529, 1897, 1898, 0, 919, 916, 917,
	918, 910, 911, 912, 913, 915, 0, 935, 925, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	934, 0, 0, 0, 1910, 0, 528, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1914, 294, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 920,
	921, 922, 0, 919, 916, 917, 918, 910, 911, 912,
	913, 915, 0, 935, 0, 714, 0, 0, 1861, 0,
	1511, 0, 0, 0, 0, 0, 0, 0, 932, 0,
	0, 920, 921, 922, 49, 919, 916, 917, 918, 910,
	911, 912, 913, 915, 0, 935, 0, 0, 0, 1965,
	0, 1150, 1970, 0, 0, 529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2008, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2023, 2023, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 2023, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2023, 86,
	87, 311, 88, 312, 313, 314, 315, 214, 316, 317,
	318, 319, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 320, 93, 221, 222, 94, 321, 322, 223,
	224, 225, 323, 226, 324, 297, 325, 95, 96, 97,
	0, 98, 326, 99, 100, 101, 327, 298, 102, 103,
	328, 329, 330, 331, 332, 333, 104, 105, 268, 106,
	227, 107, 228, 229, 334, 108, 335, 109, 336, 337,
	338, 110, 111, 339, 112, 340, 0, 341, 230, 113,
	114, 231, 232, 342, 343, 344, 115, 116, 233, 0,
	117, 345, 118, 346, 347, 299, 348, 119, 234, 349,
	235, 350, 120, 121, 122, 123, 236, 237, 301, 351,
	127, 352, 124, 353, 300, 125, 238, 126, 239, 240,
	241, 354, 242, 355, 302, 128, 303, 129, 130, 356,
	132, 131, 357, 243, 304, 133, 305, 358, 134, 359,
	360, 135, 0, 136, 137, 138, 244, 139, 306, 140,
	141, 144, 142, 361, 143, 362, 245, 145, 246, 146,
	147, 363, 148, 364, 365, 149, 366, 367, 150, 247,
	307, 151, 308, 248, 152, 153, 154, 155, 368, 249,
	156, 250, 157, 369, 158, 159, 160, 251, 161, 162,
	370, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 371, 173, 309, 174, 175, 252, 176, 0, 177,
	178, 179, 180, 372, 253, 181, 182, 373, 183, 184,
	310, 185, 254, 255, 186, 374, 192, 187, 188, 189,
	191, 256, 190, 257, 375, 193, 376, 194, 195, 196,
	377, 258, 259, 260, 378, 379, 197, 261, 262, 380,
	198, 199, 200, 201, 381, 382, 202, 203, 204, 383,
	205, 384, 206, 207, 208, 263, 264, 385, 386, 209,
	387, 388, 389, 390, 210, 211, 212, 213, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 292,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1609, 86, 87, 311, 88, 312,
	313, 314, 315, 214, 316, 317, 318, 319, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 320, 93,
	221, 222, 94, 321, 322, 223, 224, 225, 323, 226,
	324, 297, 325, 95, 96, 97, 0, 98, 326, 99,
	100, 101, 327, 298, 102, 103, 328, 329, 330, 331,
	332, 333, 104, 105, 268, 106, 227, 107, 228, 229,
	334, 108, 335, 109, 336, 337, 338, 110, 111, 339,
	112, 340, 0, 341, 230, 113, 114, 231, 232, 342,
	343, 344, 115, 116, 233, 0, 117, 345, 118, 346,
	347, 299, 348, 119, 234, 349, 235, 350, 120, 121,
	122, 123, 236, 237, 301, 351, 127, 352, 124, 353,
	300, 125, 238, 126, 239, 240, 241, 354, 242, 355,
	302, 128, 303, 129, 130, 356, 132, 131, 357, 243,
	304, 133, 305, 358, 134, 359, 360, 135, 0, 136,
	137, 138, 244, 139, 306, 140, 141, 144, 142, 361,
	143, 362, 245, 145, 246, 146, 147, 363, 148, 364,
	365, 149, 366, 367, 150, 247, 307, 151, 308, 248,
	152, 153, 154, 155, 368, 249, 156, 250, 157, 369,
	158, 159, 160, 251, 161, 162, 370, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 371, 173, 309,
	174, 175, 252, 176, 0, 177, 178, 179, 180, 372,
	253, 181, 182, 373, 183, 184, 310, 185, 254, 255,
	186, 374, 192, 187, 188, 189, 191, 256, 190, 257,
	375, 193, 376, 194, 195, 196, 377, 258, 259, 260,
	378, 379, 197, 261, 262, 380, 198, 199, 200, 201,
	381, 382, 202, 203, 204, 383, 205, 384, 206, 207,
	208, 263, 264, 385, 386, 209, 387, 388, 389, 390,
	210, 211, 212, 213, 292, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 738, 0, 0,
	86, 87, 311, 88, 312, 313, 314, 315, 214, 316,
	317, 318, 319, 89, 90, 91, 215, 216, 217, 218,
	92, 219, 220, 320, 93, 221, 222, 94, 321, 322,
	223, 224, 225, 323, 226, 324, 297, 325, 95, 96,
	97, 0, 98, 326, 99, 100, 101, 327, 298, 102,
	103, 328, 329, 330, 331, 332, 333, 104, 105, 268,
	106, 227, 107, 228, 229, 334, 108, 335, 109, 336,
	337, 338, 110, 111, 339, 112, 340, 0, 341, 230,
	113, 114, 231, 232, 342, 343, 344, 115, 116, 233,
	0, 117, 345, 118, 346, 347, 299, 348, 119, 234,
	349, 235, 350, 120, 121, 122, 123, 236, 237, 301,
	351, 127, 352, 124, 353, 300, 125, 238, 126, 239,
	240, 241, 354, 242, 355, 302, 128, 303, 129, 130,
	356, 132, 131, 357, 243, 304, 133, 305, 358, 134,
	359, 360, 135, 0, 136, 137, 138, 244, 139, 306,
	140, 141, 144, 142, 361, 143, 362, 245, 145, 246,
	146, 147, 363, 148, 364, 365, 149, 366, 367, 150,
	247, 307, 151, 308, 248, 152, 153, 154, 155, 368,
	249, 156, 250, 157, 369, 158, 159, 160, 251, 161,
	162, 370, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 371, 173, 309, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 372, 253, 181, 182, 373, 183,
	184, 310, 185, 254, 255, 186, 374, 192, 187, 188,
	189, 191, 256, 190, 257, 375, 193, 376, 194, 195,
	196, 377, 258, 259, 260, 378, 379, 197, 261, 262,
	380, 198, 199, 200, 201, 381, 382, 202, 203, 204,
	383, 205, 384, 206, 207, 208, 263, 264, 385, 386,
	209, 387, 388, 389, 390, 210, 211, 212, 213, 649,
	639, 640, 637, 638, 629, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 1236, 88, 0,
	0, 0, 0, 665, 632, 0, 0, 0, 89, 90,
	91, 215, 680, 217, 681, 92, 682, 683, 0, 93,
	221, 222, 94, 635, 664, 684, 685, 225, 0, 676,
	0, 657, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 298, 102, 103, 0, 658, 660, 0,
	659, 661, 104, 105, 268, 106, 686, 107, 687, 688,
	0, 108, 0, 109, 0, 1237, 0, 679, 111, 0,
	112, 0, 0, 0, 623, 113, 114, 666, 667, 645,
	0, 0, 115, 116, 689, 0, 117, 0, 118, 0,
	0, 299, 0, 119, 677, 0, 235, 0, 120, 121,
	122, 123, 673, 675, 301, 0, 127, 0, 124, 0,
	300, 125, 690, 126, 691, 692, 693, 0, 656, 0,
	302, 128, 303, 129, 130, 0, 132, 131, 0, 678,
	304, 133, 305, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 244, 139, 306, 140, 141, 144, 142, 618,
	143, 646, 674, 145, 694, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 247, 307, 151, 308, 668,
	152, 153, 154, 155, 0, 669, 156, 250, 157, 0,
	158, 159, 160, 695, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 309,
	174, 175, 624, 176, 0, 177, 178, 179, 180, 0,
	253, 181, 182, 662, 183, 184, 310, 185, 696, 255,
	186, 0, 192, 187, 188, 189, 191, 697, 190, 670,
	0, 193, 0, 194, 195, 196, 0, 258, 698, 699,
	0, 0, 197, 671, 672, 644, 198, 199, 200, 201,
	0, 0, 202, 203, 204, 663, 205, 0, 206, 207,
	208, 263, 700, 1235, 0, 209, 0, 0, 0, 0,
	210, 211, 212, 213, 619, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 615, 616, 1238, 0, 0,
	0, 617, 0, 0, 625, 1233, 0, 0, 0, 628,
	649, 639, 640, 637, 638, 629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 665, 632, 0, 0, 0, 89,
	90, 91, 215, 680, 217, 681, 92, 682, 683, 0,
	93, 221, 222, 94, 635, 664, 684, 685, 225, 0,
	676, 0, 657, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 298, 102, 103, 0, 658, 660,
	0, 659, 661, 104, 105, 268, 106, 686, 107, 687,
	688, 715, 108, 0, 109, 0, 0, 0, 679, 111,
	0, 112, 0, 0, 0, 623, 113, 114, 666, 667,
	645, 0, 0, 115, 116, 689, 0, 117, 0, 118,
	0, 0, 299, 0, 119, 677, 0, 235, 0, 120,
	121, 122, 123, 673, 675, 301, 0, 127, 0, 124,
	0, 300, 125, 690, 126, 691, 692, 693, 0, 656,
	0, 302, 128, 303, 129, 130, 0, 132, 131, 0,
	678, 304, 133, 305, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 244, 139, 306, 140, 141, 144, 142,
	618, 143, 646, 674, 145, 694, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 307, 151, 308,
	668, 152, 153, 154, 155, 0, 669, 156, 250, 157,
	0, 158, 159, 160, 695, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	309, 174, 175, 624, 176, 0, 177, 178, 179, 180,
	67, 253, 181, 182, 662, 183, 184, 310, 185, 696,
	255, 186, 0, 192, 187, 188, 189, 191, 697, 190,
	670, 0, 193, 69, 194, 195, 196, 0, 258, 698,
	699, 0, 0, 197, 671, 672, 644, 198, 199, 200,
	201, 0, 0, 202, 203, 204, 663, 205, 0, 206,
	207, 208, 530, 700, 0, 0, 209, 0, 0, 0,
	65, 210, 211, 212, 213, 619, 66, 649, 639, 640,
	637, 638, 629, 0, 0, 0, 615, 616, 0, 0,
	0, 0, 617, 86, 87, 625, 88, 0, 0, 0,
	628, 665, 632, 0, 0, 0, 89, 90, 91, 215,
	680, 217, 681, 92, 682, 683, 0, 93, 221, 222,
	94, 635, 664, 684, 685, 225, 0, 676, 0, 657,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 298, 102, 103, 0, 658, 660, 0, 659, 661,
	104, 105, 268, 106, 686, 107, 687, 688, 0, 108,
	0, 109, 0, 0, 0, 679, 111, 0, 112, 0,
	0, 0, 623, 113, 114, 666, 667, 645, 0, 0,
	115, 116, 689, 0, 117, 0, 118, 0, 0, 299,
	0, 119, 677, 0, 235, 0, 120, 121, 122, 123,
	673, 675, 301, 0, 127, 0, 124, 0, 300, 125,
	690, 126, 691, 692, 693, 0, 656, 0, 302, 128,
	303, 129, 130, 0, 132, 131, 0, 678, 304, 133,
	305, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	244, 139, 306, 140, 141, 144, 142, 618, 143, 646,
	674, 145, 694, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 247, 307, 151, 308, 668, 152, 153,
	154, 155, 0, 669, 156, 250, 157, 0, 158, 159,
	160, 695, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 309, 174, 175,
	624, 176, 0, 177, 178, 179, 180, 67, 253, 181,
	182, 662, 183, 184, 310, 185, 696, 255, 186, 0,
	192, 187, 188, 189, 191, 697, 190, 670, 0, 193,
	69, 194, 195, 196, 0, 258, 698, 699, 0, 0,
	197, 671, 672, 644, 198, 199, 200, 201, 0, 0,
	202, 203, 204, 663, 205, 0, 206, 207, 208, 530,
	700, 0, 0, 209, 0, 0, 0, 65, 210, 211,
	212, 213, 619, 66, 649, 639, 640, 637, 638, 629,
	0, 0, 0, 615, 616, 0, 0, 0, 0, 617,
	86, 87, 625, 88, 0, 0, 0, 628, 665, 632,
	0, 0, 0, 89, 90, 91, 215, 680, 217, 681,
	92, 682, 683, 1275, 93, 221, 222, 94, 635, 664,
	684, 685, 225, 0, 676, 0, 657, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 298, 102,
	103, 0, 658, 660, 0, 659, 661, 104, 105, 268,
	106, 686, 107, 687, 688, 0, 108, 0, 109, 0,
	0, 0, 679, 111, 0, 112, 0, 0, 0, 623,
	113, 114, 666, 667, 645, 0, 0, 115, 116, 689,
	0, 117, 0, 118, 0, 1280, 299, 0, 119, 677,
	0, 235, 0, 120, 121, 122, 123, 673, 675, 301,
	0, 127, 0, 124, 0, 300, 125, 690, 126, 691,
	692, 693, 0, 656, 0, 302, 128, 303, 129, 130,
	0, 132, 131, 1276, 678, 304, 133, 305, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 244, 139, 306,
	140, 141, 144, 142, 618, 143, 646, 674, 145, 694,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 307, 151, 308, 668, 152, 153, 154, 155, 0,
	669, 156, 250, 157, 0, 158, 159, 160, 695, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 309, 174, 175, 624, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 662, 183,
	184, 310, 185, 696, 255, 186, 0, 192, 187, 188,
	189, 191, 697, 190, 670, 0, 193, 0, 194, 195,
	196, 0, 258, 698, 699, 0, 1277, 197, 671, 672,
	644, 198, 199, 200, 201, 0, 0, 202, 203, 204,
	663, 205, 0, 206, 207, 208, 263, 700, 0, 0,
	209, 0, 0, 0, 0, 210, 211, 212, 213, 619,
	0, 649, 639, 640, 637, 638, 629, 0, 0, 0,
	615, 616, 0, 0, 0, 0, 617, 86, 87, 625,
	88, 0, 0, 0, 628, 665, 632, 0, 0, 0,
	89, 90, 91, 215, 680, 217, 681, 92, 682, 683,
	0, 93, 221, 222, 94, 635, 664, 684, 685, 225,
	0, 676, 0, 657, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 298, 102, 103, 0, 658,
	660, 0, 659, 661, 104, 105, 268, 106, 686, 107,
	687, 688, 0, 108, 0, 109, 0, 0, 0, 679,
	111, 0, 112, 0, 0, 0, 623, 113, 114, 666,
	667, 645, 0, 0, 115, 116, 689, 0, 117, 0,
	118, 0, 0, 299, 0, 119, 677, 0, 235, 0,
	120, 121, 122, 123, 673, 675, 301, 0, 127, 0,
	124, 0, 300, 125, 690, 126, 691, 692, 693, 0,
	656, 0, 302, 128, 303, 129, 130, 0, 132, 131,
	0, 678, 304, 133, 305, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 244, 139, 306, 140, 141, 144,
	142, 618, 143, 646, 674, 145, 694, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 247, 307, 151,
	308, 668, 152, 153, 154, 155, 0, 669, 156, 250,
	157, 0, 158, 159, 160, 695, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 309, 174, 175, 624, 176, 0, 177, 178, 179,
	180, 0, 253, 181, 182, 662, 183, 184, 310, 185,
	696, 255, 186, 0, 192, 187, 188, 189, 191, 697,
	190, 670, 0, 193, 0, 194, 195, 196, 0, 258,
	698, 699, 0, 0, 197, 671, 672, 644, 198, 199,
	200, 201, 0, 0, 202, 203, 204, 663, 205, 0,
	206, 207, 208, 263, 700, 0, 0, 209, 0, 0,
	0, 0, 210, 211, 212, 213, 619, 0, 0, 0,
	0, 649, 639, 640, 637, 638, 629, 615, 616, 0,
	0, 0, 0, 617, 963, 1228, 625, 86, 87, 0,
	88, 628, 0, 0, 0, 665, 632, 0, 0, 0,
	89, 90, 91, 215, 680, 217, 681, 92, 682, 683,
	0, 93, 221, 222, 94, 635, 664, 684, 685, 225,
	0, 676, 0, 657, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 298, 102, 103, 0, 658,
	660, 0, 659, 661, 104, 105, 268, 106, 686, 107,
	687, 688, 0, 108, 0, 109, 0, 0, 0, 679,
	111, 0, 112, 0, 0, 0, 623, 113, 114, 666,
	667, 645, 0, 0, 115, 116, 689, 0, 117, 0,
	118, 0, 0, 299, 0, 119, 677, 0, 235, 0,
	120, 121, 122, 123, 673, 675, 301, 0, 127, 0,
	124, 0, 300, 125, 690, 126, 691, 692, 693, 0,
	656, 0, 302, 128, 303, 129, 130, 0, 132, 131,
	0, 678, 304, 133, 305, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 244, 139, 306, 140, 141, 144,
	142, 618, 143, 646, 674, 145, 694, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 247, 307, 151,
	308, 668, 152, 153, 154, 155, 0, 669, 156, 250,
	157, 0, 158, 159, 160, 695, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 309, 174, 175, 624, 176, 0, 177, 178, 179,
	180, 0, 253, 181, 182, 662, 183, 184, 310, 185,
	696, 255, 186, 0, 192, 187, 188, 189, 191, 697,
	190, 670, 0, 193, 0, 194, 195, 196, 0, 258,
	698, 699, 0, 0, 197, 671, 672, 644, 198, 199,
	200, 201, 0, 0, 202, 203, 204, 663, 205, 0,
	206, 207, 208, 263, 700, 0, 0, 209, 0, 0,
	0, 0, 210, 211, 212, 213, 619, 0, 649, 639,
	640, 637, 638, 629, 0, 0, 0, 615, 616, 613,
	0, 0, 0, 617, 86, 87, 625, 88, 0, 0,
	0, 628, 665, 632, 0, 0, 0, 89, 90, 91,
	215, 680, 217, 681, 92, 682, 683, 0, 93, 221,
	222, 94, 635, 664, 684, 685, 225, 0, 676, 0,
	657, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 298, 102, 103, 0, 658, 660, 0, 659,
	661, 104, 105, 268, 106, 686, 107, 687, 688, 0,
	108, 0, 109, 0, 0, 0, 679, 111, 0, 112,
	0, 0, 0, 623, 113, 114, 666, 667, 645, 0,
	0, 115, 116, 689, 0, 117, 0, 118, 0, 0,
	299, 0, 119, 677, 0, 235, 0, 120, 121, 122,
	123, 673, 675, 301, 0, 127, 0, 124, 0, 300,
	125, 690, 126, 691, 692, 693, 0, 656, 0, 302,
	128, 303, 129, 130, 0, 132, 131, 0, 678, 304,
	133, 305, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 244, 139, 306, 140, 141, 144, 142, 618, 143,
	646, 674, 145, 694, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 307, 151, 308, 668, 152,
	153, 154, 155, 0, 669, 156, 250, 157, 0, 158,
	159, 160, 695, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 309, 174,
	175, 624, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 662, 183, 184, 310, 185, 696, 255, 186,
	0, 192, 187, 188, 189, 191, 697, 190, 670, 0,
	193, 0, 194, 195, 196, 0, 258, 698, 699, 0,
	0, 197, 671, 672, 644, 198, 199, 200, 201, 0,
	0, 202, 203, 204, 663, 205, 0, 206, 207, 208,
	263, 700, 0, 0, 209, 0, 0, 0, 0, 210,
	211, 212, 213, 619, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 615, 616, 0, 0, 0, 0,
	617, 0, 0, 625, 1684, 0, 0, 0, 628, 649,
	639, 640, 637, 638, 629, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 665, 632, 0, 0, 0, 89, 90,
	91, 215, 680, 217, 681, 92, 682, 683, 0, 93,
	221, 222, 94, 635, 664, 684, 685, 225, 0, 676,
	0, 657, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 298, 102, 103, 0, 658, 660, 0,
	659, 661, 104, 105, 268, 106, 686, 107, 687, 688,
	0, 108, 0, 109, 0, 0, 0, 679, 111, 0,
	112, 0, 0, 0, 623, 113, 114, 666, 667, 645,
	0, 0, 115, 116, 689, 0, 117, 0, 118, 0,
	0, 299, 0, 119, 677, 0, 235, 0, 120, 121,
	122, 123, 673, 675, 301, 0, 127, 0, 124, 0,
	300, 125, 690, 126, 691, 692, 693, 0, 656, 0,
	302, 128, 303, 129, 130, 0, 132, 131, 0, 678,
	304, 133, 305, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 244, 139, 306, 140, 141, 144, 142, 618,
	143, 646, 674, 145, 694, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 247, 307, 151, 308, 668,
	152, 153, 154, 155, 0, 669, 156, 250, 157, 0,
	158, 159, 160, 695, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 309,
	174, 175, 624, 176, 0, 177, 178, 179, 180, 0,
	253, 181, 182, 662, 183, 184, 310, 185, 696, 255,
	186, 0, 192, 187, 188, 189, 191, 697, 190, 670,
	0, 193, 0, 194, 195, 196, 0, 258, 698, 699,
	0, 0, 197, 671, 672, 644, 198, 199, 200, 201,
	0, 0, 202, 203, 204, 663, 205, 0, 206, 207,
	208, 263, 700, 1641, 0, 209, 0, 0, 0, 0,
	210, 211, 212, 213, 619, 0, 649, 639, 640, 637,
	638, 629, 0, 0, 0, 615, 616, 0, 0, 0,
	0, 617, 86, 87, 625, 88, 0, 0, 0, 628,
	665, 632, 0, 0, 0, 89, 90, 91, 215, 680,
	217, 681, 92, 682, 683, 0, 93, 221, 222, 94,
	635, 664, 684, 685, 225, 0, 676, 0, 657, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	298, 102, 103, 0, 658, 660, 0, 659, 661, 104,
	105, 268, 106, 686, 107, 687, 688, 0, 108, 0,
	109, 0, 0, 0, 679, 111, 0, 112, 0, 0,
	0, 623, 113, 114, 666, 667, 645, 0, 0, 115,
	116, 689, 0, 117, 0, 118, 0, 0, 299, 0,
	119, 677, 0, 235, 0, 120, 121, 122, 123, 673,
	675, 301, 0, 127, 0, 124, 0, 300, 125, 690,
	126, 691, 692, 693, 0, 656, 0, 302, 128, 303,
	129, 130, 0, 132, 131, 0, 678, 304, 133, 305,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 244,
	139, 306, 140, 141, 144, 142, 618, 143, 646, 674,
	145, 694, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 307, 151, 308, 668, 152, 153, 154,
	155, 0, 669, 156, 250, 157, 0, 158, 159, 160,
	695, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 309, 174, 175, 624,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	662, 183, 184, 310, 185, 696, 255, 186, 0, 192,
	187, 188, 189, 191, 697, 190, 670, 0, 193, 0,
	194, 195, 196, 0, 258, 698, 699, 0, 0, 197,
	671, 672, 644, 198, 199, 200, 201, 0, 0, 202,
	203, 204, 663, 205, 0, 206, 207, 208, 263, 700,
	0, 0, 209, 0, 0, 0, 0, 210, 211, 212,
	213, 619, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 615, 616, 0, 0, 0, 0, 617, 0,
	0, 625, 1631, 0, 0, 0, 628, 649, 639, 640,
	637, 638, 629, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 665, 632, 0, 0, 0, 89, 90, 91, 215,
	680, 217, 681, 92, 682, 683, 0, 93, 221, 222,
	94, 635, 664, 684, 685, 225, 0, 676, 0, 657,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 298, 102, 103, 0, 658, 660, 0, 659, 661,
	104, 105, 268, 106, 686, 107, 687, 688, 715, 108,
	0, 109, 0, 0, 0, 679, 111, 0, 112, 0,
	0, 0, 623, 113, 114, 666, 667, 645, 0, 0,
	115, 116, 689, 0, 117, 0, 118, 0, 0, 299,
	0, 119, 677, 0, 235, 0, 120, 121, 122, 123,
	673, 675, 301, 0, 127, 0, 124, 0, 300, 125,
	690, 126, 691, 692, 693, 0, 656, 0, 302, 128,
	303, 129, 130, 0, 132, 131, 0, 678, 304, 133,
	305, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	244, 139, 306, 140, 141, 144, 142, 618, 143, 646,
	674, 145, 694, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 247, 307, 151, 308, 668, 152, 153,
	154, 155, 0, 669, 156, 250, 157, 0, 158, 159,
	160, 695, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 309, 174, 175,
	624, 176, 0, 177, 178, 179, 180, 0, 253, 181,
	182, 662, 183, 184, 310, 185, 696, 255, 186, 0,
	192, 187, 188, 189, 191, 697, 190, 670, 0, 193,
	0, 194, 195, 196, 0, 258, 698, 699, 0, 0,
	197, 671, 672, 644, 198, 199, 200, 201, 0, 0,
	202, 203, 204, 663, 205, 0, 206, 207, 208, 263,
	700, 0, 0, 209, 0, 0, 0, 0, 210, 211,
	212, 213, 619, 0, 649, 639, 640, 637, 638, 629,
	0, 0, 0, 615, 616, 0, 0, 0, 0, 617,
	86, 87, 625, 88, 0, 0, 0, 628, 665, 632,
	0, 0, 0, 89, 90, 91, 215, 680, 217, 681,
	92, 682, 683, 0, 93, 221, 222, 94, 635, 664,
	684, 685, 225, 0, 676, 0, 657, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 298, 102,
	103, 0, 658, 660, 0, 659, 661, 104, 105, 268,
	106, 686, 107, 687, 688, 0, 108, 0, 109, 0,
	0, 0, 679, 111, 0, 112, 0, 0, 0, 623,
	113, 114, 666, 667, 645, 0, 0, 115, 116, 689,
	0, 117, 0, 118, 0, 1280, 299, 0, 119, 677,
	0, 235, 0, 120, 121, 122, 123, 673, 675, 301,
	0, 127, 0, 124, 0, 300, 125, 690, 126, 691,
	692, 693, 0, 656, 0, 302, 128, 303, 129, 130,
	0, 132, 131, 0, 678, 304, 133, 305, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 244, 139, 306,
	140, 141, 144, 142, 618, 143, 646, 674, 145, 694,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 307, 151, 308, 668, 152, 153, 154, 155, 0,
	669, 156, 250, 157, 0, 158, 159, 160, 695, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 309, 174, 175, 624, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 662, 183,
	184, 310, 185, 696, 255, 186, 0, 192, 187, 188,
	189, 191, 697, 190, 670, 0, 193, 0, 194, 195,
	196, 0, 258, 698, 699, 0, 0, 197, 671, 672,
	644, 198, 199, 200, 201, 0, 0, 202, 203, 204,
	663, 205, 0, 206, 207, 208, 263, 700, 0, 0,
	209, 0, 0, 0, 0, 210, 211, 212, 213, 619,
	0, 649, 639, 640, 637, 638, 629, 0, 0, 0,
	615, 616, 0, 0, 0, 0, 617, 86, 87, 625,
	88, 0, 0, 0, 628, 665, 632, 0, 0, 0,
	89, 90, 91, 215, 680, 217, 681, 92, 682, 683,
	0, 93, 221, 222, 94, 635, 664, 684, 685, 225,
	0, 676, 0, 657, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 298, 102, 103, 0, 658,
	660, 0, 659, 661, 104, 105, 268, 106, 686, 107,
	687, 688, 0, 108, 0, 109, 0, 0, 0, 679,
	111, 0, 112, 0, 0, 0, 623, 113, 114, 666,
	667, 645, 0, 0, 115, 116, 689, 0, 117, 0,
	118, 0, 0, 299, 0, 119, 677, 0, 235, 0,
	120, 121, 122, 123, 673, 675, 301, 0, 127, 0,
	124, 0, 300, 125, 690, 126, 691, 692, 693, 0,
	656, 0, 302, 128, 303, 129, 130, 0, 132, 131,
	0, 678, 304, 133, 305, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 244, 139, 306, 140, 141, 144,
	142, 618, 143, 646, 674, 145, 694, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 247, 307, 151,
	308, 668, 152, 153, 154, 155, 0, 669, 156, 250,
	157, 0, 158, 159, 160, 695, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 309, 174, 175, 624, 176, 0, 177, 178, 179,
	180, 0, 253, 181, 182, 662, 183, 184, 310, 185,
	696, 255, 186, 0, 192, 187, 188, 189, 191, 697,
	190, 670, 0, 193, 0, 194, 195, 196, 0, 258,
	698, 699, 0, 0, 197, 671, 672, 644, 198, 199,
	200, 201, 0, 0, 202, 203, 204, 663, 205, 0,
	206, 207, 208, 263, 700, 0, 0, 209, 0, 0,
	0, 0, 210, 211, 212, 213, 619, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 615, 616, 0,
	0, 0, 0, 617, 0, 0, 625, 1223, 0, 0,
	0, 628, 649, 639, 640, 637, 638, 629, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	891, 88, 0, 0, 0, 0, 665, 632, 0, 0,
	0, 89, 90, 91, 215, 680, 217, 681, 92, 682,
	683, 0, 93, 221, 222, 94, 635, 664, 684, 685,
	225, 0, 676, 0, 657, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 298, 102, 103, 0,
	658, 660, 0, 659, 661, 104, 105, 268, 106, 686,
	107, 687, 688, 0, 108, 0, 109, 0, 0, 0,
	679, 111, 0, 112, 0, 0, 0, 623, 113, 114,
	666, 667, 645, 0, 0, 115, 116, 689, 0, 117,
	0, 118, 0, 0, 299, 0, 119, 677, 0, 235,
	0, 120, 121, 122, 123, 673, 675, 301, 0, 127,
	0, 124, 0, 300, 125, 690, 126, 691, 692, 693,
	0, 656, 0, 302, 128, 303, 129, 130, 0, 132,
	131, 0, 678, 304, 133, 305, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 244, 139, 306, 140, 141,
	144, 142, 618, 143, 646, 674, 145, 694, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 307,
	151, 308, 668, 152, 153, 154, 155, 0, 669, 156,
	250, 157, 0, 158, 159, 160, 695, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 309, 174, 175, 624, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 662, 183, 184, 310,
	185, 696, 255, 186, 0, 192, 187, 188, 189, 191,
	697, 190, 670, 0, 193, 0, 194, 195, 196, 0,
	258, 698, 699, 0, 0, 197, 671, 672, 644, 198,
	199, 200, 201, 0, 0, 202, 203, 204, 663, 205,
	0, 206, 207, 208, 263, 700, 0, 0, 209, 0,
	0, 0, 0, 210, 211, 212, 213, 619, 0, 649,
	639, 640, 637, 638, 629, 0, 0, 0, 615, 616,
	0, 0, 0, 0, 617, 86, 87, 625, 88, 0,
	0, 0, 628, 665, 632, 0, 0, 0, 89, 90,
	91, 215, 680, 217, 681, 92, 682, 683, 0, 93,
	221, 222, 94, 635, 664, 684, 685, 225, 0, 676,
	0, 657, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 298, 102, 2022, 0, 658, 660, 0,
	659, 661, 104, 105, 268, 106, 686, 107, 687, 688,
	0, 108, 0, 109, 0, 0, 0, 679, 111, 0,
	112, 0, 0, 0, 623, 113, 114, 666, 667, 645,
	0, 0, 115, 116, 689, 0, 117, 0, 118, 0,
	0, 299, 0, 119, 677, 0, 235, 0, 120, 121,
	122, 123, 673, 675, 301, 0, 127, 0, 124, 0,
	300, 125, 690, 126, 691, 692, 693, 0, 656, 0,
	302, 128, 303, 129, 130, 0, 132, 131, 0, 678,
	304, 133, 305, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 244, 139, 306, 140, 141, 144, 142, 618,
	143, 646, 674, 145, 694, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 247, 307, 151, 308, 668,
	152, 153, 154, 155, 0, 669, 156, 250, 157, 0,
	158, 159, 160, 695, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 309,
	174, 175, 624, 176, 0, 177, 178, 179, 180, 0,
	253, 181, 182, 662, 183, 184, 310, 185, 696, 255,
	186, 0, 192, 187, 188, 189, 191, 697, 190, 670,
	0, 193, 0, 194, 195, 196, 0, 258, 698, 699,
	0, 0, 197, 671, 672, 644, 198, 199, 2021, 201,
	0, 0, 202, 203, 204, 663, 205, 0, 206, 207,
	208, 263, 700, 0, 0, 209, 0, 0, 0, 0,
	210, 211, 212, 213, 619, 0, 649, 639, 640, 637,
	638, 629, 0, 0, 0, 615, 616, 0, 0, 0,
	0, 617, 86, 87, 625, 88, 0, 0, 0, 628,
	665, 632, 0, 0, 0, 89, 90, 91, 2020, 680,
	217, 681, 92, 682, 683, 0, 93, 221, 222, 94,
	635, 664, 684, 685, 225, 0, 676, 0, 657, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	298, 102, 2022, 0, 658, 660, 0, 659, 661, 104,
	105, 268, 106, 686, 107, 687, 688, 0, 108, 0,
	109, 0, 0, 0, 679, 111, 0, 112, 0, 0,
	0, 623, 113, 114, 666, 667, 645, 0, 0, 115,
	116, 689, 0, 117, 0, 118, 0, 0, 299, 0,
	119, 677, 0, 235, 0, 120, 121, 122, 123, 673,
	675, 301, 0, 127, 0, 124, 0, 300, 125, 690,
	126, 691, 692, 693, 0, 656, 0, 302, 128, 303,
	129, 130, 0, 132, 131, 0, 678, 304, 133, 305,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 244,
	139, 306, 140, 141, 144, 142, 618, 143, 646, 674,
	145, 694, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 307, 151, 308, 668, 152, 153, 154,
	155, 0, 669, 156, 250, 157, 0, 158, 159, 160,
	695, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 309, 174, 175, 624,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	662, 183, 184, 310, 185, 696, 255, 186, 0, 192,
	187, 188, 189, 191, 697, 190, 670, 0, 193, 0,
	194, 195, 196, 0, 258, 698, 699, 0, 0, 197,
	671, 672, 644, 198, 199, 2021, 201, 0, 0, 202,
	203, 204, 663, 205, 0, 206, 207, 208, 263, 700,
	0, 0, 209, 0, 0, 0, 0, 210, 211, 212,
	213, 619, 0, 649, 639, 640, 637, 638, 629, 0,
	0, 0, 615, 616, 0, 0, 0, 0, 617, 86,
	87, 625, 88, 0, 0, 0, 628, 665, 632, 0,
	0, 0, 89, 90, 91, 215, 680, 217, 681, 92,
	682, 683, 0, 93, 221, 222, 94, 635, 664, 684,
	685, 225, 0, 676, 0, 657, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 298, 102, 103,
	0, 658, 660, 0, 659, 661, 104, 105, 268, 106,
	686, 107, 687, 688, 0, 108, 0, 109, 0, 0,
	0, 679, 111, 0, 112, 0, 0, 0, 623, 113,
	114, 666, 667, 645, 0, 0, 115, 116, 689, 0,
	117, 0, 118, 0, 0, 299, 0, 119, 677, 0,
	235, 0, 120, 121, 122, 123, 673, 675, 301, 0,
	127, 0, 124, 0, 300, 125, 690, 126, 691, 692,
	693, 0, 656, 0, 302, 128, 303, 129, 130, 0,
	132, 131, 0, 678, 304, 133, 305, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 244, 139, 306, 140,
	141, 144, 142, 618, 143, 646, 674, 145, 694, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 247,
	307, 151, 308, 668, 152, 153, 154, 155, 0, 669,
	156, 250, 157, 0, 158, 159, 160, 695, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 309, 174, 175, 624, 176, 0, 177,
	178, 179, 180, 0, 253, 181, 182, 662, 183, 184,
	310, 185, 696, 255, 186, 0, 192, 187, 188, 189,
	191, 697, 190, 670, 0, 193, 0, 194, 195, 196,
	0, 258, 698, 699, 0, 0, 197, 671, 672, 644,
	198, 199, 200, 201, 0, 0, 202, 203, 204, 663,
	205, 0, 206, 207, 208, 263, 700, 0, 0, 209,
	0, 0, 0, 0, 210, 211, 212, 213, 619, 0,
	1252, 639, 640, 637, 638, 629, 0, 0, 0, 615,
	616, 0, 0, 0, 0, 617, 86, 87, 625, 88,
	0, 0, 0, 628, 665, 632, 0, 0, 0, 89,
	90, 91, 215, 680, 217, 681, 92, 682, 683, 0,
	93, 221, 222, 94, 635, 664, 684, 685, 225, 0,
	676, 0, 657, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 298, 102, 103, 0, 658, 660,
	0, 659, 661, 104, 105, 268, 106, 686, 1255, 687,
	688, 0, 108, 0, 109, 0, 0, 0, 679, 111,
	0, 112, 0, 0, 0, 623, 113, 114, 666, 667,
	645, 0, 0, 115, 116, 689, 0, 117, 0, 118,
	0, 0, 299, 0, 119, 677, 0, 235, 0, 120,
	121, 1256, 123, 673, 675, 301, 0, 127, 0, 124,
	0, 300, 125, 690, 126, 691, 692, 693, 0, 656,
	0, 302, 128, 303, 129, 130, 0, 132, 131, 0,
	678, 304, 133, 305, 0, 134, 0, 0, 135, 0,
	136, 1257, 1254, 244, 139, 306, 140, 141, 144, 142,
	618, 143, 646, 674, 145, 694, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 307, 151, 308,
	668, 152, 153, 154, 155, 0, 669, 156, 250, 157,
	0, 158, 159, 160, 695, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	309, 174, 175, 624, 176, 0, 177, 178, 179, 1258,
	0, 253, 181, 182, 662, 183, 184, 310, 185, 696,
	255, 186, 0, 192, 187, 188, 189, 191, 697, 190,
	670, 0, 193, 0, 194, 195, 196, 0, 258, 698,
	699, 0, 0, 197, 671, 672, 644, 198, 199, 200,
	201, 0, 0, 202, 203, 204, 663, 205, 0, 206,
	207, 208, 263, 700, 0, 0, 209, 0, 0, 0,
	0, 210, 211, 1253, 213, 619, 0, 649, 639, 640,
	637, 638, 629, 0, 0, 0, 615, 616, 0, 0,
	0, 0, 617, 86, 87, 625, 88, 0, 0, 0,
	628, 665, 632, 0, 0, 0, 89, 90, 91, 215,
	680, 217, 681, 92, 682, 683, 0, 93, 221, 222,
	94, 635, 664, 684, 685, 225, 0, 676, 0, 657,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 298, 102, 103, 0, 658, 660, 0, 659, 661,
	104, 105, 268, 106, 686, 107, 687, 688, 0, 108,
	0, 109, 0, 0, 0, 679, 111, 0, 112, 0,
	0, 0, 623, 113, 114, 666, 667, 645, 0, 0,
	115, 116, 689, 0, 117, 0, 118, 0, 0, 299,
	0, 119, 677, 0, 235, 0, 120, 121, 122, 123,
	673, 675, 301, 0, 127, 0, 124, 0, 300, 125,
	690, 126, 691, 692, 693, 0, 656, 0, 302, 128,
	303, 129, 130, 0, 132, 131, 0, 678, 304, 133,
	305, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	244, 139, 306, 140, 141, 144, 142, 0, 143, 646,
	674, 145, 694, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 247, 307, 151, 308, 668, 152, 153,
	154, 155, 0, 669, 156, 250, 157, 0, 158, 159,
	160, 695, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 309, 174, 175,
	1270, 176, 0, 177, 178, 179, 180, 0, 253, 181,
	182, 662, 183, 184, 310, 185, 696, 255, 186, 0,
	192, 187, 188, 189, 191, 697, 190, 670, 0, 193,
	0, 194, 195, 196, 0, 258, 698, 699, 0, 0,
	197, 671, 672, 644, 198, 199, 200, 201, 0, 0,
	202, 203, 204, 663, 205, 0, 206, 207, 208, 263,
	700, 0, 0, 209, 0, 0, 0, 0, 210, 211,
	212, 213, 0, 0, 649, 639, 640, 637, 638, 629,
	0, 0, 0, 1266, 1267, 0, 0, 0, 0, 1268,
	86, 87, 1269, 88, 0, 0, 0, 628, 665, 632,
	0, 0, 0, 89, 90, 91, 0, 680, 217, 681,
	92, 682, 683, 0, 93, 221, 222, 94, 635, 664,
	684, 685, 225, 0, 676, 0, 657, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 298, 102,
	2022, 0, 658, 660, 0, 659, 661, 104, 105, 268,
	106, 686, 107, 687, 688, 0, 108, 0, 109, 0,
	0, 0, 679, 111, 0, 112, 0, 0, 0, 623,
	113, 114, 666, 667, 645, 0, 0, 115, 116, 689,
	0, 117, 0, 118, 0, 0, 299, 0, 119, 677,
	0, 235, 0, 120, 121, 122, 123, 673, 675, 0,
	0, 127, 0, 124, 0, 300, 125, 690, 126, 691,
	692, 693, 0, 656, 0, 0, 128, 303, 129, 130,
	0, 132, 131, 0, 678, 304, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 244, 139, 306,
	140, 141, 144, 142, 618, 143, 646, 674, 145, 694,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 307, 151, 308, 668, 152, 153, 154, 155, 0,
	669, 156, 250, 157, 0, 158, 159, 160, 695, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 309, 174, 175, 624, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 662, 183,
	184, 0, 185, 696, 255, 186, 0, 192, 187, 188,
	189, 191, 697, 190, 670, 0, 193, 0, 194, 195,
	196, 0, 258, 698, 699, 0, 0, 197, 671, 672,
	644, 198, 199, 2021, 201, 0, 0, 202, 203, 204,
	663, 205, 0, 206, 207, 208, 263, 700, 0, 0,
	209, 0, 0, 0, 0, 210, 211, 212, 213, 0,
	0, 649, 639, 640, 637, 638, 629, 0, 0, 0,
	615, 616, 0, 0, 0, 0, 617, 86, 87, 625,
	88, 0, 0, 0, 628, 665, 632, 0, 0, 0,
	89, 90, 91, 215, 680, 217, 681, 92, 682, 683,
	0, 93, 221, 222, 94, 0, 664, 684, 685, 225,
	0, 676, 0, 657, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 298, 102, 103, 0, 658,
	660, 0, 659, 661, 104, 105, 268, 106, 686, 107,
	687, 688, 0, 108, 0, 109, 0, 0, 0, 679,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 666,
	667, 645, 0, 0, 115, 116, 689, 0, 117, 0,
	118, 0, 0, 299, 0, 119, 677, 0, 235, 0,
	120, 121, 122, 123, 673, 675, 301, 0, 127, 0,
	124, 0, 300, 125, 690, 126, 691, 692, 693, 0,
	656, 0, 302, 128, 303, 129, 130, 0, 132, 131,
	0, 678, 304, 133, 305, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 244, 139, 306, 140, 141, 144,
	142, 0, 143, 646, 674, 145, 694, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 247, 307, 151,
	308, 668, 152, 153, 154, 155, 0, 669, 156, 250,
	157, 0, 158, 159, 160, 695, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 309, 174, 175, 1270, 176, 0, 177, 178, 179,
	180, 0, 253, 181, 182, 662, 183, 184, 310, 185,
	696, 255, 186, 0, 192, 187, 188, 189, 191, 697,
	190, 670, 0, 193, 0, 194, 195, 196, 0, 258,
	698, 699, 0, 0, 197, 671, 672, 644, 198, 199,
	200, 201, 649, 0, 202, 203, 204, 663, 205, 0,
	206, 207, 208, 263, 700, 0, 0, 209, 86, 87,
	0, 88, 210, 211, 212, 213, 665, 0, 0, 0,
	0, 89, 90, 91, 215, 216, 217, 218, 92, 219,
	220, 0, 93, 221, 222, 94, 1269, 664, 223, 224,
	225, 628, 676, 0, 657, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 298, 102, 103, 0,
	658, 660, 0, 659, 661, 104, 105, 268, 106, 227,
	107, 228, 229, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 230, 113, 114,
	666, 667, 0, 0, 0, 115, 116, 233, 0, 117,
	0, 118, 0, 0, 299, 0, 119, 677, 0, 235,
	0, 120, 121, 122, 123, 673, 675, 301, 0, 127,
	0, 124, 0, 300, 125, 238, 126, 239, 240, 241,
	0, 242, 0, 302, 128, 303, 129, 130, 0, 132,
	131, 0, 678, 304, 133, 305, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 244, 139, 306, 140, 141,
	144, 142, 0, 143, 0, 674, 145, 246, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 307,
	151, 308, 668, 152, 153, 154, 155, 0, 669, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 309, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 662, 183, 184, 310,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 670, 0, 193, 0, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 671, 672, 0, 198,
	199, 200, 201, 526, 0, 202, 203, 204, 663, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 86,
	87, 0, 88, 210, 211, 212, 213, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 1754, 0, 223,
	224, 225, 0, 226, 0, 297, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 298, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 299, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 236, 237, 301, 0,
	127, 0, 124, 0, 300, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 302, 128, 303, 129, 130, 0,
	132, 131, 0, 243, 304, 133, 305, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 244, 139, 306, 140,
	141, 144, 142, 0, 143, 0, 245, 145, 246, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 247,
	307, 151, 308, 248, 152, 153, 154, 155, 0, 249,
	156, 250, 157, 0, 158, 159, 160, 251, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 309, 174, 175, 252, 176, 0, 177,
	178, 179, 180, 67, 253, 181, 182, 0, 183, 184,
	310, 185, 254, 255, 186, 0, 192, 187, 188, 189,
	191, 256, 190, 257, 0, 193, 69, 194, 195, 196,
	0, 258, 259, 260, 0, 0, 197, 261, 262, 0,
	198, 199, 200, 201, 0, 0, 202, 203, 204, 0,
	205, 0, 206, 207, 208, 530, 264, 0, 0, 209,
	0, 0, 0, 65, 210, 211, 212, 213, 0, 66,
	526, 734, 0, 842, 839, 834, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 64, 88,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 89,
	90, 91, 215, 216, 217, 218, 92, 219, 220, 0,
	93, 221, 222, 94, 0, 0, 223, 224, 225, 0,
	226, 0, 297, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 298, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 268, 106, 227, 107, 228,
	229, 845, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 230, 113, 114, 231, 232,
	836, 0, 0, 115, 116, 233, 0, 117, 0, 118,
	0, 0, 299, 0, 119, 234, 0, 235, 0, 120,
	121, 122, 123, 236, 237, 301, 0, 127, 0, 124,
	0, 300, 125, 238, 126, 239, 240, 241, 0, 242,
	0, 302, 128, 303, 129, 130, 0, 132, 131, 0,
	243, 304, 133, 305, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 244, 139, 306, 140, 141, 144, 142,
	0, 143, 0, 245, 145, 246, 146, 147, 0, 148,
	837, 0, 149, 0, 0, 150, 247, 307, 151, 308,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	309, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 310, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 835, 198, 199, 200,
	201, 0, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 526, 734, 209, 842, 839, 834,
	0, 210, 211, 212, 213, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 843, 840, 214, 0,
	0, 0, 0, 89, 90, 91, 215, 216, 217, 218,
	92, 219, 220, 0, 93, 221, 222, 94, 0, 0,
	223, 224, 225, 0, 226, 0, 297, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 298, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 268,
	106, 227, 107, 228, 229, 830, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 230,
	113, 114, 231, 232, 836, 0, 0, 115, 116, 233,
	0, 117, 0, 118, 0, 0, 299, 0, 119, 234,
	0, 235, 0, 120, 121, 122, 123, 236, 237, 301,
	0, 127, 0, 124, 0, 300, 125, 238, 126, 239,
	240, 241, 0, 242, 0, 302, 128, 303, 129, 130,
	0, 132, 131, 0, 243, 304, 133, 305, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 244, 139, 306,
	140, 141, 144, 142, 0, 143, 0, 245, 145, 246,
	146, 147, 0, 148, 837, 0, 149, 0, 0, 150,
	247, 307, 151, 308, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 309, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 310, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	835, 198, 199, 200, 201, 0, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 526, 734,
	209, 842, 839, 834, 0, 210, 211, 212, 213, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	843, 840, 214, 0, 0, 0, 0, 89, 90, 91,
	215, 216, 217, 218, 92, 219, 220, 0, 93, 221,
	222, 94, 0, 0, 223, 224, 225, 0, 226, 0,
	297, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 298, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 268, 106, 227, 107, 228, 229, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 230, 113, 114, 231, 232, 836, 0,
	0, 115, 116, 233, 0, 117, 0, 118, 0, 0,
	299, 0, 119, 234, 0, 235, 0, 120, 121, 122,
	123, 236, 237, 301, 0, 127, 0, 124, 0, 300,
	125, 238, 126, 239, 240, 241, 0, 242, 0, 302,
	128, 303, 129, 130, 0, 132, 131, 0, 243, 304,
	133, 305, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 244, 139, 306, 140, 141, 144, 142, 0, 143,
	0, 245, 145, 246, 146, 147, 0, 148, 837, 0,
	149, 0, 0, 150, 247, 307, 151, 308, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 309, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 310, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 835, 198, 199, 200, 201, 0,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 83, 0, 209, 0, 0, 0, 0, 210,
	211, 212, 213, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 843, 840, 214, 0, 0, 0,
	0, 89, 90, 91, 215, 216, 217, 218, 92, 219,
	220, 0, 93, 221, 222, 94, 0, 0, 223, 224,
	225, 0, 226, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 268, 106, 227,
	107, 228, 229, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 230, 113, 114,
	231, 232, 0, 0, 0, 115, 116, 233, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 234, 0, 235,
	0, 120, 121, 122, 123, 236, 237, 0, 0, 127,
	0, 124, 0, 0, 125, 238, 126, 239, 240, 241,
	0, 242, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 243, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 244, 139, 0, 140, 141,
	144, 142, 0, 143, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 480, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 67, 253, 181, 182, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 69, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 261, 262, 0, 198,
	199, 200, 201, 0, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 530, 264, 0, 0, 209, 83,
	0, 0, 65, 210, 211, 212, 213, 0, 66, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 214, 0, 1153, 0, 1152, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 236, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 244, 139, 0, 140, 141, 144, 142, 0,
	143, 0, 245, 145, 246, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 247, 0, 151, 0, 248,
	152, 153, 154, 155, 0, 249, 156, 250, 157, 0,
	158, 159, 160, 251, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 0,
	174, 175, 252, 176, 0, 177, 178, 179, 180, 67,
	253, 181, 182, 0, 183, 184, 0, 185, 254, 255,
	186, 0, 192, 187, 188, 189, 191, 256, 190, 257,
	0, 193, 69, 194, 195, 196, 0, 258, 259, 260,
	0, 0, 197, 261, 262, 0, 198, 199, 200, 201,
	0, 0, 202, 203, 204, 0, 205, 0, 206, 207,
	208, 530, 264, 0, 0, 209, 83, 0, 0, 65,
	210, 211, 212, 213, 0, 66, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	214, 0, 0, 0, 64, 89, 90, 91, 215, 216,
	217, 218, 92, 219, 220, 0, 93, 221, 222, 94,
	0, 0, 223, 224, 225, 0, 226, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 268, 106, 227, 107, 228, 229, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 230, 113, 114, 231, 232, 0, 0, 0, 115,
	116, 233, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 234, 0, 235, 0, 120, 121, 122, 123, 236,
	237, 0, 0, 127, 0, 124, 0, 0, 125, 238,
	126, 239, 240, 241, 0, 242, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 243, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 244,
	139, 0, 140, 141, 144, 142, 0, 143, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 480, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 0, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 83, 0, 0, 0, 210, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 214, 0, 1153,
	0, 1152, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 236, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 244, 139, 0, 140,
	141, 144, 142, 0, 143, 0, 245, 145, 246, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 247,
	0, 151, 0, 248, 152, 153, 154, 155, 0, 249,
	156, 250, 157, 0, 158, 159, 160, 251, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 0, 174, 175, 252, 176, 0, 177,
	178, 179, 180, 0, 253, 181, 182, 0, 183, 184,
	0, 185, 254, 255, 186, 0, 192, 187, 188, 189,
	191, 256, 190, 257, 0, 193, 0, 194, 195, 196,
	0, 258, 259, 260, 0, 0, 197, 261, 262, 0,
	198, 199, 200, 201, 83, 0, 202, 203, 204, 0,
	205, 0, 206, 207, 208, 263, 264, 0, 0, 209,
	86, 87, 0, 88, 210, 211, 212, 213, 214, 0,
	0, 0, 0, 89, 90, 91, 215, 216, 217, 218,
	92, 219, 220, 0, 93, 221, 222, 94, 0, 742,
	223, 224, 225, 0, 226, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 268,
	106, 227, 107, 228, 229, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 230,
	113, 114, 231, 232, 0, 0, 0, 115, 116, 233,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 234,
	0, 235, 0, 120, 121, 122, 123, 236, 237, 0,
	0, 127, 0, 124, 0, 0, 125, 238, 126, 239,
	240, 241, 0, 242, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 243, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 244, 139, 0,
	140, 141, 144, 142, 0, 143, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	0, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 1060,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 244, 139,
	0, 140, 141, 144, 142, 0, 143, 0, 245, 145,
	246, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 247, 0, 151, 0, 248, 152, 153, 154, 155,
	0, 249, 156, 250, 157, 0, 158, 159, 160, 251,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 0, 174, 175, 252, 176,
	0, 177, 178, 179, 180, 0, 253, 181, 182, 0,
	183, 184, 0, 185, 254, 255, 186, 0, 192, 187,
	188, 189, 191, 256, 190, 257, 0, 193, 0, 194,
	195, 196, 0, 258, 259, 260, 0, 0, 197, 261,
	262, 0, 198, 199, 200, 201, 83, 0, 202, 203,
	204, 0, 205, 0, 206, 207, 208, 263, 264, 0,
	0, 209, 86, 87, 0, 88, 210, 211, 212, 213,
	214, 0, 0, 0, 0, 89, 90, 91, 215, 216,
	217, 218, 92, 219, 220, 0, 93, 221, 222, 94,
	1648, 0, 223, 224, 225, 0, 226, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 268, 106, 227, 107, 228, 229, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 230, 113, 114, 231, 232, 0, 0, 0, 115,
	116, 233, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 234, 0, 235, 0, 120, 121, 122, 123, 236,
	237, 0, 0, 127, 0, 124, 0, 0, 125, 238,
	126, 239, 240, 241, 0, 242, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 243, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 244,
	139, 0, 140, 141, 144, 142, 0, 143, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 0, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 0, 0, 0, 0, 210, 211, 212,
	213, 649, 639, 640, 637, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 711, 0, 0, 0, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 680, 217, 681, 92, 682, 683,
	0, 93, 221, 222, 94, 0, 0, 684, 685, 225,
	0, 226, 0, 297, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 298, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 686, 107,
	687, 688, 0, 108, 0, 109, 0, 0, 0, 679,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 645, 0, 0, 115, 116, 689, 0, 117, 0,
	118, 0, 0, 299, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 301, 0, 127, 0,
	124, 0, 300, 125, 690, 126, 691, 692, 693, 0,
	656, 0, 302, 128, 303, 129, 130, 0, 132, 131,
	0, 243, 304, 133, 305, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 244, 139, 306, 140, 141, 144,
	142, 0, 143, 646, 245, 145, 694, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 247, 307, 151,
	308, 248, 152, 153, 154, 155, 0, 249, 156, 250,
	157, 0, 158, 159, 160, 695, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 309, 174, 175, 252, 176, 0, 177, 178, 179,
	180, 0, 253, 181, 182, 0, 183, 184, 310, 185,
	696, 255, 186, 0, 192, 187, 188, 189, 191, 697,
	190, 257, 0, 193, 0, 194, 195, 196, 0, 258,
	698, 699, 0, 0, 197, 261, 262, 644, 198, 199,
	200, 201, 83, 0, 202, 203, 204, 0, 205, 0,
	206, 207, 208, 263, 700, 0, 0, 209, 86, 87,
	0, 88, 210, 211, 212, 213, 214, 0, 0, 0,
	0, 89, 90, 91, 215, 216, 217, 218, 92, 219,
	220, 0, 93, 221, 222, 94, 0, 0, 223, 224,
	225, 0, 226, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 79, 106, 227,
	107, 228, 229, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 230, 113, 114,
	231, 232, 0, 0, 0, 115, 116, 233, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 234, 0, 235,
	0, 120, 121, 122, 123, 236, 237, 0, 0, 127,
	0, 124, 0, 0, 125, 238, 126, 239, 240, 241,
	0, 242, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 243, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 244, 139, 0, 140, 141,
	144, 142, 0, 143, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 78, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 261, 262, 0, 198,
	199, 200, 201, 0, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 526,
	734, 0, 0, 210, 211, 212, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	82, 0, 0, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 297, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 298, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 299, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 236, 237, 301, 0, 127, 0, 124, 0,
	300, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	302, 128, 303, 129, 130, 0, 132, 131, 0, 243,
	304, 133, 305, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 244, 139, 306, 140, 141, 144, 142, 0,
	143, 0, 245, 145, 246, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 247, 307, 151, 308, 248,
	152, 153, 154, 155, 0, 249, 156, 250, 157, 0,
	158, 159, 160, 251, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 309,
	174, 175, 252, 176, 0, 177, 178, 179, 180, 0,
	253, 181, 182, 0, 183, 184, 310, 185, 254, 255,
	186, 0, 192, 187, 188, 189, 191, 256, 190, 257,
	0, 193, 0, 194, 195, 196, 0, 258, 259, 260,
	0, 0, 197, 261, 262, 0, 198, 199, 200, 201,
	83, 0, 202, 203, 204, 0, 205, 0, 206, 207,
	208, 263, 264, 0, 0, 209, 86, 87, 0, 88,
	210, 211, 212, 213, 214, 0, 0, 0, 0, 89,
	90, 91, 215, 216, 217, 218, 92, 219, 220, 0,
	93, 221, 222, 94, 0, 0, 223, 224, 225, 0,
	226, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 268, 106, 227, 107, 228,
	229, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 230, 113, 114, 231, 232,
	0, 0, 0, 115, 116, 233, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 234, 0, 235, 0, 120,
	121, 122, 123, 236, 237, 0, 0, 127, 0, 124,
	0, 0, 125, 238, 126, 239, 240, 241, 0, 242,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	243, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 244, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 0, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 526, 209, 0, 0, 0,
	0, 210, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 82, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 297, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 298,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 299, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	301, 0, 127, 0, 124, 0, 300, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 302, 128, 303, 129,
	130, 0, 132, 131, 0, 243, 304, 133, 305, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 244, 139,
	306, 140, 141, 144, 142, 0, 143, 0, 245, 145,
	246, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 247, 307, 151, 308, 248, 152, 153, 154, 155,
	0, 249, 156, 250, 157, 0, 158, 159, 160, 251,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 309, 174, 175, 252, 176,
	0, 177, 178, 179, 180, 0, 253, 181, 182, 0,
	183, 184, 310, 185, 254, 255, 186, 0, 192, 187,
	188, 189, 191, 256, 190, 257, 0, 193, 0, 194,
	195, 196, 0, 258, 259, 260, 0, 0, 197, 261,
	262, 0, 198, 199, 200, 201, 83, 0, 202, 203,
	204, 0, 205, 0, 206, 207, 208, 263, 264, 0,
	0, 209, 86, 87, 0, 88, 210, 211, 212, 213,
	214, 0, 0, 0, 0, 89, 90, 91, 215, 216,
	217, 218, 92, 219, 220, 0, 93, 221, 222, 94,
	0, 0, 223, 224, 225, 1021, 226, 0, 0, 0,
	95, 96, 97, 0, 98, 1019, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 268, 106, 227, 107, 228, 229, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 230, 113, 114, 231, 232, 0, 1124, 0, 115,
	116, 233, 0, 117, 0, 118, 1024, 0, 0, 0,
	119, 234, 0, 235, 0, 120, 121, 122, 123, 236,
	237, 0, 0, 127, 1122, 124, 0, 0, 125, 238,
	126, 239, 240, 241, 0, 242, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 243, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 244,
	139, 0, 140, 141, 144, 142, 0, 143, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 1023, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 83, 1123, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 1021, 226, 0, 0,
	1016, 95, 96, 97, 0, 98, 1019, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 1024, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	1015, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	244, 139, 0, 140, 141, 144, 142, 0, 143, 0,
	245, 145, 246, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 247, 0, 151, 0, 248, 152, 153,
	154, 155, 0, 249, 156, 250, 157, 1023, 158, 159,
	160, 251, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 0, 174, 175,
	252, 176, 0, 177, 178, 179, 180, 0, 253, 181,
	182, 0, 183, 184, 0, 185, 254, 255, 186, 0,
	192, 187, 188, 189, 191, 256, 190, 257, 0, 193,
	0, 194, 195, 196, 0, 258, 259, 260, 0, 0,
	197, 261, 262, 0, 198, 199, 200, 201, 83, 1022,
	202, 203, 204, 0, 205, 0, 206, 207, 208, 263,
	264, 0, 0, 209, 86, 87, 0, 88, 210, 211,
	212, 213, 214, 0, 1613, 0, 0, 89, 90, 91,
	215, 216, 217, 218, 92, 219, 220, 0, 93, 221,
	222, 94, 0, 0, 223, 224, 225, 0, 226, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 268, 106, 227, 107, 228, 229, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 230, 113, 114, 231, 232, 0, 0,
	0, 115, 116, 233, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 234, 0, 235, 0, 120, 121, 122,
	123, 236, 237, 0, 0, 127, 0, 124, 0, 0,
	125, 238, 126, 239, 240, 241, 0, 242, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 243, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 244, 139, 0, 140, 141, 144, 142, 0, 143,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 0, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 236, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 244, 139, 0, 140, 141, 144, 142, 0,
	143, 0, 245, 145, 246, 146, 147, 0, 148, 0,
	480, 149, 0, 0, 150, 247, 0, 151, 0, 248,
	152, 153, 154, 155, 0, 249, 156, 250, 157, 0,
	158, 159, 160, 251, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 0,
	174, 175, 252, 176, 0, 177, 178, 179, 180, 0,
	253, 181, 182, 0, 183, 184, 0, 185, 254, 255,
	186, 0, 192, 187, 188, 189, 191, 256, 190, 257,
	0, 193, 0, 194, 195, 196, 0, 258, 259, 260,
	0, 0, 197, 261, 262, 0, 198, 199, 200, 201,
	83, 0, 202, 203, 204, 0, 205, 0, 206, 207,
	208, 263, 264, 0, 0, 209, 86, 87, 0, 88,
	210, 211, 212, 213, 214, 0, 0, 0, 0, 89,
	90, 91, 215, 216, 217, 218, 92, 219, 220, 0,
	93, 221, 222, 94, 0, 0, 223, 224, 225, 0,
	226, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 268, 106, 227, 107, 228,
	229, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 230, 113, 114, 231, 232,
	0, 0, 0, 115, 116, 233, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 234, 0, 235, 0, 120,
	121, 122, 123, 767, 237, 0, 0, 127, 0, 124,
	0, 0, 125, 238, 126, 239, 240, 241, 0, 242,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	243, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 244, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 480, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 0, 209, 86, 87, 538,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 127, 0,
	124, 0, 0, 125, 238, 126, 239, 240, 241, 0,
	242, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 243, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 244, 139, 0, 140, 141, 144,
	142, 0, 143, 0, 245, 145, 246, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 247, 0, 151,
	0, 248, 152, 153, 154, 155, 0, 249, 156, 250,
	157, 0, 158, 159, 160, 251, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 0, 174, 175, 252, 176, 0, 177, 178, 179,
	180, 0, 253, 181, 182, 0, 183, 184, 0, 185,
	254, 255, 186, 0, 192, 187, 188, 189, 191, 256,
	190, 257, 0, 193, 0, 194, 195, 196, 0, 258,
	259, 260, 0, 0, 197, 261, 262, 0, 198, 199,
	200, 201, 83, 0, 202, 203, 204, 0, 205, 0,
	206, 207, 208, 263, 264, 0, 0, 209, 86, 87,
	0, 88, 210, 211, 212, 213, 214, 0, 0, 0,
	0, 89, 90, 91, 215, 216, 217, 218, 92, 219,
	220, 0, 93, 221, 222, 94, 0, 0, 223, 224,
	225, 0, 226, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 268, 106, 227,
	107, 228, 229, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 230, 113, 114,
	231, 232, 0, 0, 0, 115, 116, 233, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 234, 0, 235,
	0, 120, 121, 122, 123, 492, 237, 0, 0, 127,
	0, 124, 0, 0, 125, 238, 126, 239, 240, 241,
	0, 242, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 243, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 244, 139, 0, 140, 141,
	144, 142, 0, 143, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 480, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 0, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 261, 262, 0, 198,
	199, 200, 201, 83, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 86,
	87, 0, 88, 210, 211, 212, 213, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 485, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 244, 139, 0, 140,
	141, 144, 142, 0, 143, 0, 245, 145, 246, 146,
	147, 0, 148, 0, 480, 149, 0, 0, 150, 247,
	0, 151, 0, 248, 152, 153, 154, 155, 0, 249,
	156, 250, 157, 0, 158, 159, 160, 251, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 0, 174, 175, 252, 176, 0, 177,
	178, 179, 180, 0, 253, 181, 182, 0, 183, 184,
	0, 185, 254, 255, 186, 0, 192, 187, 188, 189,
	191, 256, 190, 257, 0, 193, 0, 194, 195, 196,
	0, 258, 259, 260, 0, 0, 197, 261, 262, 0,
	198, 199, 200, 201, 83, 0, 202, 203, 204, 0,
	205, 0, 206, 207, 208, 263, 264, 0, 0, 209,
	86, 87, 395, 88, 210, 211, 212, 213, 214, 0,
	0, 0, 0, 89, 90, 91, 215, 216, 217, 218,
	92, 219, 220, 0, 93, 221, 222, 94, 0, 0,
	223, 224, 225, 0, 226, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 268,
	106, 227, 107, 228, 229, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 230,
	113, 114, 231, 232, 0, 0, 0, 115, 116, 233,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 234,
	0, 235, 0, 120, 121, 122, 123, 236, 237, 0,
	0, 127, 0, 124, 0, 0, 125, 238, 126, 239,
	240, 241, 0, 242, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 243, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 244, 139, 0,
	140, 141, 144, 142, 0, 143, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 394, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	0, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 244, 139,
	0, 140, 141, 144, 142, 0, 143, 0, 245, 145,
	246, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 247, 0, 151, 0, 248, 152, 153, 154, 155,
	0, 249, 156, 250, 157, 0, 158, 159, 160, 251,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 0, 174, 175, 252, 176,
	0, 177, 178, 179, 180, 0, 253, 181, 182, 0,
	183, 184, 0, 185, 254, 255, 186, 0, 192, 187,
	188, 189, 191, 256, 190, 257, 0, 193, 0, 194,
	195, 196, 0, 258, 259, 260, 0, 0, 197, 261,
	262, 0, 198, 199, 200, 201, 83, 0, 202, 203,
	204, 0, 205, 0, 206, 207, 208, 263, 264, 0,
	0, 209, 86, 87, 0, 88, 210, 211, 212, 213,
	214, 0, 0, 0, 0, 89, 90, 91, 215, 216,
	217, 218, 92, 219, 220, 0, 93, 221, 222, 94,
	0, 0, 223, 224, 225, 0, 226, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 268, 106, 227, 107, 228, 229, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 230, 113, 114, 231, 232, 0, 0, 0, 115,
	116, 233, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 234, 0, 235, 0, 120, 121, 122, 123, 1316,
	237, 0, 0, 127, 0, 124, 0, 0, 125, 238,
	126, 239, 240, 241, 0, 242, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 243, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 244,
	139, 0, 140, 141, 144, 142, 0, 143, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	1314, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	244, 139, 0, 140, 141, 144, 142, 0, 143, 0,
	245, 145, 246, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 247, 0, 151, 0, 248, 152, 153,
	154, 155, 0, 249, 156, 250, 157, 0, 158, 159,
	160, 251, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 0, 174, 175,
	252, 176, 0, 177, 178, 179, 180, 0, 253, 181,
	182, 0, 183, 184, 0, 185, 254, 255, 186, 0,
	192, 187, 188, 189, 191, 256, 190, 257, 0, 193,
	0, 194, 195, 196, 0, 258, 259, 260, 0, 0,
	197, 261, 262, 0, 198, 199, 200, 201, 83, 0,
	202, 203, 204, 0, 205, 0, 206, 207, 208, 263,
	264, 0, 0, 209, 86, 87, 0, 88, 210, 211,
	212, 213, 214, 0, 0, 0, 0, 89, 90, 91,
	215, 216, 217, 218, 92, 219, 220, 0, 93, 221,
	222, 94, 0, 0, 223, 224, 225, 0, 226, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 268, 106, 227, 107, 228, 229, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 230, 113, 114, 231, 232, 0, 0,
	0, 115, 116, 233, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 234, 0, 235, 0, 120, 121, 122,
	123, 1303, 237, 0, 0, 127, 0, 124, 0, 0,
	125, 238, 126, 239, 240, 241, 0, 242, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 243, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 244, 139, 0, 140, 141, 144, 142, 0, 143,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 0, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 882, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 244, 139, 0, 140, 141, 144, 142, 0,
	143, 0, 245, 145, 246, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 247, 0, 151, 0, 248,
	152, 153, 154, 155, 0, 249, 156, 250, 157, 0,
	158, 159, 160, 251, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 0,
	174, 175, 252, 176, 0, 177, 178, 179, 180, 0,
	253, 181, 182, 0, 183, 184, 0, 185, 254, 255,
	186, 0, 192, 187, 188, 189, 191, 256, 190, 257,
	0, 193, 0, 194, 195, 196, 0, 258, 259, 260,
	0, 0, 197, 261, 262, 0, 198, 199, 200, 201,
	83, 0, 202, 203, 204, 0, 205, 0, 206, 207,
	208, 263, 264, 0, 0, 209, 86, 87, 0, 88,
	210, 211, 212, 213, 214, 0, 0, 0, 0, 89,
	90, 91, 215, 216, 217, 218, 92, 219, 220, 0,
	93, 221, 222, 94, 0, 0, 223, 224, 225, 0,
	226, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 268, 106, 227, 107, 228,
	229, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 230, 113, 114, 231, 232,
	0, 0, 0, 115, 116, 233, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 234, 0, 235, 0, 120,
	121, 122, 123, 236, 237, 0, 0, 127, 0, 124,
	0, 0, 125, 238, 126, 239, 240, 241, 0, 242,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	243, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 244, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 409, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 752, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 127, 0,
	124, 0, 0, 125, 238, 126, 239, 240, 241, 0,
	242, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 243, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 244, 139, 0, 140, 141, 144,
	142, 0, 143, 0, 245, 145, 246, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 247, 0, 151,
	0, 248, 152, 153, 154, 155, 0, 249, 156, 250,
	157, 0, 158, 159, 160, 251, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 0, 174, 175, 252, 176, 0, 177, 178, 179,
	180, 0, 253, 181, 182, 0, 0, 184, 0, 185,
	254, 255, 186, 0, 192, 187, 188, 189, 191, 256,
	190, 257, 0, 193, 0, 194, 195, 196, 0, 258,
	259, 260, 0, 0, 197, 261, 262, 0, 198, 199,
	200, 201, 83, 0, 202, 203, 204, 0, 205, 0,
	206, 207, 208, 263, 264, 0, 0, 209, 86, 87,
	0, 88, 210, 211, 212, 213, 214, 0, 0, 0,
	0, 89, 90, 91, 215, 216, 217, 218, 92, 219,
	220, 0, 93, 221, 222, 94, 0, 0, 223, 224,
	225, 0, 226, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 268, 106, 227,
	107, 228, 229, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 230, 113, 114,
	231, 232, 0, 0, 0, 115, 116, 233, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 234, 0, 235,
	0, 120, 121, 122, 123, 590, 237, 0, 0, 127,
	0, 124, 0, 0, 125, 238, 126, 239, 240, 241,
	0, 242, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 243, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 244, 139, 0, 140, 141,
	144, 142, 0, 143, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 0, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 261, 262, 0, 198,
	199, 200, 201, 83, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 86,
	87, 0, 88, 210, 211, 212, 213, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 585, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 244, 139, 0, 140,
	141, 144, 142, 0, 143, 0, 245, 145, 246, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 247,
	0, 151, 0, 248, 152, 153, 154, 155, 0, 249,
	156, 250, 157, 0, 158, 159, 160, 251, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 0, 174, 175, 252, 176, 0, 177,
	178, 179, 180, 0, 253, 181, 182, 0, 183, 184,
	0, 185, 254, 255, 186, 0, 192, 187, 188, 189,
	191, 256, 190, 257, 0, 193, 0, 194, 195, 196,
	0, 258, 259, 260, 0, 0, 197, 261, 262, 0,
	198, 199, 200, 201, 83, 0, 202, 203, 204, 0,
	205, 0, 206, 207, 208, 263, 264, 0, 0, 209,
	86, 87, 0, 88, 210, 211, 212, 213, 214, 0,
	0, 0, 0, 89, 90, 91, 215, 216, 217, 218,
	92, 219, 220, 0, 93, 221, 222, 94, 0, 0,
	223, 224, 544, 0, 226, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 268,
	106, 227, 107, 228, 229, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 230,
	113, 114, 231, 232, 0, 0, 0, 115, 116, 233,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 234,
	0, 235, 0, 120, 121, 122, 123, 236, 237, 0,
	0, 127, 0, 124, 0, 0, 125, 238, 126, 239,
	240, 241, 0, 242, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 243, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 244, 420, 0,
	140, 141, 144, 142, 0, 143, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 419, 259, 260, 0, 0, 415, 261, 262,
	0, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 244, 420,
	0, 140, 141, 144, 142, 0, 143, 0, 245, 145,
	246, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 247, 0, 151, 0, 248, 152, 153, 154, 155,
	0, 249, 156, 250, 157, 0, 158, 159, 160, 251,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 0, 174, 175, 252, 176,
	0, 177, 178, 179, 180, 0, 253, 181, 182, 0,
	183, 184, 0, 185, 254, 255, 186, 0, 192, 187,
	188, 189, 191, 256, 190, 257, 0, 193, 0, 194,
	195, 196, 0, 419, 259, 260, 0, 0, 415, 261,
	262, 0, 198, 199, 200, 201, 83, 0, 202, 203,
	204, 0, 205, 0, 206, 207, 208, 263, 264, 0,
	0, 209, 86, 87, 0, 88, 210, 211, 212, 213,
	214, 0, 0, 0, 0, 89, 90, 91, 215, 216,
	217, 218, 92, 219, 220, 0, 93, 221, 222, 94,
	0, 0, 223, 224, 225, 0, 226, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 268, 106, 227, 107, 228, 229, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 230, 113, 114, 231, 232, 0, 0, 0, 115,
	116, 233, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 234, 0, 235, 0, 120, 121, 122, 123, 522,
	237, 0, 0, 127, 0, 124, 0, 0, 125, 238,
	126, 239, 240, 241, 0, 242, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 243, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 244,
	139, 0, 140, 141, 144, 142, 0, 143, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	519, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	244, 139, 0, 140, 141, 144, 142, 0, 143, 0,
	245, 145, 246, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 247, 0, 151, 0, 248, 152, 153,
	154, 155, 0, 249, 156, 250, 157, 0, 158, 159,
	160, 251, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 0, 174, 175,
	252, 176, 0, 177, 178, 179, 180, 0, 253, 181,
	182, 0, 183, 184, 0, 185, 254, 255, 186, 0,
	192, 187, 188, 189, 191, 256, 190, 257, 0, 193,
	0, 194, 195, 196, 0, 258, 259, 260, 0, 0,
	197, 261, 262, 0, 198, 199, 200, 201, 83, 0,
	202, 203, 204, 0, 205, 0, 206, 207, 208, 263,
	264, 0, 0, 209, 86, 87, 0, 88, 210, 211,
	212, 213, 214, 0, 0, 0, 0, 89, 90, 91,
	215, 216, 217, 218, 92, 219, 220, 0, 93, 221,
	222, 94, 0, 0, 223, 224, 225, 0, 226, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 268, 106, 227, 107, 228, 229, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 230, 113, 114, 231, 232, 0, 0,
	0, 115, 116, 233, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 234, 0, 235, 0, 120, 121, 122,
	123, 516, 237, 0, 0, 127, 0, 124, 0, 0,
	125, 238, 126, 239, 240, 241, 0, 242, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 243, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 244, 139, 0, 140, 141, 144, 142, 0, 143,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 0, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 514, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 244, 139, 0, 140, 141, 144, 142, 0,
	143, 0, 245, 145, 246, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 247, 0, 151, 0, 248,
	152, 153, 154, 155, 0, 249, 156, 250, 157, 0,
	158, 159, 160, 251, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 0,
	174, 175, 252, 176, 0, 177, 178, 179, 180, 0,
	253, 181, 182, 0, 183, 184, 0, 185, 254, 255,
	186, 0, 192, 187, 188, 189, 191, 256, 190, 257,
	0, 193, 0, 194, 195, 196, 0, 258, 259, 260,
	0, 0, 197, 261, 262, 0, 198, 199, 200, 201,
	83, 0, 202, 203, 204, 0, 205, 0, 206, 207,
	208, 263, 264, 0, 0, 209, 86, 87, 0, 88,
	210, 211, 212, 213, 214, 0, 0, 0, 0, 89,
	90, 91, 215, 216, 217, 218, 92, 219, 220, 0,
	93, 221, 222, 94, 0, 0, 223, 224, 225, 0,
	226, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 268, 106, 227, 107, 228,
	229, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 230, 113, 114, 231, 232,
	0, 0, 0, 115, 116, 233, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 234, 0, 235, 0, 120,
	121, 122, 123, 488, 237, 0, 0, 127, 0, 124,
	0, 0, 125, 238, 126, 239, 240, 241, 0, 242,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	243, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 244, 139, 0, 140, 141, 144, 142,
	0, 143, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 127, 0,
	124, 0, 0, 125, 238, 126, 239, 240, 241, 0,
	242, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 243, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 244, 139, 0, 140, 141, 144,
	142, 0, 143, 0, 245, 145, 246, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 247, 0, 151,
	0, 248, 152, 153, 154, 155, 0, 249, 156, 250,
	157, 0, 158, 159, 160, 251, 469, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 0, 174, 175, 252, 176, 0, 177, 178, 179,
	180, 0, 253, 181, 182, 0, 183, 184, 0, 185,
	254, 255, 186, 0, 192, 187, 188, 189, 191, 256,
	190, 257, 0, 193, 0, 194, 195, 196, 0, 258,
	259, 260, 0, 0, 197, 261, 262, 0, 198, 199,
	200, 201, 83, 0, 202, 203, 204, 0, 205, 0,
	206, 207, 208, 263, 264, 0, 0, 209, 86, 87,
	0, 88, 210, 211, 212, 213, 214, 0, 0, 0,
	0, 89, 90, 91, 215, 216, 217, 218, 92, 219,
	220, 0, 93, 221, 222, 94, 0, 0, 223, 224,
	225, 0, 226, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 268, 106, 227,
	107, 228, 229, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 230, 113, 114,
	231, 232, 0, 0, 0, 115, 116, 233, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 234, 0, 235,
	0, 120, 121, 122, 123, 236, 237, 0, 0, 127,
	0, 124, 0, 0, 125, 238, 126, 239, 240, 241,
	0, 242, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 243, 0, 133, 0, 0, 412, 0, 0,
	135, 0, 136, 137, 138, 244, 420, 0, 140, 141,
	144, 142, 0, 143, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 414, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 413, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 0, 194, 195, 196, 0,
	419, 259, 260, 0, 0, 415, 261, 262, 0, 198,
	199, 200, 201, 83, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 86,
	87, 0, 88, 210, 211, 212, 213, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 236, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 244, 139, 0, 140,
	141, 144, 142, 0, 143, 0, 245, 145, 246, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 247,
	0, 151, 0, 248, 152, 153, 0, 155, 0, 249,
	156, 250, 157, 0, 158, 0, 160, 251, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 0, 174, 175, 252, 0, 0, 177,
	178, 179, 180, 0, 253, 181, 182, 0, 183, 184,
	0, 185, 254, 255, 186, 0, 192, 187, 188, 189,
	191, 256, 190, 257, 0, 193, 0, 194, 195, 196,
	0, 258, 259, 260, 0, 0, 197, 261, 262, 0,
	198, 199, 200, 201, 0, 0, 202, 203, 204, 0,
	205, 0, 206, 207, 208, 263, 264, 0, 0, 209,
	0, 0, 0, 0, 210, 211, 212, 213, 906, 907,
	0, 926, 927, 928, 936, 937, 938, 0, 0, 0,
	0, 0, 0, 0, 929, 0, 0, 0, 0, 0,
	0, 909, 0, 0, 940, 0, 0, 0, 0, 906,
	907, 0, 926, 927, 928, 936, 937, 938, 0, 0,
	0, 0, 0, 908, 0, 929, 0, 0, 0, 923,
	0, 0, 909, 0, 0, 940, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 908, 0, 0, 0, 0, 0,
	923, 0, 0, 0, 0, 0, 0, 0, 0, 906,
	907, 0, 926, 927, 928, 936, 937, 938, 914, 0,
	0, 0, 0, 0, 0, 929, 0, 0, 0, 0,
	0, 0, 909, 0, 0, 940, 0, 933, 941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 914,
	0, 0, 0, 939, 908, 0, 0, 0, 0, 0,
	923, 0, 0, 0, 0, 931, 0, 0, 933, 941,
	0, 924, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 930, 931, 0, 0, 0,
	0, 0, 924, 0, 0, 0, 0, 0, 0, 914,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 930, 0, 933, 941,
	0, 0, 0, 0, 0, 0, 0, 925, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 0, 0, 934,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	0, 0, 924, 0, 0, 0, 0, 0, 925, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	934, 0, 0, 0, 0, 0, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	920, 921, 922, 0, 919, 916, 917, 918, 910, 911,
	912, 913, 915, 0, 935, 0, 0, 0, 925, 0,
	0, 1510, 0, 0, 0, 0, 0, 0, 932, 0,
	934, 920, 921, 922, 0, 919, 916, 917, 918, 910,
	911, 912, 913, 915, 0, 935, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 906,
	907, 0, 926, 927, 928, 936, 937, 938, 0, 0,
	0, 0, 0, 0, 0, 929, 0, 0, 0, 0,
	0, 0, 909, 0, 0, 940, 0, 0, 932, 0,
	0, 920, 921, 922, 0, 919, 916, 917, 918, 910,
	911, 912, 913, 915, 908, 935, 0, 0, 0, 1963,
	923, 906, 907, 0, 926, 927, 928, 936, 937, 938,
	0, 0, 0, 0, 0, 0, 0, 929, 0, 0,
	0, 0, 0, 0, 909, 0, 0, 940, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 906, 907, 0,
	926, 927, 928, 936, 937, 938, 908, 0, 0, 914,
	0, 0, 923, 929, 0, 0, 0, 0, 0, 0,
	909, 0, 0, 940, 0, 0, 0, 0, 933, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 908, 0, 939, 0, 0, 0, 923, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	0, 914, 924, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1470, 1471, 0, 1488, 1489, 1490, 0,
	933, 941, 0, 0, 0, 0, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 939, 914, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 931, 0,
	0, 0, 0, 0, 924, 0, 933, 941, 0, 0,
	0, 0, 0, 0, 1485, 0, 0, 0, 925, 0,
	0, 0, 939, 0, 0, 0, 0, 0, 930, 0,
	934, 0, 0, 0, 931, 0, 0, 0, 0, 0,
	924, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1476, 930, 0, 0, 0, 0, 0,
	925, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 934, 0, 0, 0, 0, 0, 932, 0,
	0, 920, 921, 922, 0, 919, 916, 917, 918, 910,
	911, 912, 913, 915, 0, 935, 925, 0, 0, 1939,
	0, 0, 0, 0, 0, 0, 1486, 0, 934, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	932, 0, 0, 920, 921, 922, 0, 919, 916, 917,
	918, 910, 911, 912, 913, 915, 0, 935, 0, 0,
	0, 1909, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 920,
	921, 922, 1487, 919, 916, 917, 918, 910, 911, 912,
	913, 915, 0, 935, 0, 906, 907, 1904, 926, 927,
	928, 936, 937, 938, 0, 0, 0, 0, 0, 0,
	0, 929, 0, 0, 0, 0, 0, 0, 909, 0,
	0, 940, 0, 0, 0, 0, 906, 907, 0, 926,
	927, 928, 936, 937, 938, 0, 0, 0, 0, 0,
	908, 0, 929, 0, 0, 0, 923, 0, 0, 909,
	0, 0, 940, 0, 0, 1482, 1483, 1484, 0, 1481,
	1478, 1479, 1480, 1472, 1473, 1474, 1475, 1477, 0, 0,
	0, 908, 0, 0, 0, 0, 0, 923, 0, 0,
	0, 1470, 1471, 0, 1488, 1489, 1490, 0, 0, 0,
	0, 0, 0, 0, 0, 914, 0, 1627, 0, 0,
	0, 0, 906, 907, 0, 926, 927, 928, 936, 937,
	938, 0, 0, 0, 933, 941, 0, 0, 929, 0,
	0, 0, 0, 0, 0, 909, 914, 0, 940, 0,
	939, 0, 1485, 906, 907, 0, 926, 927, 928, 936,
	937, 938, 931, 0, 0, 933, 941, 908, 924, 929,
	0, 0, 0, 923, 0, 0, 909, 0, 0, 940,
	0, 939, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 930, 931, 0, 0, 0, 0, 908, 924,
	0, 1476, 0, 0, 923, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 914, 930, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 925, 0, 1491, 0, 0, 0,
	0, 933, 941, 0, 0, 0, 934, 0, 0, 0,
	0, 0, 0, 914, 1486, 0, 0, 939, 0, 0,
	0, 0, 0, 0, 0, 925, 0, 0, 0, 931,
	0, 0, 933, 941, 0, 924, 0, 934, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 939, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 930,
	931, 0, 0, 0, 932, 0, 924, 920, 921, 922,
	0, 919, 916, 917, 918, 910, 911, 912, 913, 915,
	1487, 935, 0, 0, 0, 1900, 0, 0, 0, 0,
	930, 0, 0, 0, 0, 932, 0, 0, 920, 921,
	922, 925, 919, 916, 917, 918, 910, 911, 912, 913,
	915, 0, 935, 934, 0, 0, 1823, 0, 0, 0,
	0, 0, 906, 907, 0, 926, 927, 928, 936, 937,
	938, 0, 925, 0, 0, 0, 0, 0, 929, 0,
	0, 0, 0, 0, 934, 909, 0, 0, 940, 0,
	0, 0, 0, 1482, 1483, 1484, 0, 1481, 1478, 1479,
	1480, 1472, 1473, 1474, 1475, 1477, 0, 908, 0, 0,
	0, 932, 0, 923, 920, 921, 922, 0, 919, 916,
	917, 918, 910, 911, 912, 913, 915, 0, 935, 0,
	0, 0, 1822, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 0, 0, 920, 921, 922, 0, 919,
	916, 917, 918, 910, 911, 912, 913, 915, 0, 935,
	0, 0, 914, 1717, 0, 0, 0, 906, 907, 0,
	926, 927, 928, 936, 937, 938, 0, 0, 0, 0,
	0, 933, 941, 929, 0, 0, 0, 0, 0, 0,
	909, 0, 0, 940, 0, 0, 0, 939, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 931,
	0, 0, 908, 0, 0, 924, 0, 0, 923, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 930,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 914, 0, 0,
	1470, 1471, 0, 1488, 1489, 1490, 0, 0, 0, 0,
	0, 925, 0, 0, 0, 0, 933, 941, 0, 0,
	0, 0, 0, 934, 0, 0, 0, 0, 0, 0,
	0, 0, 939, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 931, 0, 0, 0, 0, 0,
	924, 1485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 930, 0, 0, 0, 0, 0,
	0, 932, 0, 0, 920, 921, 922, 0, 919, 916,
	917, 918, 910, 911, 912, 913, 915, 0, 935, 0,
	1476, 0, 1651, 0, 906, 907, 0, 926, 927, 928,
	936, 937, 938, 0, 0, 0, 925, 0, 0, 0,
	929, 0, 0, 0, 0, 0, 0, 909, 934, 0,
	940, 0, 0, 0, 0, 1491, 906, 907, 0, 926,
	927, 928, 936, 937, 938, 0, 0, 0, 0, 908,
	0, 0, 929, 1486, 0, 923, 0, 0, 0, 909,
	0, 0, 940, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 908, 0, 0, 0, 0, 932, 923, 0, 920,
	921, 922, 0, 919, 916, 917, 918, 910, 911, 912,
	913, 915, 0, 935, 914, 0, 0, 1635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1487,
	0, 0, 0, 933, 941, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 914, 906, 907, 939,
	926, 927, 928, 936, 937, 938, 0, 0, 0, 0,
	0, 931, 0, 929, 0, 933, 941, 924, 0, 0,
	909, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 930, 908, 931, 0, 0, 0, 0, 923, 924,
	0, 0, 1482, 1483, 1484, 0, 1481, 1478, 1479, 1480,
	1472, 1473, 1474, 1475, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 930, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 925, 0, 0, 906, 907, 0, 926,
	927, 928, 936, 937, 938, 934, 0, 914, 0, 0,
	0, 0, 929, 0, 0, 0, 0, 0, 0, 909,
	0, 0, 940, 0, 0, 925, 933, 941, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	0, 908, 939, 0, 0, 0, 0, 923, 0, 0,
	0, 0, 0, 0, 931, 0, 0, 0, 0, 0,
	924, 0, 0, 932, 0, 0, 920, 921, 922, 0,
	919, 916, 917, 918, 910, 911, 912, 913, 915, 0,
	935, 0, 0, 0, 1224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 914, 2043, 920, 921,
	922, 0, 919, 916, 917, 918, 910, 911, 912, 913,
	915, 0, 935, 0, 1437, 933, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 925, 0, 0, 906,
	907, 939, 926, 927, 928, 936, 937, 938, 934, 0,
	0, 0, 0, 931, 0, 929, 0, 0, 0, 924,
	0, 0, 909, 0, 0, 940, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 930, 908, 0, 0, 0, 0, 0,
	923, 0, 0, 0, 0, 0, 0, 2042, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 920,
	921, 922, 0, 919, 916, 917, 918, 910, 911, 912,
	913, 915, 0, 935, 0, 925, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 914,
	0, 1502, 0, 0, 1501, 906, 907, 0, 926, 927,
	928, 936, 937, 938, 0, 0, 0, 0, 933, 941,
	0, 929, 0, 0, 0, 0, 1140, 0, 909, 0,
	0, 940, 0, 0, 939, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	908, 0, 924, 0, 0, 932, 923, 0, 920, 921,
	922, 0, 919, 916, 917, 918, 910, 911, 912, 913,
	915, 0, 935, 0, 0, 0, 930, 0, 0, 0,
	0, 0, 0, 0, 1141, 0, 0, 0, 944, 0,
	0, 0, 0, 0, 906, 907, 0, 926, 927, 928,
	936, 937, 938, 0, 0, 914, 0, 0, 0, 0,
	929, 0, 0, 0, 943, 0, 0, 909, 925, 0,
	940, 0, 0, 0, 933, 941, 0, 0, 0, 0,
	934, 0, 0, 0, 0, 0, 0, 0, 0, 908,
	939, 0, 0, 0, 0, 923, 0, 0, 0, 0,
	0, 0, 931, 0, 0, 0, 0, 0, 924, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 930, 0, 0, 0, 0, 0, 932, 0,
	0, 920, 921, 922, 914, 919, 916, 917, 918, 910,
	911, 912, 913, 915, 0, 935, 0, 0, 0, 0,
	0, 0, 0, 933, 941, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 925, 0, 0, 906, 907, 939,
	926, 927, 928, 936, 937, 938, 934, 0, 0, 0,
	0, 931, 0, 929, 0, 0, 0, 924, 0, 0,
	909, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 930, 908, 0, 0, 0, 0, 0, 923, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 932, 0, 0, 920, 921, 922,
	0, 919, 916, 917, 918, 910, 911, 912, 913, 915,
	0, 935, 0, 925, 0, 906, 907, 0, 926, 927,
	928, 936, 937, 938, 0, 934, 0, 914, 0, 0,
	0, 929, 0, 0, 0, 0, 0, 0, 909, 0,
	0, 940, 0, 0, 0, 0, 933, 941, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	908, 0, 939, 0, 0, 0, 923, 0, 0, 0,
	0, 0, 0, 0, 931, 0, 0, 0, 0, 0,
	924, 0, 0, 932, 0, 0, 920, 921, 922, 0,
	919, 916, 917, 918, 910, 911, 912, 913, 915, 0,
	935, 0, 0, 0, 930, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 914, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 933, 941, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 925, 0, 906, 907,
	939, 926, 927, 928, 936, 937, 938, 0, 934, 0,
	0, 0, 931, 0, 929, 0, 0, 0, 924, 0,
	0, 909, 0, 0, 940, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 930, 908, 0, 0, 0, 0, 0, 923,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 920,
	921, 922, 0, 919, 916, 917, 918, 910, 911, 912,
	913, 915, 0, 935, 925, 0, 906, 907, 0, 926,
	927, 928, 936, 937, 938, 0, 934, 0, 914, 0,
	0, 0, 929, 1508, 0, 0, 1503, 0, 0, 909,
	0, 0, 940, 0, 0, 0, 1639, 933, 941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 908, 0, 939, 0, 0, 0, 923, 0, 0,
	0, 0, 0, 0, 0, 931, 0, 0, 0, 0,
	0, 924, 0, 0, 932, 0, 0, 920, 921, 922,
	0, 919, 916, 917, 918, 910, 911, 912, 913, 915,
	0, 935, 0, 0, 0, 930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 914, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 933, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 925, 0, 906,
	907, 939, 926, 927, 928, 936, 937, 938, 0, 934,
	0, 0, 0, 931, 0, 929, 0, 0, 0, 924,
	0, 0, 909, 0, 0, 940, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 930, 908, 0, 0, 0, 0, 0,
	923, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	920, 921, 922, 0, 919, 916, 917, 918, 910, 911,
	912, 913, 915, 0, 935, 925, 0, 906, 907, 0,
	926, 927, 928, 936, 937, 938, 0, 934, 0, 914,
	0, 0, 0, 929, 0, 0, 0, 1461, 0, 0,
	909, 0, 0, 940, 0, 0, 0, 0, 933, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 908, 0, 939, 0, 0, 0, 923, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	0, 0, 924, 0, 0, 932, 0, 0, 920, 921,
	922, 0, 919, 916, 917, 918, 910, 911, 912, 913,
	915, 0, 935, 0, 0, 0, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 914, 1468, 0,
	0, 0, 0, 0, 906, 907, 0, 926, 927, 928,
	936, 937, 938, 0, 0, 0, 933, 941, 0, 0,
	929, 0, 0, 0, 0, 0, 0, 909, 925, 0,
	940, 0, 939, 0, 0, 0, 0, 0, 0, 0,
	934, 0, 0, 0, 931, 0, 0, 0, 0, 908,
	924, 0, 0, 0, 0, 923, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 0,
	0, 920, 921, 922, 914, 919, 916, 917, 918, 910,
	911, 912, 913, 915, 0, 935, 925, 0, 0, 0,
	0, 0, 0, 933, 941, 0, 906, 907, 934, 926,
	927, 928, 936, 937, 938, 0, 0, 0, 0, 939,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 909,
	0, 931, 940, 0, 0, 0, 0, 924, 0, 0,
	0, 0, 906, 907, 0, 926, 927, 928, 936, 937,
	938, 908, 0, 0, 0, 0, 0, 923, 0, 0,
	0, 930, 0, 0, 0, 909, 932, 0, 940, 920,
	921, 922, 0, 919, 916, 917, 918, 910, 911, 912,
	913, 915, 0, 935, 0, 0, 0, 908, 0, 0,
	0, 0, 0, 923, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 925, 0, 0, 914, 0, 0, 0,
	0, 0, 0, 0, 0, 934, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 933, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 914, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 931, 0, 0, 0, 0, 0, 924,
	0, 933, 941, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 920, 921, 922, 0,
	919, 916, 917, 918, 910, 911, 912, 913, 915, 931,
	935, 0, 0, 0, 0, 924, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 793,
	785, 810, 778, 801, 800, 925, 0, 780, 779, 0,
	0, 0, 812, 811, 0, 0, 0, 934, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 925, 0, 806, 0, 798, 797, 0, 0, 0,
	0, 0, 0, 934, 796, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 795, 0, 0, 0, 932, 0, 0, 920, 921,
	922, 0, 919, 916, 917, 918, 910, 911, 912, 913,
	915, 0, 935, 0, 0, 0, 0, 0, 0, 788,
	787, 789, 790, 791, 0, 809, 0, 0, 0, 0,
	0, 932, 0, 0, 920, 921, 922, 0, 919, 916,
	917, 918, 910, 911, 912, 913, 915, 0, 935, 782,
	0, 0, 0, 0, 0, 793, 785, 810, 778, 801,
	800, 799, 0, 780, 779, 786, 0, 0, 812, 811,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	794, 0, 0, 0, 1159, 1157, 1158, 1161, 1160, 806,
	0, 798, 797, 0, 0, 0, 0, 0, 0, 0,
	796, 0, 0, 0, 0, 0, 0, 783, 0, 0,
	0, 0, 0, 0, 0, 792, 784, 795, 0, 0,
	0, 0, 0, 0, 814, 0, 0, 0, 0, 0,
	0, 0, 781, 0, 0, 807, 808, 0, 0, 0,
	0, 0, 0, 0, 0, 788, 787, 789, 790, 791,
	0, 809, 0, 0, 0, 0, 0, 0, 0, 813,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 782, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 799, 0, 0,
	0, 786, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 794, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 783, 0, 0, 0, 0, 0, 0,
	0, 792, 784, 0, 0, 0, 0, 0, 0, 0,
	814, 0, 0, 0, 0, 0, 0, 0, 781, 0,
	0, 807, 808, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 813,
}
var sqlPact = [...]int{

	197, -1000, 54, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 717, 14768,
	14768, 18321, -1000, -1000, -1000, -1000, -1000, -1000, 790, 707,
	193, 4800, 18321, 18321, 18050, 1061, 1061, 19676, -1000, -1000,
	22928, -1000, 2552, 541, 542, 541, 541, 533, 19676, 609,
	676, 139, -1000, 692, 44, 22657, 18321, 1390, 49, 16695,
	357, 197, 17779, 22386, 18321, 17508, 606, 47, 15326, 18321,
	-1000, 58, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1239, 391, 58, -1000, 1238,
	1147, 1145, 16695, 22115, 21844, 21573, 21302, -1000, 11379, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	753, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 362, 361, -1000, 17237, -1000, 993, -1000, 48, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 992, -1000, 18321,
	-1000, -1000, 21031, 20760, 359, 965, -1000, -1000, 588, 435,
	1420, -1000, 60, -1000, -1000, -1000, 1237, -1000, 989, 1236,
	1232, 1231, 1230, 1229, 1228, 433, 942, 514, -1000, 965,
	-1000, 965, -1000, -1000, -1000, 605, 19676, -1000, 16695, -1000,
	20489, 18321, 18321, 1167, 20218, -1000, 692, -1000, -1000, -1000,
	1033, 1381, 1381, 1381, 1403, 179, 178, 139, 18, 18321,
	-1000, 358, 18, 6607, 6607, -1000, -1000, 357, -1000, 363,
	14202, -1000, 7843, -1000, 949, 1295, 470, 713, 1294, -78,
	834, 832, 1293, 15055, 15326, 47, 45, -1000, -1000, -1000,
	4505, 15055, 669, 13389, 58, -1000, -1000, -1000, 16695, 18321,
	18321, 720, 19947, -1000, 1292, 122, 1289, -1000, 118, 1280,
	-1000, 118, 1278, 38, -1000, -1000, -1000, -1000, -1000, -1000,
	357, 16966, 18321, 1478, 26658, -1000, 9649, -1000, -1000, 14768,
	873, 14768, -1000, -1000, 1461, -1000, 9649, -1000, 42, 41,
	1091, 1111, 11960, 11676, 1343, 714, -1000, -1000, -1000, 59,
	4800, 18321, 1246, 14768, 18321, 18321, 18321, 18321, 18321, 18321,
	-1000, 1088, -1000, -1000, 18321, 18321, -1000, 39, 36, -1000,
	19676, -1000, 133, -1000, 355, 1058, 442, 195, 19405, 442,
	1056, -1000, 1033, -1000, 944, 1084, 8758, 9649, 139, -1000,
	-1000, 139, 139, 9649, -1000, -1000, 18321, 18, 1458, 18321,
	76, -1000, 25444, -1000, -1000, 9649, 9649, 9649, 9649, 9649,
	886, 381, -1000, 354, 352, 5713, -1000, -1000, 1568, -1000,
	-1000, -1000, 186, -1000, -1000, 9649, 58, -1000, -1000, -1000,
	-1000, 345, 1578, 495, -1000, -1000, -1000, 439, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1245, 342, 339,
	-1000, -1000, -1000, -1000, 338, 337, 336, 335, 334, 333,
	332, 330, 328, 326, 324, 321, 313, 312, 311, 864,
	-1000, 468, -1000, -1000, 468, 468, -1000, 305, 305, 309,
	-1000, -1000, -1000, -1000, 305, -1000, -1000, -1000, 427, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 310, 76, -1000, -1000,
	-1000, 18321, 37, -1000, 26214, -1000, -53, 768, -1000, 16153,
	1369, 1367, 1366, 16695, 1426, 1422, 603, 18321, 18321, 602,
	600, 16695, 407, -1000, -1000, -1000, 18321, -1000, -1000, -104,
	-1000, -1000, 1227, 33, -1000, -1000, 452, 83, 1449, 83,
	13660, -1000, 18321, 18321, -1000, 18321, -1000, -1000, 18321, -1000,
	18321, 18321, -1000, 18321, 144, 15611, 814, 1277, 674, 44,
	32, -1000, 1482, -1000, -1000, -1000, -1000, 100, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 309, 864, 305, 305, 305,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 427, -1000, -1000,
	468, 468, 468, -1000, -1000, 28, 26214, 599, -1000, 1226,
	538, 27, 859, 1142, 884, -1000, -1000, -1000, -1000, 13,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1562, -1000, -1000, 1567, 13, -1000, -1000, -1000, -1000, -1000,
	1577, -1000, -1000, -1000, 4800, -1000, -1000, -1000, 18321, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 859,
	1142, -1000, -1000, 16695, 15882, 1446, 1275, 874, -1000, 1442,
	18321, 979, 1052, -1000, 592, 1274, -1000, -1000, -1000, -1000,
	26214, -1000, 26214, 750, 1152, -1000, 1152, -15, -1000, 25355,
	-1000, 304, 26, 452, 6607, 13102, 26522, 26658, 18321, 621,
	9649, 9649, 9649, 9649, 9649, 9649, 9649, 9649, 9649, 9649,
	9649, 9649, 9649, 9649, 9649, 9649, 9649, 9649, 9649, 9649,
	9649, 9649, 1027, 9649, 593, 9649, 9649, 9649, 9649, 773,
	913, 287, 921, 4800, -1000, -1000, 684, 684, 684, 26336,
	26336, 263, 381, -1000, 9649, -1000, 8437, 178, 24894, -17,
	-1000, -1000, -1000, 6307, 466, 26214, 58, 5095, -1000, 627,
	1564, 1255, 1193, 300, 176, 172, 9649, 9649, 9946, 9946,
	9649, 10243, 9649, 9649, 6010, 9649, 9649, 9649, 9649, 9649,
	9649, -1000, 299, -1000, -1000, -1000, -1000, 1549, -1000, -1000,
	1547, -1000, 614, 610, 1544, 452, 168, 7843, -1000, 814,
	18321, 18321, 18321, -1000, -1000, 1051, 19134, 1046, 26658, 18321,
	-1000, 298, 294, 1132, 1124, 18321, 18321, 18863, 18592, 18321,
	829, 293, 290, 18321, 824, -1000, 18321, 18321, 804, 1181,
	1009, -1000, 445, 15055, 661, 1225, 18321, 757, 9649, 852,
	-1000, 12815, 474, 18321, 794, 70, -1000, -1000, -1000, 401,
	18321, -1000, -1000, -1000, 122, -1000, 118, 118, -1000, -1000,
	16695, -1000, -1000, -1000, -1000, -1000, -1000, 26658, 379, 375,
	-1000, 1536, 583, -1000, 579, 578, 575, -1000, 289, -1000,
	9649, 18321, 18321, 1142, -1000, -1000, -1000, -1000, 741, -1000,
	848, -1000, 12244, -1000, -1000, -1000, 627, -1000, -54, -1000,
	-1000, -1000, -1000, 165, 22, -28, 26658, -1000, -1000, -1000,
	-1000, -1000, 18321, 327, 18321, 44, 18321, -1000, 1574, 44,
	18321, 1273, 1304, 397, 18321, -1000, -1000, -1000, 9649, -1000,
	-1000, -1000, 44, -1000, 1192, -1000, -114, 1213, -145, 170,
	413, -1000, 12528, 1263, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 428, 356, 356, 497, 497, 497,
	497, 604, 604, 587, 2113, 3651, 3651, 3651, 2001, 225,
	225, 3651, 3651, 3651, 26336, 25027, 1012, 9649, 9649, 573,
	891, 287, 1012, 9649, 1557, 1012, 1012, 1012, -1000, 928,
	-1000, -1000, -1000, 1223, 286, 10243, 10243, -1000, -1000, -1000,
	5713, 10837, -1000, -1000, -1000, -1000, -1000, 285, 9649, -1000,
	24926, -165, 11, -1000, -1000, 9649, -85, -89, -1000, -1000,
	655, -1000, 9649, -1000, -5, 9649, 9649, 9649, 160, -1000,
	157, 898, 284, 283, 9649, -1000, -1000, 26107, 23519, 156,
	1222, -128, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 155,
	154, 26019, -128, 153, 2225, -1000, 10243, 10243, 10243, 5713,
	276, 152, 25249, -128, 25886, 8140, 8140, 8140, 151, 25798,
	9649, -128, 23488, 3707, 3223, 9, 5, 4, 1534, 3,
	149, 418, 417, 145, 1192, -1000, -1000, -1000, -1000, 567,
	556, 1272, -1000, 1044, -1000, 480, -1000, 777, 9649, 18321,
	273, 272, 857, -1000, 1271, 988, 1270, 988, -1000, -53,
	754, 9649, 9649, -1000, 555, -1000, -1000, 550, 445, 1221,
	637, -1000, 926, -1000, -1000, 658, -1000, -1000, 6607, 26214,
	-1000, 767, 1371, -1, -1000, -1000, 6607, 452, 13660, 13102,
	7843, -8, -1000, -1000, -1000, 814, -1000, 586, 1531, 142,
	1068, 915, 766, 735, 1524, 26214, -54, -54, -1000, -1000,
	-1000, -1000, -1000, -1000, 18321, 1171, -1000, 15882, 271, 18321,
	266, -1000, 264, -1000, -1000, 261, 18321, 1103, 397, 15055,
	-1000, 442, -1000, 141, 1189, 1401, -1000, 13102, 1140, 1138,
	13102, 1055, 903, 903, 903, -1000, 413, 4199, 9649, 16424,
	929, 87, 140, 1213, 148, 9649, 1012, 1012, 9649, 10243,
	10243, -1000, 1012, -1000, -1000, -1000, -1000, 1215, 258, 9649,
	26658, 24321, 3332, -16, -1000, 7522, -55, -1000, 9649, -1000,
	24687, -1000, -1000, 374, 1301, -1000, 9649, 25665, 137, 7225,
	-1000, 25577, -12, -12, -1000, 1573, -1000, 13931, 455, 922,
	24582, 26522, 26658, -1000, 9649, -1000, -1000, 1212, 9649, -1000,
	26522, 26658, 10243, 10243, 10243, 10243, 10243, 10243, 10243, 10243,
	10243, 10243, 10243, 10243, 10243, 10243, 10243, 10243, 10243, 10243,
	10243, 1095, 10243, 1526, 1526, 1526, -60, 6904, -1000, 1243,
	1212, 9649, 9649, 26658, 119, 115, 112, -1000, 9649, -128,
	9649, 9649, 9649, -1000, -1000, -1000, 109, -1000, 1513, -1000,
	-1000, -1000, -1000, 1189, 18321, 18321, 18321, 1268, -1000, 1185,
	-1000, 24373, -18, 18321, 18321, -1000, 1126, 1129, 519, 18321,
	-1000, 18321, -1000, 18321, 18321, 18321, -20, -24, 18321, 18321,
	-1000, 15055, 607, 253, -1000, -79, 6607, 259, 44, -79,
	757, -1000, -62, -1000, 398, -1000, 372, 370, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 106, -1000, -1000, 1175,
	-1000, 11108, 252, 18321, 15882, 1439, 11108, 974, 1109, 397,
	15055, -1000, 592, -1000, 450, 9649, 9649, 1213, 13102, 13102,
	940, 1130, 13102, -1000, -1000, -1000, -1000, 16424, -1000, 1114,
	-31, -1000, -1000, 18321, 244, -1000, 413, 368, 11379, 589,
	1012, 3261, 2211, 9649, 26658, 26372, -32, 9649, 9649, -1000,
	-38, -1000, 9649, 364, 26214, -1000, -1000, -1000, 26214, 9649,
	1528, 9649, 104, 103, 101, -1000, -1000, -1000, 23199, 9649,
	98, -1000, 95, 92, 26214, 1243, 26214, -1000, -1000, 615,
	615, 1526, 1526, 1526, 1526, 673, 673, 952, 2050, 211,
	211, 211, 831, 625, 625, 211, 211, 211, 1202, 1098,
	241, 24790, 9649, -39, -1000, -1000, -1000, 26214, 26214, 88,
	-1000, -1000, -1000, -128, 2682, 24342, 24266, -1000, 84, 450,
	-1000, -1000, -1000, 18321, -1000, 18321, -1000, 18321, 18321, 1204,
	1028, -1000, -1000, 1123, 239, 10243, 18321, -1000, 844, -66,
	-68, 1020, -1000, 1017, 9649, -1000, 26658, 988, 988, -1000,
	547, 545, -1000, -1000, -1000, -1000, -64, 14497, 1572, -79,
	1309, 18321, 1359, -1000, -1000, 238, -1000, -1000, -1000, 889,
	-70, -1000, 320, 1379, 9649, -1000, -1000, 236, 11108, -72,
	78, 44, -80, 18321, -1000, 397, 15055, -1000, 1304, -1000,
	18321, 26214, -128, -1000, 940, -1000, 231, 9649, 13102, -1000,
	-1000, -162, -1000, 396, -1000, 413, 229, 18321, 16424, 413,
	-81, 9649, 9649, 26372, -93, -1000, 1012, 1012, -1000, 24235,
	-1000, 26214, -1000, 25577, -1000, -1000, -1000, 881, -1000, 23927,
	-1000, -1000, -1000, -1000, 10243, 1201, 228, 26658, 23891, -1000,
	-1000, 9649, -1000, -1000, -1000, -1000, -1000, 1032, -1000, -1000,
	18321, 1029, -1000, -1000, 9649, 24790, 227, 1171, 215, -1000,
	-1000, -1000, 854, -1000, -1000, 26214, 1383, -1000, -1000, 18321,
	18321, -1000, 212, 58, -97, -1000, 395, 601, -106, 18321,
	-1000, -1000, 5416, 18321, 844, 11108, 1376, 58, 18321, 1376,
	23839, 5095, -110, -1000, 1171, -1000, 844, 210, 15055, -1000,
	1103, -105, -1000, 1436, -1000, 18321, 26214, -1000, 1114, -1000,
	4800, 16424, 18321, -119, -1000, 16424, 144, 1012, 1012, -1000,
	-1000, 74, 922, 1387, -1000, 24003, 10243, 26658, -121, -1000,
	23579, -1000, -1000, 1267, 3739, 1073, 18321, -1000, 18321, 18321,
	490, 18321, -1000, -1000, 9649, 1572, -1000, -1000, 1571, 718,
	-1000, 452, -1000, 207, 1171, -1000, -1000, -1000, -1000, 1379,
	-5, 844, -1000, 1171, 11108, -1000, 1109, 18321, 196, -127,
	-1000, -1000, -1000, -131, -1000, -1000, 146, -1000, 853, 9649,
	24003, -139, -1000, -1000, 1258, -1000, 966, 923, 72, -146,
	195, -1000, 9649, -1000, -12, -1000, -1000, 13660, -1000, 18321,
	-1000, 1376, 71, 1171, -1000, -148, -1000, -1000, -1000, -1000,
	-1000, 413, 66, 9352, 9352, -128, -1000, 18321, -1000, 971,
	968, 697, -1000, -1000, -1000, -1000, -1000, 1073, 26214, 65,
	-129, -150, -1000, -1000, -1000, 844, 16424, -1000, -1000, -1000,
	10540, 978, 746, 25116, -1000, -1000, -1000, 1314, -1000, 506,
	1053, 1053, 966, 1528, -1000, 941, 1171, -1000, 1487, -1000,
	-1000, -1000, -1000, -1000, -1000, 1499, -1000, -1000, 1107, -1000,
	-1000, -1000, -1000, -1000, -1000, 9055, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1823, 1822, 1405, 1563, 1817, 1813, 1561, 1812, 1810,
	1809, 1808, 1807, 1805, 118, 1559, 1529, 24, 1523, 1804,
	111, 1803, 1802, 1801, 116, 1799, 1798, 1797, 56, 1792,
	1787, 1517, 1440, 1784, 1781, 114, 1780, 17, 1777, 94,
	1776, 34, 166, 2282, 143, 1774, 1773, 1772, 15, 124,
	90, 1770, 65, 1769, 1768, 63, 46, 26, 20, 1766,
	127, 135, 1419, 36, 1763, 1762, 149, 1761, 47, 29,
	2142, 155, 156, 133, 131, 1760, 1756, 1755, 1753, 72,
	1752, 6, 1751, 1748, 28, 87, 21, 1747, 19, 23,
	1746, 1745, 139, 1744, 93, 122, 1427, 33, 132, 12,
	1739, 81, 13, 95, 1719, 1716, 1716, 138, 40, 1715,
	49, 100, 145, 1714, 64, 158, 96, 41, 88, 121,
	1713, 1712, 1710, 108, 1707, 112, 140, 1705, 1703, 97,
	1701, 144, 146, 1700, 1699, 137, 1698, 1697, 1691, 160,
	1690, 1688, 159, 1687, 11, 53, 82, 8, 1415, 1414,
	123, 83, 1682, 22, 1680, 2162, 770, 247, 52, 102,
	85, 55, 104, 69, 84, 25, 1679, 1678, 125, 1676,
	1675, 1674, 1673, 1672, 101, 1671, 1666, 91, 148, 39,
	3, 10, 107, 35, 86, 105, 130, 154, 126, 1665,
	106, 129, 62, 198, 1664, 1663, 1251, 134, 1662, 1659,
	1655, 1116, 997, 665, 150, 1652, 1646, 390, 287, 1645,
	1641, 77, 1640, 142, 1639, 1637, 153, 212, 27, 1636,
	58, 92, 113, 1632, 71, 0, 2186, 2107, 1630, 136,
	98, 1628, 1626, 1624, 1620, 50, 2, 7, 5, 9,
	4, 61, 60, 1618, 1617, 141, 37, 89, 1616, 157,
	1610, 1605, 1604, 54, 1602, 18, 1598, 16, 1597, 1596,
	14, 1, 147, 1594, 120, 1592, 1436, 1590, 152, 1588,
	1587, 1509, 68, 110,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 50, 50, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 47, 47,
	52, 52, 52, 54, 54, 51, 51, 46, 46, 5,
	5, 224, 224, 36, 36, 40, 40, 37, 38, 38,
	39, 39, 6, 6, 6, 7, 7, 7, 7, 7,
	7, 14, 15, 15, 15, 15, 15, 15, 15, 15,
	98, 98, 97, 97, 100, 100, 16, 16, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 192,
	192, 191, 19, 166, 166, 20, 20, 20, 20, 21,
	124, 124, 22, 22, 22, 22, 23, 27, 262, 262,
	262, 266, 266, 267, 267, 268, 268, 268, 268, 268,
	268, 268, 264, 264, 30, 30, 30, 30, 30, 143,
	139, 139, 141, 141, 141, 141, 61, 138, 138, 138,
	138, 140, 140, 140, 140, 217, 216, 216, 222, 222,
	222, 76, 76, 76, 76, 76, 77, 77, 77, 215,
	215, 215, 215, 223, 223, 223, 223, 223, 223, 78,
	78, 78, 221, 221, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 18, 263, 263, 265, 265, 32,
	32, 10, 10, 11, 11, 79, 79, 80, 80, 146,
	146, 146, 146, 81, 81, 53, 53, 53, 145, 233,
	233, 234, 234, 234, 234, 234, 234, 235, 235, 235,
	235, 235, 235, 235, 231, 231, 232, 229, 229, 230,
	230, 230, 230, 269, 269, 144, 144, 84, 84, 238,
	238, 238, 238, 236, 236, 236, 236, 236, 239, 237,
	240, 240, 240, 240, 240, 178, 178, 178, 34, 12,
	59, 59, 13, 9, 9, 128, 128, 88, 88, 183,
	183, 183, 69, 69, 48, 48, 48, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 129, 129,
	130, 130, 25, 29, 33, 33, 33, 33, 33, 271,
	271, 65, 65, 65, 65, 66, 66, 142, 142, 142,
	142, 142, 60, 8, 8, 55, 55, 56, 56, 57,
	57, 58, 58, 272, 272, 24, 24, 24, 24, 24,
	72, 72, 135, 135, 135, 137, 137, 136, 136, 136,
	114, 114, 35, 93, 93, 102, 102, 103, 103, 189,
	104, 104, 28, 28, 43, 43, 41, 41, 41, 41,
	41, 41, 42, 42, 44, 44, 44, 44, 44, 44,
	44, 246, 246, 246, 249, 249, 245, 247, 247, 248,
	248, 270, 270, 115, 115, 115, 83, 82, 82, 86,
	86, 85, 87, 87, 182, 112, 112, 112, 112, 131,
	132, 132, 133, 133, 134, 134, 111, 111, 163, 163,
	45, 45, 92, 92, 94, 94, 153, 153, 154, 154,
	152, 152, 152, 184, 184, 184, 184, 184, 184, 184,
	181, 181, 185, 185, 185, 185, 185, 185, 179, 179,
	179, 179, 180, 180, 190, 190, 118, 118, 118, 118,
	116, 116, 117, 117, 186, 186, 186, 186, 113, 113,
	187, 187, 187, 147, 147, 193, 193, 193, 211, 211,
	91, 91, 91, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 195,
	195, 195, 195, 197, 197, 197, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	210, 210, 210, 210, 210, 198, 198, 205, 205, 206,
	206, 207, 208, 199, 199, 200, 200, 201, 202, 209,
	209, 209, 209, 213, 213, 203, 203, 203, 203, 203,
	204, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 126, 126, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 157, 157, 157,
	157, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 241, 241, 241, 241, 241, 241, 241, 243,
	243, 244, 244, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	250, 250, 251, 251, 253, 253, 254, 254, 255, 256,
	256, 256, 257, 258, 258, 252, 252, 259, 259, 259,
	260, 260, 261, 261, 261, 261, 261, 168, 168, 168,
	169, 169, 170, 176, 176, 176, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 67, 67, 67, 67, 67, 99, 99, 165,
	165, 164, 164, 164, 167, 167, 119, 119, 212, 212,
	212, 212, 212, 212, 212, 120, 120, 120, 127, 121,
	121, 122, 122, 122, 122, 122, 122, 160, 161, 123,
	123, 123, 162, 162, 171, 175, 175, 174, 173, 173,
	172, 172, 150, 150, 151, 151, 149, 148, 108, 108,
	107, 107, 105, 105, 106, 106, 273, 273, 177, 177,
	109, 109, 110, 101, 101, 188, 188, 188, 188, 95,
	95, 74, 74, 96, 96, 70, 70, 73, 73, 71,
	71, 71, 71, 89, 89, 90, 90, 68, 68, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	214, 214, 214, 62, 62, 62, 63, 63, 64, 64,
	219, 219, 219, 220, 220, 220, 220, 218, 218, 218,
	218, 218, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 4,
	6, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 7,
	6, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 1, 1, 1, 1, 1,
	1, 6, 3, 5, 4, 6, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 2, 4, 2, 4,
	4, 4, 4, 4, 4, 4, 2, 3, 4, 3,
	3, 4, 4, 2, 2, 2, 0, 2, 0, 8,
	8, 7, 10, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 5,
	2, 0, 6, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 1, 3,
	3, 0, 3, 8, 11, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 0, 8, 2, 0, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 1, 1, 8, 8, 1, 2, 4, 4,
	4, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 4, 6, 3, 1, 5, 6, 9,
	2, 0, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 6, 4, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 0, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 3, 5, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -27, -29,
	-28, -30, -31, -32, -33, -25, -34, -35, 23, 34,
	220, 65, -8, -9, -10, -11, -12, -13, -248, 93,
	101, 123, 203, 100, 86, 117, 223, 231, -41, -43,
	239, -143, 240, 35, 249, 59, 96, 225, 219, 271,
	67, -246, -44, -42, 319, 294, 300, 234, -45, 257,
	286, 322, 257, 132, 79, 289, -262, -96, 257, 79,
	-71, -62, 312, 4, -225, -227, 20, 21, 23, 33,
	34, 35, 40, 44, 47, 58, 59, 60, 62, 64,
	65, 66, 69, 70, 77, 78, 80, 82, 86, 88,
	92, 93, 95, 100, 101, 107, 108, 111, 113, 118,
	123, 124, 125, 126, 133, 136, 138, 131, 146, 148,
	149, 152, 151, 156, 159, 162, 164, 165, 166, 168,
	170, 171, 173, 175, 172, 178, 180, 181, 183, 186,
	189, 192, 195, 196, 197, 198, 201, 203, 205, 206,
	207, 209, 210, 212, 213, 214, 215, 216, 219, 217,
	218, 220, 221, 223, 225, 226, 228, 230, 231, 232,
	233, 236, 237, 239, 240, 242, 245, 248, 249, 250,
	253, 251, 247, 256, 258, 259, 260, 267, 271, 272,
	273, 274, 277, 278, 279, 281, 283, 284, 285, 290,
	295, 296, 297, 298, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 50, 51, 52, 54, 81, 83, 84,
	99, 102, 103, 109, 119, 121, 127, 128, 137, 139,
	140, 141, 143, 154, 167, 177, 179, 190, 194, 200,
	202, 208, 227, 235, 243, 244, 252, 254, 262, 263,
	264, 268, 269, 286, 287, -262, -70, -62, 79, 88,
	136, 279, 278, 79, 132, 257, 289, -17, 319, -28,
	-7, -15, -4, -24, -35, -14, -31, -18, -32, -16,
	23, -218, 4, -225, -227, -226, -228, 56, 68, 116,
	135, 129, 145, 147, 155, 157, 169, 191, 193, 224,
	241, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 48, 49, 53, 55, 57, 63, 67, 71, 72,
	73, 74, 75, 76, 85, 87, 89, 90, 91, 94,
	96, 98, 104, 105, 106, 112, 114, 115, 117, 120,
	122, 130, 132, 134, 142, 144, 150, 153, 158, 160,
	161, 174, 176, 182, 184, 185, 187, 188, 199, 204,
	211, 222, 234, 238, 246, 255, 257, 261, 265, 266,
	270, 275, 276, 280, 282, 288, 289, 291, 292, 293,
	294, -62, -62, -62, 203, 22, -266, 22, -267, -268,
	67, 93, 117, 234, 136, 88, 278, -266, -66, 231,
	-62, -139, 159, 237, 227, 267, -140, -138, -217, 262,
	168, -97, -62, 4, 22, 79, 58, 80, 118, 132,
	133, 63, 64, 149, 258, 262, 267, 67, 281, -271,
	267, 267, -271, -271, -65, 267, 265, -66, -270, 257,
	257, 280, 289, -128, 79, 276, -42, -44, -43, -85,
	-86, 275, 142, 98, 188, -41, -43, -246, -249, 209,
	-245, -62, -249, -82, -83, 22, 90, 323, -186, -70,
	185, -110, 319, -3, -186, 127, -70, -73, 127, -70,
	-62, -186, 127, 265, 323, -96, -89, -62, -149, -148,
	321, 115, 115, 319, -107, -108, -148, -149, 115, 144,
	144, -187, -186, -62, 127, -74, 127, -73, -98, 127,
	-97, -98, 127, -192, -191, -220, 4, -225, -227, -226,
	286, 257, 132, -166, 319, -124, 319, -62, 22, 184,
	323, 184, -62, -139, 52, -139, 319, -141, -60, -61,
	146, 205, 265, 304, 115, 298, -78, 5, 85, -100,
	321, 115, -263, 184, 115, 115, 115, 115, 115, 115,
	298, 146, 205, 230, 257, 289, -142, -60, -61, -142,
	265, -66, -113, -186, -97, 127, -62, -97, 132, -62,
	127, -85, -86, -112, -131, -132, 158, 182, -115, 22,
	90, -115, -115, 44, 320, 320, 323, -249, -90, 319,
	-101, -188, -155, 312, -157, 310, 311, 316, 174, 299,
	-168, -159, -171, 99, 227, 319, -70, -158, 324, 9,
	-243, -43, 29, -169, -170, 48, -62, 7, 8, 5,
	6, -68, -195, -204, 270, 104, 176, -241, -242, 4,
	-225, -219, -196, -206, -200, -203, 143, 56, 72, 75,
	73, 76, 238, 280, 49, 28, 102, 103, 194, 200,
	254, 268, 269, 127, 177, 128, 54, 119, 154, 92,
	37, 39, 41, 42, 50, 51, 81, 83, 84, 109,
	137, 139, 140, 141, 179, 208, 243, 252, 263, 264,
	287, -226, -207, -208, -201, -202, -209, -101, -110, 312,
	-70, 319, -109, -177, -155, 85, -50, 217, -49, 21,
	23, 93, 284, 99, 247, 247, 217, 99, 324, 217,
	217, 99, -221, -220, 5, -71, 323, -218, 312, -224,
	-221, 250, 320, -95, -70, -108, -187, -72, -70, -72,
	239, -62, 30, 99, -52, 323, 47, 221, 99, -52,
	323, 99, -52, 99, 320, 323, -186, 127, -73, 30,
	-165, -193, -194, -196, -205, -199, -203, -204, 40, 46,
	45, 260, 167, 235, 244, 38, 183, 138, 137, 139,
	140, 141, 243, 37, 208, 109, 92, 84, 83, 179,
	42, 41, -207, -208, -201, -202, 81, 263, 264, 143,
	39, 51, 50, 287, 252, -99, -155, -262, -268, -262,
	30, -99, 323, 323, 156, -77, 162, 173, 124, -216,
	85, -222, -215, -178, 9, 270, 104, 184, -221, 8,
	311, -214, 7, 310, -216, 85, 70, -223, 5, 4,
	-204, -178, 85, 159, 321, -218, -217, -265, 112, -262,
	-217, -217, -217, -217, -217, -62, 156, -217, -217, 323,
	323, -66, -52, 323, 319, -84, 174, -247, 294, -84,
	319, -63, 127, -62, -247, 174, -112, -132, -131, -133,
	-155, 22, -155, -157, -42, -42, -42, -87, -182, -155,
	-245, 30, -89, -92, 323, 115, 10, 11, 55, 33,
	310, 311, 312, 313, 110, 314, 307, 308, 309, 306,
	302, 303, 304, 61, 163, 229, 13, 14, 15, 26,
	187, 157, 299, 129, 241, 316, 16, 17, 18, 145,
	36, 130, -67, 30, 4, -75, -155, -155, -155, -155,
	-155, 193, -105, -150, 317, -43, 319, -43, -155, -99,
	7, -43, -164, 317, -172, -155, -107, 319, 5, 5,
	319, -250, 295, 112, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 202, -213, 290, -213, -213, -197, 319, -197, -198,
	319, -197, 296, 300, 319, -92, -70, 323, 320, 323,
	265, -129, 63, 57, -145, 127, 57, -229, -62, 63,
	-230, 53, 276, 204, 114, -129, 63, -129, 63, 63,
	-186, 33, 33, 265, -73, -62, 265, 265, -186, -190,
	301, -62, -190, 323, 115, 320, 323, -147, 292, -135,
	-28, 319, 85, 30, -135, -102, -103, -189, -104, -70,
	319, -62, -62, -73, -74, -97, -98, -98, -17, -191,
	99, -20, -28, -24, -35, -14, 320, 323, -91, 29,
	-125, 319, 297, 166, 82, 125, 165, -126, 233, 320,
	323, 265, 115, 267, 320, -61, -60, -76, 207, 245,
	218, 236, 323, 8, 7, 7, 5, -218, -264, -62,
	-61, -60, -186, -79, -89, -80, -62, -146, -145, -231,
	-232, -229, 132, 276, 105, 30, 99, -59, 198, 30,
	184, 174, -55, 259, 99, -134, 227, 228, 323, -48,
	31, 89, 319, 320, -147, -188, -94, -184, -186, -70,
	-43, -185, 319, 317, -211, -193, -210, 213, 214, 212,
	216, 215, -193, -97, 262, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, -155, -155, 157, 129, 241,
	36, 130, -155, 265, -155, -155, -155, -155, 176, 174,
	270, 104, 277, 90, 180, -273, 255, 32, -162, -43,
	319, -176, 27, 246, 22, -218, -168, 227, 319, -150,
	-155, -151, -99, 320, 320, 323, -99, -167, 318, -164,
	-175, -174, 291, 320, -99, 288, 22, 90, 312, -125,
	7, -251, 107, 120, 319, 320, 320, -155, -155, -119,
	-212, -99, 4, 297, 166, 82, 125, 165, 233, -119,
	-120, -155, -99, -121, -156, -157, 310, 311, 316, 319,
	227, -122, -155, -99, -155, 43, 153, 266, -123, -155,
	115, -99, -155, -155, -155, -99, -99, -99, 319, 7,
	7, 262, 262, 7, -147, 320, -177, -49, -70, -62,
	-62, 174, -145, 127, -54, 174, -193, -62, 319, 319,
	148, 148, -62, -62, 127, -62, 127, -62, -62, -50,
	217, 319, 319, -62, 217, -62, -70, 217, -36, 126,
	180, -39, 294, -221, 250, 115, -70, -114, 222, -155,
	-114, -137, 184, -95, 286, -62, 222, -93, 323, 115,
	304, -95, -52, -52, -52, -186, -193, 317, 317, 7,
	265, 265, 265, 265, 319, -155, -264, -264, -60, 274,
	60, 207, -222, -125, 323, 320, 320, 323, -63, 132,
	-63, -28, -97, 5, -28, -70, 99, -56, 95, -272,
	304, -62, -182, -20, -111, 120, -190, 323, 68, -118,
	147, 169, 116, 155, 224, 135, -152, 324, 319, -181,
	300, -43, -185, -184, 101, 298, -155, -155, 265, -273,
	255, -162, -155, 176, 270, 104, 277, 90, 180, 115,
	319, -156, -156, -99, -159, 319, -99, 318, 327, 320,
	-155, 318, 318, 323, -173, -174, 94, -155, -86, 323,
	-85, -155, -99, -99, 320, 320, -256, 192, 319, 319,
	-155, 30, 323, 320, 115, 320, 320, -127, 199, 320,
	10, 11, 310, 311, 312, 313, 110, 314, 307, 308,
	309, 306, 302, 303, 304, 61, 163, 229, 13, 14,
	15, 145, 130, -156, -156, -156, -99, 319, 320, -160,
	-161, 115, 112, 30, -123, -123, -123, 320, 115, -99,
	323, 323, 323, 320, 320, 320, 7, 320, 323, 320,
	298, 298, 320, -111, 265, 265, 99, 174, 283, -233,
	-230, -155, -89, 319, 319, -47, 93, 239, -130, 99,
	-52, 99, -52, 265, -129, 63, -99, -99, 265, 265,
	-39, 115, 256, 186, 250, -101, 222, 62, 320, -101,
	-147, -103, -94, -177, 320, 318, 7, 7, 320, 166,
	125, 165, -126, 165, -126, -126, 7, -62, -81, 131,
	-146, 319, -63, 319, 319, -84, 319, -62, -57, 152,
	-272, -221, -247, 320, -163, 122, 44, -184, 147, 147,
	-184, -118, 147, -116, 191, -116, -116, -181, -218, 325,
	-99, -180, -179, 30, -62, 189, 320, -17, 319, -155,
	-155, -156, -156, 115, 319, -155, -165, 26, 26, 320,
	-99, 320, 323, -151, -155, 320, -164, 96, -155, 261,
	320, 288, -86, -86, -86, 5, -257, -62, 319, 292,
	-85, 320, -211, -193, -155, -160, -155, -211, -193, -156,
	-156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
	-156, -156, -156, -156, -156, -156, -156, -156, 90, 174,
	180, -156, 323, -99, 320, -161, -160, -155, -155, -193,
	320, 320, 320, -99, -155, -155, -155, 320, 7, -163,
	-62, -62, -145, 99, -234, 63, -235, 55, 105, 67,
	174, 176, 276, 204, 53, 85, 211, 320, 320, -89,
	-89, 174, 85, 174, 85, 78, 272, -62, -62, -70,
	-62, -62, 320, 320, -62, -70, -224, 262, 319, -101,
	-136, 319, 184, -28, -114, 304, 318, 318, 320, 130,
	-88, -183, -62, -244, 319, -241, -242, -68, 319, -89,
	-79, 30, -88, 184, -58, 151, -272, -221, -55, -253,
	293, -155, -99, -184, -184, -117, 282, 184, 147, -184,
	-180, -154, -153, 113, 172, 320, -62, 319, -181, 318,
	-192, 26, 26, -155, -165, 320, -155, -155, 320, -155,
	318, -155, 5, -155, 320, 320, 320, -258, -62, -155,
	320, 320, 320, -161, 115, 90, 180, 319, -155, 320,
	320, 323, 320, 320, 320, -253, -145, -62, -97, -62,
	105, 127, 176, 148, 319, -156, -70, -144, -269, 66,
	253, 320, 320, 176, 176, -155, -193, -52, -52, 265,
	265, -158, -68, -62, -38, -37, 5, 91, -89, 63,
	-110, -43, 319, 195, 320, 323, -69, -107, 55, -69,
	-155, 319, -88, 320, 320, -28, 320, -70, -272, -221,
	-56, -254, -255, -62, -117, 319, -155, -184, 323, 326,
	304, -181, 319, -89, -179, -181, 320, -155, -155, 320,
	320, -86, -252, 197, 320, -156, 115, 319, -165, 320,
	-155, -235, -63, 174, -155, -64, 319, -81, 319, 211,
	-51, 55, -62, -62, 319, 323, 320, -40, 304, 278,
	175, 320, -62, -62, -144, -183, -48, -97, -48, 320,
	-99, 320, -81, -144, 319, -221, -57, 323, 30, -89,
	-153, -218, -180, -89, 320, -180, -17, 320, -86, 44,
	-156, -165, 320, 320, 99, 320, -238, 164, -62, -89,
	-70, -46, 282, -97, -99, -37, 5, 239, -147, 319,
	-81, -69, -86, -144, -81, -88, -58, -255, -257, 320,
	320, 318, -259, 206, 228, -99, 320, 105, -236, -239,
	-237, 184, 116, 196, 242, 320, 320, -84, -155, -86,
	-102, -89, -48, 320, -81, 320, -181, 320, -260, -261,
	36, 273, 70, -155, -260, -62, -237, 184, -239, 184,
	278, 88, -238, 320, -147, 320, -144, -180, -261, 201,
	111, 227, 201, 111, -240, 171, 221, 47, 239, -240,
	-236, -53, 47, 221, -81, 26, 20, 176, 85, -261,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 0, 0,
	0, 0, 75, 76, 77, 78, 79, 80, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 382, -2,
	0, 148, 0, 330, 0, 330, 330, 334, 0, 412,
	296, 409, -2, 420, 0, 0, 0, 418, 396, 0,
	0, -2, 0, 0, 0, 0, 0, 128, 0, 932,
	863, 869, 870, 893, 894, 895, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 0, 0, 865, 932, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	0, 214, 907, 908, 909, 910, 911, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
	1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
	1185, 114, 121, 122, 984, 124, 0, 131, 132, 133,
	135, 136, 137, 138, 139, 140, 141, 0, 323, 1005,
	336, 144, 961, 1009, 1079, 1024, 151, 161, 0, 1085,
	-2, 165, 92, 194, 195, 196, 0, 198, 216, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 213, 341,
	329, 341, 326, 327, 328, 331, 0, 322, 0, 411,
	0, 0, 0, 0, 0, 295, -2, 392, 393, -2,
	0, 415, 415, 415, 0, 0, 393, 0, 401, 988,
	404, 876, 402, 0, 0, 417, 416, 0, 397, 484,
	0, 440, 0, 2, 0, 1063, 484, 0, 1063, 868,
	0, 0, 1063, 0, 0, 129, 130, 873, 871, 872,
	0, 0, 0, 0, 866, 840, 838, 839, 0, 0,
	0, 0, 490, 82, 1063, 52, 1063, 861, 52, 1063,
	90, 52, 1063, 0, 109, 111, 903, 904, 905, 906,
	1090, 0, 0, 0, 0, 119, 0, 123, 125, 0,
	0, 0, 335, 145, 1052, 147, 0, 150, 152, 153,
	0, 0, 0, 0, 0, 0, 164, 189, 190, 93,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 209, 210, 0, 0, 324, 337, 338, 325,
	0, 333, 52, 488, 268, 1063, 408, 268, 897, 408,
	1063, -2, 0, 388, 427, 428, 0, 0, 0, 413,
	414, 0, 0, 0, 384, 385, 0, 403, 0, 0,
	443, 853, 857, 858, 587, 0, 0, 0, 0, 0,
	0, 677, 679, 1057, 1079, 0, 681, 682, 0, 684,
	686, 687, 0, 690, 691, 831, 865, 879, 880, 881,
	882, 0, 0, 0, 887, 888, 889, 731, 700, -2,
	-2, 877, 519, 520, 521, 522, -2, 1092, 704, 706,
	708, 709, 710, 711, 0, 1041, 1058, 1059, 1075, 1076,
	1084, 1088, 1089, 1063, 1072, 1064, 1053, 1061, 1070, 937,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 902, 549, 550, 555, 556, 558, 443, 441, 485,
	486, 0, 0, 850, 848, 849, 29, 319, 31, 0,
	319, 319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 475, 192, 193, 864, 0, 836, 837, 475,
	61, 72, 0, 0, 859, 841, 494, 0, 360, 0,
	0, 491, 0, 0, 84, 0, 50, 51, 0, 86,
	0, 0, 88, 0, 410, 0, 0, 1063, 0, 410,
	0, 789, 502, 503, 504, 505, 506, 584, 509, 510,
	511, 512, 513, 514, 515, 516, 517, 518, 526, 527,
	528, 529, 530, 531, 532, 546, 0, 525, 525, 525,
	538, 539, 547, 548, 553, 554, 565, 566, 568, 570,
	564, 564, 564, 561, 562, 0, 787, 0, 134, 0,
	0, 0, 0, 0, 0, 156, 176, 177, 178, 157,
	159, 166, 168, 169, 170, 179, 180, 181, 182, 285,
	0, 287, 890, 0, 158, 160, 162, 163, 183, 184,
	0, 186, 187, 188, 0, 94, 197, 199, 0, 215,
	200, 201, 202, 203, 204, 205, 208, 211, 212, 0,
	0, 332, 288, 0, 226, 0, 0, 291, 407, 0,
	0, 0, 1063, 896, 346, 0, 391, 425, 426, 429,
	432, 433, 430, 587, 398, 399, 400, 421, 422, 306,
	405, 0, 0, 494, 0, 0, 0, 0, 0, 0,
	766, 767, 768, 769, 770, 771, 774, 775, 772, 773,
	776, 777, 778, 0, 0, 0, 779, 780, 781, 0,
	0, 783, 0, 785, 0, 0, 0, 0, 0, 0,
	847, 0, 0, 0, 856, 782, 592, 593, 594, 616,
	617, 0, 678, 842, 835, 680, 0, -2, 787, 0,
	683, 688, 689, 0, 0, 830, -2, 0, 884, 584,
	0, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 810, 816, 0, 0, 0, 0, 0, 0, 0,
	0, 534, 552, 563, 560, 559, 536, 0, 535, 533,
	0, 537, 0, 0, 0, 494, 0, 0, 852, 0,
	0, 0, 0, 318, 33, 1063, 0, 54, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 64,
	0, 874, 71, 0, 0, 0, 0, 371, 0, 371,
	362, 0, 0, 0, 358, 374, 375, 377, 378, 0,
	0, 492, 83, 862, 52, 91, 52, 52, 97, 110,
	0, 112, 115, 116, 117, 118, 113, 0, 495, 497,
	507, 0, 571, 572, 573, 574, 575, 576, 585, 120,
	0, 0, 0, 0, 149, 154, 155, 342, 0, 173,
	0, 175, 0, 286, 892, 891, 584, 95, 217, 142,
	339, 340, 489, 0, 0, 225, 873, 227, 229, 230,
	231, 232, 897, 0, 897, 0, 0, 289, 0, 0,
	0, 0, 348, 354, 0, 431, 434, 435, 0, 424,
	304, 305, 410, 875, 437, 854, 475, 444, 452, 484,
	461, 456, 0, 0, 588, 498, 499, 540, 541, 542,
	543, 544, 589, 590, 0, 595, 596, 597, 598, 599,
	600, 601, 602, 603, 604, -2, -2, -2, 608, 609,
	610, -2, -2, -2, 614, 615, -2, 784, 786, 0,
	847, 0, -2, 0, 624, -2, -2, -2, 628, 0,
	631, 633, 635, 0, 0, 0, 0, 846, 645, 822,
	0, 0, 763, 764, 765, 855, 630, 0, 0, 843,
	834, 0, 0, -2, 685, 0, 0, 0, 793, 794,
	829, 825, 0, 692, 420, 0, 0, 0, 0, 885,
	0, 741, 0, 0, 0, 705, 707, 0, 0, 0,
	0, 797, -2, -2, -2, -2, -2, -2, -2, 0,
	0, 787, 807, 0, 0, 648, 0, 0, 0, 0,
	1079, 0, 787, 815, 0, 0, 0, 0, 0, 787,
	0, 821, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 437, 487, 851, 32, 308, 0,
	0, 0, 35, 1063, 43, 0, 240, 0, 0, 0,
	0, 0, 321, 44, 1063, 52, 1063, 52, 45, 30,
	319, 0, 0, 312, 0, 307, 310, 0, 71, 0,
	0, 60, 0, 62, 73, 0, 860, 81, 0, 493,
	355, 356, 0, 0, 364, 361, 0, 494, 0, 0,
	0, 0, 85, 87, 89, 0, 790, 0, 0, 0,
	0, 0, 0, 0, 0, 788, 126, 127, 146, 171,
	172, 174, 167, 185, 0, 234, 267, 0, 0, 897,
	0, 223, 268, 290, 292, 0, 0, 350, 354, 0,
	353, 408, 423, 0, 439, 0, 442, 0, 0, 0,
	0, 0, 481, 481, 481, 479, 461, 0, 0, 473,
	0, -2, 456, 0, 410, 0, -2, -2, 0, 0,
	0, 646, -2, 629, 632, 634, 636, 0, 0, 0,
	0, 0, 0, 0, 647, 0, 0, 832, 835, -2,
	788, 791, 792, 0, 0, 826, 0, 0, 0, 0,
	419, 420, 420, 420, 698, 0, 699, 0, 0, 0,
	0, 0, 0, 714, 0, 715, 716, 0, 0, 717,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 651, 652, 653, 0, 0, 718, 813,
	814, 0, 0, 0, 0, 0, 0, 723, 0, 820,
	0, 0, 0, 727, 728, 729, 0, 523, 0, 545,
	567, 569, 557, 439, 0, 0, 0, 0, 53, 238,
	257, 0, 0, 0, 0, 37, 0, 0, 0, 0,
	41, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 74, 370, 0, 369, 0, 359,
	371, 376, 373, 379, 0, 500, 0, 0, 508, 577,
	578, 579, 580, 581, 582, 583, 0, 143, 221, 0,
	228, 0, 0, 0, 226, 0, 0, 0, 352, 354,
	0, 345, 346, 406, 735, 0, 0, 445, 0, 0,
	0, 0, 0, 476, 480, 477, 478, 473, 450, 0,
	0, 455, 472, 0, 471, 460, -2, 0, 0, 591,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 823,
	0, 758, 0, 0, 834, -2, 795, 824, 828, 0,
	693, 0, 0, 0, 0, 886, 739, 740, 744, 0,
	0, 703, 0, 0, 796, 806, 808, 649, 650, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, -2,
	-2, -2, 667, 668, 669, -2, -2, -2, 0, 0,
	0, 809, 0, 0, 761, 811, 812, 817, 818, 0,
	720, 721, 722, 819, 0, 0, 0, 551, 0, 735,
	314, 316, 34, 0, 239, 0, 242, 0, 0, 0,
	0, 248, 249, 0, 0, 0, 0, 259, 266, 0,
	0, 0, 49, 0, 0, 320, 0, 52, 52, 309,
	0, 0, 219, 220, 313, 311, 63, 0, 0, 357,
	0, 0, 0, 363, 372, 0, 501, 496, 586, 0,
	0, 297, 303, 303, 0, 701, 702, 0, 0, 0,
	0, 0, 0, 0, 343, 354, 0, 347, 348, 394,
	0, 438, 436, 463, 0, 465, 0, 0, 0, 467,
	453, 0, 448, 0, 447, 461, 469, 0, 0, 461,
	0, 0, 0, -2, 0, 639, -2, -2, 757, 788,
	833, 827, 883, 420, 694, 696, 697, 746, 743, 0,
	730, 712, 713, 805, 0, 0, 0, 0, 788, 760,
	719, 0, 725, 726, 524, 395, 36, 0, 243, 244,
	897, 0, 247, 250, 0, 252, 899, 234, 0, 263,
	264, 261, 0, 38, 39, 48, 56, 40, 46, 0,
	0, 474, 0, 0, 0, 68, 66, 0, 0, 0,
	380, 381, 0, 0, 266, 0, 306, 878, 0, 306,
	0, 0, 0, 256, 234, 224, 266, 0, 0, 349,
	350, 734, 736, 0, 464, 0, 483, 466, 0, 451,
	0, 473, 0, 0, 457, 473, 410, -2, -2, 640,
	759, 0, 420, 0, 732, -2, 0, 0, 0, 762,
	0, 241, 245, 0, 0, 272, 0, 260, 0, 0,
	58, 0, 315, 317, 0, 0, 70, 67, 0, 0,
	366, 494, 368, 0, 234, 298, 299, 302, 300, 303,
	420, 266, 222, 234, 0, 351, 352, 0, 0, 0,
	449, 446, 454, 0, 470, 458, 0, 695, 749, 0,
	-2, 0, 675, 724, 0, 251, 277, 0, 0, 0,
	268, 42, 0, 55, 420, 69, 65, 0, 367, 0,
	254, 306, 0, 234, 293, 0, 344, 737, 738, 482,
	468, 461, 0, 0, 0, 745, 676, 0, 253, 273,
	274, 0, 269, 270, 271, 898, 265, 272, 57, 0,
	494, 0, 301, 693, 255, 266, 473, 742, 747, 750,
	-2, 1027, 929, 0, 748, 246, 275, 0, 276, 0,
	0, 0, 277, 0, 365, 237, 234, 459, 0, 752,
	753, 754, 755, 756, 278, 0, 281, 282, 0, 279,
	262, 233, 235, 236, 294, 0, 280, 283, 284, 751,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 308, 3, 314, 309, 3,
	319, 320, 312, 310, 323, 311, 321, 313, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 327, 322,
	302, 304, 303, 3, 324, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 317, 3, 318, 307, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 325, 306, 326, 316,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 305,
	57645, 315, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:763
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:769
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:775
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:801
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:818
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:828
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:859
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:868
		{
			return unimplemented(sqllex)
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:891
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:901
		{
			return unimplemented(sqllex)
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = nil
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = DropCascade
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = DropRestrict
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = DropDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:964
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:967
		{
			return unimplemented(sqllex)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:968
		{
		}
	case 59:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:972
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].str, IncrementalFrom: sqlDollar[6].union.strs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:976
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.strs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 64:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = []string(nil)
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 66:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.str = ""
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1031
		{
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1161
		{ /* SKIP DOC */
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1286
		{
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1348
		{
			return unimplemented(sqllex)
		}
	case 146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{ /* SKIP DOC */
		}
	case 149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			return unimplemented(sqllex)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			return unimplemented(sqllex)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = Low
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = Normal
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = High
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1521
		{
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1546
		{
			return unimplemented(sqllex)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			return unimplemented(sqllex)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1548
		{
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1740
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1744
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = DropDefault
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1754
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1960
		{
			return unimplemented(sqllex)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			return unimplemented(sqllex)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1962
		{
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1969
		{
			return unimplemented(sqllex)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1970
		{
			return unimplemented(sqllex)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			return unimplemented(sqllex)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			return unimplemented(sqllex)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1973
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			return unimplemented(sqllex)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1979
		{
			return unimplemented(sqllex)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1982
		{
			return unimplemented(sqllex)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1983
		{
			return unimplemented(sqllex)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1984
		{
			return unimplemented(sqllex)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1985
		{
			return unimplemented(sqllex)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			return unimplemented(sqllex)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2018
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = true
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = false
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2093
		{
			return unimplemented(sqllex)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2094
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2098
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = Ascending
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = Descending
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2152
		{
			return unimplemented(sqllex)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2153
		{
			return unimplemented(sqllex)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = true
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = false
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2167
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2200
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2209
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2210
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.str = ""
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.str = ""
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.str = ""
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.str = ""
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.str = ""
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.str = ""
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2332
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2333
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2352
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2359
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2401
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			return unimplemented(sqllex)
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 372:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2430
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2431
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2658
		{
			return unimplemented(sqllex)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2659
		{
			return unimplemented(sqllex)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2660
		{
			return unimplemented(sqllex)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2663
		{
			return unimplemented(sqllex)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			return unimplemented(sqllex)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2667
		{
			return unimplemented(sqllex)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
		}
	case 408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2671
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2674
		{
			return unimplemented(sqllex)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2675
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2678
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2679
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = true
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = false
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = false
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = true
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2702
		{
		}
	case 418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2703
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2741
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2761
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2802
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2803
		{
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2861
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &From{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2909
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = true
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = false
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.str = astFullJoin
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.str = astLeftJoin
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.str = astRightJoin
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.str = astInnerJoin
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3092
		{
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3093
		{
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3179
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3192
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3207
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3216
		{
			return unimplemented(sqllex)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3284
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = nil
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3333
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = oidPseudoTypeRegProc
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = oidPseudoTypeRegProc
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = oidPseudoTypeRegClass
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = oidPseudoTypeRegType
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = oidPseudoTypeRegNamespace
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3428
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3460
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3499
		{
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3500
		{
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = year
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = month
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = day
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = hour
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = minute
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = month
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = hour
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = minute
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = minute
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3585
		{
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = second
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3592
		{
			return unimplemented(sqllex)
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3627
		{
			return unimplemented(sqllex)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3787
		{
			return unimplemented(sqllex)
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3853
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4026
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4079
		{
			return unimplemented(sqllex)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4080
		{
			return unimplemented(sqllex)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4103
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4119
		{
			return unimplemented(sqllex)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4120
		{
			return unimplemented(sqllex)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4124
		{
			return unimplemented(sqllex)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4141
		{
			return unimplemented(sqllex)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4142
		{
			return unimplemented(sqllex)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4143
		{
			return unimplemented(sqllex)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4144
		{
			return unimplemented(sqllex)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4173
		{
			return unimplemented(sqllex)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4217
		{
			return unimplemented(sqllex)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4218
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = Window(nil)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4253
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.str = ""
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4315
		{
			return unimplemented(sqllex)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4316
		{
			return unimplemented(sqllex)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4317
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4320
		{
			return unimplemented(sqllex)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4321
		{
			return unimplemented(sqllex)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4327
		{
			return unimplemented(sqllex)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4328
		{
			return unimplemented(sqllex)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4329
		{
			return unimplemented(sqllex)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4330
		{
			return unimplemented(sqllex)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4331
		{
			return unimplemented(sqllex)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = Any
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = Some
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = All
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = Plus
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = Minus
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = Mult
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = Div
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = FloorDiv
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = Mod
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = Bitand
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = Bitor
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = Bitxor
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = Bitxor
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = LT
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = GT
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = EQ
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = LE
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = GE
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = NE
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = Like
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = NotLike
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = ILike
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = NotILike
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4706
		{
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4866
		{
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4902
		{
			return unimplemented(sqllex)
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = DNull
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.str = ""
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
