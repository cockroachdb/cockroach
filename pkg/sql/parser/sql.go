// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:464
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const KEY = 57515
const KEYS = 57516
const KV = 57517
const LATERAL = 57518
const LC_CTYPE = 57519
const LC_COLLATE = 57520
const LEADING = 57521
const LEAST = 57522
const LEFT = 57523
const LEVEL = 57524
const LIKE = 57525
const LIMIT = 57526
const LOCAL = 57527
const LOCALTIME = 57528
const LOCALTIMESTAMP = 57529
const LOW = 57530
const LSHIFT = 57531
const MATCH = 57532
const MINUTE = 57533
const MONTH = 57534
const NAN = 57535
const NAME = 57536
const NAMES = 57537
const NATURAL = 57538
const NEXT = 57539
const NO = 57540
const NO_INDEX_JOIN = 57541
const NORMAL = 57542
const NOT = 57543
const NOTHING = 57544
const NULL = 57545
const NULLIF = 57546
const NULLS = 57547
const NUMERIC = 57548
const OF = 57549
const OFF = 57550
const OFFSET = 57551
const OID = 57552
const ON = 57553
const ONLY = 57554
const OPTIONS = 57555
const OR = 57556
const ORDER = 57557
const ORDINALITY = 57558
const OUT = 57559
const OUTER = 57560
const OVER = 57561
const OVERLAPS = 57562
const OVERLAY = 57563
const PARENT = 57564
const PARTIAL = 57565
const PARTITION = 57566
const PASSWORD = 57567
const PAUSE = 57568
const PLACING = 57569
const PLANS = 57570
const POSITION = 57571
const PRECEDING = 57572
const PRECISION = 57573
const PREPARE = 57574
const PRIMARY = 57575
const PRIORITY = 57576
const QUERIES = 57577
const QUERY = 57578
const RANGE = 57579
const READ = 57580
const REAL = 57581
const RECURSIVE = 57582
const REF = 57583
const REFERENCES = 57584
const REGCLASS = 57585
const REGPROC = 57586
const REGPROCEDURE = 57587
const REGNAMESPACE = 57588
const REGTYPE = 57589
const REMOVE_PATH = 57590
const RENAME = 57591
const REPEATABLE = 57592
const RELEASE = 57593
const RESET = 57594
const RESTORE = 57595
const RESTRICT = 57596
const RESUME = 57597
const RETURNING = 57598
const REVOKE = 57599
const RIGHT = 57600
const ROLLBACK = 57601
const ROLLUP = 57602
const ROW = 57603
const ROWS = 57604
const RSHIFT = 57605
const SAVEPOINT = 57606
const SCATTER = 57607
const SEARCH = 57608
const SECOND = 57609
const SELECT = 57610
const SEQUENCES = 57611
const SERIAL = 57612
const SERIALIZABLE = 57613
const SESSION = 57614
const SESSIONS = 57615
const SESSION_USER = 57616
const SET = 57617
const SETTING = 57618
const SETTINGS = 57619
const SHOW = 57620
const SIMILAR = 57621
const SIMPLE = 57622
const SMALLINT = 57623
const SMALLSERIAL = 57624
const SNAPSHOT = 57625
const SOME = 57626
const SPLIT = 57627
const SQL = 57628
const START = 57629
const STATUS = 57630
const STDIN = 57631
const STRICT = 57632
const STRING = 57633
const STORE = 57634
const STORING = 57635
const SUBSTRING = 57636
const SYMMETRIC = 57637
const SYSTEM = 57638
const TABLE = 57639
const TABLES = 57640
const TEMP = 57641
const TEMPLATE = 57642
const TEMPORARY = 57643
const TESTING_RANGES = 57644
const TESTING_RELOCATE = 57645
const TEXT = 57646
const THEN = 57647
const TIME = 57648
const TIMESTAMP = 57649
const TIMESTAMPTZ = 57650
const TO = 57651
const TRAILING = 57652
const TRACE = 57653
const TRANSACTION = 57654
const TREAT = 57655
const TRIM = 57656
const TRUE = 57657
const TRUNCATE = 57658
const TYPE = 57659
const UNBOUNDED = 57660
const UNCOMMITTED = 57661
const UNION = 57662
const UNIQUE = 57663
const UNKNOWN = 57664
const UPDATE = 57665
const UPSERT = 57666
const USE = 57667
const USER = 57668
const USERS = 57669
const USING = 57670
const UUID = 57671
const VALID = 57672
const VALIDATE = 57673
const VALUE = 57674
const VALUES = 57675
const VARCHAR = 57676
const VARIADIC = 57677
const VIEW = 57678
const VARYING = 57679
const WHEN = 57680
const WHERE = 57681
const WINDOW = 57682
const WITH = 57683
const WITHIN = 57684
const WITHOUT = 57685
const WRITE = 57686
const YEAR = 57687
const ZONE = 57688
const NOT_LA = 57689
const WITH_LA = 57690
const AS_LA = 57691
const CONTAINED_BY = 57692
const HAS_SOME_KEY = 57693
const HAS_ALL_KEYS = 57694
const POSTFIXOP = 57695
const UMINUS = 57696
const HELPTOKEN = 57697

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6680

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	375, 53,
	-2, 702,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 44,
	153, 552,
	-2, 0,
	-1, 52,
	96, 702,
	157, 702,
	323, 702,
	324, 702,
	-2, 0,
	-1, 62,
	107, 677,
	117, 677,
	165, 677,
	184, 677,
	209, 677,
	215, 677,
	320, 677,
	-2, 666,
	-1, 95,
	4, 704,
	20, 704,
	21, 704,
	23, 704,
	28, 704,
	33, 704,
	34, 704,
	35, 704,
	36, 704,
	37, 704,
	38, 704,
	39, 704,
	40, 704,
	41, 704,
	42, 704,
	44, 704,
	45, 704,
	46, 704,
	47, 704,
	48, 704,
	51, 704,
	52, 704,
	53, 704,
	55, 704,
	56, 704,
	60, 704,
	61, 704,
	62, 704,
	64, 704,
	65, 704,
	66, 704,
	67, 704,
	69, 704,
	71, 704,
	72, 704,
	75, 704,
	76, 704,
	77, 704,
	85, 704,
	86, 704,
	87, 704,
	88, 704,
	89, 704,
	90, 704,
	91, 704,
	92, 704,
	94, 704,
	96, 704,
	98, 704,
	101, 704,
	102, 704,
	104, 704,
	108, 704,
	109, 704,
	110, 704,
	111, 704,
	112, 704,
	113, 704,
	114, 704,
	122, 704,
	123, 704,
	124, 704,
	125, 704,
	126, 704,
	128, 704,
	130, 704,
	135, 704,
	136, 704,
	138, 704,
	141, 704,
	142, 704,
	145, 704,
	146, 704,
	147, 704,
	148, 704,
	151, 704,
	152, 704,
	154, 704,
	157, 704,
	158, 704,
	159, 704,
	160, 704,
	161, 704,
	162, 704,
	163, 704,
	164, 704,
	166, 704,
	169, 704,
	170, 704,
	171, 704,
	173, 704,
	174, 704,
	175, 704,
	177, 704,
	178, 704,
	180, 704,
	182, 704,
	185, 704,
	188, 704,
	190, 704,
	191, 704,
	192, 704,
	193, 704,
	194, 704,
	195, 704,
	197, 704,
	198, 704,
	199, 704,
	200, 704,
	204, 704,
	205, 704,
	206, 704,
	207, 704,
	208, 704,
	210, 704,
	212, 704,
	213, 704,
	216, 704,
	217, 704,
	219, 704,
	221, 704,
	222, 704,
	223, 704,
	224, 704,
	225, 704,
	226, 704,
	228, 704,
	229, 704,
	230, 704,
	231, 704,
	232, 704,
	234, 704,
	235, 704,
	236, 704,
	237, 704,
	238, 704,
	239, 704,
	240, 704,
	241, 704,
	243, 704,
	244, 704,
	245, 704,
	246, 704,
	247, 704,
	249, 704,
	250, 704,
	251, 704,
	252, 704,
	253, 704,
	254, 704,
	255, 704,
	257, 704,
	259, 704,
	260, 704,
	261, 704,
	262, 704,
	264, 704,
	265, 704,
	266, 704,
	267, 704,
	269, 704,
	270, 704,
	271, 704,
	272, 704,
	273, 704,
	275, 704,
	276, 704,
	277, 704,
	278, 704,
	280, 704,
	281, 704,
	282, 704,
	283, 704,
	285, 704,
	286, 704,
	287, 704,
	288, 704,
	289, 704,
	290, 704,
	291, 704,
	292, 704,
	293, 704,
	294, 704,
	296, 704,
	298, 704,
	299, 704,
	300, 704,
	301, 704,
	302, 704,
	303, 704,
	304, 704,
	306, 704,
	307, 704,
	308, 704,
	311, 704,
	312, 704,
	313, 704,
	314, 704,
	316, 704,
	317, 704,
	318, 704,
	319, 704,
	322, 704,
	323, 704,
	324, 704,
	325, 704,
	327, 704,
	329, 704,
	330, 704,
	331, 704,
	332, 704,
	333, 704,
	334, 704,
	337, 704,
	342, 704,
	343, 704,
	344, 704,
	345, 704,
	346, 704,
	-2, 0,
	-1, 112,
	107, 676,
	117, 676,
	165, 676,
	184, 676,
	209, 676,
	215, 676,
	320, 676,
	-2, 669,
	-1, 118,
	1, 603,
	169, 603,
	234, 603,
	238, 603,
	374, 603,
	375, 603,
	-2, 0,
	-1, 120,
	1, 603,
	374, 603,
	375, 603,
	-2, 0,
	-1, 121,
	1, 603,
	374, 603,
	375, 603,
	-2, 0,
	-1, 122,
	1, 607,
	374, 607,
	375, 607,
	-2, 0,
	-1, 143,
	4, 710,
	5, 710,
	6, 710,
	7, 710,
	8, 710,
	9, 710,
	20, 710,
	21, 710,
	23, 710,
	28, 710,
	29, 710,
	33, 710,
	34, 710,
	35, 710,
	36, 710,
	37, 710,
	38, 710,
	39, 710,
	40, 710,
	41, 710,
	42, 710,
	44, 710,
	45, 710,
	46, 710,
	47, 710,
	48, 710,
	49, 710,
	50, 710,
	51, 710,
	52, 710,
	53, 710,
	55, 710,
	56, 710,
	58, 710,
	60, 710,
	61, 710,
	62, 710,
	64, 710,
	65, 710,
	66, 710,
	67, 710,
	69, 710,
	71, 710,
	72, 710,
	74, 710,
	75, 710,
	76, 710,
	77, 710,
	79, 710,
	80, 710,
	81, 710,
	83, 710,
	84, 710,
	85, 710,
	86, 710,
	87, 710,
	88, 710,
	89, 710,
	90, 710,
	91, 710,
	92, 710,
	94, 710,
	96, 710,
	98, 710,
	101, 710,
	102, 710,
	104, 710,
	108, 710,
	109, 710,
	110, 710,
	111, 710,
	112, 710,
	113, 710,
	114, 710,
	115, 710,
	116, 710,
	122, 710,
	123, 710,
	124, 710,
	125, 710,
	126, 710,
	128, 710,
	130, 710,
	133, 710,
	135, 710,
	136, 710,
	138, 710,
	141, 710,
	142, 710,
	145, 710,
	146, 710,
	147, 710,
	148, 710,
	149, 710,
	151, 710,
	152, 710,
	154, 710,
	156, 710,
	157, 710,
	158, 710,
	159, 710,
	160, 710,
	161, 710,
	162, 710,
	163, 710,
	164, 710,
	166, 710,
	168, 710,
	169, 710,
	170, 710,
	171, 710,
	172, 710,
	173, 710,
	174, 710,
	175, 710,
	177, 710,
	178, 710,
	180, 710,
	181, 710,
	182, 710,
	183, 710,
	185, 710,
	188, 710,
	190, 710,
	191, 710,
	192, 710,
	193, 710,
	194, 710,
	195, 710,
	196, 710,
	197, 710,
	198, 710,
	199, 710,
	200, 710,
	201, 710,
	203, 710,
	204, 710,
	205, 710,
	206, 710,
	207, 710,
	208, 710,
	210, 710,
	213, 710,
	216, 710,
	217, 710,
	218, 710,
	219, 710,
	220, 710,
	221, 710,
	222, 710,
	223, 710,
	224, 710,
	225, 710,
	226, 710,
	228, 710,
	229, 710,
	230, 710,
	231, 710,
	232, 710,
	234, 710,
	235, 710,
	236, 710,
	237, 710,
	238, 710,
	239, 710,
	240, 710,
	241, 710,
	243, 710,
	244, 710,
	245, 710,
	246, 710,
	247, 710,
	249, 710,
	250, 710,
	251, 710,
	252, 710,
	253, 710,
	254, 710,
	255, 710,
	257, 710,
	258, 710,
	259, 710,
	260, 710,
	261, 710,
	262, 710,
	264, 710,
	265, 710,
	266, 710,
	267, 710,
	269, 710,
	270, 710,
	271, 710,
	272, 710,
	273, 710,
	274, 710,
	275, 710,
	276, 710,
	277, 710,
	278, 710,
	279, 710,
	280, 710,
	281, 710,
	282, 710,
	283, 710,
	285, 710,
	286, 710,
	287, 710,
	288, 710,
	289, 710,
	290, 710,
	291, 710,
	292, 710,
	293, 710,
	294, 710,
	296, 710,
	298, 710,
	299, 710,
	300, 710,
	301, 710,
	302, 710,
	303, 710,
	304, 710,
	306, 710,
	307, 710,
	308, 710,
	311, 710,
	312, 710,
	313, 710,
	314, 710,
	315, 710,
	316, 710,
	317, 710,
	318, 710,
	319, 710,
	322, 710,
	323, 710,
	324, 710,
	325, 710,
	326, 710,
	327, 710,
	329, 710,
	330, 710,
	331, 710,
	332, 710,
	333, 710,
	334, 710,
	337, 710,
	342, 710,
	343, 710,
	344, 710,
	345, 710,
	346, 710,
	347, 710,
	357, 710,
	362, 710,
	363, 710,
	364, 710,
	371, 710,
	377, 710,
	-2, 0,
	-1, 146,
	1, 53,
	375, 53,
	-2, 702,
	-1, 506,
	132, 1315,
	309, 1315,
	352, 1315,
	373, 1315,
	-2, 0,
	-1, 507,
	132, 1264,
	309, 1264,
	352, 1264,
	373, 1264,
	-2, 0,
	-1, 509,
	132, 1373,
	309, 1373,
	352, 1373,
	373, 1373,
	-2, 0,
	-1, 511,
	132, 1395,
	309, 1395,
	352, 1395,
	373, 1395,
	-2, 0,
	-1, 518,
	132, 1320,
	309, 1320,
	352, 1320,
	373, 1320,
	-2, 337,
	-1, 544,
	1, 415,
	370, 415,
	372, 415,
	374, 415,
	375, 415,
	-2, 0,
	-1, 545,
	1, 467,
	129, 467,
	370, 467,
	372, 467,
	374, 467,
	375, 467,
	-2, 0,
	-1, 551,
	1, 429,
	370, 429,
	372, 429,
	374, 429,
	375, 429,
	-2, 0,
	-1, 553,
	1, 433,
	370, 433,
	372, 433,
	374, 433,
	375, 433,
	-2, 0,
	-1, 556,
	1, 441,
	370, 441,
	372, 441,
	374, 441,
	375, 441,
	-2, 0,
	-1, 557,
	1, 446,
	370, 446,
	372, 446,
	374, 446,
	375, 446,
	-2, 0,
	-1, 560,
	1, 456,
	370, 456,
	372, 456,
	374, 456,
	375, 456,
	-2, 0,
	-1, 583,
	117, 712,
	184, 712,
	209, 712,
	-2, 672,
	-1, 590,
	117, 711,
	184, 711,
	209, 711,
	-2, 670,
	-1, 647,
	371, 1242,
	-2, 1235,
	-1, 648,
	371, 1243,
	-2, 1236,
	-1, 654,
	5, 889,
	371, 889,
	-2, 1447,
	-1, 679,
	5, 848,
	-2, 1416,
	-1, 680,
	5, 883,
	371, 883,
	-2, 1418,
	-1, 681,
	5, 858,
	-2, 1419,
	-1, 682,
	5, 857,
	-2, 1420,
	-1, 683,
	5, 883,
	371, 883,
	-2, 1423,
	-1, 684,
	5, 883,
	371, 883,
	-2, 1424,
	-1, 685,
	5, 884,
	-2, 1427,
	-1, 686,
	5, 840,
	-2, 1428,
	-1, 687,
	5, 840,
	-2, 1429,
	-1, 688,
	5, 865,
	-2, 1433,
	-1, 689,
	5, 850,
	-2, 1434,
	-1, 690,
	5, 851,
	-2, 1435,
	-1, 691,
	5, 841,
	-2, 1441,
	-1, 692,
	5, 842,
	-2, 1442,
	-1, 693,
	5, 843,
	-2, 1443,
	-1, 694,
	5, 844,
	-2, 1444,
	-1, 695,
	5, 845,
	-2, 1445,
	-1, 696,
	5, 846,
	-2, 1446,
	-1, 697,
	5, 840,
	-2, 1451,
	-1, 698,
	5, 849,
	-2, 1456,
	-1, 699,
	5, 847,
	-2, 1459,
	-1, 700,
	5, 881,
	371, 881,
	-2, 1461,
	-1, 701,
	5, 885,
	-2, 1464,
	-1, 702,
	5, 887,
	-2, 1465,
	-1, 703,
	5, 880,
	371, 880,
	-2, 1470,
	-1, 899,
	225, 700,
	-2, 545,
	-1, 904,
	211, 1239,
	-2, 0,
	-1, 940,
	1, 222,
	370, 222,
	372, 222,
	374, 222,
	375, 222,
	-2, 675,
	-1, 943,
	4, 1469,
	10, 1469,
	11, 1469,
	13, 1469,
	14, 1469,
	15, 1469,
	16, 1469,
	17, 1469,
	18, 1469,
	20, 1469,
	21, 1469,
	23, 1469,
	26, 1469,
	28, 1469,
	30, 1469,
	33, 1469,
	34, 1469,
	35, 1469,
	36, 1469,
	37, 1469,
	38, 1469,
	39, 1469,
	40, 1469,
	41, 1469,
	42, 1469,
	44, 1469,
	45, 1469,
	46, 1469,
	47, 1469,
	48, 1469,
	51, 1469,
	52, 1469,
	53, 1469,
	55, 1469,
	56, 1469,
	57, 1469,
	60, 1469,
	61, 1469,
	62, 1469,
	63, 1469,
	64, 1469,
	65, 1469,
	66, 1469,
	67, 1469,
	69, 1469,
	70, 1469,
	71, 1469,
	72, 1469,
	74, 1469,
	75, 1469,
	76, 1469,
	77, 1469,
	85, 1469,
	86, 1469,
	87, 1469,
	88, 1469,
	89, 1469,
	90, 1469,
	91, 1469,
	92, 1469,
	94, 1469,
	96, 1469,
	98, 1469,
	101, 1469,
	102, 1469,
	104, 1469,
	108, 1469,
	109, 1469,
	110, 1469,
	111, 1469,
	112, 1469,
	113, 1469,
	114, 1469,
	118, 1469,
	119, 1469,
	120, 1469,
	121, 1469,
	122, 1469,
	123, 1469,
	124, 1469,
	125, 1469,
	126, 1469,
	127, 1469,
	128, 1469,
	130, 1469,
	133, 1469,
	135, 1469,
	136, 1469,
	138, 1469,
	141, 1469,
	142, 1469,
	145, 1469,
	146, 1469,
	147, 1469,
	148, 1469,
	149, 1469,
	150, 1469,
	151, 1469,
	152, 1469,
	154, 1469,
	156, 1469,
	157, 1469,
	158, 1469,
	159, 1469,
	160, 1469,
	161, 1469,
	162, 1469,
	163, 1469,
	164, 1469,
	166, 1469,
	168, 1469,
	169, 1469,
	170, 1469,
	171, 1469,
	172, 1469,
	173, 1469,
	174, 1469,
	175, 1469,
	177, 1469,
	178, 1469,
	180, 1469,
	181, 1469,
	182, 1469,
	183, 1469,
	185, 1469,
	188, 1469,
	189, 1469,
	190, 1469,
	191, 1469,
	192, 1469,
	193, 1469,
	194, 1469,
	195, 1469,
	196, 1469,
	197, 1469,
	198, 1469,
	199, 1469,
	200, 1469,
	204, 1469,
	205, 1469,
	206, 1469,
	207, 1469,
	208, 1469,
	210, 1469,
	213, 1469,
	214, 1469,
	216, 1469,
	217, 1469,
	219, 1469,
	221, 1469,
	222, 1469,
	223, 1469,
	224, 1469,
	225, 1469,
	226, 1469,
	228, 1469,
	229, 1469,
	230, 1469,
	231, 1469,
	232, 1469,
	234, 1469,
	235, 1469,
	236, 1469,
	237, 1469,
	238, 1469,
	239, 1469,
	240, 1469,
	241, 1469,
	243, 1469,
	244, 1469,
	245, 1469,
	246, 1469,
	247, 1469,
	248, 1469,
	249, 1469,
	250, 1469,
	251, 1469,
	252, 1469,
	253, 1469,
	254, 1469,
	255, 1469,
	257, 1469,
	258, 1469,
	259, 1469,
	260, 1469,
	261, 1469,
	262, 1469,
	263, 1469,
	264, 1469,
	265, 1469,
	266, 1469,
	267, 1469,
	269, 1469,
	270, 1469,
	271, 1469,
	272, 1469,
	273, 1469,
	275, 1469,
	276, 1469,
	277, 1469,
	278, 1469,
	279, 1469,
	280, 1469,
	281, 1469,
	282, 1469,
	283, 1469,
	285, 1469,
	286, 1469,
	287, 1469,
	288, 1469,
	289, 1469,
	290, 1469,
	291, 1469,
	292, 1469,
	293, 1469,
	294, 1469,
	296, 1469,
	298, 1469,
	299, 1469,
	300, 1469,
	301, 1469,
	302, 1469,
	303, 1469,
	304, 1469,
	306, 1469,
	307, 1469,
	308, 1469,
	311, 1469,
	312, 1469,
	313, 1469,
	314, 1469,
	316, 1469,
	317, 1469,
	318, 1469,
	319, 1469,
	322, 1469,
	323, 1469,
	324, 1469,
	325, 1469,
	327, 1469,
	329, 1469,
	330, 1469,
	331, 1469,
	332, 1469,
	333, 1469,
	334, 1469,
	337, 1469,
	342, 1469,
	343, 1469,
	344, 1469,
	345, 1469,
	346, 1469,
	347, 1469,
	348, 1469,
	350, 1469,
	351, 1469,
	352, 1469,
	353, 1469,
	354, 1469,
	355, 1469,
	356, 1469,
	357, 1469,
	359, 1469,
	360, 1469,
	361, 1469,
	362, 1469,
	363, 1469,
	364, 1469,
	365, 1469,
	366, 1469,
	367, 1469,
	369, 1469,
	372, 1469,
	373, 1469,
	376, 1469,
	377, 1469,
	-2, 0,
	-1, 959,
	132, 1373,
	309, 1373,
	352, 1373,
	373, 1373,
	-2, 0,
	-1, 976,
	132, 1395,
	309, 1395,
	352, 1395,
	373, 1395,
	-2, 0,
	-1, 977,
	169, 615,
	234, 615,
	238, 615,
	-2, 325,
	-1, 1042,
	117, 711,
	184, 711,
	209, 711,
	-2, 673,
	-1, 1121,
	107, 677,
	117, 677,
	165, 677,
	184, 677,
	209, 677,
	215, 677,
	320, 677,
	-2, 1018,
	-1, 1131,
	371, 1219,
	-2, 1207,
	-1, 1149,
	372, 1131,
	-2, 0,
	-1, 1175,
	169, 615,
	234, 615,
	238, 615,
	-2, 610,
	-1, 1203,
	372, 1131,
	-2, 0,
	-1, 1207,
	107, 677,
	117, 677,
	165, 677,
	184, 677,
	209, 677,
	215, 677,
	320, 677,
	-2, 773,
	-1, 1350,
	169, 615,
	234, 615,
	238, 615,
	-2, 327,
	-1, 1448,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 924,
	-1, 1449,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 925,
	-1, 1450,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 926,
	-1, 1451,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 927,
	-1, 1452,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 928,
	-1, 1453,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 929,
	-1, 1454,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 930,
	-1, 1455,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 931,
	-1, 1464,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 940,
	-1, 1465,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 941,
	-1, 1466,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 942,
	-1, 1469,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 947,
	-1, 1475,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 949,
	-1, 1477,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 953,
	-1, 1478,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 954,
	-1, 1479,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 955,
	-1, 1480,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 956,
	-1, 1549,
	132, 1142,
	371, 1242,
	-2, 1235,
	-1, 1550,
	132, 1143,
	-2, 1412,
	-1, 1551,
	132, 1144,
	-2, 1319,
	-1, 1552,
	132, 1145,
	-2, 1282,
	-1, 1553,
	132, 1146,
	-2, 1299,
	-1, 1554,
	132, 1147,
	-2, 1318,
	-1, 1555,
	132, 1148,
	-2, 1370,
	-1, 1634,
	1, 774,
	74, 774,
	107, 774,
	117, 774,
	133, 774,
	137, 774,
	139, 774,
	156, 774,
	165, 774,
	172, 774,
	181, 774,
	184, 774,
	196, 774,
	209, 774,
	211, 774,
	215, 774,
	256, 774,
	258, 774,
	320, 774,
	328, 774,
	339, 774,
	340, 774,
	349, 774,
	370, 774,
	372, 774,
	374, 774,
	375, 774,
	376, 774,
	-2, 773,
	-1, 1783,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 948,
	-1, 1784,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 950,
	-1, 1789,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 951,
	-1, 1807,
	220, 1102,
	-2, 1104,
	-1, 1984,
	225, 700,
	-2, 545,
	-1, 2039,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 952,
	-1, 2044,
	168, 0,
	-2, 968,
	-1, 2053,
	220, 1103,
	-2, 1105,
	-1, 2095,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 995,
	-1, 2096,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 996,
	-1, 2097,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 997,
	-1, 2101,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 1001,
	-1, 2102,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 1002,
	-1, 2103,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 1003,
	-1, 2237,
	168, 0,
	-2, 969,
	-1, 2240,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 972,
	-1, 2241,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 974,
	-1, 2362,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 973,
	-1, 2363,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 975,
	-1, 2370,
	168, 0,
	-2, 1004,
	-1, 2446,
	168, 0,
	-2, 1005,
	-1, 2523,
	36, 0,
	149, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 1415,
}

const sqlPrivate = 57344

const sqlLast = 43128

var sqlAct = [...]int{

	648, 2192, 2531, 2522, 2497, 2568, 2396, 2532, 1711, 2533,
	2072, 1249, 2451, 1703, 2022, 2343, 1506, 1777, 2521, 646,
	2203, 1682, 1257, 607, 1629, 2308, 2294, 1988, 893, 2225,
	61, 2158, 1700, 933, 2157, 591, 776, 2227, 183, 645,
	752, 1293, 183, 1686, 791, 1996, 183, 2219, 1923, 2376,
	1205, 1902, 183, 1712, 1990, 1681, 1201, 183, 183, 641,
	2274, 183, 1873, 1647, 183, 1251, 1184, 1252, 461, 25,
	1675, 1685, 183, 624, 2128, 1910, 443, 1638, 1872, 1630,
	1427, 1529, 1422, 936, 638, 1818, 1761, 599, 107, 1505,
	1504, 1773, 980, 1045, 1127, 1513, 1213, 1245, 1215, 1185,
	1578, 1492, 618, 1375, 1489, 1371, 440, 979, 1523, 517,
	758, 1159, 929, 1163, 1683, 926, 1705, 919, 761, 1689,
	778, 1192, 941, 1294, 1616, 1603, 740, 497, 1116, 1545,
	617, 1046, 1044, 112, 1374, 174, 1175, 640, 183, 183,
	107, 113, 510, 475, 1264, 596, 183, 916, 738, 179,
	2309, 538, 1050, 1174, 2142, 1806, 595, 2143, 1272, 1272,
	1704, 1272, 2564, 2546, 595, 1202, 1240, 2307, 1270, 183,
	183, 781, 183, 183, 793, 1061, 1062, 2543, 183, 183,
	2542, 1727, 2539, 2519, 1727, 2518, 1240, 1282, 2492, 1282,
	2487, 2483, 1738, 489, 2357, 1240, 2006, 2005, 1064, 590,
	881, 2475, 2448, 2426, 2423, 2307, 1738, 2307, 1240, 2421,
	2407, 2037, 2406, 2307, 1240, 25, 2307, 1210, 1676, 2384,
	605, 2381, 1063, 1240, 2364, 1240, 2331, 706, 1738, 2328,
	1727, 2306, 2287, 1727, 107, 2307, 1240, 1605, 2239, 2218,
	2213, 584, 1738, 1680, 1680, 2131, 2138, 2048, 2016, 583,
	2139, 1727, 1977, 1976, 774, 1899, 705, 1240, 1890, 1240,
	1888, 1887, 1891, 1810, 1727, 1727, 1886, 600, 1748, 1811,
	1727, 1676, 1727, 1737, 1236, 1727, 2493, 1738, 1526, 766,
	770, 1061, 1062, 1282, 1726, 788, 1679, 742, 1727, 1610,
	1680, 1286, 1069, 1609, 744, 1287, 745, 143, 1282, 2357,
	1708, 2131, 1604, 2032, 1064, 1636, 2108, 2050, 1977, 1776,
	1759, 1353, 1179, 1508, 1240, 879, 961, 1727, 146, 958,
	957, 956, 1843, 1844, 2310, 1817, 145, 143, 1063, 955,
	1527, 954, 953, 952, 951, 950, 514, 949, 948, 947,
	946, 945, 944, 1061, 1062, 746, 1091, 1092, 1093, 1101,
	1102, 1103, 743, 589, 1084, 588, 145, 1372, 587, 1094,
	586, 582, 144, 755, 1273, 1273, 1064, 1273, 581, 1105,
	137, 580, 579, 578, 577, 576, 575, 138, 574, 1528,
	1525, 570, 569, 568, 536, 535, 534, 533, 532, 531,
	1063, 530, 144, 529, 1061, 1062, 1083, 528, 1069, 527,
	114, 526, 653, 1080, 525, 524, 523, 522, 521, 520,
	505, 504, 183, 781, 183, 503, 183, 1064, 502, 183,
	501, 431, 409, 402, 401, 183, 166, 165, 1085, 164,
	114, 163, 162, 885, 183, 183, 183, 183, 781, 1849,
	2005, 1063, 161, 781, 598, 160, 159, 158, 157, 156,
	155, 1086, 1087, 1088, 1089, 1530, 154, 153, 152, 151,
	1069, 150, 149, 148, 147, 1918, 1542, 1061, 1062, 1540,
	1206, 183, 1538, 596, 1378, 143, 992, 1500, 2538, 2520,
	2507, 1604, 1098, 1106, 183, 1536, 1278, 1271, 2502, 1406,
	1064, 2443, 1843, 1844, 1057, 2424, 899, 2273, 2350, 2269,
	183, 1104, 2265, 2264, 145, 2257, 2256, 2255, 2251, 2250,
	183, 1069, 2249, 2248, 1063, 2242, 1096, 2224, 2122, 2117,
	2116, 897, 1084, 902, 1074, 1072, 1073, 1065, 1066, 1067,
	1068, 1070, 1071, 1524, 2115, 918, 2058, 1135, 1979, 1975,
	144, 781, 468, 922, 922, 1843, 1844, 1095, 137, 1930,
	1926, 1895, 923, 37, 1892, 138, 1880, 1871, 892, 1743,
	1290, 1842, 1839, 942, 1838, 1836, 40, 1823, 1822, 1807,
	1634, 1057, 183, 1204, 1056, 1128, 753, 1119, 1707, 1256,
	1203, 1090, 2074, 2510, 1069, 2478, 890, 1501, 2472, 2471,
	2462, 2460, 467, 962, 2438, 2437, 1085, 1061, 1062, 2436,
	1091, 1092, 1093, 1101, 1102, 1103, 2393, 2372, 2358, 1849,
	2337, 2327, 1099, 1094, 2313, 2262, 2201, 2198, 2197, 1043,
	1064, 469, 990, 1105, 995, 2195, 2166, 2165, 51, 2146,
	117, 52, 2134, 1065, 1066, 1067, 1068, 1070, 1071, 1123,
	885, 2043, 2020, 1965, 1063, 1957, 1084, 1943, 977, 1942,
	1083, 1928, 974, 596, 1898, 1870, 1832, 1080, 2349, 1831,
	1828, 1803, 1849, 1798, 54, 1494, 1164, 1167, 1621, 1042,
	1590, 1534, 1248, 754, 1845, 1846, 1847, 1848, 1850, 1851,
	1097, 1182, 1041, 1075, 1076, 1082, 1081, 1077, 1078, 1079,
	1100, 993, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 1171, 1157, 1156, 2454, 1086, 1087, 1088, 1089, 2266,
	143, 1155, 1373, 1772, 1069, 1154, 1153, 1152, 1151, 1150,
	1085, 1771, 1149, 1148, 1859, 1147, 1146, 1843, 1844, 1145,
	1861, 1862, 1863, 584, 1061, 1062, 1098, 1106, 183, 145,
	183, 583, 1144, 2236, 1143, 55, 1053, 1054, 1067, 1068,
	1070, 1071, 1142, 1058, 1141, 1104, 1943, 1064, 1140, 1139,
	1132, 1120, 1119, 183, 183, 973, 965, 938, 2356, 2244,
	1096, 115, 57, 2223, 58, 144, 1084, 2141, 1190, 2137,
	1858, 1063, 1809, 137, 1131, 1622, 1183, 143, 1740, 1128,
	138, 1763, 2018, 596, 470, 1161, 1162, 91, 1860, 1843,
	1844, 1165, 1117, 1223, 1204, 1991, 989, 2360, 1747, 1173,
	1676, 1168, 2359, 114, 2353, 1188, 145, 1072, 1073, 1065,
	1066, 1067, 1068, 1070, 1071, 891, 2144, 2007, 1169, 1206,
	1916, 1039, 1968, 1170, 1563, 1090, 1541, 1962, 1956, 1539,
	1894, 1893, 1537, 1782, 1849, 107, 1847, 1848, 1850, 1851,
	1085, 1746, 144, 1598, 986, 1535, 1137, 1359, 1291, 2023,
	137, 1253, 1961, 1227, 1200, 1178, 1099, 138, 2377, 1704,
	708, 1814, 2075, 1033, 1514, 1160, 2001, 707, 415, 781,
	183, 1208, 1176, 2153, 2505, 1864, 793, 1216, 1180, 1217,
	114, 1731, 183, 171, 1854, 1852, 1853, 1845, 1846, 1847,
	1848, 1850, 1851, 1134, 437, 183, 1859, 412, 170, 436,
	2482, 183, 1034, 183, 1255, 183, 2561, 2321, 1216, 183,
	1217, 1247, 2029, 1216, 735, 1217, 2562, 1749, 733, 2418,
	1241, 410, 2417, 2415, 1097, 167, 2414, 1075, 1076, 1082,
	1081, 1077, 1078, 1079, 1100, 754, 1074, 1072, 1073, 1065,
	1066, 1067, 1068, 1070, 1071, 1284, 2186, 1224, 1025, 172,
	183, 183, 1238, 432, 2182, 1640, 2150, 781, 1218, 183,
	1526, 421, 183, 1261, 2177, 435, 731, 1221, 2149, 1827,
	1860, 1826, 1825, 987, 1363, 1362, 1824, 1372, 1369, 1360,
	1348, 1785, 729, 793, 1730, 1222, 1671, 726, 183, 1218,
	1345, 1640, 1667, 183, 1218, 2019, 1662, 1476, 183, 183,
	1639, 183, 1177, 183, 878, 183, 415, 183, 2334, 1594,
	171, 918, 1527, 1701, 1593, 1300, 988, 1437, 183, 1239,
	572, 2481, 422, 1404, 183, 183, 2190, 1379, 2191, 1234,
	1491, 1972, 2398, 173, 1243, 724, 1368, 1491, 436, 484,
	2516, 594, 1060, 1648, 1383, 1233, 1204, 1403, 1263, 1266,
	183, 1267, 2168, 2068, 793, 1498, 1530, 1855, 1856, 1857,
	1496, 1528, 1525, 1366, 650, 1231, 1854, 1852, 1853, 1845,
	1846, 1847, 1848, 1850, 1851, 972, 172, 2553, 411, 1774,
	1775, 1071, 1275, 1232, 1998, 1277, 1288, 1967, 1959, 1280,
	1019, 998, 974, 168, 1346, 1289, 1514, 1380, 1436, 593,
	107, 494, 416, 1350, 435, 1954, 1999, 412, 1225, 434,
	2465, 1300, 1300, 1376, 1364, 1843, 1844, 413, 1741, 1394,
	1651, 473, 170, 1172, 2030, 2571, 1843, 1844, 1020, 1530,
	1409, 1123, 169, 1387, 1061, 1062, 1339, 1530, 437, 1516,
	596, 1214, 2576, 2561, 1158, 596, 1851, 1752, 433, 595,
	1247, 1998, 1548, 1548, 1561, 1367, 2535, 1064, 1581, 1754,
	173, 1229, 1585, 1586, 1588, 1038, 1407, 1408, 183, 2028,
	183, 2368, 476, 183, 584, 1428, 1435, 584, 584, 1858,
	1755, 1063, 1418, 1333, 183, 1419, 1420, 1219, 424, 423,
	472, 1402, 1753, 793, 1602, 481, 183, 2125, 2183, 1405,
	183, 477, 1695, 183, 1272, 2175, 1664, 183, 1509, 2420,
	473, 183, 1332, 1511, 1114, 1524, 411, 183, 1219, 781,
	168, 737, 1650, 1219, 736, 2169, 183, 793, 727, 1573,
	596, 183, 1849, 478, 1502, 1499, 1795, 1624, 1830, 183,
	416, 1637, 1623, 1849, 1617, 412, 2536, 183, 434, 170,
	1641, 1069, 1793, 2399, 592, 413, 480, 1024, 183, 169,
	183, 476, 183, 1843, 1844, 183, 1556, 183, 1032, 183,
	183, 1673, 183, 781, 781, 2569, 727, 437, 781, 1333,
	1333, 1659, 183, 1627, 481, 1652, 1654, 433, 2552, 595,
	477, 1669, 728, 1787, 1859, 1599, 1600, 727, 1347, 1230,
	1490, 2065, 1665, 2537, 1608, 1859, 1614, 1725, 1332, 1332,
	1649, 1618, 1619, 1084, 2302, 573, 1059, 1497, 1208, 1382,
	1633, 1657, 478, 1706, 999, 1706, 1644, 1663, 1351, 1384,
	1790, 2570, 1373, 1370, 483, 1388, 2534, 1389, 1672, 1390,
	1791, 1391, 403, 1392, 1796, 480, 2231, 2124, 2577, 971,
	2066, 2560, 2572, 2303, 2558, 994, 1724, 563, 1299, 1733,
	1398, 1400, 1000, 2489, 107, 997, 633, 479, 1860, 793,
	107, 1718, 983, 1710, 922, 604, 922, 183, 2342, 1860,
	1849, 1721, 1719, 1728, 1720, 1722, 1426, 1085, 2490, 1698,
	2551, 1006, 968, 183, 183, 183, 1732, 183, 942, 1742,
	1729, 1613, 960, 1049, 180, 430, 1744, 2126, 407, 1195,
	1273, 1971, 417, 1760, 1473, 1191, 183, 2409, 438, 2408,
	2582, 2260, 482, 487, 180, 425, 1530, 495, 978, 1048,
	500, 1165, 1198, 1168, 2391, 1029, 2457, 984, 519, 2152,
	564, 985, 1859, 1162, 1161, 2317, 1939, 2104, 1615, 1935,
	1750, 1699, 1792, 1262, 1299, 1299, 479, 1196, 1254, 1794,
	1250, 2298, 2064, 2299, 1191, 1852, 1853, 1845, 1846, 1847,
	1848, 1850, 1851, 107, 1195, 1854, 1852, 1853, 1845, 1846,
	1847, 1848, 1850, 1851, 1414, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 1764, 2301, 2498, 983, 1047, 1198, 1924, 1397,
	1030, 1801, 2304, 1048, 741, 741, 1766, 1768, 1804, 1770,
	404, 482, 407, 1193, 1354, 596, 1860, 2320, 1358, 2344,
	895, 1049, 1196, 1195, 2319, 1820, 1821, 1471, 1474, 2261,
	2581, 1487, 894, 2204, 1197, 407, 407, 1194, 786, 407,
	476, 176, 1816, 2392, 180, 882, 1198, 1485, 565, 2105,
	492, 1913, 1912, 2316, 1031, 2106, 1945, 1944, 1415, 1612,
	984, 1470, 1193, 481, 985, 1356, 1788, 1925, 1786, 477,
	1047, 1196, 1780, 563, 1611, 1869, 405, 1357, 983, 593,
	486, 2300, 1581, 1581, 1581, 915, 1194, 1882, 1802, 596,
	913, 604, 904, 2193, 2335, 983, 183, 793, 1813, 1197,
	1007, 478, 183, 183, 1970, 2389, 183, 1900, 2275, 2129,
	3, 183, 1906, 1533, 183, 1845, 1846, 1847, 1848, 1850,
	1851, 1875, 183, 1907, 480, 1481, 2371, 566, 183, 183,
	183, 426, 2318, 1482, 183, 1483, 2390, 183, 1920, 1488,
	2259, 1905, 2189, 183, 183, 183, 183, 183, 1197, 1028,
	1061, 1062, 1874, 183, 1017, 781, 564, 1472, 183, 567,
	984, 2042, 183, 1919, 985, 1973, 1877, 1878, 1879, 1911,
	1837, 183, 427, 1064, 1797, 1929, 1015, 1936, 466, 33,
	1013, 183, 1011, 183, 1745, 183, 781, 781, 1678, 183,
	1915, 465, 32, 183, 1901, 1300, 1670, 1063, 183, 1661,
	183, 883, 428, 1978, 429, 1980, 1037, 183, 464, 29,
	463, 67, 2302, 884, 1009, 2295, 1036, 1955, 491, 880,
	1896, 183, 781, 462, 66, 1931, 2293, 1964, 596, 966,
	1395, 2297, 1003, 1386, 1300, 479, 183, 911, 1960, 459,
	21, 1023, 1138, 1285, 1953, 1532, 2003, 1484, 485, 2530,
	914, 2303, 1981, 1237, 1486, 912, 1985, 764, 2495, 1940,
	460, 22, 2291, 2173, 565, 458, 27, 1069, 2171, 1983,
	1984, 183, 2151, 1987, 2296, 1702, 1696, 1694, 519, 1027,
	519, 1283, 905, 1281, 1016, 908, 1989, 1994, 1300, 1279,
	482, 407, 457, 19, 1982, 2000, 455, 18, 1940, 1276,
	519, 519, 407, 930, 2008, 2015, 1014, 2014, 1274, 1235,
	1012, 1228, 1010, 1904, 456, 17, 602, 1226, 563, 1908,
	1909, 183, 2024, 1914, 1220, 33, 1335, 2055, 2431, 1084,
	2045, 2355, 2027, 1334, 1051, 2354, 604, 519, 32, 2562,
	2025, 2026, 1377, 566, 1008, 2060, 2061, 2062, 1300, 2035,
	519, 2033, 2017, 2031, 749, 29, 2220, 67, 1778, 2298,
	609, 2299, 1002, 1333, 447, 14, 969, 910, 1022, 603,
	66, 2433, 448, 15, 750, 567, 519, 1656, 2009, 2010,
	2212, 2011, 2012, 2049, 1300, 1300, 21, 2051, 2118, 454,
	49, 2301, 1332, 1300, 1300, 1674, 2054, 2067, 2069, 2070,
	2304, 564, 1333, 1085, 183, 2078, 1640, 22, 2076, 2081,
	183, 1052, 27, 1897, 2083, 1655, 446, 48, 2467, 183,
	183, 1666, 1335, 1335, 1779, 2110, 1300, 453, 11, 1334,
	1334, 1332, 452, 42, 2140, 1640, 445, 43, 407, 19,
	2147, 1660, 2111, 18, 1653, 451, 7, 725, 1428, 2079,
	2109, 751, 471, 2163, 1843, 1844, 1333, 1428, 2084, 1596,
	1597, 17, 2310, 2130, 2181, 2127, 1001, 2145, 183, 2445,
	183, 2132, 2185, 2162, 2188, 2133, 107, 2276, 183, 2300,
	1055, 781, 1668, 1658, 2199, 1332, 2494, 2340, 1061, 1062,
	2114, 1709, 2196, 1697, 1693, 2155, 183, 183, 1601, 2148,
	450, 6, 1065, 1066, 1067, 1068, 1070, 1071, 2214, 565,
	1349, 14, 493, 1292, 183, 2567, 1333, 2206, 2164, 15,
	2178, 2217, 2176, 183, 623, 2580, 2184, 2383, 793, 2208,
	1296, 2179, 2187, 2209, 2205, 1063, 49, 2179, 1299, 2194,
	2200, 1843, 1844, 2179, 2233, 1332, 1061, 1062, 2216, 2215,
	2207, 2281, 1333, 1333, 2221, 2210, 449, 35, 2222, 444,
	34, 1333, 1333, 48, 2123, 183, 406, 2071, 730, 732,
	1757, 1849, 2234, 2021, 11, 2238, 1921, 1299, 1889, 42,
	1758, 1332, 1332, 43, 1757, 1756, 601, 1595, 566, 1592,
	1332, 1332, 7, 1300, 1333, 1591, 1061, 1062, 611, 1522,
	1125, 2246, 2063, 1135, 500, 1133, 741, 1035, 2172, 1026,
	2174, 1021, 1018, 1004, 970, 793, 183, 183, 1352, 1064,
	567, 2136, 183, 1332, 571, 183, 1296, 1296, 2397, 407,
	407, 1299, 474, 1859, 2258, 793, 183, 183, 1385, 1005,
	183, 183, 183, 1063, 1917, 1620, 2279, 6, 886, 888,
	2488, 2252, 1829, 2450, 2367, 1531, 1136, 183, 2286, 2270,
	2285, 46, 183, 2160, 183, 627, 183, 183, 183, 2292,
	759, 2154, 1688, 183, 781, 2163, 2311, 183, 2315, 2283,
	781, 2282, 1687, 2278, 2280, 2290, 796, 1361, 183, 183,
	2314, 1299, 649, 768, 772, 2162, 781, 790, 1547, 1429,
	723, 651, 1297, 35, 652, 2163, 34, 1860, 1298, 2338,
	1166, 2163, 639, 2333, 1904, 1295, 939, 1713, 1365, 1495,
	2336, 1512, 1812, 1129, 619, 2162, 2341, 1299, 1299, 963,
	2347, 2162, 2346, 631, 630, 967, 1299, 1299, 1510, 964,
	2164, 1922, 2361, 1997, 2339, 2348, 180, 1413, 1769, 2345,
	2352, 1410, 1993, 2170, 414, 1840, 937, 2330, 407, 1570,
	1562, 1333, 609, 1558, 1040, 1189, 1115, 1714, 991, 1299,
	2164, 1260, 2351, 2366, 2004, 1739, 2164, 407, 1181, 407,
	1421, 407, 183, 2379, 183, 1268, 793, 183, 748, 747,
	1332, 1355, 1751, 1108, 2373, 183, 1107, 734, 2459, 982,
	981, 793, 1938, 2575, 2466, 1853, 1845, 1846, 1847, 1848,
	1850, 1851, 1300, 2167, 1799, 1800, 2401, 2163, 2380, 2403,
	2405, 2382, 2504, 142, 139, 2385, 519, 180, 1247, 2400,
	2387, 141, 140, 183, 2416, 180, 781, 2162, 519, 2277,
	183, 1969, 70, 31, 30, 2402, 90, 2163, 183, 183,
	781, 781, 89, 88, 87, 86, 1109, 1110, 1111, 1112,
	1113, 2432, 2422, 85, 519, 2430, 1122, 2162, 183, 519,
	84, 1300, 2429, 183, 180, 519, 1130, 519, 2440, 519,
	183, 519, 2164, 519, 2434, 2439, 83, 82, 2461, 2428,
	1866, 1867, 1868, 2444, 1396, 81, 80, 2453, 2419, 2425,
	519, 519, 2456, 2455, 2447, 183, 183, 79, 78, 2179,
	77, 183, 2164, 76, 75, 74, 2476, 73, 2474, 781,
	2463, 72, 1300, 2477, 183, 515, 519, 512, 781, 781,
	69, 2464, 68, 2441, 2442, 2411, 1299, 28, 24, 94,
	23, 2480, 2470, 65, 64, 26, 16, 184, 10, 772,
	1190, 183, 2491, 183, 20, 2479, 183, 596, 793, 111,
	790, 2485, 2486, 110, 109, 108, 2511, 13, 12, 2513,
	106, 2501, 2512, 105, 2500, 104, 103, 102, 2508, 2509,
	1333, 2412, 2413, 9, 183, 8, 2515, 2517, 2163, 93,
	704, 1186, 1186, 39, 38, 2529, 2528, 92, 609, 2527,
	133, 183, 2506, 2514, 2545, 2540, 1335, 183, 2162, 1332,
	130, 132, 129, 1334, 131, 2547, 101, 2550, 135, 134,
	127, 183, 2544, 2548, 2549, 125, 126, 128, 124, 123,
	136, 2559, 2557, 100, 99, 2563, 98, 97, 96, 1333,
	5, 2, 1, 2565, 500, 1335, 741, 0, 0, 882,
	0, 2566, 1334, 2164, 0, 0, 2574, 2578, 2573, 0,
	407, 2579, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 1632, 0, 0, 0, 407, 0, 0, 407,
	0, 0, 0, 1645, 0, 0, 0, 407, 0, 0,
	1333, 0, 0, 407, 0, 0, 772, 0, 0, 1335,
	0, 0, 407, 0, 0, 0, 1334, 1677, 0, 0,
	0, 2040, 2041, 0, 0, 1684, 0, 0, 782, 1332,
	0, 794, 0, 882, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 407, 0, 1717, 0, 519, 0,
	0, 519, 0, 519, 0, 407, 407, 0, 1723, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 1645, 1335,
	0, 783, 0, 0, 795, 0, 1334, 0, 0, 0,
	2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094,
	2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 0,
	2107, 0, 0, 0, 0, 1335, 1335, 0, 0, 0,
	0, 0, 1334, 1334, 1335, 1335, 0, 0, 0, 0,
	1296, 1334, 1334, 0, 1299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 609, 609, 0, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 1334, 0, 0, 0, 0, 1296,
	0, 0, 0, 1762, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 407,
	407, 407, 0, 407, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 759, 1211, 0,
	0, 1411, 407, 1416, 0, 0, 0, 0, 0, 1423,
	0, 0, 0, 1296, 0, 0, 0, 0, 0, 1438,
	1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	1469, 0, 1475, 0, 1477, 1478, 1479, 1480, 0, 0,
	0, 0, 0, 0, 1061, 1062, 0, 0, 0, 0,
	782, 1503, 0, 1296, 0, 0, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 782, 0, 1543, 1544, 0,
	782, 1560, 0, 1572, 1574, 1579, 1582, 1583, 1584, 1296,
	1296, 1063, 0, 783, 1335, 0, 468, 1083, 1296, 1296,
	0, 1334, 0, 0, 0, 0, 1246, 37, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 783, 0,
	40, 0, 0, 783, 0, 772, 0, 1265, 0, 1265,
	0, 1296, 0, 0, 0, 0, 0, 0, 628, 62,
	0, 0, 0, 0, 0, 0, 467, 0, 0, 0,
	0, 0, 1086, 1087, 1088, 1089, 0, 0, 0, 0,
	0, 1069, 407, 0, 0, 0, 0, 0, 407, 407,
	0, 0, 407, 0, 0, 469, 0, 1632, 782, 0,
	1632, 0, 51, 0, 117, 52, 0, 0, 1927, 0,
	0, 62, 0, 0, 407, 1933, 1934, 0, 0, 0,
	1645, 0, 0, 1941, 0, 0, 0, 0, 0, 1946,
	1947, 1949, 1951, 1952, 0, 0, 0, 0, 54, 407,
	0, 783, 0, 1084, 1963, 0, 0, 0, 1966, 0,
	0, 0, 0, 0, 0, 0, 0, 407, 0, 0,
	0, 0, 0, 0, 0, 0, 585, 1260, 0, 1260,
	0, 519, 0, 597, 0, 407, 0, 0, 0, 1992,
	0, 0, 0, 0, 407, 0, 2002, 0, 0, 0,
	0, 0, 0, 407, 2370, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 760, 62, 0, 1762, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 1296, 55,
	0, 0, 1762, 0, 0, 0, 0, 1199, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 2394, 0,
	1334, 0, 0, 468, 0, 115, 57, 0, 58, 0,
	0, 0, 0, 0, 37, 0, 0, 407, 1417, 0,
	0, 143, 0, 0, 0, 1393, 0, 40, 470, 0,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	145, 0, 1335, 467, 0, 0, 0, 0, 0, 1334,
	0, 0, 0, 0, 0, 0, 2446, 2073, 0, 0,
	0, 0, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 469, 0, 1783, 1784, 144, 0, 759, 51,
	1789, 117, 52, 0, 137, 0, 0, 0, 0, 0,
	0, 138, 0, 1335, 759, 0, 0, 1635, 0, 0,
	1334, 0, 0, 0, 0, 772, 0, 1564, 0, 0,
	0, 772, 1808, 0, 114, 54, 0, 0, 1815, 0,
	790, 1819, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1833, 0,
	407, 0, 0, 0, 0, 0, 1632, 0, 0, 0,
	0, 0, 1715, 0, 0, 882, 1632, 0, 0, 0,
	0, 0, 0, 790, 790, 0, 0, 0, 0, 0,
	2159, 0, 1122, 0, 0, 0, 0, 0, 0, 1579,
	1579, 1579, 0, 2180, 0, 0, 782, 1296, 0, 2180,
	0, 0, 0, 794, 0, 2180, 55, 0, 0, 0,
	0, 0, 0, 0, 1645, 0, 1260, 0, 1186, 0,
	0, 0, 0, 609, 2202, 0, 0, 0, 0, 0,
	0, 0, 115, 57, 0, 58, 0, 0, 0, 783,
	0, 0, 407, 407, 0, 0, 795, 0, 143, 0,
	0, 0, 0, 0, 0, 470, 1296, 0, 91, 0,
	2228, 597, 0, 0, 0, 0, 0, 0, 0, 2230,
	0, 0, 0, 0, 0, 0, 0, 145, 0, 0,
	0, 0, 0, 0, 782, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1765, 790, 1767,
	0, 772, 0, 0, 0, 0, 0, 1296, 0, 0,
	794, 2253, 0, 144, 0, 0, 0, 0, 1995, 0,
	1781, 137, 0, 0, 0, 0, 0, 783, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2013, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 795, 0, 0, 0, 0, 0, 0,
	609, 609, 2271, 407, 0, 0, 0, 0, 407, 0,
	0, 882, 0, 609, 0, 0, 0, 0, 0, 0,
	0, 794, 1632, 882, 0, 2034, 2288, 2289, 1645, 0,
	1423, 0, 0, 0, 0, 0, 2038, 0, 0, 2039,
	0, 0, 2159, 882, 0, 0, 0, 0, 2322, 0,
	2323, 2044, 407, 2325, 2326, 0, 0, 0, 585, 407,
	2052, 0, 0, 2332, 795, 0, 0, 0, 2056, 0,
	0, 2013, 2159, 0, 882, 1684, 0, 0, 2159, 1118,
	0, 1121, 0, 0, 0, 0, 0, 0, 1126, 0,
	0, 2080, 0, 0, 0, 2082, 0, 0, 1564, 1564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2112, 2113,
	0, 0, 0, 0, 0, 0, 0, 2119, 2120, 2121,
	759, 0, 0, 0, 0, 0, 759, 759, 0, 0,
	759, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	794, 0, 0, 0, 0, 0, 2135, 0, 1645, 0,
	2386, 0, 1932, 2388, 1564, 1564, 1564, 0, 0, 0,
	0, 407, 0, 0, 2159, 0, 782, 0, 0, 0,
	0, 0, 0, 0, 794, 0, 2156, 1958, 0, 0,
	0, 0, 0, 795, 0, 0, 0, 0, 0, 0,
	0, 2180, 0, 0, 2159, 1974, 62, 0, 0, 407,
	0, 1207, 0, 0, 0, 0, 882, 0, 0, 783,
	0, 0, 0, 1986, 2228, 2228, 0, 795, 0, 0,
	782, 782, 1246, 0, 0, 782, 0, 0, 0, 0,
	0, 1246, 1186, 0, 2452, 0, 0, 0, 0, 1632,
	0, 609, 0, 0, 0, 0, 1260, 0, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 118, 783, 783, 0, 0, 0, 783, 0,
	0, 2468, 2469, 0, 40, 0, 2237, 407, 0, 0,
	2240, 2241, 0, 0, 2243, 0, 0, 0, 120, 0,
	2484, 2245, 0, 2247, 0, 2036, 0, 0, 41, 0,
	44, 0, 1843, 1844, 0, 1861, 1862, 1863, 0, 2254,
	0, 0, 0, 0, 0, 0, 794, 2499, 2235, 882,
	0, 45, 407, 0, 0, 47, 0, 0, 0, 50,
	0, 0, 121, 0, 0, 2159, 51, 0, 117, 52,
	0, 0, 2263, 0, 0, 0, 0, 0, 0, 0,
	2452, 0, 0, 0, 0, 1858, 0, 0, 0, 795,
	0, 53, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 0, 54, 407, 0, 1564, 1564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2556, 0, 0,
	0, 0, 0, 0, 0, 2312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1843, 1844, 0, 1861, 1862, 1863, 0, 0, 1849,
	0, 0, 0, 0, 0, 0, 0, 2047, 759, 0,
	0, 0, 0, 0, 1564, 1564, 1564, 1564, 1564, 1564,
	1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564,
	1564, 1564, 1564, 55, 1564, 0, 0, 0, 0, 56,
	1864, 62, 0, 1734, 1858, 0, 0, 0, 0, 2362,
	2363, 0, 0, 0, 37, 0, 0, 0, 63, 115,
	57, 1859, 58, 0, 59, 0, 122, 40, 0, 585,
	0, 60, 585, 585, 0, 143, 0, 0, 0, 0,
	2375, 0, 71, 0, 0, 91, 0, 0, 0, 2378,
	0, 0, 0, 1735, 119, 0, 0, 0, 0, 0,
	1715, 759, 0, 0, 145, 0, 0, 0, 1849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1736, 95, 794, 1493, 0, 0, 0, 0,
	0, 117, 116, 2410, 0, 1860, 0, 0, 597, 0,
	144, 0, 0, 1121, 0, 0, 0, 0, 137, 1864,
	1061, 1062, 0, 0, 0, 138, 1101, 1102, 1103, 0,
	0, 0, 0, 0, 0, 54, 0, 795, 0, 0,
	1859, 0, 0, 1064, 0, 0, 1105, 0, 114, 0,
	0, 4, 782, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 2458, 0, 0,
	0, 0, 760, 782, 782, 0, 0, 0, 0, 0,
	0, 2272, 1855, 1856, 1857, 783, 759, 0, 1207, 0,
	0, 1854, 1852, 1853, 1845, 1846, 1847, 1848, 1850, 1851,
	0, 62, 0, 0, 1860, 0, 55, 0, 0, 782,
	609, 62, 0, 0, 0, 0, 783, 783, 1086, 1087,
	1088, 1089, 0, 0, 0, 0, 0, 1069, 0, 0,
	2324, 0, 115, 57, 0, 58, 0, 2329, 0, 0,
	0, 0, 0, 62, 0, 62, 0, 0, 143, 1098,
	1106, 0, 783, 0, 0, 470, 0, 0, 91, 0,
	0, 0, 0, 2526, 2526, 62, 441, 0, 0, 0,
	0, 62, 0, 0, 0, 0, 0, 145, 0, 2541,
	0, 0, 0, 1096, 0, 0, 0, 468, 0, 1084,
	0, 1855, 1856, 1857, 0, 0, 0, 2526, 37, 0,
	1854, 1852, 1853, 1845, 1846, 1847, 1848, 1850, 1851, 0,
	0, 40, 0, 144, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 468, 0, 0, 467, 0, 0,
	0, 2526, 0, 0, 0, 37, 0, 0, 1090, 0,
	0, 114, 0, 0, 0, 0, 0, 0, 40, 2395,
	0, 0, 0, 1085, 0, 0, 469, 0, 0, 0,
	0, 0, 0, 51, 62, 117, 52, 0, 0, 1099,
	0, 0, 0, 0, 467, 0, 0, 0, 1564, 0,
	0, 0, 0, 0, 0, 1061, 1062, 2427, 1091, 1092,
	1093, 1101, 1102, 1103, 0, 0, 0, 0, 0, 54,
	0, 1094, 0, 469, 0, 0, 0, 0, 1064, 0,
	51, 1105, 117, 52, 0, 0, 0, 0, 0, 0,
	0, 0, 1564, 0, 0, 0, 0, 0, 0, 0,
	1843, 1844, 1063, 1861, 1862, 1863, 0, 1097, 1083, 0,
	0, 0, 0, 1493, 0, 1080, 54, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 782, 0,
	0, 0, 0, 1121, 0, 2473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 1858, 0, 0, 0, 0, 0, 0,
	1564, 0, 0, 1086, 1087, 1088, 1089, 0, 0, 0,
	0, 783, 1069, 0, 0, 794, 115, 57, 0, 58,
	2503, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 0, 1098, 1106, 0, 55, 0, 470,
	0, 0, 91, 0, 0, 0, 0, 1121, 0, 0,
	0, 0, 0, 1104, 0, 0, 0, 1849, 795, 0,
	0, 145, 0, 115, 57, 0, 58, 0, 1096, 0,
	0, 1715, 0, 0, 1084, 0, 0, 0, 0, 143,
	1865, 0, 0, 0, 760, 0, 470, 0, 0, 91,
	760, 760, 0, 0, 760, 0, 0, 144, 1864, 1095,
	0, 0, 794, 0, 0, 137, 0, 0, 145, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 1859,
	0, 0, 794, 0, 0, 0, 1843, 1844, 0, 1861,
	1862, 1863, 0, 1090, 0, 442, 0, 62, 0, 0,
	0, 0, 2046, 0, 144, 795, 0, 62, 1085, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 138,
	0, 782, 0, 0, 1099, 795, 0, 782, 0, 0,
	0, 0, 62, 0, 0, 0, 62, 0, 0, 1858,
	0, 0, 114, 782, 0, 0, 597, 0, 0, 0,
	0, 0, 0, 1860, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 783, 0, 0, 0, 0, 0,
	783, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 783, 0, 0, 0,
	0, 0, 1097, 0, 0, 1075, 1076, 1082, 1081, 1077,
	1078, 1079, 1100, 1849, 1074, 1072, 1073, 1065, 1066, 1067,
	1068, 1070, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 1885, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 794, 0, 0, 0, 0, 0, 0,
	1855, 1856, 1857, 0, 1864, 0, 0, 0, 794, 1854,
	1852, 1853, 1845, 1846, 1847, 1848, 1850, 1851, 0, 0,
	0, 0, 0, 0, 0, 1859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 795, 0, 0, 0,
	0, 0, 0, 782, 0, 0, 0, 0, 0, 0,
	0, 795, 0, 0, 0, 0, 0, 782, 782, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 783, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 1860,
	783, 783, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 760, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 782, 0, 0, 0,
	0, 0, 0, 0, 0, 782, 782, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 794, 0, 0, 0, 783,
	0, 0, 0, 0, 0, 0, 0, 0, 783, 783,
	0, 0, 0, 0, 0, 0, 1855, 1856, 1857, 0,
	0, 0, 0, 0, 0, 1854, 1852, 1853, 1845, 1846,
	1847, 1848, 1850, 1851, 0, 760, 0, 647, 795, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 664, 0, 0, 0, 0, 188, 189, 190, 345,
	346, 347, 348, 191, 349, 350, 0, 192, 351, 352,
	193, 194, 0, 663, 353, 354, 355, 0, 195, 675,
	0, 655, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 709, 206, 207,
	208, 0, 656, 657, 659, 0, 658, 660, 209, 210,
	408, 211, 357, 212, 358, 359, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 360, 219, 221, 220, 222, 665, 666, 0, 710,
	0, 0, 0, 0, 0, 223, 224, 363, 364, 365,
	760, 225, 0, 226, 0, 0, 711, 0, 227, 676,
	0, 367, 0, 0, 228, 229, 0, 0, 230, 231,
	672, 674, 713, 0, 370, 235, 0, 232, 0, 712,
	233, 371, 234, 372, 373, 374, 375, 376, 0, 377,
	0, 714, 236, 237, 238, 715, 239, 240, 241, 0,
	243, 242, 0, 677, 716, 244, 717, 0, 245, 0,
	0, 246, 0, 247, 248, 249, 251, 379, 250, 718,
	252, 253, 255, 254, 0, 0, 0, 673, 256, 381,
	257, 258, 62, 259, 0, 0, 260, 0, 0, 261,
	382, 719, 262, 720, 667, 263, 264, 265, 266, 267,
	0, 268, 668, 269, 385, 270, 0, 271, 272, 273,
	274, 275, 386, 276, 277, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 283, 286, 287, 288, 289, 0,
	290, 721, 291, 292, 387, 293, 0, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 661, 305, 294,
	295, 306, 722, 307, 389, 390, 308, 0, 315, 309,
	310, 296, 311, 314, 391, 312, 313, 669, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 670, 671, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 662,
	334, 0, 398, 335, 336, 337, 399, 400, 0, 62,
	338, 0, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 2435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 792,
	0, 0, 0, 0, 2161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 797, 187, 798,
	799, 800, 801, 344, 802, 803, 804, 805, 188, 189,
	190, 345, 346, 347, 348, 191, 349, 350, 806, 192,
	351, 352, 193, 194, 807, 808, 353, 354, 355, 809,
	195, 356, 810, 784, 811, 196, 197, 198, 0, 200,
	201, 202, 199, 812, 203, 1121, 204, 205, 813, 709,
	206, 207, 208, 814, 815, 817, 816, 818, 819, 820,
	209, 210, 408, 211, 357, 212, 358, 359, 821, 213,
	822, 214, 823, 215, 824, 825, 216, 217, 826, 218,
	827, 0, 828, 360, 219, 221, 220, 222, 361, 362,
	829, 710, 830, 0, 0, 0, 0, 223, 224, 363,
	364, 365, 0, 225, 831, 226, 832, 833, 711, 834,
	227, 366, 835, 367, 836, 0, 228, 229, 0, 0,
	230, 231, 368, 369, 713, 837, 370, 235, 838, 232,
	839, 712, 233, 371, 234, 372, 373, 374, 375, 376,
	840, 377, 841, 714, 236, 237, 238, 715, 239, 240,
	241, 842, 243, 242, 843, 378, 716, 244, 717, 844,
	245, 845, 846, 246, 0, 247, 248, 249, 251, 379,
	250, 718, 252, 253, 255, 254, 847, 848, 849, 380,
	256, 381, 257, 258, 850, 259, 851, 852, 260, 853,
	854, 261, 382, 719, 262, 720, 383, 263, 264, 265,
	266, 267, 855, 268, 384, 269, 385, 270, 856, 271,
	272, 273, 274, 275, 386, 276, 277, 857, 278, 279,
	280, 281, 282, 0, 284, 285, 283, 286, 287, 288,
	289, 858, 290, 721, 291, 292, 387, 293, 0, 297,
	298, 299, 300, 859, 302, 388, 301, 303, 304, 860,
	305, 294, 295, 306, 722, 307, 389, 390, 308, 861,
	315, 309, 310, 296, 311, 314, 391, 312, 313, 392,
	862, 316, 863, 317, 318, 319, 320, 321, 322, 323,
	864, 393, 394, 395, 865, 866, 324, 325, 396, 397,
	867, 326, 327, 328, 329, 868, 869, 330, 331, 332,
	333, 870, 334, 871, 398, 335, 336, 337, 399, 400,
	872, 873, 338, 874, 875, 876, 877, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 792, 0,
	0, 0, 0, 0, 1625, 0, 0, 0, 0, 0,
	0, 0, 0, 1626, 185, 186, 797, 187, 798, 799,
	800, 801, 344, 802, 803, 804, 805, 188, 189, 190,
	345, 346, 347, 348, 191, 349, 350, 806, 192, 351,
	352, 193, 194, 807, 808, 353, 354, 355, 809, 195,
	356, 810, 784, 811, 196, 197, 198, 0, 200, 201,
	202, 199, 812, 203, 0, 204, 205, 813, 709, 206,
	207, 208, 814, 815, 817, 816, 818, 819, 820, 209,
	210, 408, 211, 357, 212, 358, 359, 821, 213, 822,
	214, 823, 215, 824, 825, 216, 217, 826, 218, 827,
	0, 828, 360, 219, 221, 220, 222, 361, 362, 829,
	710, 830, 0, 0, 0, 0, 223, 224, 363, 364,
	365, 0, 225, 831, 226, 832, 833, 711, 834, 227,
	366, 835, 367, 836, 0, 228, 229, 0, 0, 230,
	231, 368, 369, 713, 837, 370, 235, 838, 232, 839,
	712, 233, 371, 234, 372, 373, 374, 375, 376, 840,
	377, 841, 714, 236, 237, 238, 715, 239, 240, 241,
	842, 243, 242, 843, 378, 716, 244, 717, 844, 245,
	845, 846, 246, 0, 247, 248, 249, 251, 379, 250,
	718, 252, 253, 255, 254, 847, 848, 849, 380, 256,
	381, 257, 258, 850, 259, 851, 852, 260, 853, 854,
	261, 382, 719, 262, 720, 383, 263, 264, 265, 266,
	267, 855, 268, 384, 269, 385, 270, 856, 271, 272,
	273, 274, 275, 386, 276, 277, 857, 278, 279, 280,
	281, 282, 0, 284, 285, 283, 286, 287, 288, 289,
	858, 290, 721, 291, 292, 387, 293, 0, 297, 298,
	299, 300, 859, 302, 388, 301, 303, 304, 860, 305,
	294, 295, 306, 722, 307, 389, 390, 308, 861, 315,
	309, 310, 296, 311, 314, 391, 312, 313, 392, 862,
	316, 863, 317, 318, 319, 320, 321, 322, 323, 864,
	393, 394, 395, 865, 866, 324, 325, 396, 397, 867,
	326, 327, 328, 329, 868, 869, 330, 331, 332, 333,
	870, 334, 871, 398, 335, 336, 337, 399, 400, 872,
	873, 338, 874, 875, 876, 877, 339, 340, 341, 342,
	343, 0, 0, 0, 0, 0, 0, 0, 792, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2284, 185, 186, 797, 187, 798, 799,
	800, 801, 344, 802, 803, 804, 805, 188, 189, 190,
	345, 346, 347, 348, 191, 349, 350, 806, 192, 351,
	352, 193, 194, 807, 808, 353, 354, 355, 809, 195,
	356, 810, 784, 811, 196, 197, 198, 0, 200, 201,
	202, 199, 812, 203, 0, 204, 205, 813, 709, 206,
	207, 208, 814, 815, 817, 816, 818, 819, 820, 209,
	210, 408, 211, 357, 212, 358, 359, 821, 213, 822,
	214, 823, 215, 824, 825, 216, 217, 826, 218, 827,
	0, 828, 360, 219, 221, 220, 222, 361, 362, 829,
	710, 830, 0, 0, 0, 0, 223, 224, 363, 364,
	365, 0, 225, 831, 226, 832, 833, 711, 834, 227,
	366, 835, 367, 836, 0, 228, 229, 0, 0, 230,
	231, 368, 369, 713, 837, 370, 235, 838, 232, 839,
	712, 233, 371, 234, 372, 373, 374, 375, 376, 840,
	377, 841, 714, 236, 237, 238, 715, 239, 240, 241,
	842, 243, 242, 843, 378, 716, 244, 717, 844, 245,
	845, 846, 246, 0, 247, 248, 249, 251, 379, 250,
	718, 252, 253, 255, 254, 847, 848, 849, 380, 256,
	381, 257, 258, 850, 259, 851, 852, 260, 853, 854,
	261, 382, 719, 262, 720, 383, 263, 264, 265, 266,
	267, 855, 268, 384, 269, 385, 270, 856, 271, 272,
	273, 274, 275, 386, 276, 277, 857, 278, 279, 280,
	281, 282, 0, 284, 285, 283, 286, 287, 288, 289,
	858, 290, 721, 291, 292, 387, 293, 0, 297, 298,
	299, 300, 859, 302, 388, 301, 303, 304, 860, 305,
	294, 295, 306, 722, 307, 389, 390, 308, 861, 315,
	309, 310, 296, 311, 314, 391, 312, 313, 392, 862,
	316, 863, 317, 318, 319, 320, 321, 322, 323, 864,
	393, 394, 395, 865, 866, 324, 325, 396, 397, 867,
	326, 327, 328, 329, 868, 869, 330, 331, 332, 333,
	870, 334, 871, 398, 335, 336, 337, 399, 400, 872,
	873, 338, 874, 875, 876, 877, 339, 340, 341, 342,
	343, 0, 0, 792, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1242, 185,
	186, 797, 187, 798, 799, 800, 801, 344, 802, 803,
	804, 805, 188, 189, 190, 345, 346, 347, 348, 191,
	349, 350, 806, 192, 351, 352, 193, 194, 807, 808,
	353, 354, 355, 809, 195, 356, 810, 784, 811, 196,
	197, 198, 0, 200, 201, 202, 199, 812, 203, 0,
	204, 205, 813, 709, 206, 207, 208, 814, 815, 817,
	816, 818, 819, 820, 209, 210, 408, 211, 357, 212,
	358, 359, 821, 213, 822, 214, 823, 215, 824, 825,
	216, 217, 826, 218, 827, 0, 828, 360, 219, 221,
	220, 222, 361, 362, 829, 710, 830, 0, 0, 0,
	0, 223, 224, 363, 364, 365, 0, 225, 831, 226,
	832, 833, 711, 834, 227, 366, 835, 367, 836, 0,
	228, 229, 0, 0, 230, 231, 368, 369, 713, 837,
	370, 235, 838, 232, 839, 712, 233, 371, 234, 372,
	373, 374, 375, 376, 840, 377, 841, 714, 236, 237,
	238, 715, 239, 240, 241, 842, 243, 242, 843, 378,
	716, 244, 717, 844, 245, 845, 846, 246, 0, 247,
	248, 249, 251, 379, 250, 718, 252, 253, 255, 254,
	847, 848, 849, 380, 256, 381, 257, 258, 850, 259,
	851, 852, 260, 853, 854, 261, 382, 719, 262, 720,
	383, 263, 264, 265, 266, 267, 855, 268, 384, 269,
	385, 270, 856, 271, 272, 273, 274, 275, 386, 276,
	277, 857, 278, 279, 280, 281, 282, 0, 284, 285,
	283, 286, 287, 288, 289, 858, 290, 721, 291, 292,
	387, 293, 0, 297, 298, 299, 300, 859, 302, 388,
	301, 303, 304, 860, 305, 294, 295, 306, 722, 307,
	389, 390, 308, 861, 315, 309, 310, 296, 311, 314,
	391, 312, 313, 392, 862, 316, 863, 317, 318, 319,
	320, 321, 322, 323, 864, 393, 394, 395, 865, 866,
	324, 325, 396, 397, 867, 326, 327, 328, 329, 868,
	869, 330, 331, 332, 333, 870, 334, 871, 398, 335,
	336, 337, 399, 400, 872, 873, 338, 874, 875, 876,
	877, 339, 340, 341, 342, 343, 1521, 0, 647, 636,
	637, 634, 635, 626, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 1518, 187, 0, 0,
	0, 0, 664, 629, 0, 0, 0, 188, 189, 190,
	345, 679, 347, 680, 191, 681, 682, 0, 192, 351,
	352, 193, 194, 632, 663, 683, 684, 355, 0, 195,
	675, 0, 655, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 709, 206,
	207, 208, 0, 656, 657, 659, 0, 658, 660, 209,
	210, 408, 211, 685, 212, 686, 687, 0, 213, 0,
	214, 0, 215, 1519, 0, 678, 217, 0, 218, 0,
	0, 0, 620, 219, 221, 220, 222, 665, 666, 643,
	710, 0, 0, 0, 0, 0, 223, 224, 688, 689,
	690, 0, 225, 0, 226, 0, 0, 711, 0, 227,
	676, 0, 367, 0, 0, 228, 229, 0, 0, 230,
	231, 672, 674, 713, 0, 370, 235, 0, 232, 0,
	712, 233, 691, 234, 692, 693, 694, 695, 696, 0,
	654, 0, 714, 236, 237, 238, 715, 239, 240, 241,
	0, 243, 242, 0, 677, 716, 244, 717, 0, 245,
	0, 0, 246, 0, 247, 248, 249, 251, 379, 250,
	718, 252, 253, 255, 254, 615, 0, 644, 673, 256,
	697, 257, 258, 0, 259, 0, 0, 260, 0, 0,
	261, 382, 719, 262, 720, 667, 263, 264, 265, 266,
	267, 0, 268, 668, 269, 385, 270, 0, 271, 272,
	273, 274, 275, 698, 276, 277, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 283, 286, 287, 288, 289,
	0, 290, 721, 291, 292, 621, 293, 0, 297, 298,
	299, 300, 0, 302, 388, 301, 303, 304, 661, 305,
	294, 295, 306, 722, 307, 699, 390, 308, 0, 315,
	309, 310, 296, 311, 314, 700, 312, 313, 669, 0,
	316, 0, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 701, 702, 0, 0, 324, 325, 670, 671, 642,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	662, 334, 0, 398, 335, 336, 337, 399, 703, 1517,
	0, 338, 0, 0, 0, 0, 339, 340, 341, 342,
	343, 616, 0, 647, 636, 637, 634, 635, 626, 0,
	0, 614, 0, 0, 0, 0, 612, 613, 1520, 185,
	186, 0, 187, 0, 0, 622, 1515, 664, 629, 0,
	0, 625, 188, 189, 190, 345, 679, 347, 680, 191,
	681, 682, 0, 192, 351, 352, 193, 194, 632, 663,
	683, 684, 355, 0, 195, 675, 0, 655, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 709, 206, 207, 208, 0, 656, 657,
	659, 0, 658, 660, 209, 210, 408, 211, 685, 212,
	686, 687, 610, 213, 0, 214, 0, 215, 0, 0,
	678, 217, 0, 218, 0, 0, 0, 620, 219, 221,
	220, 222, 665, 666, 643, 710, 0, 0, 0, 0,
	0, 223, 224, 688, 689, 690, 0, 225, 0, 226,
	0, 0, 711, 0, 227, 676, 0, 367, 0, 0,
	228, 229, 0, 0, 230, 231, 672, 674, 713, 0,
	370, 235, 0, 232, 0, 712, 233, 691, 234, 692,
	693, 694, 695, 696, 0, 654, 0, 714, 236, 237,
	238, 715, 239, 240, 241, 0, 243, 242, 0, 677,
	716, 244, 717, 0, 245, 0, 0, 246, 0, 247,
	248, 249, 251, 379, 250, 718, 252, 253, 255, 254,
	615, 0, 644, 673, 256, 697, 257, 258, 0, 259,
	0, 0, 260, 0, 0, 261, 382, 719, 262, 720,
	667, 263, 264, 265, 266, 267, 0, 268, 668, 269,
	385, 270, 0, 271, 272, 273, 274, 275, 698, 276,
	277, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	283, 286, 287, 288, 289, 0, 290, 721, 291, 292,
	621, 293, 0, 297, 298, 299, 300, 143, 302, 388,
	301, 303, 304, 661, 305, 294, 295, 306, 722, 307,
	699, 390, 308, 0, 315, 309, 310, 296, 311, 314,
	700, 312, 313, 669, 0, 316, 145, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 701, 702, 0, 0,
	324, 325, 670, 671, 642, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 662, 334, 0, 398, 335,
	336, 337, 943, 703, 0, 0, 338, 0, 0, 0,
	137, 339, 340, 341, 342, 343, 616, 138, 598, 0,
	647, 636, 637, 634, 635, 626, 614, 0, 0, 0,
	0, 612, 613, 0, 0, 0, 185, 186, 0, 187,
	1124, 0, 0, 0, 664, 629, 625, 0, 0, 188,
	189, 190, 345, 679, 347, 680, 191, 681, 682, 0,
	192, 351, 352, 193, 194, 632, 663, 683, 684, 355,
	0, 195, 675, 0, 655, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	709, 206, 207, 208, 0, 656, 657, 659, 0, 658,
	660, 209, 210, 408, 211, 685, 212, 686, 687, 0,
	213, 0, 214, 0, 215, 0, 0, 678, 217, 0,
	218, 0, 0, 0, 620, 219, 221, 220, 222, 665,
	666, 643, 710, 0, 0, 0, 0, 0, 223, 224,
	688, 689, 690, 0, 225, 0, 226, 0, 0, 711,
	0, 227, 676, 0, 367, 0, 0, 228, 229, 0,
	0, 230, 231, 672, 674, 713, 0, 370, 235, 0,
	232, 0, 712, 233, 691, 234, 692, 693, 694, 695,
	696, 0, 654, 0, 714, 236, 237, 238, 715, 239,
	240, 241, 0, 243, 242, 0, 677, 716, 244, 717,
	0, 245, 0, 0, 246, 0, 247, 248, 249, 251,
	379, 250, 718, 252, 253, 255, 254, 615, 0, 644,
	673, 256, 697, 257, 258, 0, 259, 0, 0, 260,
	0, 0, 261, 382, 719, 262, 720, 667, 263, 264,
	265, 266, 267, 0, 268, 668, 269, 385, 270, 0,
	271, 272, 273, 274, 275, 698, 276, 277, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 283, 286, 287,
	288, 289, 0, 290, 721, 291, 292, 621, 293, 0,
	297, 298, 299, 300, 143, 302, 388, 301, 303, 304,
	661, 305, 294, 295, 306, 722, 307, 699, 390, 308,
	0, 315, 309, 310, 296, 311, 314, 700, 312, 313,
	669, 0, 316, 145, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 701, 702, 0, 0, 324, 325, 670,
	671, 642, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 662, 334, 0, 398, 335, 336, 337, 943,
	703, 0, 0, 338, 0, 0, 0, 137, 339, 340,
	341, 342, 343, 616, 138, 647, 636, 637, 634, 635,
	626, 0, 0, 614, 0, 0, 0, 0, 612, 613,
	0, 185, 186, 0, 187, 0, 0, 1124, 0, 664,
	629, 0, 0, 625, 188, 189, 190, 345, 679, 347,
	680, 191, 681, 682, 0, 192, 351, 352, 193, 194,
	632, 663, 683, 684, 355, 0, 195, 675, 0, 655,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 709, 206, 207, 208, 0,
	656, 657, 659, 0, 658, 660, 209, 210, 408, 211,
	685, 212, 686, 687, 0, 213, 0, 214, 0, 215,
	0, 0, 678, 217, 0, 218, 0, 0, 0, 620,
	219, 221, 220, 222, 665, 666, 643, 710, 0, 0,
	0, 0, 0, 223, 224, 688, 689, 690, 0, 225,
	0, 226, 0, 0, 711, 0, 227, 676, 0, 367,
	0, 0, 228, 229, 0, 0, 230, 231, 672, 674,
	713, 0, 370, 235, 0, 232, 0, 712, 233, 691,
	234, 692, 693, 694, 695, 696, 0, 654, 0, 714,
	236, 237, 238, 715, 239, 240, 241, 0, 243, 242,
	0, 677, 716, 244, 717, 0, 245, 0, 0, 246,
	0, 247, 248, 249, 251, 379, 250, 718, 252, 253,
	255, 254, 615, 0, 644, 673, 256, 697, 257, 258,
	0, 259, 0, 0, 260, 0, 0, 261, 382, 719,
	262, 720, 667, 263, 264, 265, 266, 267, 0, 268,
	668, 269, 385, 270, 0, 271, 272, 273, 274, 275,
	698, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 283, 286, 287, 288, 289, 0, 290, 721,
	291, 292, 621, 293, 0, 297, 298, 299, 300, 143,
	302, 388, 301, 303, 304, 661, 305, 294, 295, 306,
	722, 307, 699, 390, 308, 0, 315, 309, 310, 296,
	311, 314, 700, 312, 313, 669, 0, 316, 145, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 701, 702,
	0, 0, 324, 325, 670, 671, 642, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 662, 334, 0,
	398, 335, 336, 337, 943, 703, 0, 0, 338, 0,
	0, 0, 137, 339, 340, 341, 342, 343, 616, 138,
	647, 636, 637, 634, 635, 626, 0, 0, 614, 0,
	0, 0, 0, 612, 613, 0, 185, 186, 0, 187,
	0, 0, 1124, 0, 664, 629, 0, 0, 625, 188,
	189, 190, 345, 679, 347, 680, 191, 681, 682, 1575,
	192, 351, 352, 193, 194, 632, 663, 683, 684, 355,
	0, 195, 675, 0, 655, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	709, 206, 207, 208, 0, 656, 657, 659, 0, 658,
	660, 209, 210, 408, 211, 685, 212, 686, 687, 0,
	213, 0, 214, 0, 215, 0, 0, 678, 217, 0,
	218, 0, 0, 0, 620, 219, 221, 220, 222, 665,
	666, 643, 710, 0, 0, 0, 0, 0, 223, 224,
	688, 689, 690, 0, 225, 0, 226, 0, 1580, 711,
	0, 227, 676, 0, 367, 0, 0, 228, 229, 0,
	0, 230, 231, 672, 674, 713, 0, 370, 235, 0,
	232, 0, 712, 233, 691, 234, 692, 693, 694, 695,
	696, 0, 654, 0, 714, 236, 237, 238, 715, 239,
	240, 241, 0, 243, 242, 1576, 677, 716, 244, 717,
	0, 245, 0, 0, 246, 0, 247, 248, 249, 251,
	379, 250, 718, 252, 253, 255, 254, 615, 0, 644,
	673, 256, 697, 257, 258, 0, 259, 0, 0, 260,
	0, 0, 261, 382, 719, 262, 720, 667, 263, 264,
	265, 266, 267, 0, 268, 668, 269, 385, 270, 0,
	271, 272, 273, 274, 275, 698, 276, 277, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 283, 286, 287,
	288, 289, 0, 290, 721, 291, 292, 621, 293, 0,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	661, 305, 294, 295, 306, 722, 307, 699, 390, 308,
	0, 315, 309, 310, 296, 311, 314, 700, 312, 313,
	669, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 701, 702, 0, 1577, 324, 325, 670,
	671, 642, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 662, 334, 0, 398, 335, 336, 337, 399,
	703, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 616, 606, 0, 647, 636, 637, 634,
	635, 626, 0, 614, 0, 0, 0, 0, 612, 613,
	0, 0, 185, 186, 0, 187, 0, 622, 0, 0,
	664, 629, 0, 625, 0, 188, 189, 190, 345, 679,
	347, 680, 191, 681, 682, 0, 192, 351, 352, 193,
	194, 632, 663, 683, 684, 355, 0, 195, 675, 0,
	655, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 709, 206, 207, 208,
	0, 656, 657, 659, 0, 658, 660, 209, 210, 408,
	211, 685, 212, 686, 687, 610, 213, 0, 214, 0,
	215, 0, 0, 678, 217, 0, 218, 0, 0, 0,
	620, 219, 221, 220, 222, 665, 666, 643, 710, 0,
	0, 0, 0, 0, 223, 224, 688, 689, 690, 0,
	225, 0, 226, 0, 0, 711, 0, 227, 676, 0,
	367, 0, 0, 228, 229, 0, 0, 230, 231, 672,
	674, 713, 0, 370, 235, 0, 232, 0, 712, 233,
	691, 234, 692, 693, 694, 695, 696, 0, 654, 0,
	714, 236, 237, 238, 715, 239, 240, 241, 0, 243,
	242, 0, 677, 716, 244, 717, 0, 245, 0, 0,
	246, 0, 247, 248, 249, 251, 379, 250, 718, 252,
	253, 255, 254, 615, 0, 644, 673, 256, 697, 257,
	258, 0, 259, 608, 0, 260, 0, 0, 261, 382,
	719, 262, 720, 667, 263, 264, 265, 266, 267, 0,
	268, 668, 269, 385, 270, 0, 271, 272, 273, 274,
	275, 698, 276, 277, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 283, 286, 287, 288, 289, 0, 290,
	721, 291, 292, 621, 293, 0, 297, 298, 299, 300,
	0, 302, 388, 301, 303, 304, 661, 305, 294, 295,
	306, 722, 307, 699, 390, 308, 0, 315, 309, 310,
	296, 311, 314, 700, 312, 313, 669, 0, 316, 0,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 701,
	702, 0, 0, 324, 325, 670, 671, 642, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 662, 334,
	0, 398, 335, 336, 337, 399, 703, 0, 0, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 616,
	0, 647, 636, 637, 634, 635, 626, 0, 0, 614,
	0, 0, 0, 0, 612, 613, 0, 185, 186, 0,
	187, 0, 0, 622, 0, 664, 629, 0, 0, 625,
	188, 189, 190, 345, 679, 347, 680, 191, 681, 682,
	0, 192, 351, 352, 193, 194, 632, 663, 683, 684,
	355, 0, 195, 675, 0, 655, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 709, 206, 207, 208, 0, 656, 657, 659, 0,
	658, 660, 209, 210, 408, 211, 685, 212, 686, 687,
	0, 213, 0, 214, 0, 215, 0, 0, 678, 217,
	0, 218, 0, 0, 0, 620, 219, 221, 220, 222,
	665, 666, 643, 710, 0, 0, 0, 0, 0, 223,
	224, 688, 689, 690, 0, 225, 0, 226, 0, 0,
	711, 0, 227, 676, 0, 367, 0, 0, 228, 229,
	0, 0, 230, 231, 672, 674, 713, 0, 370, 235,
	0, 232, 0, 712, 233, 691, 234, 692, 693, 694,
	695, 696, 0, 654, 0, 714, 236, 237, 238, 715,
	239, 240, 241, 0, 243, 242, 0, 677, 716, 244,
	717, 0, 245, 0, 0, 246, 0, 247, 248, 249,
	251, 379, 250, 718, 252, 253, 255, 254, 615, 2211,
	644, 673, 256, 697, 257, 258, 0, 259, 0, 0,
	260, 0, 0, 261, 382, 719, 262, 720, 667, 263,
	264, 265, 266, 267, 0, 268, 668, 269, 385, 270,
	0, 271, 272, 273, 274, 275, 698, 276, 277, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 283, 286,
	287, 288, 289, 0, 290, 721, 291, 292, 621, 293,
	0, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 661, 305, 294, 295, 306, 722, 307, 699, 390,
	308, 0, 315, 309, 310, 296, 311, 314, 700, 312,
	313, 669, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 701, 702, 0, 0, 324, 325,
	670, 671, 642, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 662, 334, 0, 398, 335, 336, 337,
	399, 703, 0, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 616, 0, 647, 636, 637, 634,
	635, 626, 0, 0, 614, 0, 0, 0, 0, 612,
	613, 1187, 185, 186, 0, 187, 0, 0, 622, 0,
	664, 629, 0, 0, 625, 188, 189, 190, 345, 679,
	347, 680, 191, 681, 682, 0, 192, 351, 352, 193,
	194, 632, 663, 683, 684, 355, 0, 195, 675, 0,
	655, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 709, 206, 207, 208,
	0, 656, 657, 659, 0, 658, 660, 209, 210, 408,
	211, 685, 212, 686, 687, 0, 213, 0, 214, 0,
	215, 0, 0, 678, 217, 0, 218, 0, 0, 0,
	620, 219, 221, 220, 222, 665, 666, 643, 710, 0,
	0, 0, 0, 0, 223, 224, 688, 689, 690, 0,
	225, 0, 226, 0, 0, 711, 0, 227, 676, 0,
	367, 0, 0, 228, 229, 0, 0, 230, 231, 672,
	674, 713, 0, 370, 235, 1425, 232, 0, 712, 233,
	691, 234, 692, 693, 694, 695, 696, 0, 654, 0,
	714, 236, 237, 238, 715, 239, 240, 241, 0, 243,
	242, 0, 677, 716, 244, 717, 0, 245, 0, 0,
	246, 0, 247, 248, 249, 251, 379, 250, 718, 252,
	253, 255, 254, 615, 0, 644, 673, 256, 697, 257,
	258, 0, 259, 0, 0, 260, 0, 0, 261, 382,
	719, 262, 720, 667, 263, 264, 265, 266, 267, 0,
	268, 668, 269, 385, 270, 1424, 271, 272, 273, 274,
	275, 698, 276, 277, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 283, 286, 287, 288, 289, 0, 290,
	721, 291, 292, 621, 293, 0, 297, 298, 299, 300,
	0, 302, 388, 301, 303, 304, 661, 305, 294, 295,
	306, 722, 307, 699, 390, 308, 0, 315, 309, 310,
	296, 311, 314, 700, 312, 313, 669, 0, 316, 0,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 701,
	702, 0, 0, 324, 325, 670, 671, 642, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 662, 334,
	0, 398, 335, 336, 337, 399, 703, 0, 0, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 616,
	0, 647, 636, 637, 634, 635, 626, 0, 0, 614,
	0, 0, 0, 0, 612, 613, 0, 185, 186, 0,
	187, 0, 0, 622, 0, 664, 629, 0, 0, 625,
	188, 189, 190, 345, 679, 347, 680, 191, 681, 682,
	0, 192, 351, 352, 193, 194, 632, 663, 683, 684,
	355, 0, 195, 675, 0, 655, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 709, 206, 207, 208, 0, 656, 657, 659, 0,
	658, 660, 209, 210, 408, 211, 685, 212, 686, 687,
	610, 213, 0, 214, 0, 215, 0, 0, 678, 217,
	0, 218, 0, 0, 0, 620, 219, 221, 220, 222,
	665, 666, 643, 710, 0, 0, 0, 0, 0, 223,
	224, 688, 689, 690, 0, 225, 0, 226, 0, 0,
	711, 0, 227, 676, 0, 367, 0, 0, 228, 229,
	0, 0, 230, 231, 672, 674, 713, 0, 370, 235,
	0, 232, 0, 712, 233, 691, 234, 692, 693, 694,
	695, 696, 0, 654, 0, 714, 236, 237, 238, 715,
	239, 240, 241, 0, 243, 242, 0, 677, 716, 244,
	717, 0, 245, 0, 0, 246, 0, 247, 248, 249,
	251, 379, 250, 718, 252, 253, 255, 254, 615, 0,
	644, 673, 256, 697, 257, 258, 0, 259, 608, 0,
	260, 0, 0, 261, 382, 719, 262, 720, 667, 263,
	264, 265, 266, 267, 0, 268, 668, 269, 385, 270,
	0, 271, 272, 273, 274, 275, 698, 276, 277, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 283, 286,
	287, 288, 289, 0, 290, 721, 291, 292, 621, 293,
	0, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 661, 305, 294, 295, 306, 722, 307, 699, 390,
	308, 0, 315, 309, 310, 296, 311, 314, 700, 312,
	313, 669, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 701, 702, 0, 0, 324, 325,
	670, 671, 642, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 662, 334, 0, 398, 335, 336, 337,
	399, 703, 0, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 616, 0, 647, 636, 637, 634,
	635, 626, 0, 0, 614, 0, 0, 0, 0, 612,
	613, 0, 185, 186, 0, 187, 0, 0, 622, 0,
	664, 629, 0, 0, 625, 188, 189, 190, 345, 679,
	347, 680, 191, 681, 682, 0, 192, 351, 352, 193,
	194, 632, 663, 683, 684, 355, 0, 195, 675, 0,
	655, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 709, 206, 207, 208,
	0, 656, 657, 659, 0, 658, 660, 209, 210, 408,
	211, 685, 212, 686, 687, 610, 213, 0, 214, 0,
	215, 0, 0, 678, 217, 0, 218, 0, 0, 0,
	620, 219, 221, 220, 222, 665, 666, 643, 710, 0,
	0, 0, 0, 0, 223, 224, 688, 689, 690, 0,
	225, 0, 226, 0, 0, 711, 0, 227, 676, 0,
	367, 0, 0, 228, 229, 0, 0, 230, 231, 672,
	674, 713, 0, 370, 235, 0, 232, 0, 712, 233,
	691, 234, 692, 693, 694, 695, 696, 0, 654, 0,
	714, 236, 237, 238, 715, 239, 240, 241, 0, 243,
	242, 0, 677, 716, 244, 717, 0, 245, 0, 0,
	246, 0, 247, 248, 249, 251, 379, 250, 718, 252,
	253, 255, 254, 615, 0, 644, 673, 256, 697, 257,
	258, 0, 259, 0, 0, 260, 0, 0, 261, 382,
	719, 262, 720, 667, 263, 264, 265, 266, 267, 0,
	268, 668, 269, 385, 270, 0, 271, 272, 273, 274,
	275, 698, 276, 277, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 283, 286, 287, 288, 289, 0, 290,
	721, 291, 292, 621, 293, 0, 297, 298, 299, 300,
	0, 302, 388, 301, 303, 304, 661, 305, 294, 295,
	306, 722, 307, 699, 390, 308, 0, 315, 309, 310,
	296, 311, 314, 700, 312, 313, 669, 0, 316, 0,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 701,
	702, 0, 0, 324, 325, 670, 671, 642, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 662, 334,
	0, 398, 335, 336, 337, 399, 703, 0, 0, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 616,
	0, 647, 636, 637, 634, 635, 626, 0, 0, 614,
	0, 0, 0, 0, 612, 613, 0, 185, 186, 0,
	187, 0, 0, 622, 0, 664, 629, 0, 0, 625,
	188, 189, 190, 345, 679, 347, 680, 191, 681, 682,
	0, 192, 351, 352, 193, 194, 632, 663, 683, 684,
	355, 0, 195, 675, 0, 655, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 709, 206, 207, 208, 0, 656, 657, 659, 0,
	658, 660, 209, 210, 408, 211, 685, 212, 686, 687,
	0, 213, 0, 214, 0, 215, 0, 0, 678, 217,
	0, 218, 0, 0, 0, 620, 219, 221, 220, 222,
	665, 666, 643, 710, 0, 0, 0, 0, 0, 223,
	224, 688, 689, 690, 0, 225, 0, 226, 0, 0,
	711, 0, 227, 676, 0, 367, 0, 0, 228, 229,
	0, 0, 230, 231, 672, 674, 713, 0, 370, 235,
	0, 232, 0, 712, 233, 691, 234, 692, 693, 694,
	695, 696, 0, 654, 0, 714, 236, 237, 238, 715,
	239, 240, 241, 0, 243, 242, 0, 677, 716, 244,
	717, 0, 245, 0, 0, 246, 0, 247, 248, 249,
	251, 379, 250, 718, 252, 253, 255, 254, 615, 0,
	644, 673, 256, 697, 257, 258, 0, 259, 0, 0,
	260, 0, 0, 261, 382, 719, 262, 720, 667, 263,
	264, 265, 266, 267, 0, 268, 668, 269, 385, 270,
	0, 271, 272, 273, 274, 275, 698, 276, 277, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 283, 286,
	287, 288, 289, 0, 290, 721, 291, 292, 621, 293,
	0, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 661, 305, 294, 295, 306, 722, 307, 699, 390,
	308, 0, 315, 309, 310, 296, 311, 314, 700, 312,
	313, 669, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 701, 702, 0, 0, 324, 325,
	670, 671, 642, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 662, 334, 0, 398, 335, 336, 337,
	399, 703, 2059, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 616, 0, 647, 636, 637, 634,
	635, 626, 0, 0, 614, 0, 0, 0, 0, 612,
	613, 0, 185, 186, 0, 187, 0, 0, 622, 0,
	664, 629, 0, 0, 625, 188, 189, 190, 345, 679,
	347, 680, 191, 681, 682, 0, 192, 351, 352, 193,
	194, 632, 663, 683, 684, 355, 0, 195, 675, 0,
	655, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 709, 206, 207, 208,
	0, 656, 657, 659, 0, 658, 660, 209, 210, 408,
	211, 685, 212, 686, 687, 0, 213, 0, 214, 0,
	215, 0, 0, 678, 217, 0, 218, 0, 0, 0,
	620, 219, 221, 220, 222, 665, 666, 643, 710, 0,
	0, 0, 0, 0, 223, 224, 688, 689, 690, 0,
	225, 0, 226, 0, 0, 711, 0, 227, 676, 0,
	367, 0, 0, 228, 229, 0, 0, 230, 231, 672,
	674, 713, 0, 370, 235, 0, 232, 0, 712, 233,
	691, 234, 692, 693, 694, 695, 696, 0, 654, 0,
	714, 236, 237, 238, 715, 239, 240, 241, 0, 243,
	242, 0, 677, 716, 244, 717, 0, 245, 0, 0,
	246, 0, 247, 248, 249, 251, 379, 250, 718, 252,
	253, 255, 254, 615, 0, 644, 673, 256, 697, 257,
	258, 0, 259, 0, 0, 260, 0, 0, 261, 382,
	719, 262, 720, 667, 263, 264, 265, 266, 267, 0,
	268, 668, 269, 385, 270, 0, 271, 272, 273, 274,
	275, 698, 276, 277, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 283, 286, 287, 288, 289, 0, 290,
	721, 291, 292, 621, 293, 0, 297, 298, 299, 300,
	0, 302, 388, 301, 303, 304, 661, 305, 294, 295,
	306, 722, 307, 699, 390, 308, 0, 315, 309, 310,
	296, 311, 314, 700, 312, 313, 669, 0, 316, 0,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 701,
	702, 0, 0, 324, 325, 670, 671, 642, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 662, 334,
	0, 398, 335, 336, 337, 399, 703, 0, 0, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 616,
	0, 647, 636, 637, 634, 635, 626, 0, 0, 614,
	0, 0, 0, 0, 612, 613, 1187, 185, 186, 0,
	187, 0, 0, 622, 0, 664, 629, 0, 0, 625,
	188, 189, 190, 345, 679, 347, 680, 191, 681, 682,
	0, 192, 351, 352, 193, 194, 632, 663, 683, 684,
	355, 0, 195, 675, 0, 655, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 709, 206, 207, 208, 0, 656, 657, 659, 0,
	658, 660, 209, 210, 408, 211, 685, 212, 686, 687,
	0, 213, 0, 214, 0, 215, 0, 0, 678, 217,
	0, 218, 0, 0, 0, 620, 219, 221, 220, 222,
	665, 666, 643, 710, 0, 0, 0, 0, 0, 223,
	224, 688, 689, 690, 0, 225, 0, 226, 0, 1580,
	711, 0, 227, 676, 0, 367, 0, 0, 228, 229,
	0, 0, 230, 231, 672, 674, 713, 0, 370, 235,
	0, 232, 0, 712, 233, 691, 234, 692, 693, 694,
	695, 696, 0, 654, 0, 714, 236, 237, 238, 715,
	239, 240, 241, 0, 243, 242, 0, 677, 716, 244,
	717, 0, 245, 0, 0, 246, 0, 247, 248, 249,
	251, 379, 250, 718, 252, 253, 255, 254, 615, 0,
	644, 673, 256, 697, 257, 258, 0, 259, 0, 0,
	260, 0, 0, 261, 382, 719, 262, 720, 667, 263,
	264, 265, 266, 267, 0, 268, 668, 269, 385, 270,
	0, 271, 272, 273, 274, 275, 698, 276, 277, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 283, 286,
	287, 288, 289, 0, 290, 721, 291, 292, 621, 293,
	0, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 661, 305, 294, 295, 306, 722, 307, 699, 390,
	308, 0, 315, 309, 310, 296, 311, 314, 700, 312,
	313, 669, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 701, 702, 0, 0, 324, 325,
	670, 671, 642, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 662, 334, 0, 398, 335, 336, 337,
	399, 703, 0, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 616, 1628, 0, 647, 636, 637,
	634, 635, 626, 0, 614, 0, 0, 0, 0, 612,
	613, 0, 0, 185, 186, 0, 187, 0, 622, 0,
	0, 664, 629, 0, 625, 0, 188, 189, 190, 345,
	679, 347, 680, 191, 681, 682, 0, 192, 351, 352,
	193, 194, 632, 663, 683, 684, 355, 0, 195, 675,
	0, 655, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 709, 206, 207,
	208, 0, 656, 657, 659, 0, 658, 660, 209, 210,
	408, 211, 685, 212, 686, 687, 0, 213, 0, 214,
	0, 215, 0, 0, 678, 217, 0, 218, 0, 0,
	0, 620, 219, 221, 220, 222, 665, 666, 643, 710,
	0, 0, 0, 0, 0, 223, 224, 688, 689, 690,
	0, 225, 0, 226, 0, 0, 711, 0, 227, 676,
	0, 367, 0, 0, 228, 229, 0, 0, 230, 231,
	672, 674, 713, 0, 370, 235, 0, 232, 0, 712,
	233, 691, 234, 692, 693, 694, 695, 696, 0, 654,
	0, 714, 236, 237, 238, 715, 239, 240, 241, 0,
	243, 242, 0, 677, 716, 244, 717, 0, 245, 0,
	0, 246, 0, 247, 248, 249, 251, 379, 250, 718,
	252, 253, 255, 254, 615, 0, 644, 673, 256, 697,
	257, 258, 0, 259, 0, 0, 260, 0, 0, 261,
	382, 719, 262, 720, 667, 263, 264, 265, 266, 267,
	0, 268, 668, 269, 385, 270, 0, 271, 272, 273,
	274, 275, 698, 276, 277, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 283, 286, 287, 288, 289, 0,
	290, 721, 291, 292, 621, 293, 0, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 661, 305, 294,
	295, 306, 722, 307, 699, 390, 308, 0, 315, 309,
	310, 296, 311, 314, 700, 312, 313, 669, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	701, 702, 0, 0, 324, 325, 670, 671, 642, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 662,
	334, 0, 398, 335, 336, 337, 399, 703, 0, 0,
	338, 0, 0, 0, 0, 339, 340, 341, 342, 343,
	616, 1589, 0, 647, 636, 637, 634, 635, 626, 0,
	614, 0, 0, 0, 0, 612, 613, 0, 0, 185,
	186, 0, 187, 0, 622, 0, 0, 664, 629, 0,
	625, 0, 188, 189, 190, 345, 679, 347, 680, 191,
	681, 682, 0, 192, 351, 352, 193, 194, 632, 663,
	683, 684, 355, 0, 195, 675, 0, 655, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 709, 206, 207, 208, 0, 656, 657,
	659, 0, 658, 660, 209, 210, 408, 211, 685, 212,
	686, 687, 0, 213, 0, 214, 0, 215, 0, 0,
	678, 217, 0, 218, 0, 0, 0, 620, 219, 221,
	220, 222, 665, 666, 643, 710, 0, 0, 0, 0,
	0, 223, 224, 688, 689, 690, 0, 225, 0, 226,
	0, 0, 711, 0, 227, 676, 0, 367, 0, 0,
	228, 229, 0, 0, 230, 231, 672, 674, 713, 0,
	370, 235, 0, 232, 0, 712, 233, 691, 234, 692,
	693, 694, 695, 696, 0, 654, 0, 714, 236, 237,
	238, 715, 239, 240, 241, 0, 243, 242, 0, 677,
	716, 244, 717, 0, 245, 0, 0, 246, 0, 247,
	248, 249, 251, 379, 250, 718, 252, 253, 255, 254,
	615, 0, 644, 673, 256, 697, 257, 258, 0, 259,
	0, 0, 260, 0, 0, 261, 382, 719, 262, 720,
	667, 263, 264, 265, 266, 267, 0, 268, 668, 269,
	385, 270, 0, 271, 272, 273, 274, 275, 698, 276,
	277, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	283, 286, 287, 288, 289, 0, 290, 721, 291, 292,
	621, 293, 0, 297, 298, 299, 300, 0, 302, 388,
	301, 303, 304, 661, 305, 294, 295, 306, 722, 307,
	699, 390, 308, 0, 315, 309, 310, 296, 311, 314,
	700, 312, 313, 669, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 701, 702, 0, 0,
	324, 325, 670, 671, 642, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 662, 334, 0, 398, 335,
	336, 337, 399, 703, 0, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 616, 1587, 0, 647,
	636, 637, 634, 635, 626, 0, 614, 0, 0, 0,
	0, 612, 613, 0, 0, 185, 186, 0, 187, 0,
	622, 0, 0, 664, 629, 0, 625, 0, 188, 189,
	190, 345, 679, 347, 680, 191, 681, 682, 0, 192,
	351, 352, 193, 194, 632, 663, 683, 684, 355, 0,
	195, 675, 0, 655, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 709,
	206, 207, 208, 0, 656, 657, 659, 0, 658, 660,
	209, 210, 408, 211, 685, 212, 686, 687, 0, 213,
	0, 214, 0, 215, 0, 0, 678, 217, 0, 218,
	0, 0, 0, 620, 219, 221, 220, 222, 665, 666,
	643, 710, 0, 0, 0, 0, 0, 223, 224, 688,
	689, 690, 0, 225, 0, 226, 0, 0, 711, 0,
	227, 676, 0, 367, 0, 0, 228, 229, 0, 0,
	230, 231, 672, 674, 713, 0, 370, 235, 0, 232,
	0, 712, 233, 691, 234, 692, 693, 694, 695, 696,
	0, 654, 0, 714, 236, 237, 238, 715, 239, 240,
	241, 0, 243, 242, 0, 677, 716, 244, 717, 0,
	245, 0, 0, 246, 0, 247, 248, 249, 251, 379,
	250, 718, 252, 253, 255, 254, 615, 0, 644, 673,
	256, 697, 257, 258, 0, 259, 0, 0, 260, 0,
	0, 261, 382, 719, 262, 720, 667, 263, 264, 265,
	266, 267, 0, 268, 668, 269, 385, 270, 0, 271,
	272, 273, 274, 275, 698, 276, 277, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 283, 286, 287, 288,
	289, 0, 290, 721, 291, 292, 621, 293, 0, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 661,
	305, 294, 295, 306, 722, 307, 699, 390, 308, 0,
	315, 309, 310, 296, 311, 314, 700, 312, 313, 669,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 701, 702, 0, 0, 324, 325, 670, 671,
	642, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 662, 334, 0, 398, 335, 336, 337, 399, 703,
	0, 0, 338, 0, 0, 0, 0, 339, 340, 341,
	342, 343, 616, 1571, 0, 647, 636, 637, 634, 635,
	626, 0, 614, 0, 0, 0, 0, 612, 613, 0,
	0, 185, 186, 0, 187, 0, 622, 0, 0, 664,
	629, 0, 625, 0, 188, 189, 190, 345, 679, 347,
	680, 191, 681, 682, 0, 192, 351, 352, 193, 194,
	632, 663, 683, 684, 355, 0, 195, 675, 0, 655,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 709, 206, 207, 208, 0,
	656, 657, 659, 0, 658, 660, 209, 210, 408, 211,
	685, 212, 686, 687, 0, 213, 0, 214, 0, 215,
	0, 0, 678, 217, 0, 218, 0, 0, 0, 620,
	219, 221, 220, 222, 665, 666, 643, 710, 0, 0,
	0, 0, 0, 223, 224, 688, 689, 690, 0, 225,
	0, 226, 0, 0, 711, 0, 227, 676, 0, 367,
	0, 0, 228, 229, 0, 0, 230, 231, 672, 674,
	713, 0, 370, 235, 0, 232, 0, 712, 233, 691,
	234, 692, 693, 694, 695, 696, 0, 654, 0, 714,
	236, 237, 238, 715, 239, 240, 241, 0, 243, 242,
	0, 677, 716, 244, 717, 0, 245, 0, 0, 246,
	0, 247, 248, 249, 251, 379, 250, 718, 252, 253,
	255, 254, 615, 0, 644, 673, 256, 697, 257, 258,
	0, 259, 0, 0, 260, 0, 0, 261, 382, 719,
	262, 720, 667, 263, 264, 265, 266, 267, 0, 268,
	668, 269, 385, 270, 0, 271, 272, 273, 274, 275,
	698, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 283, 286, 287, 288, 289, 0, 290, 721,
	291, 292, 621, 293, 0, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 661, 305, 294, 295, 306,
	722, 307, 699, 390, 308, 0, 315, 309, 310, 296,
	311, 314, 700, 312, 313, 669, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 701, 702,
	0, 0, 324, 325, 670, 671, 642, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 662, 334, 0,
	398, 335, 336, 337, 399, 703, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 616, 1559,
	0, 647, 636, 637, 634, 635, 626, 0, 614, 0,
	0, 0, 0, 612, 613, 0, 0, 185, 186, 0,
	187, 0, 622, 0, 0, 664, 629, 0, 625, 0,
	188, 189, 190, 345, 679, 347, 680, 191, 681, 682,
	0, 192, 351, 352, 193, 194, 632, 663, 683, 684,
	355, 0, 195, 675, 0, 655, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 709, 206, 207, 208, 0, 656, 657, 659, 0,
	658, 660, 209, 210, 408, 211, 685, 212, 686, 687,
	0, 213, 0, 214, 0, 215, 0, 0, 678, 217,
	0, 218, 0, 0, 0, 620, 219, 221, 220, 222,
	665, 666, 643, 710, 0, 0, 0, 0, 0, 223,
	224, 688, 689, 690, 0, 225, 0, 226, 0, 0,
	711, 0, 227, 676, 0, 367, 0, 0, 228, 229,
	0, 0, 230, 231, 672, 674, 713, 0, 370, 235,
	0, 232, 0, 712, 233, 691, 234, 692, 693, 694,
	695, 696, 0, 654, 0, 714, 236, 237, 238, 715,
	239, 240, 241, 0, 243, 242, 0, 677, 716, 244,
	717, 0, 245, 0, 0, 246, 0, 247, 248, 249,
	251, 379, 250, 718, 252, 253, 255, 254, 615, 0,
	644, 673, 256, 697, 257, 258, 0, 259, 0, 0,
	260, 0, 0, 261, 382, 719, 262, 720, 667, 263,
	264, 265, 266, 267, 0, 268, 668, 269, 385, 270,
	0, 271, 272, 273, 274, 275, 698, 276, 277, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 283, 286,
	287, 288, 289, 0, 290, 721, 291, 292, 621, 293,
	0, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 661, 305, 294, 295, 306, 722, 307, 699, 390,
	308, 0, 315, 309, 310, 296, 311, 314, 700, 312,
	313, 669, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 701, 702, 0, 0, 324, 325,
	670, 671, 642, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 662, 334, 0, 398, 335, 336, 337,
	399, 703, 0, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 616, 1557, 0, 1549, 636, 637,
	634, 635, 626, 0, 614, 0, 0, 0, 0, 612,
	613, 0, 0, 185, 186, 0, 187, 0, 622, 0,
	0, 664, 629, 0, 625, 0, 188, 189, 190, 345,
	679, 347, 680, 191, 681, 682, 0, 192, 351, 352,
	193, 194, 632, 663, 683, 684, 355, 0, 195, 675,
	0, 655, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 709, 206, 207,
	208, 0, 656, 657, 659, 0, 658, 660, 209, 210,
	408, 211, 685, 1552, 686, 687, 0, 213, 0, 214,
	0, 215, 0, 0, 678, 217, 0, 218, 0, 0,
	0, 620, 219, 221, 220, 222, 665, 666, 643, 710,
	0, 0, 0, 0, 0, 223, 224, 688, 689, 690,
	0, 225, 0, 226, 0, 0, 711, 0, 227, 676,
	0, 367, 0, 0, 228, 1553, 0, 0, 230, 231,
	672, 674, 713, 0, 370, 235, 0, 232, 0, 712,
	233, 691, 234, 692, 693, 694, 695, 696, 0, 654,
	0, 714, 236, 237, 238, 715, 239, 240, 241, 0,
	243, 242, 0, 677, 716, 244, 717, 0, 245, 0,
	0, 246, 0, 247, 1554, 1551, 251, 379, 250, 718,
	252, 253, 255, 254, 615, 0, 644, 673, 256, 697,
	257, 258, 0, 259, 0, 0, 260, 0, 0, 261,
	382, 719, 262, 720, 667, 263, 264, 265, 266, 267,
	0, 268, 668, 269, 385, 270, 0, 271, 272, 273,
	274, 275, 698, 276, 277, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 283, 286, 287, 288, 289, 0,
	290, 721, 291, 292, 621, 293, 0, 297, 298, 299,
	1555, 0, 302, 388, 301, 303, 304, 661, 305, 294,
	295, 306, 722, 307, 699, 390, 308, 0, 315, 309,
	310, 296, 311, 314, 700, 312, 313, 669, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	701, 702, 0, 0, 324, 325, 670, 671, 642, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 662,
	334, 0, 398, 335, 336, 337, 399, 703, 0, 0,
	338, 0, 0, 0, 0, 339, 340, 341, 1550, 343,
	616, 1546, 0, 1549, 636, 637, 634, 635, 626, 0,
	614, 0, 0, 0, 0, 612, 613, 0, 0, 185,
	186, 0, 187, 0, 622, 0, 0, 664, 629, 0,
	625, 0, 188, 189, 190, 345, 679, 347, 680, 191,
	681, 682, 0, 192, 351, 352, 193, 194, 632, 663,
	683, 684, 355, 0, 195, 675, 0, 655, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 709, 206, 207, 208, 0, 656, 657,
	659, 0, 658, 660, 209, 210, 408, 211, 685, 1552,
	686, 687, 0, 213, 0, 214, 0, 215, 0, 0,
	678, 217, 0, 218, 0, 0, 0, 620, 219, 221,
	220, 222, 665, 666, 643, 710, 0, 0, 0, 0,
	0, 223, 224, 688, 689, 690, 0, 225, 0, 226,
	0, 0, 711, 0, 227, 676, 0, 367, 0, 0,
	228, 1553, 0, 0, 230, 231, 672, 674, 713, 0,
	370, 235, 0, 232, 0, 712, 233, 691, 234, 692,
	693, 694, 695, 696, 0, 654, 0, 714, 236, 237,
	238, 715, 239, 240, 241, 0, 243, 242, 0, 677,
	716, 244, 717, 0, 245, 0, 0, 246, 0, 247,
	1554, 1551, 251, 379, 250, 718, 252, 253, 255, 254,
	615, 0, 644, 673, 256, 697, 257, 258, 0, 259,
	0, 0, 260, 0, 0, 261, 382, 719, 262, 720,
	667, 263, 264, 265, 266, 267, 0, 268, 668, 269,
	385, 270, 0, 271, 272, 273, 274, 275, 698, 276,
	277, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	283, 286, 287, 288, 289, 0, 290, 721, 291, 292,
	621, 293, 0, 297, 298, 299, 1555, 0, 302, 388,
	301, 303, 304, 661, 305, 294, 295, 306, 722, 307,
	699, 390, 308, 0, 315, 309, 310, 296, 311, 314,
	700, 312, 313, 669, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 701, 702, 0, 0,
	324, 325, 670, 671, 642, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 662, 334, 0, 398, 335,
	336, 337, 399, 703, 0, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 1550, 343, 616, 0, 647, 636,
	637, 634, 635, 626, 0, 0, 614, 0, 0, 0,
	0, 612, 613, 0, 185, 186, 0, 187, 0, 0,
	622, 0, 664, 629, 0, 0, 625, 188, 189, 190,
	345, 679, 347, 680, 191, 681, 682, 0, 192, 351,
	352, 193, 194, 632, 663, 683, 684, 355, 0, 195,
	675, 0, 655, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 709, 206,
	207, 208, 0, 656, 657, 659, 0, 658, 660, 209,
	210, 408, 211, 685, 212, 686, 687, 0, 213, 0,
	214, 0, 215, 0, 0, 678, 217, 0, 218, 0,
	0, 0, 620, 219, 221, 220, 222, 665, 666, 643,
	710, 0, 0, 0, 0, 0, 223, 224, 688, 689,
	690, 0, 225, 0, 226, 0, 0, 711, 0, 227,
	676, 0, 367, 0, 0, 228, 229, 0, 0, 230,
	231, 672, 674, 713, 0, 370, 235, 0, 232, 0,
	712, 233, 691, 234, 692, 693, 694, 695, 696, 0,
	654, 0, 714, 236, 237, 238, 715, 239, 240, 241,
	0, 243, 242, 0, 677, 716, 244, 717, 0, 245,
	0, 0, 246, 0, 247, 248, 249, 251, 379, 250,
	718, 252, 253, 255, 254, 615, 0, 644, 673, 256,
	697, 257, 258, 0, 259, 0, 0, 260, 0, 0,
	261, 382, 719, 262, 720, 667, 263, 264, 265, 266,
	267, 0, 268, 668, 269, 385, 270, 0, 271, 272,
	273, 274, 275, 698, 276, 277, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 283, 286, 287, 288, 289,
	0, 290, 721, 291, 292, 621, 293, 0, 297, 298,
	299, 300, 0, 302, 388, 301, 303, 304, 661, 305,
	294, 295, 306, 722, 307, 699, 390, 308, 0, 315,
	309, 310, 296, 311, 314, 700, 312, 313, 669, 0,
	316, 0, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 701, 702, 0, 0, 324, 325, 670, 671, 642,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	662, 334, 0, 398, 335, 336, 337, 399, 703, 0,
	0, 338, 0, 0, 0, 0, 339, 340, 341, 342,
	343, 616, 0, 647, 636, 637, 634, 635, 626, 0,
	0, 614, 0, 0, 0, 0, 612, 613, 0, 185,
	186, 1412, 187, 1128, 0, 622, 0, 664, 629, 0,
	0, 625, 188, 189, 190, 345, 679, 347, 680, 191,
	681, 682, 0, 192, 351, 352, 193, 194, 632, 663,
	683, 684, 355, 0, 195, 675, 0, 655, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 709, 206, 207, 208, 0, 656, 657,
	659, 0, 658, 660, 209, 210, 408, 211, 685, 212,
	686, 687, 0, 213, 0, 214, 0, 215, 0, 0,
	678, 217, 0, 218, 0, 0, 0, 620, 219, 221,
	220, 222, 665, 666, 643, 710, 0, 0, 0, 0,
	0, 223, 224, 688, 689, 690, 0, 225, 0, 226,
	0, 0, 711, 0, 227, 676, 0, 367, 0, 0,
	228, 229, 0, 0, 230, 231, 672, 674, 713, 0,
	370, 235, 0, 232, 0, 712, 233, 691, 234, 692,
	693, 694, 695, 696, 0, 654, 0, 714, 236, 237,
	238, 715, 239, 240, 241, 0, 243, 242, 0, 677,
	716, 244, 717, 0, 245, 0, 0, 246, 0, 247,
	248, 249, 251, 379, 250, 718, 252, 253, 255, 254,
	615, 0, 644, 673, 256, 697, 257, 258, 0, 259,
	0, 0, 260, 0, 0, 261, 382, 719, 262, 720,
	667, 263, 264, 265, 266, 267, 0, 268, 668, 269,
	385, 270, 0, 271, 272, 273, 274, 275, 698, 276,
	277, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	283, 286, 287, 288, 289, 0, 290, 721, 291, 292,
	621, 293, 0, 297, 298, 299, 300, 0, 302, 388,
	301, 303, 304, 661, 305, 294, 295, 306, 722, 307,
	699, 390, 308, 0, 315, 309, 310, 296, 311, 314,
	700, 312, 313, 669, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 701, 702, 0, 0,
	324, 325, 670, 671, 642, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 662, 334, 0, 398, 335,
	336, 337, 399, 703, 0, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 616, 889, 0, 647,
	636, 637, 634, 635, 626, 0, 614, 0, 0, 0,
	0, 612, 613, 0, 0, 185, 186, 0, 187, 0,
	622, 0, 0, 664, 629, 0, 625, 0, 188, 189,
	190, 345, 679, 347, 680, 191, 681, 682, 0, 192,
	351, 352, 193, 194, 632, 663, 683, 684, 355, 0,
	195, 675, 0, 655, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 709,
	206, 207, 208, 0, 656, 657, 659, 0, 658, 660,
	209, 210, 408, 211, 685, 212, 686, 687, 0, 213,
	0, 214, 0, 215, 0, 0, 678, 217, 0, 218,
	0, 0, 0, 620, 219, 221, 220, 222, 665, 666,
	643, 710, 0, 0, 0, 0, 0, 223, 224, 688,
	689, 690, 0, 225, 0, 226, 0, 0, 711, 0,
	227, 676, 0, 367, 0, 0, 228, 229, 0, 0,
	230, 231, 672, 674, 713, 0, 370, 235, 0, 232,
	0, 712, 233, 691, 234, 692, 693, 694, 695, 696,
	0, 654, 0, 714, 236, 237, 238, 715, 239, 240,
	241, 0, 243, 242, 0, 677, 716, 244, 717, 0,
	245, 0, 0, 246, 0, 247, 248, 249, 251, 379,
	250, 718, 252, 253, 255, 254, 615, 0, 644, 673,
	256, 697, 257, 258, 0, 259, 0, 0, 260, 0,
	0, 261, 382, 719, 262, 720, 667, 263, 264, 265,
	266, 267, 0, 268, 668, 269, 385, 270, 0, 271,
	272, 273, 274, 275, 698, 276, 277, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 283, 286, 287, 288,
	289, 0, 290, 721, 291, 292, 621, 293, 0, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 661,
	305, 294, 295, 306, 722, 307, 699, 390, 308, 0,
	315, 309, 310, 296, 311, 314, 700, 312, 313, 669,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 701, 702, 0, 0, 324, 325, 670, 671,
	642, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 662, 334, 0, 398, 335, 336, 337, 399, 703,
	0, 0, 338, 0, 0, 0, 0, 339, 340, 341,
	342, 343, 616, 887, 0, 647, 636, 637, 634, 635,
	626, 0, 614, 0, 0, 0, 0, 612, 613, 0,
	0, 185, 186, 0, 187, 0, 622, 0, 0, 664,
	629, 0, 625, 0, 188, 189, 190, 345, 679, 347,
	680, 191, 681, 682, 0, 192, 351, 352, 193, 194,
	632, 663, 683, 684, 355, 0, 195, 675, 0, 655,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 709, 206, 207, 208, 0,
	656, 657, 659, 0, 658, 660, 209, 210, 408, 211,
	685, 212, 686, 687, 0, 213, 0, 214, 0, 215,
	0, 0, 678, 217, 0, 218, 0, 0, 0, 620,
	219, 221, 220, 222, 665, 666, 643, 710, 0, 0,
	0, 0, 0, 223, 224, 688, 689, 690, 0, 225,
	0, 226, 0, 0, 711, 0, 227, 676, 0, 367,
	0, 0, 228, 229, 0, 0, 230, 231, 672, 674,
	713, 0, 370, 235, 0, 232, 0, 712, 233, 691,
	234, 692, 693, 694, 695, 696, 0, 654, 0, 714,
	236, 237, 238, 715, 239, 240, 241, 0, 243, 242,
	0, 677, 716, 244, 717, 0, 245, 0, 0, 246,
	0, 247, 248, 249, 251, 379, 250, 718, 252, 253,
	255, 254, 615, 0, 644, 673, 256, 697, 257, 258,
	0, 259, 0, 0, 260, 0, 0, 261, 382, 719,
	262, 720, 667, 263, 264, 265, 266, 267, 0, 268,
	668, 269, 385, 270, 0, 271, 272, 273, 274, 275,
	698, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 283, 286, 287, 288, 289, 0, 290, 721,
	291, 292, 621, 293, 0, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 661, 305, 294, 295, 306,
	722, 307, 699, 390, 308, 0, 315, 309, 310, 296,
	311, 314, 700, 312, 313, 669, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 701, 702,
	0, 0, 324, 325, 670, 671, 642, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 662, 334, 0,
	398, 335, 336, 337, 399, 703, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 616, 0,
	647, 636, 637, 634, 635, 626, 0, 0, 614, 0,
	0, 0, 0, 612, 613, 0, 185, 186, 0, 187,
	0, 0, 622, 0, 664, 629, 0, 0, 625, 188,
	189, 190, 345, 679, 347, 680, 191, 681, 682, 0,
	192, 351, 352, 193, 194, 632, 663, 683, 684, 355,
	0, 195, 675, 0, 655, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	709, 206, 207, 2525, 0, 656, 657, 659, 0, 658,
	660, 209, 210, 408, 211, 685, 212, 686, 687, 0,
	213, 0, 214, 0, 215, 0, 0, 678, 217, 0,
	218, 0, 0, 0, 620, 219, 221, 220, 222, 665,
	666, 643, 710, 0, 0, 0, 0, 0, 223, 224,
	688, 689, 690, 0, 225, 0, 226, 0, 0, 711,
	0, 227, 676, 0, 367, 0, 0, 228, 229, 0,
	0, 230, 231, 672, 674, 713, 0, 370, 235, 0,
	232, 0, 712, 233, 691, 234, 692, 693, 694, 695,
	696, 0, 654, 0, 714, 236, 237, 238, 715, 239,
	240, 241, 0, 243, 242, 0, 677, 716, 244, 717,
	0, 245, 0, 0, 246, 0, 247, 248, 249, 251,
	379, 250, 718, 252, 253, 255, 254, 615, 0, 644,
	673, 256, 697, 257, 258, 0, 259, 0, 0, 260,
	0, 0, 261, 382, 719, 262, 720, 667, 263, 264,
	265, 266, 267, 0, 268, 668, 269, 385, 270, 0,
	271, 272, 273, 274, 275, 698, 276, 277, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 283, 286, 287,
	288, 289, 0, 290, 721, 291, 292, 621, 293, 0,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	661, 305, 294, 295, 306, 722, 307, 699, 390, 308,
	0, 315, 309, 310, 296, 311, 314, 700, 312, 313,
	669, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 701, 702, 0, 0, 324, 325, 670,
	671, 642, 326, 327, 2524, 329, 0, 0, 330, 331,
	332, 333, 662, 334, 0, 398, 335, 336, 337, 399,
	703, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 616, 0, 647, 636, 637, 634, 635,
	626, 0, 0, 614, 0, 0, 0, 0, 612, 613,
	0, 185, 186, 0, 187, 0, 0, 622, 0, 664,
	629, 0, 0, 625, 188, 189, 190, 345, 679, 347,
	680, 191, 681, 682, 0, 192, 351, 352, 193, 194,
	632, 663, 683, 684, 355, 0, 195, 675, 0, 655,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 709, 206, 207, 208, 0,
	656, 657, 659, 0, 658, 660, 209, 210, 408, 211,
	685, 212, 686, 687, 0, 213, 0, 214, 0, 215,
	0, 0, 678, 217, 0, 218, 0, 0, 0, 620,
	219, 221, 220, 222, 665, 666, 643, 710, 0, 0,
	0, 0, 0, 223, 224, 688, 689, 690, 0, 225,
	0, 226, 0, 0, 711, 0, 227, 676, 0, 367,
	0, 0, 228, 229, 0, 0, 230, 231, 672, 674,
	713, 0, 370, 235, 0, 232, 0, 712, 233, 691,
	234, 692, 693, 694, 695, 696, 0, 654, 0, 714,
	236, 237, 238, 715, 239, 240, 241, 0, 243, 242,
	0, 677, 716, 244, 717, 0, 245, 0, 0, 246,
	0, 247, 248, 249, 251, 379, 250, 718, 252, 253,
	255, 254, 615, 0, 644, 673, 256, 697, 257, 258,
	0, 259, 0, 0, 260, 0, 0, 261, 382, 719,
	262, 720, 667, 263, 264, 265, 266, 267, 0, 268,
	668, 269, 385, 270, 0, 271, 272, 273, 274, 275,
	698, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 283, 286, 287, 288, 289, 0, 290, 721,
	291, 292, 621, 293, 0, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 661, 305, 294, 295, 306,
	722, 307, 699, 390, 308, 0, 315, 309, 310, 296,
	311, 314, 700, 312, 313, 669, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 701, 702,
	0, 0, 324, 325, 670, 671, 642, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 662, 334, 0,
	398, 335, 336, 337, 399, 703, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 616, 0,
	647, 636, 637, 634, 635, 626, 0, 0, 614, 0,
	0, 0, 0, 612, 613, 0, 185, 186, 0, 187,
	0, 0, 622, 0, 664, 629, 0, 0, 625, 188,
	189, 190, 2523, 679, 347, 680, 191, 681, 682, 0,
	192, 351, 352, 193, 194, 632, 663, 683, 684, 355,
	0, 195, 675, 0, 655, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	709, 206, 207, 2525, 0, 656, 657, 659, 0, 658,
	660, 209, 210, 408, 211, 685, 212, 686, 687, 0,
	213, 0, 214, 0, 215, 0, 0, 678, 217, 0,
	218, 0, 0, 0, 620, 219, 221, 220, 222, 665,
	666, 643, 710, 0, 0, 0, 0, 0, 223, 224,
	688, 689, 690, 0, 225, 0, 226, 0, 0, 711,
	0, 227, 676, 0, 367, 0, 0, 228, 229, 0,
	0, 230, 231, 672, 674, 713, 0, 370, 235, 0,
	232, 0, 712, 233, 691, 234, 692, 693, 694, 695,
	696, 0, 654, 0, 714, 236, 237, 238, 715, 239,
	240, 241, 0, 243, 242, 0, 677, 716, 244, 717,
	0, 245, 0, 0, 246, 0, 247, 248, 249, 251,
	379, 250, 718, 252, 253, 255, 254, 615, 0, 644,
	673, 256, 697, 257, 258, 0, 259, 0, 0, 260,
	0, 0, 261, 382, 719, 262, 720, 667, 263, 264,
	265, 266, 267, 0, 268, 668, 269, 385, 270, 0,
	271, 272, 273, 274, 275, 698, 276, 277, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 283, 286, 287,
	288, 289, 0, 290, 721, 291, 292, 621, 293, 0,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	661, 305, 294, 295, 306, 722, 307, 699, 390, 308,
	0, 315, 309, 310, 296, 311, 314, 700, 312, 313,
	669, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 701, 702, 0, 0, 324, 325, 670,
	671, 642, 326, 327, 2524, 329, 0, 0, 330, 331,
	332, 333, 662, 334, 0, 398, 335, 336, 337, 399,
	703, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 616, 0, 647, 636, 637, 634, 635,
	626, 0, 0, 614, 0, 0, 0, 0, 612, 613,
	0, 185, 186, 0, 187, 0, 0, 622, 0, 664,
	629, 0, 0, 625, 188, 189, 190, 345, 679, 347,
	680, 191, 681, 682, 0, 192, 351, 352, 193, 194,
	632, 663, 683, 684, 355, 0, 195, 675, 0, 655,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 709, 206, 207, 208, 0,
	656, 657, 659, 0, 658, 660, 209, 210, 408, 211,
	685, 212, 686, 687, 0, 213, 0, 214, 0, 215,
	0, 0, 678, 217, 0, 218, 0, 0, 0, 620,
	219, 221, 220, 222, 665, 666, 643, 710, 0, 0,
	0, 0, 0, 223, 224, 688, 689, 690, 0, 225,
	0, 226, 0, 0, 711, 0, 227, 676, 0, 367,
	0, 0, 228, 229, 0, 0, 230, 231, 672, 674,
	713, 0, 370, 235, 0, 232, 0, 712, 233, 691,
	234, 692, 693, 694, 695, 696, 0, 654, 0, 714,
	236, 237, 238, 715, 239, 240, 241, 0, 243, 242,
	0, 677, 716, 244, 717, 0, 245, 0, 0, 246,
	0, 247, 248, 249, 251, 379, 250, 718, 252, 253,
	255, 254, 0, 0, 644, 673, 256, 697, 257, 258,
	0, 259, 0, 0, 260, 0, 0, 261, 382, 719,
	262, 720, 667, 263, 264, 265, 266, 267, 0, 268,
	668, 269, 385, 270, 0, 271, 272, 273, 274, 275,
	698, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 283, 286, 287, 288, 289, 0, 290, 721,
	291, 292, 1569, 293, 0, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 661, 305, 294, 295, 306,
	722, 307, 699, 390, 308, 0, 315, 309, 310, 296,
	311, 314, 700, 312, 313, 669, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 701, 702,
	0, 0, 324, 325, 670, 671, 642, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 662, 334, 0,
	398, 335, 336, 337, 399, 703, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 0,
	647, 636, 637, 634, 635, 626, 0, 0, 1567, 0,
	0, 0, 0, 1565, 1566, 0, 185, 186, 0, 187,
	0, 0, 1568, 0, 664, 629, 0, 0, 625, 188,
	189, 190, 345, 679, 347, 680, 191, 681, 682, 0,
	192, 351, 352, 193, 194, 0, 663, 683, 684, 355,
	0, 195, 675, 0, 655, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	709, 206, 207, 208, 0, 656, 657, 659, 0, 658,
	660, 209, 210, 408, 211, 685, 212, 686, 687, 0,
	213, 0, 214, 0, 215, 0, 0, 678, 217, 0,
	218, 0, 0, 0, 360, 219, 221, 220, 222, 665,
	666, 643, 710, 0, 0, 0, 0, 0, 223, 224,
	688, 689, 690, 0, 225, 0, 226, 0, 0, 711,
	0, 227, 676, 0, 367, 0, 0, 228, 229, 0,
	0, 230, 231, 672, 674, 713, 0, 370, 235, 0,
	232, 0, 712, 233, 691, 234, 692, 693, 694, 695,
	696, 0, 654, 0, 714, 236, 237, 238, 715, 239,
	240, 241, 0, 243, 242, 0, 677, 716, 244, 717,
	0, 245, 0, 0, 246, 0, 247, 248, 249, 251,
	379, 250, 718, 252, 253, 255, 254, 0, 0, 644,
	673, 256, 697, 257, 258, 0, 259, 0, 0, 260,
	0, 0, 261, 382, 719, 262, 720, 667, 263, 264,
	265, 266, 267, 0, 268, 668, 269, 385, 270, 0,
	271, 272, 273, 274, 275, 698, 276, 277, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 283, 286, 287,
	288, 289, 0, 290, 721, 291, 292, 1569, 293, 0,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	661, 305, 294, 295, 306, 722, 307, 699, 390, 308,
	0, 315, 309, 310, 296, 311, 314, 700, 312, 313,
	669, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 701, 702, 0, 0, 324, 325, 670,
	671, 642, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 662, 334, 0, 398, 335, 336, 337, 399,
	703, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 0, 647, 636, 637, 634, 635,
	626, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 1568, 0, 664,
	629, 0, 0, 625, 188, 189, 190, 0, 679, 347,
	680, 191, 681, 682, 0, 192, 351, 352, 193, 194,
	632, 663, 683, 684, 355, 0, 195, 675, 0, 655,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 709, 206, 207, 2525, 0,
	656, 657, 659, 0, 658, 660, 209, 210, 408, 211,
	685, 212, 686, 687, 0, 213, 0, 214, 0, 215,
	0, 0, 678, 217, 0, 218, 0, 0, 0, 620,
	219, 221, 220, 222, 665, 666, 643, 710, 0, 0,
	0, 0, 0, 223, 224, 688, 689, 690, 0, 225,
	0, 226, 0, 0, 711, 0, 227, 676, 0, 367,
	0, 0, 228, 229, 0, 0, 230, 231, 672, 674,
	0, 0, 370, 235, 0, 232, 0, 712, 233, 691,
	234, 692, 693, 694, 695, 696, 0, 654, 0, 0,
	236, 237, 238, 715, 239, 240, 241, 0, 243, 242,
	0, 677, 716, 244, 0, 0, 245, 0, 0, 246,
	0, 247, 248, 249, 251, 379, 250, 718, 252, 253,
	255, 254, 615, 0, 644, 673, 256, 697, 257, 258,
	0, 259, 0, 0, 260, 0, 0, 261, 382, 719,
	262, 720, 667, 263, 264, 265, 266, 267, 0, 268,
	668, 269, 385, 270, 0, 271, 272, 273, 274, 275,
	698, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 283, 286, 287, 288, 289, 0, 290, 721,
	291, 292, 621, 293, 0, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 661, 305, 294, 295, 306,
	0, 307, 699, 390, 308, 0, 315, 309, 310, 296,
	311, 314, 700, 312, 313, 669, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 701, 702,
	0, 0, 324, 325, 670, 671, 642, 326, 327, 2524,
	329, 0, 0, 330, 331, 332, 333, 662, 334, 0,
	398, 335, 336, 337, 399, 703, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 940, 0,
	780, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 612, 613, 0, 185, 186, 0, 187,
	0, 0, 622, 0, 344, 0, 0, 0, 625, 188,
	189, 190, 345, 346, 347, 348, 191, 349, 350, 0,
	192, 351, 352, 193, 194, 0, 0, 353, 354, 355,
	0, 195, 356, 0, 784, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	709, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 408, 211, 357, 212, 358, 359, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 360, 219, 221, 220, 222, 361,
	362, 0, 710, 0, 0, 0, 0, 0, 223, 224,
	363, 364, 365, 0, 225, 0, 226, 0, 0, 711,
	0, 227, 366, 0, 367, 0, 0, 228, 229, 0,
	0, 230, 231, 368, 369, 713, 0, 370, 235, 0,
	232, 0, 712, 233, 371, 234, 372, 373, 374, 375,
	376, 0, 377, 0, 714, 236, 237, 238, 715, 239,
	240, 241, 0, 243, 242, 0, 378, 716, 244, 717,
	0, 245, 0, 0, 246, 0, 247, 248, 249, 251,
	379, 250, 718, 252, 253, 255, 254, 0, 0, 0,
	380, 256, 381, 257, 258, 0, 259, 0, 0, 260,
	0, 0, 261, 382, 719, 262, 720, 383, 263, 264,
	265, 266, 267, 0, 268, 384, 269, 385, 270, 0,
	271, 272, 273, 274, 275, 386, 276, 277, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 283, 286, 287,
	288, 289, 0, 290, 721, 291, 292, 387, 293, 0,
	297, 298, 299, 300, 143, 302, 388, 301, 303, 304,
	0, 305, 294, 295, 306, 722, 307, 389, 390, 308,
	0, 315, 309, 310, 296, 311, 314, 391, 312, 313,
	392, 0, 316, 145, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 943,
	400, 0, 0, 338, 0, 0, 0, 137, 339, 340,
	341, 342, 343, 598, 138, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 114, 0, 344,
	0, 0, 0, 0, 188, 189, 190, 345, 346, 347,
	348, 191, 349, 350, 0, 192, 351, 352, 193, 194,
	0, 0, 353, 354, 355, 0, 195, 356, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 408, 211,
	357, 212, 358, 359, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 360,
	219, 221, 220, 222, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 363, 364, 365, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 366, 0, 367,
	0, 0, 228, 229, 0, 0, 230, 231, 368, 369,
	0, 0, 370, 235, 0, 232, 0, 0, 233, 371,
	234, 372, 373, 374, 375, 376, 0, 377, 0, 0,
	236, 237, 238, 0, 239, 240, 241, 0, 243, 242,
	0, 378, 0, 244, 0, 0, 245, 0, 0, 246,
	0, 247, 248, 249, 251, 379, 250, 0, 252, 253,
	255, 254, 0, 0, 0, 380, 256, 381, 257, 258,
	0, 259, 0, 763, 260, 0, 0, 261, 382, 0,
	262, 0, 383, 263, 264, 265, 266, 267, 0, 268,
	384, 269, 385, 270, 0, 271, 272, 273, 274, 275,
	386, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 283, 286, 287, 288, 289, 0, 290, 0,
	291, 292, 387, 293, 0, 297, 298, 299, 300, 143,
	302, 388, 301, 303, 304, 0, 305, 294, 295, 306,
	0, 307, 389, 390, 308, 0, 315, 309, 310, 296,
	311, 314, 391, 312, 313, 392, 0, 316, 145, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 943, 400, 0, 0, 338, 0,
	0, 0, 137, 339, 340, 341, 342, 343, 0, 138,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	757, 0, 1209, 0, 344, 0, 0, 0, 0, 188,
	189, 190, 345, 346, 347, 348, 191, 349, 350, 0,
	192, 351, 352, 193, 194, 0, 0, 353, 354, 355,
	0, 195, 356, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 408, 211, 357, 212, 358, 359, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 360, 219, 221, 220, 222, 361,
	362, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	363, 364, 365, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 366, 0, 367, 0, 0, 228, 229, 0,
	0, 230, 231, 368, 369, 0, 0, 370, 235, 0,
	232, 0, 0, 233, 371, 234, 372, 373, 374, 375,
	376, 0, 377, 0, 0, 236, 237, 238, 0, 239,
	240, 241, 0, 243, 242, 0, 378, 0, 244, 0,
	0, 245, 0, 0, 246, 0, 247, 248, 249, 251,
	379, 250, 0, 252, 253, 255, 254, 0, 0, 0,
	380, 256, 381, 257, 258, 0, 259, 0, 763, 260,
	0, 0, 261, 382, 0, 262, 0, 383, 263, 264,
	265, 266, 267, 0, 268, 384, 269, 385, 270, 0,
	271, 272, 273, 274, 275, 386, 276, 277, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 283, 286, 287,
	288, 289, 0, 290, 0, 291, 292, 387, 293, 0,
	297, 298, 299, 300, 143, 302, 388, 301, 303, 304,
	0, 305, 294, 295, 306, 0, 307, 389, 390, 308,
	0, 315, 309, 310, 296, 311, 314, 391, 312, 313,
	392, 0, 316, 145, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 943,
	400, 0, 0, 338, 0, 0, 0, 137, 339, 340,
	341, 342, 343, 598, 138, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 757, 0, 1209, 0, 344,
	0, 0, 0, 0, 188, 189, 190, 345, 346, 347,
	348, 191, 349, 350, 0, 192, 351, 352, 193, 194,
	0, 0, 353, 354, 355, 0, 195, 356, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 408, 211,
	357, 212, 358, 359, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 360,
	219, 221, 220, 222, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 363, 364, 365, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 366, 0, 367,
	0, 0, 228, 229, 0, 0, 230, 231, 368, 369,
	0, 0, 370, 235, 0, 232, 0, 0, 233, 371,
	234, 372, 373, 374, 375, 376, 0, 377, 0, 0,
	236, 237, 238, 0, 239, 240, 241, 0, 243, 242,
	0, 378, 0, 244, 0, 0, 245, 0, 0, 246,
	0, 247, 248, 249, 251, 379, 250, 0, 252, 253,
	255, 254, 0, 0, 0, 380, 256, 381, 257, 258,
	0, 259, 0, 0, 260, 0, 0, 261, 382, 0,
	262, 0, 383, 263, 264, 265, 266, 267, 0, 268,
	384, 269, 385, 270, 0, 271, 272, 273, 274, 275,
	386, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 283, 286, 287, 288, 289, 0, 290, 0,
	291, 292, 387, 293, 0, 297, 298, 299, 300, 143,
	302, 388, 301, 303, 304, 0, 305, 294, 295, 306,
	0, 307, 389, 390, 308, 0, 315, 309, 310, 296,
	311, 314, 391, 312, 313, 392, 0, 316, 145, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 943, 400, 0, 0, 338, 0,
	0, 0, 137, 339, 340, 341, 342, 343, 1903, 138,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 114, 0, 344, 0, 0, 0, 0, 188,
	189, 190, 345, 346, 347, 348, 191, 349, 350, 0,
	192, 351, 352, 193, 194, 0, 0, 353, 354, 355,
	0, 195, 356, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 408, 211, 357, 212, 358, 359, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 360, 219, 221, 220, 222, 361,
	362, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	363, 364, 365, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 366, 0, 367, 0, 0, 228, 229, 0,
	0, 230, 231, 368, 369, 0, 0, 370, 235, 0,
	232, 0, 0, 233, 371, 234, 372, 373, 374, 375,
	376, 0, 377, 0, 0, 236, 237, 238, 0, 239,
	240, 241, 0, 243, 242, 0, 378, 0, 244, 0,
	0, 245, 0, 0, 246, 0, 247, 248, 249, 251,
	379, 250, 0, 252, 253, 255, 254, 0, 0, 0,
	380, 256, 381, 257, 258, 0, 259, 0, 763, 260,
	0, 0, 261, 382, 0, 262, 0, 383, 263, 264,
	265, 266, 267, 0, 268, 384, 269, 385, 270, 0,
	271, 272, 273, 274, 275, 386, 276, 277, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 283, 286, 287,
	288, 289, 0, 290, 0, 291, 292, 387, 293, 0,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	0, 305, 294, 295, 306, 0, 307, 389, 390, 308,
	0, 315, 309, 310, 296, 311, 314, 391, 312, 313,
	392, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 756, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 757, 0, 762, 0, 344,
	0, 0, 0, 0, 188, 189, 190, 345, 346, 347,
	348, 191, 349, 350, 0, 192, 351, 352, 193, 194,
	0, 0, 353, 354, 355, 0, 195, 356, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 408, 211,
	357, 212, 358, 359, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 360,
	219, 221, 220, 222, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 363, 364, 365, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 366, 0, 367,
	0, 0, 228, 229, 0, 0, 230, 231, 368, 369,
	0, 0, 370, 235, 0, 232, 0, 0, 233, 371,
	234, 372, 373, 374, 375, 376, 0, 377, 0, 0,
	236, 237, 238, 0, 239, 240, 241, 0, 243, 242,
	0, 378, 0, 244, 0, 0, 245, 0, 0, 246,
	0, 247, 248, 249, 251, 379, 250, 0, 252, 253,
	255, 254, 0, 0, 0, 380, 256, 381, 257, 258,
	0, 259, 0, 763, 260, 0, 0, 261, 382, 0,
	262, 0, 383, 263, 264, 265, 266, 267, 0, 268,
	384, 269, 385, 270, 0, 271, 272, 273, 274, 275,
	386, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 283, 286, 287, 288, 289, 0, 290, 0,
	291, 292, 387, 293, 0, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 0, 305, 294, 295, 306,
	0, 307, 389, 390, 308, 0, 315, 309, 310, 296,
	311, 314, 391, 312, 313, 392, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	757, 0, 762, 344, 0, 0, 0, 0, 188, 189,
	190, 345, 346, 347, 348, 191, 349, 350, 0, 192,
	351, 352, 193, 194, 0, 0, 353, 354, 355, 0,
	195, 356, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 408, 211, 357, 212, 358, 359, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 360, 219, 221, 220, 222, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 363,
	364, 365, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 366, 0, 367, 0, 0, 228, 229, 0, 0,
	230, 231, 368, 369, 0, 0, 370, 235, 0, 232,
	0, 0, 233, 371, 234, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 236, 237, 238, 0, 239, 240,
	241, 0, 243, 242, 0, 378, 0, 244, 0, 0,
	245, 0, 0, 246, 0, 247, 248, 249, 251, 379,
	250, 0, 252, 253, 255, 254, 0, 0, 0, 380,
	256, 381, 257, 258, 0, 259, 0, 763, 260, 0,
	0, 261, 382, 0, 262, 0, 383, 263, 264, 265,
	266, 267, 0, 268, 384, 269, 385, 270, 0, 271,
	272, 273, 274, 275, 386, 276, 277, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 283, 286, 287, 288,
	289, 0, 290, 0, 291, 292, 387, 293, 0, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 0,
	305, 294, 295, 306, 0, 307, 389, 390, 308, 0,
	315, 309, 310, 296, 311, 314, 391, 312, 313, 392,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	0, 0, 338, 0, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 757, 0, 762, 344, 0, 0,
	0, 0, 188, 189, 190, 345, 346, 347, 348, 191,
	349, 350, 0, 192, 351, 352, 193, 194, 0, 0,
	353, 354, 355, 0, 195, 356, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 408, 211, 357, 212,
	358, 359, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 360, 219, 221,
	220, 222, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 363, 364, 365, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 366, 0, 367, 0, 0,
	228, 229, 0, 0, 230, 231, 368, 369, 0, 0,
	370, 235, 0, 232, 0, 0, 233, 371, 234, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 236, 237,
	238, 0, 239, 240, 241, 0, 243, 242, 0, 378,
	0, 244, 0, 0, 245, 0, 0, 246, 0, 247,
	248, 249, 251, 379, 250, 0, 252, 253, 255, 254,
	0, 0, 0, 380, 256, 381, 257, 258, 0, 259,
	0, 0, 260, 0, 0, 261, 382, 0, 262, 0,
	383, 263, 264, 265, 266, 267, 0, 268, 384, 269,
	385, 270, 0, 271, 272, 273, 274, 275, 386, 276,
	277, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	283, 286, 287, 288, 289, 0, 290, 0, 291, 292,
	387, 293, 0, 297, 298, 299, 300, 0, 302, 388,
	301, 303, 304, 0, 305, 294, 295, 306, 0, 307,
	389, 390, 308, 0, 315, 309, 310, 296, 311, 314,
	391, 312, 313, 392, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 394, 395, 0, 0,
	324, 325, 396, 397, 0, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 0, 334, 0, 398, 335,
	336, 337, 399, 400, 0, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	344, 1244, 0, 0, 0, 188, 189, 190, 345, 346,
	347, 348, 191, 349, 350, 0, 192, 351, 352, 193,
	194, 0, 0, 353, 354, 355, 0, 195, 356, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 408,
	211, 357, 212, 358, 359, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	360, 219, 221, 220, 222, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 363, 364, 365, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 366, 0,
	367, 0, 0, 228, 229, 0, 0, 230, 231, 368,
	369, 0, 0, 370, 235, 0, 232, 0, 0, 233,
	371, 234, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 236, 237, 238, 0, 239, 240, 241, 0, 243,
	242, 0, 378, 0, 244, 0, 0, 245, 0, 0,
	246, 0, 247, 248, 249, 251, 379, 250, 0, 252,
	253, 255, 254, 0, 0, 0, 380, 256, 381, 257,
	258, 0, 259, 0, 0, 260, 0, 0, 261, 382,
	0, 262, 0, 383, 263, 264, 265, 266, 267, 0,
	268, 384, 269, 385, 270, 0, 271, 272, 273, 274,
	275, 386, 276, 277, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 283, 286, 287, 288, 289, 0, 290,
	0, 291, 292, 387, 293, 0, 297, 298, 299, 300,
	0, 302, 388, 301, 303, 304, 0, 305, 294, 295,
	306, 0, 307, 389, 390, 308, 0, 315, 309, 310,
	296, 311, 314, 391, 312, 313, 392, 0, 316, 0,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 394,
	395, 0, 0, 324, 325, 396, 397, 0, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 0, 334,
	0, 398, 335, 336, 337, 399, 400, 0, 0, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 1716, 344, 0, 0, 0, 0, 188,
	189, 190, 345, 346, 347, 348, 191, 349, 350, 0,
	192, 351, 352, 193, 194, 0, 0, 353, 354, 355,
	0, 195, 356, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 408, 211, 357, 212, 358, 359, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 360, 219, 221, 220, 222, 361,
	362, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	363, 364, 365, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 366, 0, 367, 0, 0, 228, 229, 0,
	0, 230, 231, 368, 369, 0, 0, 370, 235, 0,
	232, 0, 0, 233, 371, 234, 372, 373, 374, 375,
	376, 0, 377, 0, 0, 236, 237, 238, 0, 239,
	240, 241, 0, 243, 242, 0, 378, 0, 244, 0,
	0, 245, 0, 0, 246, 0, 247, 248, 249, 251,
	379, 250, 0, 252, 253, 255, 254, 0, 0, 0,
	380, 256, 381, 257, 258, 0, 259, 0, 0, 260,
	0, 0, 261, 382, 0, 262, 0, 383, 263, 264,
	265, 266, 267, 0, 268, 384, 269, 385, 270, 0,
	271, 272, 273, 274, 275, 386, 276, 277, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 283, 286, 287,
	288, 289, 0, 290, 0, 291, 292, 387, 293, 0,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	0, 305, 294, 295, 306, 0, 307, 389, 390, 308,
	0, 315, 309, 310, 296, 311, 314, 391, 312, 313,
	392, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 2074, 344, 0,
	0, 0, 0, 188, 189, 190, 345, 346, 347, 348,
	191, 349, 350, 0, 192, 351, 352, 193, 194, 0,
	0, 353, 354, 355, 0, 195, 356, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 408, 211, 357,
	212, 358, 359, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 360, 219,
	221, 220, 222, 361, 362, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 363, 364, 365, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 366, 0, 367, 0,
	0, 228, 229, 0, 0, 230, 231, 368, 369, 0,
	0, 370, 235, 0, 232, 0, 0, 233, 371, 234,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 236,
	237, 238, 0, 239, 240, 241, 0, 243, 242, 0,
	378, 0, 244, 0, 0, 245, 0, 0, 246, 0,
	247, 248, 249, 251, 379, 250, 0, 252, 253, 255,
	254, 0, 0, 0, 380, 256, 381, 257, 258, 0,
	259, 0, 0, 260, 0, 0, 261, 382, 0, 262,
	0, 383, 263, 264, 265, 266, 267, 0, 268, 384,
	269, 385, 270, 0, 271, 272, 273, 274, 275, 386,
	276, 277, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 283, 286, 287, 288, 289, 0, 290, 0, 291,
	292, 387, 293, 0, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 0, 305, 294, 295, 306, 0,
	307, 389, 390, 308, 0, 315, 309, 310, 296, 311,
	314, 391, 312, 313, 392, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 0, 0, 338, 0, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 647, 636,
	637, 634, 635, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 1212, 344, 0, 0, 0, 0, 188, 189, 190,
	345, 679, 347, 680, 191, 681, 682, 0, 192, 351,
	352, 193, 194, 0, 0, 683, 684, 355, 0, 195,
	356, 0, 784, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 709, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 408, 211, 685, 212, 686, 687, 0, 213, 0,
	214, 0, 215, 0, 0, 678, 217, 0, 218, 0,
	0, 0, 360, 219, 221, 220, 222, 361, 362, 643,
	710, 0, 0, 0, 0, 0, 223, 224, 688, 689,
	690, 0, 225, 0, 226, 0, 0, 711, 0, 227,
	366, 0, 367, 0, 0, 228, 229, 0, 0, 230,
	231, 368, 369, 713, 0, 370, 235, 0, 232, 0,
	712, 233, 691, 234, 692, 693, 694, 695, 696, 0,
	654, 0, 714, 236, 237, 238, 715, 239, 240, 241,
	0, 243, 242, 0, 378, 716, 244, 717, 0, 245,
	0, 0, 246, 0, 247, 248, 249, 251, 379, 250,
	718, 252, 253, 255, 254, 0, 0, 644, 380, 256,
	697, 257, 258, 0, 259, 0, 0, 260, 0, 0,
	261, 382, 719, 262, 720, 383, 263, 264, 265, 266,
	267, 0, 268, 384, 269, 385, 270, 0, 271, 272,
	273, 274, 275, 698, 276, 277, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 283, 286, 287, 288, 289,
	0, 290, 721, 291, 292, 387, 293, 0, 297, 298,
	299, 300, 0, 302, 388, 301, 303, 304, 0, 305,
	294, 295, 306, 722, 307, 699, 390, 308, 0, 315,
	309, 310, 296, 311, 314, 700, 312, 313, 392, 0,
	316, 0, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 701, 702, 0, 0, 324, 325, 396, 397, 642,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	0, 334, 0, 398, 335, 336, 337, 399, 703, 0,
	490, 338, 182, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 344, 0, 0, 0,
	0, 188, 189, 190, 345, 346, 347, 348, 191, 349,
	350, 0, 192, 351, 352, 193, 194, 0, 0, 353,
	354, 355, 0, 195, 356, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 178, 211, 357, 212, 358,
	359, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 360, 219, 221, 220,
	222, 361, 362, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 363, 364, 365, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 366, 0, 367, 0, 0, 228,
	229, 0, 0, 230, 231, 368, 369, 0, 0, 370,
	235, 0, 232, 0, 0, 233, 371, 234, 372, 373,
	374, 375, 376, 0, 377, 0, 0, 236, 237, 238,
	0, 239, 240, 241, 0, 243, 242, 0, 378, 0,
	244, 0, 0, 245, 0, 0, 246, 0, 247, 248,
	249, 251, 379, 250, 0, 252, 253, 255, 254, 0,
	0, 0, 380, 256, 381, 257, 258, 0, 259, 0,
	0, 260, 0, 0, 261, 382, 0, 262, 0, 383,
	263, 264, 265, 266, 267, 0, 268, 384, 269, 385,
	270, 0, 271, 272, 273, 274, 275, 386, 276, 277,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 283,
	286, 287, 288, 289, 0, 290, 0, 291, 292, 387,
	293, 0, 297, 298, 299, 300, 0, 302, 388, 301,
	303, 304, 0, 305, 294, 295, 306, 0, 307, 389,
	390, 308, 0, 315, 309, 310, 296, 311, 314, 391,
	312, 313, 392, 0, 316, 177, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 0, 175, 338, 182, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	344, 0, 181, 0, 0, 188, 189, 190, 345, 346,
	347, 348, 191, 349, 350, 0, 192, 351, 352, 193,
	194, 0, 0, 353, 354, 355, 0, 195, 356, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 178,
	211, 357, 212, 358, 359, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	360, 219, 221, 220, 222, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 363, 364, 365, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 366, 0,
	367, 0, 0, 228, 229, 0, 0, 230, 231, 368,
	369, 0, 0, 370, 235, 0, 232, 0, 0, 233,
	371, 234, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 236, 237, 238, 0, 239, 240, 241, 0, 243,
	242, 0, 378, 0, 244, 0, 0, 245, 0, 0,
	246, 0, 247, 248, 249, 251, 379, 250, 0, 252,
	253, 255, 254, 0, 0, 0, 380, 256, 381, 257,
	258, 0, 259, 0, 0, 260, 0, 0, 261, 382,
	0, 262, 0, 383, 263, 264, 265, 266, 267, 0,
	268, 384, 269, 385, 270, 0, 271, 272, 273, 274,
	275, 386, 276, 277, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 283, 286, 287, 288, 289, 0, 290,
	0, 291, 292, 387, 293, 0, 297, 298, 299, 300,
	0, 302, 388, 301, 303, 304, 0, 305, 294, 295,
	306, 0, 307, 389, 390, 308, 0, 315, 309, 310,
	296, 311, 314, 391, 312, 313, 392, 0, 316, 177,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 394,
	395, 0, 0, 324, 325, 396, 397, 0, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 0, 334,
	0, 398, 335, 336, 337, 399, 400, 0, 182, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 344, 0, 0, 0, 181, 188, 189, 190,
	345, 346, 347, 348, 191, 349, 350, 0, 192, 351,
	352, 193, 194, 0, 0, 353, 354, 355, 0, 195,
	356, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 178, 211, 357, 212, 358, 359, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 360, 219, 221, 220, 222, 361, 362, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 363, 364,
	365, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	366, 0, 367, 0, 0, 228, 229, 0, 0, 230,
	231, 368, 369, 0, 0, 370, 235, 0, 232, 0,
	0, 233, 371, 234, 372, 373, 374, 375, 376, 0,
	377, 0, 0, 236, 237, 238, 0, 239, 240, 241,
	0, 243, 242, 0, 378, 0, 244, 0, 0, 245,
	0, 0, 246, 0, 247, 248, 249, 251, 379, 250,
	0, 252, 253, 255, 254, 0, 0, 0, 380, 256,
	381, 257, 258, 0, 259, 0, 0, 260, 0, 0,
	261, 382, 0, 262, 0, 383, 263, 264, 265, 266,
	267, 0, 268, 384, 269, 385, 270, 0, 271, 272,
	273, 274, 275, 386, 276, 277, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 283, 286, 287, 288, 289,
	0, 290, 0, 291, 292, 387, 293, 0, 297, 298,
	299, 300, 0, 302, 388, 301, 303, 304, 0, 305,
	294, 295, 306, 0, 307, 389, 390, 308, 0, 315,
	309, 310, 296, 311, 314, 391, 312, 313, 392, 0,
	316, 177, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 394, 395, 0, 0, 324, 325, 396, 397, 0,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	0, 334, 0, 398, 335, 336, 337, 399, 400, 0,
	182, 338, 0, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 344, 0, 0, 0, 181, 188,
	189, 190, 345, 346, 347, 348, 191, 349, 350, 0,
	192, 351, 352, 193, 194, 0, 0, 353, 354, 355,
	0, 195, 356, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 408, 211, 357, 212, 358, 359, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 360, 219, 221, 220, 222, 361,
	362, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	363, 364, 365, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 366, 0, 367, 0, 0, 228, 229, 0,
	0, 230, 231, 368, 369, 0, 0, 370, 235, 0,
	232, 0, 0, 233, 371, 234, 372, 373, 374, 375,
	376, 0, 377, 0, 0, 236, 237, 238, 0, 239,
	240, 241, 0, 243, 242, 0, 378, 0, 244, 0,
	0, 245, 0, 0, 246, 0, 247, 248, 249, 251,
	379, 250, 0, 252, 253, 255, 254, 0, 0, 0,
	380, 256, 381, 257, 258, 0, 259, 0, 0, 260,
	0, 0, 261, 382, 0, 262, 0, 383, 263, 264,
	265, 266, 267, 0, 268, 384, 269, 385, 270, 0,
	271, 272, 273, 274, 275, 386, 276, 277, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 283, 286, 287,
	288, 289, 0, 290, 0, 291, 292, 387, 293, 0,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	0, 305, 294, 295, 306, 0, 307, 389, 390, 308,
	0, 315, 309, 310, 296, 311, 314, 391, 312, 313,
	392, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 996, 0, 780, 779, 0, 0, 0,
	777, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	181, 185, 186, 0, 187, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 188, 189, 190, 345, 346, 347,
	348, 191, 349, 350, 0, 192, 351, 352, 193, 194,
	0, 0, 353, 354, 355, 0, 195, 356, 0, 784,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 709, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 408, 211,
	357, 212, 358, 359, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 360,
	219, 221, 220, 222, 361, 362, 0, 710, 0, 0,
	0, 0, 0, 223, 224, 363, 364, 365, 0, 225,
	0, 226, 0, 0, 711, 0, 227, 366, 0, 367,
	0, 0, 228, 229, 0, 0, 230, 231, 368, 369,
	713, 0, 370, 235, 0, 232, 0, 712, 233, 371,
	234, 372, 373, 374, 375, 376, 0, 377, 0, 714,
	236, 237, 238, 715, 239, 240, 241, 0, 243, 242,
	0, 378, 716, 244, 717, 0, 245, 0, 0, 246,
	0, 247, 248, 249, 251, 379, 250, 718, 252, 253,
	255, 254, 0, 0, 0, 380, 256, 381, 257, 258,
	0, 259, 0, 0, 260, 0, 0, 261, 382, 719,
	262, 720, 383, 263, 264, 265, 266, 267, 0, 268,
	384, 269, 385, 270, 0, 271, 272, 273, 274, 275,
	386, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 283, 286, 287, 288, 289, 0, 290, 721,
	291, 292, 387, 293, 0, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 0, 305, 294, 295, 306,
	722, 307, 389, 390, 308, 0, 315, 309, 310, 296,
	311, 314, 391, 312, 313, 392, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 935, 0,
	780, 779, 0, 0, 0, 777, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 344, 0, 0, 0, 0, 188,
	189, 190, 345, 346, 347, 348, 191, 349, 350, 0,
	192, 351, 352, 193, 194, 0, 0, 353, 354, 355,
	0, 195, 356, 0, 784, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	709, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 408, 211, 357, 212, 358, 359, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 360, 219, 221, 220, 222, 361,
	362, 0, 710, 0, 0, 0, 0, 0, 223, 224,
	363, 364, 365, 0, 225, 0, 226, 0, 0, 711,
	0, 227, 366, 0, 367, 0, 0, 228, 229, 0,
	0, 230, 231, 934, 369, 713, 0, 370, 235, 0,
	232, 0, 712, 233, 371, 234, 372, 373, 374, 375,
	376, 0, 377, 0, 714, 236, 237, 238, 715, 239,
	240, 241, 0, 243, 242, 0, 378, 716, 244, 717,
	0, 245, 0, 0, 246, 0, 247, 248, 249, 251,
	379, 250, 718, 252, 253, 255, 254, 0, 0, 0,
	380, 256, 381, 257, 258, 0, 259, 0, 0, 260,
	0, 0, 261, 382, 719, 262, 720, 383, 263, 264,
	265, 266, 267, 0, 268, 384, 269, 385, 270, 0,
	271, 272, 273, 274, 275, 386, 276, 277, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 283, 286, 287,
	288, 289, 0, 290, 721, 291, 292, 387, 293, 0,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	0, 305, 294, 295, 306, 722, 307, 389, 390, 308,
	0, 315, 309, 310, 296, 311, 314, 391, 312, 313,
	392, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 901, 0, 780, 779, 0, 0, 0,
	777, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 188, 189, 190, 345, 346, 347,
	348, 191, 349, 350, 0, 192, 351, 352, 193, 194,
	0, 0, 353, 354, 355, 0, 195, 356, 0, 784,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 709, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 408, 211,
	357, 212, 358, 359, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 360,
	219, 221, 220, 222, 361, 362, 0, 710, 0, 0,
	0, 0, 0, 223, 224, 363, 364, 365, 0, 225,
	0, 226, 0, 0, 711, 0, 227, 366, 0, 367,
	0, 0, 228, 229, 0, 0, 230, 231, 900, 369,
	713, 0, 370, 235, 0, 232, 0, 712, 233, 371,
	234, 372, 373, 374, 375, 376, 0, 377, 0, 714,
	236, 237, 238, 715, 239, 240, 241, 0, 243, 242,
	0, 378, 716, 244, 717, 0, 245, 0, 0, 246,
	0, 247, 248, 249, 251, 379, 250, 718, 252, 253,
	255, 254, 0, 0, 0, 380, 256, 381, 257, 258,
	0, 259, 0, 0, 260, 0, 0, 261, 382, 719,
	262, 720, 383, 263, 264, 265, 266, 267, 0, 268,
	384, 269, 385, 270, 0, 271, 272, 273, 274, 275,
	386, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 283, 286, 287, 288, 289, 0, 290, 721,
	291, 292, 387, 293, 0, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 0, 305, 294, 295, 306,
	722, 307, 389, 390, 308, 0, 315, 309, 310, 296,
	311, 314, 391, 312, 313, 392, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 773, 0,
	780, 779, 0, 0, 0, 777, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 344, 0, 0, 0, 0, 188,
	189, 190, 345, 346, 347, 348, 191, 349, 350, 0,
	192, 351, 352, 193, 194, 0, 0, 353, 354, 355,
	0, 195, 356, 0, 784, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	709, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 408, 211, 357, 212, 358, 359, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 360, 219, 221, 220, 222, 361,
	362, 0, 710, 0, 0, 0, 0, 0, 223, 224,
	363, 364, 365, 0, 225, 0, 226, 0, 0, 711,
	0, 227, 366, 0, 367, 0, 0, 228, 229, 0,
	0, 230, 231, 775, 369, 713, 0, 370, 235, 0,
	232, 0, 712, 233, 371, 234, 372, 373, 374, 375,
	376, 0, 377, 0, 714, 236, 237, 238, 715, 239,
	240, 241, 0, 243, 242, 0, 378, 716, 244, 717,
	0, 245, 0, 0, 246, 0, 247, 248, 249, 251,
	379, 250, 718, 252, 253, 255, 254, 0, 0, 0,
	380, 256, 381, 257, 258, 0, 259, 0, 0, 260,
	0, 0, 261, 382, 719, 262, 720, 383, 263, 264,
	265, 266, 267, 0, 268, 384, 269, 385, 270, 0,
	271, 272, 273, 274, 275, 386, 276, 277, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 283, 286, 287,
	288, 289, 0, 290, 721, 291, 292, 387, 293, 0,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	0, 305, 294, 295, 306, 722, 307, 389, 390, 308,
	0, 315, 309, 310, 296, 311, 314, 391, 312, 313,
	392, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 780, 779, 338, 0, 0, 777, 0, 339, 340,
	341, 342, 343, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	188, 189, 190, 345, 346, 347, 348, 191, 349, 350,
	0, 192, 351, 352, 193, 194, 0, 0, 353, 354,
	355, 0, 195, 356, 0, 784, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 709, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 408, 211, 357, 212, 358, 359,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 360, 219, 221, 220, 222,
	361, 362, 0, 710, 0, 0, 0, 0, 0, 223,
	224, 363, 364, 365, 0, 225, 0, 226, 0, 0,
	711, 0, 227, 366, 0, 367, 0, 0, 228, 229,
	0, 0, 230, 231, 368, 369, 713, 0, 370, 235,
	0, 232, 0, 712, 233, 371, 234, 372, 373, 374,
	375, 376, 0, 377, 0, 714, 236, 237, 238, 715,
	239, 240, 241, 0, 243, 242, 0, 378, 716, 244,
	717, 0, 245, 0, 0, 246, 0, 247, 248, 249,
	251, 379, 250, 718, 252, 253, 255, 254, 0, 0,
	0, 380, 256, 381, 257, 258, 0, 259, 0, 0,
	260, 0, 0, 261, 382, 719, 262, 720, 383, 263,
	264, 265, 266, 267, 0, 268, 384, 269, 385, 270,
	0, 271, 272, 273, 274, 275, 386, 276, 277, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 283, 286,
	287, 288, 289, 0, 290, 721, 291, 292, 387, 293,
	0, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 0, 305, 294, 295, 306, 722, 307, 389, 390,
	308, 0, 315, 309, 310, 296, 311, 314, 391, 312,
	313, 392, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 394, 395, 0, 0, 324, 325,
	396, 397, 0, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 0, 334, 0, 398, 335, 336, 337,
	399, 400, 780, 779, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 344, 0, 0, 0,
	0, 188, 189, 190, 345, 346, 347, 348, 191, 349,
	350, 0, 192, 351, 352, 193, 194, 0, 0, 353,
	354, 355, 0, 195, 356, 0, 784, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 709, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 408, 211, 357, 212, 358,
	359, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 360, 219, 221, 220,
	222, 361, 362, 0, 710, 0, 0, 0, 0, 0,
	223, 224, 363, 364, 365, 0, 225, 0, 226, 0,
	0, 711, 0, 227, 366, 0, 367, 0, 0, 228,
	229, 0, 0, 230, 231, 368, 369, 713, 0, 370,
	235, 0, 232, 0, 712, 233, 371, 234, 372, 373,
	374, 375, 376, 0, 377, 0, 714, 236, 237, 238,
	715, 239, 240, 241, 0, 243, 242, 0, 378, 716,
	244, 717, 0, 245, 0, 0, 246, 0, 247, 248,
	249, 251, 379, 250, 718, 252, 253, 255, 254, 0,
	0, 0, 380, 256, 381, 257, 258, 0, 259, 0,
	0, 260, 0, 0, 261, 382, 719, 262, 720, 383,
	263, 264, 265, 266, 267, 0, 268, 384, 269, 385,
	270, 0, 271, 272, 273, 274, 275, 386, 276, 277,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 283,
	286, 287, 288, 289, 0, 290, 721, 291, 292, 387,
	293, 0, 297, 298, 299, 300, 0, 302, 388, 301,
	303, 304, 0, 305, 294, 295, 306, 722, 307, 389,
	390, 308, 0, 315, 309, 310, 296, 311, 314, 391,
	312, 313, 392, 0, 316, 0, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 780, 0, 338, 0, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 188, 189, 190, 345, 346, 347, 348, 191,
	349, 350, 0, 192, 351, 352, 193, 194, 0, 0,
	353, 354, 355, 0, 195, 356, 0, 784, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 709, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 408, 211, 357, 212,
	358, 359, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 360, 219, 221,
	220, 222, 361, 362, 0, 710, 0, 0, 0, 0,
	0, 223, 224, 363, 364, 365, 0, 225, 0, 226,
	0, 0, 711, 0, 227, 366, 0, 367, 0, 0,
	228, 229, 0, 0, 230, 231, 368, 369, 713, 0,
	370, 235, 0, 232, 0, 712, 233, 371, 234, 372,
	373, 374, 375, 376, 0, 377, 0, 714, 236, 237,
	238, 715, 239, 240, 241, 0, 243, 242, 0, 378,
	716, 244, 717, 0, 245, 0, 0, 246, 0, 247,
	248, 249, 251, 379, 250, 718, 252, 253, 255, 254,
	0, 0, 0, 380, 256, 381, 257, 258, 0, 259,
	0, 0, 260, 0, 0, 261, 382, 719, 262, 720,
	383, 263, 264, 265, 266, 267, 0, 268, 384, 269,
	385, 270, 0, 271, 272, 273, 274, 275, 386, 276,
	277, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	283, 286, 287, 288, 289, 0, 290, 721, 291, 292,
	387, 293, 0, 297, 298, 299, 300, 0, 302, 388,
	301, 303, 304, 0, 305, 294, 295, 306, 722, 307,
	389, 390, 308, 0, 315, 309, 310, 296, 311, 314,
	391, 312, 313, 392, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 394, 395, 0, 0,
	324, 325, 396, 397, 0, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 0, 334, 0, 398, 335,
	336, 337, 399, 400, 182, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 344, 0,
	0, 0, 0, 188, 189, 190, 345, 346, 347, 348,
	191, 349, 350, 0, 192, 351, 352, 193, 194, 0,
	0, 353, 354, 355, 1648, 195, 356, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 1646, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 408, 211, 357,
	212, 358, 359, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 360, 219,
	221, 220, 222, 361, 362, 0, 1692, 0, 0, 0,
	0, 0, 223, 224, 363, 364, 365, 0, 225, 0,
	226, 1651, 0, 0, 0, 227, 366, 0, 367, 0,
	0, 228, 229, 0, 0, 230, 231, 368, 369, 0,
	0, 370, 235, 1690, 232, 0, 0, 233, 371, 234,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 236,
	237, 238, 0, 239, 240, 241, 0, 243, 242, 0,
	378, 0, 244, 0, 0, 245, 0, 0, 246, 0,
	247, 248, 249, 251, 379, 250, 0, 252, 253, 255,
	254, 0, 0, 0, 380, 256, 381, 257, 258, 0,
	259, 0, 0, 260, 0, 0, 261, 382, 0, 262,
	0, 383, 263, 264, 265, 266, 267, 0, 268, 384,
	269, 385, 270, 1650, 271, 272, 273, 274, 275, 386,
	276, 277, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 283, 286, 287, 288, 289, 0, 290, 0, 291,
	292, 387, 293, 0, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 0, 305, 294, 295, 306, 0,
	307, 389, 390, 308, 0, 315, 309, 310, 296, 311,
	314, 391, 312, 313, 392, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 1691, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 182, 0, 338, 0, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 188, 189, 190, 345, 346, 347,
	348, 191, 349, 350, 0, 192, 351, 352, 193, 194,
	0, 0, 353, 354, 355, 1648, 195, 356, 0, 0,
	1643, 196, 197, 198, 0, 200, 201, 202, 199, 1646,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 408, 211,
	357, 212, 358, 359, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 360,
	219, 221, 220, 222, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 363, 364, 365, 0, 225,
	0, 226, 1651, 0, 0, 0, 227, 366, 0, 367,
	0, 0, 228, 229, 0, 0, 230, 231, 1642, 369,
	0, 0, 370, 235, 0, 232, 0, 0, 233, 371,
	234, 372, 373, 374, 375, 376, 0, 377, 0, 0,
	236, 237, 238, 0, 239, 240, 241, 0, 243, 242,
	0, 378, 0, 244, 0, 0, 245, 0, 0, 246,
	0, 247, 248, 249, 251, 379, 250, 0, 252, 253,
	255, 254, 0, 0, 0, 380, 256, 381, 257, 258,
	0, 259, 0, 0, 260, 0, 0, 261, 382, 0,
	262, 0, 383, 263, 264, 265, 266, 267, 0, 268,
	384, 269, 385, 270, 1650, 271, 272, 273, 274, 275,
	386, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 283, 286, 287, 288, 289, 0, 290, 0,
	291, 292, 387, 293, 0, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 0, 305, 294, 295, 306,
	0, 307, 389, 390, 308, 0, 315, 309, 310, 296,
	311, 314, 391, 312, 313, 392, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 1649, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 917, 338, 182,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 188, 189,
	190, 345, 346, 347, 348, 191, 349, 350, 0, 192,
	351, 352, 193, 194, 0, 0, 353, 354, 355, 0,
	195, 356, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 408, 211, 357, 212, 358, 359, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 360, 219, 221, 220, 222, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 363,
	364, 365, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 366, 0, 367, 0, 0, 228, 229, 0, 0,
	230, 231, 368, 369, 0, 0, 370, 235, 0, 232,
	0, 0, 233, 371, 234, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 236, 237, 238, 0, 239, 240,
	241, 0, 243, 242, 0, 378, 0, 244, 0, 0,
	245, 0, 0, 246, 0, 247, 248, 249, 251, 379,
	250, 0, 252, 253, 255, 254, 0, 0, 0, 380,
	256, 381, 257, 258, 0, 259, 0, 763, 260, 0,
	0, 261, 382, 0, 262, 0, 383, 263, 264, 265,
	266, 267, 0, 268, 384, 269, 385, 270, 0, 271,
	272, 273, 274, 275, 386, 276, 277, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 283, 286, 287, 288,
	289, 0, 290, 0, 291, 292, 387, 293, 0, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 0,
	305, 294, 295, 306, 0, 307, 389, 390, 308, 0,
	315, 309, 310, 296, 311, 314, 391, 312, 313, 392,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	0, 769, 338, 182, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 188, 189, 190, 345, 346, 347, 348, 191,
	349, 350, 0, 192, 351, 352, 193, 194, 0, 0,
	353, 354, 355, 0, 195, 356, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 408, 211, 357, 212,
	358, 359, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 360, 219, 221,
	220, 222, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 363, 364, 365, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 366, 0, 367, 0, 0,
	228, 229, 0, 0, 230, 231, 771, 369, 0, 0,
	370, 235, 0, 232, 0, 0, 233, 371, 234, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 236, 237,
	238, 0, 239, 240, 241, 0, 243, 242, 0, 378,
	0, 244, 0, 0, 245, 0, 0, 246, 0, 247,
	248, 249, 251, 379, 250, 0, 252, 253, 255, 254,
	0, 0, 0, 380, 256, 381, 257, 258, 0, 259,
	0, 763, 260, 0, 0, 261, 382, 0, 262, 0,
	383, 263, 264, 265, 266, 267, 0, 268, 384, 269,
	385, 270, 0, 271, 272, 273, 274, 275, 386, 276,
	277, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	283, 286, 287, 288, 289, 0, 290, 0, 291, 292,
	387, 293, 0, 297, 298, 299, 300, 0, 302, 388,
	301, 303, 304, 0, 305, 294, 295, 306, 0, 307,
	389, 390, 308, 0, 315, 309, 310, 296, 311, 314,
	391, 312, 313, 392, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 394, 395, 0, 0,
	324, 325, 396, 397, 0, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 0, 334, 0, 398, 335,
	336, 337, 399, 400, 0, 765, 338, 182, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 188, 189, 190, 345,
	346, 347, 348, 191, 349, 350, 0, 192, 351, 352,
	193, 194, 0, 0, 353, 354, 355, 0, 195, 356,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	408, 211, 357, 212, 358, 359, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 360, 219, 221, 220, 222, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 363, 364, 365,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 366,
	0, 367, 0, 0, 228, 229, 0, 0, 230, 231,
	767, 369, 0, 0, 370, 235, 0, 232, 0, 0,
	233, 371, 234, 372, 373, 374, 375, 376, 0, 377,
	0, 0, 236, 237, 238, 0, 239, 240, 241, 0,
	243, 242, 0, 378, 0, 244, 0, 0, 245, 0,
	0, 246, 0, 247, 248, 249, 251, 379, 250, 0,
	252, 253, 255, 254, 0, 0, 0, 380, 256, 381,
	257, 258, 0, 259, 0, 763, 260, 0, 0, 261,
	382, 0, 262, 0, 383, 263, 264, 265, 266, 267,
	0, 268, 384, 269, 385, 270, 0, 271, 272, 273,
	274, 275, 386, 276, 277, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 283, 286, 287, 288, 289, 0,
	290, 0, 291, 292, 387, 293, 0, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 0, 305, 294,
	295, 306, 0, 307, 389, 390, 308, 0, 315, 309,
	310, 296, 311, 314, 391, 312, 313, 392, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 0, 420,
	338, 182, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 419,
	187, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	188, 189, 190, 345, 346, 347, 348, 191, 349, 350,
	0, 192, 351, 352, 193, 194, 0, 0, 353, 354,
	355, 0, 195, 356, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 408, 211, 357, 212, 358, 359,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 360, 219, 221, 220, 222,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 363, 364, 365, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 366, 0, 367, 0, 0, 228, 229,
	0, 0, 230, 231, 368, 369, 0, 0, 370, 235,
	0, 232, 0, 0, 233, 371, 234, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 236, 237, 238, 0,
	239, 240, 241, 0, 243, 242, 0, 378, 0, 244,
	0, 0, 245, 0, 0, 246, 0, 247, 248, 249,
	251, 379, 250, 0, 252, 253, 255, 254, 0, 0,
	0, 380, 256, 381, 257, 258, 0, 259, 0, 0,
	260, 0, 0, 261, 382, 0, 262, 0, 383, 263,
	264, 265, 266, 267, 0, 268, 384, 269, 385, 418,
	0, 271, 272, 273, 274, 275, 386, 276, 277, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 283, 286,
	287, 288, 289, 0, 290, 0, 291, 292, 387, 293,
	0, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 0, 305, 294, 295, 306, 0, 307, 389, 390,
	308, 0, 315, 309, 310, 296, 311, 314, 391, 312,
	313, 392, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 394, 395, 0, 0, 324, 325,
	396, 397, 0, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 0, 334, 0, 398, 335, 336, 337,
	399, 400, 182, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 344, 0, 1631, 0,
	0, 188, 189, 190, 345, 346, 347, 348, 191, 349,
	350, 0, 192, 351, 352, 193, 194, 0, 0, 353,
	354, 355, 0, 195, 356, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 408, 211, 357, 212, 358,
	359, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 360, 219, 221, 220,
	222, 361, 362, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 363, 364, 365, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 366, 0, 367, 0, 0, 228,
	229, 0, 0, 230, 231, 368, 369, 0, 0, 370,
	235, 0, 232, 0, 0, 233, 371, 234, 372, 373,
	374, 375, 376, 0, 377, 0, 0, 236, 237, 238,
	0, 239, 240, 241, 0, 243, 242, 0, 378, 0,
	244, 0, 0, 245, 0, 0, 246, 0, 247, 248,
	249, 251, 379, 250, 0, 252, 253, 255, 254, 0,
	0, 0, 380, 256, 381, 257, 258, 0, 259, 0,
	0, 260, 0, 0, 261, 382, 0, 262, 0, 383,
	263, 264, 265, 266, 267, 0, 268, 384, 269, 385,
	270, 0, 271, 272, 273, 274, 275, 386, 276, 277,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 283,
	286, 287, 288, 289, 0, 290, 0, 291, 292, 387,
	293, 0, 297, 298, 299, 300, 0, 302, 388, 301,
	303, 304, 0, 305, 294, 295, 306, 0, 307, 389,
	390, 308, 0, 315, 309, 310, 296, 311, 314, 391,
	312, 313, 392, 0, 316, 0, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 182, 2229, 338, 0, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 188, 189, 190, 345, 346, 347, 348, 191,
	349, 350, 0, 192, 351, 352, 193, 194, 0, 0,
	353, 354, 355, 0, 195, 356, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 408, 211, 357, 212,
	358, 359, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 360, 219, 221,
	220, 222, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 363, 364, 365, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 366, 0, 367, 0, 0,
	228, 229, 0, 0, 230, 231, 368, 369, 0, 0,
	370, 235, 0, 232, 0, 0, 233, 371, 234, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 236, 237,
	238, 0, 239, 240, 241, 0, 243, 242, 0, 378,
	0, 244, 0, 0, 245, 0, 0, 246, 0, 247,
	248, 249, 251, 379, 250, 0, 252, 253, 255, 254,
	0, 0, 0, 380, 256, 381, 257, 258, 0, 259,
	0, 0, 260, 0, 0, 261, 382, 0, 262, 0,
	383, 263, 264, 265, 266, 267, 0, 268, 384, 269,
	385, 270, 0, 271, 272, 273, 274, 275, 386, 276,
	277, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	283, 286, 287, 288, 289, 0, 290, 0, 291, 292,
	387, 293, 0, 297, 298, 299, 300, 0, 302, 388,
	301, 303, 304, 0, 305, 294, 295, 306, 0, 307,
	389, 390, 308, 0, 315, 309, 310, 296, 311, 314,
	391, 312, 313, 392, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 394, 395, 0, 0,
	324, 325, 396, 397, 0, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 0, 334, 0, 398, 335,
	336, 337, 399, 400, 182, 2229, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 344, 0,
	0, 0, 0, 188, 189, 190, 345, 346, 347, 348,
	191, 349, 350, 0, 192, 351, 352, 193, 194, 0,
	0, 353, 354, 355, 0, 195, 356, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 408, 211, 357,
	212, 358, 359, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 360, 219,
	221, 220, 222, 361, 362, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 363, 364, 365, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 366, 0, 367, 0,
	0, 228, 229, 0, 0, 230, 231, 368, 369, 0,
	0, 370, 235, 0, 232, 0, 0, 233, 371, 234,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 236,
	237, 238, 0, 239, 240, 241, 0, 243, 242, 0,
	378, 0, 244, 0, 0, 245, 0, 0, 246, 0,
	247, 248, 249, 251, 379, 250, 0, 252, 253, 255,
	254, 0, 0, 0, 380, 256, 381, 257, 258, 0,
	259, 0, 0, 2226, 0, 0, 261, 382, 0, 262,
	0, 383, 263, 264, 265, 266, 267, 0, 268, 384,
	269, 385, 270, 0, 271, 272, 273, 274, 275, 386,
	276, 277, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 283, 286, 287, 288, 289, 0, 290, 0, 291,
	292, 387, 293, 0, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 0, 305, 294, 295, 306, 0,
	307, 389, 390, 308, 0, 315, 309, 310, 296, 311,
	314, 391, 312, 313, 392, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 182, 0, 338, 0, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 188, 189, 190, 345, 346, 347,
	348, 191, 349, 350, 0, 192, 351, 352, 193, 194,
	0, 0, 353, 354, 355, 0, 195, 356, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 408, 211,
	357, 212, 358, 359, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 360,
	219, 221, 220, 222, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 363, 364, 365, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 366, 0, 367,
	0, 0, 228, 229, 0, 0, 230, 231, 368, 369,
	0, 0, 370, 235, 0, 232, 0, 0, 233, 371,
	234, 372, 373, 374, 375, 376, 0, 377, 0, 0,
	236, 237, 238, 0, 239, 240, 241, 0, 243, 242,
	0, 378, 0, 244, 0, 0, 245, 0, 0, 246,
	0, 247, 248, 249, 251, 379, 250, 0, 252, 253,
	255, 254, 0, 0, 0, 380, 256, 381, 257, 258,
	0, 259, 0, 763, 260, 0, 0, 261, 382, 0,
	262, 0, 383, 263, 264, 265, 266, 267, 0, 268,
	384, 269, 385, 270, 0, 271, 272, 273, 274, 275,
	386, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 283, 286, 287, 288, 289, 0, 290, 0,
	291, 292, 387, 293, 0, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 0, 305, 294, 295, 306,
	0, 307, 389, 390, 308, 0, 315, 309, 310, 296,
	311, 314, 391, 312, 313, 392, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 1401, 338, 182,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 188, 189,
	190, 345, 346, 347, 348, 191, 349, 350, 0, 192,
	351, 352, 193, 194, 0, 0, 353, 354, 355, 0,
	195, 356, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 408, 211, 357, 212, 358, 359, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 360, 219, 221, 220, 222, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 363,
	364, 365, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 366, 0, 367, 0, 0, 228, 229, 0, 0,
	230, 231, 368, 369, 0, 0, 370, 235, 0, 232,
	0, 0, 233, 371, 234, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 236, 237, 238, 0, 239, 240,
	241, 0, 243, 242, 0, 378, 0, 244, 0, 0,
	245, 0, 0, 246, 0, 247, 248, 249, 251, 379,
	250, 0, 252, 253, 255, 254, 0, 0, 0, 380,
	256, 381, 257, 258, 0, 259, 0, 0, 260, 0,
	0, 261, 382, 0, 262, 0, 383, 263, 264, 265,
	266, 267, 0, 268, 384, 269, 385, 270, 0, 271,
	272, 273, 274, 275, 386, 276, 277, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 283, 286, 287, 288,
	289, 0, 290, 0, 291, 292, 387, 293, 0, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 0,
	305, 294, 295, 306, 0, 307, 389, 390, 308, 0,
	315, 309, 310, 296, 311, 314, 391, 312, 313, 392,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	0, 1399, 338, 182, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 188, 189, 190, 345, 346, 347, 348, 191,
	349, 350, 0, 192, 351, 352, 193, 194, 0, 0,
	353, 354, 355, 0, 195, 356, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 408, 211, 357, 212,
	358, 359, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 360, 219, 221,
	220, 222, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 363, 364, 365, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 366, 0, 367, 0, 0,
	228, 229, 0, 0, 230, 231, 368, 369, 0, 0,
	370, 235, 0, 232, 0, 0, 233, 371, 234, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 236, 237,
	238, 0, 239, 240, 241, 0, 243, 242, 0, 378,
	0, 244, 0, 0, 245, 0, 0, 246, 0, 247,
	248, 249, 251, 379, 250, 0, 252, 253, 255, 254,
	0, 0, 0, 380, 256, 381, 257, 258, 0, 259,
	0, 0, 260, 0, 0, 261, 382, 0, 262, 0,
	383, 263, 264, 265, 266, 267, 0, 268, 384, 269,
	385, 270, 0, 271, 272, 273, 274, 275, 386, 276,
	277, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	283, 286, 287, 288, 289, 0, 290, 0, 291, 292,
	387, 293, 0, 297, 298, 299, 300, 0, 302, 388,
	301, 303, 304, 0, 305, 294, 295, 306, 0, 307,
	389, 390, 308, 0, 315, 309, 310, 296, 311, 314,
	391, 312, 313, 392, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 394, 395, 0, 0,
	324, 325, 396, 397, 0, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 0, 334, 0, 398, 335,
	336, 337, 399, 400, 182, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 0, 0, 0,
	185, 186, 1381, 187, 0, 0, 0, 0, 344, 0,
	0, 0, 0, 188, 189, 190, 345, 346, 347, 348,
	191, 349, 350, 0, 192, 351, 352, 193, 194, 0,
	0, 353, 354, 355, 0, 195, 356, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 408, 211, 357,
	212, 358, 359, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 360, 219,
	221, 220, 222, 361, 362, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 363, 364, 365, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 366, 0, 367, 0,
	0, 228, 229, 0, 0, 230, 231, 368, 369, 0,
	0, 370, 235, 0, 232, 0, 0, 233, 371, 234,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 236,
	237, 238, 0, 239, 240, 241, 0, 243, 242, 0,
	378, 0, 244, 0, 0, 245, 0, 0, 246, 0,
	247, 248, 249, 251, 379, 250, 0, 252, 253, 255,
	254, 0, 0, 0, 380, 256, 381, 257, 258, 0,
	259, 0, 0, 260, 0, 0, 261, 382, 0, 262,
	0, 383, 263, 264, 265, 266, 267, 0, 268, 384,
	269, 385, 270, 0, 271, 272, 273, 274, 275, 386,
	276, 277, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 283, 286, 287, 288, 289, 0, 290, 0, 291,
	292, 387, 293, 0, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 0, 305, 294, 295, 306, 0,
	307, 389, 390, 308, 0, 315, 309, 310, 296, 311,
	314, 391, 312, 313, 392, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 0, 516, 338, 182, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 344, 0, 0, 0, 0, 188, 189, 190,
	345, 346, 347, 348, 191, 349, 350, 0, 192, 351,
	352, 193, 194, 0, 0, 353, 354, 975, 0, 195,
	356, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 408, 211, 357, 212, 358, 359, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 360, 219, 221, 220, 222, 361, 362, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 363, 364,
	365, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	366, 0, 367, 0, 0, 228, 229, 0, 0, 230,
	231, 368, 369, 0, 0, 370, 235, 0, 232, 0,
	0, 233, 371, 234, 372, 373, 374, 375, 376, 0,
	377, 0, 0, 236, 237, 238, 0, 239, 240, 241,
	0, 243, 242, 0, 378, 0, 244, 0, 0, 245,
	0, 0, 246, 0, 247, 248, 249, 251, 379, 518,
	0, 252, 253, 255, 254, 0, 0, 0, 380, 256,
	381, 257, 258, 0, 259, 0, 0, 260, 0, 0,
	261, 382, 0, 262, 0, 383, 263, 264, 265, 266,
	267, 0, 268, 384, 269, 385, 270, 0, 271, 272,
	273, 274, 275, 386, 276, 277, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 283, 286, 287, 288, 289,
	0, 290, 0, 291, 292, 387, 293, 0, 297, 298,
	299, 300, 0, 302, 388, 301, 303, 304, 0, 305,
	294, 295, 306, 0, 307, 389, 390, 308, 0, 315,
	309, 310, 296, 311, 314, 391, 312, 313, 392, 0,
	316, 0, 317, 318, 319, 320, 321, 322, 323, 0,
	513, 394, 395, 0, 0, 324, 325, 396, 397, 0,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	0, 334, 0, 398, 335, 336, 337, 399, 400, 0,
	1259, 338, 182, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 344, 0, 0, 0,
	0, 188, 189, 190, 345, 346, 347, 348, 191, 349,
	350, 0, 192, 351, 352, 193, 194, 0, 0, 353,
	354, 355, 0, 195, 356, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 408, 211, 357, 212, 358,
	359, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 360, 219, 221, 220,
	222, 361, 362, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 363, 364, 365, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 366, 0, 367, 0, 0, 228,
	229, 0, 0, 230, 231, 1258, 369, 0, 0, 370,
	235, 0, 232, 0, 0, 233, 371, 234, 372, 373,
	374, 375, 376, 0, 377, 0, 0, 236, 237, 238,
	0, 239, 240, 241, 0, 243, 242, 0, 378, 0,
	244, 0, 0, 245, 0, 0, 246, 0, 247, 248,
	249, 251, 379, 250, 0, 252, 253, 255, 254, 0,
	0, 0, 380, 256, 381, 257, 258, 0, 259, 0,
	0, 260, 0, 0, 261, 382, 0, 262, 0, 383,
	263, 264, 265, 266, 267, 0, 268, 384, 269, 385,
	270, 0, 271, 272, 273, 274, 275, 386, 276, 277,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 283,
	286, 287, 288, 289, 0, 290, 0, 291, 292, 387,
	293, 0, 297, 298, 299, 300, 0, 302, 388, 301,
	303, 304, 0, 305, 294, 295, 306, 0, 307, 389,
	390, 308, 0, 315, 309, 310, 296, 311, 314, 391,
	312, 313, 392, 0, 316, 0, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 0, 516, 338, 182, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 188, 189, 190, 345, 346,
	347, 348, 191, 349, 350, 0, 192, 351, 352, 193,
	194, 0, 0, 353, 354, 975, 0, 195, 356, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 408,
	211, 357, 212, 358, 359, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	360, 219, 221, 220, 222, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 363, 364, 365, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 366, 0,
	367, 0, 0, 228, 229, 0, 0, 230, 231, 368,
	369, 0, 0, 370, 235, 0, 232, 0, 0, 233,
	371, 234, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 236, 237, 238, 0, 239, 240, 241, 0, 243,
	242, 0, 378, 0, 244, 0, 0, 245, 0, 0,
	246, 0, 247, 248, 249, 251, 379, 518, 0, 252,
	253, 255, 254, 0, 0, 0, 380, 256, 381, 257,
	258, 0, 259, 0, 0, 260, 0, 0, 261, 382,
	0, 262, 0, 383, 263, 264, 265, 266, 267, 0,
	268, 384, 269, 385, 270, 0, 271, 272, 273, 274,
	275, 386, 276, 277, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 283, 286, 287, 288, 289, 0, 290,
	0, 291, 292, 387, 293, 0, 297, 298, 299, 300,
	0, 302, 388, 301, 303, 304, 0, 305, 294, 295,
	306, 0, 307, 389, 390, 308, 0, 315, 309, 310,
	296, 311, 314, 391, 312, 313, 392, 0, 316, 0,
	317, 318, 319, 320, 321, 322, 323, 0, 513, 394,
	395, 0, 0, 324, 976, 396, 397, 0, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 0, 334,
	0, 398, 335, 336, 337, 399, 400, 0, 516, 338,
	182, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 344, 0, 0, 0, 0, 188,
	189, 190, 345, 346, 347, 348, 191, 349, 350, 0,
	192, 351, 352, 193, 194, 0, 0, 353, 354, 355,
	0, 507, 356, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 408, 211, 357, 212, 358, 359, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 360, 219, 221, 220, 222, 361,
	362, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	363, 364, 365, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 366, 0, 367, 0, 0, 228, 229, 0,
	0, 230, 231, 368, 369, 0, 0, 370, 235, 0,
	232, 0, 0, 233, 371, 234, 372, 373, 374, 375,
	376, 0, 377, 0, 0, 236, 237, 238, 0, 239,
	240, 241, 0, 243, 242, 0, 378, 0, 244, 0,
	0, 245, 0, 0, 246, 0, 247, 248, 249, 251,
	379, 518, 0, 252, 253, 255, 254, 0, 0, 0,
	380, 256, 381, 257, 258, 0, 259, 0, 0, 260,
	0, 0, 261, 382, 0, 262, 0, 383, 263, 264,
	265, 266, 267, 0, 268, 384, 269, 385, 270, 0,
	271, 272, 273, 274, 275, 386, 276, 277, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 283, 286, 287,
	288, 289, 0, 290, 0, 291, 292, 387, 293, 0,
	297, 298, 299, 300, 0, 302, 388, 301, 959, 304,
	0, 305, 294, 295, 306, 0, 307, 389, 390, 308,
	0, 315, 309, 310, 296, 311, 314, 391, 312, 313,
	392, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 513, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 0, 932, 338, 182, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 344, 0,
	0, 0, 0, 188, 189, 190, 345, 346, 347, 348,
	191, 349, 350, 0, 192, 351, 352, 193, 194, 0,
	0, 353, 354, 355, 0, 195, 356, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 408, 211, 357,
	212, 358, 359, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 360, 219,
	221, 220, 222, 361, 362, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 363, 364, 365, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 366, 0, 367, 0,
	0, 228, 229, 0, 0, 230, 231, 931, 369, 0,
	0, 370, 235, 0, 232, 0, 0, 233, 371, 234,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 236,
	237, 238, 0, 239, 240, 241, 0, 243, 242, 0,
	378, 0, 244, 0, 0, 245, 0, 0, 246, 0,
	247, 248, 249, 251, 379, 250, 0, 252, 253, 255,
	254, 0, 0, 0, 380, 256, 381, 257, 258, 0,
	259, 0, 0, 260, 0, 0, 261, 382, 0, 262,
	0, 383, 263, 264, 265, 266, 267, 0, 268, 384,
	269, 385, 270, 0, 271, 272, 273, 274, 275, 386,
	276, 277, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 283, 286, 287, 288, 289, 0, 290, 0, 291,
	292, 387, 293, 0, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 0, 305, 294, 295, 306, 0,
	307, 389, 390, 308, 0, 315, 309, 310, 296, 311,
	314, 391, 312, 313, 392, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 0, 928, 338, 182, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 344, 0, 0, 0, 0, 188, 189, 190,
	345, 346, 347, 348, 191, 349, 350, 0, 192, 351,
	352, 193, 194, 0, 0, 353, 354, 355, 0, 195,
	356, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 408, 211, 357, 212, 358, 359, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 360, 219, 221, 220, 222, 361, 362, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 363, 364,
	365, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	366, 0, 367, 0, 0, 228, 229, 0, 0, 230,
	231, 927, 369, 0, 0, 370, 235, 0, 232, 0,
	0, 233, 371, 234, 372, 373, 374, 375, 376, 0,
	377, 0, 0, 236, 237, 238, 0, 239, 240, 241,
	0, 243, 242, 0, 378, 0, 244, 0, 0, 245,
	0, 0, 246, 0, 247, 248, 249, 251, 379, 250,
	0, 252, 253, 255, 254, 0, 0, 0, 380, 256,
	381, 257, 258, 0, 259, 0, 0, 260, 0, 0,
	261, 382, 0, 262, 0, 383, 263, 264, 265, 266,
	267, 0, 268, 384, 269, 385, 270, 0, 271, 272,
	273, 274, 275, 386, 276, 277, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 283, 286, 287, 288, 289,
	0, 290, 0, 291, 292, 387, 293, 0, 297, 298,
	299, 300, 0, 302, 388, 301, 303, 304, 0, 305,
	294, 295, 306, 0, 307, 389, 390, 308, 0, 315,
	309, 310, 296, 311, 314, 391, 312, 313, 392, 0,
	316, 0, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 394, 395, 0, 0, 324, 325, 396, 397, 0,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	0, 334, 0, 398, 335, 336, 337, 399, 400, 0,
	925, 338, 182, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 344, 0, 0, 0,
	0, 188, 189, 190, 345, 346, 347, 348, 191, 349,
	350, 0, 192, 351, 352, 193, 194, 0, 0, 353,
	354, 355, 0, 195, 356, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 408, 211, 357, 212, 358,
	359, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 360, 219, 221, 220,
	222, 361, 362, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 363, 364, 365, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 366, 0, 367, 0, 0, 228,
	229, 0, 0, 230, 231, 924, 369, 0, 0, 370,
	235, 0, 232, 0, 0, 233, 371, 234, 372, 373,
	374, 375, 376, 0, 377, 0, 0, 236, 237, 238,
	0, 239, 240, 241, 0, 243, 242, 0, 378, 0,
	244, 0, 0, 245, 0, 0, 246, 0, 247, 248,
	249, 251, 379, 250, 0, 252, 253, 255, 254, 0,
	0, 0, 380, 256, 381, 257, 258, 0, 259, 0,
	0, 260, 0, 0, 261, 382, 0, 262, 0, 383,
	263, 264, 265, 266, 267, 0, 268, 384, 269, 385,
	270, 0, 271, 272, 273, 274, 275, 386, 276, 277,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 283,
	286, 287, 288, 289, 0, 290, 0, 291, 292, 387,
	293, 0, 297, 298, 299, 300, 0, 302, 388, 301,
	303, 304, 0, 305, 294, 295, 306, 0, 307, 389,
	390, 308, 0, 315, 309, 310, 296, 311, 314, 391,
	312, 313, 392, 0, 316, 0, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 0, 921, 338, 182, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 188, 189, 190, 345, 346,
	347, 348, 191, 349, 350, 0, 192, 351, 352, 193,
	194, 0, 0, 353, 354, 355, 0, 195, 356, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 408,
	211, 357, 212, 358, 359, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	360, 219, 221, 220, 222, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 363, 364, 365, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 366, 0,
	367, 0, 0, 228, 229, 0, 0, 230, 231, 920,
	369, 0, 0, 370, 235, 0, 232, 0, 0, 233,
	371, 234, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 236, 237, 238, 0, 239, 240, 241, 0, 243,
	242, 0, 378, 0, 244, 0, 0, 245, 0, 0,
	246, 0, 247, 248, 249, 251, 379, 250, 0, 252,
	253, 255, 254, 0, 0, 0, 380, 256, 381, 257,
	258, 0, 259, 0, 0, 260, 0, 0, 261, 382,
	0, 262, 0, 383, 263, 264, 265, 266, 267, 0,
	268, 384, 269, 385, 270, 0, 271, 272, 273, 274,
	275, 386, 276, 277, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 283, 286, 287, 288, 289, 0, 290,
	0, 291, 292, 387, 293, 0, 297, 298, 299, 300,
	0, 302, 388, 301, 303, 304, 0, 305, 294, 295,
	306, 0, 307, 389, 390, 308, 0, 315, 309, 310,
	296, 311, 314, 391, 312, 313, 392, 0, 316, 0,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 394,
	395, 0, 0, 324, 325, 396, 397, 0, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 0, 334,
	0, 398, 335, 336, 337, 399, 400, 182, 0, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	0, 0, 0, 185, 186, 909, 187, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 188, 189, 190, 345,
	346, 347, 348, 191, 349, 350, 0, 192, 351, 352,
	193, 194, 0, 0, 353, 354, 355, 0, 195, 356,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	408, 211, 357, 212, 358, 359, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 360, 219, 221, 220, 222, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 363, 364, 365,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 366,
	0, 367, 0, 0, 228, 229, 0, 0, 230, 231,
	368, 369, 0, 0, 370, 235, 0, 232, 0, 0,
	233, 371, 234, 372, 373, 374, 375, 376, 0, 377,
	0, 0, 236, 237, 238, 0, 239, 240, 241, 0,
	243, 242, 0, 378, 0, 244, 0, 0, 245, 0,
	0, 246, 0, 247, 248, 249, 251, 379, 250, 0,
	252, 253, 255, 254, 0, 0, 0, 380, 256, 381,
	257, 258, 0, 259, 0, 0, 260, 0, 0, 261,
	382, 0, 262, 0, 383, 263, 264, 265, 266, 267,
	0, 268, 384, 269, 385, 270, 0, 271, 272, 273,
	274, 275, 386, 276, 277, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 283, 286, 287, 288, 289, 0,
	290, 0, 291, 292, 387, 293, 0, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 0, 305, 294,
	295, 306, 0, 307, 389, 390, 308, 0, 315, 309,
	310, 296, 311, 314, 391, 312, 313, 392, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 0, 907,
	338, 182, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	188, 189, 190, 345, 346, 347, 348, 191, 349, 350,
	0, 192, 351, 352, 193, 194, 0, 0, 353, 354,
	355, 0, 195, 356, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 408, 211, 357, 212, 358, 359,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 360, 219, 221, 220, 222,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 363, 364, 365, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 366, 0, 367, 0, 0, 228, 229,
	0, 0, 230, 231, 906, 369, 0, 0, 370, 235,
	0, 232, 0, 0, 233, 371, 234, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 236, 237, 238, 0,
	239, 240, 241, 0, 243, 242, 0, 378, 0, 244,
	0, 0, 245, 0, 0, 246, 0, 247, 248, 249,
	251, 379, 250, 0, 252, 253, 255, 254, 0, 0,
	0, 380, 256, 381, 257, 258, 0, 259, 0, 0,
	260, 0, 0, 261, 382, 0, 262, 0, 383, 263,
	264, 265, 266, 267, 0, 268, 384, 269, 385, 270,
	0, 271, 272, 273, 274, 275, 386, 276, 277, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 283, 286,
	287, 288, 289, 0, 290, 0, 291, 292, 387, 293,
	0, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 0, 305, 294, 295, 306, 0, 307, 389, 390,
	308, 0, 315, 309, 310, 296, 311, 314, 391, 312,
	313, 392, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 394, 395, 0, 0, 324, 325,
	396, 397, 0, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 0, 334, 0, 398, 335, 336, 337,
	399, 400, 0, 903, 338, 182, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 188, 189, 190, 345, 346, 347,
	348, 191, 349, 350, 0, 192, 351, 352, 193, 194,
	0, 0, 353, 354, 355, 0, 195, 356, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 408, 211,
	357, 212, 358, 359, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 360,
	219, 221, 220, 222, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 363, 364, 365, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 366, 0, 367,
	0, 0, 228, 229, 0, 0, 230, 231, 368, 369,
	0, 0, 370, 235, 0, 232, 0, 0, 233, 371,
	234, 372, 373, 374, 375, 376, 0, 377, 0, 0,
	236, 237, 238, 0, 239, 240, 241, 0, 243, 242,
	0, 378, 0, 244, 0, 0, 245, 0, 0, 246,
	0, 247, 248, 249, 251, 379, 250, 0, 252, 253,
	255, 254, 0, 0, 0, 380, 256, 381, 257, 258,
	0, 259, 0, 0, 260, 0, 0, 261, 382, 0,
	262, 0, 383, 263, 264, 265, 266, 267, 0, 268,
	384, 269, 385, 270, 0, 271, 272, 273, 274, 275,
	386, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 283, 286, 287, 288, 289, 0, 290, 0,
	291, 292, 387, 293, 0, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 0, 305, 294, 295, 306,
	0, 307, 389, 390, 308, 0, 315, 309, 310, 296,
	311, 314, 391, 312, 313, 392, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 896, 338, 182,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 188, 189,
	190, 345, 346, 347, 348, 191, 349, 350, 0, 192,
	351, 352, 193, 194, 0, 0, 353, 354, 355, 0,
	195, 356, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 408, 211, 357, 212, 358, 359, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 360, 219, 221, 220, 222, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 363,
	364, 365, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 366, 0, 367, 0, 0, 228, 229, 0, 0,
	230, 231, 898, 369, 0, 0, 370, 235, 0, 232,
	0, 0, 233, 371, 234, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 236, 237, 238, 0, 239, 240,
	241, 0, 243, 242, 0, 378, 0, 244, 0, 0,
	245, 0, 0, 246, 0, 247, 248, 249, 251, 379,
	250, 0, 252, 253, 255, 254, 0, 0, 0, 380,
	256, 381, 257, 258, 0, 259, 0, 0, 260, 0,
	0, 261, 382, 0, 262, 0, 383, 263, 264, 265,
	266, 267, 0, 268, 384, 269, 385, 270, 0, 271,
	272, 273, 274, 275, 386, 276, 277, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 283, 286, 287, 288,
	289, 0, 290, 0, 291, 292, 387, 293, 0, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 0,
	305, 294, 295, 306, 0, 307, 389, 390, 308, 0,
	315, 309, 310, 296, 311, 314, 391, 312, 313, 392,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	0, 787, 338, 182, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 188, 189, 190, 345, 346, 347, 348, 191,
	349, 350, 0, 192, 351, 352, 193, 194, 0, 0,
	353, 354, 355, 0, 195, 356, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 408, 211, 357, 212,
	358, 359, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 360, 219, 221,
	220, 222, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 363, 364, 365, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 366, 0, 367, 0, 0,
	228, 229, 0, 0, 230, 231, 789, 369, 0, 0,
	370, 235, 0, 232, 0, 0, 233, 371, 234, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 236, 237,
	238, 0, 239, 240, 241, 0, 243, 242, 0, 378,
	0, 244, 0, 0, 245, 0, 0, 246, 0, 247,
	248, 249, 251, 379, 250, 0, 252, 253, 255, 254,
	0, 0, 0, 380, 256, 381, 257, 258, 0, 259,
	0, 0, 260, 0, 0, 261, 382, 0, 262, 0,
	383, 263, 264, 265, 266, 267, 0, 268, 384, 269,
	385, 270, 0, 271, 272, 273, 274, 275, 386, 276,
	277, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	283, 286, 287, 288, 289, 0, 290, 0, 291, 292,
	387, 293, 0, 297, 298, 299, 300, 0, 302, 388,
	301, 303, 304, 0, 305, 294, 295, 306, 0, 307,
	389, 390, 308, 0, 315, 309, 310, 296, 311, 314,
	391, 312, 313, 392, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 394, 395, 0, 0,
	324, 325, 396, 397, 0, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 0, 334, 0, 398, 335,
	336, 337, 399, 400, 0, 785, 338, 182, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 188, 189, 190, 345,
	346, 347, 348, 191, 349, 350, 0, 192, 351, 352,
	193, 194, 0, 0, 353, 354, 355, 0, 195, 356,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	408, 211, 357, 212, 358, 359, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 360, 219, 221, 220, 222, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 363, 364, 365,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 366,
	0, 367, 0, 0, 228, 229, 0, 0, 230, 231,
	368, 369, 0, 0, 370, 235, 0, 232, 0, 0,
	233, 371, 234, 372, 373, 374, 375, 376, 0, 377,
	0, 0, 236, 237, 238, 0, 239, 240, 241, 0,
	243, 242, 0, 378, 0, 244, 0, 0, 245, 0,
	0, 246, 0, 247, 248, 249, 251, 379, 250, 0,
	252, 253, 255, 254, 0, 0, 0, 380, 256, 381,
	257, 258, 0, 259, 0, 0, 260, 0, 0, 261,
	382, 0, 262, 0, 383, 263, 264, 265, 266, 267,
	0, 268, 384, 269, 385, 270, 0, 271, 272, 273,
	274, 275, 386, 276, 277, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 283, 286, 287, 288, 289, 0,
	290, 0, 291, 292, 387, 293, 0, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 0, 305, 294,
	295, 306, 0, 307, 389, 390, 308, 0, 315, 309,
	310, 296, 311, 314, 391, 312, 313, 392, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 0, 516,
	338, 182, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	188, 189, 190, 345, 346, 347, 348, 191, 349, 350,
	0, 192, 351, 352, 193, 194, 0, 0, 353, 354,
	355, 0, 507, 356, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 408, 211, 357, 212, 358, 359,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 360, 219, 221, 220, 222,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 363, 364, 365, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 366, 0, 367, 0, 0, 228, 229,
	0, 0, 230, 231, 368, 369, 0, 0, 370, 235,
	0, 232, 0, 0, 233, 371, 234, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 236, 237, 238, 0,
	239, 240, 241, 0, 243, 242, 0, 378, 0, 244,
	0, 0, 506, 0, 0, 246, 0, 247, 248, 249,
	251, 379, 518, 0, 252, 253, 255, 254, 0, 0,
	0, 380, 256, 381, 257, 258, 0, 259, 0, 0,
	260, 0, 0, 261, 382, 0, 262, 0, 383, 263,
	264, 265, 266, 267, 0, 268, 384, 269, 385, 270,
	0, 271, 272, 273, 274, 275, 386, 276, 277, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 283, 286,
	287, 288, 289, 0, 290, 0, 291, 292, 508, 293,
	0, 297, 298, 299, 300, 0, 302, 388, 301, 509,
	304, 0, 305, 294, 295, 306, 0, 307, 389, 390,
	308, 0, 315, 309, 310, 296, 311, 314, 391, 312,
	313, 392, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 513, 394, 395, 0, 0, 324, 511,
	396, 397, 0, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 0, 334, 0, 398, 335, 336, 337,
	399, 400, 0, 498, 338, 182, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 188, 189, 190, 345, 346, 347,
	348, 191, 349, 350, 0, 192, 351, 352, 193, 194,
	0, 0, 353, 354, 355, 0, 195, 356, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 408, 211,
	357, 212, 358, 359, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 360,
	219, 221, 220, 222, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 363, 364, 365, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 366, 0, 367,
	0, 0, 228, 229, 0, 0, 230, 231, 368, 369,
	0, 0, 370, 235, 0, 232, 0, 0, 233, 371,
	234, 372, 373, 374, 375, 376, 0, 377, 0, 0,
	236, 237, 238, 0, 239, 240, 241, 0, 243, 242,
	0, 378, 0, 244, 0, 0, 245, 0, 0, 246,
	0, 247, 248, 249, 251, 379, 250, 0, 252, 253,
	255, 254, 0, 0, 0, 380, 256, 381, 257, 258,
	0, 259, 0, 0, 260, 0, 0, 261, 382, 0,
	262, 0, 383, 263, 264, 265, 266, 267, 0, 268,
	384, 269, 385, 270, 0, 271, 272, 273, 274, 275,
	386, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 283, 286, 287, 288, 289, 0, 290, 0,
	291, 292, 387, 293, 0, 499, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 0, 305, 294, 295, 306,
	0, 307, 389, 390, 308, 0, 315, 309, 310, 296,
	311, 314, 391, 312, 313, 392, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 496, 338, 182,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 188, 189,
	190, 345, 346, 347, 348, 191, 349, 350, 0, 192,
	351, 352, 193, 194, 0, 0, 353, 354, 355, 0,
	195, 356, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 408, 211, 357, 212, 358, 359, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 360, 219, 221, 220, 222, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 363,
	364, 365, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 366, 0, 367, 0, 0, 228, 229, 0, 0,
	230, 231, 368, 369, 0, 0, 370, 235, 0, 232,
	0, 0, 233, 371, 234, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 236, 237, 238, 0, 239, 240,
	241, 0, 243, 242, 0, 378, 0, 244, 0, 0,
	245, 0, 0, 246, 0, 247, 248, 249, 251, 379,
	250, 0, 252, 253, 255, 254, 0, 0, 0, 380,
	256, 381, 257, 258, 0, 259, 0, 0, 260, 0,
	0, 261, 382, 0, 262, 0, 383, 263, 264, 265,
	266, 267, 0, 268, 384, 269, 385, 270, 0, 271,
	272, 273, 274, 275, 386, 276, 277, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 283, 286, 287, 288,
	289, 0, 290, 0, 291, 292, 387, 293, 0, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 0,
	305, 294, 295, 306, 0, 307, 389, 390, 308, 0,
	315, 309, 310, 296, 311, 314, 391, 312, 313, 392,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	0, 488, 338, 182, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 188, 189, 190, 345, 346, 347, 348, 191,
	349, 350, 0, 192, 351, 352, 193, 194, 0, 0,
	353, 354, 355, 0, 195, 356, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 408, 211, 357, 212,
	358, 359, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 360, 219, 221,
	220, 222, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 363, 364, 365, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 366, 0, 367, 0, 0,
	228, 229, 0, 0, 230, 231, 368, 369, 0, 0,
	370, 235, 0, 232, 0, 0, 233, 371, 234, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 236, 237,
	238, 0, 239, 240, 241, 0, 243, 242, 0, 378,
	0, 244, 0, 0, 245, 0, 0, 246, 0, 247,
	248, 249, 251, 379, 250, 0, 252, 253, 255, 254,
	0, 0, 0, 380, 256, 381, 257, 258, 0, 259,
	0, 0, 260, 0, 0, 261, 382, 0, 262, 0,
	383, 263, 264, 265, 266, 267, 0, 268, 384, 269,
	385, 270, 0, 271, 272, 273, 274, 275, 386, 276,
	277, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	283, 286, 287, 288, 289, 0, 290, 0, 291, 292,
	387, 293, 0, 297, 298, 299, 300, 0, 302, 388,
	301, 303, 304, 0, 305, 294, 295, 306, 0, 307,
	389, 390, 308, 0, 315, 309, 310, 296, 311, 314,
	391, 312, 313, 392, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 394, 395, 0, 0,
	324, 325, 396, 397, 0, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 0, 334, 0, 398, 335,
	336, 337, 399, 400, 0, 439, 338, 182, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 188, 189, 190, 345,
	346, 347, 348, 191, 349, 350, 0, 192, 351, 352,
	193, 194, 0, 0, 353, 354, 355, 0, 195, 356,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	408, 211, 357, 212, 358, 359, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 360, 219, 221, 220, 222, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 363, 364, 365,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 366,
	0, 367, 0, 0, 228, 229, 0, 0, 230, 231,
	368, 369, 0, 0, 370, 235, 0, 232, 0, 0,
	233, 371, 234, 372, 373, 374, 375, 376, 0, 377,
	0, 0, 236, 237, 238, 0, 239, 240, 241, 0,
	243, 242, 0, 378, 0, 244, 0, 0, 245, 0,
	0, 246, 0, 247, 248, 249, 251, 379, 250, 0,
	252, 253, 255, 254, 0, 0, 0, 380, 256, 381,
	257, 258, 0, 259, 0, 0, 260, 0, 0, 261,
	382, 0, 262, 0, 383, 263, 264, 265, 266, 267,
	0, 268, 384, 269, 385, 270, 0, 271, 272, 273,
	274, 275, 386, 276, 277, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 283, 286, 287, 288, 289, 0,
	290, 0, 291, 292, 387, 293, 0, 297, 298, 299,
	300, 0, 302, 388, 301, 303, 304, 0, 305, 294,
	295, 306, 0, 307, 389, 390, 308, 0, 315, 309,
	310, 296, 311, 314, 391, 312, 313, 392, 0, 316,
	0, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 182, 0,
	338, 0, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 344, 0, 0, 0, 0, 188, 189, 190,
	345, 346, 347, 348, 191, 349, 350, 0, 192, 351,
	352, 193, 194, 0, 0, 353, 354, 355, 0, 195,
	356, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 408, 211, 357, 212, 358, 359, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 360, 219, 221, 220, 222, 361, 362, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 363, 364,
	365, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	366, 0, 367, 0, 0, 228, 229, 0, 0, 230,
	231, 368, 369, 0, 0, 370, 235, 0, 232, 0,
	0, 233, 371, 234, 372, 373, 374, 375, 376, 0,
	377, 0, 0, 236, 237, 238, 0, 239, 240, 241,
	0, 243, 242, 0, 378, 0, 244, 0, 0, 245,
	0, 0, 246, 0, 247, 248, 249, 251, 379, 250,
	0, 252, 253, 255, 254, 0, 0, 0, 380, 256,
	381, 257, 258, 0, 259, 0, 0, 260, 0, 0,
	261, 382, 0, 262, 0, 383, 263, 264, 265, 266,
	267, 0, 268, 384, 269, 385, 270, 0, 271, 272,
	273, 274, 275, 386, 276, 277, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 283, 286, 287, 288, 289,
	0, 290, 0, 291, 292, 387, 293, 0, 297, 298,
	299, 300, 0, 302, 388, 301, 303, 304, 0, 305,
	294, 295, 306, 0, 307, 389, 390, 308, 0, 315,
	309, 310, 296, 311, 314, 391, 312, 313, 392, 0,
	316, 0, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 394, 395, 0, 0, 324, 325, 396, 397, 0,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	0, 334, 0, 398, 335, 336, 337, 399, 400, 182,
	0, 338, 0, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 188, 189,
	190, 345, 346, 347, 348, 191, 349, 350, 0, 192,
	351, 352, 193, 194, 0, 0, 353, 354, 355, 0,
	195, 356, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 408, 211, 357, 212, 358, 359, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 360, 219, 221, 220, 222, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 363,
	364, 365, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 366, 0, 367, 0, 0, 228, 229, 0, 0,
	230, 231, 1950, 369, 0, 0, 370, 235, 0, 232,
	0, 0, 233, 371, 234, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 236, 237, 238, 0, 239, 240,
	241, 0, 243, 242, 0, 378, 0, 244, 0, 0,
	245, 0, 0, 246, 0, 247, 248, 249, 251, 379,
	250, 0, 252, 253, 255, 254, 0, 0, 0, 380,
	256, 381, 257, 258, 0, 259, 0, 0, 260, 0,
	0, 261, 382, 0, 262, 0, 383, 263, 264, 265,
	266, 267, 0, 268, 384, 269, 385, 270, 0, 271,
	272, 273, 274, 275, 386, 276, 277, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 283, 286, 287, 288,
	289, 0, 290, 0, 291, 292, 387, 293, 0, 297,
	298, 299, 300, 0, 302, 388, 301, 303, 304, 0,
	305, 294, 295, 306, 0, 307, 389, 390, 308, 0,
	315, 309, 310, 296, 311, 314, 391, 312, 313, 392,
	0, 316, 0, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	182, 0, 338, 0, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 344, 0, 0, 0, 0, 188,
	189, 190, 345, 346, 347, 348, 191, 349, 350, 0,
	192, 351, 352, 193, 194, 0, 0, 353, 354, 355,
	0, 195, 356, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 408, 211, 357, 212, 358, 359, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 360, 219, 221, 220, 222, 361,
	362, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	363, 364, 365, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 366, 0, 367, 0, 0, 228, 229, 0,
	0, 230, 231, 1948, 369, 0, 0, 370, 235, 0,
	232, 0, 0, 233, 371, 234, 372, 373, 374, 375,
	376, 0, 377, 0, 0, 236, 237, 238, 0, 239,
	240, 241, 0, 243, 242, 0, 378, 0, 244, 0,
	0, 245, 0, 0, 246, 0, 247, 248, 249, 251,
	379, 250, 0, 252, 253, 255, 254, 0, 0, 0,
	380, 256, 381, 257, 258, 0, 259, 0, 0, 260,
	0, 0, 261, 382, 0, 262, 0, 383, 263, 264,
	265, 266, 267, 0, 268, 384, 269, 385, 270, 0,
	271, 272, 273, 274, 275, 386, 276, 277, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 283, 286, 287,
	288, 289, 0, 290, 0, 291, 292, 387, 293, 0,
	297, 298, 299, 300, 0, 302, 388, 301, 303, 304,
	0, 305, 294, 295, 306, 0, 307, 389, 390, 308,
	0, 315, 309, 310, 296, 311, 314, 391, 312, 313,
	392, 0, 316, 0, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 182, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	188, 189, 190, 345, 346, 347, 348, 191, 349, 350,
	0, 192, 351, 352, 193, 194, 0, 0, 353, 354,
	355, 0, 195, 356, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 408, 211, 357, 212, 358, 359,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 360, 219, 221, 220, 222,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 363, 364, 365, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 366, 0, 367, 0, 0, 228, 229,
	0, 0, 230, 231, 1937, 369, 0, 0, 370, 235,
	0, 232, 0, 0, 233, 371, 234, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 236, 237, 238, 0,
	239, 240, 241, 0, 243, 242, 0, 378, 0, 244,
	0, 0, 245, 0, 0, 246, 0, 247, 248, 249,
	251, 379, 250, 0, 252, 253, 255, 254, 0, 0,
	0, 380, 256, 381, 257, 258, 0, 259, 0, 0,
	260, 0, 0, 261, 382, 0, 262, 0, 383, 263,
	264, 265, 266, 267, 0, 268, 384, 269, 385, 270,
	0, 271, 272, 273, 274, 275, 386, 276, 277, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 283, 286,
	287, 288, 289, 0, 290, 0, 291, 292, 387, 293,
	0, 297, 298, 299, 300, 0, 302, 388, 301, 303,
	304, 0, 305, 294, 295, 306, 0, 307, 389, 390,
	308, 0, 315, 309, 310, 296, 311, 314, 391, 312,
	313, 392, 0, 316, 0, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 394, 395, 0, 0, 324, 325,
	396, 397, 0, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 0, 334, 0, 398, 335, 336, 337,
	399, 400, 182, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 344, 0, 0, 0,
	0, 188, 189, 190, 345, 346, 347, 348, 191, 349,
	350, 0, 192, 351, 352, 193, 194, 0, 0, 353,
	354, 355, 0, 195, 356, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 408, 211, 357, 212, 358,
	359, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 360, 219, 221, 220,
	222, 361, 362, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 363, 364, 365, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 366, 0, 367, 0, 0, 228,
	229, 0, 0, 230, 231, 368, 369, 0, 0, 370,
	235, 0, 232, 0, 0, 233, 371, 234, 372, 373,
	374, 375, 376, 0, 377, 0, 0, 236, 237, 238,
	0, 239, 240, 241, 0, 243, 242, 0, 378, 0,
	244, 0, 0, 245, 0, 0, 246, 0, 247, 248,
	249, 251, 379, 250, 0, 252, 253, 255, 254, 0,
	0, 0, 380, 256, 381, 257, 258, 0, 259, 0,
	0, 260, 0, 0, 261, 382, 0, 262, 0, 383,
	263, 264, 265, 266, 267, 0, 268, 384, 269, 385,
	270, 0, 271, 272, 273, 274, 275, 386, 276, 277,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 283,
	286, 287, 288, 289, 0, 290, 0, 291, 292, 387,
	293, 0, 499, 298, 299, 300, 0, 302, 388, 301,
	303, 304, 0, 305, 294, 295, 306, 0, 307, 389,
	390, 308, 0, 315, 309, 310, 296, 311, 314, 391,
	312, 313, 392, 0, 316, 0, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 182, 0, 338, 0, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 344, 0, 1269,
	0, 0, 188, 189, 190, 345, 346, 347, 348, 191,
	349, 350, 0, 192, 351, 352, 193, 194, 0, 0,
	353, 354, 355, 0, 195, 356, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 408, 211, 357, 212,
	358, 359, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 360, 219, 221,
	220, 222, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 363, 364, 365, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 366, 0, 367, 0, 0,
	228, 229, 0, 0, 230, 231, 368, 369, 0, 0,
	370, 235, 0, 232, 0, 0, 233, 371, 234, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 236, 237,
	238, 0, 239, 240, 241, 0, 243, 242, 0, 378,
	0, 244, 0, 0, 245, 0, 0, 246, 0, 247,
	248, 249, 251, 379, 250, 0, 252, 253, 255, 254,
	0, 0, 0, 380, 256, 381, 257, 258, 0, 259,
	0, 0, 260, 0, 0, 261, 382, 0, 262, 0,
	383, 263, 264, 265, 266, 267, 0, 268, 384, 269,
	385, 270, 0, 271, 272, 273, 274, 275, 386, 276,
	277, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	283, 286, 287, 288, 289, 0, 290, 0, 291, 292,
	387, 293, 0, 297, 298, 299, 300, 0, 302, 388,
	301, 303, 304, 0, 0, 294, 295, 306, 0, 307,
	389, 390, 308, 0, 315, 309, 310, 296, 311, 314,
	391, 312, 313, 392, 0, 316, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 394, 395, 0, 0,
	324, 325, 396, 397, 0, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 0, 334, 0, 398, 335,
	336, 337, 399, 400, 182, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 344, 0,
	0, 0, 0, 188, 189, 190, 345, 346, 347, 348,
	191, 349, 350, 0, 192, 351, 352, 193, 194, 0,
	0, 353, 354, 355, 0, 195, 356, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 408, 211, 357,
	212, 358, 359, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 360, 219,
	221, 220, 222, 361, 362, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 363, 364, 365, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 366, 0, 367, 0,
	0, 228, 229, 0, 0, 230, 231, 368, 369, 0,
	0, 370, 235, 0, 232, 0, 0, 233, 371, 234,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 236,
	237, 238, 0, 239, 240, 241, 0, 243, 242, 0,
	378, 0, 244, 0, 0, 245, 0, 0, 246, 0,
	247, 248, 249, 251, 379, 250, 0, 252, 253, 255,
	254, 0, 0, 0, 380, 256, 381, 257, 258, 0,
	259, 0, 0, 260, 0, 0, 261, 382, 0, 262,
	0, 383, 263, 264, 265, 266, 267, 0, 268, 384,
	269, 385, 270, 0, 271, 272, 273, 274, 275, 386,
	739, 277, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 283, 286, 287, 288, 289, 0, 290, 0, 291,
	292, 387, 293, 0, 297, 298, 299, 300, 0, 302,
	388, 301, 303, 304, 0, 305, 294, 295, 306, 0,
	307, 389, 390, 308, 0, 315, 309, 310, 296, 311,
	314, 391, 312, 313, 392, 0, 316, 0, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 182, 0, 338, 0, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 188, 189, 190, 345, 346, 347,
	348, 191, 349, 350, 0, 192, 351, 352, 193, 194,
	0, 0, 353, 354, 355, 0, 195, 356, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 408, 211,
	357, 212, 358, 359, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 360,
	219, 221, 220, 222, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 363, 364, 365, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 366, 0, 367,
	0, 0, 228, 229, 0, 0, 230, 231, 368, 369,
	0, 0, 370, 235, 0, 232, 0, 0, 233, 371,
	234, 372, 373, 374, 375, 376, 0, 377, 0, 0,
	236, 237, 238, 0, 239, 240, 241, 0, 243, 242,
	0, 378, 0, 244, 0, 0, 245, 0, 0, 246,
	0, 247, 248, 249, 251, 379, 250, 0, 252, 253,
	255, 254, 0, 0, 0, 380, 256, 381, 257, 258,
	0, 259, 0, 0, 260, 0, 0, 261, 382, 0,
	262, 0, 383, 263, 264, 0, 266, 267, 0, 268,
	384, 269, 385, 270, 0, 271, 272, 273, 0, 275,
	386, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 283, 286, 287, 288, 289, 0, 290, 0,
	291, 292, 387, 0, 0, 297, 298, 299, 300, 0,
	302, 388, 301, 303, 304, 0, 305, 294, 295, 306,
	0, 307, 389, 390, 308, 0, 315, 309, 310, 296,
	311, 314, 391, 312, 313, 392, 0, 316, 0, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 1061, 1062,
	0, 1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101,
	1102, 1103, 0, 0, 0, 1063, 0, 0, 0, 1094,
	0, 1083, 0, 0, 0, 0, 1064, 0, 1080, 1105,
	0, 0, 0, 1843, 1844, 0, 1861, 1862, 1863, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 1087, 1088, 1089,
	0, 0, 0, 0, 0, 1069, 1858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1098, 1106, 0,
	0, 1086, 1087, 1088, 1089, 0, 0, 0, 0, 0,
	1069, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1096, 1098, 1106, 0, 0, 0, 1084, 0, 0,
	1849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1095, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 1864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 1095, 0, 0,
	0, 0, 1859, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 0, 0, 0, 1099, 1094, 0,
	0, 1090, 0, 0, 0, 1064, 0, 0, 1105, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 0, 1099, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 1860, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 1075, 1076,
	1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073,
	1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 0, 0,
	1086, 1087, 1088, 1089, 1884, 0, 0, 0, 0, 1069,
	1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079,
	1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 1098, 1106, 0, 0, 0, 0, 0, 0, 1883,
	0, 0, 0, 1855, 1856, 1857, 0, 0, 0, 0,
	1104, 0, 1854, 1852, 1853, 1845, 1846, 1847, 1848, 1850,
	1851, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 0, 0, 1095, 0, 1094, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	1090, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 1087, 1088, 1089, 0, 0, 0, 0, 0, 1069,
	0, 0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093,
	1101, 1102, 1103, 0, 0, 0, 0, 0, 0, 0,
	1094, 1098, 1106, 0, 0, 0, 0, 1064, 0, 1097,
	1105, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100,
	1104, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071,
	0, 1063, 0, 0, 0, 1096, 0, 1083, 1835, 0,
	0, 1084, 0, 0, 1080, 0, 0, 0, 0, 0,
	1843, 1844, 0, 1861, 1862, 1863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 1087, 1088, 1089, 0, 0, 0, 0,
	1090, 1069, 0, 1858, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 1098, 1106, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1096, 0, 0,
	0, 0, 0, 1084, 0, 0, 0, 1849, 0, 0,
	0, 0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093,
	1101, 1102, 1103, 0, 0, 0, 0, 0, 1095, 0,
	1094, 0, 0, 0, 0, 0, 0, 1064, 0, 1097,
	1105, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100,
	0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071,
	0, 1063, 1090, 0, 2496, 0, 0, 1083, 0, 1859,
	0, 0, 0, 0, 1080, 0, 0, 1085, 0, 0,
	1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 0,
	0, 0, 0, 1099, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 1064, 0, 0, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 1087, 1088, 1089, 0, 1063, 0, 0,
	0, 1069, 0, 1083, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 1860, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1098, 1106, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078,
	1079, 1100, 1104, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 0, 0, 0, 0, 2449, 1096, 1086, 1087,
	1088, 1089, 0, 1084, 0, 0, 0, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1095, 1098,
	1106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1855, 1856, 1857, 0, 0, 0, 0, 0, 1104, 1854,
	1852, 1853, 1845, 1846, 1847, 1848, 1850, 1851, 0, 0,
	0, 0, 1090, 1096, 0, 0, 0, 0, 0, 1084,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 0,
	0, 0, 0, 1099, 1095, 0, 1094, 0, 0, 0,
	0, 0, 0, 1064, 0, 0, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 1090, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1099,
	0, 1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078,
	1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 0, 0, 0, 0, 2404, 0, 1086, 1087,
	1088, 1089, 0, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 0, 0, 0, 0, 1094, 1098,
	1106, 0, 0, 0, 0, 1064, 0, 1097, 1105, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 1104, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 1063,
	0, 0, 2374, 1096, 0, 1083, 0, 0, 0, 1084,
	0, 0, 1080, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 1087, 1088, 1089, 0, 0, 0, 0, 1090, 1069,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 1098, 1106, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 0, 0, 1095, 0, 1094, 0,
	0, 0, 0, 0, 0, 1064, 0, 1097, 1105, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 1063,
	1090, 0, 2369, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 1085, 0, 0, 1061, 1062,
	0, 1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0,
	0, 1099, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 1087, 1088, 1089, 0, 1063, 0, 0, 0, 1069,
	0, 1083, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, 1106, 0, 0, 0, 0, 0, 0, 1097,
	0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100,
	1104, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071,
	0, 0, 0, 0, 2365, 1096, 1086, 1087, 1088, 1089,
	0, 1084, 0, 0, 0, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, 1098, 1106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 1096, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 1061, 1062,
	0, 1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0,
	0, 1099, 1095, 0, 1094, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 1090, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 1097,
	0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100,
	0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071,
	0, 0, 0, 0, 2305, 0, 1086, 1087, 1088, 1089,
	0, 0, 0, 0, 0, 1069, 0, 0, 0, 0,
	1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 0,
	0, 0, 0, 0, 0, 0, 1094, 1098, 1106, 0,
	0, 0, 0, 1064, 0, 1097, 1105, 0, 1075, 1076,
	1082, 1081, 1077, 1078, 1079, 1100, 1104, 1074, 1072, 1073,
	1065, 1066, 1067, 1068, 1070, 1071, 0, 1063, 0, 0,
	2268, 1096, 0, 1083, 0, 0, 0, 1084, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1095, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 1087,
	1088, 1089, 0, 0, 0, 0, 1090, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 1098,
	1106, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1096, 0, 0, 0, 0, 0, 1084,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 0,
	0, 0, 0, 0, 1095, 0, 1094, 0, 0, 0,
	0, 0, 0, 1064, 0, 1097, 1105, 0, 1075, 1076,
	1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073,
	1065, 1066, 1067, 1068, 1070, 1071, 0, 1063, 1090, 0,
	2267, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 1085, 0, 0, 1061, 1062, 0, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0, 1099,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 1087,
	1088, 1089, 0, 1063, 0, 0, 0, 1069, 0, 1083,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1098,
	1106, 0, 0, 0, 0, 0, 0, 1097, 0, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 1104, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0,
	0, 0, 2232, 1096, 1086, 1087, 1088, 1089, 0, 1084,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1095, 1098, 1106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1090, 1096,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 1061, 1062, 0, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0, 1099,
	1095, 0, 1094, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 1090, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 1097, 0, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0,
	0, 0, 2077, 0, 1086, 1087, 1088, 1089, 0, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 1061, 1062,
	0, 1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0,
	0, 0, 0, 0, 1094, 1098, 1106, 0, 0, 0,
	0, 1064, 0, 1097, 1105, 0, 1075, 1076, 1082, 1081,
	1077, 1078, 1079, 1100, 1104, 1074, 1072, 1073, 1065, 1066,
	1067, 1068, 1070, 1071, 0, 1063, 0, 0, 2053, 1096,
	0, 1083, 0, 0, 0, 1084, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 1087, 1088, 1089,
	0, 0, 0, 0, 1090, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 1098, 1106, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1096, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1061, 1062,
	0, 1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0,
	0, 0, 1095, 0, 1094, 0, 0, 0, 0, 0,
	0, 1064, 0, 1097, 1105, 0, 1075, 1076, 1082, 1081,
	1077, 1078, 1079, 1100, 0, 1074, 1072, 1073, 1065, 1066,
	1067, 1068, 1070, 1071, 0, 1063, 1090, 0, 1507, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 1085, 0, 0, 1061, 1062, 0, 1091, 1092, 1093,
	1101, 1102, 1103, 0, 0, 0, 0, 1099, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 1087, 1088, 1089,
	0, 1063, 0, 0, 0, 1069, 2555, 1083, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1098, 1106, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 1075, 1076,
	1082, 1081, 1077, 1078, 1079, 1100, 1104, 1074, 1072, 1073,
	1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 1805, 0,
	0, 1096, 1086, 1087, 1088, 1089, 0, 1084, 0, 0,
	0, 1069, 0, 1875, 0, 0, 1874, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1095, 1098, 1106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2554, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 1096, 0, 0,
	0, 0, 0, 1084, 0, 0, 0, 0, 1607, 0,
	0, 1085, 0, 0, 1061, 1062, 0, 1091, 1092, 1093,
	1101, 1102, 1103, 0, 0, 0, 0, 1099, 1095, 0,
	1094, 0, 0, 0, 1606, 0, 0, 1064, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 1090, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 1097, 0, 0, 1075, 1076,
	1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073,
	1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 0, 0,
	0, 0, 1086, 1087, 1088, 1089, 0, 0, 0, 0,
	0, 1069, 0, 0, 0, 0, 1061, 1062, 0, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0, 0,
	0, 0, 1094, 1098, 1106, 0, 0, 1778, 0, 1064,
	0, 1097, 1105, 0, 1075, 1076, 1082, 1081, 1077, 1078,
	1079, 1100, 1104, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 0, 1063, 0, 0, 0, 1096, 0, 1083,
	0, 0, 0, 1084, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 1779, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 1087, 1088, 1089, 0, 0,
	0, 0, 1090, 1069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 1098, 1106, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1061, 1062, 0, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0, 0,
	1095, 0, 1094, 0, 0, 0, 0, 0, 0, 1064,
	0, 1097, 1105, 0, 1075, 1076, 1082, 1081, 1077, 1078,
	1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 0, 1063, 1090, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 1085,
	0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101,
	1102, 1103, 0, 0, 0, 1099, 0, 0, 0, 1094,
	0, 0, 0, 0, 0, 0, 1064, 0, 0, 1105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 1087, 1088, 1089, 0, 0,
	1063, 0, 0, 1069, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 1106, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 1075, 1076, 1082, 1081,
	1077, 1078, 1079, 1100, 1104, 1074, 1072, 1073, 1065, 1066,
	1067, 1068, 1070, 1071, 0, 0, 0, 0, 0, 1096,
	0, 1086, 1087, 1088, 1089, 1084, 0, 0, 0, 0,
	1069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1095, 595, 1098, 1106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 1096, 0, 0, 0,
	0, 0, 1084, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101,
	1102, 1103, 0, 0, 0, 1099, 0, 1095, 0, 1094,
	0, 0, 0, 0, 0, 0, 1064, 0, 0, 1105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 1090, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 1097, 0, 0, 1075, 1076, 1082, 1081,
	1077, 1078, 1079, 1100, 0, 1074, 1072, 1073, 1065, 1066,
	1067, 1068, 1070, 1071, 0, 0, 0, 0, 2057, 0,
	0, 1086, 1087, 1088, 1089, 0, 0, 0, 0, 0,
	1069, 0, 0, 0, 0, 1881, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1098, 1106, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079,
	1100, 1104, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101,
	1102, 1103, 0, 0, 0, 0, 0, 1095, 0, 1094,
	0, 0, 0, 1876, 0, 0, 1064, 0, 0, 1105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 1090, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 1085, 0, 0, 1061,
	1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 0, 0,
	0, 0, 1099, 0, 0, 1094, 0, 0, 0, 0,
	0, 0, 1064, 0, 0, 1105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 1087, 1088, 1089, 0, 1063, 0, 0, 0,
	1069, 0, 1083, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1098, 1106, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079,
	1100, 1104, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 0, 0, 0, 0, 0, 1096, 1086, 1087, 1088,
	1089, 0, 1084, 0, 0, 0, 1069, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1095, 1098, 1106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 1096, 0, 0, 0, 0, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 1061,
	1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 0, 0,
	0, 0, 1099, 1095, 0, 1094, 0, 0, 0, 1834,
	0, 0, 1064, 0, 0, 1105, 1841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 1090, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079,
	1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 0, 0, 0, 0, 0, 0, 1086, 1087, 1088,
	1089, 0, 0, 0, 0, 0, 1069, 0, 0, 0,
	0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103,
	0, 0, 0, 0, 0, 0, 0, 1094, 1098, 1106,
	0, 0, 0, 0, 1064, 0, 1097, 1105, 0, 1075,
	1076, 1082, 1081, 1077, 1078, 1079, 1100, 1104, 1074, 1072,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 1063, 0,
	0, 0, 1096, 0, 1083, 0, 0, 0, 1084, 0,
	0, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	1087, 1088, 1089, 0, 0, 0, 0, 1090, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	1098, 1106, 0, 0, 0, 0, 0, 0, 1099, 1061,
	1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 0, 1104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1064, 0, 1096, 1105, 0, 0, 0, 0,
	1084, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 1083, 0, 0, 1095, 0, 0, 0, 1080,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 1075,
	1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 1086, 1087, 1088,
	1089, 0, 0, 0, 0, 0, 1069, 0, 0, 0,
	1099, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 1098, 1106,
	0, 0, 0, 0, 1064, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1063, 0,
	0, 0, 1096, 0, 1083, 0, 0, 0, 1084, 0,
	0, 1080, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0,
	1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	1087, 1088, 1089, 0, 0, 0, 0, 1090, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1313, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	1098, 1106, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 1310, 1340, 1301, 1331, 1330, 0,
	0, 1303, 1302, 0, 1096, 0, 0, 1342, 1341, 0,
	1084, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 1097, 1328, 1327, 1075,
	1076, 1082, 1081, 1077, 1078, 1079, 1100, 1326, 1074, 1072,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1325, 1323, 1324, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 1309, 0, 0,
	0, 0, 0, 0, 1314, 1312, 1315, 1316, 1317, 1318,
	1319, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 0, 0, 0, 1311, 0, 1097, 0,
	0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0,
	1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0,
	0, 0, 0, 0, 1313, 1322, 0, 0, 0, 1432,
	1430, 1431, 1434, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1306, 1321, 1310, 1340,
	1301, 1331, 1330, 0, 0, 1303, 1302, 1320, 1307, 0,
	0, 1342, 1341, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 1337, 1338, 0, 0, 0, 0, 0,
	0, 0, 537, 0, 563, 0, 0, 0, 0, 1336,
	0, 1328, 1327, 0, 0, 1308, 0, 0, 0, 0,
	1343, 1326, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 1323, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 541, 0, 0, 0, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	0, 1309, 0, 559, 0, 0, 0, 0, 1314, 1312,
	1315, 1316, 1317, 1318, 1319, 0, 1339, 564, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 0, 0, 0, 1305, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	1311, 0, 0, 0, 0, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 546, 547, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 0, 0, 548, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 552, 0, 0, 0, 0,
	1306, 0, 0, 0, 0, 565, 0, 0, 0, 0,
	0, 1320, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1304, 0, 0, 1337, 1338, 0,
	0, 0, 0, 0, 0, 551, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1308,
	0, 0, 0, 0, 1343, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 556, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 0,
	0, 0, 561, 0, 0, 0, 567, 0, 0, 0,
	0, 554, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 560,
}
var sqlPact = [...]int{

	3747, -1000, -57, -1000, -1000, -1000, 90, -1000, -1000, -1000,
	89, 88, 87, -1000, 85, 84, 83, 82, 76, 75,
	74, 73, 72, 71, 68, -1000, 58, -1000, -1000, -1000,
	-1000, 57, 55, 53, -1000, 52, 933, 21542, 50, 49,
	1350, 35574, 48, -1000, 929, 26577, 875, 1413, -1000, 47,
	961, 35243, 4244, 1198, 1047, 1588, 34909, 21208, 1558, 1109,
	34575, -1000, -1000, 34241, 46, 44, 41, 37, 36, -1000,
	-1000, 33907, 35, 34, 33, 32, 31, 30, 27, 25,
	23, 19, 17, 15, 14, 13, -1000, 12, 11, 10,
	-1000, 42800, 9, 8, 7, 1028, 4, 2, 1, 0,
	-1000, -1000, -1, -2, -3, -6, -13, 59, -14, -16,
	-19, -21, -1000, 944, 442, 1824, 8452, 767, 995, 990,
	974, 926, 922, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 37560, 35574, -22,
	-80, -29, -1000, 1862, 574, 18811, 3747, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26243, 25909,
	23586, 33573, 33239, 6379, 705, -1000, -61, 22206, 35574, -1000,
	60, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14671, 14325, 454, 60, -1000, -1000,
	-1000, 32905, 23241, 32571, 1449, 32237, -1000, -1000, 31903, -1000,
	-1000, 1745, 1598, 1593, 25575, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 31572, 31238, 30904, 30570, 22896, 396, -1000,
	-1000, -1000, 17086, -1000, -1000, -1000, -1000, -32, -1000, -33,
	-34, -1000, -35, -36, -37, -39, -40, -41, -1000, -42,
	-43, -1000, -45, -53, -1000, -54, -55, 791, 806, 822,
	30236, 1201, -1000, -1000, -60, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35574, -1000, 15361, -1000, 395, -1000, 1607,
	-1000, 15361, -1000, 1191, -1000, -1000, -1000, -1000, -1000, 35574,
	-1000, -1000, -1000, -1000, -1000, -1000, 2122, 1083, 394, 29902,
	-1000, 1436, -1000, 508, 674, -1000, -1000, -1000, 9487, 103,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1363,
	22551, 1099, 1921, 1740, 2121, 1399, 1722, 1690, 1688, 1684,
	1662, 2120, 865, 2119, 1749, 956, 2117, 1657, 1276, 576,
	2115, 1594, 1584, -1000, -1000, -1000, -1000, 829, -1000, -1000,
	-1000, 27901, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 944, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1322, 1822, 1822, 1822, 1946, 202, 199, -1000, 59,
	-1000, 1579, -1000, 1050, -1000, -1000, -1000, -1000, -1000, 42081,
	-1000, -1000, 15361, 15361, 15361, 15361, 15361, 1004, 433, -1000,
	391, 390, 7761, -1000, -1000, 2103, -1000, -1000, -1000, 206,
	-1000, -1000, 15361, 60, -1000, -1000, -1000, -1000, 389, 2110,
	-1000, 532, -1000, -1000, -1000, 514, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1623, 388, 387, 383, -1000,
	381, -1000, -1000, 373, 371, 358, 355, 354, 352, 351,
	348, 347, 346, 345, 344, 340, 332, 331, 923, -1000,
	538, -1000, -1000, 538, 538, -1000, 295, 295, 296, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 295, -1000, -1000,
	-1000, 485, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 330, 787, 1213, -1000, -1000, 1213, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 703, 36898, -64, 35574,
	-1000, 310, -64, -1000, -1000, 302, -1000, 10522, 10522, -1000,
	-1000, -1000, -1000, -1000, 9832, 1400, -1000, 3120, -212, 209,
	481, -1000, 17776, 20530, -1000, -1000, 902, 1726, 692, -1000,
	869, 1719, 440, -1000, 522, 1713, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1060, -1000, 790, 1711,
	-103, 1652, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 23917, 22206,
	-61, -62, -1000, -1000, -1000, 6034, 42081, -1000, 42081, -1000,
	755, 19499, 60, -1000, -1000, -1000, -1000, 301, 1269, 520,
	1267, -1000, 208, -1000, 29568, 520, 1262, -1000, -1000, -1000,
	27901, -1000, 35574, -1000, 35574, -1000, 786, -1000, 37229, 111,
	1710, -1000, -1000, 111, 1701, -1000, 110, 1691, -1000, -1000,
	1166, 1685, -1000, -93, 1683, -1000, -1000, -1000, 15361, -81,
	-1000, -1000, -1000, 574, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 29234,
	21874, 1477, 487, 42081, 1993, 42720, 23917, 42081, 21874, -1000,
	-1000, 35574, -1000, 15361, -1000, 1990, 1336, -65, -1000, -1000,
	-1000, -1000, -1000, 1342, 1387, 645, 980, 9487, 9487, 1775,
	-1000, 101, 6379, -1000, -1000, -1000, -1000, 28900, -1000, -1000,
	-1000, 1052, 35574, -1000, -1000, 1614, -1000, 21874, 35574, -1000,
	35574, -1000, 35574, -1000, 35574, -1000, 35574, -1000, -1000, -1000,
	-1000, -1000, 2893, -1000, 1611, -1000, -1000, 35574, -1000, 1327,
	-1000, -1000, -1000, 28569, 28235, -1000, 904, 736, -1000, -1000,
	113, -1000, -1000, 1322, -1000, 1204, 1396, 13979, 1371, 15361,
	59, -1000, -1000, 59, 59, 9142, -1000, -1000, -1000, 35574,
	-1000, 42486, 42720, 6379, 721, 15361, 15361, 15361, 15361, 15361,
	15361, 15361, 15361, 15361, 15361, 15361, 15361, 15361, 15361, 15361,
	15361, 15361, 15361, 15361, 15361, 15361, 15361, 15361, 15361, 15361,
	15361, 15361, 15361, 15361, 15361, 15361, 15361, 1388, 15361, 698,
	15361, 15361, 15361, 15361, 1442, 1015, 294, 1043, -1000, 2046,
	2046, 2046, 42229, 42229, 216, 433, -1000, 15361, -1000, 29,
	15361, 199, 40376, -63, 7416, -1000, -1000, -1000, 13634, 536,
	42081, 60, 6724, -1000, 2102, 880, 1633, 1486, 300, 483,
	470, 467, 464, 15361, 15361, 13289, 12943, 12597, 16051, 12251,
	15361, 8106, 15361, 15361, 15361, 15361, 11905, 11559, -1000, 299,
	-1000, -1000, -1000, -1000, 2098, -1000, -1000, 2092, -1000, 718,
	713, 2090, 1905, 507, -1000, -65, -1000, 36898, -1000, 35574,
	-64, 1978, 35574, -1000, 105, -1000, 40944, -1000, 105, -83,
	-1000, 1412, 1397, 19155, 1286, 1036, 1036, 1036, -1000, 297,
	415, 481, 5325, 11213, -1000, 26908, 1114, 122, 198, 17431,
	1400, -1000, 35574, -71, 942, -1000, 25241, 1886, 1857, 1819,
	27901, 1960, 29, 1885, 1577, 697, 27901, 991, 23917, 1865,
	693, 1959, 29, 1574, 687, 35574, 6379, 1839, 461, -1000,
	35574, -1000, -1000, -1000, 1566, -86, -1000, -1000, 24910, 1974,
	1679, -1000, 987, -1000, 1678, 1973, 35574, 1188, 1260, -1000,
	-1000, 723, 1677, 530, 207, 1971, 207, 19842, -1000, 35574,
	-1000, 35574, -1000, -1000, 35574, -1000, 35574, -1000, 35574, 35574,
	-1000, 35574, 23917, 23917, -88, 42081, 4291, 24579, 685, -1000,
	563, 24910, 3960, -99, -1000, 759, -1000, -1000, -1000, -1000,
	188, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 296, 923, 295, 295, 295,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 485, -1000, -1000,
	538, 538, 538, -1000, -1000, -78, 1562, 499, -104, 615,
	-65, -1000, 1213, -1000, 919, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2108, -1000,
	2087, -1000, -1000, 2083, -66, -1000, -66, -1000, 6379, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 35574, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 519, -1000, -1000, -1000, -1000,
	-1000, -1000, 35574, 35574, 35574, -1000, 27901, -1000, -1000, -1000,
	-1000, 42081, -1000, 350, -1000, -1000, 42081, 828, 1424, -1000,
	1424, -67, -1000, 41066, 1409, 35574, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 497, 384, 384,
	724, 724, 724, 724, 2096, 1134, 1650, 457, 4080, 4080,
	4080, 4080, 4080, 4080, 4080, 4080, 165, 271, 271, 165,
	165, 165, 165, 165, 4080, 4080, 4080, 42229, 587, 2854,
	15361, 15361, 682, 1008, 294, 2854, 15361, 2854, 2854, 2854,
	2854, -1000, 1147, -1000, -1000, -1000, -1000, 1552, 292, 16051,
	16051, -1000, -1000, -1000, 7761, 16396, -1000, -1000, -1000, -1000,
	290, 15361, -1000, 40498, -225, 197, -101, -1000, 15361, 412,
	-107, -1000, 768, -1000, 15361, -1000, -51, 15361, 15361, 15361,
	196, -1000, 195, -1000, 677, -1000, 673, 672, 670, -1000,
	289, 1029, 288, 285, 15361, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 41959, 38482, 193, -1000, 1548, -101, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 192, -1000, 190, -1000,
	41769, -101, 189, 4410, -1000, 16051, 16051, 16051, 7761, 284,
	185, -1000, 40754, -1000, 41703, 10867, 10867, 10867, 184, 41513,
	15361, -101, 38263, 38228, 4365, -106, -111, -1000, -112, -1000,
	2081, -114, 182, 495, 494, 179, 1601, -1000, 1858, -1000,
	-1000, 283, -117, 530, 10522, 18466, 6379, -1000, 530, 9832,
	-1000, 19155, 19155, 1351, 1389, 19155, -1000, -1000, -1000, -1000,
	26908, 458, 481, 26908, -1000, 2079, 1378, 178, -1000, -1000,
	-1000, 35574, 280, -1000, 481, 177, 897, 35574, 35574, 35574,
	-1000, -1000, 1258, 36567, 1255, 42720, 35574, -1000, 278, 276,
	1394, 1393, 35574, 35574, 36236, 35905, 35574, 866, 29, -1000,
	492, 274, 35574, 849, 23917, 521, 491, 35574, 29, -1000,
	272, 35574, 848, -1000, 486, 1468, 1214, -1000, 752, 1543,
	35574, 167, -119, -68, 42720, -1000, -1000, -1000, -1000, -1000,
	35574, 385, 35574, 29, 35574, 23917, 23917, 29, 35574, 1675,
	1692, 453, 35574, 1396, 15361, 905, -1000, 18121, 543, 35574,
	838, 64, -1000, -1000, -1000, 475, 35574, -1000, -1000, 111,
	111, -1000, 110, 1166, -1000, -93, -1000, 15361, -1000, -1000,
	35574, 23917, -124, -1000, 582, 581, 578, -1000, 42720, -1000,
	423, 635, -1000, 2076, 518, 35574, 9487, 9487, -1000, 1419,
	-1000, -1000, 860, -1000, 896, -1000, -1000, -1000, -1000, 9487,
	-1000, -73, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 828,
	-1000, 15361, 2073, -1000, -1000, -1000, 9142, -1000, -1000, -1000,
	35574, -166, 15361, 2854, 2854, 15361, 16051, 16051, -1000, 2854,
	-1000, -1000, -1000, -1000, -1000, 1539, 270, 15361, 42720, 4596,
	3921, -125, -1000, 15361, -69, -1000, 15361, -1000, 40186, -1000,
	-1000, 420, 1732, -1000, 15361, 41323, 164, 10177, -1000, 41256,
	-59, -59, -1000, 2107, 1280, 1169, 872, 799, 2070, -1000,
	20186, 533, 1084, 40120, 42486, 42720, -1000, 15361, -1000, -1000,
	1530, 15361, -1000, 42486, 42720, 16051, 16051, 16051, 16051, 16051,
	16051, 16051, 16051, 16051, 16051, 16051, 16051, 16051, 16051, 16051,
	16051, 16051, 16051, 16051, 1358, 16051, 2041, 2041, 2041, -70,
	15361, -1000, 1502, 1530, 15361, 15361, 42720, 162, 148, 147,
	-1000, 15361, -101, 15361, 15361, 15361, -1000, -1000, -1000, 146,
	-1000, 2067, -1000, -1000, -1000, -1000, 1120, -1000, 3960, -1000,
	1482, -1000, -131, -1000, 1400, -1000, 1482, -1000, -1000, 1351,
	-1000, 261, 15361, 19155, -1000, 409, -1000, -126, -1000, 26908,
	-1000, 407, -222, -1000, 474, -1000, 481, 258, 35574, 26908,
	-1000, -1000, -1000, 669, 657, 1674, -1000, 1248, -1000, 553,
	-1000, 999, 15361, 4963, 256, 255, 960, -1000, 1670, 1166,
	1665, 1166, -1000, -71, 906, -1000, 20874, 15361, -1000, 655,
	-1000, 983, 20874, -1000, -1000, 15361, -1000, 647, 20874, 518,
	1520, 740, -1000, 749, -1000, 1451, -1000, 24910, 254, 35574,
	247, -1000, 246, -1000, 520, -1000, 245, 35574, 1365, 453,
	24248, -1000, 520, 838, -1000, 42081, -1000, 838, 8797, 1823,
	-132, -1000, -1000, -1000, 530, 19842, 19155, 9832, -133, -1000,
	-1000, -1000, -1000, 42081, -73, 1791, 1791, -1000, 2061, -1000,
	403, 145, -1000, 27570, -73, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35574, 1144, 39930, -1000, 1837, 6379, 1988, 2854,
	3812, 717, 15361, 42720, 42351, -134, 15361, 15361, -1000, 143,
	15361, 399, 42081, -1000, -1000, -1000, 42081, 15361, 2106, 15361,
	141, 140, 137, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 136, -1000, -1000, 37891, 15361, 135, -1000, 134, 133,
	42081, 1502, 42081, -1000, -1000, 482, 482, 789, 789, 789,
	789, 2041, 1954, 1263, 1115, 1126, 1126, 1126, 535, 312,
	312, 1126, 1126, 1126, 1518, 1332, 244, 38293, 15361, 131,
	-1000, -1000, 42081, 42081, 130, -1000, -1000, -1000, -101, 333,
	39808, 39618, -1000, 127, 6379, 35574, 35574, 125, 1479, 1943,
	-1000, 19155, 1479, -1000, 35574, 42081, -1000, -212, -1000, 2054,
	-1000, -1000, 1378, -1000, 5684, 26908, 35574, -140, -1000, 35574,
	35574, 35574, 1664, -1000, 1668, -1000, 39552, -141, -1000, 267,
	1915, 15361, -1000, -1000, 243, 4963, 35574, -1000, 1362, 1441,
	600, 35574, -1000, 35574, -1000, 35574, 35574, 35574, -1000, 240,
	60, -143, 35574, 23917, -1000, -146, 35574, -1000, -1000, 23917,
	712, -1000, -1000, 1454, -1000, 4963, 239, 35574, 24910, 1967,
	-1000, 4963, 1177, 1352, 453, 24248, -1000, 723, -1000, -1000,
	-74, -1000, 287, 29, 838, -1000, -75, -1000, 462, 1759,
	-1000, 1755, 398, -1000, -1000, -77, 237, -1000, 460, 455,
	-1000, -1000, -1000, -1000, 1837, 15361, 15361, 42351, -148, -1000,
	2854, 2854, -1000, 39362, -1000, 42081, -1000, 41256, -1000, -1000,
	-1000, -1000, 957, -1000, 39240, -1000, -1000, -1000, -1000, 16051,
	1504, 236, 42720, 39050, -1000, -1000, 15361, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 528, 15361, 15361, 1400, 528, -151,
	481, -1000, -1000, -1000, 2030, -1000, -153, -1000, -1000, -1000,
	-1000, 35574, -1000, 35574, -1000, 6379, 35574, 1499, 1241, -1000,
	-1000, 1380, 235, 16051, 35574, -1000, 970, 4963, 1837, 60,
	6379, 1837, 38984, 6724, -160, -162, 1226, -1000, 1224, 15361,
	-1000, 42720, 1166, 1166, -1000, 627, 624, 15361, 623, -1000,
	-1000, 620, -1000, -93, 20874, 997, -163, 4963, -168, 123,
	29, -169, 35574, -1000, 453, 24248, -1000, 1692, 1738, 35574,
	1813, -1000, -1000, 228, 224, 223, -1000, 27239, 27239, 23917,
	23917, -1000, 2854, 2854, -1000, -1000, 119, 1084, 1935, -1000,
	38860, 16051, 42720, -170, -1000, 38794, -1000, 35574, 42081, -101,
	-1000, -1000, 26908, 334, -1000, -1000, 1270, -1000, -1000, 35574,
	1245, -1000, -1000, 15361, 38293, 220, 1451, 219, -1000, -1000,
	-1000, -1000, -1000, -1000, 1915, -51, -1000, 878, -1000, -1000,
	42081, 1871, -1000, -1000, 35574, 35574, -59, 218, 217, -1000,
	35574, 970, -171, -1000, 1451, -1000, 970, 214, 24248, -1000,
	1365, 708, -181, 35574, -1000, -1000, 7069, 23917, 23917, -1000,
	-182, -1000, -1000, -1000, 1136, 15361, 38860, -184, -1000, -1000,
	-100, -1000, 1966, -1000, -1000, -1000, -1000, 1660, 38672, 1314,
	35574, -1000, 35574, 1837, 116, 35574, 556, 6379, -1000, -1000,
	108, 15361, 15361, 212, 1451, 970, -1000, 1451, 4963, -1000,
	1352, 775, -1000, 530, -1000, -187, -189, -1000, 107, 15706,
	15706, -101, -1000, 35574, 211, 1643, -1000, 1135, 1033, 106,
	-190, -1000, -1000, 208, -1000, 15361, -1000, 2106, -192, -195,
	35574, -1000, 1451, -1000, -209, -1000, 19842, -1000, 518, 518,
	-1000, -1000, -1000, 16741, 1170, 826, 40688, -1000, -1000, -1000,
	35574, -1000, 1153, 1150, 830, -1000, -1000, -1000, -1000, -1000,
	1314, 42081, -1000, -1000, -210, -1000, 970, -179, -1000, -1000,
	1999, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1753, -1000,
	593, 1087, 1087, 1135, 1104, 1451, -1000, 15016, -1000, 2015,
	-1000, -1000, 1337, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2552, 2551, 1620, 2550, 2069, 2548, 2547, 2546, 2544,
	2066, 2543, 2540, 2539, 2538, 2537, 2536, 2535, 2530, 2529,
	2528, 2526, 2524, 2522, 2521, 2520, 2510, 2010, 2507, 1955,
	2504, 2503, 2499, 2495, 2493, 1946, 2487, 2486, 2485, 2483,
	1942, 2480, 1937, 2478, 2477, 1926, 2475, 2474, 2473, 1899,
	2469, 1882, 2464, 76, 106, 1874, 2458, 2456, 1824, 1806,
	1802, 2455, 1775, 2454, 2453, 1770, 1749, 2450, 68, 2449,
	2448, 2447, 1733, 1720, 2442, 2440, 2437, 142, 2435, 1718,
	2431, 2427, 2425, 2424, 2423, 2420, 2418, 2417, 2406, 2405,
	2397, 2396, 2380, 2373, 2365, 2364, 2363, 2362, 2356, 151,
	2354, 2353, 1701, 1688, 2352, 2351, 37, 29, 14, 47,
	30, 141, 2958, 133, 2342, 2341, 2334, 2333, 2332, 2323,
	17, 98, 96, 2314, 168, 2313, 2312, 32, 27, 20,
	15, 65, 92, 2310, 2309, 1376, 22, 2308, 2307, 127,
	2306, 84, 25, 2034, 149, 144, 112, 115, 2303, 2302,
	2301, 55, 114, 1, 2299, 2298, 11, 85, 35, 2290,
	34, 21, 2288, 2285, 125, 2284, 51, 97, 1551, 109,
	117, 16, 89, 2278, 66, 8, 53, 2277, 2276, 150,
	28, 2275, 40, 74, 132, 2274, 45, 152, 124, 75,
	121, 129, 2273, 2270, 2269, 100, 2266, 108, 81, 2265,
	2264, 77, 2263, 93, 131, 2262, 2261, 2258, 91, 2257,
	116, 2255, 2253, 153, 136, 107, 6, 43, 71, 13,
	1542, 1530, 128, 90, 56, 48, 2251, 1753, 834, 2108,
	73, 102, 78, 62, 101, 60, 94, 137, 41, 2249,
	2248, 130, 2244, 2243, 2234, 2233, 2232, 95, 2231, 2229,
	23, 2228, 79, 24, 50, 82, 31, 217, 118, 110,
	147, 99, 2227, 70, 122, 2226, 123, 2225, 2222, 1074,
	113, 2220, 2218, 2214, 877, 870, 402, 59, 2212, 2211,
	256, 227, 2210, 2209, 80, 2208, 111, 105, 103, 134,
	336, 44, 2202, 120, 36, 2197, 83, 33, 0, 2500,
	2457, 2196, 119, 63, 2192, 2182, 2181, 2179, 26, 2,
	9, 4, 7, 5, 39, 19, 2175, 2173, 126, 87,
	67, 2171, 148, 2166, 2165, 2164, 49, 2163, 12, 2162,
	10, 2161, 2160, 18, 3, 2155, 2154, 135, 2149, 86,
	2148, 1962, 2142, 143, 2138, 2134, 1957, 2128, 54, 104,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 6, 6, 6,
	6, 6, 6, 6, 8, 8, 10, 10, 9, 9,
	9, 11, 7, 7, 7, 7, 7, 13, 13, 14,
	23, 17, 25, 12, 20, 18, 16, 16, 22, 22,
	122, 122, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 119, 119, 124,
	124, 124, 126, 126, 123, 123, 118, 118, 27, 27,
	66, 66, 109, 59, 59, 59, 296, 296, 297, 297,
	105, 105, 106, 106, 106, 106, 107, 107, 108, 108,
	108, 33, 33, 33, 29, 29, 29, 29, 29, 30,
	30, 31, 31, 34, 34, 34, 34, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 42, 42,
	43, 43, 43, 43, 43, 43, 44, 44, 44, 44,
	45, 45, 45, 45, 45, 45, 45, 45, 50, 50,
	50, 48, 48, 48, 47, 47, 47, 46, 46, 46,
	49, 49, 49, 170, 170, 169, 169, 173, 173, 51,
	51, 51, 51, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 54, 54, 54, 54, 54,
	54, 54, 265, 265, 264, 52, 52, 239, 239, 55,
	55, 196, 196, 56, 56, 56, 56, 56, 57, 57,
	67, 67, 337, 337, 337, 341, 341, 342, 342, 343,
	343, 343, 343, 343, 343, 343, 339, 339, 62, 62,
	62, 62, 63, 63, 63, 64, 64, 104, 104, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 73, 73,
	73, 75, 72, 72, 72, 74, 74, 74, 74, 76,
	76, 77, 77, 77, 77, 77, 78, 78, 290, 288,
	288, 289, 289, 149, 149, 149, 149, 149, 150, 150,
	150, 295, 295, 295, 295, 295, 295, 294, 294, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 91, 91, 91, 99,
	99, 99, 99, 99, 99, 99, 80, 80, 85, 85,
	85, 85, 85, 81, 81, 86, 86, 87, 87, 88,
	88, 88, 88, 88, 88, 82, 82, 82, 82, 90,
	90, 90, 90, 89, 89, 95, 95, 95, 95, 95,
	95, 92, 92, 92, 92, 93, 93, 93, 96, 96,
	96, 96, 83, 83, 84, 84, 97, 97, 98, 98,
	98, 98, 98, 94, 94, 94, 338, 338, 340, 340,
	60, 60, 38, 38, 39, 39, 151, 151, 152, 152,
	218, 218, 218, 218, 153, 153, 125, 125, 125, 217,
	306, 306, 307, 307, 307, 307, 307, 307, 308, 308,
	308, 308, 308, 308, 308, 304, 304, 305, 302, 302,
	303, 303, 303, 303, 344, 344, 216, 216, 156, 156,
	311, 311, 311, 311, 309, 309, 309, 309, 309, 312,
	310, 313, 313, 313, 313, 313, 251, 251, 251, 101,
	101, 40, 40, 40, 131, 131, 41, 41, 37, 37,
	37, 200, 200, 160, 160, 256, 256, 256, 142, 142,
	120, 120, 120, 19, 21, 21, 15, 15, 15, 15,
	15, 15, 26, 26, 24, 24, 201, 201, 202, 202,
	61, 61, 65, 65, 70, 70, 100, 100, 100, 100,
	100, 100, 28, 28, 28, 28, 32, 32, 32, 32,
	69, 69, 346, 346, 138, 138, 138, 138, 139, 139,
	213, 213, 214, 214, 347, 347, 215, 215, 215, 133,
	132, 134, 134, 36, 36, 36, 127, 127, 128, 128,
	129, 129, 130, 130, 348, 348, 58, 58, 58, 103,
	103, 145, 145, 210, 210, 210, 212, 212, 211, 211,
	211, 186, 186, 186, 102, 102, 165, 165, 175, 175,
	176, 176, 262, 177, 177, 68, 68, 112, 112, 110,
	110, 110, 110, 110, 110, 111, 111, 111, 113, 113,
	113, 113, 113, 113, 113, 116, 116, 116, 117, 117,
	117, 115, 115, 319, 319, 319, 322, 322, 318, 320,
	320, 321, 321, 345, 345, 187, 187, 187, 155, 154,
	154, 158, 158, 157, 159, 159, 255, 255, 255, 184,
	184, 184, 184, 205, 205, 203, 203, 204, 204, 206,
	206, 207, 207, 207, 208, 208, 209, 209, 183, 183,
	235, 235, 114, 114, 114, 164, 164, 164, 166, 166,
	225, 225, 225, 226, 226, 224, 224, 224, 224, 257,
	257, 257, 257, 257, 257, 257, 257, 335, 335, 335,
	336, 336, 254, 254, 258, 258, 258, 258, 258, 258,
	252, 252, 252, 252, 253, 253, 263, 263, 190, 190,
	190, 190, 188, 188, 189, 189, 259, 259, 259, 259,
	185, 185, 260, 260, 260, 219, 219, 266, 266, 266,
	284, 284, 163, 163, 163, 267, 267, 267, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 267, 267,
	267, 267, 267, 267, 268, 268, 268, 268, 270, 270,
	270, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 283,
	283, 283, 283, 283, 271, 271, 278, 278, 279, 279,
	280, 281, 272, 272, 273, 273, 274, 275, 282, 282,
	282, 282, 286, 286, 276, 276, 276, 276, 276, 277,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 198, 198, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 229, 229,
	229, 229, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 314, 314, 314, 314, 314, 314, 314,
	314, 316, 316, 317, 317, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 323, 323, 324, 324, 326,
	326, 327, 327, 328, 329, 329, 329, 330, 331, 331,
	325, 325, 332, 332, 332, 333, 333, 334, 334, 334,
	334, 334, 241, 241, 242, 243, 249, 249, 249, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 140, 140, 140, 140, 140,
	172, 172, 171, 171, 238, 238, 236, 236, 240, 240,
	191, 191, 285, 285, 285, 285, 285, 285, 285, 192,
	192, 192, 199, 193, 193, 194, 194, 194, 194, 194,
	232, 233, 195, 195, 195, 234, 234, 244, 248, 248,
	247, 246, 246, 245, 245, 222, 222, 223, 223, 221,
	220, 180, 180, 179, 179, 178, 178, 349, 349, 250,
	250, 181, 181, 182, 174, 174, 261, 261, 261, 261,
	167, 167, 147, 147, 168, 168, 143, 143, 146, 146,
	144, 144, 144, 144, 161, 161, 162, 162, 141, 141,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 287, 287, 287, 237, 135, 135, 135, 136, 136,
	137, 137, 292, 292, 292, 293, 293, 293, 293, 291,
	291, 291, 291, 291, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 1, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 1,
	3, 1, 1, 1, 1, 1, 3, 4, 6, 6,
	6, 5, 5, 7, 7, 7, 4, 12, 4, 12,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 7, 2,
	6, 2, 1, 12, 12, 2, 1, 1, 1, 3,
	3, 0, 3, 1, 3, 1, 1, 3, 2, 5,
	0, 4, 6, 7, 1, 2, 1, 2, 2, 3,
	3, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 3, 1, 2, 7, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	3, 5, 3, 1, 3, 1, 2, 2, 3, 2,
	2, 5, 3, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 3, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 4, 3, 5, 3, 4,
	5, 2, 3, 3, 3, 4, 2, 3, 4, 3,
	3, 3, 4, 4, 4, 4, 2, 3, 7, 7,
	7, 4, 5, 5, 5, 5, 2, 0, 2, 0,
	3, 2, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	2, 4, 7, 3, 3, 0, 6, 3, 11, 14,
	4, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 8, 10,
	8, 10, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 3, 6,
	3, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 2, 0, 8, 3, 2, 0, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 2, 3, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 6, 3, 3, 1, 5, 5, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	1, 1, 2, 3, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 3, 1, 1, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 3, 3, 1,
	3, 3, 1, 3, 3, 1, 1, 3, 3, 1,
	1, 6, 6, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 5, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 3, 1, 3, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 374, -4, -27, -29, -33, -34,
	-56, -42, -43, -44, -55, -51, -57, -58, -59, -60,
	-52, -66, -65, -67, -70, -68, -61, -62, -71, -79,
	-100, -101, -102, -103, -5, -10, 23, 34, -30, -31,
	47, 71, -40, -35, 73, 94, -321, 98, -45, -49,
	102, 109, 112, 134, 145, 226, 232, 253, 255, 257,
	264, -110, -112, 251, -63, -64, -72, -73, -74, -75,
	-104, 275, -80, -81, -82, -83, -84, -85, -86, -87,
	-88, -89, -90, -91, -92, -93, -94, -95, -96, -97,
	-98, 278, -28, -32, -69, 316, -6, -7, -8, -9,
	-11, -21, -36, -37, -38, -39, -41, -319, -46, -47,
	-48, -50, -113, -111, 371, 252, 325, 111, 35, 287,
	61, 105, 259, -13, -14, -17, -16, -18, -15, -23,
	-25, -22, -24, -26, -19, -20, -12, 341, 348, -116,
	-114, -115, -117, 268, 333, 297, 375, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 2, 297, 336,
	326, 87, 153, 237, -337, 2, -168, 297, 87, -144,
	-135, 364, 4, -298, -300, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 67,
	64, 65, 66, 69, 71, 72, 75, 76, 77, 85,
	86, 88, 90, 94, 96, 98, 101, 102, 104, 109,
	111, 110, 112, 122, 123, 128, 130, 135, 141, 142,
	145, 146, 154, 157, 159, 152, 169, 170, 171, 173,
	174, 175, 178, 177, 182, 185, 188, 190, 191, 192,
	195, 193, 197, 198, 200, 199, 205, 207, 208, 210,
	213, 216, 219, 222, 223, 224, 225, 226, 228, 230,
	232, 234, 235, 236, 237, 238, 240, 241, 243, 244,
	245, 246, 247, 251, 249, 250, 252, 253, 254, 255,
	257, 259, 260, 262, 276, 277, 288, 264, 265, 266,
	267, 271, 269, 272, 273, 275, 278, 280, 283, 286,
	287, 289, 292, 293, 290, 285, 296, 298, 299, 300,
	301, 302, 303, 304, 311, 312, 316, 317, 318, 319,
	322, 323, 324, 325, 327, 330, 331, 332, 337, 342,
	343, 344, 345, 346, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 51, 52, 53, 56, 89, 91, 92,
	108, 113, 114, 124, 125, 126, 136, 138, 147, 148,
	151, 158, 160, 161, 162, 163, 164, 166, 180, 194,
	204, 206, 217, 221, 229, 231, 239, 261, 270, 281,
	282, 291, 294, 306, 307, 308, 313, 314, 329, 333,
	334, 374, 374, 2, 170, 236, -143, -135, 87, 374,
	2, 297, 326, 336, -200, 87, 321, -135, 232, 22,
	2, 96, 157, 324, 323, 22, 228, 269, 299, 301,
	2, 374, 2, 336, 297, 153, 87, 326, -135, 2,
	-54, 2, 371, -53, -5, -35, -45, -55, -51, -10,
	-27, -29, -40, -42, -49, -59, -58, -60, -62, -66,
	-65, -68, -72, -73, -79, -102, -103, 73, 23, 102,
	275, -341, 2, 22, -342, -343, 73, 102, 134, 268,
	157, 96, 323, 297, 2, 170, 2, -135, 2, -337,
	2, 170, 2, -341, 2, -135, 2, -139, 2, 264,
	-135, 374, 374, 374, 374, 374, 185, 55, 261, 272,
	-77, 312, -76, 306, -290, -78, 2, -169, 195, -135,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 2, -99, 272,
	34, 55, 22, 60, 88, 135, 153, 154, 174, 68,
	69, 235, 185, 171, 311, 175, 273, 298, 312, 73,
	327, 302, 110, 4, 87, 195, 274, 306, 374, 374,
	374, -345, 2, 297, 374, 374, 374, 374, 374, 374,
	374, 374, 374, -111, -113, -112, 374, 374, 374, 374,
	-157, -158, 320, 165, 107, 215, -110, -112, 2, -319,
	-99, 272, 2, 55, 22, -288, 2, -250, 211, -227,
	93, -229, 362, 363, 357, 201, 347, -241, -231, -244,
	108, 261, 371, -143, -230, 377, 9, -316, -112, 29,
	-242, -243, 49, -135, 7, 8, 5, 6, -141, -268,
	-237, -277, 315, 115, 203, -314, -315, 4, -298, -292,
	-269, -279, -273, -276, 166, 58, 79, 80, 83, 81,
	84, 274, 326, 50, 28, 113, 114, 221, 229, 294,
	313, 314, 147, 204, 148, 56, 136, 180, 101, 37,
	39, 41, 42, 51, 52, 89, 91, 92, 124, 125,
	126, 158, 160, 161, 162, 163, 164, 206, 239, 281,
	291, 307, 308, 334, -299, -280, -281, -274, -275, 74,
	116, 133, 156, 149, 168, 172, 181, 183, 196, 218,
	220, 258, 279, -282, 278, -346, 2, 312, 312, 2,
	-346, 2, -346, 2, -138, 2, 312, 309, -322, 240,
	-318, -135, -322, 374, 374, 376, 374, -154, -155, 2,
	22, 99, -182, 2, 371, -257, 2, 369, -259, -143,
	-112, -258, 371, 212, -3, 2, -259, 147, -143, 2,
	-259, 147, -143, 2, -296, 147, -294, 9, -293, 5,
	4, -298, -300, -299, 58, 2, -135, 2, -146, 147,
	-143, -291, 4, -298, -300, -299, -301, 22, 24, 25,
	26, 27, 29, 30, 31, 32, 43, 49, 50, 54,
	57, 59, 68, 73, 78, 79, 81, 80, 82, 83,
	84, 93, 95, 97, 99, 100, 103, 105, 107, 115,
	117, 129, 131, 132, 134, 137, 139, 150, 153, 155,
	165, 167, 176, 179, 184, 186, 187, 201, 202, 203,
	209, 211, 212, 214, 215, 227, 233, 242, 256, 268,
	274, 284, 295, 297, 305, 309, 310, 315, 320, 321,
	326, 328, 335, 336, 338, 339, 340, 341, 309, 376,
	-168, -161, -135, -221, -220, 373, -227, 2, -227, 2,
	132, 371, -179, -180, -220, -221, 2, -169, 147, -296,
	147, 2, -169, 2, 153, -135, 147, 2, -135, 22,
	132, 2, 167, 2, 167, 2, -260, 2, -259, -170,
	147, 2, -169, -170, 147, 2, -147, 147, 2, -146,
	-135, 147, 2, -297, 147, 2, -296, -196, 371, -265,
	2, -264, -293, 333, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 272,
	211, 376, -169, -227, -239, 371, 132, -227, 211, -135,
	2, 276, 2, 371, -77, 53, 312, -214, 2, -215,
	-132, -133, -134, 169, 234, 238, 346, 309, 352, 132,
	-288, -173, 373, -99, 2, -296, 2, 276, 2, 235,
	273, 55, 132, 2, 2, -338, 2, 211, 132, 2,
	132, 2, 132, 2, 132, 2, 132, 2, 2, 235,
	273, 2, 129, 2, 311, 2, 2, 132, 2, 169,
	234, 288, 2, 297, 336, 2, 132, 132, 346, 2,
	-185, -259, -157, -158, -184, -203, -204, 184, 117, 209,
	-187, 22, 99, -187, -187, 44, 372, 372, -99, 276,
	2, 10, 11, 57, 33, 362, 363, 364, 365, 127,
	366, 367, 360, 361, 359, 350, 351, 354, 355, 356,
	70, 353, 352, 63, 189, 263, 118, 119, 120, 121,
	248, 13, 14, 15, 26, 214, 183, 347, 149, 279,
	357, 16, 17, 18, 168, 36, 150, -140, -148, -227,
	-227, -227, -227, -227, 220, -178, -222, 369, -112, 371,
	371, -112, -227, -171, 371, 7, -112, -236, 369, -245,
	-227, -179, 371, 5, 371, 5, -323, 342, 129, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 231, -286,
	337, -286, -286, -270, 371, -270, -271, 371, -270, 343,
	348, 371, 346, 22, -213, -214, -213, 309, -139, 376,
	-322, -162, 371, -182, -174, -261, -227, 364, -174, -181,
	-250, 74, -190, 172, 196, 133, 181, 258, 156, 7,
	-54, -224, 377, 371, 364, -254, 348, -112, -258, 371,
	-257, -143, 371, -122, 249, -121, 21, 23, 102, 331,
	108, 285, 303, 111, 265, 249, 108, 341, 108, 111,
	249, 285, 303, 265, 249, 108, 377, 111, -296, -144,
	376, -291, 364, 289, 372, -167, -143, -180, 371, -156,
	201, -131, -320, 341, 201, -156, 371, -136, 147, 2,
	-135, -320, 201, -260, -145, -143, -145, 275, -135, 30,
	-124, 376, 48, 254, 108, -124, 108, -124, 376, 108,
	-124, 108, 376, 108, -171, -227, 372, 376, -337, -343,
	73, 371, 30, -238, -266, -267, -269, -278, -272, -276,
	-277, 40, 46, 45, 304, 194, 270, 282, 329, 151,
	38, 210, 159, 4, 158, 160, 161, 162, 163, 164,
	281, 37, 239, 125, 126, 124, 101, 92, 91, 206,
	42, 41, -280, -281, -274, -275, 89, 307, 308, 166,
	39, 52, 51, 334, 291, -297, -337, -290, -171, 30,
	-214, 2, -347, 376, 182, -150, 188, 200, 141, 212,
	344, -295, 5, 4, -237, -251, 93, 185, -277, 8,
	363, -287, 7, 362, -289, -288, -289, 77, 373, -291,
	-169, 22, 277, 2, -290, -340, 129, -337, -290, -290,
	-290, -290, -290, 272, -54, 129, -135, 182, -290, 2,
	-290, 2, 297, 153, 297, -124, 376, -184, -204, -203,
	-206, -227, 22, -209, 123, 197, -227, -229, -111, -111,
	-111, -159, -255, -227, 233, 153, -290, -284, -266, -283,
	244, 245, 243, 247, 246, -266, -291, 306, -227, -227,
	-227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
	-227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
	-227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
	183, 149, 279, 36, 150, -227, 309, -227, -227, -227,
	-227, 193, 201, 203, 315, 115, 322, 99, 207, -349,
	295, 32, -234, -112, 371, -249, 27, 284, 22, -241,
	261, 371, -222, -227, -223, -172, -171, 372, 376, -172,
	-240, -236, -248, -247, 338, 372, -171, 335, 22, 99,
	364, 2, 7, -197, 345, 192, 90, 142, 191, -198,
	267, -324, 122, 137, 371, 372, 2, 372, 2, 372,
	2, 372, 2, -227, -227, -191, 2, -285, -171, 4,
	345, 192, 90, 142, 191, 267, -191, 2, -192, 2,
	-227, -171, -193, -228, -229, 362, 363, 357, 371, 261,
	-194, 2, -227, -172, -227, 43, 179, 310, -195, -227,
	132, -171, -227, -227, -227, -171, -171, 2, -171, 2,
	371, 7, 7, 306, 306, 7, 64, 65, 346, -139,
	-318, 30, -161, -164, 376, 132, 30, 4, -164, 376,
	372, 172, 172, -257, -190, 172, -188, 218, -188, -188,
	-335, 371, 370, -254, -291, 369, 378, -172, 2, -253,
	-252, 30, -135, 216, 372, -143, 376, 309, -201, 68,
	59, -217, 147, 59, -302, -135, 68, -303, 54, 321,
	233, 131, -201, 68, -201, 68, 68, -259, 33, -68,
	66, 132, 309, -259, 225, -296, 66, 309, 33, -68,
	132, 309, -146, -291, 66, -263, 349, -135, 132, 372,
	376, -151, -161, -152, -135, -218, -217, -304, -305, -302,
	153, 321, 116, 30, 108, 225, 108, 30, 211, 201,
	-127, 300, 108, -219, 339, -210, -68, 371, 93, 30,
	-210, -175, -176, -262, -177, -143, 371, -135, -169, -170,
	-170, -146, -147, -135, -296, -297, 372, 376, -54, -264,
	309, 328, -152, -53, 23, 73, 102, 372, 376, -163,
	29, 369, -197, 371, -263, 132, 352, 309, 372, 312,
	-215, -149, 238, 283, 250, 271, 8, 7, 7, 376,
	-291, -339, -135, 272, -54, -143, -146, -143, -259, -207,
	-287, 371, 363, -208, 261, 262, 376, -120, 31, 97,
	173, -143, 346, -227, -227, 309, -349, 295, -234, -227,
	193, 203, 315, 115, 322, 99, 207, 132, 371, -228,
	-228, -171, -231, 371, -171, 370, 380, 372, -227, 370,
	370, 376, -246, -247, 103, -227, -158, 376, -157, -227,
	-171, -171, 372, 372, 309, 309, 309, 309, 371, -329,
	219, 371, 371, -227, 30, 376, 372, 132, 372, 372,
	-199, 227, 372, 10, 11, 362, 363, 364, 365, 127,
	366, 367, 360, 361, 359, 350, 351, 352, 63, 189,
	263, 13, 14, 15, 168, 150, -228, -228, -228, -171,
	371, 372, -232, -233, 132, 129, 30, -195, -195, -195,
	372, 132, -171, 376, 376, 376, 372, 372, 372, 7,
	372, 376, 372, 346, 346, 372, 129, 65, 371, 372,
	-219, -261, -166, 2, -257, -291, -219, -250, -257, -257,
	-189, 328, 211, 172, -257, -252, 372, -336, 7, -254,
	-253, 7, -226, -225, 130, 199, 372, -135, 371, -254,
	372, -121, -143, -135, -135, 201, -217, 147, -126, 201,
	-266, -135, 371, 371, 173, 173, -135, -135, 147, -135,
	147, -135, -135, -122, 249, -68, 346, 371, -143, 249,
	-296, 341, 346, -135, -68, 371, -135, 249, 346, -105,
	146, 207, 289, 132, -143, 372, 372, 376, -136, 153,
	-136, -68, -169, -296, -296, -68, -143, 108, -128, 104,
	-348, 352, -135, -205, -203, -227, -186, -212, 256, 211,
	-167, 333, -135, -186, -165, 376, 132, 352, -167, -124,
	-124, -124, -124, -227, -339, -296, 372, -266, 369, 370,
	7, 7, -108, 341, -339, -288, -288, -132, 319, 62,
	238, -288, 376, -208, -227, -255, -143, 377, -227, -227,
	-228, -228, 132, 371, -227, -238, 26, 26, 372, -172,
	376, -223, -227, 372, -236, 105, -227, 305, 372, 335,
	-158, -158, -158, 5, 192, 142, 191, -198, 191, -198,
	-198, 7, -330, -135, 371, 339, -157, 372, -284, -266,
	-227, -232, -227, -284, -266, -228, -228, -228, -228, -228,
	-228, -228, -228, -228, -228, -228, -228, -228, -228, -228,
	-228, -228, -228, -228, 99, 201, 207, -228, 376, -172,
	-233, -232, -227, -227, -266, 372, 372, 372, -171, -227,
	-227, -227, 372, 7, 237, 87, 297, -53, -183, 137,
	-263, 376, -183, -189, 371, -227, -257, 370, 372, 376,
	-253, 370, 376, 379, 352, -254, 371, -161, -252, 309,
	309, 108, 201, 330, -306, -303, -227, -160, -256, -135,
	-317, 371, -314, -315, -141, 371, 371, -119, 102, 275,
	-202, 108, -124, 108, -124, 309, -201, 68, -230, -141,
	-135, -171, 309, 225, -230, -171, 309, -230, -108, 132,
	296, 289, -153, 152, -218, 371, -136, 371, 371, -156,
	-131, 371, -135, -129, 178, -348, -294, -320, -186, -186,
	-174, 202, 67, 372, -219, -176, -166, -250, 372, -109,
	75, -109, 7, 370, 372, -107, 213, -106, -135, 5,
	-135, 212, 372, -120, -291, 26, 26, -227, -238, 372,
	-227, -227, 372, -227, 370, -227, 5, -227, 372, 372,
	372, 372, -331, -135, -227, 372, 372, 372, -233, 132,
	99, 207, 371, -227, 372, 372, 376, 372, 372, 372,
	-291, -135, -143, 372, -235, 139, 44, -257, -235, -161,
	-224, 7, -225, -291, 369, -253, -161, 372, -135, -135,
	-217, 108, -307, 68, -308, 57, 116, 73, 201, 203,
	321, 233, 54, 93, 242, 372, 372, 376, -142, -179,
	57, -142, -227, 371, -160, -161, 201, 93, 201, 93,
	86, 317, -135, -135, -143, -135, -135, 371, 372, -143,
	-296, 372, -135, -297, 306, 150, -160, 371, -161, -151,
	30, -160, 211, -130, 177, -348, -294, -127, -211, 371,
	211, -68, -186, 352, 86, 86, 370, 376, 371, 352,
	352, -120, -227, -227, 372, 372, -158, -325, 224, 372,
	-228, 132, 371, -238, 372, -227, -326, 340, -227, -171,
	-326, 372, -254, 7, 372, -217, -135, -291, -135, 116,
	147, 203, 173, 371, -228, -143, -216, -344, 72, 293,
	-256, -120, -291, -120, 372, -171, 372, 372, 203, 203,
	-227, -266, -124, -124, 309, 309, -171, 309, 309, -230,
	222, 372, -160, 372, 372, -68, 372, -143, -348, -294,
	-128, 100, -161, 68, -182, -112, 371, 371, 371, -106,
	-107, -296, -296, 372, -158, 44, -228, -238, 372, 372,
	-327, -328, -135, -253, 370, -308, -136, 201, -227, -137,
	371, -153, 371, -142, -158, 242, -123, 57, -135, -135,
	-158, 371, 371, -143, -216, 372, -153, -216, 371, -294,
	-129, 323, 202, 372, -135, -297, -297, 372, -332, 237,
	262, -171, 372, 376, 30, 108, 372, -311, 190, -135,
	-161, -120, 372, -143, -118, 328, -291, 372, -171, -171,
	371, -153, -216, -153, -160, -130, 275, -219, 372, 372,
	372, -333, -334, 36, 318, 77, -227, -333, -328, -330,
	116, -309, -312, -310, 211, 133, 223, 280, 372, 372,
	-156, -227, 372, 372, -161, -153, 372, -175, -108, -108,
	-334, 230, 128, 261, 230, 128, -135, -310, 211, -312,
	211, 323, 96, -311, 372, -216, -219, 26, -313, 198,
	254, 48, 275, -313, -309, -125, 48, 254, -153, -334,
	20, 203, 93,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 55, 0, 0, 154, 156,
	0, 0, 163, 165, -2, 0, 0, 0, 186, 187,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 665, -2, 0, 298, 300, 309, 311, 313, 315,
	316, 0, 359, 361, 363, 365, 367, 369, 371, 373,
	375, 377, 379, 381, 383, 385, 387, 388, 390, 392,
	394, 0, 586, 588, 590, -2, 58, 60, 62, 64,
	66, 76, 167, 169, 171, 173, 176, 701, 190, 192,
	194, 196, -2, 712, 0, 0, 0, 0, -2, 0,
	-2, -2, -2, 67, 68, 69, 70, 71, 72, 82,
	83, 84, 85, 74, 78, 79, 81, 0, 0, 678,
	680, 682, 684, -2, 0, 0, -2, 7, 12, 14,
	16, 19, 21, 23, 25, 27, 29, 31, 33, 35,
	37, 39, 42, 48, 50, 52, 56, 57, 0, 0,
	0, 0, 0, 0, 0, 129, 282, 0, 1280, 1204,
	1210, 1211, 1235, 1236, 1237, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
	1279, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
	1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
	1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
	1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339,
	1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349,
	1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
	1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
	1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
	1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
	1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
	1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
	1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
	1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
	1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
	1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 155, 157, 158, 0, 0, 0, 1206, 1280, 164,
	166, 0, 0, 0, 0, 0, 551, 273, 1340, 275,
	277, 0, 0, 0, 0, 180, 181, 182, 183, 184,
	185, 188, 189, 0, 0, 0, 0, 0, 272, 270,
	219, 220, 0, 255, 256, 257, 258, 259, 261, 223,
	225, 227, 228, 230, 232, 234, 236, 238, 240, 241,
	243, 245, 246, 248, 250, 251, 253, 552, 0, 0,
	0, 0, 279, 285, 286, 287, 289, 290, 291, 292,
	293, 294, 295, 0, 135, 0, 471, 268, 266, 0,
	131, 0, 583, 0, 281, 584, 585, 580, 581, 1367,
	609, 299, 301, 310, 312, 314, -2, -2, 1457, -2,
	323, -2, 331, 1463, 0, 334, 335, 338, -2, 215,
	360, 362, 364, 366, 368, 370, 372, 374, 376, 378,
	380, 382, 384, 386, 389, 391, 393, 395, 396, 0,
	0, 0, 400, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, 0, -2, -2, 0, 0,
	-2, 0, 0, 399, 401, 402, 403, 0, 587, 589,
	591, 0, 540, 703, 59, 61, 63, 65, 168, 170,
	172, 174, 177, -2, 676, 677, 191, 193, 195, 197,
	-2, 0, 707, 707, 707, 0, 0, 677, 675, 0,
	302, 0, 304, 0, 400, 307, 308, 339, 340, 1189,
	1190, 906, 0, 0, 0, 0, 0, 0, 1008, 1010,
	1430, 1457, 0, 1012, 1013, 0, 1015, 1017, 1018, 0,
	1021, 1022, 1174, 1206, 1220, 1221, 1222, 1223, 0, 0,
	1226, 0, 1228, 1229, 1230, 1076, 1032, -2, -2, 1218,
	834, 835, 836, 837, -2, 1471, 1036, 1039, 1042, 1045,
	1046, 1049, 1050, 0, 1414, 1431, 1432, 1453, 1454, 1462,
	1466, 1467, 1438, 1450, 1439, 1426, 1436, 1448, 1286, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1244, 868, 869, 874, 875, 1472,
	1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
	1483, 1484, 1485, 877, 0, 611, 593, 602, 611, 595,
	596, 597, 598, 599, 600, 601, 604, 0, 693, 1346,
	696, 1217, 694, 679, 681, 0, 683, 0, 0, 687,
	709, 708, 742, 743, 0, 691, 692, 702, 758, 796,
	773, 764, 0, 0, 2, 73, 0, 1438, 796, 75,
	0, 1438, 796, 77, 0, 1438, 136, 137, 357, 358,
	1245, 1246, 1247, 1248, 1471, 80, 0, 86, 0, 1438,
	1209, 0, 1249, 1250, 1251, 1252, 1253, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498,
	1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
	1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
	1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
	1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
	1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
	1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 0, 0,
	283, 284, 1214, 1212, 1213, 0, 159, 160, 161, 162,
	0, 0, 1207, 1183, 1181, 1182, 175, 519, 1438, -2,
	1438, 543, 519, 547, -2, 700, 1438, 625, 274, 276,
	0, 179, 0, 638, 0, 640, 0, 655, 802, 121,
	1438, 200, 213, 121, 1438, 203, 121, 1438, 206, 1202,
	121, 1438, 209, 210, 1438, 212, 138, 269, 0, 0,
	-2, 262, 264, -2, 260, 224, 226, 229, 231, 233,
	235, 237, 239, 242, 244, 247, 249, 252, 254, -2,
	0, 0, 0, 470, 0, 0, 0, 582, 0, 608,
	317, 0, 320, 0, 322, 1425, -2, -2, 326, 612,
	616, 617, 618, 0, 0, 0, 0, 0, 0, 0,
	336, 216, 0, 397, 398, 406, 407, 0, 410, 431,
	443, 0, 0, 414, 416, 469, 418, 0, 0, 420,
	0, 422, 0, 424, 0, 426, 0, 428, 430, 432,
	444, 434, 702, 436, 0, 438, 442, 0, 447, 0,
	449, 450, 451, 0, 0, 457, 0, 0, 404, 405,
	121, 800, -2, 0, 671, 721, 722, 0, 0, 0,
	0, 705, 706, 0, 0, 0, 667, 668, 303, 0,
	306, 0, 0, 0, 0, 1109, 1110, 1111, 1112, 1113,
	1114, 1117, 1118, 1115, 1116, 1119, 1120, 0, 0, 0,
	0, 0, 1121, 0, 0, 0, 0, 0, 0, 0,
	0, 1122, 1123, 1124, 0, 0, 1126, 0, 1128, 0,
	0, 0, 0, 0, 0, 1188, 0, 0, 1125, 911,
	912, 913, 945, 946, 0, 1009, 1185, 1178, 1011, 0,
	1131, -2, 1132, 0, 0, 1014, 1019, 1020, 1131, 0,
	1173, -2, 0, 1225, 0, 903, 1078, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1154, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 853, 871,
	882, 879, 878, 855, 0, 854, 852, 0, 856, 0,
	0, 0, 0, 0, 592, -2, 594, 0, 606, 0,
	695, 0, 0, 744, 747, 1194, 1198, 1199, 747, 0,
	1191, 0, 0, 0, 0, 793, 793, 793, 791, 767,
	0, 773, 0, -2, 797, 785, 0, -2, 764, 0,
	0, 798, 0, 87, 577, 100, 0, 577, 577, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 787, 1205,
	0, 1179, 1180, 151, 0, 0, 1200, 1184, 477, 0,
	0, 541, 0, 699, 0, 0, 0, 0, 1438, 550,
	1238, 627, 0, 806, 0, 641, 0, 0, 803, 0,
	198, 0, 119, 120, 0, 201, 0, 204, 0, 0,
	207, 0, 0, 0, 0, 1132, 702, 0, 0, 288,
	0, 0, 702, 0, 1134, 814, 815, 816, 817, 818,
	903, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 865, 0, 840, 840, 840,
	857, 858, 866, 867, 872, 873, 884, 885, 887, 889,
	883, 883, 883, 880, 881, 787, 0, 0, 0, 0,
	-2, 328, 0, 614, 0, 619, 348, 349, 350, 621,
	622, 332, 351, 352, 353, 354, 355, 356, 0, 536,
	0, 538, 1231, 0, 329, 341, 330, 333, 0, 217,
	408, 409, 411, 412, 413, 417, 0, 466, 419, 421,
	423, 425, 427, 435, 439, 702, 445, 448, 452, 453,
	454, 455, 0, 0, 0, 539, 0, 674, 719, 720,
	725, 729, 730, 733, 736, 737, 727, 906, 688, 689,
	690, 713, 714, 562, 0, 0, 305, 907, 810, 811,
	859, 860, 861, 862, 863, 908, 909, 0, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, -2, -2,
	-2, -2, -2, -2, -2, -2, 932, 933, 934, 935,
	936, 937, 938, 939, -2, -2, -2, 943, 944, -2,
	1127, 1129, 0, 1188, 0, -2, 0, -2, -2, -2,
	-2, 957, 0, 959, 962, 964, 966, 0, 0, 0,
	0, 1187, 976, 1165, 0, 0, 1106, 1107, 1108, 961,
	0, 0, 1186, 1177, 0, 0, 1130, 1016, 0, 0,
	0, 1138, 1172, 1168, 0, 1023, 712, 0, 0, 0,
	0, 1030, 0, 1234, 890, 891, 892, 893, 894, 895,
	904, 1086, 0, 0, 0, 1037, 1038, 1040, 1041, 1043,
	1044, 1047, 1048, 0, 0, 0, 1054, 0, 1141, -2,
	-2, -2, -2, -2, -2, -2, 0, 1056, 0, 1058,
	1132, 1151, 0, 0, 979, 0, 0, 0, 0, 1457,
	0, 1061, 1132, 1159, 0, 0, 0, 0, 0, 1132,
	0, 1164, 0, 0, 0, 0, 0, 1072, 0, 1074,
	0, 0, 0, 0, 0, 0, 0, 461, 0, 605,
	697, 0, 0, 806, 0, 0, 0, 1197, 806, 0,
	1193, 0, 0, 0, 0, 0, 788, 792, 789, 790,
	0, 0, 773, 785, 755, 0, 0, 0, 762, 763,
	784, 0, 783, 772, -2, 0, 0, 0, 0, 0,
	576, 102, 1438, 0, 123, 0, 0, 509, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 1208, 0, 141, 0, 1215, 0, 0,
	0, 0, 0, 476, 1214, 478, 480, 481, 482, 483,
	1239, 0, 1239, 0, 0, 0, 0, 0, 0, 0,
	629, 635, 0, 724, 0, 653, 643, 0, 0, 0,
	653, 657, 658, 660, 661, 0, 0, 804, 214, 121,
	121, 1203, 121, 121, 139, 211, 271, 0, 221, 263,
	0, 0, 0, 265, 0, 0, 0, 267, 0, 807,
	809, 0, 819, 0, 150, 0, 0, 0, 321, 0,
	613, 620, 0, 345, 0, 347, 537, 1233, 1232, 0,
	218, 468, 296, 437, 440, 463, 464, 465, 801, 0,
	731, 0, 0, 728, 734, 735, 0, 716, 560, 561,
	0, 0, 0, -2, -2, 0, 0, 0, 977, -2,
	958, 960, 963, 965, 967, 0, 0, 0, 0, 0,
	0, 0, 978, 1131, 0, 1175, 1178, -2, 1133, 1136,
	1137, 0, 0, 1169, 0, 0, 0, 0, 711, 712,
	712, 712, 1029, 0, 0, 0, 0, 0, 0, 1031,
	0, 0, 0, 0, 0, 0, 1053, 0, 1055, 1057,
	0, 0, 1059, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 982, 983, 984, 0,
	1131, 1060, 1157, 1158, 0, 0, 0, 0, 0, 0,
	1066, 0, 1163, 0, 0, 0, 1070, 1071, 1073, 0,
	838, 0, 864, 886, 888, 876, 0, 462, 702, 1216,
	739, 1195, 787, 746, 748, 1196, 739, 1192, 775, 0,
	777, 0, 0, 0, 779, 0, 768, 0, 770, 785,
	760, 0, 0, 753, 0, 752, 773, 781, 0, 0,
	799, 101, 566, 0, 0, 0, 104, 1438, 112, 0,
	491, 0, 0, 0, 0, 0, 579, 113, 1438, 121,
	1438, 121, 114, 88, 577, 89, 0, 0, 572, 0,
	564, 0, 0, 563, 90, 0, 574, 0, 0, 150,
	0, 0, 152, 0, 1201, 485, 518, 0, 0, 1239,
	0, 474, 519, 544, -2, 546, 0, 0, 631, 635,
	0, 634, 700, 653, 723, 805, 636, 653, 0, 0,
	0, 645, 642, 639, 806, 0, 0, 0, 0, 199,
	202, 205, 208, 1133, 278, 0, 0, 1135, 0, 812,
	0, 0, 130, 0, 280, 318, 319, 324, 343, 344,
	346, 342, 0, 0, 0, 715, 562, 0, 910, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 1166, 0,
	0, 0, 1177, -2, 1139, 1167, 1171, 0, 1024, 0,
	0, 0, 0, 1227, 896, 897, 898, 899, 900, 901,
	902, 0, 1084, 1085, 1089, 0, 0, 1035, 0, 0,
	1140, 1150, 1152, 980, 981, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, -2, -2, -2, 998, 999,
	1000, -2, -2, -2, 0, 0, 0, 1153, 0, 0,
	1155, 1156, 1160, 1161, 0, 1063, 1064, 1065, 1162, 0,
	0, 0, 870, 0, 0, 0, 0, 0, 741, 0,
	745, 0, 741, 776, 0, 795, 778, 758, 769, 0,
	766, 756, 0, 757, 0, 785, 0, 0, 765, 0,
	0, 0, 0, 122, 489, 508, 0, 0, 553, 559,
	559, 0, 1033, 1034, 0, 0, 0, 106, 0, 0,
	0, 0, 110, 0, 116, 0, 0, 0, 95, 0,
	0, 0, 0, 0, 94, 0, 0, 93, 128, 0,
	0, 153, 472, 0, 479, 0, 0, 0, 477, 0,
	542, 0, 0, 633, 635, 0, 626, 627, 178, 637,
	651, 652, 650, 0, 653, 659, 656, 662, 0, 0,
	132, 0, 0, 813, 820, 148, 1330, 146, 143, 145,
	297, 726, 732, 717, 562, 0, 0, -2, 0, 970,
	-2, -2, 1102, 1133, 1176, 1170, 1224, 712, 1025, 1027,
	1028, 905, 1091, 1088, 0, 1075, 1051, 1052, 1149, 0,
	0, 0, 0, 1133, 1104, 1062, 0, 1068, 1069, 839,
	458, 459, 460, 698, 1080, 0, 0, 749, 1080, 0,
	773, 771, 754, 750, 0, 761, 0, 782, 568, 570,
	103, 0, 490, 0, 493, 0, 0, 0, 0, 499,
	500, 0, 0, 0, 0, 510, 517, 0, 562, 1219,
	0, 562, 0, 0, 0, 0, 0, 118, 0, 0,
	578, 0, 121, 121, 567, 0, 0, 0, 0, 573,
	565, 0, 575, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 623, 635, 0, 628, 629, 0, 0,
	0, 644, 654, 0, 0, 0, 808, 0, 0, 0,
	0, 718, -2, -2, 971, 1103, 0, 712, 0, 1077,
	-2, 0, 0, 0, 1105, 0, 685, 0, 740, 738,
	686, 794, 785, 0, 780, 105, 0, 494, 495, 1239,
	0, 498, 501, 0, 503, 1241, 485, 0, 514, 515,
	554, 555, 558, 556, 559, 712, 512, 0, 107, 108,
	117, 125, 109, 115, 0, 0, 712, 0, 0, 786,
	0, 517, 0, 507, 485, 475, 517, 0, 0, 630,
	631, 0, 0, 0, 663, 664, 0, 0, 0, 147,
	0, 142, 144, 1026, 1094, 0, -2, 0, 1006, 1067,
	1079, 1081, 0, 759, 751, 492, 496, 0, 0, 523,
	0, 511, 0, 562, 0, 0, 127, 0, 569, 571,
	0, 0, 0, 0, 485, 517, 473, 485, 0, 632,
	633, 0, 647, 806, 649, 0, 0, 149, 0, 0,
	0, 1090, 1007, 0, 0, 0, 502, 528, 0, 0,
	0, 557, 1024, 519, 111, 0, 124, 0, 0, 0,
	0, 505, 485, 548, 0, 624, 0, 648, 150, 150,
	1087, 1092, 1095, -2, 1398, 1277, 0, 1093, 1082, 1083,
	0, 504, 524, 525, 0, 520, 521, 522, 1240, 516,
	523, 126, 97, 99, 0, 506, 517, 806, 133, 134,
	0, 1097, 1098, 1099, 1100, 1101, 497, 526, 0, 527,
	0, 0, 0, 528, 488, 485, 646, 0, 529, 0,
	532, 533, 0, 530, 513, 484, 486, 487, 549, 1096,
	531, 534, 535,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 360, 3, 366, 361, 3,
	371, 372, 364, 362, 376, 363, 373, 365, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 380, 375,
	350, 352, 351, 354, 377, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 369, 3, 370, 367, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 378, 359, 379, 357,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 353, 57693, 355, 57694, 356,
	57695, 358, 57696, 368, 57697, 374, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:874
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:880
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:886
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "ALTER")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:982
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:993
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1002
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1014
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1063
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1069
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1075
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1084
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1093
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1162
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1185
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1195
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = nil
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = DropCascade
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = DropRestrict
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = DropDefault
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1257
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1258
		{
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1261
		{
			return unimplemented(sqllex, "alter using")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1262
		{
		}
	case 128:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1289
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1315
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.str = "CSV"
		}
	case 133:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1353
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1422
		{
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1474
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			return helpWith(sqllex, "CREATE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1480
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1481
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1482
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1484
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1485
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1504
		{
			return helpWith(sqllex, "DELETE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1514
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1515
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1516
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1525
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1526
		{
			return helpWith(sqllex, "DROP")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1585
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1608
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1683
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1687
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			return helpWith(sqllex, "DELETE")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1691
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1692
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1693
		{
			return helpWith(sqllex, "INSERT")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1696
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1714
		{ /* SKIP DOC */
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1766
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1801
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1821
		{
			return helpWith(sqllex, "GRANT")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1841
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1919
		{
			return helpWith(sqllex, "RESET")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1920
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			return helpWith(sqllex, "RESET")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1951
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1954
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1960
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1961
		{ /* SKIP DOC */
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1962
		{ /* SKIP DOC */
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1963
		{
			return unimplemented(sqllex, "set local")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1979
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2029
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2034
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2051
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2054
		{
			return unimplemented(sqllex, "set from current")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2056
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2062
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2066
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = Low
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = Normal
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = High
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2165
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2167
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2168
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2169
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2170
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2171
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2172
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2173
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2174
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2176
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2177
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2178
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			return helpWith(sqllex, "SHOW")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2193
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.str = "client_encoding"
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2208
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2219
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2236
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2241
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2263
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2274
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2290
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2295
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2354
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2359
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2408
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2412
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2419
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2430
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2441
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2456
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2460
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2464
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2468
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2472
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2478
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2482
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2486
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2492
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2520
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2619
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2623
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = DropDefault
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2633
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2838
		{
			return unimplemented(sqllex, "match full")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			return unimplemented(sqllex, "match partial")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2840
		{
			return unimplemented(sqllex, "match simple")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2841
		{
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2847
		{
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2848
		{
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2849
		{
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2850
		{
		}
	case 528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2851
		{
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2854
		{
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2857
		{
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2860
		{
			return unimplemented(sqllex, "no action")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2863
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2864
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			return unimplemented(sqllex, "action set null")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2866
		{
			return unimplemented(sqllex, "action set default")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2891
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = nil
		}
	case 546:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2931
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2971
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = true
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = false
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3001
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3002
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3005
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3006
		{
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = Ascending
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = Descending
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 563:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3058
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3060
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = true
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = false
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3093
		{
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3094
		{
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3116
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3127
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3131
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3132
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3133
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3151
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3156
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3169
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3182
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3189
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3192
		{
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3193
		{
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.str = ""
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.str = ""
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3252
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3254
		{
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = ReadOnly
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = ReadWrite
		}
	case 623:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3318
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.str = ""
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.str = ""
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.str = ""
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.str = ""
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3361
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3362
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3386
		{
			return helpWith(sqllex, "INSERT")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3403
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3445
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3449
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3457
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 654:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3480
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3484
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3485
		{
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3614
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3649
		{
			return helpWith(sqllex, "SELECT")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3650
		{
			return helpWith(sqllex, "VALUES")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			return helpWith(sqllex, "TABLE")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3697
		{
			return helpWith(sqllex, "SELECT")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3741
		{
			return helpWith(sqllex, "TABLE")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3752
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3753
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3754
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3761
		{
			return unimplemented(sqllex, "cte")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3764
		{
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3765
		{
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3768
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3769
		{
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3772
		{
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3773
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = true
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = false
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = false
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = true
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3797
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3844
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3868
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3920
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3921
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3924
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3925
		{
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3983
		{
			return helpWith(sqllex, "VALUES")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3985
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4000
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &From{}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4022
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4040
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4067
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4104
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4129
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = nil
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4170
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4176
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = true
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = false
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.str = astFullJoin
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.str = astLeftJoin
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.str = astRightJoin
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.str = astInnerJoin
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4287
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4288
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4374
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4388
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4396
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4420
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4431
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4481
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4512
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4521
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = nil
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4586
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4682
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 876:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4714
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4753
		{
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4754
		{
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 886:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 888:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = year
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = month
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = day
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = hour
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = minute
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = month
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = hour
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = minute
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = minute
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = nil
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = second
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4849
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4884
		{
			return unimplemented(sqllex, "at tz")
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5092
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5158
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5331
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5384
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5385
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5387
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5391
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5398
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5409
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5425
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5426
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5430
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5439
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5441
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5445
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5448
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5457
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5458
		{
			return unimplemented(sqllex, "current role")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5467
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5473
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5477
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5481
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5485
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5488
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5493
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5495
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5498
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5507
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5508
		{
			return unimplemented(sqllex, "treat")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5522
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5526
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5545
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5550
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5554
		{
			return unimplemented(sqllex, "within group")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5555
		{
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5590
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5613
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5632
		{
			sqlVAL.str = ""
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5652
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5653
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5654
		{
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5657
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5658
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5664
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5665
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5666
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5667
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5668
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = Any
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = Some
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = All
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5714
		{
			sqlVAL.union.val = Plus
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = Minus
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5716
		{
			sqlVAL.union.val = Mult
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = Div
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = Mod
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5720
		{
			sqlVAL.union.val = Bitand
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = Bitor
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5722
		{
			sqlVAL.union.val = Pow
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = Bitxor
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = LT
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = GT
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5726
		{
			sqlVAL.union.val = EQ
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = LE
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = GE
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = NE
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = Like
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = NotLike
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = ILike
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5736
		{
			sqlVAL.union.val = NotILike
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5748
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5774
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5841
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5845
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5884
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5890
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5925
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5969
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5976
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6004
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6023
		{
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6024
		{
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6077
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6081
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6085
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6093
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6097
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6103
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6107
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6117
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6132
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6142
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6155
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6159
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6163
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6167
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6177
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6183
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6186
		{
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6196
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6200
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6207
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6211
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6215
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6222
		{
			return unimplemented(sqllex, "func const")
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6224
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6228
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6231
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6233
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6237
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6241
		{
			sqlVAL.union.val = DNull
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6248
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6252
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6258
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6293
		{
			sqlVAL.str = ""
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6299
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6303
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
