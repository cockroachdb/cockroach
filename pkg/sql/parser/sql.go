// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680
const HELPTOKEN = 57681

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6529

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	358, 53,
	-2, 677,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	141, 529,
	-2, 0,
	-1, 62,
	92, 677,
	145, 677,
	310, 677,
	311, 677,
	-2, 0,
	-1, 72,
	103, 652,
	112, 652,
	153, 652,
	172, 652,
	197, 652,
	203, 652,
	307, 652,
	-2, 641,
	-1, 104,
	4, 679,
	20, 679,
	21, 679,
	23, 679,
	28, 679,
	33, 679,
	34, 679,
	35, 679,
	36, 679,
	37, 679,
	38, 679,
	39, 679,
	40, 679,
	41, 679,
	42, 679,
	44, 679,
	45, 679,
	46, 679,
	47, 679,
	48, 679,
	51, 679,
	52, 679,
	53, 679,
	55, 679,
	56, 679,
	60, 679,
	61, 679,
	62, 679,
	64, 679,
	66, 679,
	67, 679,
	68, 679,
	71, 679,
	72, 679,
	73, 679,
	81, 679,
	82, 679,
	83, 679,
	84, 679,
	85, 679,
	86, 679,
	87, 679,
	88, 679,
	90, 679,
	92, 679,
	94, 679,
	97, 679,
	98, 679,
	100, 679,
	104, 679,
	105, 679,
	106, 679,
	107, 679,
	108, 679,
	109, 679,
	113, 679,
	114, 679,
	115, 679,
	116, 679,
	117, 679,
	119, 679,
	121, 679,
	126, 679,
	127, 679,
	129, 679,
	132, 679,
	133, 679,
	134, 679,
	135, 679,
	136, 679,
	137, 679,
	140, 679,
	142, 679,
	145, 679,
	146, 679,
	147, 679,
	148, 679,
	149, 679,
	150, 679,
	151, 679,
	152, 679,
	154, 679,
	157, 679,
	158, 679,
	159, 679,
	161, 679,
	162, 679,
	163, 679,
	165, 679,
	166, 679,
	168, 679,
	170, 679,
	173, 679,
	176, 679,
	178, 679,
	179, 679,
	180, 679,
	181, 679,
	182, 679,
	183, 679,
	185, 679,
	186, 679,
	187, 679,
	188, 679,
	192, 679,
	193, 679,
	194, 679,
	195, 679,
	196, 679,
	198, 679,
	200, 679,
	201, 679,
	204, 679,
	205, 679,
	207, 679,
	209, 679,
	210, 679,
	211, 679,
	212, 679,
	213, 679,
	214, 679,
	216, 679,
	217, 679,
	218, 679,
	219, 679,
	220, 679,
	222, 679,
	223, 679,
	224, 679,
	225, 679,
	226, 679,
	227, 679,
	228, 679,
	229, 679,
	231, 679,
	232, 679,
	233, 679,
	234, 679,
	235, 679,
	236, 679,
	237, 679,
	238, 679,
	239, 679,
	240, 679,
	241, 679,
	242, 679,
	244, 679,
	246, 679,
	247, 679,
	248, 679,
	249, 679,
	251, 679,
	252, 679,
	253, 679,
	254, 679,
	256, 679,
	257, 679,
	258, 679,
	259, 679,
	260, 679,
	262, 679,
	263, 679,
	264, 679,
	265, 679,
	267, 679,
	268, 679,
	269, 679,
	270, 679,
	272, 679,
	273, 679,
	274, 679,
	275, 679,
	276, 679,
	277, 679,
	278, 679,
	279, 679,
	280, 679,
	281, 679,
	283, 679,
	285, 679,
	286, 679,
	287, 679,
	288, 679,
	289, 679,
	290, 679,
	291, 679,
	293, 679,
	294, 679,
	295, 679,
	298, 679,
	299, 679,
	300, 679,
	301, 679,
	303, 679,
	304, 679,
	305, 679,
	306, 679,
	309, 679,
	310, 679,
	311, 679,
	312, 679,
	314, 679,
	316, 679,
	317, 679,
	318, 679,
	319, 679,
	320, 679,
	321, 679,
	324, 679,
	329, 679,
	330, 679,
	331, 679,
	332, 679,
	333, 679,
	-2, 0,
	-1, 117,
	103, 651,
	112, 651,
	153, 651,
	172, 651,
	197, 651,
	203, 651,
	307, 651,
	-2, 644,
	-1, 122,
	1, 578,
	157, 578,
	222, 578,
	226, 578,
	357, 578,
	358, 578,
	-2, 0,
	-1, 124,
	1, 578,
	357, 578,
	358, 578,
	-2, 0,
	-1, 125,
	1, 578,
	357, 578,
	358, 578,
	-2, 0,
	-1, 126,
	1, 582,
	357, 582,
	358, 582,
	-2, 0,
	-1, 133,
	4, 685,
	5, 685,
	6, 685,
	7, 685,
	8, 685,
	9, 685,
	20, 685,
	21, 685,
	23, 685,
	28, 685,
	29, 685,
	33, 685,
	34, 685,
	35, 685,
	36, 685,
	37, 685,
	38, 685,
	39, 685,
	40, 685,
	41, 685,
	42, 685,
	44, 685,
	45, 685,
	46, 685,
	47, 685,
	48, 685,
	49, 685,
	50, 685,
	51, 685,
	52, 685,
	53, 685,
	55, 685,
	56, 685,
	58, 685,
	60, 685,
	61, 685,
	62, 685,
	64, 685,
	66, 685,
	67, 685,
	68, 685,
	70, 685,
	71, 685,
	72, 685,
	73, 685,
	75, 685,
	76, 685,
	77, 685,
	79, 685,
	80, 685,
	81, 685,
	82, 685,
	83, 685,
	84, 685,
	85, 685,
	86, 685,
	87, 685,
	88, 685,
	90, 685,
	92, 685,
	94, 685,
	97, 685,
	98, 685,
	100, 685,
	104, 685,
	105, 685,
	106, 685,
	107, 685,
	108, 685,
	109, 685,
	110, 685,
	113, 685,
	114, 685,
	115, 685,
	116, 685,
	117, 685,
	119, 685,
	121, 685,
	124, 685,
	126, 685,
	127, 685,
	129, 685,
	132, 685,
	133, 685,
	134, 685,
	135, 685,
	136, 685,
	137, 685,
	138, 685,
	140, 685,
	142, 685,
	144, 685,
	145, 685,
	146, 685,
	147, 685,
	148, 685,
	149, 685,
	150, 685,
	151, 685,
	152, 685,
	154, 685,
	156, 685,
	157, 685,
	158, 685,
	159, 685,
	160, 685,
	161, 685,
	162, 685,
	163, 685,
	165, 685,
	166, 685,
	168, 685,
	169, 685,
	170, 685,
	171, 685,
	173, 685,
	176, 685,
	178, 685,
	179, 685,
	180, 685,
	181, 685,
	182, 685,
	183, 685,
	184, 685,
	185, 685,
	186, 685,
	187, 685,
	188, 685,
	189, 685,
	191, 685,
	192, 685,
	193, 685,
	194, 685,
	195, 685,
	196, 685,
	198, 685,
	201, 685,
	204, 685,
	205, 685,
	206, 685,
	207, 685,
	208, 685,
	209, 685,
	210, 685,
	211, 685,
	212, 685,
	213, 685,
	214, 685,
	216, 685,
	217, 685,
	218, 685,
	219, 685,
	220, 685,
	222, 685,
	223, 685,
	224, 685,
	225, 685,
	226, 685,
	227, 685,
	228, 685,
	229, 685,
	231, 685,
	232, 685,
	233, 685,
	234, 685,
	235, 685,
	236, 685,
	237, 685,
	238, 685,
	239, 685,
	240, 685,
	241, 685,
	242, 685,
	244, 685,
	245, 685,
	246, 685,
	247, 685,
	248, 685,
	249, 685,
	251, 685,
	252, 685,
	253, 685,
	254, 685,
	256, 685,
	257, 685,
	258, 685,
	259, 685,
	260, 685,
	261, 685,
	262, 685,
	263, 685,
	264, 685,
	265, 685,
	266, 685,
	267, 685,
	268, 685,
	269, 685,
	270, 685,
	272, 685,
	273, 685,
	274, 685,
	275, 685,
	276, 685,
	277, 685,
	278, 685,
	279, 685,
	280, 685,
	281, 685,
	283, 685,
	285, 685,
	286, 685,
	287, 685,
	288, 685,
	289, 685,
	290, 685,
	291, 685,
	293, 685,
	294, 685,
	295, 685,
	298, 685,
	299, 685,
	300, 685,
	301, 685,
	302, 685,
	303, 685,
	304, 685,
	305, 685,
	306, 685,
	309, 685,
	310, 685,
	311, 685,
	312, 685,
	313, 685,
	314, 685,
	316, 685,
	317, 685,
	318, 685,
	319, 685,
	320, 685,
	321, 685,
	324, 685,
	329, 685,
	330, 685,
	331, 685,
	332, 685,
	333, 685,
	334, 685,
	340, 685,
	345, 685,
	346, 685,
	347, 685,
	354, 685,
	360, 685,
	-2, 0,
	-1, 136,
	1, 53,
	358, 53,
	-2, 677,
	-1, 497,
	123, 1276,
	296, 1276,
	339, 1276,
	356, 1276,
	-2, 0,
	-1, 498,
	123, 1229,
	296, 1229,
	339, 1229,
	356, 1229,
	-2, 0,
	-1, 500,
	123, 1334,
	296, 1334,
	339, 1334,
	356, 1334,
	-2, 0,
	-1, 502,
	123, 1356,
	296, 1356,
	339, 1356,
	356, 1356,
	-2, 0,
	-1, 509,
	123, 1281,
	296, 1281,
	339, 1281,
	356, 1281,
	-2, 321,
	-1, 535,
	1, 398,
	353, 398,
	355, 398,
	357, 398,
	358, 398,
	-2, 0,
	-1, 536,
	1, 445,
	120, 445,
	353, 445,
	355, 445,
	357, 445,
	358, 445,
	-2, 0,
	-1, 542,
	1, 412,
	353, 412,
	355, 412,
	357, 412,
	358, 412,
	-2, 0,
	-1, 544,
	1, 416,
	353, 416,
	355, 416,
	357, 416,
	358, 416,
	-2, 0,
	-1, 547,
	1, 424,
	353, 424,
	355, 424,
	357, 424,
	358, 424,
	-2, 0,
	-1, 548,
	1, 429,
	353, 429,
	355, 429,
	357, 429,
	358, 429,
	-2, 0,
	-1, 551,
	1, 439,
	353, 439,
	355, 439,
	357, 439,
	358, 439,
	-2, 0,
	-1, 565,
	112, 687,
	172, 687,
	197, 687,
	-2, 647,
	-1, 568,
	112, 686,
	172, 686,
	197, 686,
	-2, 645,
	-1, 625,
	354, 1207,
	-2, 1200,
	-1, 626,
	354, 1208,
	-2, 1201,
	-1, 632,
	5, 862,
	354, 862,
	-2, 1407,
	-1, 657,
	5, 821,
	-2, 1377,
	-1, 658,
	5, 856,
	354, 856,
	-2, 1379,
	-1, 659,
	5, 831,
	-2, 1380,
	-1, 660,
	5, 830,
	-2, 1381,
	-1, 661,
	5, 856,
	354, 856,
	-2, 1384,
	-1, 662,
	5, 856,
	354, 856,
	-2, 1385,
	-1, 663,
	5, 857,
	-2, 1388,
	-1, 664,
	5, 813,
	-2, 1389,
	-1, 665,
	5, 813,
	-2, 1390,
	-1, 666,
	5, 838,
	-2, 1394,
	-1, 667,
	5, 823,
	-2, 1395,
	-1, 668,
	5, 824,
	-2, 1396,
	-1, 669,
	5, 814,
	-2, 1401,
	-1, 670,
	5, 815,
	-2, 1402,
	-1, 671,
	5, 816,
	-2, 1403,
	-1, 672,
	5, 817,
	-2, 1404,
	-1, 673,
	5, 818,
	-2, 1405,
	-1, 674,
	5, 819,
	-2, 1406,
	-1, 675,
	5, 813,
	-2, 1411,
	-1, 676,
	5, 822,
	-2, 1416,
	-1, 677,
	5, 820,
	-2, 1419,
	-1, 678,
	5, 854,
	354, 854,
	-2, 1421,
	-1, 679,
	5, 858,
	-2, 1424,
	-1, 680,
	5, 860,
	-2, 1425,
	-1, 681,
	5, 853,
	354, 853,
	-2, 1430,
	-1, 778,
	213, 675,
	-2, 522,
	-1, 782,
	199, 1204,
	-2, 0,
	-1, 817,
	1, 212,
	353, 212,
	355, 212,
	357, 212,
	358, 212,
	-2, 650,
	-1, 824,
	4, 1429,
	10, 1429,
	11, 1429,
	13, 1429,
	14, 1429,
	15, 1429,
	16, 1429,
	17, 1429,
	18, 1429,
	20, 1429,
	21, 1429,
	23, 1429,
	26, 1429,
	28, 1429,
	30, 1429,
	33, 1429,
	34, 1429,
	35, 1429,
	36, 1429,
	37, 1429,
	38, 1429,
	39, 1429,
	40, 1429,
	41, 1429,
	42, 1429,
	44, 1429,
	45, 1429,
	46, 1429,
	47, 1429,
	48, 1429,
	51, 1429,
	52, 1429,
	53, 1429,
	55, 1429,
	56, 1429,
	57, 1429,
	60, 1429,
	61, 1429,
	62, 1429,
	63, 1429,
	64, 1429,
	66, 1429,
	67, 1429,
	68, 1429,
	70, 1429,
	71, 1429,
	72, 1429,
	73, 1429,
	81, 1429,
	82, 1429,
	83, 1429,
	84, 1429,
	85, 1429,
	86, 1429,
	87, 1429,
	88, 1429,
	90, 1429,
	92, 1429,
	94, 1429,
	97, 1429,
	98, 1429,
	100, 1429,
	104, 1429,
	105, 1429,
	106, 1429,
	107, 1429,
	108, 1429,
	109, 1429,
	113, 1429,
	114, 1429,
	115, 1429,
	116, 1429,
	117, 1429,
	118, 1429,
	119, 1429,
	121, 1429,
	124, 1429,
	126, 1429,
	127, 1429,
	129, 1429,
	132, 1429,
	133, 1429,
	134, 1429,
	135, 1429,
	136, 1429,
	137, 1429,
	138, 1429,
	139, 1429,
	140, 1429,
	142, 1429,
	144, 1429,
	145, 1429,
	146, 1429,
	147, 1429,
	148, 1429,
	149, 1429,
	150, 1429,
	151, 1429,
	152, 1429,
	154, 1429,
	156, 1429,
	157, 1429,
	158, 1429,
	159, 1429,
	160, 1429,
	161, 1429,
	162, 1429,
	163, 1429,
	165, 1429,
	166, 1429,
	168, 1429,
	169, 1429,
	170, 1429,
	171, 1429,
	173, 1429,
	176, 1429,
	177, 1429,
	178, 1429,
	179, 1429,
	180, 1429,
	181, 1429,
	182, 1429,
	183, 1429,
	184, 1429,
	185, 1429,
	186, 1429,
	187, 1429,
	188, 1429,
	192, 1429,
	193, 1429,
	194, 1429,
	195, 1429,
	196, 1429,
	198, 1429,
	201, 1429,
	202, 1429,
	204, 1429,
	205, 1429,
	207, 1429,
	209, 1429,
	210, 1429,
	211, 1429,
	212, 1429,
	213, 1429,
	214, 1429,
	216, 1429,
	217, 1429,
	218, 1429,
	219, 1429,
	220, 1429,
	222, 1429,
	223, 1429,
	224, 1429,
	225, 1429,
	226, 1429,
	227, 1429,
	228, 1429,
	229, 1429,
	231, 1429,
	232, 1429,
	233, 1429,
	234, 1429,
	235, 1429,
	236, 1429,
	237, 1429,
	238, 1429,
	239, 1429,
	240, 1429,
	241, 1429,
	242, 1429,
	244, 1429,
	245, 1429,
	246, 1429,
	247, 1429,
	248, 1429,
	249, 1429,
	250, 1429,
	251, 1429,
	252, 1429,
	253, 1429,
	254, 1429,
	256, 1429,
	257, 1429,
	258, 1429,
	259, 1429,
	260, 1429,
	262, 1429,
	263, 1429,
	264, 1429,
	265, 1429,
	266, 1429,
	267, 1429,
	268, 1429,
	269, 1429,
	270, 1429,
	272, 1429,
	273, 1429,
	274, 1429,
	275, 1429,
	276, 1429,
	277, 1429,
	278, 1429,
	279, 1429,
	280, 1429,
	281, 1429,
	283, 1429,
	285, 1429,
	286, 1429,
	287, 1429,
	288, 1429,
	289, 1429,
	290, 1429,
	291, 1429,
	293, 1429,
	294, 1429,
	295, 1429,
	298, 1429,
	299, 1429,
	300, 1429,
	301, 1429,
	303, 1429,
	304, 1429,
	305, 1429,
	306, 1429,
	309, 1429,
	310, 1429,
	311, 1429,
	312, 1429,
	314, 1429,
	316, 1429,
	317, 1429,
	318, 1429,
	319, 1429,
	320, 1429,
	321, 1429,
	324, 1429,
	329, 1429,
	330, 1429,
	331, 1429,
	332, 1429,
	333, 1429,
	334, 1429,
	335, 1429,
	337, 1429,
	338, 1429,
	339, 1429,
	340, 1429,
	342, 1429,
	343, 1429,
	344, 1429,
	345, 1429,
	346, 1429,
	347, 1429,
	348, 1429,
	349, 1429,
	350, 1429,
	352, 1429,
	355, 1429,
	356, 1429,
	359, 1429,
	360, 1429,
	-2, 0,
	-1, 838,
	123, 1334,
	296, 1334,
	339, 1334,
	356, 1334,
	-2, 0,
	-1, 855,
	123, 1356,
	296, 1356,
	339, 1356,
	356, 1356,
	-2, 0,
	-1, 856,
	157, 590,
	222, 590,
	226, 590,
	-2, 309,
	-1, 925,
	112, 686,
	172, 686,
	197, 686,
	-2, 648,
	-1, 994,
	103, 652,
	112, 652,
	153, 652,
	172, 652,
	197, 652,
	203, 652,
	307, 652,
	-2, 981,
	-1, 1004,
	354, 1184,
	-2, 1172,
	-1, 1022,
	355, 1124,
	-2, 0,
	-1, 1046,
	157, 590,
	222, 590,
	226, 590,
	-2, 585,
	-1, 1078,
	103, 652,
	112, 652,
	153, 652,
	172, 652,
	197, 652,
	203, 652,
	307, 652,
	-2, 748,
	-1, 1300,
	157, 590,
	222, 590,
	226, 590,
	-2, 311,
	-1, 1398,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 897,
	-1, 1399,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 898,
	-1, 1400,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 899,
	-1, 1404,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 903,
	-1, 1405,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 904,
	-1, 1406,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 905,
	-1, 1409,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 910,
	-1, 1415,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 912,
	-1, 1417,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 916,
	-1, 1418,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 917,
	-1, 1419,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 918,
	-1, 1420,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 919,
	-1, 1446,
	208, 1066,
	-2, 1069,
	-1, 1490,
	123, 1106,
	354, 1207,
	-2, 1200,
	-1, 1491,
	123, 1107,
	-2, 1373,
	-1, 1492,
	123, 1108,
	-2, 1280,
	-1, 1493,
	123, 1109,
	-2, 1244,
	-1, 1494,
	123, 1110,
	-2, 1260,
	-1, 1495,
	123, 1111,
	-2, 1279,
	-1, 1496,
	123, 1112,
	-2, 1331,
	-1, 1572,
	1, 749,
	70, 749,
	103, 749,
	112, 749,
	124, 749,
	128, 749,
	130, 749,
	144, 749,
	153, 749,
	160, 749,
	169, 749,
	172, 749,
	184, 749,
	197, 749,
	199, 749,
	203, 749,
	243, 749,
	245, 749,
	307, 749,
	315, 749,
	326, 749,
	327, 749,
	336, 749,
	353, 749,
	355, 749,
	357, 749,
	358, 749,
	359, 749,
	-2, 748,
	-1, 1712,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 911,
	-1, 1713,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 913,
	-1, 1718,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 914,
	-1, 1736,
	208, 1065,
	-2, 1068,
	-1, 1961,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 915,
	-1, 1966,
	156, 0,
	-2, 931,
	-1, 1976,
	208, 1067,
	-2, 1070,
	-1, 2018,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 958,
	-1, 2019,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 959,
	-1, 2020,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 960,
	-1, 2024,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 964,
	-1, 2025,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 965,
	-1, 2026,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 966,
	-1, 2151,
	156, 0,
	-2, 932,
	-1, 2154,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 935,
	-1, 2155,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 937,
	-1, 2271,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 936,
	-1, 2272,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 938,
	-1, 2279,
	156, 0,
	-2, 967,
	-1, 2356,
	156, 0,
	-2, 968,
	-1, 2433,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1376,
}

const sqlPrivate = 57344

const sqlLast = 42033

var sqlAct = [...]int{

	626, 2432, 2441, 2407, 2480, 1635, 2107, 2442, 569, 2443,
	1643, 1202, 1995, 1943, 2361, 2431, 1706, 2252, 1294, 1615,
	876, 2305, 2117, 2205, 1244, 71, 2219, 585, 1209, 2139,
	616, 1909, 1295, 619, 2078, 1911, 2141, 624, 602, 772,
	174, 2285, 2079, 1619, 1614, 174, 1917, 728, 1850, 1076,
	1632, 1072, 1829, 174, 2133, 2185, 1644, 1802, 1618, 1055,
	1205, 1568, 174, 1377, 1585, 1576, 440, 174, 174, 1608,
	1567, 174, 1372, 1837, 174, 1747, 1000, 2049, 1444, 623,
	1702, 1801, 174, 1081, 1198, 859, 1325, 455, 25, 577,
	116, 1690, 508, 1056, 928, 1084, 1086, 596, 1432, 1454,
	1429, 1321, 858, 807, 734, 1616, 804, 437, 1464, 1637,
	878, 1470, 818, 797, 1245, 1032, 1622, 737, 1063, 1541,
	1036, 1107, 1554, 716, 1486, 989, 1519, 595, 174, 174,
	927, 488, 117, 929, 1324, 165, 174, 618, 501, 466,
	1046, 1216, 118, 794, 170, 574, 714, 1045, 1222, 529,
	2220, 933, 116, 2063, 1735, 1636, 2064, 573, 573, 1073,
	1224, 38, 174, 174, 174, 174, 1959, 1103, 1658, 174,
	174, 1224, 39, 1224, 944, 945, 2476, 2457, 2453, 2452,
	1106, 2218, 1658, 1658, 1927, 43, 2449, 2429, 1926, 758,
	1106, 1673, 2428, 1543, 568, 2402, 1673, 947, 2397, 1666,
	2393, 2385, 2266, 480, 1106, 2218, 2358, 49, 583, 2336,
	1666, 2333, 2331, 2218, 2316, 1106, 2218, 2403, 1106, 731,
	720, 946, 721, 1609, 25, 2315, 116, 961, 2293, 2218,
	1673, 2290, 1106, 2273, 505, 1106, 60, 1666, 2240, 1609,
	2238, 1739, 1658, 61, 1658, 62, 2052, 1740, 2217, 566,
	944, 945, 2218, 2198, 2178, 2266, 2156, 1106, 1658, 565,
	1658, 2153, 1673, 1738, 2052, 1666, 742, 746, 752, 1658,
	578, 1542, 64, 947, 2132, 718, 1954, 1574, 1613, 2031,
	944, 945, 952, 964, 965, 966, 974, 975, 976, 2127,
	2059, 1970, 1973, 1613, 2060, 1658, 967, 946, 1937, 1106,
	1898, 1899, 1899, 947, 1106, 684, 978, 1853, 1826, 1705,
	1688, 1658, 1106, 1658, 1746, 1819, 944, 945, 1303, 1820,
	1050, 1817, 974, 975, 976, 1658, 1816, 946, 1815, 1448,
	1658, 756, 1658, 961, 1736, 1772, 1773, 840, 1658, 947,
	1677, 962, 978, 1665, 1658, 1657, 1612, 1666, 2221, 1658,
	1613, 1548, 65, 1225, 133, 1547, 136, 837, 952, 836,
	1772, 1773, 835, 946, 1225, 1322, 1225, 1237, 834, 961,
	833, 1238, 832, 1522, 831, 830, 829, 120, 67, 828,
	68, 827, 826, 135, 722, 719, 561, 133, 952, 560,
	559, 527, 526, 133, 525, 524, 523, 1692, 522, 1640,
	461, 521, 174, 100, 174, 174, 520, 174, 971, 979,
	1772, 1773, 174, 1787, 963, 519, 135, 962, 174, 134,
	1926, 518, 135, 517, 952, 516, 977, 1483, 515, 1542,
	514, 174, 174, 174, 174, 174, 513, 512, 511, 496,
	821, 969, 495, 1778, 971, 979, 494, 962, 493, 576,
	492, 428, 134, 119, 811, 427, 1845, 426, 134, 425,
	127, 424, 174, 409, 408, 574, 127, 128, 1778, 38,
	400, 1230, 968, 128, 399, 174, 398, 969, 397, 389,
	39, 388, 1223, 962, 1356, 387, 119, 159, 158, 762,
	963, 174, 119, 43, 776, 2475, 157, 780, 156, 155,
	154, 174, 1788, 153, 152, 151, 957, 955, 956, 948,
	949, 950, 951, 953, 954, 49, 150, 149, 1778, 148,
	963, 1077, 796, 800, 800, 147, 146, 1788, 145, 144,
	143, 142, 821, 141, 140, 139, 972, 138, 137, 1328,
	871, 940, 1481, 2448, 60, 801, 771, 2430, 2412, 2353,
	819, 61, 2334, 62, 2259, 2184, 963, 2183, 2179, 1479,
	2171, 2170, 2169, 174, 874, 133, 1477, 841, 2165, 1772,
	1773, 2164, 972, 2163, 926, 1789, 944, 945, 2162, 2138,
	64, 2046, 957, 955, 956, 948, 949, 950, 951, 953,
	954, 2041, 2040, 2039, 135, 1901, 869, 1467, 1981, 947,
	1789, 1897, 1857, 1824, 970, 1821, 1809, 958, 959, 960,
	973, 1800, 957, 955, 956, 948, 949, 950, 951, 953,
	954, 1771, 1768, 946, 1767, 1208, 574, 1772, 1773, 2180,
	134, 1765, 1752, 1751, 1572, 940, 1440, 729, 127, 853,
	970, 925, 1008, 856, 1468, 128, 973, 762, 957, 955,
	956, 948, 949, 950, 951, 953, 954, 1241, 1075, 1001,
	65, 992, 1941, 939, 1639, 1074, 769, 924, 1781, 1782,
	1774, 1775, 1776, 1777, 1779, 1780, 1997, 1778, 2420, 2364,
	872, 2388, 2382, 2381, 952, 120, 67, 2380, 68, 2372,
	1469, 1466, 1783, 1781, 1782, 1774, 1775, 1776, 1777, 1779,
	1780, 133, 133, 1323, 1701, 1343, 2370, 2348, 461, 2258,
	566, 100, 1700, 2347, 174, 2346, 174, 2302, 2281, 2267,
	565, 2246, 2224, 936, 937, 2176, 2115, 2113, 2112, 941,
	135, 135, 2110, 2087, 2086, 1778, 1788, 2067, 2055, 174,
	174, 1965, 1441, 1888, 1883, 1774, 1775, 1776, 1777, 1779,
	1780, 1870, 1869, 1855, 1001, 1825, 821, 174, 1061, 1799,
	1761, 1760, 1004, 1110, 574, 1471, 134, 134, 1757, 1054,
	1732, 174, 1727, 1434, 127, 127, 1037, 1034, 1035, 2265,
	1482, 128, 128, 174, 1059, 1040, 1038, 1559, 1104, 174,
	1531, 174, 1207, 174, 1788, 1475, 1041, 174, 1201, 730,
	119, 119, 944, 945, 1843, 1053, 944, 945, 1870, 1789,
	1044, 1200, 1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023,
	1022, 1021, 1020, 116, 1019, 947, 1018, 1017, 1016, 947,
	1015, 1772, 1773, 1014, 1790, 1791, 1792, 1013, 1012, 174,
	174, 1071, 1005, 1465, 1213, 1049, 821, 993, 174, 946,
	992, 174, 1047, 946, 852, 844, 1079, 815, 2158, 2137,
	2062, 2058, 1051, 1668, 1939, 1671, 1560, 1789, 1772, 1773,
	1313, 1312, 1110, 1322, 1319, 990, 1075, 868, 1251, 944,
	945, 174, 1676, 1912, 1787, 2269, 174, 2268, 2262, 2065,
	1928, 174, 174, 796, 174, 1480, 174, 770, 174, 1318,
	174, 1105, 947, 1782, 1774, 1775, 1776, 1777, 1779, 1780,
	952, 174, 1478, 950, 951, 953, 954, 174, 174, 1476,
	1609, 922, 1772, 1773, 1042, 1675, 946, 1772, 1773, 1043,
	1077, 1823, 1215, 1822, 1218, 944, 945, 1711, 865, 1778,
	1010, 1944, 1242, 174, 1309, 944, 945, 1110, 1206, 2286,
	1227, 1636, 1094, 1229, 611, 1316, 160, 1232, 947, 1783,
	1781, 1782, 1774, 1775, 1776, 1777, 1779, 1780, 947, 962,
	1998, 1743, 1092, 1330, 996, 1239, 1455, 853, 1251, 1251,
	1240, 1033, 946, 1296, 1922, 2074, 2415, 952, 916, 730,
	1093, 1007, 946, 1329, 171, 116, 1300, 1662, 1788, 395,
	2472, 2392, 1326, 1314, 1951, 2232, 711, 410, 1940, 1678,
	2473, 709, 707, 1344, 2326, 705, 435, 1087, 574, 1088,
	1288, 478, 171, 574, 1359, 486, 1337, 917, 491, 702,
	1778, 2325, 2324, 2323, 908, 1778, 510, 163, 2102, 1317,
	1586, 2100, 963, 952, 1200, 2071, 2070, 1075, 1756, 174,
	866, 174, 1578, 952, 174, 1755, 1754, 1357, 2098, 1378,
	1385, 1753, 1358, 1714, 1661, 174, 566, 1605, 1386, 566,
	566, 1789, 1355, 1540, 1110, 1310, 1368, 174, 1452, 1369,
	1370, 174, 717, 717, 174, 1297, 1601, 1599, 174, 1788,
	395, 1416, 174, 867, 1089, 164, 1048, 174, 755, 1578,
	1467, 429, 962, 174, 1110, 1577, 574, 174, 1589, 2243,
	1535, 1534, 962, 1387, 1442, 1439, 395, 395, 750, 395,
	1334, 2391, 1561, 171, 759, 1633, 1338, 1354, 1339, 2105,
	1340, 1579, 1341, 563, 1342, 955, 956, 948, 949, 950,
	951, 953, 954, 390, 1497, 475, 954, 1468, 1551, 1353,
	1282, 1348, 1350, 2106, 1590, 1592, 402, 2307, 1784, 1785,
	1786, 1894, 1789, 1783, 1781, 1782, 1774, 1775, 1776, 1777,
	1779, 1780, 1196, 683, 1538, 963, 1087, 1376, 1088, 1546,
	1537, 1597, 433, 1431, 1552, 963, 1669, 1603, 943, 1235,
	1556, 1557, 1431, 1469, 1466, 1562, 1595, 1455, 1079, 2089,
	2426, 1600, 174, 1219, 1582, 572, 1606, 1588, 1780, 174,
	902, 1323, 1320, 1504, 948, 949, 950, 951, 953, 954,
	174, 1087, 174, 1088, 174, 1607, 1298, 174, 2472, 174,
	2445, 174, 174, 1062, 174, 174, 851, 406, 161, 821,
	432, 1438, 1471, 174, 2483, 1991, 1436, 903, 1950, 1988,
	1282, 1282, 921, 1089, 1656, 571, 1890, 1774, 1775, 1776,
	1777, 1779, 1780, 1333, 1776, 1777, 1779, 1780, 1471, 956,
	948, 949, 950, 951, 953, 954, 2213, 162, 2399, 2464,
	948, 949, 950, 951, 953, 954, 1919, 1066, 1885, 2096,
	1703, 1704, 1352, 2488, 1587, 1989, 175, 414, 1089, 391,
	713, 915, 2400, 712, 1638, 573, 1638, 1069, 703, 703,
	1664, 2214, 704, 1224, 1090, 1097, 1650, 2446, 39, 800,
	1471, 800, 881, 1064, 1724, 2375, 703, 116, 1642, 1110,
	907, 43, 1067, 116, 1653, 1952, 1575, 174, 1654, 1722,
	1651, 1095, 1652, 1031, 2277, 1659, 1465, 1065, 1663, 819,
	415, 1660, 1628, 174, 174, 174, 510, 174, 778, 510,
	1670, 783, 1839, 2090, 1672, 392, 786, 1445, 1413, 2308,
	1471, 996, 395, 2447, 2330, 1449, 174, 1920, 987, 1457,
	1759, 1066, 2481, 431, 1571, 510, 510, 395, 808, 759,
	2463, 1881, 1489, 1489, 1502, 1555, 1514, 1038, 573, 1041,
	889, 1069, 1526, 1527, 1529, 1679, 1035, 1034, 1068, 570,
	1719, 2209, 434, 2210, 485, 564, 510, 1553, 64, 1681,
	1720, 1919, 430, 2145, 1725, 2444, 1067, 474, 1101, 510,
	1683, 2471, 2469, 1716, 464, 116, 1085, 2482, 401, 2251,
	393, 1630, 1430, 2212, 1100, 848, 847, 839, 1565, 942,
	1689, 1684, 2215, 1693, 1893, 510, 912, 1695, 2484, 932,
	574, 1697, 407, 1682, 1098, 1699, 1745, 403, 1301, 1427,
	1411, 1414, 2213, 1090, 2318, 2206, 931, 404, 1838, 2027,
	2317, 467, 1099, 2204, 1425, 423, 2489, 2208, 2494, 2462,
	1437, 873, 857, 554, 2300, 2367, 2174, 850, 65, 2228,
	631, 2231, 1068, 1410, 472, 418, 1225, 2214, 2230, 682,
	468, 582, 2073, 1717, 1715, 417, 416, 395, 1090, 862,
	1866, 913, 1862, 120, 67, 1332, 68, 1631, 1214, 2207,
	2211, 1721, 1203, 1731, 1364, 574, 930, 469, 1723, 133,
	1987, 2408, 554, 882, 174, 1110, 461, 1827, 1347, 100,
	174, 174, 1833, 1742, 174, 1421, 931, 471, 1304, 174,
	582, 932, 174, 1422, 686, 1423, 774, 2253, 135, 1428,
	174, 167, 555, 2028, 914, 1834, 174, 174, 174, 2029,
	883, 2118, 174, 880, 863, 174, 2301, 1872, 864, 1851,
	2493, 174, 174, 174, 174, 174, 2175, 890, 1412, 2227,
	174, 773, 174, 1871, 134, 1365, 174, 2209, 2229, 2210,
	1846, 1709, 127, 1308, 174, 1840, 930, 1251, 1550, 128,
	1842, 555, 1856, 862, 174, 1863, 174, 1831, 174, 1549,
	483, 174, 1847, 1835, 1836, 174, 1828, 1841, 119, 2212,
	174, 862, 174, 1806, 1807, 1808, 571, 862, 2215, 174,
	782, 1251, 1900, 2108, 1902, 1852, 477, 1306, 793, 2244,
	791, 1892, 174, 821, 2186, 574, 1832, 470, 491, 1307,
	717, 1858, 556, 2050, 821, 174, 1424, 1474, 2298, 460,
	33, 459, 32, 1426, 1882, 458, 29, 463, 863, 1924,
	1887, 1880, 864, 395, 395, 1936, 2280, 2173, 1867, 419,
	1251, 457, 77, 2299, 2104, 3, 1945, 464, 911, 1803,
	174, 171, 863, 1964, 1903, 1895, 864, 1906, 456, 76,
	1904, 556, 473, 900, 1921, 395, 2211, 453, 21, 1766,
	1915, 685, 1867, 1929, 1726, 1674, 822, 1212, 760, 420,
	757, 1236, 1611, 395, 1604, 395, 1598, 395, 454, 22,
	557, 1220, 1967, 1935, 467, 920, 919, 1983, 1984, 1985,
	174, 1251, 1947, 1948, 1949, 701, 1946, 452, 27, 421,
	845, 422, 1804, 761, 1473, 1953, 2440, 472, 1957, 1955,
	906, 1938, 558, 468, 451, 19, 482, 1345, 449, 18,
	1336, 1011, 2405, 510, 171, 2202, 2094, 1251, 1251, 557,
	1930, 1931, 171, 1932, 1933, 510, 1251, 1251, 1730, 589,
	469, 792, 476, 790, 1974, 1733, 33, 1977, 32, 2092,
	450, 17, 29, 898, 2072, 444, 14, 2001, 822, 910,
	471, 558, 1908, 1749, 1750, 510, 2006, 1999, 77, 1251,
	510, 174, 740, 896, 899, 171, 510, 174, 510, 894,
	510, 2004, 510, 1634, 510, 76, 174, 174, 1627, 2034,
	892, 601, 1234, 587, 21, 1346, 1990, 1992, 1993, 445,
	15, 510, 510, 443, 13, 2068, 448, 11, 1378, 2002,
	442, 9, 1978, 1798, 2035, 22, 1233, 1378, 2007, 1282,
	706, 708, 2048, 447, 7, 1811, 1231, 510, 905, 2051,
	174, 2085, 174, 2066, 27, 2103, 394, 1228, 2084, 174,
	2054, 2053, 821, 446, 6, 116, 2114, 2061, 2069, 1226,
	2038, 19, 886, 1282, 2057, 18, 789, 174, 174, 1102,
	2111, 2128, 2120, 2076, 580, 1096, 554, 441, 5, 1091,
	470, 2341, 1910, 725, 897, 174, 2119, 2097, 934, 823,
	2083, 2473, 1707, 467, 582, 174, 2131, 17, 2109, 2264,
	1110, 2122, 14, 726, 895, 2123, 1327, 2263, 2134, 462,
	893, 1578, 1282, 2343, 2121, 2147, 472, 1593, 1578, 2124,
	2130, 891, 468, 2129, 1591, 2377, 1062, 581, 1594, 2126,
	2152, 2221, 2135, 884, 2355, 473, 2187, 735, 174, 1251,
	938, 944, 945, 491, 1602, 717, 15, 1596, 759, 469,
	13, 1831, 2404, 11, 1708, 555, 2249, 9, 1281, 395,
	1641, 935, 1629, 744, 748, 2093, 754, 2095, 628, 471,
	7, 1570, 1626, 1282, 1539, 395, 727, 1299, 395, 484,
	1066, 823, 1583, 885, 1243, 2479, 395, 788, 946, 2492,
	6, 395, 822, 174, 1772, 1773, 174, 395, 2292, 1111,
	1069, 1610, 2172, 944, 945, 2192, 1110, 174, 174, 1282,
	1282, 174, 174, 174, 5, 2190, 1064, 2136, 1282, 1282,
	2047, 2148, 1686, 1685, 1994, 1067, 1686, 2197, 174, 1942,
	1848, 1818, 1687, 174, 1536, 174, 1533, 174, 174, 174,
	1065, 174, 1532, 174, 1463, 821, 1971, 2226, 2222, 2189,
	2191, 1282, 2193, 174, 174, 556, 2201, 2085, 1281, 1281,
	821, 2225, 998, 2242, 2084, 2160, 1986, 1905, 1008, 1006,
	918, 909, 2247, 763, 765, 767, 2188, 2196, 904, 470,
	2255, 2085, 822, 901, 887, 2245, 2085, 849, 2084, 1302,
	2250, 562, 2306, 2084, 2254, 465, 1617, 1335, 2248, 944,
	945, 1068, 888, 759, 1844, 2270, 2083, 1558, 1111, 2398,
	2275, 2166, 2256, 2032, 395, 2261, 1649, 1758, 510, 2360,
	2276, 510, 947, 510, 2042, 395, 395, 2194, 1655, 759,
	2083, 579, 1472, 557, 473, 2083, 1009, 1583, 53, 2081,
	605, 2282, 2203, 174, 2075, 174, 946, 1110, 174, 1621,
	1251, 1620, 1113, 1311, 627, 2260, 174, 1488, 842, 1379,
	700, 629, 1110, 1248, 846, 558, 630, 1249, 1039, 617,
	1246, 2289, 816, 1645, 1315, 1435, 2310, 1453, 1741, 2312,
	1002, 2291, 597, 1111, 609, 608, 2294, 1450, 843, 2085,
	1849, 587, 174, 1918, 2257, 821, 2084, 2099, 1363, 174,
	1200, 2309, 2101, 1698, 1360, 823, 1251, 174, 174, 821,
	821, 1282, 1112, 1914, 2328, 2339, 2091, 2085, 2342, 748,
	405, 2332, 2327, 1769, 2084, 2354, 814, 174, 2340, 2338,
	1511, 1691, 174, 1503, 754, 1499, 923, 2350, 2083, 174,
	1060, 2351, 2352, 2349, 988, 1646, 2357, 395, 395, 395,
	2344, 395, 2371, 870, 1925, 1251, 1667, 1052, 1371, 2365,
	724, 723, 1305, 2374, 174, 174, 2083, 2366, 2296, 1680,
	395, 174, 982, 983, 984, 985, 986, 2335, 981, 821,
	2373, 2386, 995, 2311, 174, 1250, 980, 2320, 821, 821,
	710, 2369, 1003, 2384, 861, 823, 860, 1204, 2387, 2389,
	1865, 2487, 2363, 2390, 2376, 2088, 2395, 2396, 2414, 132,
	1111, 174, 574, 174, 1061, 129, 174, 131, 1110, 130,
	1891, 1112, 2321, 2322, 80, 31, 30, 99, 98, 97,
	2411, 2421, 2410, 96, 2423, 95, 94, 93, 92, 2427,
	1111, 91, 90, 89, 174, 88, 87, 2422, 2425, 1284,
	86, 85, 84, 83, 82, 506, 2437, 2439, 2438, 2085,
	503, 174, 79, 2424, 748, 2450, 2084, 174, 2454, 2456,
	78, 28, 24, 103, 23, 2461, 75, 2458, 74, 26,
	2455, 174, 2459, 2460, 16, 1250, 1250, 10, 20, 58,
	59, 2470, 2468, 57, 2474, 56, 1112, 55, 12, 51,
	50, 48, 47, 46, 2478, 1057, 1057, 45, 2083, 8,
	102, 42, 587, 41, 40, 101, 114, 2486, 2485, 2477,
	111, 2491, 1282, 113, 2490, 110, 112, 115, 107, 108,
	109, 106, 105, 37, 36, 35, 34, 2, 395, 2416,
	1, 0, 0, 0, 395, 395, 0, 0, 395, 1284,
	1284, 0, 0, 1570, 0, 0, 1570, 0, 0, 0,
	0, 0, 0, 0, 1854, 0, 0, 0, 0, 0,
	395, 1860, 1861, 0, 0, 822, 1583, 0, 1282, 1868,
	0, 0, 606, 72, 0, 1873, 1874, 1876, 1878, 1879,
	0, 0, 0, 0, 395, 0, 1886, 0, 0, 0,
	1889, 2288, 0, 0, 0, 0, 0, 0, 395, 0,
	0, 0, 0, 0, 0, 0, 1283, 0, 1212, 0,
	1212, 0, 510, 1112, 0, 395, 0, 1282, 0, 1913,
	0, 0, 0, 0, 395, 0, 1923, 0, 2314, 0,
	735, 1082, 0, 395, 0, 72, 0, 0, 587, 587,
	0, 0, 0, 1112, 0, 0, 1691, 0, 0, 0,
	0, 0, 0, 0, 0, 1111, 0, 0, 0, 1691,
	0, 0, 1199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1728, 1729, 0, 0, 0, 0, 0,
	748, 0, 1217, 0, 1217, 0, 0, 0, 0, 567,
	0, 0, 575, 0, 395, 0, 0, 0, 0, 0,
	0, 0, 1361, 0, 1366, 0, 1283, 1283, 736, 72,
	1373, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	1408, 1409, 0, 1415, 1996, 1417, 1418, 1419, 1420, 0,
	1795, 1796, 1797, 0, 0, 0, 0, 0, 0, 2401,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 995,
	0, 0, 1367, 0, 0, 0, 0, 0, 823, 0,
	0, 0, 0, 0, 2417, 2418, 2419, 1281, 1484, 1485,
	0, 0, 1501, 0, 1513, 1515, 1520, 1523, 1524, 1525,
	0, 0, 0, 0, 0, 0, 1772, 1773, 0, 1790,
	1791, 1792, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 2150, 0, 0, 395, 0, 0, 0, 0,
	0, 1570, 0, 0, 0, 0, 0, 0, 0, 0,
	759, 1570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2080, 0, 0, 0, 1787,
	0, 1505, 0, 0, 0, 0, 0, 0, 1112, 0,
	1281, 1111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1583, 0, 1212, 0, 0, 0,
	0, 0, 0, 2116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1247, 0, 0, 0, 0, 0, 0,
	0, 395, 395, 0, 1778, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2142,
	0, 1281, 0, 0, 0, 0, 0, 0, 0, 2144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1793, 0, 0, 0, 735, 0, 0, 1962,
	1963, 0, 0, 0, 0, 0, 0, 1281, 1281, 0,
	0, 0, 735, 1788, 0, 1573, 1281, 1281, 0, 0,
	0, 0, 2167, 748, 0, 0, 0, 0, 748, 822,
	0, 0, 0, 0, 754, 0, 0, 0, 0, 0,
	822, 0, 0, 1247, 1247, 0, 0, 0, 0, 1281,
	0, 0, 575, 0, 0, 0, 0, 0, 2008, 2009,
	2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
	2020, 2021, 2022, 2023, 2024, 2025, 2026, 395, 2030, 0,
	759, 0, 0, 0, 0, 0, 1789, 0, 0, 0,
	0, 1570, 759, 0, 0, 2199, 2200, 1583, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2080, 759, 0, 0, 0, 0, 2233, 0, 2234,
	0, 395, 2236, 2237, 1112, 395, 0, 2241, 0, 0,
	0, 0, 0, 0, 0, 2080, 0, 759, 1617, 0,
	2080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1647, 0, 0, 1250, 0, 0, 0, 0, 0,
	0, 0, 754, 754, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1784, 1785, 1786, 0, 0, 1783, 1781,
	1782, 1774, 1775, 1776, 1777, 1779, 1780, 0, 1250, 0,
	567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1281,
	0, 991, 0, 994, 0, 0, 0, 0, 1284, 0,
	999, 0, 1712, 1713, 0, 0, 0, 1583, 1718, 2295,
	0, 0, 2297, 0, 0, 0, 0, 1250, 0, 0,
	395, 0, 823, 2080, 0, 0, 0, 0, 0, 0,
	0, 0, 1284, 823, 0, 0, 0, 0, 0, 0,
	1737, 0, 0, 0, 0, 0, 0, 1744, 2329, 0,
	1748, 2080, 0, 0, 0, 0, 395, 0, 822, 0,
	0, 0, 0, 759, 1694, 754, 1696, 1762, 748, 0,
	0, 2142, 2142, 0, 0, 0, 0, 0, 1250, 0,
	0, 1284, 0, 0, 0, 0, 0, 1710, 0, 1505,
	1505, 2362, 0, 0, 0, 0, 1570, 0, 0, 0,
	0, 995, 0, 1212, 0, 0, 1111, 0, 1520, 1520,
	1520, 0, 0, 0, 1250, 1250, 0, 0, 0, 0,
	0, 0, 0, 1250, 1250, 0, 72, 0, 2378, 2379,
	0, 1078, 0, 0, 1057, 395, 0, 0, 0, 587,
	0, 0, 1284, 0, 0, 0, 0, 0, 2394, 0,
	0, 0, 0, 0, 0, 0, 1250, 0, 0, 0,
	0, 0, 0, 0, 0, 1283, 1505, 1505, 1505, 0,
	0, 0, 0, 0, 0, 2409, 0, 759, 1284, 1284,
	395, 0, 0, 0, 0, 0, 0, 1284, 1284, 0,
	0, 0, 0, 2080, 0, 0, 0, 0, 0, 1283,
	1281, 0, 0, 0, 0, 0, 0, 0, 2362, 0,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 0,
	1284, 0, 0, 0, 0, 759, 0, 0, 1916, 0,
	0, 395, 0, 0, 0, 0, 0, 2279, 0, 0,
	0, 0, 0, 0, 0, 2467, 0, 0, 1283, 0,
	1934, 822, 0, 0, 0, 735, 1281, 0, 0, 0,
	0, 735, 735, 0, 0, 735, 822, 587, 587, 0,
	0, 823, 0, 0, 0, 0, 0, 0, 2303, 0,
	587, 0, 0, 0, 0, 0, 0, 1859, 0, 0,
	0, 0, 1956, 0, 0, 0, 0, 1373, 72, 0,
	0, 0, 0, 1960, 0, 1281, 1961, 0, 0, 1283,
	0, 1884, 0, 0, 0, 0, 1250, 0, 1966, 1112,
	0, 0, 0, 0, 0, 1896, 567, 1975, 0, 567,
	567, 0, 0, 0, 0, 1979, 0, 0, 1934, 0,
	0, 0, 1907, 0, 2356, 1283, 1283, 0, 0, 0,
	0, 1199, 0, 1111, 1283, 1283, 0, 0, 2003, 0,
	1199, 0, 2005, 0, 0, 0, 0, 0, 1111, 0,
	0, 0, 1433, 0, 0, 1505, 1505, 0, 0, 0,
	1284, 0, 0, 0, 0, 575, 0, 1283, 0, 0,
	994, 0, 0, 0, 0, 2036, 2037, 0, 0, 0,
	0, 822, 0, 0, 2043, 2044, 2045, 0, 0, 0,
	0, 0, 0, 0, 0, 822, 822, 0, 0, 0,
	0, 1958, 0, 0, 0, 1112, 0, 0, 0, 0,
	0, 2056, 0, 0, 1505, 1505, 1505, 1505, 1505, 1505,
	1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
	1505, 1505, 1505, 0, 1505, 0, 0, 736, 0, 0,
	0, 2077, 1247, 0, 823, 0, 0, 0, 0, 0,
	0, 0, 0, 1078, 0, 0, 0, 0, 0, 823,
	0, 0, 0, 0, 0, 822, 72, 0, 0, 0,
	0, 0, 72, 0, 822, 822, 1247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1057, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 0, 1111, 0, 0, 1250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1247, 0, 1283, 0, 0,
	0, 0, 735, 0, 0, 0, 2151, 0, 0, 0,
	2154, 2155, 0, 0, 0, 2157, 1112, 0, 0, 0,
	0, 0, 2159, 0, 2161, 0, 0, 0, 0, 0,
	0, 1112, 0, 1250, 0, 0, 0, 0, 0, 0,
	2168, 1284, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1247, 0, 0, 72,
	0, 72, 0, 0, 823, 0, 0, 0, 0, 0,
	0, 0, 0, 2177, 0, 0, 0, 0, 823, 823,
	72, 0, 1250, 0, 0, 0, 72, 0, 1647, 735,
	0, 0, 1247, 1247, 0, 0, 0, 1284, 0, 0,
	0, 1247, 1247, 0, 0, 1070, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 38, 0, 0, 2223, 0, 0, 0, 0, 0,
	0, 0, 39, 0, 1247, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 43, 1284, 0, 823, 0,
	0, 0, 0, 0, 0, 0, 0, 823, 823, 0,
	0, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 0, 0, 0, 944, 945, 0, 964, 965, 966,
	974, 975, 976, 0, 0, 0, 0, 1112, 72, 0,
	967, 2271, 2272, 0, 0, 0, 60, 947, 0, 0,
	978, 0, 0, 61, 0, 62, 0, 0, 1283, 0,
	0, 0, 0, 0, 735, 0, 0, 0, 0, 0,
	0, 946, 2284, 0, 0, 0, 0, 961, 2287, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 945, 0, 964, 965, 966, 974,
	975, 976, 0, 0, 0, 0, 0, 1433, 2235, 967,
	0, 0, 2239, 0, 1283, 0, 947, 0, 0, 978,
	0, 0, 2319, 0, 0, 0, 0, 994, 0, 0,
	0, 0, 952, 1505, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 0, 1247, 0, 961, 0, 0, 0,
	0, 0, 971, 979, 0, 0, 0, 0, 0, 0,
	0, 0, 65, 1283, 1772, 1773, 0, 1790, 1791, 1792,
	977, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	2149, 0, 0, 0, 0, 969, 0, 120, 67, 0,
	68, 962, 0, 0, 2368, 0, 0, 0, 0, 0,
	0, 952, 994, 133, 0, 0, 0, 0, 0, 0,
	461, 0, 438, 100, 0, 0, 968, 1787, 0, 0,
	0, 971, 979, 0, 0, 0, 0, 2304, 0, 0,
	0, 0, 135, 38, 0, 0, 736, 0, 587, 977,
	1505, 0, 736, 736, 39, 0, 736, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 43, 0, 0,
	962, 0, 0, 2337, 963, 0, 0, 0, 134, 0,
	0, 0, 1778, 0, 0, 0, 127, 0, 0, 49,
	972, 0, 0, 128, 0, 968, 0, 0, 0, 72,
	0, 2436, 2436, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 0, 2451, 60, 0,
	1793, 0, 0, 0, 0, 61, 0, 62, 0, 72,
	0, 0, 72, 0, 0, 2436, 0, 0, 0, 0,
	0, 1788, 575, 963, 0, 0, 0, 0, 0, 0,
	0, 0, 2383, 0, 64, 0, 0, 0, 970, 972,
	0, 958, 959, 960, 973, 1247, 957, 955, 956, 948,
	949, 950, 951, 953, 954, 0, 0, 0, 0, 0,
	0, 2436, 0, 1814, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1789, 0, 0, 0, 0, 0,
	0, 1247, 0, 0, 0, 0, 0, 970, 0, 0,
	958, 959, 960, 973, 65, 957, 955, 956, 948, 949,
	950, 951, 953, 954, 0, 0, 0, 0, 1647, 0,
	0, 0, 1813, 0, 0, 0, 0, 0, 0, 120,
	67, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	1247, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	0, 0, 461, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1784, 1785, 1786, 135, 0, 1783, 1781, 1782, 1774,
	1775, 1776, 1777, 1779, 1780, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 736, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1462, 0, 625, 614, 615, 612, 613, 604,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 1459, 178, 0, 0, 0, 0, 642, 607,
	736, 0, 0, 179, 180, 181, 332, 657, 334, 658,
	182, 659, 660, 0, 183, 338, 339, 184, 185, 610,
	641, 661, 662, 342, 0, 186, 653, 0, 633, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	687, 194, 195, 196, 0, 634, 635, 637, 0, 636,
	638, 197, 198, 396, 199, 663, 200, 664, 665, 0,
	201, 0, 202, 0, 203, 1460, 0, 656, 205, 0,
	206, 0, 0, 0, 598, 207, 208, 209, 643, 644,
	621, 0, 0, 210, 211, 666, 667, 668, 0, 212,
	0, 213, 0, 0, 688, 0, 214, 654, 0, 354,
	0, 0, 215, 216, 217, 218, 650, 652, 690, 0,
	222, 0, 219, 0, 689, 220, 669, 221, 670, 671,
	672, 673, 674, 0, 632, 736, 691, 223, 224, 225,
	692, 226, 227, 228, 0, 230, 229, 0, 655, 693,
	231, 694, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 695, 239, 240, 242, 241, 593,
	0, 622, 651, 243, 675, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 696, 249, 697, 645,
	250, 251, 252, 253, 254, 0, 255, 646, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 676, 263, 264,
	72, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 698, 278, 279, 599, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 639, 292, 281, 282, 293, 699, 294, 677, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 678, 299,
	300, 647, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 679, 680, 0, 0, 311, 312,
	648, 649, 620, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 640, 321, 0, 384, 322, 323, 324,
	385, 681, 1458, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 1461, 0, 0,
	0, 1109, 72, 0, 600, 1456, 0, 0, 0, 0,
	603, 0, 0, 0, 0, 2345, 0, 176, 177, 1114,
	178, 1115, 1116, 1117, 1118, 331, 1119, 1120, 1121, 1122,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	1123, 183, 338, 339, 184, 185, 1124, 1125, 340, 341,
	342, 1126, 186, 343, 1127, 825, 1128, 187, 188, 189,
	0, 190, 1129, 191, 192, 193, 1130, 687, 194, 195,
	196, 1131, 1132, 1134, 1133, 1135, 1136, 1137, 197, 198,
	396, 199, 344, 200, 345, 346, 1138, 201, 1139, 202,
	1140, 203, 1141, 1142, 204, 205, 1143, 206, 1144, 994,
	1145, 347, 207, 208, 209, 348, 349, 1146, 1147, 1148,
	210, 211, 350, 351, 352, 0, 212, 1149, 213, 1150,
	1151, 688, 1152, 214, 353, 1153, 354, 1154, 0, 215,
	216, 217, 218, 355, 356, 690, 1155, 222, 1156, 219,
	1157, 689, 220, 357, 221, 358, 359, 360, 361, 362,
	1158, 363, 1159, 691, 223, 224, 225, 692, 226, 227,
	228, 1160, 230, 229, 1161, 364, 693, 231, 694, 1162,
	232, 1163, 1164, 233, 0, 234, 235, 236, 238, 365,
	237, 695, 239, 240, 242, 241, 1165, 1166, 1167, 366,
	243, 367, 244, 245, 1168, 246, 1169, 1170, 247, 1171,
	1172, 248, 368, 696, 249, 697, 369, 250, 251, 252,
	253, 254, 1173, 255, 370, 256, 371, 257, 1174, 258,
	259, 260, 261, 262, 372, 263, 264, 1175, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	1176, 277, 698, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 1177, 289, 374, 288, 290, 291, 1178, 292,
	281, 282, 293, 699, 294, 375, 376, 295, 1179, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 1180,
	303, 1181, 304, 305, 306, 307, 308, 309, 310, 1182,
	379, 380, 381, 1183, 1184, 311, 312, 382, 383, 1185,
	313, 314, 315, 316, 1186, 1187, 317, 318, 319, 320,
	1188, 321, 1189, 384, 322, 323, 324, 385, 386, 1190,
	1191, 325, 1192, 1193, 1194, 1195, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1109, 0, 0, 0, 0, 0, 1563,
	0, 0, 0, 0, 0, 0, 0, 0, 1564, 176,
	177, 1114, 178, 1115, 1116, 1117, 1118, 331, 1119, 1120,
	1121, 1122, 179, 180, 181, 332, 333, 334, 335, 182,
	336, 337, 1123, 183, 338, 339, 184, 185, 1124, 1125,
	340, 341, 342, 1126, 186, 343, 1127, 825, 1128, 187,
	188, 189, 0, 190, 1129, 191, 192, 193, 1130, 687,
	194, 195, 196, 1131, 1132, 1134, 1133, 1135, 1136, 1137,
	197, 198, 396, 199, 344, 200, 345, 346, 1138, 201,
	1139, 202, 1140, 203, 1141, 1142, 204, 205, 1143, 206,
	1144, 0, 1145, 347, 207, 208, 209, 348, 349, 1146,
	1147, 1148, 210, 211, 350, 351, 352, 0, 212, 1149,
	213, 1150, 1151, 688, 1152, 214, 353, 1153, 354, 1154,
	0, 215, 216, 217, 218, 355, 356, 690, 1155, 222,
	1156, 219, 1157, 689, 220, 357, 221, 358, 359, 360,
	361, 362, 1158, 363, 1159, 691, 223, 224, 225, 692,
	226, 227, 228, 1160, 230, 229, 1161, 364, 693, 231,
	694, 1162, 232, 1163, 1164, 233, 0, 234, 235, 236,
	238, 365, 237, 695, 239, 240, 242, 241, 1165, 1166,
	1167, 366, 243, 367, 244, 245, 1168, 246, 1169, 1170,
	247, 1171, 1172, 248, 368, 696, 249, 697, 369, 250,
	251, 252, 253, 254, 1173, 255, 370, 256, 371, 257,
	1174, 258, 259, 260, 261, 262, 372, 263, 264, 1175,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 1176, 277, 698, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 1177, 289, 374, 288, 290, 291,
	1178, 292, 281, 282, 293, 699, 294, 375, 376, 295,
	1179, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 1180, 303, 1181, 304, 305, 306, 307, 308, 309,
	310, 1182, 379, 380, 381, 1183, 1184, 311, 312, 382,
	383, 1185, 313, 314, 315, 316, 1186, 1187, 317, 318,
	319, 320, 1188, 321, 1189, 384, 322, 323, 324, 385,
	386, 1190, 1191, 325, 1192, 1193, 1194, 1195, 326, 327,
	328, 329, 330, 0, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2195, 176, 177, 1114, 178, 1115, 1116, 1117, 1118,
	331, 1119, 1120, 1121, 1122, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 1123, 183, 338, 339, 184,
	185, 1124, 1125, 340, 341, 342, 1126, 186, 343, 1127,
	825, 1128, 187, 188, 189, 0, 190, 1129, 191, 192,
	193, 1130, 687, 194, 195, 196, 1131, 1132, 1134, 1133,
	1135, 1136, 1137, 197, 198, 396, 199, 344, 200, 345,
	346, 1138, 201, 1139, 202, 1140, 203, 1141, 1142, 204,
	205, 1143, 206, 1144, 0, 1145, 347, 207, 208, 209,
	348, 349, 1146, 1147, 1148, 210, 211, 350, 351, 352,
	0, 212, 1149, 213, 1150, 1151, 688, 1152, 214, 353,
	1153, 354, 1154, 0, 215, 216, 217, 218, 355, 356,
	690, 1155, 222, 1156, 219, 1157, 689, 220, 357, 221,
	358, 359, 360, 361, 362, 1158, 363, 1159, 691, 223,
	224, 225, 692, 226, 227, 228, 1160, 230, 229, 1161,
	364, 693, 231, 694, 1162, 232, 1163, 1164, 233, 0,
	234, 235, 236, 238, 365, 237, 695, 239, 240, 242,
	241, 1165, 1166, 1167, 366, 243, 367, 244, 245, 1168,
	246, 1169, 1170, 247, 1171, 1172, 248, 368, 696, 249,
	697, 369, 250, 251, 252, 253, 254, 1173, 255, 370,
	256, 371, 257, 1174, 258, 259, 260, 261, 262, 372,
	263, 264, 1175, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 1176, 277, 698, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 1177, 289, 374,
	288, 290, 291, 1178, 292, 281, 282, 293, 699, 294,
	375, 376, 295, 1179, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 1180, 303, 1181, 304, 305, 306,
	307, 308, 309, 310, 1182, 379, 380, 381, 1183, 1184,
	311, 312, 382, 383, 1185, 313, 314, 315, 316, 1186,
	1187, 317, 318, 319, 320, 1188, 321, 1189, 384, 322,
	323, 324, 385, 386, 1190, 1191, 325, 1192, 1193, 1194,
	1195, 326, 327, 328, 329, 330, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1108,
	0, 0, 176, 177, 1114, 178, 1115, 1116, 1117, 1118,
	331, 1119, 1120, 1121, 1122, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 1123, 183, 338, 339, 184,
	185, 1124, 1125, 340, 341, 342, 1126, 186, 343, 1127,
	825, 1128, 187, 188, 189, 0, 190, 1129, 191, 192,
	193, 1130, 687, 194, 195, 196, 1131, 1132, 1134, 1133,
	1135, 1136, 1137, 197, 198, 396, 199, 344, 200, 345,
	346, 1138, 201, 1139, 202, 1140, 203, 1141, 1142, 204,
	205, 1143, 206, 1144, 0, 1145, 347, 207, 208, 209,
	348, 349, 1146, 1147, 1148, 210, 211, 350, 351, 352,
	0, 212, 1149, 213, 1150, 1151, 688, 1152, 214, 353,
	1153, 354, 1154, 0, 215, 216, 217, 218, 355, 356,
	690, 1155, 222, 1156, 219, 1157, 689, 220, 357, 221,
	358, 359, 360, 361, 362, 1158, 363, 1159, 691, 223,
	224, 225, 692, 226, 227, 228, 1160, 230, 229, 1161,
	364, 693, 231, 694, 1162, 232, 1163, 1164, 233, 0,
	234, 235, 236, 238, 365, 237, 695, 239, 240, 242,
	241, 1165, 1166, 1167, 366, 243, 367, 244, 245, 1168,
	246, 1169, 1170, 247, 1171, 1172, 248, 368, 696, 249,
	697, 369, 250, 251, 252, 253, 254, 1173, 255, 370,
	256, 371, 257, 1174, 258, 259, 260, 261, 262, 372,
	263, 264, 1175, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 1176, 277, 698, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 1177, 289, 374,
	288, 290, 291, 1178, 292, 281, 282, 293, 699, 294,
	375, 376, 295, 1179, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 1180, 303, 1181, 304, 305, 306,
	307, 308, 309, 310, 1182, 379, 380, 381, 1183, 1184,
	311, 312, 382, 383, 1185, 313, 314, 315, 316, 1186,
	1187, 317, 318, 319, 320, 1188, 321, 1189, 384, 322,
	323, 324, 385, 386, 1190, 1191, 325, 1192, 1193, 1194,
	1195, 326, 327, 328, 329, 330, 625, 614, 615, 612,
	613, 604, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	642, 607, 0, 0, 0, 179, 180, 181, 332, 657,
	334, 658, 182, 659, 660, 0, 183, 338, 339, 184,
	185, 610, 641, 661, 662, 342, 0, 186, 653, 0,
	633, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 687, 194, 195, 196, 0, 634, 635, 637,
	0, 636, 638, 197, 198, 396, 199, 663, 200, 664,
	665, 588, 201, 0, 202, 0, 203, 0, 0, 656,
	205, 0, 206, 0, 0, 0, 598, 207, 208, 209,
	643, 644, 621, 0, 0, 210, 211, 666, 667, 668,
	0, 212, 0, 213, 0, 0, 688, 0, 214, 654,
	0, 354, 0, 0, 215, 216, 217, 218, 650, 652,
	690, 0, 222, 0, 219, 0, 689, 220, 669, 221,
	670, 671, 672, 673, 674, 0, 632, 0, 691, 223,
	224, 225, 692, 226, 227, 228, 0, 230, 229, 0,
	655, 693, 231, 694, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 695, 239, 240, 242,
	241, 593, 0, 622, 651, 243, 675, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 696, 249,
	697, 645, 250, 251, 252, 253, 254, 0, 255, 646,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 676,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 698, 278, 279,
	599, 280, 0, 284, 285, 286, 287, 133, 289, 374,
	288, 290, 291, 639, 292, 281, 282, 293, 699, 294,
	677, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	678, 299, 300, 647, 0, 303, 135, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 679, 680, 0, 0,
	311, 312, 648, 649, 620, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 640, 321, 0, 384, 322,
	323, 324, 824, 681, 0, 0, 325, 0, 0, 0,
	127, 326, 327, 328, 329, 330, 594, 128, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 590, 591, 0,
	0, 0, 0, 0, 0, 0, 997, 0, 0, 0,
	0, 576, 603, 625, 614, 615, 612, 613, 604, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 642, 607, 0,
	0, 0, 179, 180, 181, 332, 657, 334, 658, 182,
	659, 660, 0, 183, 338, 339, 184, 185, 610, 641,
	661, 662, 342, 0, 186, 653, 0, 633, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 687,
	194, 195, 196, 0, 634, 635, 637, 0, 636, 638,
	197, 198, 396, 199, 663, 200, 664, 665, 0, 201,
	0, 202, 0, 203, 0, 0, 656, 205, 0, 206,
	0, 0, 0, 598, 207, 208, 209, 643, 644, 621,
	0, 0, 210, 211, 666, 667, 668, 0, 212, 0,
	213, 0, 0, 688, 0, 214, 654, 0, 354, 0,
	0, 215, 216, 217, 218, 650, 652, 690, 0, 222,
	0, 219, 0, 689, 220, 669, 221, 670, 671, 672,
	673, 674, 0, 632, 0, 691, 223, 224, 225, 692,
	226, 227, 228, 0, 230, 229, 0, 655, 693, 231,
	694, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 695, 239, 240, 242, 241, 593, 0,
	622, 651, 243, 675, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 696, 249, 697, 645, 250,
	251, 252, 253, 254, 0, 255, 646, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 676, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 698, 278, 279, 599, 280, 0,
	284, 285, 286, 287, 133, 289, 374, 288, 290, 291,
	639, 292, 281, 282, 293, 699, 294, 677, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 678, 299, 300,
	647, 0, 303, 135, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 679, 680, 0, 0, 311, 312, 648,
	649, 620, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 640, 321, 0, 384, 322, 323, 324, 824,
	681, 0, 0, 325, 0, 0, 0, 127, 326, 327,
	328, 329, 330, 594, 128, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 590, 591, 625, 614, 615, 612,
	613, 604, 0, 997, 0, 0, 0, 0, 0, 603,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	642, 607, 0, 0, 0, 179, 180, 181, 332, 657,
	334, 658, 182, 659, 660, 0, 183, 338, 339, 184,
	185, 610, 641, 661, 662, 342, 0, 186, 653, 0,
	633, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 687, 194, 195, 196, 0, 634, 635, 637,
	0, 636, 638, 197, 198, 396, 199, 663, 200, 664,
	665, 0, 201, 0, 202, 0, 203, 0, 0, 656,
	205, 0, 206, 0, 0, 0, 598, 207, 208, 209,
	643, 644, 621, 0, 0, 210, 211, 666, 667, 668,
	0, 212, 0, 213, 0, 0, 688, 0, 214, 654,
	0, 354, 0, 0, 215, 216, 217, 218, 650, 652,
	690, 0, 222, 0, 219, 0, 689, 220, 669, 221,
	670, 671, 672, 673, 674, 0, 632, 0, 691, 223,
	224, 225, 692, 226, 227, 228, 0, 230, 229, 0,
	655, 693, 231, 694, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 695, 239, 240, 242,
	241, 593, 0, 622, 651, 243, 675, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 696, 249,
	697, 645, 250, 251, 252, 253, 254, 0, 255, 646,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 676,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 698, 278, 279,
	599, 280, 0, 284, 285, 286, 287, 133, 289, 374,
	288, 290, 291, 639, 292, 281, 282, 293, 699, 294,
	677, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	678, 299, 300, 647, 0, 303, 135, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 679, 680, 0, 0,
	311, 312, 648, 649, 620, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 640, 321, 0, 384, 322,
	323, 324, 824, 681, 0, 0, 325, 0, 0, 0,
	127, 326, 327, 328, 329, 330, 594, 128, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 590, 591, 625,
	614, 615, 612, 613, 604, 0, 997, 0, 0, 0,
	0, 0, 603, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 642, 607, 0, 0, 0, 179, 180,
	181, 332, 657, 334, 658, 182, 659, 660, 1516, 183,
	338, 339, 184, 185, 610, 641, 661, 662, 342, 0,
	186, 653, 0, 633, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 687, 194, 195, 196, 0,
	634, 635, 637, 0, 636, 638, 197, 198, 396, 199,
	663, 200, 664, 665, 0, 201, 0, 202, 0, 203,
	0, 0, 656, 205, 0, 206, 0, 0, 0, 598,
	207, 208, 209, 643, 644, 621, 0, 0, 210, 211,
	666, 667, 668, 0, 212, 0, 213, 0, 1521, 688,
	0, 214, 654, 0, 354, 0, 0, 215, 216, 217,
	218, 650, 652, 690, 0, 222, 0, 219, 0, 689,
	220, 669, 221, 670, 671, 672, 673, 674, 0, 632,
	0, 691, 223, 224, 225, 692, 226, 227, 228, 0,
	230, 229, 1517, 655, 693, 231, 694, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 695,
	239, 240, 242, 241, 593, 0, 622, 651, 243, 675,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 696, 249, 697, 645, 250, 251, 252, 253, 254,
	0, 255, 646, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 676, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	698, 278, 279, 599, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 639, 292, 281, 282,
	293, 699, 294, 677, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 678, 299, 300, 647, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 679,
	680, 0, 1518, 311, 312, 648, 649, 620, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 640, 321,
	0, 384, 322, 323, 324, 385, 681, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 594,
	0, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	590, 591, 0, 0, 0, 0, 0, 0, 0, 600,
	0, 0, 0, 0, 584, 603, 625, 614, 615, 612,
	613, 604, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	642, 607, 0, 0, 0, 179, 180, 181, 332, 657,
	334, 658, 182, 659, 660, 0, 183, 338, 339, 184,
	185, 610, 641, 661, 662, 342, 0, 186, 653, 0,
	633, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 687, 194, 195, 196, 0, 634, 635, 637,
	0, 636, 638, 197, 198, 396, 199, 663, 200, 664,
	665, 588, 201, 0, 202, 0, 203, 0, 0, 656,
	205, 0, 206, 0, 0, 0, 598, 207, 208, 209,
	643, 644, 621, 0, 0, 210, 211, 666, 667, 668,
	0, 212, 0, 213, 0, 0, 688, 0, 214, 654,
	0, 354, 0, 0, 215, 216, 217, 218, 650, 652,
	690, 0, 222, 0, 219, 0, 689, 220, 669, 221,
	670, 671, 672, 673, 674, 0, 632, 0, 691, 223,
	224, 225, 692, 226, 227, 228, 0, 230, 229, 0,
	655, 693, 231, 694, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 695, 239, 240, 242,
	241, 593, 0, 622, 651, 243, 675, 244, 245, 0,
	246, 586, 0, 247, 0, 0, 248, 368, 696, 249,
	697, 645, 250, 251, 252, 253, 254, 0, 255, 646,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 676,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 698, 278, 279,
	599, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 639, 292, 281, 282, 293, 699, 294,
	677, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	678, 299, 300, 647, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 679, 680, 0, 0,
	311, 312, 648, 649, 620, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 640, 321, 0, 384, 322,
	323, 324, 385, 681, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 594, 0, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 590, 591, 625,
	614, 615, 612, 613, 604, 0, 600, 0, 0, 0,
	0, 0, 603, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 642, 607, 0, 0, 0, 179, 180,
	181, 332, 657, 334, 658, 182, 659, 660, 0, 183,
	338, 339, 184, 185, 610, 641, 661, 662, 342, 0,
	186, 653, 0, 633, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 687, 194, 195, 196, 0,
	634, 635, 637, 0, 636, 638, 197, 198, 396, 199,
	663, 200, 664, 665, 0, 201, 0, 202, 0, 203,
	0, 0, 656, 205, 0, 206, 0, 0, 0, 598,
	207, 208, 209, 643, 644, 621, 0, 0, 210, 211,
	666, 667, 668, 0, 212, 0, 213, 0, 0, 688,
	0, 214, 654, 0, 354, 0, 0, 215, 216, 217,
	218, 650, 652, 690, 0, 222, 0, 219, 0, 689,
	220, 669, 221, 670, 671, 672, 673, 674, 0, 632,
	0, 691, 223, 224, 225, 692, 226, 227, 228, 0,
	230, 229, 0, 655, 693, 231, 694, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 695,
	239, 240, 242, 241, 593, 2125, 622, 651, 243, 675,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 696, 249, 697, 645, 250, 251, 252, 253, 254,
	0, 255, 646, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 676, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	698, 278, 279, 599, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 639, 292, 281, 282,
	293, 699, 294, 677, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 678, 299, 300, 647, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 679,
	680, 0, 0, 311, 312, 648, 649, 620, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 640, 321,
	0, 384, 322, 323, 324, 385, 681, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 594,
	0, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	590, 591, 1058, 625, 614, 615, 612, 613, 604, 600,
	0, 0, 0, 0, 0, 603, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 642, 607, 0,
	0, 0, 179, 180, 181, 332, 657, 334, 658, 182,
	659, 660, 0, 183, 338, 339, 184, 185, 610, 641,
	661, 662, 342, 0, 186, 653, 0, 633, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 687,
	194, 195, 196, 0, 634, 635, 637, 0, 636, 638,
	197, 198, 396, 199, 663, 200, 664, 665, 0, 201,
	0, 202, 0, 203, 0, 0, 656, 205, 0, 206,
	0, 0, 0, 598, 207, 208, 209, 643, 644, 621,
	0, 0, 210, 211, 666, 667, 668, 0, 212, 0,
	213, 0, 0, 688, 0, 214, 654, 0, 354, 0,
	0, 215, 216, 217, 218, 650, 652, 690, 0, 222,
	1375, 219, 0, 689, 220, 669, 221, 670, 671, 672,
	673, 674, 0, 632, 0, 691, 223, 224, 225, 692,
	226, 227, 228, 0, 230, 229, 0, 655, 693, 231,
	694, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 695, 239, 240, 242, 241, 593, 0,
	622, 651, 243, 675, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 696, 249, 697, 645, 250,
	251, 252, 253, 254, 0, 255, 646, 256, 371, 257,
	1374, 258, 259, 260, 261, 262, 676, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 698, 278, 279, 599, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	639, 292, 281, 282, 293, 699, 294, 677, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 678, 299, 300,
	647, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 679, 680, 0, 0, 311, 312, 648,
	649, 620, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 640, 321, 0, 384, 322, 323, 324, 385,
	681, 0, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 594, 0, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 590, 591, 625, 614, 615, 612,
	613, 604, 0, 600, 0, 0, 0, 0, 0, 603,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	642, 607, 0, 0, 0, 179, 180, 181, 332, 657,
	334, 658, 182, 659, 660, 0, 183, 338, 339, 184,
	185, 610, 641, 661, 662, 342, 0, 186, 653, 0,
	633, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 687, 194, 195, 196, 0, 634, 635, 637,
	0, 636, 638, 197, 198, 396, 199, 663, 200, 664,
	665, 588, 201, 0, 202, 0, 203, 0, 0, 656,
	205, 0, 206, 0, 0, 0, 598, 207, 208, 209,
	643, 644, 621, 0, 0, 210, 211, 666, 667, 668,
	0, 212, 0, 213, 0, 0, 688, 0, 214, 654,
	0, 354, 0, 0, 215, 216, 217, 218, 650, 652,
	690, 0, 222, 0, 219, 0, 689, 220, 669, 221,
	670, 671, 672, 673, 674, 0, 632, 0, 691, 223,
	224, 225, 692, 226, 227, 228, 0, 230, 229, 0,
	655, 693, 231, 694, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 695, 239, 240, 242,
	241, 593, 0, 622, 651, 243, 675, 244, 245, 0,
	246, 586, 0, 247, 0, 0, 248, 368, 696, 249,
	697, 645, 250, 251, 252, 253, 254, 0, 255, 646,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 676,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 698, 278, 279,
	599, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 639, 292, 281, 282, 293, 699, 294,
	677, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	678, 299, 300, 647, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 679, 680, 0, 0,
	311, 312, 648, 649, 620, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 640, 321, 0, 384, 322,
	323, 324, 385, 681, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 594, 0, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 590, 591, 625,
	614, 615, 612, 613, 604, 0, 600, 0, 0, 0,
	0, 0, 603, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 642, 607, 0, 0, 0, 179, 180,
	181, 332, 657, 334, 658, 182, 659, 660, 0, 183,
	338, 339, 184, 185, 610, 641, 661, 662, 342, 0,
	186, 653, 0, 633, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 687, 194, 195, 196, 0,
	634, 635, 637, 0, 636, 638, 197, 198, 396, 199,
	663, 200, 664, 665, 0, 201, 0, 202, 0, 203,
	0, 0, 656, 205, 0, 206, 0, 0, 0, 598,
	207, 208, 209, 643, 644, 621, 0, 0, 210, 211,
	666, 667, 668, 0, 212, 0, 213, 0, 0, 688,
	0, 214, 654, 0, 354, 0, 0, 215, 216, 217,
	218, 650, 652, 690, 0, 222, 0, 219, 0, 689,
	220, 669, 221, 670, 671, 672, 673, 674, 0, 632,
	0, 691, 223, 224, 225, 692, 226, 227, 228, 0,
	230, 229, 0, 655, 693, 231, 694, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 695,
	239, 240, 242, 241, 593, 0, 622, 651, 243, 675,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 696, 249, 697, 645, 250, 251, 252, 253, 254,
	0, 255, 646, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 676, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	698, 278, 279, 599, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 639, 292, 281, 282,
	293, 699, 294, 677, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 678, 299, 300, 647, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 679,
	680, 0, 0, 311, 312, 648, 649, 620, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 640, 321,
	0, 384, 322, 323, 324, 385, 681, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 594,
	0, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	590, 591, 0, 0, 0, 0, 0, 1001, 1451, 600,
	0, 0, 0, 0, 0, 603, 625, 614, 615, 612,
	613, 604, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	642, 607, 0, 0, 0, 179, 180, 181, 332, 657,
	334, 658, 182, 659, 660, 0, 183, 338, 339, 184,
	185, 610, 641, 661, 662, 342, 0, 186, 653, 0,
	633, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 687, 194, 195, 196, 0, 634, 635, 637,
	0, 636, 638, 197, 198, 396, 199, 663, 200, 664,
	665, 588, 201, 0, 202, 0, 203, 0, 0, 656,
	205, 0, 206, 0, 0, 0, 598, 207, 208, 209,
	643, 644, 621, 0, 0, 210, 211, 666, 667, 668,
	0, 212, 0, 213, 0, 0, 688, 0, 214, 654,
	0, 354, 0, 0, 215, 216, 217, 218, 650, 652,
	690, 0, 222, 0, 219, 0, 689, 220, 669, 221,
	670, 671, 672, 673, 674, 0, 632, 0, 691, 223,
	224, 225, 692, 226, 227, 228, 0, 230, 229, 0,
	655, 693, 231, 694, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 695, 239, 240, 242,
	241, 593, 0, 622, 651, 243, 675, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 696, 249,
	697, 645, 250, 251, 252, 253, 254, 0, 255, 646,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 676,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 698, 278, 279,
	599, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 639, 292, 281, 282, 293, 699, 294,
	677, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	678, 299, 300, 647, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 679, 680, 0, 0,
	311, 312, 648, 649, 620, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 640, 321, 0, 384, 322,
	323, 324, 385, 681, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 594, 0, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 590, 591, 625,
	614, 615, 612, 613, 604, 0, 600, 0, 0, 0,
	0, 0, 603, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 642, 607, 0, 0, 0, 179, 180,
	181, 332, 657, 334, 658, 182, 659, 660, 0, 183,
	338, 339, 184, 185, 610, 641, 661, 662, 342, 0,
	186, 653, 0, 633, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 687, 194, 195, 196, 0,
	634, 635, 637, 0, 636, 638, 197, 198, 396, 199,
	663, 200, 664, 665, 0, 201, 0, 202, 0, 203,
	0, 0, 656, 205, 0, 206, 0, 0, 0, 598,
	207, 208, 209, 643, 644, 621, 0, 0, 210, 211,
	666, 667, 668, 0, 212, 0, 213, 0, 0, 688,
	0, 214, 654, 0, 354, 0, 0, 215, 216, 217,
	218, 650, 652, 690, 0, 222, 0, 219, 0, 689,
	220, 669, 221, 670, 671, 672, 673, 674, 0, 632,
	0, 691, 223, 224, 225, 692, 226, 227, 228, 0,
	230, 229, 0, 655, 693, 231, 694, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 695,
	239, 240, 242, 241, 593, 0, 622, 651, 243, 675,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 696, 249, 697, 645, 250, 251, 252, 253, 254,
	0, 255, 646, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 676, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	698, 278, 279, 599, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 639, 292, 281, 282,
	293, 699, 294, 677, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 678, 299, 300, 647, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 679,
	680, 0, 0, 311, 312, 648, 649, 620, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 640, 321,
	0, 384, 322, 323, 324, 385, 681, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 594,
	0, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	590, 591, 625, 614, 615, 612, 613, 604, 0, 600,
	2033, 0, 0, 0, 0, 603, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 642, 607, 0, 0,
	0, 179, 180, 181, 332, 657, 334, 658, 182, 659,
	660, 0, 183, 338, 339, 184, 185, 610, 641, 661,
	662, 342, 0, 186, 653, 0, 633, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 687, 194,
	195, 196, 0, 634, 635, 637, 0, 636, 638, 197,
	198, 396, 199, 663, 200, 664, 665, 0, 201, 0,
	202, 0, 203, 0, 0, 656, 205, 0, 206, 0,
	0, 0, 598, 207, 208, 209, 643, 644, 621, 0,
	0, 210, 211, 666, 667, 668, 0, 212, 0, 213,
	0, 0, 688, 0, 214, 654, 0, 354, 0, 0,
	215, 216, 217, 218, 650, 652, 690, 0, 222, 0,
	219, 0, 689, 220, 669, 221, 670, 671, 672, 673,
	674, 0, 632, 0, 691, 223, 224, 225, 692, 226,
	227, 228, 0, 230, 229, 0, 655, 693, 231, 694,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 695, 239, 240, 242, 241, 593, 0, 622,
	651, 243, 675, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 696, 249, 697, 645, 250, 251,
	252, 253, 254, 0, 255, 646, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 676, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 698, 278, 279, 599, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 639,
	292, 281, 282, 293, 699, 294, 677, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 678, 299, 300, 647,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 679, 680, 0, 0, 311, 312, 648, 649,
	620, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 640, 321, 0, 384, 322, 323, 324, 385, 681,
	1982, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 594, 0, 0, 0, 0, 0, 592, 0,
	0, 0, 0, 590, 591, 625, 614, 615, 612, 613,
	604, 0, 600, 0, 0, 0, 0, 0, 603, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 642,
	607, 0, 0, 0, 179, 180, 181, 332, 657, 334,
	658, 182, 659, 660, 0, 183, 338, 339, 184, 185,
	610, 641, 661, 662, 342, 0, 186, 653, 0, 633,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 687, 194, 195, 196, 0, 634, 635, 637, 0,
	636, 638, 197, 198, 396, 199, 663, 200, 664, 665,
	0, 201, 0, 202, 0, 203, 0, 0, 656, 205,
	0, 206, 0, 0, 0, 598, 207, 208, 209, 643,
	644, 621, 0, 0, 210, 211, 666, 667, 668, 0,
	212, 0, 213, 0, 0, 688, 0, 214, 654, 0,
	354, 0, 0, 215, 216, 217, 218, 650, 652, 690,
	0, 222, 0, 219, 0, 689, 220, 669, 221, 670,
	671, 672, 673, 674, 0, 632, 0, 691, 223, 224,
	225, 692, 226, 227, 228, 0, 230, 229, 0, 655,
	693, 231, 694, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 695, 239, 240, 242, 241,
	593, 0, 622, 651, 243, 675, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 696, 249, 697,
	645, 250, 251, 252, 253, 254, 0, 255, 646, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 676, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 698, 278, 279, 599,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 639, 292, 281, 282, 293, 699, 294, 677,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 678,
	299, 300, 647, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 679, 680, 0, 0, 311,
	312, 648, 649, 620, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 640, 321, 0, 384, 322, 323,
	324, 385, 681, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 594, 0, 0, 0, 0,
	0, 592, 0, 0, 0, 0, 590, 591, 625, 614,
	615, 612, 613, 604, 0, 600, 1972, 0, 0, 0,
	0, 603, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 642, 607, 0, 0, 0, 179, 180, 181,
	332, 657, 334, 658, 182, 659, 660, 0, 183, 338,
	339, 184, 185, 610, 641, 661, 662, 342, 0, 186,
	653, 0, 633, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 687, 194, 195, 196, 0, 634,
	635, 637, 0, 636, 638, 197, 198, 396, 199, 663,
	200, 664, 665, 0, 201, 0, 202, 0, 203, 0,
	0, 656, 205, 0, 206, 0, 0, 0, 598, 207,
	208, 209, 643, 644, 621, 0, 0, 210, 211, 666,
	667, 668, 0, 212, 0, 213, 0, 0, 688, 0,
	214, 654, 0, 354, 0, 0, 215, 216, 217, 218,
	650, 652, 690, 0, 222, 0, 219, 0, 689, 220,
	669, 221, 670, 671, 672, 673, 674, 0, 632, 0,
	691, 223, 224, 225, 692, 226, 227, 228, 0, 230,
	229, 0, 655, 693, 231, 694, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 695, 239,
	240, 242, 241, 593, 0, 622, 651, 243, 675, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	696, 249, 697, 645, 250, 251, 252, 253, 254, 0,
	255, 646, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 676, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 698,
	278, 279, 599, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 639, 292, 281, 282, 293,
	699, 294, 677, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 678, 299, 300, 647, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 679, 680,
	0, 0, 311, 312, 648, 649, 620, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 640, 321, 0,
	384, 322, 323, 324, 385, 681, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 594, 0,
	0, 0, 0, 0, 592, 0, 0, 0, 0, 590,
	591, 1058, 625, 614, 615, 612, 613, 604, 600, 0,
	0, 0, 0, 0, 603, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 642, 607, 0, 0,
	0, 179, 180, 181, 332, 657, 334, 658, 182, 659,
	660, 0, 183, 338, 339, 184, 185, 610, 641, 661,
	662, 342, 0, 186, 653, 0, 633, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 687, 194,
	195, 196, 0, 634, 635, 637, 0, 636, 638, 197,
	198, 396, 199, 663, 200, 664, 665, 0, 201, 0,
	202, 0, 203, 0, 0, 656, 205, 0, 206, 0,
	0, 0, 598, 207, 208, 209, 643, 644, 621, 0,
	0, 210, 211, 666, 667, 668, 0, 212, 0, 213,
	0, 1521, 688, 0, 214, 654, 0, 354, 0, 0,
	215, 216, 217, 218, 650, 652, 690, 0, 222, 0,
	219, 0, 689, 220, 669, 221, 670, 671, 672, 673,
	674, 0, 632, 0, 691, 223, 224, 225, 692, 226,
	227, 228, 0, 230, 229, 0, 655, 693, 231, 694,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 695, 239, 240, 242, 241, 593, 0, 622,
	651, 243, 675, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 696, 249, 697, 645, 250, 251,
	252, 253, 254, 0, 255, 646, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 676, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 698, 278, 279, 599, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 639,
	292, 281, 282, 293, 699, 294, 677, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 678, 299, 300, 647,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 679, 680, 0, 0, 311, 312, 648, 649,
	620, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 640, 321, 0, 384, 322, 323, 324, 385, 681,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 594, 0, 0, 0, 0, 0, 592, 0,
	0, 0, 0, 590, 591, 0, 0, 0, 0, 0,
	0, 0, 600, 0, 0, 0, 0, 1566, 603, 625,
	614, 615, 612, 613, 604, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 642, 607, 0, 0, 0, 179, 180,
	181, 332, 657, 334, 658, 182, 659, 660, 0, 183,
	338, 339, 184, 185, 610, 641, 661, 662, 342, 0,
	186, 653, 0, 633, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 687, 194, 195, 196, 0,
	634, 635, 637, 0, 636, 638, 197, 198, 396, 199,
	663, 200, 664, 665, 0, 201, 0, 202, 0, 203,
	0, 0, 656, 205, 0, 206, 0, 0, 0, 598,
	207, 208, 209, 643, 644, 621, 0, 0, 210, 211,
	666, 667, 668, 0, 212, 0, 213, 0, 0, 688,
	0, 214, 654, 0, 354, 0, 0, 215, 216, 217,
	218, 650, 652, 690, 0, 222, 0, 219, 0, 689,
	220, 669, 221, 670, 671, 672, 673, 674, 0, 632,
	0, 691, 223, 224, 225, 692, 226, 227, 228, 0,
	230, 229, 0, 655, 693, 231, 694, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 695,
	239, 240, 242, 241, 593, 0, 622, 651, 243, 675,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 696, 249, 697, 645, 250, 251, 252, 253, 254,
	0, 255, 646, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 676, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	698, 278, 279, 599, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 639, 292, 281, 282,
	293, 699, 294, 677, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 678, 299, 300, 647, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 679,
	680, 0, 0, 311, 312, 648, 649, 620, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 640, 321,
	0, 384, 322, 323, 324, 385, 681, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 594,
	0, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	590, 591, 0, 0, 0, 0, 0, 0, 0, 600,
	0, 0, 0, 0, 1530, 603, 625, 614, 615, 612,
	613, 604, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	642, 607, 0, 0, 0, 179, 180, 181, 332, 657,
	334, 658, 182, 659, 660, 0, 183, 338, 339, 184,
	185, 610, 641, 661, 662, 342, 0, 186, 653, 0,
	633, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 687, 194, 195, 196, 0, 634, 635, 637,
	0, 636, 638, 197, 198, 396, 199, 663, 200, 664,
	665, 0, 201, 0, 202, 0, 203, 0, 0, 656,
	205, 0, 206, 0, 0, 0, 598, 207, 208, 209,
	643, 644, 621, 0, 0, 210, 211, 666, 667, 668,
	0, 212, 0, 213, 0, 0, 688, 0, 214, 654,
	0, 354, 0, 0, 215, 216, 217, 218, 650, 652,
	690, 0, 222, 0, 219, 0, 689, 220, 669, 221,
	670, 671, 672, 673, 674, 0, 632, 0, 691, 223,
	224, 225, 692, 226, 227, 228, 0, 230, 229, 0,
	655, 693, 231, 694, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 695, 239, 240, 242,
	241, 593, 0, 622, 651, 243, 675, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 696, 249,
	697, 645, 250, 251, 252, 253, 254, 0, 255, 646,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 676,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 698, 278, 279,
	599, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 639, 292, 281, 282, 293, 699, 294,
	677, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	678, 299, 300, 647, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 679, 680, 0, 0,
	311, 312, 648, 649, 620, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 640, 321, 0, 384, 322,
	323, 324, 385, 681, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 594, 0, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 590, 591, 0,
	0, 0, 0, 0, 0, 0, 600, 0, 0, 0,
	0, 1528, 603, 625, 614, 615, 612, 613, 604, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 642, 607, 0,
	0, 0, 179, 180, 181, 332, 657, 334, 658, 182,
	659, 660, 0, 183, 338, 339, 184, 185, 610, 641,
	661, 662, 342, 0, 186, 653, 0, 633, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 687,
	194, 195, 196, 0, 634, 635, 637, 0, 636, 638,
	197, 198, 396, 199, 663, 200, 664, 665, 0, 201,
	0, 202, 0, 203, 0, 0, 656, 205, 0, 206,
	0, 0, 0, 598, 207, 208, 209, 643, 644, 621,
	0, 0, 210, 211, 666, 667, 668, 0, 212, 0,
	213, 0, 0, 688, 0, 214, 654, 0, 354, 0,
	0, 215, 216, 217, 218, 650, 652, 690, 0, 222,
	0, 219, 0, 689, 220, 669, 221, 670, 671, 672,
	673, 674, 0, 632, 0, 691, 223, 224, 225, 692,
	226, 227, 228, 0, 230, 229, 0, 655, 693, 231,
	694, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 695, 239, 240, 242, 241, 593, 0,
	622, 651, 243, 675, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 696, 249, 697, 645, 250,
	251, 252, 253, 254, 0, 255, 646, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 676, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 698, 278, 279, 599, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	639, 292, 281, 282, 293, 699, 294, 677, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 678, 299, 300,
	647, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 679, 680, 0, 0, 311, 312, 648,
	649, 620, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 640, 321, 0, 384, 322, 323, 324, 385,
	681, 0, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 594, 0, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 590, 591, 0, 0, 0, 0,
	0, 0, 0, 600, 0, 0, 0, 0, 1512, 603,
	625, 614, 615, 612, 613, 604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 642, 607, 0, 0, 0, 179,
	180, 181, 332, 657, 334, 658, 182, 659, 660, 0,
	183, 338, 339, 184, 185, 610, 641, 661, 662, 342,
	0, 186, 653, 0, 633, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 687, 194, 195, 196,
	0, 634, 635, 637, 0, 636, 638, 197, 198, 396,
	199, 663, 200, 664, 665, 0, 201, 0, 202, 0,
	203, 0, 0, 656, 205, 0, 206, 0, 0, 0,
	598, 207, 208, 209, 643, 644, 621, 0, 0, 210,
	211, 666, 667, 668, 0, 212, 0, 213, 0, 0,
	688, 0, 214, 654, 0, 354, 0, 0, 215, 216,
	217, 218, 650, 652, 690, 0, 222, 0, 219, 0,
	689, 220, 669, 221, 670, 671, 672, 673, 674, 0,
	632, 0, 691, 223, 224, 225, 692, 226, 227, 228,
	0, 230, 229, 0, 655, 693, 231, 694, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	695, 239, 240, 242, 241, 593, 0, 622, 651, 243,
	675, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 696, 249, 697, 645, 250, 251, 252, 253,
	254, 0, 255, 646, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 676, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 698, 278, 279, 599, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 639, 292, 281,
	282, 293, 699, 294, 677, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 678, 299, 300, 647, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	679, 680, 0, 0, 311, 312, 648, 649, 620, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 640,
	321, 0, 384, 322, 323, 324, 385, 681, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	594, 0, 0, 0, 0, 0, 592, 0, 0, 0,
	0, 590, 591, 0, 0, 0, 0, 0, 0, 0,
	600, 0, 0, 0, 0, 1500, 603, 625, 614, 615,
	612, 613, 604, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 642, 607, 0, 0, 0, 179, 180, 181, 332,
	657, 334, 658, 182, 659, 660, 0, 183, 338, 339,
	184, 185, 610, 641, 661, 662, 342, 0, 186, 653,
	0, 633, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 687, 194, 195, 196, 0, 634, 635,
	637, 0, 636, 638, 197, 198, 396, 199, 663, 200,
	664, 665, 0, 201, 0, 202, 0, 203, 0, 0,
	656, 205, 0, 206, 0, 0, 0, 598, 207, 208,
	209, 643, 644, 621, 0, 0, 210, 211, 666, 667,
	668, 0, 212, 0, 213, 0, 0, 688, 0, 214,
	654, 0, 354, 0, 0, 215, 216, 217, 218, 650,
	652, 690, 0, 222, 0, 219, 0, 689, 220, 669,
	221, 670, 671, 672, 673, 674, 0, 632, 0, 691,
	223, 224, 225, 692, 226, 227, 228, 0, 230, 229,
	0, 655, 693, 231, 694, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 695, 239, 240,
	242, 241, 593, 0, 622, 651, 243, 675, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 696,
	249, 697, 645, 250, 251, 252, 253, 254, 0, 255,
	646, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	676, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 698, 278,
	279, 599, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 639, 292, 281, 282, 293, 699,
	294, 677, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 678, 299, 300, 647, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 679, 680, 0,
	0, 311, 312, 648, 649, 620, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 640, 321, 0, 384,
	322, 323, 324, 385, 681, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 594, 0, 0,
	0, 0, 0, 592, 0, 0, 0, 0, 590, 591,
	0, 0, 0, 0, 0, 0, 0, 600, 0, 0,
	0, 0, 1498, 603, 1490, 614, 615, 612, 613, 604,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 642, 607,
	0, 0, 0, 179, 180, 181, 332, 657, 334, 658,
	182, 659, 660, 0, 183, 338, 339, 184, 185, 610,
	641, 661, 662, 342, 0, 186, 653, 0, 633, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	687, 194, 195, 196, 0, 634, 635, 637, 0, 636,
	638, 197, 198, 396, 199, 663, 1493, 664, 665, 0,
	201, 0, 202, 0, 203, 0, 0, 656, 205, 0,
	206, 0, 0, 0, 598, 207, 208, 209, 643, 644,
	621, 0, 0, 210, 211, 666, 667, 668, 0, 212,
	0, 213, 0, 0, 688, 0, 214, 654, 0, 354,
	0, 0, 215, 1494, 217, 218, 650, 652, 690, 0,
	222, 0, 219, 0, 689, 220, 669, 221, 670, 671,
	672, 673, 674, 0, 632, 0, 691, 223, 224, 225,
	692, 226, 227, 228, 0, 230, 229, 0, 655, 693,
	231, 694, 0, 232, 0, 0, 233, 0, 234, 1495,
	1492, 238, 365, 237, 695, 239, 240, 242, 241, 593,
	0, 622, 651, 243, 675, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 696, 249, 697, 645,
	250, 251, 252, 253, 254, 0, 255, 646, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 676, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 698, 278, 279, 599, 280,
	0, 284, 285, 286, 1496, 0, 289, 374, 288, 290,
	291, 639, 292, 281, 282, 293, 699, 294, 677, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 678, 299,
	300, 647, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 679, 680, 0, 0, 311, 312,
	648, 649, 620, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 640, 321, 0, 384, 322, 323, 324,
	385, 681, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 1491, 330, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 0, 0, 0,
	0, 0, 0, 0, 600, 0, 0, 0, 0, 1487,
	603, 1490, 614, 615, 612, 613, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 642, 607, 0, 0, 0,
	179, 180, 181, 332, 657, 334, 658, 182, 659, 660,
	0, 183, 338, 339, 184, 185, 610, 641, 661, 662,
	342, 0, 186, 653, 0, 633, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 687, 194, 195,
	196, 0, 634, 635, 637, 0, 636, 638, 197, 198,
	396, 199, 663, 1493, 664, 665, 0, 201, 0, 202,
	0, 203, 0, 0, 656, 205, 0, 206, 0, 0,
	0, 598, 207, 208, 209, 643, 644, 621, 0, 0,
	210, 211, 666, 667, 668, 0, 212, 0, 213, 0,
	0, 688, 0, 214, 654, 0, 354, 0, 0, 215,
	1494, 217, 218, 650, 652, 690, 0, 222, 0, 219,
	0, 689, 220, 669, 221, 670, 671, 672, 673, 674,
	0, 632, 0, 691, 223, 224, 225, 692, 226, 227,
	228, 0, 230, 229, 0, 655, 693, 231, 694, 0,
	232, 0, 0, 233, 0, 234, 1495, 1492, 238, 365,
	237, 695, 239, 240, 242, 241, 593, 0, 622, 651,
	243, 675, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 696, 249, 697, 645, 250, 251, 252,
	253, 254, 0, 255, 646, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 676, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 698, 278, 279, 599, 280, 0, 284, 285,
	286, 1496, 0, 289, 374, 288, 290, 291, 639, 292,
	281, 282, 293, 699, 294, 677, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 678, 299, 300, 647, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 679, 680, 0, 0, 311, 312, 648, 649, 620,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	640, 321, 0, 384, 322, 323, 324, 385, 681, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 1491,
	330, 594, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 625, 614, 615, 612, 613, 604,
	0, 600, 0, 0, 0, 0, 0, 603, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 642, 607,
	0, 0, 0, 179, 180, 181, 332, 657, 334, 658,
	182, 659, 660, 0, 183, 338, 339, 184, 185, 610,
	641, 661, 662, 342, 0, 186, 653, 0, 633, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	687, 194, 195, 196, 0, 634, 635, 637, 0, 636,
	638, 197, 198, 396, 199, 663, 200, 664, 665, 0,
	201, 0, 202, 0, 203, 0, 0, 656, 205, 0,
	206, 0, 0, 0, 598, 207, 208, 209, 643, 644,
	621, 0, 0, 210, 211, 666, 667, 668, 0, 212,
	0, 213, 0, 0, 688, 0, 214, 654, 0, 354,
	0, 0, 215, 216, 217, 218, 650, 652, 690, 0,
	222, 0, 219, 0, 689, 220, 669, 221, 670, 671,
	672, 673, 674, 0, 632, 0, 691, 223, 224, 225,
	692, 226, 227, 228, 0, 230, 229, 0, 655, 693,
	231, 694, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 695, 239, 240, 242, 241, 593,
	0, 622, 651, 243, 675, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 696, 249, 697, 645,
	250, 251, 252, 253, 254, 0, 255, 646, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 676, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 698, 278, 279, 599, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 639, 292, 281, 282, 293, 699, 294, 677, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 678, 299,
	300, 647, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 679, 680, 0, 0, 311, 312,
	648, 649, 620, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 640, 321, 0, 384, 322, 323, 324,
	385, 681, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 625, 614, 615,
	612, 613, 604, 0, 600, 1446, 0, 0, 0, 0,
	603, 0, 0, 176, 177, 1362, 178, 0, 0, 0,
	0, 642, 607, 0, 0, 0, 179, 180, 181, 332,
	657, 334, 658, 182, 659, 660, 0, 183, 338, 339,
	184, 185, 610, 641, 661, 662, 342, 0, 186, 653,
	0, 633, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 687, 194, 195, 196, 0, 634, 635,
	637, 0, 636, 638, 197, 198, 396, 199, 663, 200,
	664, 665, 0, 201, 0, 202, 0, 203, 0, 0,
	656, 205, 0, 206, 0, 0, 0, 598, 207, 208,
	209, 643, 644, 621, 0, 0, 210, 211, 666, 667,
	668, 0, 212, 0, 213, 0, 0, 688, 0, 214,
	654, 0, 354, 0, 0, 215, 216, 217, 218, 650,
	652, 690, 0, 222, 0, 219, 0, 689, 220, 669,
	221, 670, 671, 672, 673, 674, 0, 632, 0, 691,
	223, 224, 225, 692, 226, 227, 228, 0, 230, 229,
	0, 655, 693, 231, 694, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 695, 239, 240,
	242, 241, 593, 0, 622, 651, 243, 675, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 696,
	249, 697, 645, 250, 251, 252, 253, 254, 0, 255,
	646, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	676, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 698, 278,
	279, 599, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 639, 292, 281, 282, 293, 699,
	294, 677, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 678, 299, 300, 647, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 679, 680, 0,
	0, 311, 312, 648, 649, 620, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 640, 321, 0, 384,
	322, 323, 324, 385, 681, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 594, 0, 0,
	0, 0, 0, 592, 0, 0, 0, 0, 590, 591,
	0, 0, 0, 0, 0, 0, 0, 600, 0, 0,
	0, 0, 768, 603, 625, 614, 615, 612, 613, 604,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 642, 607,
	0, 0, 0, 179, 180, 181, 332, 657, 334, 658,
	182, 659, 660, 0, 183, 338, 339, 184, 185, 610,
	641, 661, 662, 342, 0, 186, 653, 0, 633, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	687, 194, 195, 196, 0, 634, 635, 637, 0, 636,
	638, 197, 198, 396, 199, 663, 200, 664, 665, 0,
	201, 0, 202, 0, 203, 0, 0, 656, 205, 0,
	206, 0, 0, 0, 598, 207, 208, 209, 643, 644,
	621, 0, 0, 210, 211, 666, 667, 668, 0, 212,
	0, 213, 0, 0, 688, 0, 214, 654, 0, 354,
	0, 0, 215, 216, 217, 218, 650, 652, 690, 0,
	222, 0, 219, 0, 689, 220, 669, 221, 670, 671,
	672, 673, 674, 0, 632, 0, 691, 223, 224, 225,
	692, 226, 227, 228, 0, 230, 229, 0, 655, 693,
	231, 694, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 695, 239, 240, 242, 241, 593,
	0, 622, 651, 243, 675, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 696, 249, 697, 645,
	250, 251, 252, 253, 254, 0, 255, 646, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 676, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 698, 278, 279, 599, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 639, 292, 281, 282, 293, 699, 294, 677, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 678, 299,
	300, 647, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 679, 680, 0, 0, 311, 312,
	648, 649, 620, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 640, 321, 0, 384, 322, 323, 324,
	385, 681, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 0, 0, 0,
	0, 0, 0, 0, 600, 0, 0, 0, 0, 766,
	603, 625, 614, 615, 612, 613, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 642, 607, 0, 0, 0,
	179, 180, 181, 332, 657, 334, 658, 182, 659, 660,
	0, 183, 338, 339, 184, 185, 610, 641, 661, 662,
	342, 0, 186, 653, 0, 633, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 687, 194, 195,
	196, 0, 634, 635, 637, 0, 636, 638, 197, 198,
	396, 199, 663, 200, 664, 665, 0, 201, 0, 202,
	0, 203, 0, 0, 656, 205, 0, 206, 0, 0,
	0, 598, 207, 208, 209, 643, 644, 621, 0, 0,
	210, 211, 666, 667, 668, 0, 212, 0, 213, 0,
	0, 688, 0, 214, 654, 0, 354, 0, 0, 215,
	216, 217, 218, 650, 652, 690, 0, 222, 0, 219,
	0, 689, 220, 669, 221, 670, 671, 672, 673, 674,
	0, 632, 0, 691, 223, 224, 225, 692, 226, 227,
	228, 0, 230, 229, 0, 655, 693, 231, 694, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 695, 239, 240, 242, 241, 593, 0, 622, 651,
	243, 675, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 696, 249, 697, 645, 250, 251, 252,
	253, 254, 0, 255, 646, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 676, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 698, 278, 279, 599, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 639, 292,
	281, 282, 293, 699, 294, 677, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 678, 299, 300, 647, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 679, 680, 0, 0, 311, 312, 648, 649, 620,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	640, 321, 0, 384, 322, 323, 324, 385, 681, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 594, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 0, 0, 0, 0, 0, 0,
	0, 600, 0, 0, 0, 0, 764, 603, 625, 614,
	615, 612, 613, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 642, 607, 0, 0, 0, 179, 180, 181,
	332, 657, 334, 658, 182, 659, 660, 0, 183, 338,
	339, 184, 185, 610, 641, 661, 662, 342, 0, 186,
	653, 0, 633, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 687, 194, 195, 196, 0, 634,
	635, 637, 0, 636, 638, 197, 198, 396, 199, 663,
	200, 664, 665, 0, 201, 0, 202, 0, 203, 0,
	0, 656, 205, 0, 206, 0, 0, 0, 598, 207,
	208, 209, 643, 644, 621, 0, 0, 210, 211, 666,
	667, 668, 0, 212, 0, 213, 0, 0, 688, 0,
	214, 654, 0, 354, 0, 0, 215, 216, 217, 218,
	650, 652, 690, 0, 222, 0, 219, 0, 689, 220,
	669, 221, 670, 671, 672, 673, 674, 0, 632, 0,
	691, 223, 224, 225, 692, 226, 227, 228, 0, 230,
	229, 0, 655, 693, 231, 694, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 695, 239,
	240, 242, 241, 593, 0, 622, 651, 243, 675, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	696, 249, 697, 645, 250, 251, 252, 253, 254, 0,
	255, 646, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 676, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 698,
	278, 279, 599, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 639, 292, 281, 282, 293,
	699, 294, 677, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 678, 299, 300, 647, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 679, 680,
	0, 0, 311, 312, 648, 649, 620, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 640, 321, 0,
	384, 322, 323, 324, 385, 681, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 594, 0,
	0, 0, 0, 0, 592, 0, 0, 0, 0, 590,
	591, 625, 614, 615, 612, 613, 604, 0, 600, 0,
	0, 0, 0, 0, 603, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 642, 607, 0, 0, 0,
	179, 180, 181, 332, 657, 334, 658, 182, 659, 660,
	0, 183, 338, 339, 184, 185, 610, 641, 661, 662,
	342, 0, 186, 653, 0, 633, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 687, 194, 195,
	2435, 0, 634, 635, 637, 0, 636, 638, 197, 198,
	396, 199, 663, 200, 664, 665, 0, 201, 0, 202,
	0, 203, 0, 0, 656, 205, 0, 206, 0, 0,
	0, 598, 207, 208, 209, 643, 644, 621, 0, 0,
	210, 211, 666, 667, 668, 0, 212, 0, 213, 0,
	0, 688, 0, 214, 654, 0, 354, 0, 0, 215,
	216, 217, 218, 650, 652, 690, 0, 222, 0, 219,
	0, 689, 220, 669, 221, 670, 671, 672, 673, 674,
	0, 632, 0, 691, 223, 224, 225, 692, 226, 227,
	228, 0, 230, 229, 0, 655, 693, 231, 694, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 695, 239, 240, 242, 241, 593, 0, 622, 651,
	243, 675, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 696, 249, 697, 645, 250, 251, 252,
	253, 254, 0, 255, 646, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 676, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 698, 278, 279, 599, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 639, 292,
	281, 282, 293, 699, 294, 677, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 678, 299, 300, 647, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 679, 680, 0, 0, 311, 312, 648, 649, 620,
	313, 314, 2434, 316, 0, 0, 317, 318, 319, 320,
	640, 321, 0, 384, 322, 323, 324, 385, 681, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 594, 0, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 590, 591, 625, 614, 615, 612, 613, 604,
	0, 600, 0, 0, 0, 0, 0, 603, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 642, 607,
	0, 0, 0, 179, 180, 181, 332, 657, 334, 658,
	182, 659, 660, 0, 183, 338, 339, 184, 185, 610,
	641, 661, 662, 342, 0, 186, 653, 0, 633, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	687, 194, 195, 196, 0, 634, 635, 637, 0, 636,
	638, 197, 198, 396, 199, 663, 200, 664, 665, 0,
	201, 0, 202, 0, 203, 0, 0, 656, 205, 0,
	206, 0, 0, 0, 598, 207, 208, 209, 643, 644,
	621, 0, 0, 210, 211, 666, 667, 668, 0, 212,
	0, 213, 0, 0, 688, 0, 214, 654, 0, 354,
	0, 0, 215, 216, 217, 218, 650, 652, 690, 0,
	222, 0, 219, 0, 689, 220, 669, 221, 670, 671,
	672, 673, 674, 0, 632, 0, 691, 223, 224, 225,
	692, 226, 227, 228, 0, 230, 229, 0, 655, 693,
	231, 694, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 695, 239, 240, 242, 241, 593,
	0, 622, 651, 243, 675, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 696, 249, 697, 645,
	250, 251, 252, 253, 254, 0, 255, 646, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 676, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 698, 278, 279, 599, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 639, 292, 281, 282, 293, 699, 294, 677, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 678, 299,
	300, 647, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 679, 680, 0, 0, 311, 312,
	648, 649, 620, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 640, 321, 0, 384, 322, 323, 324,
	385, 681, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 594, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 590, 591, 625, 614, 615,
	612, 613, 604, 0, 600, 0, 0, 0, 0, 0,
	603, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 642, 607, 0, 0, 0, 179, 180, 181, 2433,
	657, 334, 658, 182, 659, 660, 0, 183, 338, 339,
	184, 185, 610, 641, 661, 662, 342, 0, 186, 653,
	0, 633, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 687, 194, 195, 2435, 0, 634, 635,
	637, 0, 636, 638, 197, 198, 396, 199, 663, 200,
	664, 665, 0, 201, 0, 202, 0, 203, 0, 0,
	656, 205, 0, 206, 0, 0, 0, 598, 207, 208,
	209, 643, 644, 621, 0, 0, 210, 211, 666, 667,
	668, 0, 212, 0, 213, 0, 0, 688, 0, 214,
	654, 0, 354, 0, 0, 215, 216, 217, 218, 650,
	652, 690, 0, 222, 0, 219, 0, 689, 220, 669,
	221, 670, 671, 672, 673, 674, 0, 632, 0, 691,
	223, 224, 225, 692, 226, 227, 228, 0, 230, 229,
	0, 655, 693, 231, 694, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 695, 239, 240,
	242, 241, 593, 0, 622, 651, 243, 675, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 696,
	249, 697, 645, 250, 251, 252, 253, 254, 0, 255,
	646, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	676, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 698, 278,
	279, 599, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 639, 292, 281, 282, 293, 699,
	294, 677, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 678, 299, 300, 647, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 679, 680, 0,
	0, 311, 312, 648, 649, 620, 313, 314, 2434, 316,
	0, 0, 317, 318, 319, 320, 640, 321, 0, 384,
	322, 323, 324, 385, 681, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 594, 0, 0,
	0, 0, 0, 592, 0, 0, 0, 0, 590, 591,
	625, 614, 615, 612, 613, 604, 0, 600, 0, 0,
	0, 0, 0, 603, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 642, 607, 0, 0, 0, 179,
	180, 181, 332, 657, 334, 658, 182, 659, 660, 0,
	183, 338, 339, 184, 185, 610, 641, 661, 662, 342,
	0, 186, 653, 0, 633, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 687, 194, 195, 196,
	0, 634, 635, 637, 0, 636, 638, 197, 198, 396,
	199, 663, 200, 664, 665, 0, 201, 0, 202, 0,
	203, 0, 0, 656, 205, 0, 206, 0, 0, 0,
	598, 207, 208, 209, 643, 644, 621, 0, 0, 210,
	211, 666, 667, 668, 0, 212, 0, 213, 0, 0,
	688, 0, 214, 654, 0, 354, 0, 0, 215, 216,
	217, 218, 650, 652, 690, 0, 222, 0, 219, 0,
	689, 220, 669, 221, 670, 671, 672, 673, 674, 0,
	632, 0, 691, 223, 224, 225, 692, 226, 227, 228,
	0, 230, 229, 0, 655, 693, 231, 694, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	695, 239, 240, 242, 241, 0, 0, 622, 651, 243,
	675, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 696, 249, 697, 645, 250, 251, 252, 253,
	254, 0, 255, 646, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 676, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 698, 278, 279, 1510, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 639, 292, 281,
	282, 293, 699, 294, 677, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 678, 299, 300, 647, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	679, 680, 0, 0, 311, 312, 648, 649, 620, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 640,
	321, 0, 384, 322, 323, 324, 385, 681, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	625, 614, 615, 612, 613, 604, 1508, 0, 0, 0,
	0, 1506, 1507, 0, 0, 0, 176, 177, 0, 178,
	1509, 0, 0, 0, 642, 607, 603, 0, 0, 179,
	180, 181, 332, 657, 334, 658, 182, 659, 660, 0,
	183, 338, 339, 184, 185, 0, 641, 661, 662, 342,
	0, 186, 653, 0, 633, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 687, 194, 195, 196,
	0, 634, 635, 637, 0, 636, 638, 197, 198, 396,
	199, 663, 200, 664, 665, 0, 201, 0, 202, 0,
	203, 0, 0, 656, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 643, 644, 621, 0, 0, 210,
	211, 666, 667, 668, 0, 212, 0, 213, 0, 0,
	688, 0, 214, 654, 0, 354, 0, 0, 215, 216,
	217, 218, 650, 652, 690, 0, 222, 0, 219, 0,
	689, 220, 669, 221, 670, 671, 672, 673, 674, 0,
	632, 0, 691, 223, 224, 225, 692, 226, 227, 228,
	0, 230, 229, 0, 655, 693, 231, 694, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	695, 239, 240, 242, 241, 0, 0, 622, 651, 243,
	675, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 696, 249, 697, 645, 250, 251, 252, 253,
	254, 0, 255, 646, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 676, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 698, 278, 279, 1510, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 639, 292, 281,
	282, 293, 699, 294, 677, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 678, 299, 300, 647, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	679, 680, 0, 0, 311, 312, 648, 649, 620, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 640,
	321, 0, 384, 322, 323, 324, 385, 681, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	625, 614, 615, 612, 613, 604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	1509, 0, 0, 0, 642, 607, 603, 0, 0, 179,
	180, 181, 0, 657, 334, 658, 182, 659, 660, 0,
	183, 338, 339, 184, 185, 610, 641, 661, 662, 342,
	0, 186, 653, 0, 633, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 687, 194, 195, 2435,
	0, 634, 635, 637, 0, 636, 638, 197, 198, 396,
	199, 663, 200, 664, 665, 0, 201, 0, 202, 0,
	203, 0, 0, 656, 205, 0, 206, 0, 0, 0,
	598, 207, 208, 209, 643, 644, 621, 0, 0, 210,
	211, 666, 667, 668, 0, 212, 0, 213, 0, 0,
	688, 0, 214, 654, 0, 354, 0, 0, 215, 216,
	217, 218, 650, 652, 0, 0, 222, 0, 219, 0,
	689, 220, 669, 221, 670, 671, 672, 673, 674, 0,
	632, 0, 0, 223, 224, 225, 692, 226, 227, 228,
	0, 230, 229, 0, 655, 693, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	695, 239, 240, 242, 241, 593, 0, 622, 651, 243,
	675, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 696, 249, 697, 645, 250, 251, 252, 253,
	254, 0, 255, 646, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 676, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 698, 278, 279, 599, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 639, 292, 281,
	282, 293, 0, 294, 677, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 678, 299, 300, 647, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	679, 680, 0, 0, 311, 312, 648, 649, 620, 313,
	314, 2434, 316, 0, 0, 317, 318, 319, 320, 640,
	321, 0, 384, 322, 323, 324, 385, 681, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 591, 0, 0, 0, 176, 177, 0, 178,
	600, 0, 0, 0, 642, 0, 603, 0, 0, 179,
	180, 181, 332, 333, 334, 335, 182, 336, 337, 0,
	183, 338, 339, 184, 185, 0, 641, 340, 341, 342,
	0, 186, 653, 0, 633, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 687, 194, 195, 196,
	0, 634, 635, 637, 0, 636, 638, 197, 198, 396,
	199, 344, 200, 345, 346, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 643, 644, 0, 0, 0, 210,
	211, 350, 351, 352, 0, 212, 0, 213, 0, 0,
	688, 0, 214, 654, 0, 354, 0, 0, 215, 216,
	217, 218, 650, 652, 690, 0, 222, 0, 219, 0,
	689, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 691, 223, 224, 225, 692, 226, 227, 228,
	0, 230, 229, 0, 655, 693, 231, 694, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	695, 239, 240, 242, 241, 0, 0, 0, 651, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 696, 249, 697, 645, 250, 251, 252, 253,
	254, 0, 255, 646, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 698, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 639, 292, 281,
	282, 293, 699, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 647, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 648, 649, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 640,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 0,
	325, 817, 0, 820, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 331, 0, 0,
	2082, 0, 179, 180, 181, 332, 333, 334, 335, 182,
	336, 337, 0, 183, 338, 339, 184, 185, 0, 0,
	340, 341, 342, 0, 186, 343, 0, 825, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 687,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 396, 199, 344, 200, 345, 346, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 347, 207, 208, 209, 348, 349, 0,
	0, 0, 210, 211, 350, 351, 352, 0, 212, 0,
	213, 0, 0, 688, 0, 214, 353, 0, 354, 0,
	0, 215, 216, 217, 218, 355, 356, 690, 0, 222,
	0, 219, 0, 689, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 691, 223, 224, 225, 692,
	226, 227, 228, 0, 230, 229, 0, 364, 693, 231,
	694, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 695, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 696, 249, 697, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 698, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 133, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 699, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 135, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 824,
	386, 0, 0, 325, 576, 0, 173, 127, 326, 327,
	328, 329, 330, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	331, 0, 0, 119, 0, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 396, 199, 344, 200, 345,
	346, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 347, 207, 208, 209,
	348, 349, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 217, 218, 355, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 739, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 133, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 135, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 824, 386, 0, 0, 325, 0, 173, 0,
	127, 326, 327, 328, 329, 330, 0, 128, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 331, 0, 733, 0, 1080, 179, 180, 181,
	332, 333, 334, 335, 182, 336, 337, 0, 183, 338,
	339, 184, 185, 0, 0, 340, 341, 342, 0, 186,
	343, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 396, 199, 344,
	200, 345, 346, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 0, 0, 0, 210, 211, 350,
	351, 352, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 353, 0, 354, 0, 0, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 739, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 133,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 135, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 824, 386, 0, 0, 325, 576,
	0, 173, 127, 326, 327, 328, 329, 330, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 733, 0, 1080, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	396, 199, 344, 200, 345, 346, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 347, 207, 208, 209, 348, 349, 0, 0, 0,
	210, 211, 350, 351, 352, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 353, 0, 354, 0, 0, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 133, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 135, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 824, 386, 0,
	0, 325, 1830, 0, 173, 127, 326, 327, 328, 329,
	330, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 119, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 396, 199, 344, 200, 345, 346, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 347, 207, 208, 209, 348, 349,
	0, 0, 0, 210, 211, 350, 351, 352, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 353, 0, 354,
	0, 0, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	739, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 0, 325, 732, 0, 173, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 331, 733, 0, 738, 0, 179, 180, 181, 332,
	333, 334, 335, 182, 336, 337, 0, 183, 338, 339,
	184, 185, 0, 0, 340, 341, 342, 0, 186, 343,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 396, 199, 344, 200,
	345, 346, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 347, 207, 208,
	209, 348, 349, 0, 0, 0, 210, 211, 350, 351,
	352, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	353, 0, 354, 0, 0, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 739, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 0, 325, 0, 173,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 331, 0, 733, 0, 738, 179, 180,
	181, 332, 333, 334, 335, 182, 336, 337, 0, 183,
	338, 339, 184, 185, 0, 0, 340, 341, 342, 0,
	186, 343, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 396, 199,
	344, 200, 345, 346, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 347,
	207, 208, 209, 348, 349, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 739, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 0, 325,
	0, 173, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 0, 733, 0, 738,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	396, 199, 344, 200, 345, 346, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 347, 207, 208, 209, 348, 349, 0, 0, 0,
	210, 211, 350, 351, 352, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 353, 0, 354, 0, 0, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	0, 325, 0, 0, 173, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 1197, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 396, 199, 344, 200, 345, 346, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 347, 207, 208, 209, 348, 349,
	0, 0, 0, 210, 211, 350, 351, 352, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 353, 0, 354,
	0, 0, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 0, 325, 0, 173, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	331, 0, 0, 0, 1648, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 396, 199, 344, 200, 345,
	346, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 347, 207, 208, 209,
	348, 349, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 217, 218, 355, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 0, 325, 0, 173, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 331, 0, 0, 0, 1997, 179, 180, 181,
	332, 333, 334, 335, 182, 336, 337, 0, 183, 338,
	339, 184, 185, 0, 0, 340, 341, 342, 0, 186,
	343, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 396, 199, 344,
	200, 345, 346, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 0, 0, 0, 210, 211, 350,
	351, 352, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 353, 0, 354, 0, 0, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 625, 614,
	615, 612, 613, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 1083, 0,
	0, 0, 331, 0, 0, 0, 0, 179, 180, 181,
	332, 657, 334, 658, 182, 659, 660, 0, 183, 338,
	339, 184, 185, 0, 0, 661, 662, 342, 0, 186,
	343, 0, 825, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 687, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 396, 199, 663,
	200, 664, 665, 0, 201, 0, 202, 0, 203, 0,
	0, 656, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 621, 0, 0, 210, 211, 666,
	667, 668, 0, 212, 0, 213, 0, 0, 688, 0,
	214, 353, 0, 354, 0, 0, 215, 216, 217, 218,
	355, 356, 690, 0, 222, 0, 219, 0, 689, 220,
	669, 221, 670, 671, 672, 673, 674, 0, 632, 0,
	691, 223, 224, 225, 692, 226, 227, 228, 0, 230,
	229, 0, 364, 693, 231, 694, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 695, 239,
	240, 242, 241, 0, 0, 622, 366, 243, 675, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	696, 249, 697, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 676, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 698,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	699, 294, 677, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 678, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 679, 680,
	0, 0, 311, 312, 382, 383, 620, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 681, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 875, 0,
	820, 879, 0, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 179,
	180, 181, 332, 333, 334, 335, 182, 336, 337, 0,
	183, 338, 339, 184, 185, 0, 0, 340, 341, 342,
	0, 186, 343, 0, 825, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 687, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 396,
	199, 344, 200, 345, 346, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 348, 349, 0, 0, 0, 210,
	211, 350, 351, 352, 0, 212, 0, 213, 0, 0,
	688, 0, 214, 353, 0, 354, 0, 0, 215, 216,
	217, 218, 355, 356, 690, 0, 222, 0, 219, 0,
	689, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 691, 223, 224, 225, 692, 226, 227, 228,
	0, 230, 229, 0, 364, 693, 231, 694, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	695, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 696, 249, 697, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 698, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 699, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 481,
	325, 173, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	169, 199, 344, 200, 345, 346, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 347, 207, 208, 209, 348, 349, 0, 0, 0,
	210, 211, 350, 351, 352, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 353, 0, 354, 0, 0, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 168, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	166, 325, 173, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 172, 0, 331, 0, 0, 0,
	0, 179, 180, 181, 332, 333, 334, 335, 182, 336,
	337, 0, 183, 338, 339, 184, 185, 0, 0, 340,
	341, 342, 0, 186, 343, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 169, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 210, 211, 350, 351, 352, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 353, 0, 354, 0, 0,
	215, 216, 217, 218, 355, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 168, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	820, 879, 325, 0, 0, 877, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 331, 172, 0, 0, 0, 179,
	180, 181, 332, 333, 334, 335, 182, 336, 337, 0,
	183, 338, 339, 184, 185, 0, 0, 340, 341, 342,
	0, 186, 343, 0, 825, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 687, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 396,
	199, 344, 200, 345, 346, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 348, 349, 0, 0, 0, 210,
	211, 350, 351, 352, 0, 212, 0, 213, 0, 0,
	688, 0, 214, 353, 0, 354, 0, 0, 215, 216,
	217, 218, 355, 356, 690, 0, 222, 0, 219, 0,
	689, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 691, 223, 224, 225, 692, 226, 227, 228,
	0, 230, 229, 0, 364, 693, 231, 694, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	695, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 696, 249, 697, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 698, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 699, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 173, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 179, 180, 181,
	332, 333, 334, 335, 182, 336, 337, 0, 183, 338,
	339, 184, 185, 0, 0, 340, 341, 342, 0, 186,
	343, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 169, 199, 344,
	200, 345, 346, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 0, 0, 0, 210, 211, 350,
	351, 352, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 353, 0, 354, 0, 0, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 168, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 820, 879, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	331, 172, 0, 0, 0, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	825, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 687, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 396, 199, 344, 200, 345,
	346, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 347, 207, 208, 209,
	348, 349, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 688, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 217, 218, 355, 356,
	690, 0, 222, 0, 219, 0, 689, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 691, 223,
	224, 225, 692, 226, 227, 228, 0, 230, 229, 0,
	364, 693, 231, 694, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 695, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 696, 249,
	697, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 698, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 699, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 173, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 396, 199, 344, 200, 345, 346, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 347, 207, 208, 209, 348, 349,
	0, 0, 0, 210, 211, 350, 351, 352, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 353, 0, 354,
	0, 0, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 820, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 331, 172, 0, 0,
	0, 179, 180, 181, 332, 333, 334, 335, 182, 336,
	337, 0, 183, 338, 339, 184, 185, 0, 0, 340,
	341, 342, 0, 186, 343, 0, 825, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 687, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 396, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 210, 211, 350, 351, 352, 0, 212, 0, 213,
	0, 0, 688, 0, 214, 353, 0, 354, 0, 0,
	215, 216, 217, 218, 355, 356, 690, 0, 222, 0,
	219, 0, 689, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 691, 223, 224, 225, 692, 226,
	227, 228, 0, 230, 229, 0, 364, 693, 231, 694,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 695, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 696, 249, 697, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 698, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 699, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	173, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 179,
	180, 181, 332, 333, 334, 335, 182, 336, 337, 0,
	183, 338, 339, 184, 185, 0, 0, 340, 341, 342,
	1586, 186, 343, 0, 0, 0, 187, 188, 189, 0,
	190, 1584, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 396,
	199, 344, 200, 345, 346, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 348, 349, 0, 1625, 0, 210,
	211, 350, 351, 352, 0, 212, 0, 213, 1589, 0,
	0, 0, 214, 353, 0, 354, 0, 0, 215, 216,
	217, 218, 355, 356, 0, 0, 222, 1623, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 1588, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 1624, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 173, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 179, 180, 181,
	332, 333, 334, 335, 182, 336, 337, 0, 183, 338,
	339, 184, 185, 0, 0, 340, 341, 342, 1586, 186,
	343, 0, 0, 1581, 187, 188, 189, 0, 190, 1584,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 396, 199, 344,
	200, 345, 346, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 0, 0, 0, 210, 211, 350,
	351, 352, 0, 212, 0, 213, 1589, 0, 0, 0,
	214, 353, 0, 354, 0, 0, 215, 216, 217, 218,
	1580, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 1588, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 1587, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 795, 325, 173,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 179, 180,
	181, 332, 333, 334, 335, 182, 336, 337, 0, 183,
	338, 339, 184, 185, 0, 0, 340, 341, 342, 0,
	186, 343, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 396, 199,
	344, 200, 345, 346, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 347,
	207, 208, 209, 348, 349, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 739, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 745, 325,
	173, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 179,
	180, 181, 332, 333, 334, 335, 182, 336, 337, 0,
	183, 338, 339, 184, 185, 0, 0, 340, 341, 342,
	0, 186, 343, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 396,
	199, 344, 200, 345, 346, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 348, 349, 0, 0, 0, 210,
	211, 350, 351, 352, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 353, 0, 354, 0, 0, 215, 216,
	217, 218, 747, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 739, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 741,
	325, 173, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	396, 199, 344, 200, 345, 346, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 347, 207, 208, 209, 348, 349, 0, 0, 0,
	210, 211, 350, 351, 352, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 353, 0, 354, 0, 0, 215,
	216, 217, 218, 743, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 739, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	413, 325, 173, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	412, 178, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 179, 180, 181, 332, 333, 334, 335, 182, 336,
	337, 0, 183, 338, 339, 184, 185, 0, 0, 340,
	341, 342, 0, 186, 343, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 396, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 210, 211, 350, 351, 352, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 353, 0, 354, 0, 0,
	215, 216, 217, 218, 355, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 411, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	173, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 331, 0, 1569, 0, 0, 179,
	180, 181, 332, 333, 334, 335, 182, 336, 337, 0,
	183, 338, 339, 184, 185, 0, 0, 340, 341, 342,
	0, 186, 343, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 396,
	199, 344, 200, 345, 346, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 348, 349, 0, 0, 0, 210,
	211, 350, 351, 352, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 353, 0, 354, 0, 0, 215, 216,
	217, 218, 355, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 173, 2143,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 179, 180, 181,
	332, 333, 334, 335, 182, 336, 337, 0, 183, 338,
	339, 184, 185, 0, 0, 340, 341, 342, 0, 186,
	343, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 396, 199, 344,
	200, 345, 346, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 0, 0, 0, 210, 211, 350,
	351, 352, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 353, 0, 354, 0, 0, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 173, 2143, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 396, 199, 344, 200, 345,
	346, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 347, 207, 208, 209,
	348, 349, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 217, 218, 355, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 2140, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 173, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 396, 199, 344, 200, 345, 346, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 347, 207, 208, 209, 348, 349,
	0, 0, 0, 210, 211, 350, 351, 352, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 353, 0, 354,
	0, 0, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	739, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 1351, 325, 173, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 179, 180, 181, 332, 333, 334,
	335, 182, 336, 337, 0, 183, 338, 339, 184, 185,
	0, 0, 340, 341, 342, 0, 186, 343, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 396, 199, 344, 200, 345, 346,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 347, 207, 208, 209, 348,
	349, 0, 0, 0, 210, 211, 350, 351, 352, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 353, 0,
	354, 0, 0, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 0, 1349, 325, 173, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 396, 199, 344, 200, 345,
	346, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 347, 207, 208, 209,
	348, 349, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 217, 218, 355, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 173, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	176, 177, 1331, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 396, 199, 344, 200, 345, 346, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 347, 207, 208, 209, 348, 349,
	0, 0, 0, 210, 211, 350, 351, 352, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 353, 0, 354,
	0, 0, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 507, 325, 173, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 179, 180, 181, 332, 333, 334,
	335, 182, 336, 337, 0, 183, 338, 339, 184, 185,
	0, 0, 340, 341, 854, 0, 186, 343, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 396, 199, 344, 200, 345, 346,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 347, 207, 208, 209, 348,
	349, 0, 0, 0, 210, 211, 350, 351, 352, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 353, 0,
	354, 0, 0, 215, 216, 217, 218, 355, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 509, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 504, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 0, 1211, 325, 173, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 396, 199, 344, 200, 345,
	346, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 347, 207, 208, 209,
	348, 349, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 217, 218, 1210, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 507, 325, 173, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 179, 180, 181, 332,
	333, 334, 335, 182, 336, 337, 0, 183, 338, 339,
	184, 185, 0, 0, 340, 341, 854, 0, 186, 343,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 396, 199, 344, 200,
	345, 346, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 347, 207, 208,
	209, 348, 349, 0, 0, 0, 210, 211, 350, 351,
	352, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	353, 0, 354, 0, 0, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 509, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 504, 380, 381, 0,
	0, 311, 855, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 507, 325, 173, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 179, 180, 181,
	332, 333, 334, 335, 182, 336, 337, 0, 183, 338,
	339, 184, 185, 0, 0, 340, 341, 342, 0, 498,
	343, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 396, 199, 344,
	200, 345, 346, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 0, 0, 0, 210, 211, 350,
	351, 352, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 353, 0, 354, 0, 0, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 509, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 838, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 504, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 813, 325, 173,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 179, 180,
	181, 332, 333, 334, 335, 182, 336, 337, 0, 183,
	338, 339, 184, 185, 0, 0, 340, 341, 342, 0,
	186, 343, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 396, 199,
	344, 200, 345, 346, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 347,
	207, 208, 209, 348, 349, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 217,
	218, 812, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 284, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 810, 325,
	173, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 179,
	180, 181, 332, 333, 334, 335, 182, 336, 337, 0,
	183, 338, 339, 184, 185, 0, 0, 340, 341, 342,
	0, 186, 343, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 396,
	199, 344, 200, 345, 346, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 348, 349, 0, 0, 0, 210,
	211, 350, 351, 352, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 353, 0, 354, 0, 0, 215, 216,
	217, 218, 809, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 806,
	325, 173, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	396, 199, 344, 200, 345, 346, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 347, 207, 208, 209, 348, 349, 0, 0, 0,
	210, 211, 350, 351, 352, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 353, 0, 354, 0, 0, 215,
	216, 217, 218, 805, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	803, 325, 173, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 179, 180, 181, 332, 333, 334, 335, 182, 336,
	337, 0, 183, 338, 339, 184, 185, 0, 0, 340,
	341, 342, 0, 186, 343, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 396, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 210, 211, 350, 351, 352, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 353, 0, 354, 0, 0,
	215, 216, 217, 218, 802, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 799, 325, 173, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 179, 180, 181, 332, 333, 334, 335, 182,
	336, 337, 0, 183, 338, 339, 184, 185, 0, 0,
	340, 341, 342, 0, 186, 343, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 396, 199, 344, 200, 345, 346, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 347, 207, 208, 209, 348, 349, 0,
	0, 0, 210, 211, 350, 351, 352, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 353, 0, 354, 0,
	0, 215, 216, 217, 218, 798, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 173, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 176, 177, 787,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	396, 199, 344, 200, 345, 346, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 347, 207, 208, 209, 348, 349, 0, 0, 0,
	210, 211, 350, 351, 352, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 353, 0, 354, 0, 0, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	785, 325, 173, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 179, 180, 181, 332, 333, 334, 335, 182, 336,
	337, 0, 183, 338, 339, 184, 185, 0, 0, 340,
	341, 342, 0, 186, 343, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 396, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 210, 211, 350, 351, 352, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 353, 0, 354, 0, 0,
	215, 216, 217, 218, 784, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	0, 781, 325, 173, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 179, 180, 181, 332, 333, 334, 335, 182,
	336, 337, 0, 183, 338, 339, 184, 185, 0, 0,
	340, 341, 342, 0, 186, 343, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 396, 199, 344, 200, 345, 346, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 347, 207, 208, 209, 348, 349, 0,
	0, 0, 210, 211, 350, 351, 352, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 353, 0, 354, 0,
	0, 215, 216, 217, 218, 355, 356, 0, 0, 222,
	0, 219, 0, 0, 220, 357, 221, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 364, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 365, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 366, 243, 367, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 368, 0, 249, 0, 369, 250,
	251, 252, 253, 254, 0, 255, 370, 256, 371, 257,
	0, 258, 259, 260, 261, 262, 372, 263, 264, 0,
	265, 266, 267, 268, 269, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 373, 280, 0,
	284, 285, 286, 287, 0, 289, 374, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 375, 376, 295,
	0, 302, 296, 297, 283, 298, 301, 377, 299, 300,
	378, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 379, 380, 381, 0, 0, 311, 312, 382,
	383, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 384, 322, 323, 324, 385,
	386, 0, 779, 325, 173, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 396, 199, 344, 200, 345, 346, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 347, 207, 208, 209, 348, 349,
	0, 0, 0, 210, 211, 350, 351, 352, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 353, 0, 354,
	0, 0, 215, 216, 217, 218, 355, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 0, 775, 325, 173, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 179, 180, 181, 332, 333, 334,
	335, 182, 336, 337, 0, 183, 338, 339, 184, 185,
	0, 0, 340, 341, 342, 0, 186, 343, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 396, 199, 344, 200, 345, 346,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 347, 207, 208, 209, 348,
	349, 0, 0, 0, 210, 211, 350, 351, 352, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 353, 0,
	354, 0, 0, 215, 216, 217, 218, 777, 356, 0,
	0, 222, 0, 219, 0, 0, 220, 357, 221, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 364,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 365, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 366, 243, 367, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 368, 0, 249, 0,
	369, 250, 251, 252, 253, 254, 0, 255, 370, 256,
	371, 257, 0, 258, 259, 260, 261, 262, 372, 263,
	264, 0, 265, 266, 267, 268, 269, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 373,
	280, 0, 284, 285, 286, 287, 0, 289, 374, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 375,
	376, 295, 0, 302, 296, 297, 283, 298, 301, 377,
	299, 300, 378, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 379, 380, 381, 0, 0, 311,
	312, 382, 383, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 384, 322, 323,
	324, 385, 386, 0, 751, 325, 173, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 396, 199, 344, 200, 345,
	346, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 347, 207, 208, 209,
	348, 349, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 217, 218, 753, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 749, 325, 173, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 179, 180, 181, 332,
	333, 334, 335, 182, 336, 337, 0, 183, 338, 339,
	184, 185, 0, 0, 340, 341, 342, 0, 186, 343,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 396, 199, 344, 200,
	345, 346, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 347, 207, 208,
	209, 348, 349, 0, 0, 0, 210, 211, 350, 351,
	352, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	353, 0, 354, 0, 0, 215, 216, 217, 218, 355,
	356, 0, 0, 222, 0, 219, 0, 0, 220, 357,
	221, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 364, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 365, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 366, 243, 367, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 368, 0,
	249, 0, 369, 250, 251, 252, 253, 254, 0, 255,
	370, 256, 371, 257, 0, 258, 259, 260, 261, 262,
	372, 263, 264, 0, 265, 266, 267, 268, 269, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 373, 280, 0, 284, 285, 286, 287, 0, 289,
	374, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 375, 376, 295, 0, 302, 296, 297, 283, 298,
	301, 377, 299, 300, 378, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 379, 380, 381, 0,
	0, 311, 312, 382, 383, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 384,
	322, 323, 324, 385, 386, 0, 507, 325, 173, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 179, 180, 181,
	332, 333, 334, 335, 182, 336, 337, 0, 183, 338,
	339, 184, 185, 0, 0, 340, 341, 342, 0, 498,
	343, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 396, 199, 344,
	200, 345, 346, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 0, 0, 0, 210, 211, 350,
	351, 352, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 353, 0, 354, 0, 0, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 497, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 509, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 499, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 500, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 504, 380, 381,
	0, 0, 311, 502, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 0, 489, 325, 173,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 179, 180,
	181, 332, 333, 334, 335, 182, 336, 337, 0, 183,
	338, 339, 184, 185, 0, 0, 340, 341, 342, 0,
	186, 343, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 396, 199,
	344, 200, 345, 346, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 347,
	207, 208, 209, 348, 349, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 217,
	218, 355, 356, 0, 0, 222, 0, 219, 0, 0,
	220, 357, 221, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 364, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 365, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 366, 243, 367,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	368, 0, 249, 0, 369, 250, 251, 252, 253, 254,
	0, 255, 370, 256, 371, 257, 0, 258, 259, 260,
	261, 262, 372, 263, 264, 0, 265, 266, 267, 268,
	269, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 373, 280, 0, 490, 285, 286, 287,
	0, 289, 374, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 375, 376, 295, 0, 302, 296, 297,
	283, 298, 301, 377, 299, 300, 378, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 379, 380,
	381, 0, 0, 311, 312, 382, 383, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 384, 322, 323, 324, 385, 386, 0, 487, 325,
	173, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 179,
	180, 181, 332, 333, 334, 335, 182, 336, 337, 0,
	183, 338, 339, 184, 185, 0, 0, 340, 341, 342,
	0, 186, 343, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 396,
	199, 344, 200, 345, 346, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 348, 349, 0, 0, 0, 210,
	211, 350, 351, 352, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 353, 0, 354, 0, 0, 215, 216,
	217, 218, 355, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 0, 479,
	325, 173, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	396, 199, 344, 200, 345, 346, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 347, 207, 208, 209, 348, 349, 0, 0, 0,
	210, 211, 350, 351, 352, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 353, 0, 354, 0, 0, 215,
	216, 217, 218, 355, 356, 0, 0, 222, 0, 219,
	0, 0, 220, 357, 221, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 364, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 365,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 366,
	243, 367, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 368, 0, 249, 0, 369, 250, 251, 252,
	253, 254, 0, 255, 370, 256, 371, 257, 0, 258,
	259, 260, 261, 262, 372, 263, 264, 0, 265, 266,
	267, 268, 269, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 373, 280, 0, 284, 285,
	286, 287, 0, 289, 374, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 375, 376, 295, 0, 302,
	296, 297, 283, 298, 301, 377, 299, 300, 378, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	379, 380, 381, 0, 0, 311, 312, 382, 383, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 384, 322, 323, 324, 385, 386, 0,
	436, 325, 173, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 179, 180, 181, 332, 333, 334, 335, 182, 336,
	337, 0, 183, 338, 339, 184, 185, 0, 0, 340,
	341, 342, 0, 186, 343, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 396, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 210, 211, 350, 351, 352, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 353, 0, 354, 0, 0,
	215, 216, 217, 218, 355, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 284,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	173, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 179,
	180, 181, 332, 333, 334, 335, 182, 336, 337, 0,
	183, 338, 339, 184, 185, 0, 0, 340, 341, 342,
	0, 186, 343, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 396,
	199, 344, 200, 345, 346, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 348, 349, 0, 0, 0, 210,
	211, 350, 351, 352, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 353, 0, 354, 0, 0, 215, 216,
	217, 218, 355, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 173, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 179, 180, 181,
	332, 333, 334, 335, 182, 336, 337, 0, 183, 338,
	339, 184, 185, 0, 0, 340, 341, 342, 0, 186,
	343, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 396, 199, 344,
	200, 345, 346, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 0, 0, 0, 210, 211, 350,
	351, 352, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 353, 0, 354, 0, 0, 215, 216, 217, 218,
	1877, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 263, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 173, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 396, 199, 344, 200, 345,
	346, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 347, 207, 208, 209,
	348, 349, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 217, 218, 1875, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 252, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 261, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 280, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 173, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 396, 199, 344, 200, 345, 346, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 347, 207, 208, 209, 348, 349,
	0, 0, 0, 210, 211, 350, 351, 352, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 353, 0, 354,
	0, 0, 215, 216, 217, 218, 1864, 356, 0, 0,
	222, 0, 219, 0, 0, 220, 357, 221, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 364, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 365, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 366, 243, 367, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 368, 0, 249, 0, 369,
	250, 251, 252, 253, 254, 0, 255, 370, 256, 371,
	257, 0, 258, 259, 260, 261, 262, 372, 263, 264,
	0, 265, 266, 267, 268, 269, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 373, 280,
	0, 284, 285, 286, 287, 0, 289, 374, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 375, 376,
	295, 0, 302, 296, 297, 283, 298, 301, 377, 299,
	300, 378, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 379, 380, 381, 0, 0, 311, 312,
	382, 383, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 384, 322, 323, 324,
	385, 386, 173, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 179, 180, 181, 332, 333, 334, 335, 182, 336,
	337, 0, 183, 338, 339, 184, 185, 0, 0, 340,
	341, 342, 0, 186, 343, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 396, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 210, 211, 350, 351, 352, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 353, 0, 354, 0, 0,
	215, 216, 217, 218, 355, 356, 0, 0, 222, 0,
	219, 0, 0, 220, 357, 221, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 364, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	365, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	366, 243, 367, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 368, 0, 249, 0, 369, 250, 251,
	252, 253, 254, 0, 255, 370, 256, 371, 257, 0,
	258, 259, 260, 261, 262, 372, 263, 264, 0, 265,
	266, 267, 268, 269, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 373, 280, 0, 490,
	285, 286, 287, 0, 289, 374, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 375, 376, 295, 0,
	302, 296, 297, 283, 298, 301, 377, 299, 300, 378,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 379, 380, 381, 0, 0, 311, 312, 382, 383,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 384, 322, 323, 324, 385, 386,
	173, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 331, 0, 1221, 0, 0, 179,
	180, 181, 332, 333, 334, 335, 182, 336, 337, 0,
	183, 338, 339, 184, 185, 0, 0, 340, 341, 342,
	0, 186, 343, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 396,
	199, 344, 200, 345, 346, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 348, 349, 0, 0, 0, 210,
	211, 350, 351, 352, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 353, 0, 354, 0, 0, 215, 216,
	217, 218, 355, 356, 0, 0, 222, 0, 219, 0,
	0, 220, 357, 221, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 364, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 365, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 366, 243,
	367, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 368, 0, 249, 0, 369, 250, 251, 252, 253,
	254, 0, 255, 370, 256, 371, 257, 0, 258, 259,
	260, 261, 262, 372, 263, 264, 0, 265, 266, 267,
	268, 269, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 373, 280, 0, 284, 285, 286,
	287, 0, 289, 374, 288, 290, 291, 0, 0, 281,
	282, 293, 0, 294, 375, 376, 295, 0, 302, 296,
	297, 283, 298, 301, 377, 299, 300, 378, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 379,
	380, 381, 0, 0, 311, 312, 382, 383, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 384, 322, 323, 324, 385, 386, 173, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 179, 180, 181,
	332, 333, 334, 335, 182, 336, 337, 0, 183, 338,
	339, 184, 185, 0, 0, 340, 341, 342, 0, 186,
	343, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 396, 199, 344,
	200, 345, 346, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 0, 0, 0, 210, 211, 350,
	351, 352, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 353, 0, 354, 0, 0, 215, 216, 217, 218,
	355, 356, 0, 0, 222, 0, 219, 0, 0, 220,
	357, 221, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 364, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 365, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 366, 243, 367, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 368,
	0, 249, 0, 369, 250, 251, 252, 253, 254, 0,
	255, 370, 256, 371, 257, 0, 258, 259, 260, 261,
	262, 372, 715, 264, 0, 265, 266, 267, 268, 269,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 373, 280, 0, 284, 285, 286, 287, 0,
	289, 374, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 375, 376, 295, 0, 302, 296, 297, 283,
	298, 301, 377, 299, 300, 378, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 379, 380, 381,
	0, 0, 311, 312, 382, 383, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	384, 322, 323, 324, 385, 386, 173, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 396, 199, 344, 200, 345,
	346, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 347, 207, 208, 209,
	348, 349, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 217, 218, 355, 356,
	0, 0, 222, 0, 219, 0, 0, 220, 357, 221,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	364, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 365, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 366, 243, 367, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 368, 0, 249,
	0, 369, 250, 251, 0, 253, 254, 0, 255, 370,
	256, 371, 257, 0, 258, 259, 260, 0, 262, 372,
	263, 264, 0, 265, 266, 267, 268, 269, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	373, 0, 0, 284, 285, 286, 287, 0, 289, 374,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	375, 376, 295, 0, 302, 296, 297, 283, 298, 301,
	377, 299, 300, 378, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 379, 380, 381, 0, 0,
	311, 312, 382, 383, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 384, 322,
	323, 324, 385, 386, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 944, 945, 0, 964,
	965, 966, 974, 975, 976, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 947,
	0, 0, 978, 0, 944, 945, 0, 964, 965, 966,
	974, 975, 976, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 946, 0, 0, 0, 947, 0, 961,
	978, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 946, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 952, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 979, 0, 0, 0, 0,
	0, 0, 952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 979, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	977, 0, 0, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 969, 39, 122, 968, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 43,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 968, 0, 0, 44,
	0, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 52, 0, 0, 0, 54, 0, 0, 0,
	60, 0, 972, 125, 0, 0, 0, 61, 0, 62,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 63, 0, 0,
	972, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 944, 945, 0, 964, 965, 966, 974, 975, 976,
	0, 0, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 947, 0, 0, 978, 0, 0,
	970, 0, 0, 958, 959, 960, 973, 0, 957, 955,
	956, 948, 949, 950, 951, 953, 954, 0, 946, 0,
	0, 0, 0, 0, 961, 1812, 0, 0, 970, 0,
	0, 958, 959, 960, 973, 0, 957, 955, 956, 948,
	949, 950, 951, 953, 954, 0, 65, 0, 0, 0,
	0, 0, 66, 1764, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 120, 67, 0, 68, 0, 69, 0, 126, 952,
	0, 0, 0, 70, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 100, 0, 971,
	979, 0, 0, 0, 944, 945, 123, 964, 965, 966,
	974, 975, 976, 0, 0, 0, 135, 977, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 947, 0, 0,
	978, 0, 969, 0, 0, 104, 0, 0, 962, 0,
	0, 0, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 946, 134, 0, 0, 0, 0, 961, 0, 0,
	127, 0, 0, 968, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 4,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 963, 952, 944, 945, 0, 964, 965, 966, 974,
	975, 976, 0, 0, 0, 0, 0, 972, 0, 967,
	0, 0, 971, 979, 0, 0, 947, 0, 0, 978,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	977, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 969, 961, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 968, 0, 958, 959,
	960, 973, 0, 957, 955, 956, 948, 949, 950, 951,
	953, 954, 0, 0, 0, 0, 2406, 0, 0, 0,
	0, 952, 944, 945, 0, 964, 965, 966, 974, 975,
	976, 0, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 971, 979, 0, 963, 947, 0, 0, 978, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 977,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 946,
	0, 0, 0, 0, 969, 961, 0, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 970, 0,
	952, 958, 959, 960, 973, 0, 957, 955, 956, 948,
	949, 950, 951, 953, 954, 0, 0, 0, 0, 2359,
	971, 979, 0, 963, 0, 944, 945, 0, 964, 965,
	966, 974, 975, 976, 0, 0, 0, 0, 977, 972,
	0, 967, 0, 0, 0, 0, 0, 0, 947, 0,
	0, 978, 0, 969, 0, 0, 0, 0, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	958, 959, 960, 973, 0, 957, 955, 956, 948, 949,
	950, 951, 953, 954, 0, 0, 0, 0, 2313, 0,
	0, 0, 963, 952, 944, 945, 0, 964, 965, 966,
	974, 975, 976, 0, 0, 0, 0, 0, 972, 0,
	967, 0, 0, 971, 979, 0, 0, 947, 0, 0,
	978, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 977, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 946, 0, 0, 0, 0, 969, 961, 0, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 968, 0, 958,
	959, 960, 973, 0, 957, 955, 956, 948, 949, 950,
	951, 953, 954, 0, 0, 0, 0, 2283, 0, 0,
	0, 0, 952, 944, 945, 0, 964, 965, 966, 974,
	975, 976, 0, 0, 0, 0, 0, 0, 0, 967,
	0, 0, 971, 979, 0, 963, 947, 0, 0, 978,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	977, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 969, 961, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	0, 952, 958, 959, 960, 973, 0, 957, 955, 956,
	948, 949, 950, 951, 953, 954, 0, 0, 0, 0,
	2278, 971, 979, 0, 963, 0, 944, 945, 0, 964,
	965, 966, 974, 975, 976, 0, 0, 0, 0, 977,
	972, 0, 967, 0, 0, 0, 0, 0, 0, 947,
	0, 0, 978, 0, 969, 0, 0, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 0, 0, 0, 961,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 970, 0,
	0, 958, 959, 960, 973, 0, 957, 955, 956, 948,
	949, 950, 951, 953, 954, 0, 0, 0, 0, 2274,
	0, 0, 0, 963, 952, 944, 945, 0, 964, 965,
	966, 974, 975, 976, 0, 0, 0, 0, 0, 972,
	0, 967, 0, 0, 971, 979, 0, 0, 947, 0,
	0, 978, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 0, 0, 969, 961, 0,
	0, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 968, 0,
	958, 959, 960, 973, 0, 957, 955, 956, 948, 949,
	950, 951, 953, 954, 0, 0, 0, 0, 2216, 0,
	0, 0, 0, 952, 944, 945, 0, 964, 965, 966,
	974, 975, 976, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 971, 979, 0, 963, 947, 0, 0,
	978, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 977, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 946, 0, 0, 0, 0, 969, 961, 0, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	970, 0, 952, 958, 959, 960, 973, 0, 957, 955,
	956, 948, 949, 950, 951, 953, 954, 0, 0, 0,
	0, 2182, 971, 979, 0, 963, 0, 944, 945, 0,
	964, 965, 966, 974, 975, 976, 0, 0, 0, 0,
	977, 972, 0, 967, 0, 0, 0, 0, 0, 0,
	947, 0, 0, 978, 0, 969, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 946, 0, 0, 0, 0, 0,
	961, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 958, 959, 960, 973, 0, 957, 955, 956,
	948, 949, 950, 951, 953, 954, 0, 0, 0, 0,
	2181, 0, 0, 0, 963, 952, 944, 945, 0, 964,
	965, 966, 974, 975, 976, 0, 0, 0, 0, 0,
	972, 0, 967, 0, 0, 971, 979, 0, 0, 947,
	0, 0, 978, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 977, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 0, 0, 969, 961,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 970, 968,
	0, 958, 959, 960, 973, 0, 957, 955, 956, 948,
	949, 950, 951, 953, 954, 0, 0, 0, 0, 2146,
	0, 0, 0, 0, 952, 944, 945, 0, 964, 965,
	966, 974, 975, 976, 0, 0, 0, 0, 0, 0,
	0, 967, 0, 0, 971, 979, 0, 963, 947, 0,
	0, 978, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 0, 0, 969, 961, 0,
	0, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 0, 0, 968, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 43,
	0, 970, 0, 952, 958, 959, 960, 973, 0, 957,
	955, 956, 948, 949, 950, 951, 953, 954, 0, 0,
	0, 49, 2000, 971, 979, 0, 963, 0, 944, 945,
	0, 964, 965, 966, 974, 975, 976, 0, 0, 0,
	0, 977, 972, 0, 967, 0, 0, 0, 0, 0,
	60, 947, 0, 0, 978, 0, 969, 61, 0, 62,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 946, 0, 0, 0, 0,
	0, 961, 0, 0, 0, 0, 64, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 958, 959, 960, 973, 0, 957, 955,
	956, 948, 949, 950, 951, 953, 954, 0, 0, 0,
	0, 1976, 0, 0, 0, 963, 952, 944, 945, 0,
	964, 965, 966, 974, 975, 976, 0, 0, 0, 0,
	0, 972, 0, 967, 0, 0, 971, 979, 0, 0,
	947, 0, 0, 978, 0, 0, 65, 0, 0, 0,
	0, 0, 0, 0, 977, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 946, 0, 0, 0, 0, 969,
	961, 120, 67, 0, 68, 962, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 461, 0, 0, 100, 0, 970,
	968, 0, 958, 959, 960, 973, 0, 957, 955, 956,
	948, 949, 950, 951, 953, 954, 135, 0, 0, 0,
	1447, 0, 0, 0, 0, 952, 2466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 971, 979, 0, 963, 0,
	944, 945, 134, 964, 965, 966, 974, 975, 976, 0,
	127, 0, 0, 977, 972, 0, 967, 128, 0, 0,
	0, 0, 0, 947, 0, 0, 978, 0, 969, 0,
	0, 0, 0, 0, 962, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2465, 0, 0, 0, 0,
	0, 0, 970, 0, 0, 958, 959, 960, 973, 0,
	957, 955, 956, 948, 949, 950, 951, 953, 954, 0,
	0, 1734, 0, 0, 0, 0, 0, 963, 952, 0,
	1804, 0, 0, 1803, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 971, 979,
	0, 944, 945, 0, 964, 965, 966, 974, 975, 976,
	0, 0, 0, 0, 0, 0, 977, 967, 0, 0,
	0, 0, 1707, 0, 947, 0, 0, 978, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 946, 0,
	0, 0, 0, 0, 961, 0, 0, 0, 0, 0,
	0, 970, 968, 0, 958, 959, 960, 973, 0, 957,
	955, 956, 948, 949, 950, 951, 953, 954, 0, 0,
	0, 0, 0, 0, 1708, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 952,
	963, 1545, 0, 0, 0, 0, 0, 944, 945, 0,
	964, 965, 966, 974, 975, 976, 972, 0, 0, 971,
	979, 0, 0, 967, 0, 0, 0, 1544, 0, 0,
	947, 0, 0, 978, 0, 0, 0, 977, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 946, 0, 0, 0, 962, 0,
	961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 970, 0, 0, 958, 959, 960,
	973, 0, 957, 955, 956, 948, 949, 950, 951, 953,
	954, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 952, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 963, 0, 0, 0, 971, 979, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 977, 0, 0, 944, 945, 0, 964,
	965, 966, 974, 975, 976, 0, 0, 0, 969, 0,
	0, 0, 967, 0, 962, 0, 0, 0, 0, 947,
	0, 0, 978, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 946, 0, 0, 0, 0, 0, 961,
	0, 0, 0, 0, 0, 970, 0, 0, 958, 959,
	960, 973, 0, 957, 955, 956, 948, 949, 950, 951,
	953, 954, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 952, 944, 945, 0, 964, 965,
	966, 974, 975, 976, 0, 0, 0, 0, 0, 0,
	0, 967, 0, 0, 971, 979, 0, 0, 947, 0,
	0, 978, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 0, 0, 969, 961, 0,
	0, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 958, 959, 960, 973, 0, 957,
	955, 956, 948, 949, 950, 951, 953, 954, 968, 573,
	0, 1772, 1773, 0, 1790, 1791, 1792, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1969, 0, 0,
	0, 0, 0, 952, 944, 945, 0, 964, 965, 966,
	974, 975, 976, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 971, 979, 0, 963, 947, 1772, 1773,
	978, 1790, 1791, 1792, 1787, 0, 0, 0, 0, 0,
	0, 977, 972, 0, 1968, 0, 0, 0, 0, 0,
	0, 946, 0, 0, 0, 0, 969, 961, 0, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1787, 0, 0, 0, 0, 0, 968, 0, 1778,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	970, 0, 952, 958, 959, 960, 973, 1810, 957, 955,
	956, 948, 949, 950, 951, 953, 954, 1793, 0, 0,
	0, 0, 971, 979, 0, 963, 1778, 944, 945, 0,
	964, 965, 966, 974, 975, 976, 0, 0, 1788, 0,
	977, 972, 0, 967, 0, 0, 0, 1805, 0, 0,
	947, 0, 0, 978, 0, 969, 0, 0, 0, 0,
	0, 962, 0, 0, 1793, 0, 0, 1980, 0, 0,
	0, 0, 0, 0, 946, 0, 0, 0, 0, 0,
	961, 0, 0, 0, 0, 1788, 968, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	0, 1789, 958, 959, 960, 973, 0, 957, 955, 956,
	948, 949, 950, 951, 953, 954, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 952, 944, 945, 0, 964,
	965, 966, 974, 975, 976, 0, 0, 0, 0, 0,
	972, 0, 967, 0, 0, 971, 979, 0, 1789, 947,
	0, 0, 978, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 977, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 0, 0, 969, 961,
	0, 0, 0, 0, 962, 0, 0, 0, 1784, 1785,
	1786, 0, 0, 1783, 1781, 1782, 1774, 1775, 1776, 1777,
	1779, 1780, 0, 0, 0, 0, 0, 0, 970, 968,
	0, 958, 959, 960, 973, 0, 957, 955, 956, 948,
	949, 950, 951, 953, 954, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 952, 1784, 1785, 1786, 0, 0,
	1783, 1781, 1782, 1774, 1775, 1776, 1777, 1779, 1780, 0,
	0, 0, 0, 0, 971, 979, 0, 963, 0, 944,
	945, 0, 964, 965, 966, 974, 975, 976, 0, 0,
	0, 0, 977, 972, 0, 967, 0, 0, 0, 1763,
	0, 0, 947, 0, 0, 978, 0, 969, 0, 0,
	0, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 946, 0, 0, 0,
	0, 0, 961, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1770, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 958, 959, 960, 973, 0, 957,
	955, 956, 948, 949, 950, 951, 953, 954, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 952, 944, 945,
	0, 964, 965, 966, 974, 975, 976, 0, 0, 0,
	0, 0, 972, 0, 967, 0, 0, 971, 979, 0,
	0, 947, 0, 0, 978, 0, 944, 945, 0, 964,
	965, 966, 974, 975, 976, 977, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 946, 0, 0, 0, 947,
	969, 961, 978, 0, 0, 0, 962, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 0, 0, 0, 961,
	970, 968, 0, 958, 959, 960, 973, 0, 957, 955,
	956, 948, 949, 950, 951, 953, 954, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 952, 1772, 1773, 0,
	1790, 1791, 1792, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 979, 0, 963,
	0, 0, 0, 0, 952, 944, 945, 0, 964, 965,
	966, 974, 975, 976, 977, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 979, 0, 0, 947, 969,
	1787, 978, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 0, 0, 969, 961, 0,
	968, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 0, 1778, 958, 959, 960, 973,
	0, 957, 955, 956, 948, 949, 950, 951, 953, 954,
	0, 0, 0, 0, 0, 0, 1794, 0, 963, 0,
	0, 0, 0, 952, 944, 945, 0, 964, 965, 966,
	974, 975, 976, 1793, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 971, 979, 0, 963, 947, 0, 0,
	978, 0, 0, 0, 1788, 0, 0, 0, 0, 0,
	0, 977, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 946, 0, 0, 0, 0, 969, 961, 0, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1772, 1773, 0, 1790, 1791, 1792,
	0, 0, 970, 0, 0, 958, 959, 960, 973, 0,
	957, 955, 956, 948, 949, 950, 951, 953, 954, 0,
	0, 0, 0, 0, 0, 0, 0, 1789, 0, 0,
	970, 0, 952, 958, 959, 960, 973, 0, 957, 955,
	956, 948, 949, 950, 951, 953, 954, 1787, 0, 0,
	0, 0, 971, 979, 0, 963, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1778, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1784, 1785, 1786, 0, 0, 1783,
	1781, 1782, 1774, 1775, 1776, 1777, 1779, 1780, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	1793, 0, 958, 959, 960, 973, 0, 957, 955, 956,
	948, 949, 950, 951, 953, 954, 0, 0, 0, 0,
	0, 1788, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1270, 1260, 1289, 1252, 1280, 1279, 0, 0, 1254, 1253,
	0, 0, 0, 0, 1291, 1290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1789, 0, 0, 0, 1285, 0,
	1277, 1276, 0, 0, 0, 0, 0, 0, 970, 0,
	1275, 958, 959, 960, 973, 0, 957, 955, 956, 948,
	949, 950, 951, 953, 954, 0, 0, 0, 1274, 1272,
	1273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1263,
	1262, 1264, 1265, 1266, 1267, 1268, 0, 1288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1784, 1785, 1786, 0, 0, 1783, 1781, 1782, 1774,
	1775, 1776, 1777, 1779, 1780, 1256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1278, 0, 0,
	0, 1261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1271, 0, 0, 0, 1382, 1380, 1381, 1384, 1383, 0,
	0, 0, 1270, 1260, 1289, 1252, 1280, 1279, 0, 0,
	1254, 1253, 0, 0, 0, 0, 1291, 1290, 0, 0,
	1257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1269, 1258, 0, 0, 0, 0, 0, 0, 0,
	528, 1293, 554, 0, 0, 0, 0, 0, 0, 0,
	1285, 0, 1277, 1276, 1255, 0, 0, 1286, 1287, 0,
	533, 0, 1275, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 0, 0, 0, 0, 0, 0, 1259,
	1274, 1272, 1273, 0, 1292, 0, 0, 0, 0, 0,
	0, 0, 0, 532, 0, 0, 0, 0, 534, 0,
	0, 0, 0, 540, 541, 0, 0, 550, 0, 0,
	0, 1263, 1262, 1264, 1265, 1266, 1267, 1268, 0, 1288,
	0, 555, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 553, 0, 0, 1256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	0, 0, 0, 1261, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 537,
	538, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1271, 0, 0, 0, 0, 544, 0, 0,
	539, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 543, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 556, 1257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1269, 1258, 0, 0, 0, 0, 0,
	0, 0, 0, 1293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1255, 0, 0, 1286,
	1287, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1259, 0, 0, 0, 0, 1292, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 547, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 548, 0, 0, 0, 552, 0, 0,
	0, 558, 0, 0, 0, 0, 545, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 551,
}
var sqlPact = [...]int{

	37952, -1000, -2, -1000, -1000, -1000, 181, -1000, -1000, -1000,
	180, 178, 177, -1000, 176, 174, 173, 172, 171, 169,
	168, 162, 160, 159, 148, -1000, 147, -1000, -1000, -1000,
	-1000, 146, 143, 142, 141, 139, 131, 130, 954, 22438,
	128, 124, 122, 1141, 35236, 121, 119, 117, 113, 1154,
	107, 106, 25948, 1205, 1483, 104, 102, 100, 98, 94,
	1099, 34918, 4060, 1685, 1143, 1654, 34597, 22117, 1628, 1412,
	34276, -1000, -1000, 33955, 93, 91, 89, 85, 82, -1000,
	-1000, 33634, 81, 80, 79, 73, 71, 68, 66, 64,
	58, 49, 44, 41, 39, 38, -1000, 37, 35, 34,
	41718, 33, 32, 29, 1131, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 99, -1000, 1102, 447,
	1932, 7522, 1027, 1013, 1010, 1009, 1004, 37144, 35236, 28,
	-137, 27, -1000, 1941, 635, 19523, 37952, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 25627, 25306, 33313, 32992, 802, -1000, -28, 23710, 35236,
	-1000, 133, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15224, 14867, 14510, 543, 133, -1000, -1000, -1000, -1000,
	-1000, 32671, -1000, 32350, 32029, 1509, 31708, -1000, -1000, -1000,
	-1000, 31387, -1000, -1000, 1924, 1658, 1656, 24985, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	31069, 30748, 30427, 30106, 29785, 503, -1000, -1000, -1000, 17909,
	-1000, -1000, -1000, -1000, 25, -1000, 24, -1000, 22, 19,
	18, 17, -1000, 15, 13, -1000, 11, 5, -1000, 2,
	0, 29464, 1248, -1000, -1000, -22, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35236, -1000, 15910, -1000, 501, -1000,
	1647, -1000, 15910, -1000, 1247, -1000, -1000, -1000, -1000, -1000,
	35236, -1000, -1000, -1000, -1000, -1000, -1000, 2145, 1234, 500,
	29143, -1000, 1490, -1000, 605, 754, -1000, -1000, -1000, 8552,
	184, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1489, 21796, 1320, 1938, 1920, 2142, 1398, 1858, 1847, 1841,
	1821, 1721, 2141, 987, 2136, 1778, 1032, 2129, 1706, 1299,
	704, 2128, 1633, 1632, -1000, -1000, -1000, -1000, 919, -1000,
	-1000, -1000, 27220, -1000, -1000, 1102, -1000, -1000, -1000, 1364,
	1926, 1926, 1926, 1956, 308, 280, -1000, 99, -1000, 1538,
	-1000, 1186, -1000, -1000, -1000, -1000, -1000, 40958, -1000, -1000,
	15910, 15910, 15910, 15910, 15910, 1170, 523, -1000, 496, 493,
	6822, -1000, -1000, 2115, -1000, -1000, -1000, 307, -1000, -1000,
	15910, 133, -1000, -1000, -1000, -1000, 488, 2124, -1000, 637,
	-1000, -1000, -1000, 611, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1671, 484, 483, 479, -1000, 476, -1000,
	-1000, 474, 473, 472, 470, 468, 467, 466, 465, 464,
	463, 462, 461, 460, 459, 458, 1124, -1000, 657, -1000,
	-1000, 657, 657, -1000, 422, 422, 431, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 422, -1000, -1000, -1000, 594,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	456, 1362, -1000, -1000, 1362, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 800, 36508, -39, 35236, -1000, 451, -39, -1000,
	-1000, 445, -1000, 10624, 10624, -1000, -1000, -1000, -1000, -1000,
	9252, 1916, -1000, 3798, -201, 311, 595, -1000, 18554, 21134,
	-1000, -1000, 1200, 1835, 700, -1000, 1105, 1831, 529, -1000,
	1079, -1000, 1192, 1825, -193, 22756, 23710, -28, -60, -1000,
	-1000, -1000, 5462, 40958, -1000, 40958, -1000, 40958, -1000, 896,
	20167, 133, -1000, -1000, -1000, -1000, 444, 1343, 620, -1000,
	271, -1000, 28822, 620, 1339, -1000, -1000, -1000, 27220, -1000,
	35236, -1000, 35236, -1000, 941, -1000, 36826, 123, 1815, -1000,
	-1000, 123, 1803, -1000, 112, 1792, -1000, -1000, 1265, 1782,
	-1000, -60, 1758, -1000, -1000, 15910, 12, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 635, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 28501, 23074,
	1884, 588, 40958, 2014, 41645, 22756, 40958, 23074, -1000, -1000,
	35236, -1000, 15910, -1000, 2007, 1466, -41, -1000, -1000, -1000,
	-1000, -1000, 1388, 1481, 744, 866, 8552, 8552, 1893, -1000,
	183, 5792, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	28180, -1000, -1000, -1000, 1261, 35236, -1000, -1000, 1670, -1000,
	23074, 35236, -1000, 35236, -1000, 35236, -1000, 35236, -1000, 35236,
	-1000, -1000, -1000, -1000, -1000, 446, -1000, 1667, -1000, -1000,
	35236, -1000, 1378, -1000, -1000, -1000, 27862, 27541, -1000, 1008,
	843, -1000, -1000, 125, -1000, -1000, 1364, -1000, 1262, 1444,
	14153, 1420, 15910, 99, -1000, -1000, 99, 99, 8209, -1000,
	-1000, -1000, 35236, -1000, 41443, 41645, 5792, 820, 15910, 15910,
	15910, 15910, 15910, 15910, 15910, 15910, 15910, 15910, 15910, 15910,
	15910, 15910, 15910, 15910, 15910, 15910, 15910, 15910, 15910, 15910,
	1332, 15910, 795, 15910, 15910, 15910, 15910, 1374, 1160, 419,
	1219, -1000, 2053, 2053, 2053, 41095, 41095, 388, 523, -1000,
	15910, -1000, 132, 13810, 280, 39485, -30, 6479, -1000, -1000,
	-1000, 8895, 651, 40958, 133, 4440, -1000, 2097, 1014, 1661,
	1549, 441, 564, 557, 540, 425, 15910, 15910, 13467, 13110,
	12753, 16596, 12396, 15910, 7165, 15910, 15910, 15910, 15910, 12039,
	11682, -1000, 436, -1000, -1000, -1000, -1000, 2095, -1000, -1000,
	2089, -1000, 818, 817, 2087, -1000, -41, -1000, 36508, -1000,
	35236, -39, 2004, 35236, -1000, 70, -1000, 40107, -1000, 70,
	-4, -1000, 1469, 1458, 19845, 1257, 1189, 1189, 1189, -1000,
	433, 513, 595, 4787, 11325, -1000, 26266, 1180, 186, 279,
	18232, 1916, -1000, 35236, -82, 1040, -1000, 24664, 1919, 1912,
	1923, 27220, 1974, 132, 1623, 791, 27220, 790, 1971, 132,
	1621, 771, 35236, 5792, 584, -1000, 35236, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1619, -9, -1000,
	-1000, 24346, 2002, 1754, -1000, 1139, -1000, 1992, 35236, 1242,
	1338, -1000, -1000, 838, 1749, 625, 310, 1990, 310, 20490,
	-1000, 35236, -1000, 35236, -1000, -1000, 35236, -1000, 35236, -1000,
	35236, 35236, -1000, 35236, 35236, -10, 40958, 39552, 24028, 768,
	-1000, 682, 24346, 1284, -12, -1000, 834, -1000, -1000, -1000,
	-1000, 511, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 431, 1124, 422, 422, 422, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 594, -1000, -1000, 657,
	657, 657, -1000, -1000, -97, -1000, 1612, 586, -15, 710,
	-41, -1000, 1362, -1000, 1193, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2123, -1000,
	2075, -1000, -1000, 2085, -49, -1000, -49, -1000, 5792, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 35236, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 138, -1000, -1000, -1000, -1000,
	-1000, -1000, 35236, 35236, 35236, -1000, 27220, -1000, -1000, -1000,
	-1000, 40958, -1000, 358, -1000, -1000, 40958, 1042, 1493, -1000,
	1493, -50, -1000, 39991, 1450, 35236, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 604, 566, 566,
	796, 796, 796, 796, 2149, 925, 935, 792, 306, 306,
	306, 240, 869, 869, 306, 306, 306, 41095, 40986, 164,
	15910, 15910, 767, 1151, 419, 164, 15910, 164, 164, 164,
	164, -1000, 1229, -1000, -1000, -1000, -1000, 1611, 418, 16596,
	16596, -1000, -1000, -1000, 6822, 16926, -1000, -1000, -1000, -1000,
	416, 15910, -1000, 39618, -209, -21, -1000, -1000, 15910, -90,
	-112, -1000, -1000, 872, -1000, 15910, -1000, -45, 15910, 15910,
	15910, 278, -1000, 277, -1000, 765, -1000, 760, 759, 752,
	-1000, 414, 1173, 407, 406, 15910, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 40849, 37814, 276, -1000, 1606, -191,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 269, -1000, 267,
	-1000, 40716, -191, 266, 41067, -1000, 16596, 16596, 16596, 6822,
	405, 256, -1000, 39860, -191, 40607, 10968, 10968, 10968, 251,
	40474, 15910, -191, 37786, 3933, 3864, -27, -29, -1000, -34,
	-1000, 2084, -40, 250, 600, 598, 248, -1000, -1000, 401,
	-47, 625, 10624, 19200, 5792, -1000, 625, 9252, -1000, 19845,
	19845, 1163, 1455, 19845, -1000, -1000, -1000, -1000, 26266, 449,
	595, 26266, -1000, 2083, 1468, -48, -1000, -1000, -1000, 35236,
	399, -1000, 595, 247, 996, 35236, 35236, 35236, -1000, -1000,
	1333, 36190, 1331, 41645, 35236, -1000, 398, 397, 1442, 1426,
	35236, 35236, 35872, 35554, 35236, 1155, 132, -1000, 390, 35236,
	1052, 35236, 132, -1000, 389, 35236, 1020, -1000, 1526, 1259,
	-1000, 885, 1592, 35236, 246, -55, -58, 41645, -1000, -1000,
	-1000, -1000, -1000, 35236, 454, 35236, 132, 35236, 2122, 132,
	35236, 1728, 1842, 544, 35236, 1444, 15910, 1178, -1000, 18877,
	664, 35236, 1043, 61, -1000, -1000, -1000, 551, 35236, -1000,
	-1000, 123, 123, -1000, 112, 1265, -60, -1000, 15910, -1000,
	-1000, 35236, 22756, -57, -1000, -1000, 41645, -1000, 512, 655,
	-1000, 2082, 613, 22756, 35236, 8552, 8552, -1000, 1484, -1000,
	-1000, 942, -1000, 1109, -1000, -1000, -1000, -1000, 8552, -1000,
	-83, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1042, -1000,
	15910, 2079, -1000, -1000, -1000, 8209, -1000, -1000, -1000, 35236,
	-194, 15910, 164, 164, 15910, 16596, 16596, -1000, 164, -1000,
	-1000, -1000, -1000, -1000, 1590, 387, 15910, 41645, 40498, 40451,
	-64, -1000, 10281, -67, -1000, 15910, -1000, 39376, -1000, -1000,
	402, 1781, -1000, 15910, 40365, 243, 9938, -1000, 40256, -46,
	-46, -1000, 2121, 1360, 1116, 1066, 988, 2077, -1000, 20812,
	644, 1195, 39267, 41443, 41645, -1000, 15910, -1000, -1000, 1586,
	15910, -1000, 41443, 41645, 16596, 16596, 16596, 16596, 16596, 16596,
	16596, 16596, 16596, 16596, 16596, 16596, 16596, 16596, 16596, 16596,
	16596, 16596, 16596, 1384, 16596, 2044, 2044, 2044, -80, 9595,
	-1000, 1652, 1586, 15910, 15910, 41645, 238, 237, 236, -1000,
	15910, -191, 15910, 15910, 15910, -1000, -1000, -1000, 226, -1000,
	2073, -1000, -1000, -1000, -1000, 1284, -1000, 1545, -1000, -113,
	-1000, 1916, -1000, 1545, -1000, -1000, 1163, -1000, 384, 15910,
	19845, -1000, 508, -1000, -65, -1000, 26266, -1000, 507, -206,
	-1000, 550, -1000, 595, 383, 35236, 26266, -1000, -1000, -1000,
	750, 749, 1720, -1000, 1323, -1000, 668, -1000, 986, 15910,
	17586, 380, 379, 1101, -1000, 1715, 1265, 1692, 1265, -1000,
	-82, 993, -1000, 15910, -1000, 745, -1000, -1000, 15910, -1000,
	742, 613, 1581, 846, -1000, 877, -1000, 1513, -1000, 24346,
	378, 35236, 374, -1000, 373, -1000, -1000, 372, 35236, 1415,
	544, 23392, -1000, 620, 1043, -1000, 40958, -1000, 1043, 7865,
	1925, -66, -1000, -1000, -1000, 625, 20490, 19845, 9252, -81,
	-1000, -1000, -1000, -1000, 40958, -83, 1897, 1897, -1000, 2070,
	-1000, 506, 224, -1000, 26902, -1000, -83, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35236, 1223, 39134, -1000, 1921, 5792,
	1991, 164, 4004, 2766, 15910, 41645, 41204, -94, 15910, 15910,
	-1000, -99, -1000, 15910, 505, 40958, -1000, -1000, -1000, 40958,
	15910, 2120, 15910, 223, 218, 216, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 213, -1000, -1000, 37462, 15910, 207,
	-1000, 206, 205, 40958, 1652, 40958, -1000, -1000, 917, 917,
	858, 858, 858, 858, 2044, 559, 912, 325, 350, 350,
	350, 617, 400, 400, 350, 350, 350, 1574, 1401, 371,
	41274, 15910, -101, -1000, -1000, -1000, 40958, 40958, 203, -1000,
	-1000, -1000, -191, 270, 39025, 38916, -1000, 202, 200, 1534,
	1952, -1000, 19845, 1534, -1000, 35236, 40958, -1000, -201, -1000,
	2058, -1000, -1000, 1468, -1000, 5129, 26266, 35236, -102, -1000,
	35236, 35236, 35236, 1691, -1000, 1418, -1000, 38783, -107, -1000,
	291, 1934, 15910, -1000, -1000, 368, 17586, 35236, -1000, 1410,
	1419, 701, 35236, -1000, 35236, -1000, 35236, 35236, 35236, -115,
	35236, -117, 35236, -1000, 22756, 816, -1000, -1000, 1520, -1000,
	17586, 367, 35236, 24346, 1986, 17586, 1240, 1402, 544, 23392,
	-1000, 838, -1000, -1000, -88, -1000, 355, 132, 1043, -1000,
	-95, -1000, 549, 1885, -1000, 1877, 426, -1000, -1000, -104,
	365, -1000, 548, 546, -1000, -1000, -1000, -1000, 1921, 15910,
	15910, 41204, -122, -1000, 164, 164, -1000, 38674, -1000, 40958,
	-1000, 40256, -1000, -1000, -1000, -1000, 1132, -1000, 38565, -1000,
	-1000, -1000, -1000, 16596, 1573, 364, 41645, 38432, -1000, -1000,
	15910, -1000, -1000, -1000, -1000, 622, 15910, 15910, 1916, 622,
	-124, 595, -1000, -1000, -1000, 2051, -1000, -127, -1000, -1000,
	-1000, -1000, 35236, -1000, 35236, -1000, 5792, 35236, 1567, 1303,
	-1000, -1000, 1425, 363, 16596, 35236, -1000, 1089, 17586, 1921,
	133, 5792, 1921, 38323, 4440, -130, -141, 1289, -1000, 1283,
	15910, -1000, 41645, 1265, 1265, -1000, 737, 736, 735, -1000,
	718, -1000, -129, 21464, 1164, -143, 17586, -144, 197, 132,
	-146, 35236, -1000, 544, 23392, -1000, 1842, 1845, 35236, 1908,
	-1000, -1000, 361, 359, 353, -1000, 26584, 26584, 22756, 22756,
	-1000, 164, 164, -1000, -1000, 194, 1195, 1950, -1000, 821,
	16596, 41645, -149, -1000, 38214, -1000, 35236, 40958, -191, -1000,
	-1000, 26266, 326, -1000, -1000, 1222, -1000, -1000, 35236, 1306,
	-1000, -1000, 15910, 41274, 352, 1513, 335, -1000, -1000, -1000,
	-1000, -1000, -1000, 1934, -45, -1000, 1095, -1000, -1000, 40958,
	1928, -1000, -1000, 35236, 35236, 333, 329, -1000, 328, 133,
	35236, 1089, -154, -1000, 1513, -1000, 1089, 327, 23392, -1000,
	1415, 811, -155, 35236, -1000, -1000, 6122, 22756, 22756, -1000,
	-157, -1000, -1000, -1000, 1053, 15910, 821, -160, -1000, -1000,
	-142, -1000, 1982, -1000, -1000, -1000, -1000, 1688, 38081, 1363,
	35236, -1000, 35236, 1921, 193, 35236, 671, 5792, -1000, -1000,
	15910, 15910, 15910, 324, 1513, 1089, -1000, 1513, 17586, -1000,
	1402, 938, -1000, 625, -1000, -163, -168, -1000, 192, 16253,
	16253, -191, -1000, 35236, 322, 1665, -1000, 1226, 1106, 188,
	-169, -1000, -1000, 271, -1000, 15910, -1000, -176, -177, -46,
	35236, -1000, 1513, -1000, -178, -1000, 20490, -1000, 613, 613,
	-1000, -1000, -1000, 17256, 1271, 1031, 39727, -1000, -1000, -1000,
	35236, -1000, 1233, 1232, 918, -1000, -1000, -1000, -1000, -1000,
	1363, 40958, -1000, -1000, 140, -179, -1000, 1089, -171, -1000,
	-1000, 2019, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1859,
	-1000, 690, 1196, 1196, 1226, 2120, 1245, 1513, -1000, 15567,
	-1000, 2029, -1000, -1000, 1399, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2500, 2497, 1705, 1937, 2496, 2495, 2494, 2493, 2492,
	2491, 2490, 2489, 2488, 2487, 2486, 2485, 2483, 2480, 2476,
	1913, 2475, 1893, 2474, 2473, 2471, 2470, 2469, 1880, 2467,
	2463, 2462, 2461, 2460, 2459, 1876, 2458, 1873, 2457, 2455,
	2453, 2450, 2449, 1869, 2448, 66, 107, 1825, 2447, 2444,
	1820, 1788, 1784, 2439, 1767, 2438, 2436, 1748, 1727, 2434,
	87, 2433, 2432, 2431, 1718, 1701, 2430, 2422, 2420, 138,
	2415, 1685, 2414, 2413, 2412, 2411, 2410, 2406, 2405, 2403,
	2402, 2401, 2398, 2397, 2396, 2395, 2393, 2389, 2388, 2387,
	149, 2386, 2385, 1681, 1679, 2384, 2380, 36, 29, 13,
	54, 25, 142, 2542, 132, 2379, 2377, 2375, 2369, 2368,
	2365, 16, 96, 95, 2364, 148, 2361, 2360, 50, 31,
	22, 17, 2357, 85, 2356, 2354, 954, 28, 2351, 2350,
	131, 2346, 30, 26, 1861, 144, 141, 103, 106, 2338,
	2329, 2322, 44, 105, 6, 2321, 2320, 11, 75, 8,
	2318, 34, 19, 2317, 2316, 119, 2314, 52, 84, 1571,
	92, 113, 373, 2313, 59, 10, 56, 2305, 2304, 150,
	39, 2300, 47, 77, 130, 2296, 46, 151, 122, 73,
	118, 124, 2295, 2293, 2290, 126, 2286, 108, 111, 2283,
	2280, 65, 2276, 94, 133, 2273, 2264, 2263, 80, 2258,
	109, 2254, 2253, 147, 140, 102, 21, 43, 58, 5,
	1601, 1566, 125, 78, 51, 48, 2250, 1741, 1213, 1809,
	38, 97, 81, 57, 98, 55, 76, 137, 24, 2248,
	2247, 127, 2245, 2244, 2242, 2240, 2238, 99, 2237, 2235,
	27, 2234, 61, 70, 49, 72, 42, 83, 117, 104,
	143, 93, 2233, 69, 112, 2232, 114, 2230, 2229, 2028,
	120, 2228, 2227, 2226, 1731, 1564, 1500, 33, 2223, 2221,
	1173, 305, 2220, 2219, 63, 2217, 115, 101, 86, 134,
	234, 121, 2214, 110, 20, 2213, 32, 18, 0, 1509,
	1296, 2212, 116, 64, 2211, 2209, 2204, 2202, 23, 2,
	9, 3, 7, 4, 79, 37, 2200, 2199, 123, 89,
	60, 2198, 146, 2196, 2192, 2180, 41, 2179, 14, 2177,
	12, 2171, 2169, 15, 1, 2167, 2164, 135, 2162, 91,
	2157, 1969, 2155, 139, 2152, 2151, 1765, 2149, 35, 100,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 113, 113,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 110, 110, 115, 115, 115,
	117, 117, 114, 114, 109, 109, 20, 20, 58, 58,
	100, 51, 51, 51, 286, 286, 287, 287, 96, 96,
	97, 97, 97, 97, 98, 98, 99, 99, 99, 27,
	27, 27, 22, 22, 22, 22, 22, 22, 22, 23,
	23, 24, 24, 25, 25, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 35,
	35, 36, 36, 36, 36, 36, 36, 37, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 42, 42,
	42, 40, 40, 40, 39, 39, 39, 38, 38, 38,
	41, 41, 41, 161, 161, 160, 160, 163, 163, 43,
	43, 43, 43, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 46,
	46, 46, 46, 46, 46, 46, 255, 255, 254, 44,
	44, 229, 229, 47, 47, 186, 186, 48, 48, 48,
	48, 48, 49, 49, 59, 59, 327, 327, 327, 331,
	331, 332, 332, 333, 333, 333, 333, 333, 333, 333,
	329, 329, 54, 54, 54, 54, 55, 55, 55, 56,
	56, 95, 95, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 65, 65, 65, 67, 64, 64, 64, 66,
	66, 66, 66, 68, 68, 69, 69, 69, 69, 69,
	70, 70, 280, 278, 278, 279, 279, 140, 140, 140,
	140, 140, 141, 141, 141, 285, 285, 285, 285, 285,
	285, 284, 284, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 83,
	83, 83, 90, 90, 90, 90, 90, 90, 90, 72,
	72, 77, 77, 77, 77, 77, 73, 73, 78, 78,
	79, 79, 80, 80, 80, 80, 80, 80, 74, 74,
	74, 74, 82, 82, 82, 82, 81, 81, 87, 87,
	87, 87, 87, 87, 84, 84, 84, 84, 85, 85,
	85, 88, 88, 88, 88, 75, 75, 76, 76, 89,
	89, 86, 86, 86, 328, 328, 330, 330, 52, 52,
	31, 31, 32, 32, 142, 142, 143, 143, 208, 208,
	208, 208, 144, 144, 116, 116, 116, 207, 296, 296,
	297, 297, 297, 297, 297, 297, 298, 298, 298, 298,
	298, 298, 298, 294, 294, 295, 292, 292, 293, 293,
	293, 293, 334, 334, 206, 206, 147, 147, 301, 301,
	301, 301, 299, 299, 299, 299, 299, 302, 300, 303,
	303, 303, 303, 303, 241, 241, 241, 92, 92, 33,
	33, 122, 122, 34, 34, 30, 30, 30, 190, 190,
	151, 151, 246, 246, 246, 133, 133, 111, 111, 111,
	14, 11, 11, 11, 11, 11, 11, 19, 19, 17,
	17, 191, 191, 192, 192, 53, 53, 57, 57, 62,
	62, 91, 91, 91, 91, 91, 91, 21, 21, 21,
	21, 26, 26, 26, 26, 61, 61, 336, 336, 129,
	129, 129, 129, 130, 130, 203, 203, 204, 204, 337,
	337, 205, 205, 205, 124, 123, 125, 125, 29, 29,
	29, 118, 118, 119, 119, 120, 120, 121, 121, 338,
	338, 50, 50, 50, 94, 94, 136, 136, 200, 200,
	200, 202, 202, 201, 201, 201, 176, 176, 176, 93,
	93, 156, 156, 165, 165, 166, 166, 252, 167, 167,
	60, 60, 103, 103, 101, 101, 101, 101, 101, 101,
	102, 102, 102, 104, 104, 104, 104, 104, 104, 104,
	107, 107, 107, 108, 108, 108, 106, 106, 309, 309,
	309, 312, 312, 308, 310, 310, 311, 311, 335, 335,
	177, 177, 177, 146, 145, 145, 149, 149, 148, 150,
	150, 245, 245, 245, 174, 174, 174, 174, 195, 195,
	193, 193, 194, 194, 196, 196, 197, 197, 197, 198,
	198, 199, 199, 173, 173, 225, 225, 105, 105, 105,
	155, 155, 155, 157, 157, 215, 215, 215, 216, 216,
	214, 214, 214, 214, 247, 247, 247, 247, 247, 247,
	247, 247, 325, 325, 325, 326, 326, 244, 244, 248,
	248, 248, 248, 248, 248, 242, 242, 242, 242, 243,
	243, 253, 253, 180, 180, 180, 180, 178, 178, 179,
	179, 249, 249, 249, 249, 175, 175, 250, 250, 250,
	209, 209, 256, 256, 256, 274, 274, 154, 154, 154,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 258, 258, 258,
	258, 260, 260, 260, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 273, 273, 273, 273, 273, 261, 261, 268,
	268, 269, 269, 270, 271, 262, 262, 263, 263, 264,
	265, 272, 272, 272, 272, 276, 276, 266, 266, 266,
	266, 266, 267, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 188, 188, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 219, 219, 219, 219, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 304, 304, 304, 304,
	304, 304, 304, 304, 306, 306, 307, 307, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 313, 313,
	314, 314, 316, 316, 317, 317, 318, 319, 319, 319,
	320, 321, 321, 315, 315, 322, 322, 322, 323, 323,
	324, 324, 324, 324, 324, 231, 231, 231, 232, 232,
	233, 239, 239, 239, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	131, 131, 131, 131, 131, 162, 162, 228, 228, 226,
	226, 226, 230, 230, 181, 181, 275, 275, 275, 275,
	275, 275, 275, 182, 182, 182, 189, 183, 183, 184,
	184, 184, 184, 184, 184, 222, 223, 185, 185, 185,
	224, 224, 234, 238, 238, 237, 236, 236, 235, 235,
	212, 212, 213, 213, 211, 210, 170, 170, 169, 169,
	168, 168, 339, 339, 240, 240, 171, 171, 172, 164,
	164, 251, 251, 251, 251, 158, 158, 138, 138, 159,
	159, 134, 134, 137, 137, 135, 135, 135, 135, 152,
	152, 153, 153, 132, 132, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 277, 277, 277, 227,
	126, 126, 126, 127, 127, 128, 128, 282, 282, 282,
	283, 283, 283, 283, 281, 281, 281, 281, 281, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 3, 3, 3, 3, 1, 2, 1, 2, 1,
	2, 1, 2, 3, 1, 2, 1, 2, 2, 7,
	3, 2, 2, 2, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	3, 5, 3, 1, 3, 1, 2, 2, 3, 2,
	2, 5, 3, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 2, 1, 1, 3, 1, 5,
	2, 3, 0, 3, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 2, 6, 2, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 6, 6, 3, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 3, 1, 3, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 3,
	3, 4, 4, 3, 4, 4, 4, 3, 2, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 2, 3, 3, 3, 2, 3, 4, 3,
	5, 3, 4, 5, 2, 3, 3, 3, 4, 2,
	3, 4, 3, 3, 3, 4, 4, 4, 4, 2,
	3, 5, 5, 5, 2, 0, 2, 0, 3, 2,
	7, 10, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 2, 4,
	3, 3, 0, 6, 3, 11, 14, 4, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	3, 2, 0, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 2, 4, 4, 4, 2, 2, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 2, 3,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 6, 3, 3, 1,
	5, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 2, 3, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 2, 1, 3,
	1, 1, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 3, 4, 1, 1, 1, 5, 1,
	3, 3, 1, 3, 3, 1, 3, 3, 1, 1,
	3, 3, 1, 1, 6, 6, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 2, 2, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 1, 2, 2, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 357, -4, -20, -22, -27, -28,
	-48, -35, -36, -37, -47, -43, -49, -50, -51, -52,
	-44, -58, -57, -59, -62, -60, -53, -54, -63, -71,
	-91, -92, -93, -94, -5, -6, -7, -8, 23, 34,
	-23, -24, -25, 47, 67, -29, -30, -31, -32, 69,
	-33, -34, 90, -311, 94, -38, -39, -40, -42, -41,
	98, 105, 107, 125, 134, 214, 220, 240, 242, 244,
	251, -101, -103, 238, -55, -56, -64, -65, -66, -67,
	-95, 262, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, -89,
	265, -21, -26, -61, 303, -9, -10, -13, -12, -11,
	-16, -18, -15, -17, -19, -14, -309, -104, -102, 354,
	239, 312, 35, 274, 61, 101, 246, 328, 335, -107,
	-105, -106, -108, 255, 320, 284, 358, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	2, 284, 323, 83, 141, -327, 2, -159, 284, 83,
	-135, -126, 347, 4, -288, -290, 20, 21, 23, 33,
	34, 35, 40, 44, 47, 48, 55, 60, 61, 62,
	64, 66, 67, 68, 71, 72, 73, 81, 82, 84,
	86, 90, 92, 94, 97, 98, 100, 105, 106, 107,
	113, 114, 119, 121, 126, 132, 133, 134, 135, 142,
	145, 147, 140, 157, 158, 159, 161, 162, 163, 166,
	165, 170, 173, 176, 178, 179, 180, 183, 181, 185,
	186, 188, 187, 193, 195, 196, 198, 201, 204, 207,
	210, 211, 212, 213, 214, 216, 218, 220, 222, 223,
	224, 225, 226, 228, 229, 231, 232, 233, 234, 235,
	238, 236, 237, 239, 240, 241, 242, 244, 246, 247,
	249, 263, 264, 275, 251, 252, 253, 254, 258, 256,
	259, 260, 262, 265, 267, 270, 273, 274, 276, 279,
	280, 277, 272, 283, 285, 286, 287, 288, 289, 290,
	291, 298, 299, 303, 304, 305, 306, 309, 310, 311,
	312, 314, 317, 318, 319, 324, 329, 330, 331, 332,
	333, 28, 36, 37, 38, 39, 41, 42, 45, 46,
	51, 52, 53, 56, 85, 87, 88, 104, 108, 109,
	115, 116, 117, 127, 129, 136, 137, 146, 148, 149,
	150, 151, 152, 154, 168, 182, 192, 194, 205, 209,
	217, 219, 227, 248, 257, 268, 269, 278, 281, 293,
	294, 295, 300, 301, 316, 320, 321, 357, 357, 357,
	2, 158, 224, 299, -134, -126, 83, 357, 357, 357,
	357, 284, 2, 313, 323, -190, 83, 308, 357, 357,
	-126, 220, 22, 2, 92, 145, 311, 310, 22, 216,
	256, 286, 288, 2, 357, 357, 357, 357, 357, 2,
	323, 284, 141, 83, 313, -126, 2, -46, 2, 354,
	-45, -4, -28, -37, -47, -43, -20, -22, -35, -51,
	-50, -52, -54, -58, -57, -60, -64, -65, -71, -93,
	-94, 262, -331, 2, 22, -332, -333, 69, 98, 125,
	255, 145, 92, 310, 284, 2, 158, 2, -126, 2,
	-327, 2, 158, 2, -331, 2, -126, 2, -130, 2,
	251, -126, 357, 357, 357, 357, 357, 173, 55, 248,
	259, -69, 299, -68, 293, -280, -70, 2, -160, 183,
	-126, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 2, -90,
	259, 34, 55, 22, 60, 84, 126, 141, 142, 162,
	65, 66, 223, 173, 159, 298, 163, 260, 285, 299,
	69, 314, 289, 106, 4, 83, 183, 261, 293, 357,
	357, 357, -335, 2, 284, -102, -104, -103, -148, -149,
	307, 153, 103, 203, -101, -103, 2, -309, -90, 259,
	2, 55, 22, -278, 2, -240, 199, -217, 89, -219,
	345, 346, 340, 189, 334, -231, -221, -234, 104, 248,
	354, -134, -220, 360, 9, -306, -103, 29, -232, -233,
	49, -126, 7, 8, 5, 6, -132, -258, -227, -267,
	302, 110, 191, -304, -305, 4, -288, -282, -259, -269,
	-263, -266, 154, 58, 75, 76, 79, 77, 80, 261,
	313, 50, 28, 108, 109, 209, 217, 281, 300, 301,
	136, 192, 137, 56, 127, 168, 97, 37, 39, 41,
	42, 51, 52, 85, 87, 88, 115, 116, 117, 146,
	148, 149, 150, 151, 152, 194, 227, 268, 278, 294,
	295, 321, -289, -270, -271, -264, -265, 70, 124, 144,
	138, 156, 160, 169, 171, 184, 206, 208, 245, 266,
	-272, -336, 2, 299, 299, 2, -336, 2, -336, 2,
	-129, 2, 299, 296, -312, 228, -308, -126, -312, 357,
	357, 359, 357, -145, -146, 2, 22, 95, -172, 2,
	354, -247, 2, 352, -249, -134, -103, -248, 354, 200,
	-3, 2, -249, 136, -134, 2, -249, 136, -134, 2,
	-126, 2, -137, 136, -134, 296, 359, -159, -152, -126,
	-211, -210, 356, -217, 2, -217, 2, -217, 2, 123,
	354, -169, -170, -210, -211, 2, -160, 136, -126, 2,
	-160, 2, 141, -126, 136, 2, -126, 22, 123, 2,
	155, 2, 155, 2, -250, 2, -249, -161, 136, 2,
	-160, -161, 136, 2, -138, 136, 2, -137, -126, 136,
	2, -152, 136, 2, -186, 354, -255, 2, -254, -283,
	4, -288, -290, -289, 320, 58, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 259, 199,
	359, -160, -217, -229, 354, 123, -217, 199, -126, 2,
	263, 2, 354, -69, 53, 299, -204, 2, -205, -123,
	-124, -125, 157, 222, 226, 333, 296, 339, 123, -278,
	-163, 356, -90, 2, -286, 2, -284, 9, -283, 5,
	263, 2, 223, 260, 55, 123, 2, 2, -328, 2,
	199, 123, 2, 123, 2, 123, 2, 123, 2, 123,
	2, 2, 223, 260, 2, 120, 2, 298, 2, 2,
	123, 2, 157, 222, 275, 2, 284, 323, 2, 123,
	123, 333, 2, -175, -249, -148, -149, -174, -193, -194,
	172, 112, 197, -177, 22, 95, -177, -177, 44, 355,
	355, -90, 263, 2, 10, 11, 57, 33, 345, 346,
	347, 348, 118, 349, 350, 343, 344, 342, 337, 338,
	339, 63, 177, 250, 13, 14, 15, 26, 202, 171,
	334, 138, 266, 340, 16, 17, 18, 156, 36, 139,
	-131, -139, -217, -217, -217, -217, -217, 208, -168, -212,
	352, -103, 354, 354, -103, -217, -162, 354, 7, -103,
	-226, 352, -235, -217, -169, 354, 5, 354, 5, -313,
	329, 120, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 219, -276, 324, -276, -276, -260, 354, -260, -261,
	354, -260, 330, 335, 354, -203, -204, -203, 296, -130,
	359, -312, -153, 354, -172, -164, -251, -217, 347, -164,
	-171, -240, 70, -180, 160, 184, 124, 169, 245, 144,
	7, -46, -214, 360, 354, 347, -244, 335, -103, -248,
	354, -247, -134, 354, -113, 236, -112, 21, 23, 98,
	318, 104, 272, 290, 252, 236, 104, 236, 272, 290,
	252, 236, 104, 360, -286, -135, 359, -281, 347, 4,
	-288, -290, -289, -291, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 43, 49, 50, 54, 57, 59, 65,
	69, 74, 75, 77, 76, 78, 79, 80, 89, 91,
	93, 95, 96, 99, 101, 103, 110, 111, 112, 120,
	122, 123, 125, 128, 130, 139, 141, 143, 153, 155,
	164, 167, 172, 174, 175, 189, 190, 191, 197, 199,
	200, 202, 203, 215, 221, 230, 243, 255, 261, 271,
	282, 284, 292, 296, 297, 302, 307, 308, 313, 315,
	322, 323, 325, 326, 327, 328, 276, 355, -158, -134,
	-170, 354, -147, 189, -122, -310, 328, -147, 354, -127,
	136, 2, -126, -310, 189, -250, -136, -134, -136, 262,
	-126, 30, -115, 359, 48, 241, 104, -115, 104, -115,
	359, 104, -115, 104, 104, -162, -217, 355, 359, -327,
	-333, 69, 354, 30, -228, -256, -257, -259, -268, -262,
	-266, -267, 40, 46, 45, 291, 182, 257, 269, 316,
	38, 198, 147, 146, 148, 149, 150, 151, 152, 268,
	37, 227, 116, 117, 115, 97, 88, 87, 194, 42,
	41, -270, -271, -264, -265, 85, 294, 295, 154, 39,
	52, 51, 321, 278, -287, -286, -327, -280, -162, 30,
	-204, 2, -337, 359, 170, -141, 176, 188, 132, 200,
	331, -285, 5, 4, -227, -241, 89, 173, -267, 8,
	346, -277, 7, 345, -279, -278, -279, 73, 356, -281,
	-160, 22, 264, 2, -280, -330, 120, -327, -280, -280,
	-280, -280, -280, 259, -46, 120, -126, 170, -280, 2,
	-280, 2, 284, 141, 284, -115, 359, -174, -194, -193,
	-196, -217, 22, -199, 114, 185, -217, -219, -102, -102,
	-102, -150, -245, -217, 221, 141, -280, -274, -256, -273,
	232, 233, 231, 235, 234, -256, -281, 293, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	171, 138, 266, 36, 139, -217, 296, -217, -217, -217,
	-217, 181, 189, 191, 302, 110, 309, 95, 195, -339,
	282, 32, -224, -103, 354, -239, 27, 271, 22, -231,
	248, 354, -212, -217, -213, -162, 355, 355, 359, -162,
	-230, 353, -226, -238, -237, 325, 355, -162, 322, 22,
	95, 347, 2, 7, -187, 332, 180, 86, 133, 179,
	-188, 254, -314, 113, 128, 354, 355, 2, 355, 2,
	355, 2, 355, 2, -217, -217, -181, 2, -275, -162,
	4, 332, 180, 86, 133, 179, 254, -181, 2, -182,
	2, -217, -162, -183, -218, -219, 345, 346, 340, 354,
	248, -184, 2, -217, -162, -217, 43, 167, 297, -185,
	-217, 123, -162, -217, -217, -217, -162, -162, 2, -162,
	2, 354, 7, 7, 293, 293, 7, -130, -308, 30,
	-152, -155, 359, 123, 30, 4, -155, 359, 355, 160,
	160, -247, -180, 160, -178, 206, -178, -178, -325, 354,
	353, -244, -281, 352, 361, -162, 2, -243, -242, 30,
	-126, 204, 355, -134, 359, 296, -191, 65, 59, -207,
	136, 59, -292, -126, 65, -293, 54, 308, 221, 122,
	-191, 65, -191, 65, 65, -249, 33, -60, 123, 296,
	-249, 296, 33, -60, 123, 296, -137, -281, -253, 336,
	-126, 123, 355, 359, -142, -152, -143, -126, -208, -207,
	-294, -295, -292, 141, 308, 111, 30, 104, 213, 30,
	199, 189, -118, 287, 104, -209, 326, -200, -60, 354,
	89, 30, -200, -165, -166, -252, -167, -134, 354, -126,
	-160, -161, -161, -137, -138, -126, -152, 355, 359, -46,
	-254, 296, 315, -143, -45, 355, 359, -154, 29, 352,
	-187, 354, -253, 359, 123, 339, 296, 355, 299, -205,
	-140, 226, 270, 237, 258, 8, 7, 7, 359, -281,
	-329, -126, 259, -46, -134, -137, -134, -249, -197, -277,
	354, 346, -198, 248, 249, 359, -111, 31, 93, 161,
	-134, 333, -217, -217, 296, -339, 282, -224, -217, 181,
	191, 302, 110, 309, 95, 195, 123, 354, -218, -218,
	-162, -221, 354, -162, 353, 363, 355, -217, 353, 353,
	359, -236, -237, 99, -217, -149, 359, -148, -217, -162,
	-162, 355, 355, 296, 296, 296, 296, 354, -319, 207,
	354, 354, -217, 30, 359, 355, 123, 355, 355, -189,
	215, 355, 10, 11, 345, 346, 347, 348, 118, 349,
	350, 343, 344, 342, 337, 338, 339, 63, 177, 250,
	13, 14, 15, 156, 139, -218, -218, -218, -162, 354,
	355, -222, -223, 123, 120, 30, -185, -185, -185, 355,
	123, -162, 359, 359, 359, 355, 355, 355, 7, 355,
	359, 355, 333, 333, 355, 354, 355, -209, -251, -157,
	2, -247, -281, -209, -240, -247, -247, -179, 315, 199,
	160, -247, -242, 355, -326, 7, -244, -243, 7, -216,
	-215, 121, 187, 355, -126, 354, -244, 355, -112, -134,
	-126, -126, 189, -207, 136, -117, 189, -256, -126, 354,
	354, 161, 161, -126, -126, 136, -126, 136, -126, -126,
	-113, 236, -60, 354, -134, 236, -126, -60, 354, -126,
	236, -96, 135, 195, 276, 123, -134, 355, 355, 359,
	-127, 141, -127, -60, -160, 5, -60, -134, 104, -119,
	100, -338, 339, -126, -195, -193, -217, -176, -202, 243,
	199, -158, 320, -126, -176, -156, 359, 123, 339, -158,
	-115, -115, -115, -115, -217, -329, -286, 355, -256, 352,
	353, 7, 7, -99, 328, -286, -329, -278, -278, -123,
	306, 62, 226, -278, 359, -198, -217, -245, -134, 360,
	-217, -217, -218, -218, 123, 354, -217, -228, 26, 26,
	355, -162, 355, 359, -213, -217, 355, -226, 101, -217,
	292, 355, 322, -149, -149, -149, 5, 180, 133, 179,
	-188, 179, -188, -188, 7, -320, -126, 354, 326, -148,
	355, -274, -256, -217, -222, -217, -274, -256, -218, -218,
	-218, -218, -218, -218, -218, -218, -218, -218, -218, -218,
	-218, -218, -218, -218, -218, -218, -218, 95, 189, 195,
	-218, 359, -162, 355, -223, -222, -217, -217, -256, 355,
	355, 355, -162, -217, -217, -217, 355, 7, -45, -173,
	128, -253, 359, -173, -179, 354, -217, -247, 353, 355,
	359, -243, 353, 359, 362, 339, -244, 354, -152, -242,
	296, 296, 104, 189, 317, -296, -293, -217, -151, -246,
	-126, -307, 354, -304, -305, -132, 354, 354, -110, 98,
	262, -192, 104, -115, 104, -115, 296, -191, 65, -162,
	296, -162, 296, -99, 123, 283, 276, -144, 140, -208,
	354, -127, 354, 354, -147, 354, -126, -120, 166, -338,
	-284, -310, -176, -176, -164, 190, 64, 355, -209, -166,
	-157, -240, 355, -100, 71, -100, 7, 353, 355, -98,
	201, -97, -126, 5, -126, 200, 355, -111, -281, 26,
	26, -217, -228, 355, -217, -217, 355, -217, 353, -217,
	5, -217, 355, 355, 355, 355, -321, -126, -217, 355,
	355, 355, -223, 123, 95, 195, 354, -217, 355, 355,
	359, 355, 355, 355, 355, -225, 130, 44, -247, -225,
	-152, -214, 7, -215, -281, 352, -243, -152, 355, -126,
	-126, -207, 104, -297, 65, -298, 57, 111, 69, 189,
	191, 308, 221, 54, 89, 230, 355, 355, 359, -133,
	-169, 57, -133, -217, 354, -151, -152, 189, 89, 189,
	89, 82, 304, -126, -126, -134, -126, -126, 355, -134,
	355, -126, -287, 293, 139, -151, 354, -152, -142, 30,
	-151, 199, -121, 165, -338, -284, -118, -201, 354, 199,
	-60, -176, 339, 82, 82, 353, 359, 354, 339, 339,
	-111, -217, -217, 355, 355, -149, -315, 212, 355, -218,
	123, 354, -228, 355, -217, -316, 327, -217, -162, -316,
	355, -244, 7, 355, -207, -126, -281, -126, 111, 136,
	191, 161, 354, -218, -134, -206, -334, 68, 280, -246,
	-111, -281, -111, 355, -162, 355, 355, 191, 191, -217,
	-256, -115, -115, 296, 296, 296, 296, -220, -132, -126,
	210, 355, -151, 355, 355, -60, 355, -134, -338, -284,
	-119, 96, -152, 65, -172, -103, 354, 354, 354, -97,
	-98, -286, -286, 355, -149, 44, -218, -228, 355, 355,
	-317, -318, -126, -243, 353, -298, -127, 189, -217, -128,
	354, -144, 354, -133, -149, 230, -114, 57, -126, -126,
	354, 354, 354, -134, -206, 355, -144, -206, 354, -284,
	-120, 310, 190, 355, -126, -287, -287, 355, -322, 225,
	249, -162, 355, 359, 30, 104, 355, -301, 178, -126,
	-152, -111, 355, -134, -109, 315, -281, -162, -162, -162,
	354, -144, -206, -144, -151, -121, 262, -209, 355, 355,
	355, -323, -324, 36, 305, 73, -217, -323, -318, -320,
	111, -299, -302, -300, 199, 124, 211, 267, 355, 355,
	-147, -217, 355, 355, -149, -152, -144, 355, -165, -99,
	-99, -324, 218, 119, 248, 218, 119, -126, -300, 199,
	-302, 199, 310, 92, -301, 355, 355, -206, -209, 26,
	-303, 186, 241, 48, 262, -303, -299, -116, 48, 241,
	-144, -324, 20, 191, 89,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 146, 0, 0, 155, 157, 159, 161, -2,
	164, 166, 0, 0, 0, 177, 179, 181, 183, 185,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 640, -2, 0, 282, 284, 293, 295, 297, 299,
	300, 0, 343, 345, 347, 349, 351, 353, 355, 357,
	359, 361, 363, 365, 367, 369, 371, 372, 374, 376,
	0, 561, 563, 565, -2, 63, 64, 65, 66, 67,
	73, 74, 75, 76, 69, 71, 676, -2, 687, 0,
	0, 0, -2, 0, -2, -2, -2, 0, 0, 653,
	655, 657, 659, -2, 0, 0, -2, 7, 12, 14,
	16, 19, 21, 23, 25, 27, 29, 31, 33, 35,
	37, 39, 42, 48, 50, 52, 55, 57, 59, 61,
	62, 0, 0, 0, 0, 0, 117, 266, 0, 1242,
	1169, 1175, 1176, 1200, 1201, 1202, 1219, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
	1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243,
	1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
	1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, 143, 145, 147,
	148, 0, 0, 0, 0, 1171, 1242, 156, 158, 160,
	162, 0, 168, 0, 0, 0, 0, 528, 165, 167,
	257, 1301, 259, 261, 0, 0, 0, 0, 171, 172,
	173, 174, 175, 176, 178, 180, 182, 184, 186, 187,
	0, 0, 0, 0, 0, 256, 254, 209, 210, 0,
	239, 240, 241, 242, 243, 245, 213, 215, 216, 218,
	220, 222, 224, 225, 227, 229, 230, 232, 234, 235,
	237, 0, 0, 263, 269, 270, 271, 273, 274, 275,
	276, 277, 278, 279, 0, 123, 0, 449, 252, 250,
	0, 119, 0, 558, 0, 265, 559, 560, 555, 556,
	1328, 584, 283, 285, 294, 296, 298, -2, -2, 1417,
	-2, 307, -2, 315, 1423, 0, 318, 319, 322, -2,
	205, 344, 346, 348, 350, 352, 354, 356, 358, 360,
	362, 364, 366, 368, 370, 373, 375, 377, 378, 379,
	0, 0, 0, 383, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, 0, -2, -2, 0,
	0, -2, 0, 0, 382, 384, 385, 386, 0, 562,
	564, 566, 0, 518, 678, -2, 651, 652, -2, 0,
	682, 682, 682, 0, 0, 652, 650, 0, 286, 0,
	288, 0, 383, 291, 292, 323, 324, 1154, 1155, 879,
	0, 0, 0, 0, 0, 0, 971, 973, 1391, 1417,
	0, 975, 976, 0, 978, 980, 981, 0, 984, 985,
	1139, 1171, 1185, 1186, 1187, 1188, 0, 0, 1191, 0,
	1193, 1194, 1195, 1039, 995, -2, -2, 1183, 807, 808,
	809, 810, -2, 1431, 999, 1002, 1005, 1008, 1009, 1012,
	1013, 0, 1375, 1392, 1393, 1413, 1414, 1422, 1426, 1427,
	1399, 1410, 1400, 1387, 1397, 1408, 1248, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1209, 841, 842, 847, 848, 1432, 1433, 1434,
	1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
	850, 586, 568, 577, 586, 570, 571, 572, 573, 574,
	575, 576, 579, 0, 668, 1307, 671, 1182, 669, 654,
	656, 0, 658, 0, 0, 662, 684, 683, 717, 718,
	0, 666, 667, 677, 733, 771, 748, 739, 0, 0,
	2, 68, 0, 1399, 771, 70, 0, 1399, 771, 72,
	0, 77, 0, 1399, 1174, 0, 0, 267, 268, 1179,
	1177, 1178, 0, 149, 150, 151, 152, 153, 154, 0,
	0, 1172, 1148, 1146, 1147, 163, 497, 1399, -2, 520,
	497, 524, -2, 675, 1399, 600, 258, 260, 0, 170,
	0, 613, 0, 615, 0, 630, 777, 109, 1399, 190,
	203, 109, 1399, 193, 109, 1399, 196, 1167, 109, 1399,
	199, 200, 1399, 202, 253, 0, 0, -2, 246, 248,
	1210, 1211, 1212, 1213, -2, 1431, 244, 214, 217, 219,
	221, 223, 226, 228, 231, 233, 236, 238, -2, 0,
	0, 0, 448, 0, 0, 0, 557, 0, 583, 301,
	0, 304, 0, 306, 1386, -2, -2, 310, 587, 591,
	592, 593, 0, 0, 0, 0, 0, 0, 0, 320,
	206, 0, 380, 381, 389, 390, 124, 125, 341, 342,
	0, 393, 414, 426, 0, 0, 397, 399, 447, 401,
	0, 0, 403, 0, 405, 0, 407, 0, 409, 0,
	411, 413, 415, 427, 417, 677, 419, 0, 421, 425,
	0, 430, 0, 432, 433, 434, 0, 0, 440, 0,
	0, 387, 388, 109, 775, -2, 0, 646, 696, 697,
	0, 0, 0, 0, 680, 681, 0, 0, 0, 642,
	643, 287, 0, 290, 0, 0, 0, 0, 1074, 1075,
	1076, 1077, 1078, 1079, 1082, 1083, 1080, 1081, 1084, 1085,
	1086, 0, 0, 0, 1087, 1088, 1089, 0, 0, 1091,
	0, 1093, 0, 0, 0, 0, 0, 0, 1153, 0,
	0, 1090, 884, 885, 886, 908, 909, 0, 972, 1150,
	1143, 974, 0, 0, -2, 1095, 0, 0, 977, 982,
	983, 0, 0, 1138, -2, 0, 1190, 0, 876, 1041,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1118, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 826, 844, 855, 852, 851, 828, 0, 827, 825,
	0, 829, 0, 0, 0, 567, -2, 569, 0, 581,
	0, 670, 0, 0, 719, 722, 1159, 1163, 1164, 722,
	0, 1156, 0, 0, 0, 0, 768, 768, 768, 766,
	742, 0, 748, 0, 0, 772, 760, 0, -2, 739,
	0, 0, 773, 0, 78, 552, 88, 0, 552, 552,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 762, 1170, 0, 1144, 1145, 1214,
	1215, 1216, 1217, 1218, 1445, 1446, 1447, 1448, 1449, 1450,
	1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460,
	1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
	1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500,
	1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510,
	1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520,
	1521, 1522, 1523, 1524, 1525, 1526, 139, 0, 0, 1165,
	1149, 455, 0, 0, 519, 0, 674, 0, 0, 0,
	1399, 527, 1203, 602, 0, 781, 0, 616, 0, 0,
	778, 0, 188, 0, 107, 108, 0, 191, 0, 194,
	0, 0, 197, 0, 0, 0, 1095, 677, 0, 0,
	272, 0, 0, 677, 0, 1097, 789, 790, 791, 792,
	793, 876, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 838, 0, 813, 813, 813, 830,
	831, 839, 840, 845, 846, 857, 858, 860, 862, 856,
	856, 856, 853, 854, 762, 126, 0, 0, 0, 0,
	-2, 312, 0, 589, 0, 594, 332, 333, 334, 596,
	597, 316, 335, 336, 337, 338, 339, 340, 0, 514,
	0, 516, 1196, 0, 313, 325, 314, 317, 0, 207,
	391, 392, 394, 395, 396, 400, 0, 444, 402, 404,
	406, 408, 410, 418, 422, 677, 428, 431, 435, 436,
	437, 438, 0, 0, 0, 517, 0, 649, 694, 695,
	700, 704, 705, 708, 711, 712, 702, 879, 663, 664,
	665, 688, 689, 539, 0, 0, 289, 880, 785, 786,
	832, 833, 834, 835, 836, 881, 882, 0, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, -2, -2,
	-2, 900, 901, 902, -2, -2, -2, 906, 907, -2,
	1092, 1094, 0, 1153, 0, -2, 0, -2, -2, -2,
	-2, 920, 0, 922, 925, 927, 929, 0, 0, 0,
	0, 1152, 939, 1130, 0, 0, 1071, 1072, 1073, 924,
	0, 0, 1151, 1142, 0, 0, -2, 979, 0, 0,
	0, 1101, 1102, 1137, 1133, 0, 986, 687, 0, 0,
	0, 0, 993, 0, 1199, 863, 864, 865, 866, 867,
	868, 877, 1049, 0, 0, 0, 1000, 1001, 1003, 1004,
	1006, 1007, 1010, 1011, 0, 0, 0, 1017, 0, 1105,
	-2, -2, -2, -2, -2, -2, -2, 0, 1019, 0,
	1021, 1095, 1115, 0, 0, 942, 0, 0, 0, 0,
	1417, 0, 1024, 1095, 1123, 0, 0, 0, 0, 0,
	1095, 0, 1129, 0, 0, 0, 0, 0, 1035, 0,
	1037, 0, 0, 0, 0, 0, 0, 580, 672, 0,
	0, 781, 0, 0, 0, 1162, 781, 0, 1158, 0,
	0, 0, 0, 0, 763, 767, 764, 765, 0, 0,
	748, 760, 730, 0, 0, 0, 737, 738, 759, 0,
	758, 747, -2, 0, 0, 0, 0, 0, 551, 90,
	1399, 0, 111, 0, 0, 487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 83, 0, 0, 0, 1173, 129, 0,
	1180, 0, 0, 0, 0, 0, 454, 1179, 456, 458,
	459, 460, 461, 1204, 0, 1204, 0, 0, 0, 0,
	0, 0, 604, 610, 0, 699, 0, 628, 618, 0,
	0, 0, 628, 632, 633, 635, 636, 0, 0, 779,
	204, 109, 109, 1168, 109, 109, 201, 255, 0, 211,
	247, 0, 0, 0, 249, 251, 0, 782, 784, 0,
	794, 0, 138, 0, 0, 0, 0, 305, 0, 588,
	595, 0, 329, 0, 331, 515, 1198, 1197, 0, 208,
	446, 280, 420, 423, 441, 442, 443, 776, 0, 706,
	0, 0, 703, 709, 710, 0, 691, 537, 538, 0,
	0, 0, -2, -2, 0, 0, 0, 940, -2, 921,
	923, 926, 928, 930, 0, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 1140, 1143, -2, 1096, 1099, 1100,
	0, 0, 1134, 0, 0, 0, 0, 686, 687, 687,
	687, 992, 0, 0, 0, 0, 0, 0, 994, 0,
	0, 0, 0, 0, 0, 1016, 0, 1018, 1020, 0,
	0, 1022, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 945, 946, 947, 0, 0,
	1023, 1121, 1122, 0, 0, 0, 0, 0, 0, 1029,
	0, 1128, 0, 0, 0, 1033, 1034, 1036, 0, 811,
	0, 837, 859, 861, 849, 677, 1181, 714, 1160, 762,
	721, 723, 1161, 714, 1157, 750, 0, 752, 0, 0,
	0, 754, 0, 743, 0, 745, 760, 735, 0, 0,
	728, 0, 727, 748, 756, 0, 0, 774, 89, 541,
	0, 0, 0, 92, 1399, 100, 0, 469, 0, 0,
	0, 0, 0, 554, 101, 1399, 109, 1399, 109, 102,
	79, 552, 80, 0, 547, 0, 540, 81, 0, 549,
	0, 138, 0, 0, 140, 0, 1166, 463, 496, 0,
	0, 1204, 0, 452, 497, 521, 523, 0, 0, 606,
	610, 0, 609, 675, 628, 698, 780, 611, 628, 0,
	0, 0, 620, 617, 614, 781, 0, 0, 0, 0,
	189, 192, 195, 198, 1096, 262, 0, 0, 1098, 0,
	787, 0, 0, 118, 0, 127, 264, 302, 303, 308,
	327, 328, 330, 326, 0, 0, 0, 690, 539, 0,
	883, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	1131, 0, 1066, 0, 0, 1142, -2, 1103, 1132, 1136,
	0, 987, 0, 0, 0, 0, 1192, 869, 870, 871,
	872, 873, 874, 875, 0, 1047, 1048, 1052, 0, 0,
	998, 0, 0, 1104, 1114, 1116, 943, 944, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, -2, -2,
	-2, 961, 962, 963, -2, -2, -2, 0, 0, 0,
	1117, 0, 0, 1069, 1119, 1120, 1125, 1126, 0, 1026,
	1027, 1028, 1127, 0, 0, 0, 843, 0, 0, 716,
	0, 720, 0, 716, 751, 0, 770, 753, 733, 744,
	0, 741, 731, 0, 732, 0, 760, 0, 0, 740,
	0, 0, 0, 0, 110, 467, 486, 0, 0, 530,
	536, 536, 0, 996, 997, 0, 0, 0, 94, 0,
	0, 0, 0, 98, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 141, 450, 0, 457,
	0, 0, 0, 455, 0, 0, 0, 608, 610, 0,
	601, 602, 169, 612, 626, 627, 625, 0, 628, 634,
	631, 637, 0, 0, 120, 0, 0, 788, 795, 136,
	1291, 134, 131, 133, 281, 701, 707, 692, 539, 0,
	0, -2, 0, 933, -2, -2, 1065, 1096, 1141, 1135,
	1189, 687, 988, 990, 991, 878, 1054, 1051, 0, 1038,
	1014, 1015, 1113, 0, 0, 0, 0, 1096, 1068, 1025,
	0, 1031, 1032, 812, 673, 1043, 0, 0, 724, 1043,
	0, 748, 746, 729, 725, 0, 736, 0, 757, 543,
	545, 91, 0, 468, 0, 471, 0, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 488, 495, 0, 539,
	1184, 0, 539, 0, 0, 0, 0, 0, 106, 0,
	0, 553, 0, 109, 109, 542, 0, 0, 0, 548,
	0, 550, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 610, 0, 603, 604, 0, 0, 0,
	619, 629, 0, 0, 0, 783, 0, 0, 0, 0,
	693, -2, -2, 934, 1067, 0, 687, 0, 1040, -2,
	0, 0, 0, 1070, 0, 660, 0, 715, 713, 661,
	769, 760, 0, 755, 93, 0, 472, 473, 1204, 0,
	476, 479, 0, 481, 1206, 463, 0, 492, 493, 531,
	532, 535, 533, 536, 687, 490, 0, 95, 96, 105,
	113, 97, 103, 0, 0, 0, 0, 761, 0, 0,
	0, 495, 0, 485, 463, 453, 495, 0, 0, 605,
	606, 0, 0, 0, 638, 639, 0, 0, 0, 135,
	0, 130, 132, 989, 1057, 0, -2, 0, 969, 1030,
	1042, 1044, 0, 734, 726, 470, 474, 0, 0, 501,
	0, 489, 0, 539, 0, 0, 115, 0, 544, 546,
	0, 0, 0, 0, 463, 495, 451, 463, 0, 607,
	608, 0, 622, 781, 624, 0, 0, 137, 0, 0,
	0, 1053, 970, 0, 0, 0, 480, 506, 0, 0,
	0, 534, 987, 497, 99, 0, 112, 0, 0, 687,
	0, 483, 463, 525, 0, 599, 0, 623, 138, 138,
	1050, 1055, 1058, -2, 1359, 1239, 0, 1056, 1045, 1046,
	0, 482, 502, 503, 0, 498, 499, 500, 1205, 494,
	501, 114, 85, 87, 0, 0, 484, 495, 781, 121,
	122, 0, 1060, 1061, 1062, 1063, 1064, 475, 504, 0,
	505, 0, 0, 0, 506, 0, 466, 463, 621, 0,
	507, 0, 510, 511, 0, 508, 491, 462, 464, 465,
	526, 1059, 509, 512, 513,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 359, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 363, 358,
	337, 339, 338, 3, 360, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 361, 342, 362, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 57681, 357, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:860
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:866
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:872
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:881
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:883
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:984
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1030
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1036
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1125
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1135
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1197
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1198
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1201
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1202
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1229
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1255
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1362
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			return helpWith(sqllex, "CANCEL TRANSACTION")
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1385
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1396
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = &CancelTransaction{ID: sqlDollar[3].union.expr()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "CANCEL TRANSACTION")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1427
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1429
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1432
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1434
		{
			return helpWith(sqllex, "CREATE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			return helpWith(sqllex, "DELETE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1472
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1474
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			return helpWith(sqllex, "DROP")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1492
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1507
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1530
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1553
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1568
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1619
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1628
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1633
		{
			return helpWith(sqllex, "DELETE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			return helpWith(sqllex, "INSERT")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1638
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1639
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1655
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1656
		{ /* SKIP DOC */
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1684
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1743
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1763
		{
			return helpWith(sqllex, "GRANT")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1805
		{
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			return helpWith(sqllex, "RESET")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1877
		{
			return helpWith(sqllex, "RESET")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1888
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1893
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1896
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1900
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1901
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1902
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1903
		{ /* SKIP DOC */
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1904
		{ /* SKIP DOC */
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1905
		{
			return unimplemented(sqllex, "set local")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1921
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1971
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1976
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1993
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1996
		{
			return unimplemented(sqllex, "set from current")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1998
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2008
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = Low
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = Normal
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = High
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2120
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2124
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2125
		{
			return helpWith(sqllex, "SHOW")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2134
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.str = "client_encoding"
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2160
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2177
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2182
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2193
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2204
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2215
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2226
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2231
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2236
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2247
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2263
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2295
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2300
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2318
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2349
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2353
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2357
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2371
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2382
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2393
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2397
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2401
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2405
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2411
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2439
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2538
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2542
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = DropDefault
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2552
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2757
		{
			return unimplemented(sqllex, "match full")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2758
		{
			return unimplemented(sqllex, "match partial")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2759
		{
			return unimplemented(sqllex, "match simple")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2760
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2766
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2767
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2768
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2769
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2770
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2773
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2776
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2779
		{
			return unimplemented(sqllex, "no action")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2782
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2783
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			return unimplemented(sqllex, "action set null")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
			return unimplemented(sqllex, "action set default")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2810
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2821
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2825
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2846
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2886
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = true
		}
	case 529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = false
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2916
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2917
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2920
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2921
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = Ascending
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = Descending
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 540:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2961
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2963
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = true
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = false
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2996
		{
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2997
		{
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3008
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3019
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3030
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3034
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3035
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3036
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3054
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3077
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3085
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3092
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3096
		{
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.str = ""
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.str = ""
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3142
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3155
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3157
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = ReadOnly
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = ReadWrite
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3221
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.str = ""
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.str = ""
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.str = ""
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.str = ""
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3264
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3265
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			return helpWith(sqllex, "INSERT")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3348
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3360
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 629:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3383
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3387
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3388
		{
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3517
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3552
		{
			return helpWith(sqllex, "SELECT")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3553
		{
			return helpWith(sqllex, "VALUES")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3554
		{
			return helpWith(sqllex, "TABLE")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3600
		{
			return helpWith(sqllex, "SELECT")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3644
		{
			return helpWith(sqllex, "TABLE")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3655
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3656
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3657
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3660
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3661
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3664
		{
			return unimplemented(sqllex, "cte")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3668
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3672
		{
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3675
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3676
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = true
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = false
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = false
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = true
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3699
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3700
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3747
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3771
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3823
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3824
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3827
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3828
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3886
		{
			return helpWith(sqllex, "VALUES")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3888
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3903
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = &From{}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3925
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3943
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3970
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4007
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4032
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = nil
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4073
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4079
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = true
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = false
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.str = astFullJoin
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.str = astLeftJoin
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.str = astRightJoin
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.str = astInnerJoin
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4190
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4191
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4277
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4291
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4299
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4323
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4334
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4397
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4406
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = nil
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4471
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4567
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4599
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4638
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4639
		{
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 861:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = year
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = month
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = day
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = hour
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = minute
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = month
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = hour
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = minute
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = minute
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = nil
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = second
		}
	case 878:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4734
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4769
		{
			return unimplemented(sqllex, "at tz")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4937
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5003
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5176
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5229
		{
			return unimplemented(sqllex, "variadic")
		}
	case 989:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5230
		{
			return unimplemented(sqllex, "variadic")
		}
	case 990:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5236
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5243
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5254
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5270
		{
			return unimplemented(sqllex, "func_application")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5271
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 998:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5275
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5284
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5293
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5302
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5303
		{
			return unimplemented(sqllex, "current role")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5312
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5318
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5333
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5338
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5343
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5352
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5353
		{
			return unimplemented(sqllex, "treat")
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5387
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5390
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5395
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5399
		{
			return unimplemented(sqllex, "within group")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5400
		{
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5425
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5429
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5435
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5447
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5451
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5477
		{
			sqlVAL.str = ""
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5483
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5487
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5497
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5498
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5499
		{
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5502
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5503
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5509
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5510
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5511
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5512
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5513
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = Any
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = Some
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = All
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = Plus
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = Minus
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5569
		{
			sqlVAL.union.val = Mult
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = Div
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = Mod
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5573
		{
			sqlVAL.union.val = Bitand
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = Bitor
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = Pow
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5576
		{
			sqlVAL.union.val = Bitxor
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = LT
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = GT
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = EQ
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = LE
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5581
		{
			sqlVAL.union.val = GE
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = NE
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = Like
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = NotLike
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = ILike
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = NotILike
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5600
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5604
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5610
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5644
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5716
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5720
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5779
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5786
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5802
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5806
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5819
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5877
		{
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5878
		{
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5893
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5897
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5931
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5935
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5967
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5971
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5996
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6017
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6021
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6040
		{
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6050
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6073
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6076
		{
			return unimplemented(sqllex, "func const")
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6085
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6087
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6091
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6095
		{
			sqlVAL.union.val = DNull
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6112
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6147
		{
			sqlVAL.str = ""
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6153
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6157
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
