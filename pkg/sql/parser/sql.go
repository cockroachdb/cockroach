// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const LATERAL = 57494
const LC_CTYPE = 57495
const LC_COLLATE = 57496
const LEADING = 57497
const LEAST = 57498
const LEFT = 57499
const LEVEL = 57500
const LIKE = 57501
const LIMIT = 57502
const LOCAL = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const LOW = 57506
const LSHIFT = 57507
const MATCH = 57508
const MINUTE = 57509
const MONTH = 57510
const NAN = 57511
const NAME = 57512
const NAMES = 57513
const NATURAL = 57514
const NEXT = 57515
const NO = 57516
const NO_INDEX_JOIN = 57517
const NORMAL = 57518
const NOT = 57519
const NOTHING = 57520
const NULL = 57521
const NULLIF = 57522
const NULLS = 57523
const NUMERIC = 57524
const OF = 57525
const OFF = 57526
const OFFSET = 57527
const OID = 57528
const ON = 57529
const ONLY = 57530
const OPTIONS = 57531
const OR = 57532
const ORDER = 57533
const ORDINALITY = 57534
const OUT = 57535
const OUTER = 57536
const OVER = 57537
const OVERLAPS = 57538
const OVERLAY = 57539
const PARENT = 57540
const PARTIAL = 57541
const PARTITION = 57542
const PASSWORD = 57543
const PLACING = 57544
const POSITION = 57545
const PRECEDING = 57546
const PRECISION = 57547
const PREPARE = 57548
const PRIMARY = 57549
const PRIORITY = 57550
const RANGE = 57551
const READ = 57552
const REAL = 57553
const RECURSIVE = 57554
const REF = 57555
const REFERENCES = 57556
const REGCLASS = 57557
const REGPROC = 57558
const REGPROCEDURE = 57559
const REGNAMESPACE = 57560
const REGTYPE = 57561
const RENAME = 57562
const REPEATABLE = 57563
const RELEASE = 57564
const RESET = 57565
const RESTORE = 57566
const RESTRICT = 57567
const RETURNING = 57568
const REVOKE = 57569
const RIGHT = 57570
const ROLLBACK = 57571
const ROLLUP = 57572
const ROW = 57573
const ROWS = 57574
const RSHIFT = 57575
const SAVEPOINT = 57576
const SCATTER = 57577
const SEARCH = 57578
const SECOND = 57579
const SELECT = 57580
const SERIAL = 57581
const SERIALIZABLE = 57582
const SESSION = 57583
const SESSION_USER = 57584
const SET = 57585
const SETTING = 57586
const SETTINGS = 57587
const SHOW = 57588
const SIMILAR = 57589
const SIMPLE = 57590
const SMALLINT = 57591
const SMALLSERIAL = 57592
const SNAPSHOT = 57593
const SOME = 57594
const SPLIT = 57595
const SQL = 57596
const START = 57597
const STATUS = 57598
const STDIN = 57599
const STRICT = 57600
const STRING = 57601
const STORING = 57602
const SUBSTRING = 57603
const SYMMETRIC = 57604
const SYSTEM = 57605
const TABLE = 57606
const TABLES = 57607
const TEMPLATE = 57608
const TESTING_RANGES = 57609
const TESTING_RELOCATE = 57610
const TEXT = 57611
const THEN = 57612
const TIME = 57613
const TIMESTAMP = 57614
const TIMESTAMPTZ = 57615
const TO = 57616
const TRAILING = 57617
const TRANSACTION = 57618
const TREAT = 57619
const TRIM = 57620
const TRUE = 57621
const TRUNCATE = 57622
const TYPE = 57623
const UNBOUNDED = 57624
const UNCOMMITTED = 57625
const UNION = 57626
const UNIQUE = 57627
const UNKNOWN = 57628
const UPDATE = 57629
const UPSERT = 57630
const USER = 57631
const USERS = 57632
const USING = 57633
const UUID = 57634
const VALID = 57635
const VALIDATE = 57636
const VALUE = 57637
const VALUES = 57638
const VARCHAR = 57639
const VARIADIC = 57640
const VIEW = 57641
const VARYING = 57642
const WHEN = 57643
const WHERE = 57644
const WINDOW = 57645
const WITH = 57646
const WITHIN = 57647
const WITHOUT = 57648
const YEAR = 57649
const ZONE = 57650
const NOT_LA = 57651
const WITH_LA = 57652
const AS_LA = 57653
const POSTFIXOP = 57654
const UMINUS = 57655

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5484

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 31,
	332, 31,
	-2, 431,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	99, 414,
	144, 414,
	160, 414,
	185, 414,
	191, 414,
	284, 414,
	-2, 404,
	-1, 66,
	99, 413,
	144, 413,
	160, 413,
	185, 413,
	191, 413,
	284, 413,
	-2, 407,
	-1, 75,
	1, 31,
	332, 31,
	-2, 431,
	-1, 437,
	1, 200,
	332, 200,
	-2, 1000,
	-1, 478,
	160, 441,
	185, 441,
	-2, 410,
	-1, 481,
	160, 440,
	185, 440,
	-2, 408,
	-1, 618,
	160, 440,
	185, 440,
	-2, 411,
	-1, 677,
	329, 932,
	-2, 925,
	-1, 678,
	329, 933,
	-2, 926,
	-1, 684,
	5, 601,
	329, 601,
	-2, 1109,
	-1, 708,
	5, 562,
	-2, 1083,
	-1, 709,
	5, 595,
	329, 595,
	-2, 1085,
	-1, 710,
	5, 570,
	-2, 1086,
	-1, 711,
	5, 569,
	-2, 1087,
	-1, 712,
	5, 595,
	329, 595,
	-2, 1090,
	-1, 713,
	5, 595,
	329, 595,
	-2, 1091,
	-1, 714,
	5, 596,
	-2, 1094,
	-1, 715,
	5, 556,
	-2, 1095,
	-1, 716,
	5, 556,
	-2, 1096,
	-1, 717,
	5, 577,
	-2, 1100,
	-1, 718,
	5, 557,
	-2, 1105,
	-1, 719,
	5, 558,
	-2, 1106,
	-1, 720,
	5, 559,
	-2, 1107,
	-1, 721,
	5, 560,
	-2, 1108,
	-1, 722,
	5, 556,
	-2, 1113,
	-1, 723,
	5, 563,
	-2, 1118,
	-1, 724,
	5, 561,
	-2, 1121,
	-1, 725,
	5, 593,
	329, 593,
	-2, 1123,
	-1, 726,
	5, 597,
	-2, 1126,
	-1, 727,
	5, 599,
	-2, 1127,
	-1, 728,
	5, 592,
	329, 592,
	-2, 1132,
	-1, 1001,
	99, 414,
	144, 414,
	160, 414,
	185, 414,
	191, 414,
	284, 414,
	-2, 720,
	-1, 1010,
	329, 909,
	-2, 897,
	-1, 1225,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 636,
	-1, 1226,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 637,
	-1, 1227,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 638,
	-1, 1231,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 642,
	-1, 1232,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 643,
	-1, 1233,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 644,
	-1, 1236,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 649,
	-1, 1242,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 651,
	-1, 1244,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 655,
	-1, 1245,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 656,
	-1, 1246,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 657,
	-1, 1247,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 658,
	-1, 1274,
	196, 791,
	-2, 794,
	-1, 1303,
	117, 831,
	329, 932,
	-2, 925,
	-1, 1304,
	117, 832,
	-2, 1079,
	-1, 1305,
	117, 833,
	-2, 999,
	-1, 1306,
	117, 834,
	-2, 967,
	-1, 1307,
	117, 835,
	-2, 983,
	-1, 1308,
	117, 836,
	-2, 998,
	-1, 1309,
	117, 837,
	-2, 1045,
	-1, 1467,
	99, 414,
	144, 414,
	160, 414,
	185, 414,
	191, 414,
	284, 414,
	-2, 491,
	-1, 1471,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 650,
	-1, 1472,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 652,
	-1, 1477,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 653,
	-1, 1495,
	196, 790,
	-2, 793,
	-1, 1685,
	1, 492,
	69, 492,
	99, 492,
	118, 492,
	122, 492,
	124, 492,
	137, 492,
	144, 492,
	149, 492,
	157, 492,
	160, 492,
	172, 492,
	185, 492,
	187, 492,
	191, 492,
	226, 492,
	228, 492,
	284, 492,
	291, 492,
	302, 492,
	303, 492,
	311, 492,
	328, 492,
	330, 492,
	332, 492,
	333, 492,
	-2, 491,
	-1, 1687,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 654,
	-1, 1692,
	147, 0,
	-2, 670,
	-1, 1702,
	196, 792,
	-2, 795,
	-1, 1736,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 697,
	-1, 1737,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 698,
	-1, 1738,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 699,
	-1, 1742,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 703,
	-1, 1743,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 704,
	-1, 1744,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 705,
	-1, 1865,
	147, 0,
	-2, 671,
	-1, 1868,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 674,
	-1, 1869,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 676,
	-1, 1975,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 675,
	-1, 1976,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 677,
	-1, 1983,
	147, 0,
	-2, 706,
	-1, 2039,
	147, 0,
	-2, 707,
	-1, 2104,
	36, 0,
	131, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 1082,
}

const sqlPrivate = 57344

const sqlLast = 29581

var sqlAct = [...]int{

	678, 2103, 2081, 1641, 2128, 1680, 2045, 2082, 1095, 2083,
	1909, 2102, 1103, 1465, 668, 1830, 1773, 919, 1935, 1856,
	1164, 1681, 1713, 306, 1841, 676, 1651, 1787, 1955, 503,
	482, 654, 675, 88, 88, 88, 1189, 1440, 765, 1462,
	925, 1588, 290, 527, 1589, 308, 88, 88, 88, 489,
	65, 88, 767, 1442, 88, 658, 52, 1197, 1835, 1182,
	1163, 1657, 88, 88, 1556, 773, 1555, 51, 545, 1168,
	88, 88, 1506, 1006, 88, 1204, 1390, 88, 88, 88,
	88, 1272, 1452, 88, 88, 744, 921, 1167, 1666, 1196,
	1384, 1104, 788, 65, 1329, 741, 1055, 1282, 805, 52,
	1447, 1064, 648, 1259, 518, 1256, 1202, 299, 22, 1119,
	1087, 297, 30, 804, 942, 637, 868, 746, 777, 774,
	604, 480, 296, 16, 488, 65, 298, 8, 1155, 1300,
	1128, 52, 1135, 1199, 638, 997, 487, 647, 292, 20,
	481, 539, 1036, 537, 1040, 438, 605, 546, 540, 1097,
	1171, 947, 1788, 621, 620, 492, 622, 80, 870, 424,
	670, 434, 415, 533, 866, 781, 84, 490, 1332, 625,
	1494, 950, 951, 66, 1968, 67, 603, 1969, 790, 790,
	427, 1096, 305, 22, 790, 1100, 671, 30, 486, 2119,
	2098, 278, 770, 1786, 953, 1463, 2093, 2092, 16, 1138,
	1138, 2089, 8, 2079, 770, 2074, 1125, 500, 770, 1402,
	506, 486, 1401, 513, 20, 2070, 760, 952, 770, 509,
	949, 468, 2041, 967, 1138, 1125, 1132, 64, 2035, 950,
	951, 770, 2023, 1091, 1450, 980, 981, 982, 494, 479,
	2017, 478, 435, 1786, 2013, 2008, 1977, 770, 2007, 1125,
	948, 1965, 953, 42, 799, 984, 1962, 1949, 1946, 1963,
	1786, 770, 43, 1944, 1920, 1919, 1786, 770, 1786, 1891,
	1133, 1870, 1138, 958, 1138, 952, 1867, 1859, 1498, 1125,
	1138, 967, 71, 1499, 44, 1088, 88, 88, 88, 88,
	88, 1807, 549, 1806, 1138, 1785, 1138, 1696, 1786, 1627,
	1138, 1749, 1094, 1622, 89, 469, 1094, 1450, 73, 1573,
	1134, 1131, 1574, 1571, 1570, 1569, 1138, 1138, 1138, 1497,
	1495, 1699, 1429, 1138, 1138, 770, 968, 1426, 1053, 1193,
	1138, 958, 770, 1142, 1430, 1276, 1138, 71, 1526, 1527,
	74, 1544, 1545, 1546, 547, 1188, 1150, 488, 69, 309,
	977, 985, 1137, 1505, 70, 1138, 791, 791, 1124, 487,
	1088, 1125, 791, 73, 1093, 1526, 1527, 1094, 1544, 1545,
	1546, 1052, 798, 68, 1051, 799, 633, 75, 975, 914,
	1136, 1864, 1091, 913, 968, 860, 859, 770, 516, 562,
	1541, 499, 522, 1466, 969, 74, 71, 71, 892, 1849,
	583, 2117, 2101, 69, 2088, 55, 2050, 1789, 2036, 70,
	1947, 88, 1896, 632, 1892, 1884, 1883, 1541, 1882, 534,
	1526, 1527, 73, 73, 1878, 1401, 88, 1877, 1099, 88,
	88, 1876, 1821, 526, 542, 542, 948, 1764, 543, 1815,
	1532, 1759, 1758, 1757, 1707, 1685, 1656, 1631, 1578, 1575,
	1130, 1563, 969, 1554, 74, 74, 1525, 1522, 1521, 1519,
	1511, 1432, 1268, 69, 794, 789, 978, 1532, 88, 70,
	917, 88, 1129, 88, 88, 88, 305, 88, 963, 961,
	962, 954, 955, 956, 957, 959, 960, 68, 68, 737,
	1510, 924, 88, 1542, 1428, 1346, 1464, 524, 1297, 1296,
	632, 1014, 1547, 88, 1007, 631, 68, 1715, 2062, 619,
	2020, 2006, 2005, 2004, 1996, 1994, 549, 88, 1985, 1972,
	1542, 64, 1532, 308, 549, 1958, 88, 1942, 976, 736,
	1906, 88, 88, 88, 979, 88, 963, 961, 962, 954,
	955, 956, 957, 959, 960, 480, 771, 42, 1629, 1889,
	1861, 618, 1824, 571, 88, 88, 43, 1812, 1792, 1691,
	1269, 1543, 88, 1671, 88, 1649, 1647, 1646, 1644, 88,
	779, 1597, 1596, 1553, 1515, 1514, 549, 549, 44, 572,
	1491, 1814, 1486, 1261, 308, 1417, 88, 88, 1543, 88,
	88, 88, 88, 88, 88, 88, 550, 1375, 1373, 1360,
	88, 88, 1359, 1339, 610, 1295, 1192, 893, 88, 565,
	567, 1041, 735, 1044, 875, 875, 88, 1048, 611, 1034,
	614, 1033, 1032, 1031, 1030, 1029, 731, 608, 1028, 1027,
	1026, 1025, 923, 793, 88, 764, 796, 88, 1024, 606,
	1538, 1539, 1540, 1023, 1022, 1537, 1535, 1536, 1528, 1529,
	1530, 1531, 1533, 1534, 628, 629, 1360, 946, 1021, 634,
	1526, 1527, 1020, 479, 534, 478, 1019, 1538, 1539, 1540,
	950, 951, 1537, 1535, 1536, 1528, 1529, 1530, 1531, 1533,
	1534, 480, 522, 769, 480, 480, 1018, 800, 1011, 1526,
	1527, 71, 1000, 953, 780, 68, 802, 918, 783, 55,
	504, 636, 916, 928, 569, 558, 999, 556, 1001, 525,
	2100, 2072, 1541, 950, 951, 1005, 952, 73, 1967, 852,
	487, 854, 1847, 1872, 1850, 853, 1846, 850, 1820, 1819,
	856, 895, 1530, 1531, 1533, 1534, 953, 888, 858, 887,
	88, 881, 1674, 811, 1007, 1411, 900, 1410, 88, 74,
	1526, 1527, 88, 998, 737, 2010, 1970, 69, 1443, 952,
	88, 88, 1532, 70, 88, 891, 577, 915, 575, 1818,
	1403, 88, 958, 1088, 930, 1046, 932, 1466, 931, 1047,
	1577, 1576, 1673, 730, 1470, 88, 595, 88, 88, 944,
	88, 1532, 578, 88, 1132, 88, 88, 1016, 88, 479,
	549, 938, 479, 479, 939, 940, 305, 922, 576, 52,
	1385, 857, 52, 1836, 1096, 1542, 1010, 1058, 1716, 1502,
	550, 1003, 1283, 1037, 1397, 1013, 1584, 309, 550, 897,
	599, 2053, 901, 902, 903, 904, 905, 52, 1133, 52,
	754, 1116, 908, 909, 2115, 1069, 1071, 2114, 65, 286,
	1800, 64, 547, 65, 52, 1038, 1039, 1141, 752, 52,
	461, 1042, 1423, 462, 1930, 600, 747, 1045, 748, 1628,
	467, 2012, 466, 753, 1929, 1928, 1927, 42, 1134, 1131,
	550, 550, 1612, 1543, 1090, 1074, 43, 1049, 309, 1065,
	1057, 1611, 1076, 308, 476, 1079, 1608, 1086, 1061, 1581,
	88, 1082, 1580, 287, 78, 1473, 1416, 1415, 44, 1414,
	641, 88, 88, 88, 1413, 1122, 1154, 1243, 88, 88,
	1098, 1139, 1098, 575, 1811, 88, 1121, 737, 1085, 282,
	1123, 1111, 1084, 1102, 886, 885, 1112, 879, 876, 749,
	1113, 542, 1120, 542, 1114, 1081, 1115, 1117, 1136, 747,
	88, 748, 1068, 308, 1057, 607, 1194, 747, 77, 748,
	1056, 515, 1343, 576, 1183, 1526, 1527, 1537, 1535, 1536,
	1528, 1529, 1530, 1531, 1533, 1534, 1213, 1042, 283, 1045,
	2011, 1144, 956, 957, 959, 960, 1342, 1214, 308, 1039,
	1038, 912, 911, 471, 554, 1615, 1258, 1599, 1258, 1528,
	1529, 1530, 1531, 1533, 1534, 1201, 1143, 1911, 1617, 1387,
	775, 1266, 683, 950, 951, 1265, 889, 894, 1130, 757,
	1263, 71, 749, 950, 951, 1283, 585, 2085, 960, 55,
	749, 568, 2060, 288, 596, 1161, 953, 755, 2131, 784,
	1633, 1260, 2114, 1067, 485, 1136, 953, 73, 1636, 1205,
	1212, 1162, 756, 1158, 779, 88, 88, 88, 1345, 952,
	1160, 88, 1186, 1187, 88, 1534, 1146, 1532, 289, 952,
	88, 88, 88, 88, 88, 844, 2136, 1148, 472, 74,
	1634, 1280, 88, 1195, 1422, 88, 88, 69, 76, 484,
	2125, 890, 549, 70, 597, 88, 1149, 1391, 1380, 477,
	88, 1999, 88, 473, 550, 1377, 1606, 1147, 2086, 88,
	1395, 758, 291, 474, 762, 958, 1459, 790, 1136, 88,
	1542, 1066, 910, 79, 553, 958, 757, 285, 284, 1781,
	1353, 52, 1270, 1267, 52, 2076, 486, 811, 811, 750,
	88, 88, 598, 1240, 755, 1291, 1600, 1347, 1371, 1391,
	1136, 549, 761, 1310, 1424, 488, 745, 2087, 2077, 756,
	1370, 1357, 1782, 573, 574, 2129, 1035, 487, 968, 1273,
	1054, 1348, 2124, 88, 1393, 88, 1277, 88, 968, 1399,
	1285, 88, 1178, 838, 1981, 88, 1943, 1513, 1543, 875,
	995, 1302, 1302, 1313, 1667, 1324, 1684, 309, 486, 1616,
	1912, 1336, 1337, 1338, 88, 1405, 1483, 1406, 1407, 2084,
	2113, 1386, 1460, 1431, 1372, 1433, 2130, 1374, 1396, 2111,
	1829, 1481, 750, 574, 1409, 1180, 1475, 1404, 1257, 483,
	750, 52, 588, 563, 2132, 52, 969, 561, 1238, 1241,
	1526, 1527, 65, 624, 1383, 1264, 969, 1922, 52, 811,
	880, 877, 1408, 1777, 2137, 1778, 623, 309, 1745, 1467,
	1887, 1469, 1421, 2123, 2142, 1357, 1237, 1425, 1419, 1420,
	1427, 487, 1537, 1535, 1536, 1528, 1529, 1530, 1531, 1533,
	1534, 624, 1921, 1780, 1478, 1315, 1799, 1904, 1991, 1796,
	1783, 1583, 309, 1798, 1479, 791, 1356, 1260, 1484, 1352,
	1181, 413, 1446, 1445, 1122, 929, 1461, 1449, 920, 1857,
	1468, 1632, 811, 865, 1434, 1121, 1504, 1001, 1437, 1123,
	2046, 623, 1435, 954, 955, 956, 957, 959, 960, 487,
	907, 1120, 962, 954, 955, 956, 957, 959, 960, 1455,
	837, 861, 1532, 1652, 1746, 1476, 1474, 416, 1831, 1905,
	1747, 863, 1888, 811, 1239, 55, 416, 2141, 1458, 1362,
	1361, 1779, 1844, 864, 1451, 1490, 1662, 1661, 421, 1858,
	1665, 573, 532, 417, 531, 1595, 1001, 421, 1456, 1501,
	1795, 484, 417, 615, 1797, 1642, 1594, 1822, 487, 1902,
	1382, 1658, 1448, 1593, 1480, 1542, 550, 1294, 418, 1558,
	1984, 1482, 88, 88, 1886, 1293, 1557, 418, 1690, 1623,
	1614, 1903, 2080, 1455, 1520, 1485, 1388, 420, 1140, 1092,
	1080, 1560, 1561, 1562, 1077, 602, 420, 88, 601, 594,
	1489, 88, 1458, 88, 593, 592, 591, 590, 1492, 733,
	88, 589, 586, 549, 1453, 530, 1579, 523, 1017, 1457,
	663, 88, 1456, 1648, 88, 550, 1508, 1509, 1201, 1603,
	1586, 1605, 899, 1543, 308, 2043, 88, 1454, 1607, 1770,
	1604, 1620, 1613, 1645, 1602, 1582, 1675, 1439, 1184, 1176,
	1118, 1654, 1843, 85, 85, 280, 797, 1676, 795, 1552,
	792, 787, 1625, 1624, 1370, 1653, 407, 408, 409, 1626,
	1565, 426, 763, 1672, 439, 759, 1201, 1618, 1660, 1201,
	65, 1663, 426, 439, 88, 751, 52, 419, 1643, 1704,
	493, 493, 1441, 1457, 280, 1937, 419, 280, 280, 512,
	280, 1655, 626, 85, 519, 937, 1190, 1664, 1709, 1710,
	1711, 497, 1609, 2115, 1610, 1668, 1669, 1635, 1637, 1638,
	1528, 1529, 1530, 1531, 1533, 1534, 580, 81, 529, 528,
	303, 25, 883, 302, 24, 1254, 422, 1939, 1073, 810,
	301, 23, 1621, 1703, 2001, 422, 1700, 838, 838, 1789,
	1252, 88, 88, 88, 584, 3, 1842, 2038, 1717, 1659,
	1722, 630, 412, 1719, 1078, 1191, 300, 11, 88, 2024,
	1693, 627, 1724, 88, 1075, 88, 1827, 88, 88, 88,
	498, 1595, 88, 88, 1179, 549, 1205, 1720, 1794, 1790,
	1752, 1175, 1594, 1753, 1057, 1205, 1725, 732, 1101, 1593,
	1072, 304, 10, 1679, 294, 9, 25, 581, 1793, 24,
	517, 1766, 423, 1248, 520, 521, 23, 88, 88, 293,
	7, 1249, 1769, 1250, 549, 295, 4, 1255, 1756, 1595,
	1697, 505, 88, 88, 1595, 1057, 88, 1825, 460, 945,
	1594, 1070, 11, 811, 549, 1594, 88, 1593, 52, 855,
	1810, 1853, 1593, 88, 950, 951, 1823, 803, 1852, 838,
	1127, 1828, 1833, 2139, 2073, 2140, 1526, 1527, 2027, 1862,
	1817, 1451, 950, 951, 811, 811, 1832, 10, 1826, 729,
	9, 1152, 1151, 811, 811, 1834, 88, 1201, 1201, 1839,
	1840, 1201, 1750, 1845, 1854, 7, 547, 463, 464, 488,
	952, 4, 1765, 1760, 837, 837, 280, 535, 280, 439,
	439, 487, 1851, 1639, 1630, 1572, 811, 550, 1412, 1344,
	1455, 1341, 838, 1251, 310, 1340, 950, 951, 851, 1290,
	1253, 1816, 1153, 1004, 1874, 2059, 1936, 1712, 309, 1458,
	1436, 88, 1014, 88, 1012, 308, 88, 470, 1910, 953,
	414, 1453, 898, 587, 88, 1848, 1670, 1885, 2075, 1456,
	308, 1879, 1512, 838, 1954, 1980, 1292, 1015, 1900, 41,
	1591, 1595, 952, 657, 1454, 1866, 1771, 1585, 1170, 1169,
	311, 884, 1594, 1915, 679, 88, 869, 878, 1301, 1593,
	1206, 734, 681, 808, 1914, 1897, 1932, 1916, 1838, 682,
	88, 1913, 779, 549, 809, 1938, 1043, 88, 669, 1595,
	1898, 806, 1105, 1931, 1262, 88, 837, 1281, 1940, 1500,
	1594, 1008, 649, 88, 661, 660, 1278, 1593, 1966, 555,
	1457, 559, 88, 88, 1964, 1957, 1945, 1855, 54, 570,
	433, 1952, 1953, 1971, 1941, 1394, 564, 1813, 811, 439,
	439, 1185, 1973, 52, 1974, 1951, 1961, 933, 1601, 475,
	1523, 557, 1322, 1314, 1925, 1926, 1311, 609, 740, 1924,
	1201, 996, 1960, 88, 1106, 582, 1979, 1400, 1126, 837,
	635, 941, 496, 1995, 495, 1165, 1989, 579, 426, 550,
	862, 280, 1145, 439, 613, 439, 989, 616, 88, 88,
	986, 465, 1993, 1177, 1355, 2135, 1316, 2000, 1598, 2052,
	88, 72, 493, 1990, 88, 1997, 2009, 1934, 1381, 1998,
	837, 2018, 549, 280, 29, 2016, 26, 21, 550, 88,
	2019, 1918, 19, 810, 810, 88, 1948, 85, 1526, 1527,
	2028, 308, 88, 88, 18, 2026, 280, 2033, 550, 2025,
	2022, 280, 280, 280, 28, 785, 17, 811, 2030, 27,
	2021, 15, 14, 2034, 2031, 88, 840, 88, 1001, 13,
	88, 551, 308, 1986, 280, 280, 12, 40, 2029, 39,
	487, 2037, 85, 38, 85, 65, 37, 2048, 36, 439,
	2063, 52, 2061, 2065, 88, 2054, 2058, 88, 2064, 35,
	6, 5, 2, 1, 2049, 1595, 439, 439, 2067, 85,
	439, 439, 439, 439, 439, 906, 1594, 2069, 2071, 0,
	439, 439, 2068, 1593, 0, 0, 0, 680, 426, 0,
	0, 88, 2066, 88, 0, 0, 927, 0, 2097, 2090,
	1532, 0, 0, 2095, 0, 810, 811, 0, 0, 309,
	0, 88, 0, 2096, 493, 0, 2099, 519, 2094, 2108,
	0, 2112, 2110, 0, 309, 0, 0, 2116, 0, 2040,
	88, 0, 950, 951, 2118, 2121, 2122, 0, 0, 2120,
	0, 0, 0, 838, 0, 0, 0, 0, 0, 2134,
	2133, 0, 0, 1542, 2138, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 550, 810, 0,
	0, 2143, 0, 0, 838, 838, 0, 0, 952, 0,
	0, 0, 0, 838, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1781, 1316, 1316, 1774,
	950, 951, 811, 2055, 2056, 2057, 0, 1772, 0, 810,
	0, 1776, 0, 0, 839, 0, 838, 0, 0, 0,
	280, 1543, 0, 953, 0, 0, 0, 0, 1062, 1782,
	0, 0, 280, 0, 958, 0, 0, 2078, 0, 0,
	280, 1083, 0, 0, 280, 0, 952, 0, 0, 0,
	1775, 1089, 0, 0, 0, 551, 0, 0, 1316, 1316,
	1316, 0, 310, 551, 0, 280, 0, 1109, 1110, 0,
	280, 0, 0, 280, 0, 439, 439, 0, 439, 0,
	0, 0, 0, 0, 639, 639, 550, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 0, 0, 0,
	837, 0, 958, 0, 0, 309, 1535, 1536, 1528, 1529,
	1530, 1531, 1533, 1534, 0, 551, 551, 0, 0, 0,
	1777, 0, 1778, 310, 0, 0, 0, 0, 0, 0,
	0, 837, 837, 0, 0, 0, 309, 0, 0, 0,
	837, 837, 0, 0, 0, 0, 0, 0, 838, 0,
	1780, 0, 0, 0, 0, 968, 0, 1783, 0, 0,
	0, 0, 0, 0, 0, 1526, 1527, 0, 1544, 1545,
	1546, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	1156, 1863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 280, 280, 0, 0, 0, 0, 280, 1166,
	0, 0, 0, 0, 0, 519, 0, 0, 0, 0,
	0, 0, 934, 936, 0, 1316, 1316, 1541, 0, 943,
	840, 840, 0, 969, 0, 0, 653, 0, 1779, 0,
	280, 990, 991, 992, 993, 994, 0, 0, 0, 0,
	0, 1002, 954, 955, 956, 957, 959, 960, 0, 0,
	0, 1009, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 1532, 0, 1316,
	1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
	1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 0, 1316,
	0, 0, 1526, 1527, 0, 0, 0, 0, 0, 0,
	501, 0, 1547, 508, 511, 837, 501, 963, 961, 962,
	954, 955, 956, 957, 959, 960, 0, 0, 0, 0,
	1542, 0, 0, 0, 0, 0, 0, 0, 0, 810,
	0, 0, 840, 0, 0, 280, 1350, 1351, 0, 551,
	0, 1062, 0, 0, 1358, 0, 838, 0, 0, 0,
	1363, 1364, 1366, 1368, 1369, 0, 0, 0, 950, 951,
	810, 810, 1376, 0, 0, 1378, 280, 0, 0, 810,
	810, 0, 1487, 1488, 0, 280, 0, 0, 0, 0,
	280, 953, 1398, 0, 0, 0, 0, 0, 1543, 280,
	0, 0, 0, 0, 1532, 840, 0, 0, 0, 280,
	0, 0, 810, 0, 952, 0, 0, 0, 839, 839,
	0, 0, 0, 0, 837, 0, 0, 0, 0, 0,
	1156, 1156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 1549, 1550, 1551, 840, 0, 0, 0,
	0, 0, 838, 0, 807, 0, 0, 1542, 0, 0,
	0, 0, 0, 927, 0, 927, 0, 439, 0, 0,
	958, 280, 0, 0, 0, 1444, 0, 1538, 1539, 1540,
	0, 0, 1537, 1535, 1536, 1528, 1529, 1530, 1531, 1533,
	1534, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 501, 968, 511, 1543, 0, 0, 0, 0,
	839, 0, 0, 1316, 0, 0, 0, 310, 0, 0,
	0, 0, 0, 0, 810, 0, 0, 639, 0, 0,
	0, 0, 0, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 0, 1242, 0, 1244, 1245,
	1246, 1247, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 969, 0, 839, 0, 0, 0, 1271, 0, 0,
	1688, 1689, 0, 0, 0, 0, 0, 0, 0, 837,
	0, 1536, 1528, 1529, 1530, 1531, 1533, 1534, 0, 1298,
	1299, 0, 0, 1312, 0, 1323, 1325, 1330, 1333, 1334,
	1335, 0, 0, 0, 839, 0, 0, 1316, 0, 0,
	0, 551, 0, 0, 0, 0, 0, 0, 0, 0,
	742, 1590, 0, 810, 1726, 1727, 1728, 1729, 1730, 1731,
	1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741,
	1742, 1743, 1744, 0, 1748, 0, 961, 962, 954, 955,
	956, 957, 959, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 280, 0, 1392, 0, 0, 0, 0,
	551, 0, 0, 0, 0, 0, 0, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1640, 0, 0,
	0, 1062, 0, 927, 0, 0, 0, 0, 1526, 1527,
	1650, 1544, 1545, 1546, 0, 1316, 0, 1418, 0, 738,
	0, 280, 810, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1683, 0, 0, 0,
	0, 0, 778, 0, 0, 0, 840, 501, 782, 782,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1541, 0, 0, 0, 0, 0, 0, 943, 0, 0,
	508, 511, 0, 0, 0, 0, 0, 840, 840, 0,
	0, 0, 0, 0, 1714, 0, 840, 840, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1532, 0, 0, 0, 0, 0, 1471, 1472, 810, 840,
	0, 0, 1477, 0, 0, 0, 0, 0, 807, 807,
	1548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1547, 0, 0, 0, 0,
	0, 1767, 1768, 1062, 0, 1496, 0, 0, 0, 0,
	0, 0, 1503, 1542, 0, 1507, 0, 1590, 519, 0,
	0, 0, 0, 1801, 1516, 1802, 0, 280, 1804, 1805,
	0, 0, 1808, 280, 0, 0, 0, 0, 1907, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1002,
	0, 0, 0, 0, 0, 1330, 1330, 1330, 0, 0,
	0, 0, 0, 0, 0, 1590, 0, 519, 1166, 0,
	1590, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1543, 280, 280, 839, 0, 280, 0, 1587, 0,
	807, 0, 0, 0, 0, 0, 1683, 0, 0, 0,
	0, 840, 0, 1860, 0, 0, 1050, 0, 0, 0,
	0, 0, 0, 0, 0, 839, 839, 0, 501, 0,
	639, 0, 551, 0, 839, 839, 511, 0, 0, 0,
	501, 0, 742, 0, 0, 0, 1880, 0, 0, 0,
	0, 0, 1983, 310, 0, 0, 0, 0, 0, 0,
	0, 1107, 0, 807, 0, 0, 511, 839, 0, 511,
	1538, 1539, 1540, 0, 0, 1537, 1535, 1536, 1528, 1529,
	1530, 1531, 1533, 1534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1062, 0, 1899, 807, 0, 1901, 0, 0, 1686,
	0, 0, 1687, 0, 280, 0, 0, 1590, 0, 0,
	840, 0, 0, 0, 1692, 0, 0, 0, 0, 0,
	0, 0, 0, 1701, 0, 0, 0, 0, 0, 0,
	0, 1705, 1933, 0, 1418, 519, 0, 0, 0, 0,
	2039, 0, 0, 0, 0, 1590, 0, 0, 0, 1721,
	280, 0, 0, 1723, 0, 0, 0, 1956, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 1683, 0, 0, 0, 1157, 511, 1159,
	0, 0, 519, 1683, 501, 0, 1754, 1755, 0, 839,
	0, 0, 0, 0, 551, 1761, 1762, 1763, 0, 840,
	0, 0, 1526, 1527, 0, 1544, 1545, 1546, 0, 0,
	0, 0, 0, 0, 0, 0, 1200, 0, 1695, 0,
	0, 1791, 0, 927, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2002, 2003,
	0, 0, 0, 551, 1541, 0, 0, 0, 0, 0,
	2014, 0, 0, 0, 2015, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	0, 0, 0, 0, 0, 1683, 0, 1837, 0, 0,
	0, 0, 1683, 519, 0, 840, 0, 0, 839, 0,
	0, 0, 0, 0, 1532, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2047, 0, 519, 0, 1865,
	280, 1349, 0, 1868, 1869, 0, 0, 0, 1871, 0,
	0, 0, 0, 0, 0, 1873, 0, 1875, 0, 1547,
	0, 1590, 0, 0, 1956, 1881, 0, 1683, 0, 0,
	0, 0, 1379, 0, 310, 0, 0, 1542, 0, 0,
	0, 1389, 0, 0, 0, 0, 778, 0, 0, 310,
	0, 0, 0, 0, 0, 778, 0, 0, 1890, 0,
	0, 280, 0, 519, 0, 501, 0, 839, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 551, 0, 807, 0, 0, 0, 0, 0,
	1683, 0, 0, 0, 0, 1543, 0, 1923, 0, 0,
	0, 0, 0, 0, 0, 0, 950, 951, 0, 970,
	971, 972, 980, 981, 982, 807, 807, 1438, 0, 0,
	0, 0, 973, 0, 807, 807, 0, 0, 0, 953,
	0, 0, 984, 0, 0, 0, 0, 0, 0, 0,
	1200, 0, 1959, 950, 951, 0, 970, 971, 972, 980,
	981, 982, 952, 839, 0, 0, 0, 807, 967, 973,
	0, 0, 1975, 1976, 0, 0, 953, 0, 0, 984,
	0, 0, 0, 0, 1538, 1539, 1540, 0, 0, 1537,
	1535, 1536, 1528, 1529, 1530, 1531, 1533, 1534, 0, 952,
	0, 0, 1988, 0, 0, 967, 0, 0, 0, 0,
	0, 551, 0, 0, 0, 1992, 0, 0, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1526, 1527,
	310, 1544, 1545, 1546, 0, 0, 0, 977, 985, 0,
	0, 0, 0, 0, 1694, 0, 0, 0, 0, 0,
	0, 742, 0, 983, 0, 958, 0, 0, 0, 0,
	0, 310, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 968, 0, 0, 977, 985, 0, 0, 0, 0,
	1541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	983, 0, 31, 0, 0, 0, 974, 0, 0, 807,
	0, 0, 975, 32, 56, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 58,
	1532, 0, 0, 974, 0, 34, 0, 64, 0, 969,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 1200,
	0, 0, 0, 978, 0, 0, 47, 0, 0, 0,
	0, 0, 2091, 42, 0, 1547, 59, 0, 0, 0,
	46, 0, 43, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 0, 1542, 0, 2107, 2107, 0, 48, 0,
	978, 0, 0, 0, 44, 0, 0, 1200, 0, 0,
	1200, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 2107, 0, 976, 0, 0, 964, 965,
	966, 979, 0, 963, 961, 962, 954, 955, 956, 957,
	959, 960, 0, 0, 0, 0, 0, 0, 0, 1893,
	0, 0, 0, 0, 0, 0, 0, 0, 2107, 0,
	0, 1543, 976, 0, 0, 964, 965, 966, 979, 0,
	963, 961, 962, 954, 955, 956, 957, 959, 960, 0,
	0, 0, 0, 0, 0, 45, 1568, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 62, 33, 0, 0, 49, 807, 60, 0,
	0, 0, 0, 50, 0, 0, 0, 71, 0, 0,
	0, 0, 53, 0, 0, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 0, 0, 0,
	1538, 1539, 1540, 73, 0, 1537, 1535, 1536, 1528, 1529,
	1530, 1531, 1533, 1534, 0, 0, 0, 0, 0, 63,
	0, 0, 0, 1803, 0, 0, 0, 0, 0, 1809,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 0, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1200, 1200,
	0, 0, 1200, 0, 0, 0, 0, 677, 666, 667,
	664, 665, 656, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 693, 659, 0, 0, 0, 93, 94, 95, 227,
	708, 229, 709, 96, 710, 711, 0, 97, 233, 234,
	98, 662, 692, 712, 713, 237, 0, 99, 704, 0,
	685, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 313, 107, 108, 0, 686, 688, 0, 687,
	689, 109, 110, 281, 111, 714, 112, 715, 716, 743,
	113, 0, 114, 0, 0, 0, 707, 116, 0, 117,
	0, 0, 0, 650, 118, 119, 120, 694, 695, 673,
	0, 0, 121, 122, 717, 0, 123, 0, 124, 0,
	1908, 314, 0, 125, 705, 0, 247, 0, 126, 127,
	128, 129, 701, 703, 316, 0, 133, 0, 130, 0,
	315, 131, 718, 132, 719, 720, 721, 0, 684, 0,
	317, 134, 318, 135, 136, 0, 138, 137, 0, 706,
	319, 139, 320, 0, 140, 0, 1950, 141, 0, 142,
	143, 144, 146, 256, 145, 321, 147, 148, 150, 149,
	645, 1200, 674, 702, 151, 722, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 322, 157, 323,
	696, 158, 159, 160, 161, 0, 697, 162, 262, 163,
	0, 164, 165, 166, 723, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 324, 181, 182, 651, 183, 0, 187, 188, 189,
	190, 71, 265, 191, 192, 690, 193, 184, 185, 194,
	325, 195, 724, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 725, 200, 698, 0, 203, 73, 204, 205,
	206, 207, 208, 0, 270, 726, 727, 0, 0, 209,
	699, 700, 672, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 691, 217, 0, 275, 218, 219, 220, 552,
	728, 0, 0, 221, 0, 0, 0, 69, 222, 223,
	224, 225, 646, 70, 0, 0, 0, 0, 644, 0,
	0, 0, 0, 642, 643, 0, 0, 0, 0, 0,
	0, 0, 652, 0, 0, 0, 2051, 655, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 326, 92, 327,
	328, 329, 330, 226, 331, 332, 333, 334, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 335, 97,
	233, 234, 98, 336, 337, 235, 236, 237, 338, 99,
	238, 339, 312, 340, 100, 101, 102, 1107, 103, 341,
	104, 105, 106, 342, 313, 107, 108, 343, 344, 345,
	346, 347, 348, 109, 110, 281, 111, 239, 112, 240,
	241, 349, 113, 350, 114, 351, 352, 353, 115, 116,
	354, 117, 355, 0, 356, 242, 118, 119, 120, 243,
	244, 357, 358, 359, 121, 122, 245, 0, 123, 360,
	124, 361, 362, 314, 363, 125, 246, 364, 247, 365,
	126, 127, 128, 129, 248, 249, 316, 366, 133, 367,
	130, 368, 315, 131, 250, 132, 251, 252, 253, 369,
	254, 370, 317, 134, 318, 135, 136, 371, 138, 137,
	372, 255, 319, 139, 320, 373, 140, 374, 375, 141,
	0, 142, 143, 144, 146, 256, 145, 321, 147, 148,
	150, 149, 376, 377, 378, 257, 151, 258, 152, 153,
	379, 154, 380, 381, 155, 382, 383, 156, 259, 322,
	157, 323, 260, 158, 159, 160, 161, 384, 261, 162,
	262, 163, 385, 164, 165, 166, 263, 167, 168, 386,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 387, 180, 324, 181, 182, 264, 183, 0, 187,
	188, 189, 190, 388, 265, 191, 192, 389, 193, 184,
	185, 194, 325, 195, 266, 267, 196, 390, 202, 197,
	198, 186, 199, 201, 268, 200, 269, 391, 203, 392,
	204, 205, 206, 207, 208, 393, 270, 271, 272, 394,
	395, 209, 273, 274, 396, 210, 211, 212, 213, 397,
	398, 214, 215, 216, 399, 217, 400, 275, 218, 219,
	220, 276, 277, 401, 402, 221, 403, 404, 405, 406,
	222, 223, 224, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 0, 0, 0, 0,
	0, 0, 1677, 0, 0, 0, 0, 0, 0, 0,
	1678, 90, 91, 326, 92, 327, 328, 329, 330, 226,
	331, 332, 333, 334, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 335, 97, 233, 234, 98, 336,
	337, 235, 236, 237, 338, 99, 238, 339, 312, 340,
	100, 101, 102, 0, 103, 341, 104, 105, 106, 342,
	313, 107, 108, 343, 344, 345, 346, 347, 348, 109,
	110, 281, 111, 239, 112, 240, 241, 349, 113, 350,
	114, 351, 352, 353, 115, 116, 354, 117, 355, 0,
	356, 242, 118, 119, 120, 243, 244, 357, 358, 359,
	121, 122, 245, 0, 123, 360, 124, 361, 362, 314,
	363, 125, 246, 364, 247, 365, 126, 127, 128, 129,
	248, 249, 316, 366, 133, 367, 130, 368, 315, 131,
	250, 132, 251, 252, 253, 369, 254, 370, 317, 134,
	318, 135, 136, 371, 138, 137, 372, 255, 319, 139,
	320, 373, 140, 374, 375, 141, 0, 142, 143, 144,
	146, 256, 145, 321, 147, 148, 150, 149, 376, 377,
	378, 257, 151, 258, 152, 153, 379, 154, 380, 381,
	155, 382, 383, 156, 259, 322, 157, 323, 260, 158,
	159, 160, 161, 384, 261, 162, 262, 163, 385, 164,
	165, 166, 263, 167, 168, 386, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 387, 180, 324,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 388,
	265, 191, 192, 389, 193, 184, 185, 194, 325, 195,
	266, 267, 196, 390, 202, 197, 198, 186, 199, 201,
	268, 200, 269, 391, 203, 392, 204, 205, 206, 207,
	208, 393, 270, 271, 272, 394, 395, 209, 273, 274,
	396, 210, 211, 212, 213, 397, 398, 214, 215, 216,
	399, 217, 400, 275, 218, 219, 220, 276, 277, 401,
	402, 221, 403, 404, 405, 406, 222, 223, 224, 225,
	0, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2032, 90,
	91, 326, 92, 327, 328, 329, 330, 226, 331, 332,
	333, 334, 93, 94, 95, 227, 228, 229, 230, 96,
	231, 232, 335, 97, 233, 234, 98, 336, 337, 235,
	236, 237, 338, 99, 238, 339, 312, 340, 100, 101,
	102, 0, 103, 341, 104, 105, 106, 342, 313, 107,
	108, 343, 344, 345, 346, 347, 348, 109, 110, 281,
	111, 239, 112, 240, 241, 349, 113, 350, 114, 351,
	352, 353, 115, 116, 354, 117, 355, 0, 356, 242,
	118, 119, 120, 243, 244, 357, 358, 359, 121, 122,
	245, 0, 123, 360, 124, 361, 362, 314, 363, 125,
	246, 364, 247, 365, 126, 127, 128, 129, 248, 249,
	316, 366, 133, 367, 130, 368, 315, 131, 250, 132,
	251, 252, 253, 369, 254, 370, 317, 134, 318, 135,
	136, 371, 138, 137, 372, 255, 319, 139, 320, 373,
	140, 374, 375, 141, 0, 142, 143, 144, 146, 256,
	145, 321, 147, 148, 150, 149, 376, 377, 378, 257,
	151, 258, 152, 153, 379, 154, 380, 381, 155, 382,
	383, 156, 259, 322, 157, 323, 260, 158, 159, 160,
	161, 384, 261, 162, 262, 163, 385, 164, 165, 166,
	263, 167, 168, 386, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 387, 180, 324, 181, 182,
	264, 183, 0, 187, 188, 189, 190, 388, 265, 191,
	192, 389, 193, 184, 185, 194, 325, 195, 266, 267,
	196, 390, 202, 197, 198, 186, 199, 201, 268, 200,
	269, 391, 203, 392, 204, 205, 206, 207, 208, 393,
	270, 271, 272, 394, 395, 209, 273, 274, 396, 210,
	211, 212, 213, 397, 398, 214, 215, 216, 399, 217,
	400, 275, 218, 219, 220, 276, 277, 401, 402, 221,
	403, 404, 405, 406, 222, 223, 224, 225, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 772, 0, 0, 90, 91, 326, 92, 327, 328,
	329, 330, 226, 331, 332, 333, 334, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 335, 97, 233,
	234, 98, 336, 337, 235, 236, 237, 338, 99, 238,
	339, 312, 340, 100, 101, 102, 0, 103, 341, 104,
	105, 106, 342, 313, 107, 108, 343, 344, 345, 346,
	347, 348, 109, 110, 281, 111, 239, 112, 240, 241,
	349, 113, 350, 114, 351, 352, 353, 115, 116, 354,
	117, 355, 0, 356, 242, 118, 119, 120, 243, 244,
	357, 358, 359, 121, 122, 245, 0, 123, 360, 124,
	361, 362, 314, 363, 125, 246, 364, 247, 365, 126,
	127, 128, 129, 248, 249, 316, 366, 133, 367, 130,
	368, 315, 131, 250, 132, 251, 252, 253, 369, 254,
	370, 317, 134, 318, 135, 136, 371, 138, 137, 372,
	255, 319, 139, 320, 373, 140, 374, 375, 141, 0,
	142, 143, 144, 146, 256, 145, 321, 147, 148, 150,
	149, 376, 377, 378, 257, 151, 258, 152, 153, 379,
	154, 380, 381, 155, 382, 383, 156, 259, 322, 157,
	323, 260, 158, 159, 160, 161, 384, 261, 162, 262,
	163, 385, 164, 165, 166, 263, 167, 168, 386, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	387, 180, 324, 181, 182, 264, 183, 0, 187, 188,
	189, 190, 388, 265, 191, 192, 389, 193, 184, 185,
	194, 325, 195, 266, 267, 196, 390, 202, 197, 198,
	186, 199, 201, 268, 200, 269, 391, 203, 392, 204,
	205, 206, 207, 208, 393, 270, 271, 272, 394, 395,
	209, 273, 274, 396, 210, 211, 212, 213, 397, 398,
	214, 215, 216, 399, 217, 400, 275, 218, 219, 220,
	276, 277, 401, 402, 221, 403, 404, 405, 406, 222,
	223, 224, 225, 677, 666, 667, 664, 665, 656, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	91, 1287, 92, 0, 0, 0, 0, 693, 659, 0,
	0, 0, 93, 94, 95, 227, 708, 229, 709, 96,
	710, 711, 0, 97, 233, 234, 98, 662, 692, 712,
	713, 237, 0, 99, 704, 0, 685, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 313, 107,
	108, 0, 686, 688, 0, 687, 689, 109, 110, 281,
	111, 714, 112, 715, 716, 0, 113, 0, 114, 0,
	1288, 0, 707, 116, 0, 117, 0, 0, 0, 650,
	118, 119, 120, 694, 695, 673, 0, 0, 121, 122,
	717, 0, 123, 0, 124, 0, 0, 314, 0, 125,
	705, 0, 247, 0, 126, 127, 128, 129, 701, 703,
	316, 0, 133, 0, 130, 0, 315, 131, 718, 132,
	719, 720, 721, 0, 684, 0, 317, 134, 318, 135,
	136, 0, 138, 137, 0, 706, 319, 139, 320, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 321, 147, 148, 150, 149, 645, 0, 674, 702,
	151, 722, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 322, 157, 323, 696, 158, 159, 160,
	161, 0, 697, 162, 262, 163, 0, 164, 165, 166,
	723, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 324, 181, 182,
	651, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 690, 193, 184, 185, 194, 325, 195, 724, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 725, 200,
	698, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 726, 727, 0, 0, 209, 699, 700, 672, 210,
	211, 212, 213, 0, 0, 214, 215, 216, 691, 217,
	0, 275, 218, 219, 220, 276, 728, 1286, 0, 221,
	0, 0, 0, 0, 222, 223, 224, 225, 646, 0,
	0, 0, 0, 0, 644, 0, 0, 0, 0, 642,
	643, 1289, 677, 666, 667, 664, 665, 656, 652, 1284,
	0, 0, 0, 655, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 693, 659, 0, 0,
	0, 93, 94, 95, 227, 708, 229, 709, 96, 710,
	711, 0, 97, 233, 234, 98, 662, 692, 712, 713,
	237, 0, 99, 704, 0, 685, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 313, 107, 108,
	0, 686, 688, 0, 687, 689, 109, 110, 281, 111,
	714, 112, 715, 716, 0, 113, 0, 114, 0, 0,
	0, 707, 116, 0, 117, 0, 0, 0, 650, 118,
	119, 120, 694, 695, 673, 0, 0, 121, 122, 717,
	0, 123, 0, 124, 0, 0, 314, 0, 125, 705,
	0, 247, 0, 126, 127, 128, 129, 701, 703, 316,
	0, 133, 0, 130, 0, 315, 131, 718, 132, 719,
	720, 721, 0, 684, 0, 317, 134, 318, 135, 136,
	0, 138, 137, 0, 706, 319, 139, 320, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	321, 147, 148, 150, 149, 645, 0, 674, 702, 151,
	722, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 322, 157, 323, 696, 158, 159, 160, 161,
	0, 697, 162, 262, 163, 0, 164, 165, 166, 723,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 324, 181, 182, 651,
	183, 0, 187, 188, 189, 190, 71, 265, 191, 192,
	690, 193, 184, 185, 194, 325, 195, 724, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 725, 200, 698,
	0, 203, 73, 204, 205, 206, 207, 208, 0, 270,
	726, 727, 0, 0, 209, 699, 700, 672, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 691, 217, 0,
	275, 218, 219, 220, 552, 728, 0, 0, 221, 0,
	0, 0, 69, 222, 223, 224, 225, 646, 70, 0,
	0, 0, 0, 644, 0, 0, 0, 0, 642, 643,
	677, 666, 667, 664, 665, 656, 0, 652, 0, 0,
	0, 0, 655, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 693, 659, 0, 0, 0, 93,
	94, 95, 227, 708, 229, 709, 96, 710, 711, 1326,
	97, 233, 234, 98, 662, 692, 712, 713, 237, 0,
	99, 704, 0, 685, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 313, 107, 108, 0, 686,
	688, 0, 687, 689, 109, 110, 281, 111, 714, 112,
	715, 716, 0, 113, 0, 114, 0, 0, 0, 707,
	116, 0, 117, 0, 0, 0, 650, 118, 119, 120,
	694, 695, 673, 0, 0, 121, 122, 717, 0, 123,
	0, 124, 0, 1331, 314, 0, 125, 705, 0, 247,
	0, 126, 127, 128, 129, 701, 703, 316, 0, 133,
	0, 130, 0, 315, 131, 718, 132, 719, 720, 721,
	0, 684, 0, 317, 134, 318, 135, 136, 0, 138,
	137, 1327, 706, 319, 139, 320, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 321, 147,
	148, 150, 149, 645, 0, 674, 702, 151, 722, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	322, 157, 323, 696, 158, 159, 160, 161, 0, 697,
	162, 262, 163, 0, 164, 165, 166, 723, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 324, 181, 182, 651, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 690, 193,
	184, 185, 194, 325, 195, 724, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 725, 200, 698, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 726, 727,
	0, 1328, 209, 699, 700, 672, 210, 211, 212, 213,
	0, 0, 214, 215, 216, 691, 217, 0, 275, 218,
	219, 220, 276, 728, 0, 0, 221, 0, 0, 0,
	0, 222, 223, 224, 225, 646, 0, 0, 0, 0,
	0, 644, 0, 0, 0, 0, 642, 643, 677, 666,
	667, 664, 665, 656, 0, 652, 0, 0, 0, 0,
	655, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 693, 659, 0, 0, 0, 93, 94, 95,
	227, 708, 229, 709, 96, 710, 711, 0, 97, 233,
	234, 98, 662, 692, 712, 713, 237, 0, 99, 704,
	0, 685, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 313, 107, 108, 0, 686, 688, 0,
	687, 689, 109, 110, 281, 111, 714, 112, 715, 716,
	0, 113, 0, 114, 0, 0, 0, 707, 116, 0,
	117, 0, 0, 0, 650, 118, 119, 120, 694, 695,
	673, 0, 0, 121, 122, 717, 0, 123, 0, 124,
	0, 0, 314, 0, 125, 705, 0, 247, 0, 126,
	127, 128, 129, 701, 703, 316, 0, 133, 0, 130,
	0, 315, 131, 718, 132, 719, 720, 721, 0, 684,
	0, 317, 134, 318, 135, 136, 0, 138, 137, 0,
	706, 319, 139, 320, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 321, 147, 148, 150,
	149, 645, 1619, 674, 702, 151, 722, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 322, 157,
	323, 696, 158, 159, 160, 161, 0, 697, 162, 262,
	163, 0, 164, 165, 166, 723, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 324, 181, 182, 651, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 690, 193, 184, 185,
	194, 325, 195, 724, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 725, 200, 698, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 726, 727, 0, 0,
	209, 699, 700, 672, 210, 211, 212, 213, 0, 0,
	214, 215, 216, 691, 217, 0, 275, 218, 219, 220,
	276, 728, 0, 0, 221, 0, 0, 0, 0, 222,
	223, 224, 225, 646, 0, 0, 0, 0, 0, 644,
	0, 0, 0, 0, 642, 643, 640, 677, 666, 667,
	664, 665, 656, 652, 0, 0, 0, 0, 655, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 693, 659, 0, 0, 0, 93, 94, 95, 227,
	708, 229, 709, 96, 710, 711, 0, 97, 233, 234,
	98, 662, 692, 712, 713, 237, 0, 99, 704, 0,
	685, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 313, 107, 108, 0, 686, 688, 0, 687,
	689, 109, 110, 281, 111, 714, 112, 715, 716, 0,
	113, 0, 114, 0, 0, 0, 707, 116, 0, 117,
	0, 0, 0, 650, 118, 119, 120, 694, 695, 673,
	0, 0, 121, 122, 717, 0, 123, 0, 124, 0,
	0, 314, 0, 125, 705, 0, 247, 0, 126, 127,
	128, 129, 701, 703, 316, 0, 133, 0, 130, 0,
	315, 131, 718, 132, 719, 720, 721, 0, 684, 0,
	317, 134, 318, 135, 136, 0, 138, 137, 0, 706,
	319, 139, 320, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 321, 147, 148, 150, 149,
	645, 0, 674, 702, 151, 722, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 322, 157, 323,
	696, 158, 159, 160, 161, 0, 697, 162, 262, 163,
	0, 164, 165, 166, 723, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 324, 181, 182, 651, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 690, 193, 184, 185, 194,
	325, 195, 724, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 725, 200, 698, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 726, 727, 0, 0, 209,
	699, 700, 672, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 691, 217, 0, 275, 218, 219, 220, 276,
	728, 0, 0, 221, 0, 0, 0, 0, 222, 223,
	224, 225, 646, 0, 0, 0, 0, 0, 644, 0,
	0, 0, 0, 642, 643, 0, 0, 0, 0, 0,
	1007, 1279, 652, 0, 0, 0, 0, 655, 677, 666,
	667, 664, 665, 656, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 693, 659, 0, 0, 0, 93, 94, 95,
	227, 708, 229, 709, 96, 710, 711, 0, 97, 233,
	234, 98, 662, 692, 712, 713, 237, 0, 99, 704,
	0, 685, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 313, 107, 108, 0, 686, 688, 0,
	687, 689, 109, 110, 281, 111, 714, 112, 715, 716,
	0, 113, 0, 114, 0, 0, 0, 707, 116, 0,
	117, 0, 0, 0, 650, 118, 119, 120, 694, 695,
	673, 0, 0, 121, 122, 717, 0, 123, 0, 124,
	0, 0, 314, 0, 125, 705, 0, 247, 0, 126,
	127, 128, 129, 701, 703, 316, 0, 133, 0, 130,
	0, 315, 131, 718, 132, 719, 720, 721, 0, 684,
	0, 317, 134, 318, 135, 136, 0, 138, 137, 0,
	706, 319, 139, 320, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 321, 147, 148, 150,
	149, 645, 0, 674, 702, 151, 722, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 322, 157,
	323, 696, 158, 159, 160, 161, 0, 697, 162, 262,
	163, 0, 164, 165, 166, 723, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 324, 181, 182, 651, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 690, 193, 184, 185,
	194, 325, 195, 724, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 725, 200, 698, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 726, 727, 0, 0,
	209, 699, 700, 672, 210, 211, 212, 213, 0, 0,
	214, 215, 216, 691, 217, 0, 275, 218, 219, 220,
	276, 728, 0, 0, 221, 0, 0, 0, 0, 222,
	223, 224, 225, 646, 0, 0, 0, 0, 0, 644,
	0, 0, 0, 0, 642, 643, 677, 666, 667, 664,
	665, 656, 0, 652, 1751, 0, 0, 0, 655, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	693, 659, 0, 0, 0, 93, 94, 95, 227, 708,
	229, 709, 96, 710, 711, 0, 97, 233, 234, 98,
	662, 692, 712, 713, 237, 0, 99, 704, 0, 685,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 313, 107, 108, 0, 686, 688, 0, 687, 689,
	109, 110, 281, 111, 714, 112, 715, 716, 0, 113,
	0, 114, 0, 0, 0, 707, 116, 0, 117, 0,
	0, 0, 650, 118, 119, 120, 694, 695, 673, 0,
	0, 121, 122, 717, 0, 123, 0, 124, 0, 0,
	314, 0, 125, 705, 0, 247, 0, 126, 127, 128,
	129, 701, 703, 316, 0, 133, 0, 130, 0, 315,
	131, 718, 132, 719, 720, 721, 0, 684, 0, 317,
	134, 318, 135, 136, 0, 138, 137, 0, 706, 319,
	139, 320, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 321, 147, 148, 150, 149, 645,
	0, 674, 702, 151, 722, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 322, 157, 323, 696,
	158, 159, 160, 161, 0, 697, 162, 262, 163, 0,
	164, 165, 166, 723, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	324, 181, 182, 651, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 690, 193, 184, 185, 194, 325,
	195, 724, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 725, 200, 698, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 726, 727, 0, 0, 209, 699,
	700, 672, 210, 211, 212, 213, 0, 0, 214, 215,
	216, 691, 217, 0, 275, 218, 219, 220, 276, 728,
	1708, 0, 221, 0, 0, 0, 0, 222, 223, 224,
	225, 646, 0, 0, 0, 0, 0, 644, 0, 0,
	0, 0, 642, 643, 677, 666, 667, 664, 665, 656,
	0, 652, 0, 0, 0, 0, 655, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 693, 659,
	0, 0, 0, 93, 94, 95, 227, 708, 229, 709,
	96, 710, 711, 0, 97, 233, 234, 98, 662, 692,
	712, 713, 237, 0, 99, 704, 0, 685, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 313,
	107, 108, 0, 686, 688, 0, 687, 689, 109, 110,
	281, 111, 714, 112, 715, 716, 0, 113, 0, 114,
	0, 0, 0, 707, 116, 0, 117, 0, 0, 0,
	650, 118, 119, 120, 694, 695, 673, 0, 0, 121,
	122, 717, 0, 123, 0, 124, 0, 0, 314, 0,
	125, 705, 0, 247, 0, 126, 127, 128, 129, 701,
	703, 316, 0, 133, 0, 130, 0, 315, 131, 718,
	132, 719, 720, 721, 0, 684, 0, 317, 134, 318,
	135, 136, 0, 138, 137, 0, 706, 319, 139, 320,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 321, 147, 148, 150, 149, 645, 0, 674,
	702, 151, 722, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 259, 322, 157, 323, 696, 158, 159,
	160, 161, 0, 697, 162, 262, 163, 0, 164, 165,
	166, 723, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 324, 181,
	182, 651, 183, 0, 187, 188, 189, 190, 0, 265,
	191, 192, 690, 193, 184, 185, 194, 325, 195, 724,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 725,
	200, 698, 0, 203, 0, 204, 205, 206, 207, 208,
	0, 270, 726, 727, 0, 0, 209, 699, 700, 672,
	210, 211, 212, 213, 0, 0, 214, 215, 216, 691,
	217, 0, 275, 218, 219, 220, 276, 728, 0, 0,
	221, 0, 0, 0, 0, 222, 223, 224, 225, 646,
	0, 0, 0, 0, 0, 644, 0, 0, 0, 0,
	642, 643, 677, 666, 667, 664, 665, 656, 0, 652,
	1698, 0, 0, 0, 655, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 693, 659, 0, 0,
	0, 93, 94, 95, 227, 708, 229, 709, 96, 710,
	711, 0, 97, 233, 234, 98, 662, 692, 712, 713,
	237, 0, 99, 704, 0, 685, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 313, 107, 108,
	0, 686, 688, 0, 687, 689, 109, 110, 281, 111,
	714, 112, 715, 716, 743, 113, 0, 114, 0, 0,
	0, 707, 116, 0, 117, 0, 0, 0, 650, 118,
	119, 120, 694, 695, 673, 0, 0, 121, 122, 717,
	0, 123, 0, 124, 0, 0, 314, 0, 125, 705,
	0, 247, 0, 126, 127, 128, 129, 701, 703, 316,
	0, 133, 0, 130, 0, 315, 131, 718, 132, 719,
	720, 721, 0, 684, 0, 317, 134, 318, 135, 136,
	0, 138, 137, 0, 706, 319, 139, 320, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	321, 147, 148, 150, 149, 645, 0, 674, 702, 151,
	722, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 322, 157, 323, 696, 158, 159, 160, 161,
	0, 697, 162, 262, 163, 0, 164, 165, 166, 723,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 324, 181, 182, 651,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	690, 193, 184, 185, 194, 325, 195, 724, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 725, 200, 698,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	726, 727, 0, 0, 209, 699, 700, 672, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 691, 217, 0,
	275, 218, 219, 220, 276, 728, 0, 0, 221, 0,
	0, 0, 0, 222, 223, 224, 225, 646, 0, 0,
	0, 0, 0, 644, 0, 0, 0, 0, 642, 643,
	677, 666, 667, 664, 665, 656, 0, 652, 0, 0,
	0, 0, 655, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 693, 659, 0, 0, 0, 93,
	94, 95, 227, 708, 229, 709, 96, 710, 711, 0,
	97, 233, 234, 98, 662, 692, 712, 713, 237, 0,
	99, 704, 0, 685, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 313, 107, 108, 0, 686,
	688, 0, 687, 689, 109, 110, 281, 111, 714, 112,
	715, 716, 0, 113, 0, 114, 0, 0, 0, 707,
	116, 0, 117, 0, 0, 0, 650, 118, 119, 120,
	694, 695, 673, 0, 0, 121, 122, 717, 0, 123,
	0, 124, 0, 1331, 314, 0, 125, 705, 0, 247,
	0, 126, 127, 128, 129, 701, 703, 316, 0, 133,
	0, 130, 0, 315, 131, 718, 132, 719, 720, 721,
	0, 684, 0, 317, 134, 318, 135, 136, 0, 138,
	137, 0, 706, 319, 139, 320, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 321, 147,
	148, 150, 149, 645, 0, 674, 702, 151, 722, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	322, 157, 323, 696, 158, 159, 160, 161, 0, 697,
	162, 262, 163, 0, 164, 165, 166, 723, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 324, 181, 182, 651, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 690, 193,
	184, 185, 194, 325, 195, 724, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 725, 200, 698, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 726, 727,
	0, 0, 209, 699, 700, 672, 210, 211, 212, 213,
	0, 0, 214, 215, 216, 691, 217, 0, 275, 218,
	219, 220, 276, 728, 0, 0, 221, 0, 0, 0,
	0, 222, 223, 224, 225, 646, 0, 0, 0, 0,
	0, 644, 0, 0, 0, 0, 642, 643, 677, 666,
	667, 664, 665, 656, 0, 652, 0, 0, 0, 0,
	655, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 693, 659, 0, 0, 0, 93, 94, 95,
	227, 708, 229, 709, 96, 710, 711, 0, 97, 233,
	234, 98, 662, 692, 712, 713, 237, 0, 99, 704,
	0, 685, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 313, 107, 108, 0, 686, 688, 0,
	687, 689, 109, 110, 281, 111, 714, 112, 715, 716,
	0, 113, 0, 114, 0, 0, 0, 707, 116, 0,
	117, 0, 0, 0, 650, 118, 119, 120, 694, 695,
	673, 0, 0, 121, 122, 717, 0, 123, 0, 124,
	0, 0, 314, 0, 125, 705, 0, 247, 0, 126,
	127, 128, 129, 701, 703, 316, 0, 133, 0, 130,
	0, 315, 131, 718, 132, 719, 720, 721, 0, 684,
	0, 317, 134, 318, 135, 136, 0, 138, 137, 0,
	706, 319, 139, 320, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 321, 147, 148, 150,
	149, 645, 0, 674, 702, 151, 722, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 322, 157,
	323, 696, 158, 159, 160, 161, 0, 697, 162, 262,
	163, 0, 164, 165, 166, 723, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 324, 181, 182, 651, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 690, 193, 184, 185,
	194, 325, 195, 724, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 725, 200, 698, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 726, 727, 0, 0,
	209, 699, 700, 672, 210, 211, 212, 213, 0, 0,
	214, 215, 216, 691, 217, 0, 275, 218, 219, 220,
	276, 728, 0, 0, 221, 0, 0, 0, 0, 222,
	223, 224, 225, 646, 0, 0, 0, 0, 0, 644,
	0, 0, 0, 0, 642, 643, 677, 666, 667, 664,
	665, 656, 0, 652, 1274, 0, 0, 0, 655, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	693, 659, 0, 0, 0, 93, 94, 95, 227, 708,
	229, 709, 96, 710, 711, 0, 97, 233, 234, 98,
	662, 692, 712, 713, 237, 0, 99, 704, 0, 685,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 313, 107, 108, 0, 686, 688, 0, 687, 689,
	109, 110, 281, 111, 714, 112, 715, 716, 0, 113,
	0, 114, 0, 0, 0, 707, 116, 0, 117, 0,
	0, 0, 650, 118, 119, 120, 694, 695, 673, 0,
	0, 121, 122, 717, 0, 123, 0, 124, 0, 0,
	314, 0, 125, 705, 0, 247, 0, 126, 127, 128,
	129, 701, 703, 316, 0, 133, 0, 130, 0, 315,
	131, 718, 132, 719, 720, 721, 0, 684, 0, 317,
	134, 318, 135, 136, 0, 138, 137, 0, 706, 319,
	139, 320, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 321, 147, 148, 150, 149, 645,
	0, 674, 702, 151, 722, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 322, 157, 323, 696,
	158, 159, 160, 161, 0, 697, 162, 262, 163, 0,
	164, 165, 166, 723, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	324, 181, 182, 651, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 690, 193, 184, 185, 194, 325,
	195, 724, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 725, 200, 698, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 726, 727, 0, 0, 209, 699,
	700, 672, 210, 211, 212, 213, 0, 0, 214, 215,
	216, 691, 217, 0, 275, 218, 219, 220, 276, 728,
	0, 0, 221, 0, 0, 0, 0, 222, 223, 224,
	225, 646, 0, 0, 0, 0, 0, 644, 0, 0,
	0, 0, 642, 643, 640, 677, 666, 667, 664, 665,
	656, 652, 0, 0, 0, 0, 655, 0, 0, 0,
	0, 90, 91, 935, 92, 0, 0, 0, 0, 693,
	659, 0, 0, 0, 93, 94, 95, 227, 708, 229,
	709, 96, 710, 711, 0, 97, 233, 234, 98, 662,
	692, 712, 713, 237, 0, 99, 704, 0, 685, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	313, 107, 108, 0, 686, 688, 0, 687, 689, 109,
	110, 281, 111, 714, 112, 715, 716, 0, 113, 0,
	114, 0, 0, 0, 707, 116, 0, 117, 0, 0,
	0, 650, 118, 119, 120, 694, 695, 673, 0, 0,
	121, 122, 717, 0, 123, 0, 124, 0, 0, 314,
	0, 125, 705, 0, 247, 0, 126, 127, 128, 129,
	701, 703, 316, 0, 133, 0, 130, 0, 315, 131,
	718, 132, 719, 720, 721, 0, 684, 0, 317, 134,
	318, 135, 136, 0, 138, 137, 0, 706, 319, 139,
	320, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 321, 147, 148, 150, 149, 645, 0,
	674, 702, 151, 722, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 322, 157, 323, 696, 158,
	159, 160, 161, 0, 697, 162, 262, 163, 0, 164,
	165, 166, 723, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 324,
	181, 182, 651, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 690, 193, 184, 185, 194, 325, 195,
	724, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	725, 200, 698, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 726, 727, 0, 0, 209, 699, 700,
	672, 210, 211, 212, 213, 0, 0, 214, 215, 216,
	691, 217, 0, 275, 218, 219, 220, 276, 728, 0,
	0, 221, 0, 0, 0, 0, 222, 223, 224, 225,
	646, 0, 0, 0, 0, 0, 644, 0, 0, 0,
	0, 642, 643, 677, 666, 667, 664, 665, 656, 0,
	652, 0, 0, 0, 0, 655, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 693, 659, 0,
	0, 0, 93, 94, 95, 227, 708, 229, 709, 96,
	710, 711, 0, 97, 233, 234, 98, 662, 692, 712,
	713, 237, 0, 99, 704, 0, 685, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 313, 107,
	2106, 0, 686, 688, 0, 687, 689, 109, 110, 281,
	111, 714, 112, 715, 716, 0, 113, 0, 114, 0,
	0, 0, 707, 116, 0, 117, 0, 0, 0, 650,
	118, 119, 120, 694, 695, 673, 0, 0, 121, 122,
	717, 0, 123, 0, 124, 0, 0, 314, 0, 125,
	705, 0, 247, 0, 126, 127, 128, 129, 701, 703,
	316, 0, 133, 0, 130, 0, 315, 131, 718, 132,
	719, 720, 721, 0, 684, 0, 317, 134, 318, 135,
	136, 0, 138, 137, 0, 706, 319, 139, 320, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 321, 147, 148, 150, 149, 645, 0, 674, 702,
	151, 722, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 322, 157, 323, 696, 158, 159, 160,
	161, 0, 697, 162, 262, 163, 0, 164, 165, 166,
	723, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 324, 181, 182,
	651, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 690, 193, 184, 185, 194, 325, 195, 724, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 725, 200,
	698, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 726, 727, 0, 0, 209, 699, 700, 672, 210,
	211, 2105, 213, 0, 0, 214, 215, 216, 691, 217,
	0, 275, 218, 219, 220, 276, 728, 0, 0, 221,
	0, 0, 0, 0, 222, 223, 224, 225, 646, 0,
	0, 0, 0, 0, 644, 0, 0, 0, 0, 642,
	643, 677, 666, 667, 664, 665, 656, 0, 652, 0,
	0, 0, 0, 655, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 693, 659, 0, 0, 0,
	93, 94, 95, 2104, 708, 229, 709, 96, 710, 711,
	0, 97, 233, 234, 98, 662, 692, 712, 713, 237,
	0, 99, 704, 0, 685, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 313, 107, 2106, 0,
	686, 688, 0, 687, 689, 109, 110, 281, 111, 714,
	112, 715, 716, 0, 113, 0, 114, 0, 0, 0,
	707, 116, 0, 117, 0, 0, 0, 650, 118, 119,
	120, 694, 695, 673, 0, 0, 121, 122, 717, 0,
	123, 0, 124, 0, 0, 314, 0, 125, 705, 0,
	247, 0, 126, 127, 128, 129, 701, 703, 316, 0,
	133, 0, 130, 0, 315, 131, 718, 132, 719, 720,
	721, 0, 684, 0, 317, 134, 318, 135, 136, 0,
	138, 137, 0, 706, 319, 139, 320, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 321,
	147, 148, 150, 149, 645, 0, 674, 702, 151, 722,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 322, 157, 323, 696, 158, 159, 160, 161, 0,
	697, 162, 262, 163, 0, 164, 165, 166, 723, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 324, 181, 182, 651, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 690,
	193, 184, 185, 194, 325, 195, 724, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 725, 200, 698, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 726,
	727, 0, 0, 209, 699, 700, 672, 210, 211, 2105,
	213, 0, 0, 214, 215, 216, 691, 217, 0, 275,
	218, 219, 220, 276, 728, 0, 0, 221, 0, 0,
	0, 0, 222, 223, 224, 225, 646, 0, 0, 0,
	0, 0, 644, 0, 0, 0, 0, 642, 643, 677,
	666, 667, 664, 665, 656, 0, 652, 0, 0, 0,
	0, 655, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 693, 659, 0, 0, 0, 93, 94,
	95, 227, 708, 229, 709, 96, 710, 711, 0, 97,
	233, 234, 98, 662, 692, 712, 713, 237, 0, 99,
	704, 0, 685, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 313, 107, 108, 0, 686, 688,
	0, 687, 689, 109, 110, 281, 111, 714, 112, 715,
	716, 0, 113, 0, 114, 0, 0, 0, 707, 116,
	0, 117, 0, 0, 0, 650, 118, 119, 120, 694,
	695, 673, 0, 0, 121, 122, 717, 0, 123, 0,
	124, 0, 0, 314, 0, 125, 705, 0, 247, 0,
	126, 127, 128, 129, 701, 703, 316, 0, 133, 0,
	130, 0, 315, 131, 718, 132, 719, 720, 721, 0,
	684, 0, 317, 134, 318, 135, 136, 0, 138, 137,
	0, 706, 319, 139, 320, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 321, 147, 148,
	150, 149, 645, 0, 674, 702, 151, 722, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 322,
	157, 323, 696, 158, 159, 160, 161, 0, 697, 162,
	262, 163, 0, 164, 165, 166, 723, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 324, 181, 182, 651, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 690, 193, 184,
	185, 194, 325, 195, 724, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 725, 200, 698, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 726, 727, 0,
	0, 209, 699, 700, 672, 210, 211, 212, 213, 0,
	0, 214, 215, 216, 691, 217, 0, 275, 218, 219,
	220, 276, 728, 0, 0, 221, 0, 0, 0, 0,
	222, 223, 224, 225, 646, 0, 0, 0, 0, 0,
	644, 0, 0, 0, 0, 642, 643, 1303, 666, 667,
	664, 665, 656, 0, 652, 0, 0, 0, 0, 655,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 693, 659, 0, 0, 0, 93, 94, 95, 227,
	708, 229, 709, 96, 710, 711, 0, 97, 233, 234,
	98, 662, 692, 712, 713, 237, 0, 99, 704, 0,
	685, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 313, 107, 108, 0, 686, 688, 0, 687,
	689, 109, 110, 281, 111, 714, 1306, 715, 716, 0,
	113, 0, 114, 0, 0, 0, 707, 116, 0, 117,
	0, 0, 0, 650, 118, 119, 120, 694, 695, 673,
	0, 0, 121, 122, 717, 0, 123, 0, 124, 0,
	0, 314, 0, 125, 705, 0, 247, 0, 126, 127,
	1307, 129, 701, 703, 316, 0, 133, 0, 130, 0,
	315, 131, 718, 132, 719, 720, 721, 0, 684, 0,
	317, 134, 318, 135, 136, 0, 138, 137, 0, 706,
	319, 139, 320, 0, 140, 0, 0, 141, 0, 142,
	1308, 1305, 146, 256, 145, 321, 147, 148, 150, 149,
	645, 0, 674, 702, 151, 722, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 322, 157, 323,
	696, 158, 159, 160, 161, 0, 697, 162, 262, 163,
	0, 164, 165, 166, 723, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 324, 181, 182, 651, 183, 0, 187, 188, 189,
	1309, 0, 265, 191, 192, 690, 193, 184, 185, 194,
	325, 195, 724, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 725, 200, 698, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 726, 727, 0, 0, 209,
	699, 700, 672, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 691, 217, 0, 275, 218, 219, 220, 276,
	728, 0, 0, 221, 0, 0, 0, 0, 222, 223,
	1304, 225, 646, 0, 0, 0, 0, 0, 644, 0,
	0, 0, 0, 642, 643, 677, 666, 667, 664, 665,
	656, 0, 652, 0, 0, 0, 0, 655, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 693,
	659, 0, 0, 0, 93, 94, 95, 227, 708, 229,
	709, 96, 710, 711, 0, 97, 233, 234, 98, 662,
	692, 712, 713, 237, 0, 99, 704, 0, 685, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	313, 107, 108, 0, 686, 688, 0, 687, 689, 109,
	110, 281, 111, 714, 112, 715, 716, 0, 113, 0,
	114, 0, 0, 0, 707, 116, 0, 117, 0, 0,
	0, 650, 118, 119, 120, 694, 695, 673, 0, 0,
	121, 122, 717, 0, 123, 0, 124, 0, 0, 314,
	0, 125, 705, 0, 247, 0, 126, 127, 128, 129,
	701, 703, 316, 0, 133, 0, 130, 0, 315, 131,
	718, 132, 719, 720, 721, 0, 684, 0, 317, 134,
	318, 135, 136, 0, 138, 137, 0, 706, 319, 139,
	320, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 321, 147, 148, 150, 149, 0, 0,
	674, 702, 151, 722, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 322, 157, 323, 696, 158,
	159, 160, 161, 0, 697, 162, 262, 163, 0, 164,
	165, 166, 723, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 324,
	181, 182, 1321, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 690, 193, 184, 185, 194, 325, 195,
	724, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	725, 200, 698, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 726, 727, 0, 0, 209, 699, 700,
	672, 210, 211, 212, 213, 0, 0, 214, 215, 216,
	691, 217, 0, 275, 218, 219, 220, 276, 728, 0,
	0, 221, 0, 0, 0, 0, 222, 223, 224, 225,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 0,
	0, 1317, 1318, 677, 666, 667, 664, 665, 656, 0,
	1320, 0, 0, 0, 0, 655, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 693, 659, 0,
	0, 0, 93, 94, 95, 227, 708, 229, 709, 96,
	710, 711, 0, 97, 233, 234, 98, 0, 692, 712,
	713, 237, 0, 99, 704, 0, 685, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 313, 107,
	108, 0, 686, 688, 0, 687, 689, 109, 110, 281,
	111, 714, 112, 715, 716, 0, 113, 0, 114, 0,
	0, 0, 707, 116, 0, 117, 0, 0, 0, 242,
	118, 119, 120, 694, 695, 673, 0, 0, 121, 122,
	717, 0, 123, 0, 124, 0, 0, 314, 0, 125,
	705, 0, 247, 0, 126, 127, 128, 129, 701, 703,
	316, 0, 133, 0, 130, 0, 315, 131, 718, 132,
	719, 720, 721, 0, 684, 0, 317, 134, 318, 135,
	136, 0, 138, 137, 0, 706, 319, 139, 320, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 321, 147, 148, 150, 149, 0, 0, 674, 702,
	151, 722, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 322, 157, 323, 696, 158, 159, 160,
	161, 0, 697, 162, 262, 163, 0, 164, 165, 166,
	723, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 324, 181, 182,
	1321, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 690, 193, 184, 185, 194, 325, 195, 724, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 725, 200,
	698, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 726, 727, 0, 0, 209, 699, 700, 672, 210,
	211, 212, 213, 0, 0, 214, 215, 216, 691, 217,
	0, 275, 218, 219, 220, 276, 728, 0, 0, 221,
	0, 0, 0, 0, 222, 223, 224, 225, 0, 0,
	677, 666, 667, 664, 665, 656, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 1320, 92,
	0, 0, 0, 655, 693, 659, 0, 0, 0, 93,
	94, 95, 0, 708, 229, 709, 96, 710, 711, 0,
	97, 233, 234, 98, 662, 692, 712, 713, 237, 0,
	99, 704, 0, 685, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 313, 107, 2106, 0, 686,
	688, 0, 687, 689, 109, 110, 281, 111, 714, 112,
	715, 716, 0, 113, 0, 114, 0, 0, 0, 707,
	116, 0, 117, 0, 0, 0, 650, 118, 119, 120,
	694, 695, 673, 0, 0, 121, 122, 717, 0, 123,
	0, 124, 0, 0, 314, 0, 125, 705, 0, 247,
	0, 126, 127, 128, 129, 701, 703, 0, 0, 133,
	0, 130, 0, 315, 131, 718, 132, 719, 720, 721,
	0, 684, 0, 0, 134, 318, 135, 136, 0, 138,
	137, 0, 706, 319, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 321, 147,
	148, 150, 149, 645, 0, 674, 702, 151, 722, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	322, 157, 323, 696, 158, 159, 160, 161, 0, 697,
	162, 262, 163, 0, 164, 165, 166, 723, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 324, 181, 182, 651, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 690, 193,
	184, 185, 194, 0, 195, 724, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 725, 200, 698, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 726, 727,
	0, 0, 209, 699, 700, 672, 210, 211, 2105, 213,
	0, 0, 214, 215, 216, 691, 217, 0, 275, 218,
	219, 220, 276, 728, 0, 0, 221, 0, 0, 0,
	0, 222, 223, 224, 225, 677, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 642, 643, 0, 0,
	0, 90, 91, 0, 92, 652, 0, 0, 0, 693,
	655, 0, 0, 0, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 0, 97, 233, 234, 98, 0,
	692, 235, 236, 237, 0, 99, 704, 0, 685, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	313, 107, 108, 0, 686, 688, 0, 687, 689, 109,
	110, 281, 111, 239, 112, 240, 241, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 242, 118, 119, 120, 694, 695, 0, 0, 0,
	121, 122, 245, 0, 123, 0, 124, 0, 0, 314,
	0, 125, 705, 0, 247, 0, 126, 127, 128, 129,
	701, 703, 316, 0, 133, 0, 130, 0, 315, 131,
	250, 132, 251, 252, 253, 0, 254, 0, 317, 134,
	318, 135, 136, 0, 138, 137, 0, 706, 319, 139,
	320, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 321, 147, 148, 150, 149, 0, 0,
	0, 702, 151, 258, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 322, 157, 323, 696, 158,
	159, 160, 161, 0, 697, 162, 262, 163, 0, 164,
	165, 166, 263, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 324,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 690, 193, 184, 185, 194, 325, 195,
	266, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	268, 200, 698, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 271, 272, 0, 0, 209, 699, 700,
	0, 210, 211, 212, 213, 0, 548, 214, 215, 216,
	691, 217, 0, 275, 218, 219, 220, 276, 277, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	1592, 0, 235, 236, 237, 0, 99, 238, 0, 312,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 313, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 281, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	314, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 316, 0, 133, 0, 130, 0, 315,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 317,
	134, 318, 135, 136, 0, 138, 137, 0, 255, 319,
	139, 320, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 321, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 322, 157, 323, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	324, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	71, 265, 191, 192, 0, 193, 184, 185, 194, 325,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 73, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 0, 214, 215,
	216, 0, 217, 0, 275, 218, 219, 220, 552, 277,
	0, 0, 221, 0, 0, 0, 69, 222, 223, 224,
	225, 0, 70, 548, 768, 0, 879, 876, 871, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	91, 68, 92, 0, 0, 0, 0, 226, 0, 0,
	0, 0, 93, 94, 95, 227, 228, 229, 230, 96,
	231, 232, 0, 97, 233, 234, 98, 0, 0, 235,
	236, 237, 0, 99, 238, 0, 312, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 313, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 281,
	111, 239, 112, 240, 241, 882, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 242,
	118, 119, 120, 243, 244, 873, 0, 0, 121, 122,
	245, 0, 123, 0, 124, 0, 0, 314, 0, 125,
	246, 0, 247, 0, 126, 127, 128, 129, 248, 249,
	316, 0, 133, 0, 130, 0, 315, 131, 250, 132,
	251, 252, 253, 0, 254, 0, 317, 134, 318, 135,
	136, 0, 138, 137, 0, 255, 319, 139, 320, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 321, 147, 148, 150, 149, 0, 0, 0, 257,
	151, 258, 152, 153, 0, 154, 874, 0, 155, 0,
	0, 156, 259, 322, 157, 323, 260, 158, 159, 160,
	161, 0, 261, 162, 262, 163, 0, 164, 165, 166,
	263, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 324, 181, 182,
	264, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 0, 193, 184, 185, 194, 325, 195, 266, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 268, 200,
	269, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 271, 272, 0, 0, 209, 273, 274, 872, 210,
	211, 212, 213, 0, 0, 214, 215, 216, 0, 217,
	0, 275, 218, 219, 220, 276, 277, 548, 768, 221,
	879, 876, 871, 0, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 880,
	877, 226, 0, 0, 0, 0, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 0, 235, 236, 237, 0, 99, 238, 0,
	312, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 313, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 239, 112, 240, 241, 867,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 873,
	0, 0, 121, 122, 245, 0, 123, 0, 124, 0,
	0, 314, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 248, 249, 316, 0, 133, 0, 130, 0,
	315, 131, 250, 132, 251, 252, 253, 0, 254, 0,
	317, 134, 318, 135, 136, 0, 138, 137, 0, 255,
	319, 139, 320, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 321, 147, 148, 150, 149,
	0, 0, 0, 257, 151, 258, 152, 153, 0, 154,
	874, 0, 155, 0, 0, 156, 259, 322, 157, 323,
	260, 158, 159, 160, 161, 0, 261, 162, 262, 163,
	0, 164, 165, 166, 263, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 324, 181, 182, 264, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 0, 193, 184, 185, 194,
	325, 195, 266, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 271, 272, 0, 0, 209,
	273, 274, 872, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 276,
	277, 548, 768, 221, 879, 876, 871, 0, 222, 223,
	224, 225, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 880, 877, 226, 0, 0, 0, 0,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 0, 0, 235, 236, 237,
	0, 99, 238, 0, 312, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 313, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 281, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	120, 243, 244, 873, 0, 0, 121, 122, 245, 0,
	123, 0, 124, 0, 0, 314, 0, 125, 246, 0,
	247, 0, 126, 127, 128, 129, 248, 249, 316, 0,
	133, 0, 130, 0, 315, 131, 250, 132, 251, 252,
	253, 0, 254, 0, 317, 134, 318, 135, 136, 0,
	138, 137, 0, 255, 319, 139, 320, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 321,
	147, 148, 150, 149, 0, 0, 0, 257, 151, 258,
	152, 153, 0, 154, 874, 0, 155, 0, 0, 156,
	259, 322, 157, 323, 260, 158, 159, 160, 161, 0,
	261, 162, 262, 163, 0, 164, 165, 166, 263, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 324, 181, 182, 264, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 0,
	193, 184, 185, 194, 325, 195, 266, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 271,
	272, 0, 0, 209, 273, 274, 872, 210, 211, 212,
	213, 0, 0, 214, 215, 216, 0, 217, 0, 275,
	218, 219, 220, 276, 277, 87, 0, 221, 0, 0,
	0, 0, 222, 223, 224, 225, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 880, 877, 226,
	0, 0, 0, 0, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 0, 97, 233, 234, 98, 0,
	0, 235, 236, 237, 0, 99, 238, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 281, 111, 239, 112, 240, 241, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 242, 118, 119, 120, 243, 244, 0, 0, 0,
	121, 122, 245, 0, 123, 0, 124, 0, 0, 0,
	0, 125, 246, 0, 247, 0, 126, 127, 128, 129,
	248, 249, 0, 0, 133, 0, 130, 0, 0, 131,
	250, 132, 251, 252, 253, 0, 254, 0, 0, 134,
	0, 135, 136, 0, 138, 137, 0, 255, 0, 139,
	0, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 0, 147, 148, 150, 149, 0, 0,
	0, 257, 151, 258, 152, 153, 0, 154, 0, 502,
	155, 0, 0, 156, 259, 0, 157, 0, 260, 158,
	159, 160, 161, 0, 261, 162, 262, 163, 0, 164,
	165, 166, 263, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 0,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 71,
	265, 191, 192, 0, 193, 184, 185, 194, 0, 195,
	266, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	268, 200, 269, 0, 203, 73, 204, 205, 206, 207,
	208, 0, 270, 271, 272, 0, 0, 209, 273, 274,
	0, 210, 211, 212, 213, 0, 0, 214, 215, 216,
	0, 217, 0, 275, 218, 219, 220, 552, 277, 0,
	0, 221, 87, 0, 0, 69, 222, 223, 224, 225,
	0, 70, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 226, 0, 1198, 0,
	1203, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 281, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 71, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 73, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 552, 277, 0, 0, 221, 87,
	0, 0, 69, 222, 223, 224, 225, 0, 70, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 226, 0, 0, 0, 68, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 0, 97,
	233, 234, 98, 0, 0, 235, 236, 237, 0, 99,
	238, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 281, 111, 239, 112, 240,
	241, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 243,
	244, 0, 0, 0, 121, 122, 245, 0, 123, 0,
	124, 0, 0, 0, 0, 125, 246, 0, 247, 0,
	126, 127, 128, 129, 248, 249, 0, 0, 133, 0,
	130, 0, 0, 131, 250, 132, 251, 252, 253, 0,
	254, 0, 0, 134, 0, 135, 136, 0, 138, 137,
	0, 255, 0, 139, 0, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 0, 147, 148,
	150, 149, 0, 0, 0, 257, 151, 258, 152, 153,
	0, 154, 0, 502, 155, 0, 0, 156, 259, 0,
	157, 0, 260, 158, 159, 160, 161, 0, 261, 162,
	262, 163, 0, 164, 165, 166, 263, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 0, 181, 182, 264, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 0, 193, 184,
	185, 194, 0, 195, 266, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 268, 200, 269, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 271, 272, 0,
	0, 209, 273, 274, 0, 210, 211, 212, 213, 0,
	0, 214, 215, 216, 0, 217, 0, 275, 218, 219,
	220, 276, 277, 0, 0, 221, 87, 0, 0, 0,
	222, 223, 224, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	226, 0, 1198, 0, 1203, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 281, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 87, 214, 215,
	216, 0, 217, 0, 275, 218, 219, 220, 276, 277,
	0, 0, 221, 90, 91, 0, 92, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 776, 235, 236, 237, 0, 99, 238, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 239, 112, 240, 241, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 0,
	0, 0, 121, 122, 245, 0, 123, 0, 124, 0,
	0, 0, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 248, 249, 0, 0, 133, 0, 130, 0,
	0, 131, 250, 132, 251, 252, 253, 0, 254, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 255,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 257, 151, 258, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 0, 157, 0,
	260, 158, 159, 160, 161, 0, 261, 162, 262, 163,
	0, 164, 165, 166, 263, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 0, 181, 182, 264, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 0, 193, 184, 185, 194,
	0, 195, 266, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 271, 272, 0, 0, 209,
	273, 274, 0, 210, 211, 212, 213, 0, 87, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 276,
	277, 0, 0, 221, 90, 91, 0, 92, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 1108, 0, 235, 236, 237, 0, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 281, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 120, 243, 244,
	0, 0, 0, 121, 122, 245, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 246, 0, 247, 0, 126,
	127, 128, 129, 248, 249, 0, 0, 133, 0, 130,
	0, 0, 131, 250, 132, 251, 252, 253, 0, 254,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	255, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 257, 151, 258, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 0, 157,
	0, 260, 158, 159, 160, 161, 0, 261, 162, 262,
	163, 0, 164, 165, 166, 263, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 0, 181, 182, 264, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 0, 193, 184, 185,
	194, 0, 195, 266, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 268, 200, 269, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 271, 272, 0, 0,
	209, 273, 274, 0, 210, 211, 212, 213, 0, 87,
	214, 215, 216, 0, 217, 0, 275, 218, 219, 220,
	276, 277, 0, 0, 221, 90, 91, 0, 92, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 0, 97,
	233, 234, 98, 1715, 0, 235, 236, 237, 0, 99,
	238, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 281, 111, 239, 112, 240,
	241, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 243,
	244, 0, 0, 0, 121, 122, 245, 0, 123, 0,
	124, 0, 0, 0, 0, 125, 246, 0, 247, 0,
	126, 127, 128, 129, 248, 249, 0, 0, 133, 0,
	130, 0, 0, 131, 250, 132, 251, 252, 253, 0,
	254, 0, 0, 134, 0, 135, 136, 0, 138, 137,
	0, 255, 0, 139, 0, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 0, 147, 148,
	150, 149, 0, 0, 0, 257, 151, 258, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 0,
	157, 0, 260, 158, 159, 160, 161, 0, 261, 162,
	262, 163, 0, 164, 165, 166, 263, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 0, 181, 182, 264, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 0, 193, 184,
	185, 194, 0, 195, 266, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 268, 200, 269, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 271, 272, 0,
	0, 209, 273, 274, 0, 210, 211, 212, 213, 0,
	0, 214, 215, 216, 0, 217, 0, 275, 218, 219,
	220, 276, 277, 0, 0, 221, 0, 0, 0, 0,
	222, 223, 224, 225, 677, 666, 667, 664, 665, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 739, 0, 0, 0, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 708, 229, 709,
	96, 710, 711, 0, 97, 233, 234, 98, 0, 0,
	712, 713, 237, 0, 99, 238, 0, 312, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 313,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	281, 111, 714, 112, 715, 716, 0, 113, 0, 114,
	0, 0, 0, 707, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 120, 243, 244, 673, 0, 0, 121,
	122, 717, 0, 123, 0, 124, 0, 0, 314, 0,
	125, 246, 0, 247, 0, 126, 127, 128, 129, 248,
	249, 316, 0, 133, 0, 130, 0, 315, 131, 718,
	132, 719, 720, 721, 0, 684, 0, 317, 134, 318,
	135, 136, 0, 138, 137, 0, 255, 319, 139, 320,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 321, 147, 148, 150, 149, 0, 0, 674,
	257, 151, 722, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 259, 322, 157, 323, 260, 158, 159,
	160, 161, 0, 261, 162, 262, 163, 0, 164, 165,
	166, 723, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 324, 181,
	182, 264, 183, 0, 187, 188, 189, 190, 0, 265,
	191, 192, 0, 193, 184, 185, 194, 325, 195, 724,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 725,
	200, 269, 0, 203, 0, 204, 205, 206, 207, 208,
	0, 270, 726, 727, 0, 0, 209, 273, 274, 672,
	210, 211, 212, 213, 0, 0, 214, 215, 216, 0,
	217, 0, 275, 218, 219, 220, 276, 728, 548, 768,
	221, 0, 0, 766, 0, 222, 223, 224, 225, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 312, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 313, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 281, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 120, 243, 244,
	0, 0, 0, 121, 122, 245, 0, 123, 0, 124,
	0, 0, 314, 0, 125, 246, 0, 247, 0, 126,
	127, 128, 129, 248, 249, 316, 0, 133, 0, 130,
	0, 315, 131, 250, 132, 251, 252, 253, 0, 254,
	0, 317, 134, 318, 135, 136, 0, 138, 137, 0,
	255, 319, 139, 320, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 321, 147, 148, 150,
	149, 0, 0, 0, 257, 151, 258, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 322, 157,
	323, 260, 158, 159, 160, 161, 0, 261, 162, 262,
	163, 0, 164, 165, 166, 263, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 324, 181, 182, 264, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 0, 193, 184, 185,
	194, 325, 195, 266, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 268, 200, 269, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 271, 272, 0, 0,
	209, 273, 274, 0, 210, 211, 212, 213, 0, 87,
	214, 215, 216, 0, 217, 0, 275, 218, 219, 220,
	276, 277, 0, 0, 221, 90, 91, 0, 92, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 0, 97,
	233, 234, 98, 0, 0, 235, 236, 237, 0, 99,
	238, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 83, 111, 239, 112, 240,
	241, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 243,
	244, 0, 0, 0, 121, 122, 245, 0, 123, 0,
	124, 0, 0, 0, 0, 125, 246, 0, 247, 0,
	126, 127, 128, 129, 248, 249, 0, 0, 133, 0,
	130, 0, 0, 131, 250, 132, 251, 252, 253, 0,
	254, 0, 0, 134, 0, 135, 136, 0, 138, 137,
	0, 255, 0, 139, 0, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 0, 147, 148,
	150, 149, 0, 0, 0, 257, 151, 258, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 0,
	157, 0, 260, 158, 159, 160, 161, 0, 261, 162,
	262, 163, 0, 164, 165, 166, 263, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 0, 181, 182, 264, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 0, 193, 184,
	185, 194, 0, 195, 266, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 268, 200, 269, 0, 203, 82,
	204, 205, 206, 207, 208, 0, 270, 271, 272, 0,
	0, 209, 273, 274, 0, 210, 211, 212, 213, 0,
	0, 214, 215, 216, 0, 217, 0, 275, 218, 219,
	220, 276, 277, 0, 0, 221, 548, 768, 0, 0,
	222, 223, 224, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 86, 0, 0,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 312,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 313, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 281, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	314, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 316, 0, 133, 0, 130, 0, 315,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 317,
	134, 318, 135, 136, 0, 138, 137, 0, 255, 319,
	139, 320, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 321, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 322, 157, 323, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	324, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 325,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 87, 214, 215,
	216, 0, 217, 0, 275, 218, 219, 220, 276, 277,
	0, 0, 221, 90, 91, 0, 92, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 0, 235, 236, 237, 0, 99, 238, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 239, 112, 240, 241, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 0,
	0, 0, 121, 122, 245, 0, 123, 0, 124, 0,
	0, 0, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 248, 249, 0, 0, 133, 0, 130, 0,
	0, 131, 250, 132, 251, 252, 253, 0, 254, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 255,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 257, 151, 258, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 0, 157, 0,
	260, 158, 159, 160, 161, 0, 261, 162, 262, 163,
	0, 164, 165, 166, 263, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 0, 181, 182, 264, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 0, 193, 184, 185, 194,
	0, 195, 266, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 271, 272, 0, 0, 209,
	273, 274, 0, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 276,
	277, 0, 548, 221, 0, 0, 0, 0, 222, 223,
	224, 225, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 86, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 312, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 313, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 281, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 314, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 316,
	0, 133, 0, 130, 0, 315, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 317, 134, 318, 135, 136,
	0, 138, 137, 0, 255, 319, 139, 320, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	321, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 322, 157, 323, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 324, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 325, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 87, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 276, 277, 0, 0, 221, 90,
	91, 0, 92, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 93, 94, 95, 227, 228, 229, 230, 96,
	231, 232, 0, 97, 233, 234, 98, 0, 0, 235,
	236, 237, 1065, 99, 238, 0, 0, 0, 100, 101,
	102, 0, 103, 1063, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 281,
	111, 239, 112, 240, 241, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 242,
	118, 119, 120, 243, 244, 0, 1174, 0, 121, 122,
	245, 0, 123, 0, 124, 1068, 0, 0, 0, 125,
	246, 0, 247, 0, 126, 127, 128, 129, 248, 249,
	0, 0, 133, 1172, 130, 0, 0, 131, 250, 132,
	251, 252, 253, 0, 254, 0, 0, 134, 0, 135,
	136, 0, 138, 137, 0, 255, 0, 139, 0, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 0, 147, 148, 150, 149, 0, 0, 0, 257,
	151, 258, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 0, 157, 0, 260, 158, 159, 160,
	161, 0, 261, 162, 262, 163, 1067, 164, 165, 166,
	263, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 0, 181, 182,
	264, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 0, 193, 184, 185, 194, 0, 195, 266, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 268, 200,
	269, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 271, 272, 0, 0, 209, 273, 274, 0, 210,
	211, 212, 213, 0, 1173, 214, 215, 216, 0, 217,
	0, 275, 218, 219, 220, 276, 277, 87, 0, 221,
	0, 0, 0, 0, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 226, 0, 0, 0, 0, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 0, 235, 236, 237, 1065, 99, 238, 0,
	0, 1060, 100, 101, 102, 0, 103, 1063, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 239, 112, 240, 241, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 0,
	0, 0, 121, 122, 245, 0, 123, 0, 124, 1068,
	0, 0, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 1059, 249, 0, 0, 133, 0, 130, 0,
	0, 131, 250, 132, 251, 252, 253, 0, 254, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 255,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 257, 151, 258, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 0, 157, 0,
	260, 158, 159, 160, 161, 0, 261, 162, 262, 163,
	1067, 164, 165, 166, 263, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 0, 181, 182, 264, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 0, 193, 184, 185, 194,
	0, 195, 266, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 271, 272, 0, 0, 209,
	273, 274, 0, 210, 211, 212, 213, 0, 1066, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 276,
	277, 87, 0, 221, 0, 0, 0, 0, 222, 223,
	224, 225, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 226, 0, 1682, 0, 0,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 0, 0, 235, 236, 237,
	0, 99, 238, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 281, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	120, 243, 244, 0, 0, 0, 121, 122, 245, 0,
	123, 0, 124, 0, 0, 0, 0, 125, 246, 0,
	247, 0, 126, 127, 128, 129, 248, 249, 0, 0,
	133, 0, 130, 0, 0, 131, 250, 132, 251, 252,
	253, 0, 254, 0, 0, 134, 0, 135, 136, 0,
	138, 137, 0, 255, 0, 139, 0, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 0,
	147, 148, 150, 149, 0, 0, 0, 257, 151, 258,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 0, 157, 0, 260, 158, 159, 160, 161, 0,
	261, 162, 262, 163, 0, 164, 165, 166, 263, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 0, 181, 182, 264, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 0,
	193, 184, 185, 194, 0, 195, 266, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 271,
	272, 0, 0, 209, 273, 274, 0, 210, 211, 212,
	213, 0, 87, 214, 215, 216, 0, 217, 0, 275,
	218, 219, 220, 276, 277, 0, 0, 221, 90, 91,
	0, 92, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 281, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 502, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 87, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 276, 277, 0, 0, 221, 90,
	91, 896, 92, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 93, 94, 95, 227, 228, 229, 230, 96,
	231, 232, 0, 97, 233, 234, 98, 0, 0, 235,
	236, 237, 0, 99, 238, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 281,
	111, 239, 112, 240, 241, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 242,
	118, 119, 120, 243, 244, 0, 0, 0, 121, 122,
	245, 0, 123, 0, 124, 0, 0, 0, 0, 125,
	246, 0, 247, 0, 126, 127, 128, 129, 248, 249,
	0, 0, 133, 0, 130, 0, 0, 131, 250, 132,
	251, 252, 253, 0, 254, 0, 0, 134, 0, 135,
	136, 0, 138, 137, 0, 255, 0, 139, 0, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 0, 147, 148, 150, 149, 0, 0, 0, 257,
	151, 258, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 0, 157, 0, 260, 158, 159, 160,
	161, 0, 261, 162, 262, 163, 0, 164, 165, 166,
	263, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 0, 181, 182,
	264, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 0, 193, 184, 185, 194, 0, 195, 266, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 268, 200,
	269, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 271, 272, 0, 0, 209, 273, 274, 0, 210,
	211, 212, 213, 0, 87, 214, 215, 216, 0, 217,
	0, 275, 218, 219, 220, 276, 277, 0, 0, 221,
	90, 91, 0, 92, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	281, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 120, 243, 244, 0, 0, 0, 121,
	122, 245, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 246, 0, 247, 0, 126, 127, 128, 129, 801,
	249, 0, 0, 133, 0, 130, 0, 0, 131, 250,
	132, 251, 252, 253, 0, 254, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 255, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	257, 151, 258, 152, 153, 0, 154, 0, 502, 155,
	0, 0, 156, 259, 0, 157, 0, 260, 158, 159,
	160, 161, 0, 261, 162, 262, 163, 0, 164, 165,
	166, 263, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 0, 181,
	182, 264, 183, 0, 187, 188, 189, 190, 0, 265,
	191, 192, 0, 193, 184, 185, 194, 0, 195, 266,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 268,
	200, 269, 0, 203, 0, 204, 205, 206, 207, 208,
	0, 270, 271, 272, 0, 0, 209, 273, 274, 0,
	210, 211, 212, 213, 0, 87, 214, 215, 216, 0,
	217, 0, 275, 218, 219, 220, 276, 277, 0, 0,
	221, 90, 91, 560, 92, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 0, 97, 233, 234, 98, 0,
	0, 235, 236, 237, 0, 99, 238, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 281, 111, 239, 112, 240, 241, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 242, 118, 119, 120, 243, 244, 0, 0, 0,
	121, 122, 245, 0, 123, 0, 124, 0, 0, 0,
	0, 125, 246, 0, 247, 0, 126, 127, 128, 129,
	248, 249, 0, 0, 133, 0, 130, 0, 0, 131,
	250, 132, 251, 252, 253, 0, 254, 0, 0, 134,
	0, 135, 136, 0, 138, 137, 0, 255, 0, 139,
	0, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 0, 147, 148, 150, 149, 0, 0,
	0, 257, 151, 258, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 0, 157, 0, 260, 158,
	159, 160, 161, 0, 261, 162, 262, 163, 0, 164,
	165, 166, 263, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 0,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 0, 193, 184, 185, 194, 0, 195,
	266, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	268, 200, 269, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 271, 272, 0, 0, 209, 273, 274,
	0, 210, 211, 212, 213, 0, 87, 214, 215, 216,
	0, 217, 0, 275, 218, 219, 220, 276, 277, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 281, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 514, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	502, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 87, 214, 215,
	216, 0, 217, 0, 275, 218, 219, 220, 276, 277,
	0, 0, 221, 90, 91, 0, 92, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 0, 235, 236, 237, 0, 99, 238, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 239, 112, 240, 241, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 0,
	0, 0, 121, 122, 245, 0, 123, 0, 124, 0,
	0, 0, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 507, 249, 0, 0, 133, 0, 130, 0,
	0, 131, 250, 132, 251, 252, 253, 0, 254, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 255,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 257, 151, 258, 152, 153, 0, 154,
	0, 502, 155, 0, 0, 156, 259, 0, 157, 0,
	260, 158, 159, 160, 161, 0, 261, 162, 262, 163,
	0, 164, 165, 166, 263, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 0, 181, 182, 264, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 0, 193, 184, 185, 194,
	0, 195, 266, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 271, 272, 0, 0, 209,
	273, 274, 0, 210, 211, 212, 213, 0, 87, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 276,
	277, 0, 0, 221, 90, 91, 411, 92, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 281, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 120, 243, 244,
	0, 0, 0, 121, 122, 245, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 246, 0, 247, 0, 126,
	127, 128, 129, 248, 249, 0, 0, 133, 0, 130,
	0, 0, 131, 250, 132, 251, 252, 253, 0, 254,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	255, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 257, 151, 258, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 0, 157,
	0, 260, 158, 159, 160, 161, 0, 261, 162, 262,
	410, 0, 164, 165, 166, 263, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 0, 181, 182, 264, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 0, 193, 184, 185,
	194, 0, 195, 266, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 268, 200, 269, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 271, 272, 0, 0,
	209, 273, 274, 0, 210, 211, 212, 213, 0, 87,
	214, 215, 216, 0, 217, 0, 275, 218, 219, 220,
	276, 277, 0, 0, 221, 90, 91, 0, 92, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 0, 97,
	233, 234, 98, 0, 0, 235, 236, 237, 0, 99,
	238, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 281, 111, 239, 112, 240,
	241, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 243,
	244, 0, 0, 0, 121, 122, 245, 0, 123, 0,
	124, 0, 0, 0, 0, 125, 246, 0, 247, 0,
	126, 127, 128, 129, 248, 249, 0, 0, 133, 0,
	130, 0, 0, 131, 250, 132, 251, 252, 253, 0,
	254, 0, 0, 134, 0, 135, 136, 0, 138, 137,
	0, 255, 0, 139, 0, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 0, 147, 148,
	150, 149, 0, 0, 0, 257, 151, 258, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 0,
	157, 0, 260, 158, 159, 160, 161, 0, 261, 162,
	262, 163, 0, 164, 165, 166, 263, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 0, 181, 182, 264, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 0, 193, 184,
	185, 194, 0, 195, 266, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 268, 200, 269, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 271, 272, 0,
	0, 209, 273, 274, 0, 210, 211, 212, 213, 0,
	87, 214, 215, 216, 0, 217, 0, 275, 218, 219,
	220, 276, 277, 0, 0, 221, 90, 91, 0, 92,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 281, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 120,
	243, 244, 0, 0, 0, 121, 122, 245, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 246, 0, 247,
	0, 126, 127, 128, 129, 1367, 249, 0, 0, 133,
	0, 130, 0, 0, 131, 250, 132, 251, 252, 253,
	0, 254, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 255, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 257, 151, 258, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	0, 157, 0, 260, 158, 159, 160, 161, 0, 261,
	162, 262, 163, 0, 164, 165, 166, 263, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 0, 181, 182, 264, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 0, 193,
	184, 185, 194, 0, 195, 266, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 268, 200, 269, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 271, 272,
	0, 0, 209, 273, 274, 0, 210, 211, 212, 213,
	0, 87, 214, 215, 216, 0, 217, 0, 275, 218,
	219, 220, 276, 277, 0, 0, 221, 90, 91, 0,
	92, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 0, 0, 235, 236, 237,
	0, 99, 238, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 281, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	120, 243, 244, 0, 0, 0, 121, 122, 245, 0,
	123, 0, 124, 0, 0, 0, 0, 125, 246, 0,
	247, 0, 126, 127, 128, 129, 1365, 249, 0, 0,
	133, 0, 130, 0, 0, 131, 250, 132, 251, 252,
	253, 0, 254, 0, 0, 134, 0, 135, 136, 0,
	138, 137, 0, 255, 0, 139, 0, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 0,
	147, 148, 150, 149, 0, 0, 0, 257, 151, 258,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 0, 157, 0, 260, 158, 159, 160, 161, 0,
	261, 162, 262, 163, 0, 164, 165, 166, 263, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 0, 181, 182, 264, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 0,
	193, 184, 185, 194, 0, 195, 266, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 271,
	272, 0, 0, 209, 273, 274, 0, 210, 211, 212,
	213, 0, 87, 214, 215, 216, 0, 217, 0, 275,
	218, 219, 220, 276, 277, 0, 0, 221, 90, 91,
	0, 92, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 281, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 1354, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 87, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 276, 277, 0, 0, 221, 90,
	91, 0, 92, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 93, 94, 95, 227, 228, 229, 230, 96,
	231, 232, 0, 97, 233, 234, 98, 0, 0, 235,
	236, 237, 0, 99, 238, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 281,
	111, 239, 112, 240, 241, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 242,
	118, 119, 120, 243, 244, 0, 0, 0, 121, 122,
	245, 0, 123, 0, 124, 0, 0, 0, 0, 125,
	246, 0, 247, 0, 126, 127, 128, 129, 926, 249,
	0, 0, 133, 0, 130, 0, 0, 131, 250, 132,
	251, 252, 253, 0, 254, 0, 0, 134, 0, 135,
	136, 0, 138, 137, 0, 255, 0, 139, 0, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 0, 147, 148, 150, 149, 0, 0, 0, 257,
	151, 258, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 0, 157, 0, 260, 158, 159, 160,
	161, 0, 261, 162, 262, 163, 0, 164, 165, 166,
	263, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 0, 181, 182,
	264, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 0, 193, 184, 185, 194, 0, 195, 266, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 268, 200,
	269, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 271, 272, 0, 0, 209, 273, 274, 0, 210,
	211, 212, 213, 0, 87, 214, 215, 216, 0, 217,
	0, 275, 218, 219, 220, 276, 277, 0, 0, 221,
	90, 91, 0, 92, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	281, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 120, 243, 244, 0, 0, 0, 121,
	122, 245, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 246, 0, 247, 0, 126, 127, 128, 129, 248,
	249, 0, 0, 133, 0, 130, 0, 0, 131, 250,
	132, 251, 252, 253, 0, 254, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 255, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	257, 151, 258, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 259, 0, 157, 0, 260, 158, 159,
	160, 161, 0, 261, 162, 262, 163, 0, 164, 165,
	166, 263, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 0, 181,
	182, 264, 183, 0, 425, 188, 189, 190, 0, 265,
	191, 192, 0, 193, 184, 185, 194, 0, 195, 266,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 268,
	200, 269, 0, 203, 0, 204, 205, 206, 207, 208,
	0, 270, 271, 272, 0, 0, 209, 273, 274, 0,
	210, 211, 212, 213, 0, 87, 214, 215, 216, 0,
	217, 0, 275, 218, 219, 220, 276, 277, 0, 0,
	221, 90, 91, 0, 92, 222, 223, 224, 225, 226,
	0, 786, 0, 0, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 0, 97, 233, 234, 98, 0,
	0, 235, 236, 237, 0, 99, 238, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 281, 111, 239, 112, 240, 241, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 242, 118, 119, 120, 243, 244, 0, 0, 0,
	121, 122, 245, 0, 123, 0, 124, 0, 0, 0,
	0, 125, 246, 0, 247, 0, 126, 127, 128, 129,
	248, 249, 0, 0, 133, 0, 130, 0, 0, 131,
	250, 132, 251, 252, 253, 0, 254, 0, 0, 134,
	0, 135, 136, 0, 138, 137, 0, 255, 0, 139,
	0, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 0, 147, 148, 150, 149, 0, 0,
	0, 257, 151, 258, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 0, 157, 0, 260, 158,
	159, 160, 161, 0, 261, 162, 262, 163, 0, 164,
	165, 166, 263, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 0,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 0, 0, 184, 185, 194, 0, 195,
	266, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	268, 200, 269, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 271, 272, 0, 0, 209, 273, 274,
	0, 210, 211, 212, 213, 0, 87, 214, 215, 216,
	0, 217, 0, 275, 218, 219, 220, 276, 277, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 281, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 617, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 87, 214, 215,
	216, 0, 217, 0, 275, 218, 219, 220, 276, 277,
	0, 0, 221, 90, 91, 0, 92, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 0, 235, 236, 237, 0, 99, 238, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 239, 112, 240, 241, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 0,
	0, 0, 121, 122, 245, 0, 123, 0, 124, 0,
	0, 0, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 612, 249, 0, 0, 133, 0, 130, 0,
	0, 131, 250, 132, 251, 252, 253, 0, 254, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 255,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 257, 151, 258, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 0, 157, 0,
	260, 158, 159, 160, 161, 0, 261, 162, 262, 163,
	0, 164, 165, 166, 263, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 0, 181, 182, 264, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 0, 193, 184, 185, 194,
	0, 195, 266, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 271, 272, 0, 0, 209,
	273, 274, 0, 210, 211, 212, 213, 0, 87, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 276,
	277, 0, 0, 221, 90, 91, 0, 92, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 566, 0, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 281, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 120, 243, 244,
	0, 0, 0, 121, 122, 245, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 246, 0, 247, 0, 126,
	127, 128, 129, 248, 249, 0, 0, 133, 0, 130,
	0, 0, 131, 250, 132, 251, 252, 253, 0, 254,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	255, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 437, 0, 147, 148, 150,
	149, 0, 0, 0, 257, 151, 258, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 0, 157,
	0, 260, 158, 159, 160, 161, 0, 261, 162, 262,
	163, 0, 164, 165, 166, 263, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 0, 181, 182, 264, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 0, 193, 184, 185,
	194, 0, 195, 266, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 268, 200, 269, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 436, 271, 272, 0, 0,
	432, 273, 274, 0, 210, 211, 212, 213, 0, 87,
	214, 215, 216, 0, 217, 0, 275, 218, 219, 220,
	276, 277, 0, 0, 221, 90, 91, 0, 92, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 0, 97,
	233, 234, 98, 0, 0, 235, 236, 237, 0, 99,
	238, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 281, 111, 239, 112, 240,
	241, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 243,
	244, 0, 0, 0, 121, 122, 245, 0, 123, 0,
	124, 0, 0, 0, 0, 125, 246, 0, 247, 0,
	126, 127, 128, 129, 248, 249, 0, 0, 133, 0,
	130, 0, 0, 131, 250, 132, 251, 252, 253, 0,
	254, 0, 0, 134, 0, 135, 136, 0, 138, 137,
	0, 255, 0, 139, 0, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 437, 0, 147, 148,
	150, 149, 0, 0, 0, 257, 151, 258, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 0,
	157, 0, 260, 158, 159, 160, 161, 0, 261, 162,
	262, 163, 0, 164, 165, 166, 263, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 0, 181, 182, 264, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 0, 193, 184,
	185, 194, 0, 195, 266, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 268, 200, 269, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 436, 271, 272, 0,
	0, 432, 273, 274, 0, 210, 211, 212, 213, 0,
	87, 214, 215, 216, 0, 217, 0, 275, 218, 219,
	220, 276, 277, 0, 0, 221, 90, 91, 0, 92,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 281, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 120,
	243, 244, 0, 0, 0, 121, 122, 245, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 246, 0, 247,
	0, 126, 127, 128, 129, 544, 249, 0, 0, 133,
	0, 130, 0, 0, 131, 250, 132, 251, 252, 253,
	0, 254, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 255, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 257, 151, 258, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	0, 157, 0, 260, 158, 159, 160, 161, 0, 261,
	162, 262, 163, 0, 164, 165, 166, 263, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 0, 181, 182, 264, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 0, 193,
	184, 185, 194, 0, 195, 266, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 268, 200, 269, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 271, 272,
	0, 0, 209, 273, 274, 0, 210, 211, 212, 213,
	0, 87, 214, 215, 216, 0, 217, 0, 275, 218,
	219, 220, 276, 277, 0, 0, 221, 90, 91, 0,
	92, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 0, 0, 235, 236, 237,
	0, 99, 238, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 281, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	120, 243, 244, 0, 0, 0, 121, 122, 245, 0,
	123, 0, 124, 0, 0, 0, 0, 125, 246, 0,
	247, 0, 126, 127, 128, 129, 541, 249, 0, 0,
	133, 0, 130, 0, 0, 131, 250, 132, 251, 252,
	253, 0, 254, 0, 0, 134, 0, 135, 136, 0,
	138, 137, 0, 255, 0, 139, 0, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 0,
	147, 148, 150, 149, 0, 0, 0, 257, 151, 258,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 0, 157, 0, 260, 158, 159, 160, 161, 0,
	261, 162, 262, 163, 0, 164, 165, 166, 263, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 0, 181, 182, 264, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 0,
	193, 184, 185, 194, 0, 195, 266, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 271,
	272, 0, 0, 209, 273, 274, 0, 210, 211, 212,
	213, 0, 87, 214, 215, 216, 0, 217, 0, 275,
	218, 219, 220, 276, 277, 0, 0, 221, 90, 91,
	0, 92, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 281, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 538, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 87, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 276, 277, 0, 0, 221, 90,
	91, 0, 92, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 93, 94, 95, 227, 228, 229, 230, 96,
	231, 232, 0, 97, 233, 234, 98, 0, 0, 235,
	236, 237, 0, 99, 238, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 281,
	111, 239, 112, 240, 241, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 242,
	118, 119, 120, 243, 244, 0, 0, 0, 121, 122,
	245, 0, 123, 0, 124, 0, 0, 0, 0, 125,
	246, 0, 247, 0, 126, 127, 128, 129, 536, 249,
	0, 0, 133, 0, 130, 0, 0, 131, 250, 132,
	251, 252, 253, 0, 254, 0, 0, 134, 0, 135,
	136, 0, 138, 137, 0, 255, 0, 139, 0, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 0, 147, 148, 150, 149, 0, 0, 0, 257,
	151, 258, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 0, 157, 0, 260, 158, 159, 160,
	161, 0, 261, 162, 262, 163, 0, 164, 165, 166,
	263, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 0, 181, 182,
	264, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 0, 193, 184, 185, 194, 0, 195, 266, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 268, 200,
	269, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 271, 272, 0, 0, 209, 273, 274, 0, 210,
	211, 212, 213, 0, 87, 214, 215, 216, 0, 217,
	0, 275, 218, 219, 220, 276, 277, 0, 0, 221,
	90, 91, 0, 92, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	281, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 120, 243, 244, 0, 0, 0, 121,
	122, 245, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 246, 0, 247, 0, 126, 127, 128, 129, 510,
	249, 0, 0, 133, 0, 130, 0, 0, 131, 250,
	132, 251, 252, 253, 0, 254, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 255, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	257, 151, 258, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 259, 0, 157, 0, 260, 158, 159,
	160, 161, 0, 261, 162, 262, 163, 0, 164, 165,
	166, 263, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 0, 181,
	182, 264, 183, 0, 187, 188, 189, 190, 0, 265,
	191, 192, 0, 193, 184, 185, 194, 0, 195, 266,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 268,
	200, 269, 0, 203, 0, 204, 205, 206, 207, 208,
	0, 270, 271, 272, 0, 0, 209, 273, 274, 0,
	210, 211, 212, 213, 0, 87, 214, 215, 216, 0,
	217, 0, 275, 218, 219, 220, 276, 277, 0, 0,
	221, 90, 91, 0, 92, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 0, 97, 233, 234, 98, 0,
	0, 235, 236, 237, 0, 99, 238, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 281, 111, 239, 112, 240, 241, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 242, 118, 119, 120, 243, 244, 0, 0, 0,
	121, 122, 245, 0, 123, 0, 124, 0, 0, 0,
	0, 125, 246, 0, 247, 0, 126, 127, 128, 129,
	248, 249, 0, 0, 133, 0, 130, 0, 0, 131,
	250, 132, 251, 252, 253, 0, 254, 0, 0, 134,
	0, 135, 136, 0, 138, 137, 0, 255, 0, 139,
	0, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 0, 147, 148, 150, 149, 0, 0,
	0, 257, 151, 258, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 0, 157, 0, 260, 158,
	159, 160, 161, 0, 261, 162, 262, 163, 0, 164,
	165, 166, 263, 491, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 0,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 0, 193, 184, 185, 194, 0, 195,
	266, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	268, 200, 269, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 271, 272, 0, 0, 209, 273, 274,
	0, 210, 211, 212, 213, 0, 87, 214, 215, 216,
	0, 217, 0, 275, 218, 219, 220, 276, 277, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 430, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 281, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 428, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 437, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 431, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 429, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 436, 271, 272, 0, 0, 432, 273,
	274, 0, 210, 211, 212, 213, 0, 87, 214, 215,
	216, 0, 217, 0, 275, 218, 219, 220, 276, 277,
	0, 0, 221, 90, 91, 0, 92, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 0, 235, 236, 237, 0, 99, 238, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 239, 112, 240, 241, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 0,
	0, 0, 121, 122, 245, 0, 123, 0, 124, 0,
	0, 0, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 248, 249, 0, 0, 133, 0, 130, 0,
	0, 131, 250, 132, 251, 252, 253, 0, 254, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 255,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 257, 151, 258, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 0, 157, 0,
	260, 158, 159, 0, 161, 0, 261, 162, 262, 163,
	0, 164, 0, 166, 263, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 0, 181, 182, 264, 0, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 0, 193, 184, 185, 194,
	0, 195, 266, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 271, 272, 0, 0, 209,
	273, 274, 0, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 276,
	277, 0, 0, 221, 0, 0, 0, 0, 222, 223,
	224, 225, 950, 951, 0, 970, 971, 972, 980, 981,
	982, 0, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 984, 0,
	0, 0, 0, 0, 950, 951, 0, 970, 971, 972,
	980, 981, 982, 0, 0, 0, 0, 0, 952, 0,
	973, 0, 0, 0, 967, 0, 0, 953, 0, 0,
	984, 0, 0, 0, 0, 0, 950, 951, 0, 970,
	971, 972, 980, 981, 982, 0, 0, 0, 0, 0,
	952, 0, 973, 0, 0, 0, 967, 0, 0, 953,
	0, 0, 984, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	0, 0, 952, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 977, 985, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 983,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 975, 0, 0, 0, 977, 985, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 983, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 974, 975, 0, 0, 0, 977, 985, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 983, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 974, 975, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 978,
	0, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 978, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 976, 0, 978, 964, 965, 966, 979, 0, 963,
	961, 962, 954, 955, 956, 957, 959, 960, 0, 0,
	0, 0, 0, 0, 0, 1567, 0, 0, 0, 0,
	0, 0, 0, 976, 0, 0, 964, 965, 966, 979,
	0, 963, 961, 962, 954, 955, 956, 957, 959, 960,
	0, 0, 0, 0, 0, 0, 0, 1566, 0, 0,
	0, 0, 0, 0, 0, 976, 0, 0, 964, 965,
	966, 979, 0, 963, 961, 962, 954, 955, 956, 957,
	959, 960, 0, 0, 0, 0, 0, 950, 951, 1518,
	970, 971, 972, 980, 981, 982, 0, 0, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	953, 950, 951, 984, 970, 971, 972, 980, 981, 982,
	0, 0, 0, 0, 0, 0, 0, 973, 0, 0,
	0, 0, 0, 952, 953, 0, 0, 984, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 950, 951,
	0, 970, 971, 972, 980, 981, 982, 952, 0, 0,
	0, 0, 0, 967, 973, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 984, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 952, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 977, 985,
	0, 0, 0, 958, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 983, 0, 0, 0, 0, 0,
	0, 0, 977, 985, 0, 0, 975, 0, 0, 0,
	0, 0, 968, 0, 0, 0, 0, 0, 983, 0,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 968, 974, 0, 977,
	985, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 983, 0, 0, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 978, 0, 0, 0, 974, 0,
	0, 0, 0, 0, 969, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 978, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 978, 976, 0, 0, 964,
	965, 966, 979, 0, 963, 961, 962, 954, 955, 956,
	957, 959, 960, 0, 0, 0, 0, 2044, 0, 0,
	976, 0, 0, 964, 965, 966, 979, 0, 963, 961,
	962, 954, 955, 956, 957, 959, 960, 0, 0, 0,
	0, 2042, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
	964, 965, 966, 979, 0, 963, 961, 962, 954, 955,
	956, 957, 959, 960, 0, 0, 950, 951, 1987, 970,
	971, 972, 980, 981, 982, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 953,
	950, 951, 984, 970, 971, 972, 980, 981, 982, 0,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 952, 953, 0, 0, 984, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 950, 951, 0,
	970, 971, 972, 980, 981, 982, 952, 0, 0, 0,
	0, 0, 967, 973, 0, 0, 0, 0, 0, 0,
	953, 0, 0, 984, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 0, 952, 0, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 977, 985, 0,
	0, 0, 958, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 983, 0, 0, 0, 0, 0, 0,
	0, 977, 985, 0, 0, 975, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 983, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 968, 974, 0, 977, 985,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 983, 0, 0, 0, 0, 0,
	974, 0, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 968, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 978, 0, 0, 0, 974, 0, 0,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 978, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 978, 976, 0, 0, 964, 965,
	966, 979, 0, 963, 961, 962, 954, 955, 956, 957,
	959, 960, 0, 0, 0, 0, 1982, 0, 0, 976,
	0, 0, 964, 965, 966, 979, 0, 963, 961, 962,
	954, 955, 956, 957, 959, 960, 0, 0, 0, 0,
	1978, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 976, 0, 0, 964,
	965, 966, 979, 0, 963, 961, 962, 954, 955, 956,
	957, 959, 960, 0, 0, 950, 951, 1917, 970, 971,
	972, 980, 981, 982, 0, 0, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 953, 950,
	951, 984, 970, 971, 972, 980, 981, 982, 0, 0,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 952, 953, 0, 0, 984, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 950, 951, 0, 970,
	971, 972, 980, 981, 982, 952, 0, 0, 0, 0,
	0, 967, 973, 0, 0, 0, 0, 0, 0, 953,
	0, 0, 984, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 952, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 977, 985, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 0, 0, 0, 0, 0, 0, 0,
	977, 985, 0, 0, 975, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 983, 0, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 975, 0,
	0, 0, 0, 0, 968, 974, 0, 977, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 983, 0, 0, 0, 0, 0, 974,
	0, 0, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 978, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 978, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 978, 976, 0, 0, 964, 965, 966,
	979, 0, 963, 961, 962, 954, 955, 956, 957, 959,
	960, 0, 0, 0, 0, 1895, 0, 0, 976, 0,
	0, 964, 965, 966, 979, 0, 963, 961, 962, 954,
	955, 956, 957, 959, 960, 0, 0, 0, 0, 1894,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 976, 0, 0, 964, 965,
	966, 979, 0, 963, 961, 962, 954, 955, 956, 957,
	959, 960, 0, 0, 950, 951, 1784, 970, 971, 972,
	980, 981, 982, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 953, 950, 951,
	984, 970, 971, 972, 980, 981, 982, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	952, 953, 0, 0, 984, 0, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 950, 951, 0, 970, 971,
	972, 980, 981, 982, 952, 0, 0, 0, 0, 0,
	967, 973, 0, 0, 0, 0, 0, 0, 953, 0,
	0, 984, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 952, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 977, 985, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 983, 0, 0, 0, 0, 0, 0, 0, 977,
	985, 0, 0, 975, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 0, 0, 983, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 968, 974, 0, 977, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 0, 0, 0, 0, 0, 974, 0,
	0, 0, 0, 0, 975, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 978, 0, 0, 0, 974, 0, 0, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 978, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 978, 976, 0, 0, 964, 965, 966, 979,
	0, 963, 961, 962, 954, 955, 956, 957, 959, 960,
	0, 0, 0, 0, 1718, 0, 0, 976, 0, 0,
	964, 965, 966, 979, 0, 963, 961, 962, 954, 955,
	956, 957, 959, 960, 0, 0, 0, 0, 1702, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 976, 0, 0, 964, 965, 966,
	979, 0, 963, 961, 962, 954, 955, 956, 957, 959,
	960, 0, 0, 950, 951, 1275, 970, 971, 972, 980,
	981, 982, 0, 0, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 953, 950, 951, 984,
	970, 971, 972, 980, 981, 982, 0, 0, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 0, 0, 952,
	953, 0, 0, 984, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 951, 0, 970, 971, 972,
	980, 981, 982, 952, 0, 0, 0, 0, 0, 967,
	973, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	984, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	952, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 0, 977, 985, 0, 0, 0, 958,
	2127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	983, 0, 0, 0, 0, 0, 0, 0, 977, 985,
	0, 0, 975, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 983, 0, 958, 0, 1558, 0,
	0, 1557, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 968, 974, 0, 977, 985, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 983, 0, 0, 0, 0, 0, 974, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 968,
	0, 2126, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	978, 0, 0, 0, 974, 0, 0, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 978, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 978, 976, 0, 0, 964, 965, 966, 979, 0,
	963, 961, 962, 954, 955, 956, 957, 959, 960, 0,
	0, 1493, 0, 0, 0, 0, 976, 0, 0, 964,
	965, 966, 979, 0, 963, 961, 962, 954, 955, 956,
	957, 959, 960, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 0, 0, 964, 965, 966, 979,
	0, 963, 961, 962, 954, 955, 956, 957, 959, 960,
	950, 951, 0, 970, 971, 972, 980, 981, 982, 0,
	0, 0, 0, 0, 0, 0, 973, 0, 988, 0,
	0, 1190, 0, 953, 950, 951, 984, 970, 971, 972,
	980, 981, 982, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 987, 0, 952, 953, 0, 0,
	984, 0, 967, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 951, 0, 970, 971, 972, 980, 981, 982,
	952, 0, 0, 0, 0, 0, 967, 973, 0, 0,
	1191, 0, 0, 0, 953, 0, 0, 984, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 958, 0, 0, 0, 0, 952, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 977, 985, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 983, 0, 0,
	0, 0, 0, 0, 0, 977, 985, 0, 0, 975,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 0,
	0, 983, 0, 958, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 968,
	974, 0, 977, 985, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 983, 0,
	0, 0, 0, 0, 974, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 978, 0, 0,
	0, 974, 486, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 978, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 978, 976,
	0, 0, 964, 965, 966, 979, 0, 963, 961, 962,
	954, 955, 956, 957, 959, 960, 0, 0, 0, 0,
	0, 0, 0, 976, 0, 0, 964, 965, 966, 979,
	0, 963, 961, 962, 954, 955, 956, 957, 959, 960,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	976, 0, 0, 964, 965, 966, 979, 0, 963, 961,
	962, 954, 955, 956, 957, 959, 960, 950, 951, 0,
	970, 971, 972, 980, 981, 982, 0, 0, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	953, 950, 951, 984, 970, 971, 972, 980, 981, 982,
	0, 0, 0, 0, 0, 0, 0, 973, 0, 0,
	0, 0, 0, 952, 953, 0, 0, 984, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 950, 951,
	0, 970, 971, 972, 980, 981, 982, 952, 0, 0,
	0, 0, 0, 967, 973, 0, 0, 0, 1559, 0,
	0, 953, 0, 0, 984, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 952, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 977, 985,
	0, 0, 0, 958, 0, 0, 0, 0, 1564, 0,
	0, 0, 0, 0, 983, 0, 0, 0, 0, 0,
	0, 0, 977, 985, 0, 0, 975, 0, 0, 0,
	0, 0, 968, 0, 0, 0, 0, 0, 983, 0,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 968, 974, 0, 977,
	985, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 983, 0, 0, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 978, 0, 0, 0, 974, 0,
	0, 0, 0, 0, 969, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1706, 978, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 978, 976, 0, 0, 964,
	965, 966, 979, 0, 963, 961, 962, 954, 955, 956,
	957, 959, 960, 0, 0, 0, 0, 0, 0, 0,
	976, 0, 0, 964, 965, 966, 979, 0, 963, 961,
	962, 954, 955, 956, 957, 959, 960, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
	964, 965, 966, 979, 0, 963, 961, 962, 954, 955,
	956, 957, 959, 960, 950, 951, 0, 970, 971, 972,
	980, 981, 982, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 953, 950, 951,
	984, 970, 971, 972, 980, 981, 982, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 1517, 0,
	952, 953, 0, 0, 984, 0, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 950, 951, 0, 970, 971,
	972, 980, 981, 982, 952, 0, 0, 0, 0, 0,
	967, 973, 0, 0, 0, 0, 0, 0, 953, 0,
	0, 984, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 952, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 977, 985, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 983, 0, 0, 0, 0, 0, 0, 0, 977,
	985, 0, 0, 975, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 0, 0, 983, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 968, 974, 0, 977, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 1524, 0, 0, 0,
	0, 0, 983, 0, 0, 0, 0, 0, 974, 0,
	0, 0, 0, 0, 975, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 978, 0, 0, 0, 974, 0, 0, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 978, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 978, 976, 0, 0, 964, 965, 966, 979,
	0, 963, 961, 962, 954, 955, 956, 957, 959, 960,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
	964, 965, 966, 979, 0, 963, 961, 962, 954, 955,
	956, 957, 959, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 976, 0, 0, 964, 965, 966,
	979, 0, 963, 961, 962, 954, 955, 956, 957, 959,
	960, 950, 951, 0, 970, 971, 972, 980, 981, 982,
	0, 0, 0, 0, 0, 0, 0, 973, 0, 0,
	0, 0, 0, 0, 953, 950, 951, 984, 970, 971,
	972, 980, 981, 982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 952, 953, 0,
	0, 984, 0, 967, 0, 950, 951, 0, 970, 971,
	972, 980, 981, 982, 0, 0, 0, 0, 0, 0,
	0, 952, 0, 0, 0, 0, 0, 967, 953, 1526,
	1527, 984, 1544, 1545, 1546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 952, 0, 958, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 985, 0, 0, 0, 958, 0, 0,
	0, 1541, 0, 0, 0, 0, 0, 0, 983, 0,
	0, 0, 0, 0, 0, 0, 977, 985, 0, 0,
	975, 0, 0, 0, 0, 0, 968, 958, 0, 0,
	0, 0, 983, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 975, 0, 977, 985, 0, 0,
	968, 1532, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 975, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 1547, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1542, 0, 0, 0, 978, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 978, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 978, 0, 0, 0, 0, 0, 0, 0,
	976, 0, 1543, 964, 965, 966, 979, 0, 963, 961,
	962, 954, 955, 956, 957, 959, 960, 0, 0, 0,
	0, 0, 0, 0, 976, 0, 0, 964, 965, 966,
	979, 0, 963, 961, 962, 954, 955, 956, 957, 959,
	960, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 976, 0, 0, 964, 965, 966,
	979, 0, 963, 961, 962, 954, 955, 956, 957, 959,
	960, 828, 820, 845, 812, 836, 835, 0, 0, 814,
	813, 1538, 1539, 1540, 847, 846, 1537, 1535, 1536, 1528,
	1529, 1530, 1531, 1533, 1534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 841, 0, 833, 832,
	0, 0, 0, 0, 0, 0, 0, 831, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 830, 0, 0, 0, 0,
	0, 0, 0, 828, 820, 845, 812, 836, 835, 0,
	0, 814, 813, 0, 440, 0, 847, 846, 0, 0,
	0, 0, 0, 823, 822, 824, 825, 826, 0, 844,
	0, 0, 441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 841, 0,
	833, 832, 0, 0, 816, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 442, 0, 834, 0, 0, 445,
	821, 0, 0, 0, 450, 451, 0, 830, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	444, 446, 0, 0, 0, 829, 0, 0, 0, 1209,
	1207, 1208, 1211, 1210, 0, 823, 822, 824, 825, 826,
	0, 844, 459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 0, 0,
	447, 0, 0, 827, 818, 0, 816, 0, 0, 0,
	0, 0, 0, 849, 448, 449, 0, 0, 834, 0,
	0, 0, 821, 815, 0, 0, 842, 843, 0, 0,
	0, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 819, 829, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 817, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 827, 818, 0, 0, 0,
	0, 0, 0, 0, 0, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 815, 0, 0, 842, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 443, 0, 0, 0, 0, 0, 819, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 453, 0, 458, 0, 0,
	0, 454, 0, 0, 0, 0, 455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	457,
}
var sqlPact = [...]int{

	3719, -1000, 45, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 824, 16065, 16065, 20055, -1000, -1000, -1000, -1000, -1000,
	-1000, 840, 769, 783, 5324, 20055, 20055, 19774, 1279, 1279,
	21460, -1000, -1000, 24832, -1000, 29290, 584, 587, 584, 584,
	596, 21460, 20055, 729, 814, 158, -1000, 945, 44, 24551,
	20055, 1519, 58, 18088, 371, 3719, 19493, 24270, 20055, 19212,
	687, 55, 16643, 20055, -1000, 61, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1330, 380,
	61, -1000, 1328, 1228, 1226, 18088, 23989, 23708, 23427, 23146,
	-1000, 12262, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 860, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 378, 376, -1000,
	18931, -1000, 1050, -1000, 56, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1046, -1000, 20055, -1000, -1000, 22865, 22584,
	787, 375, 1015, -1000, -1000, 649, 484, 1551, -1000, 69,
	-1000, 1530, 782, -1000, -1000, 1325, -1000, 1045, 1324, 1320,
	1319, 1318, 1317, 1312, 478, 886, 566, -1000, 1311, 1308,
	1015, -1000, 1015, -1000, -1000, -1000, 681, 21460, -1000, -1000,
	18088, -1000, 22303, 20055, 20055, 1249, 22022, -1000, 945, -1000,
	-1000, -1000, 1096, 1510, 1510, 1510, 1547, 175, 170, 158,
	43, 20055, -1000, 372, 43, 9142, 9142, -1000, -1000, 371,
	-1000, 432, 15185, -1000, 8188, -1000, 936, 1415, 605, 891,
	1405, -118, 932, 894, 1402, 15784, 16643, 55, 54, -1000,
	-1000, -1000, 5019, 15784, 753, 14342, 61, -1000, -1000, -1000,
	18088, 20055, 20055, 796, 21741, -1000, 1391, 132, 1390, -1000,
	131, 1388, -1000, 131, 1386, 42, -1000, -1000, -1000, -1000,
	-1000, -1000, 371, 18650, 20055, 1657, 29246, -1000, 10415, -1000,
	-1000, 16065, 1288, 16065, -1000, -1000, 1649, -1000, 20055, 10415,
	-1000, 53, 52, 1183, 1187, 12863, 12569, 1491, 930, -1000,
	-1000, -1000, 67, 5324, 772, 18369, 20055, 1348, 16065, 20055,
	20055, 20055, 20055, 20055, 20055, -1000, 1172, -1000, -1000, 20055,
	20055, 858, 727, -1000, 50, 46, -1000, 21460, -1000, 137,
	-1000, 368, 1131, 503, 162, 21179, 503, 1128, -1000, 1096,
	-1000, 1058, 1161, 9461, 10415, 158, -1000, -1000, 158, 158,
	10415, -1000, -1000, 20055, 43, 1639, 20055, 103, -1000, 27714,
	-1000, -1000, 10415, 10415, 10415, 10415, 10415, 994, 426, -1000,
	366, 363, 5948, -1000, -1000, 1756, -1000, -1000, -1000, 177,
	-1000, -1000, 10415, 61, -1000, -1000, -1000, -1000, 359, 1769,
	-1000, 496, -1000, -1000, -1000, 492, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1334, 357, 337, -1000, -1000,
	-1000, -1000, 333, 329, 315, 314, 309, 302, 301, 300,
	299, 296, 295, 294, 293, 292, 290, 961, -1000, 523,
	-1000, -1000, 523, 523, -1000, 282, 282, 284, -1000, -1000,
	-1000, -1000, 282, -1000, -1000, -1000, 469, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 288, 103, -1000, -1000, -1000, 20055,
	41, -1000, 28505, -1000, -5, 896, -1000, 17513, 1607, 1566,
	1504, 18088, 1571, 44, 1307, 1561, 44, 1303, 671, 20055,
	20055, 658, 654, 18088, 462, -1000, -1000, -1000, -1000, -1000,
	20055, -1000, -1000, 49, -1000, -1000, 1302, 34, -1000, -1000,
	512, 99, 1598, 99, 14623, -1000, 20055, 20055, -1000, 20055,
	-1000, -1000, 20055, -1000, 20055, 20055, -1000, 20055, 159, 16938,
	845, 1380, 784, 44, 28, -1000, 1661, -1000, -1000, -1000,
	-1000, 143, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	284, 961, 282, 282, 282, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 469, -1000, -1000, 523, 523, 523, -1000, -1000,
	22, 28505, 647, -1000, 1301, 581, -1000, 494, 3, 956,
	1223, 856, -1000, -1000, -1000, -1000, 13, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1704, -1000, -1000,
	1755, 13, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1767, 5324, -1000, -1000, -1000, -1000, -1000, -1000, 20055,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	20055, 20055, 20055, 956, 1223, -1000, -1000, 18088, 17219, 1591,
	1379, 981, -1000, 1584, 20055, 1038, 1123, -1000, 698, 1378,
	-1000, -1000, -1000, -1000, 28505, -1000, 28505, 831, 1237, -1000,
	1237, 12, -1000, 27690, -1000, 277, -1, 512, 9142, 14045,
	29164, 29246, 5324, 716, 10415, 10415, 10415, 10415, 10415, 10415,
	10415, 10415, 10415, 10415, 10415, 10415, 10415, 10415, 10415, 10415,
	10415, 10415, 10415, 10415, 10415, 10415, 1107, 10415, 643, 10415,
	10415, 10415, 10415, 1474, 966, 254, 993, 5324, -1000, -1000,
	1692, 1692, 1692, 28845, 28845, 231, 426, -1000, 10415, -1000,
	8824, 170, 26995, 2, -1000, -1000, -1000, 6903, 521, 28505,
	61, 5629, -1000, 1752, 711, 1296, 1275, 276, 169, 168,
	10415, 10415, 10733, 10733, 10415, 11051, 10415, 10415, 6266, 10415,
	10415, 10415, 10415, 10415, 10415, -1000, 274, -1000, -1000, -1000,
	-1000, 1748, -1000, -1000, 1744, -1000, 715, 691, 1742, 512,
	165, 8188, -1000, 845, 20055, 20055, 20055, -1000, -1000, 1122,
	20898, 1119, 29246, 20055, -1000, 273, 270, 1210, 1209, 20055,
	20055, 20617, 20336, 20055, 928, 44, -1000, 269, 44, -1000,
	268, 20055, 885, -1000, 20055, 20055, 878, 1262, 1061, -1000,
	506, 15784, 752, 1299, 20055, 871, 10415, 923, -1000, 13748,
	528, 20055, 871, 92, -1000, -1000, -1000, 456, 20055, -1000,
	-1000, -1000, 132, -1000, 131, 131, -1000, -1000, 18088, -1000,
	-1000, -1000, -1000, -1000, -1000, 29246, 420, 418, -1000, 1741,
	640, -1000, 635, 633, 632, -1000, 256, -1000, 10415, 20055,
	20055, 1223, -1000, -1000, -1000, -1000, 801, -1000, 944, -1000,
	13157, -1000, -1000, -1000, -1000, -6, -1000, -1000, -1000, 462,
	-1000, -1000, -1000, 164, -8, 1, 29246, -1000, -1000, -1000,
	-1000, -1000, 20055, 327, 20055, 44, 20055, -1000, 1765, 44,
	20055, 1377, 1426, 444, 20055, -1000, -1000, -1000, 10415, -1000,
	-1000, -1000, 44, -1000, 1270, -1000, -26, 1632, 1109, -139,
	167, 467, -1000, 13451, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 476, 660, 660, 703, 703, 703,
	703, 1746, 1013, 1003, 2518, 219, 219, 219, 2160, 2092,
	2092, 219, 219, 219, 28845, 28821, 161, 10415, 10415, 631,
	964, 254, 161, 10415, 161, 161, 161, 161, -1000, 1115,
	-1000, -1000, -1000, -1000, 1298, 253, 11051, 11051, -1000, -1000,
	-1000, 5948, 11369, -1000, -1000, -1000, -1000, -1000, 251, 10415,
	-1000, 27313, -167, -10, -1000, -1000, 10415, -9, -50, -1000,
	-1000, 724, -1000, 10415, -1000, 20, 10415, 10415, 10415, 160,
	130, -1000, 992, 246, 245, 10415, -1000, -1000, 28468, 25476,
	129, 1297, -109, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	128, 127, 28444, -109, 126, 2878, -1000, 11051, 11051, 11051,
	5948, 244, 123, 27374, -109, 28128, 8506, 8506, 8506, 121,
	28091, 10415, -109, 25444, 25412, 3593, -15, -16, -17, 1738,
	-21, 119, 473, 472, 118, 1270, -1000, -1000, -1000, -1000,
	628, 625, 1375, -1000, 1114, -1000, 533, -1000, 836, 10415,
	11981, 243, 242, 903, -1000, 1374, 1070, 1370, 1070, -1000,
	-5, 832, -1000, 10415, -1000, 10415, -1000, 617, -1000, -1000,
	608, 506, 1293, 732, -1000, 1010, -1000, -1000, 751, -1000,
	-1000, 6584, 28505, -1000, 871, 1509, -27, -1000, -1000, -1000,
	512, 14623, 14045, 8188, -31, -1000, -1000, -1000, 845, -1000,
	541, 1737, 117, 1143, 913, 881, 808, 1736, 28505, -6,
	-6, -1000, -1000, -1000, -1000, -1000, 20055, -1000, 1252, -1000,
	17219, 239, 20055, 238, -1000, 237, -1000, -1000, 236, 20055,
	1189, 444, 16362, -1000, 503, -1000, 116, 1267, 1545, -1000,
	14045, 1218, 1217, 14045, 1221, 1000, 1000, 1000, -1000, 234,
	453, 414, 467, 4395, 10415, 17807, 1004, 83, 115, 1632,
	10415, 161, 161, 10415, 11051, 11051, -1000, 161, -1000, -1000,
	-1000, -1000, -1000, 1291, 230, 10415, 29246, 3668, 3322, -33,
	-1000, 7870, -12, -1000, 10415, -1000, 26958, -1000, -1000, 417,
	1422, -1000, 10415, 28067, 114, 7552, -1000, 27751, -3, -3,
	-1000, 1762, -1000, 14904, 516, 1007, 26934, 29164, 29246, -1000,
	10415, -1000, -1000, 1289, 10415, -1000, 29164, 29246, 11051, 11051,
	11051, 11051, 11051, 11051, 11051, 11051, 11051, 11051, 11051, 11051,
	11051, 11051, 11051, 11051, 11051, 11051, 11051, 1167, 11051, 1686,
	1686, 1686, -32, 7234, -1000, 1285, 1289, 10415, 10415, 29246,
	113, 112, 111, -1000, 10415, -109, 10415, 10415, 10415, -1000,
	-1000, -1000, 107, -1000, 1725, -1000, -1000, -1000, -1000, 1267,
	20055, 20055, 20055, 1369, -1000, 2113, -1000, 26616, -35, -1000,
	351, 1523, 10415, -1000, -1000, 229, 11981, 20055, -1000, 1203,
	1207, 569, 20055, -1000, 20055, -1000, 20055, 20055, 20055, -37,
	-39, 20055, 20055, -1000, 15784, 653, 228, -1000, -83, -1000,
	-1000, 252, 44, 871, -1000, -99, -1000, 455, -1000, 401,
	400, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 102,
	-1000, -1000, 1255, -1000, 11981, 223, 20055, 17219, 1576, 11981,
	1033, 1195, 444, 16362, -1000, 698, -1000, 510, 10415, 10415,
	1632, 14045, 14045, 1295, 1213, 14045, -1000, -1000, -1000, -1000,
	398, 392, 396, 12262, 467, 17807, -1000, 1717, 1194, -53,
	-1000, -1000, 20055, 221, -1000, 467, 1674, 161, 2325, 355,
	10415, 29246, 28875, -54, 10415, 10415, -1000, -59, -1000, 10415,
	395, 28505, -1000, -1000, -1000, 28505, 10415, 1759, 10415, 101,
	97, 94, -1000, -1000, -1000, 25113, 10415, 88, -1000, 86,
	85, 28505, 1285, 28505, -1000, -1000, 410, 410, 740, 740,
	740, 740, 1686, 2452, 1230, 1958, 650, 650, 650, 955,
	679, 679, 650, 650, 650, 1287, 1169, 220, 28899, 10415,
	-61, -1000, -1000, -1000, 28505, 28505, 84, -1000, -1000, -1000,
	-109, 3556, 26579, 26555, -1000, 82, 510, -1000, -1000, -1000,
	20055, -1000, 20055, -1000, 5324, 20055, 1282, 1108, -1000, -1000,
	1199, 201, 11051, 20055, -1000, 940, 11981, 1505, 61, 5324,
	1505, 26237, 5629, -65, -66, 1103, -1000, 1068, 10415, -1000,
	29246, 1070, 1070, -1000, 602, 601, 600, 590, -1000, -1000,
	-100, 15490, 1761, 1433, 20055, 1503, -1000, -1000, 198, -1000,
	-1000, -1000, 988, -67, 11981, -72, 80, 44, -73, 20055,
	-1000, 444, 16362, -1000, 1426, -1000, 20055, 28505, -109, -1000,
	1295, -1000, 196, 10415, 14045, -1000, -139, -1000, -74, -1000,
	467, -79, 17807, -1000, 390, -159, -1000, 442, -1000, 467,
	190, 20055, 17807, 10415, 10415, 28875, -84, -1000, 161, 161,
	-1000, 26200, -1000, 28505, -1000, 27751, -1000, -1000, -1000, 984,
	-1000, 26176, -1000, -1000, -1000, -1000, 11051, 1283, 189, 29246,
	25858, -1000, -1000, 10415, -1000, -1000, -1000, -1000, -1000, 1076,
	-1000, -1000, 20055, 1111, -1000, -1000, 10415, 28899, 186, 1252,
	185, -1000, -1000, -1000, -1000, -1000, -1000, 1523, 20, -1000,
	887, -1000, -1000, 28505, 1518, -1000, -1000, 20055, 20055, 184,
	183, -1000, 182, 61, -85, -1000, 441, 693, -86, 20055,
	-1000, -1000, 4063, 20055, 940, -90, -1000, 1252, -1000, 940,
	181, 16362, -1000, 1189, -101, -1000, 1569, -1000, 20055, 28505,
	-1000, 467, -1000, 1691, 17807, 159, -1000, -1000, 1194, -1000,
	4711, 17807, 20055, -102, -1000, 161, 161, -1000, -1000, 78,
	1007, 1543, -1000, 328, 11051, 29246, -108, -1000, 25821, -1000,
	-1000, 1365, 25797, 1154, 20055, -1000, 20055, 1505, 76, 20055,
	540, 5324, -1000, -1000, 10415, 10415, 10415, 1761, -1000, -1000,
	1760, 789, -1000, 512, -1000, 179, 1252, 940, -1000, 1252,
	11981, -1000, 1195, 20055, 178, -115, 17807, -1000, -1000, 383,
	-1000, -1000, 1687, -1000, -125, -1000, -1000, 926, 10415, 328,
	-127, -1000, -1000, 1305, -1000, 1022, 909, 74, -129, -1000,
	-1000, 162, -1000, 10415, -1000, -133, -134, -3, -1000, -1000,
	14623, -1000, 20055, -1000, 1252, -1000, -140, -1000, -1000, -1000,
	-1000, -1000, 467, 382, -1000, 72, 10097, 10097, -109, -1000,
	20055, -1000, 1032, 1023, 755, -1000, -1000, -1000, -1000, -1000,
	1154, 28505, -1000, -1000, 71, -121, -141, -1000, 940, 17807,
	-1000, -1000, -1000, -1000, 11676, 1059, 859, 27337, -1000, -1000,
	-1000, 1454, -1000, 560, 991, 991, 1022, 1759, -1000, 1029,
	1252, -1000, 1667, -1000, -1000, -1000, -1000, -1000, -1000, 1675,
	-1000, -1000, 1178, -1000, -1000, -1000, -1000, -1000, -1000, 9779,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2033, 2032, 1585, 1655, 2031, 2030, 1649, 2029, 2018,
	2016, 2013, 2009, 2007, 126, 1634, 1631, 42, 1596, 2006,
	109, 1999, 1992, 1991, 122, 1989, 1986, 1984, 1974, 138,
	1962, 1957, 107, 1570, 1563, 1560, 1956, 1954, 111, 1948,
	18, 1947, 90, 1946, 67, 175, 55, 173, 1941, 1939,
	1938, 36, 117, 85, 1937, 92, 1935, 1934, 59, 37,
	26, 15, 1933, 120, 146, 1450, 40, 1932, 1931, 159,
	1930, 14, 27, 2396, 166, 165, 141, 143, 1926, 1922,
	1920, 1917, 60, 1915, 3, 1914, 1912, 17, 72, 30,
	1911, 41, 20, 1910, 1908, 151, 1907, 89, 118, 1557,
	145, 148, 168, 1905, 115, 12, 91, 1904, 1901, 152,
	43, 1898, 29, 100, 154, 1897, 76, 169, 88, 24,
	82, 129, 1896, 1893, 1892, 94, 1891, 130, 132, 1890,
	1889, 96, 1888, 153, 156, 1887, 1881, 149, 1877, 1875,
	161, 180, 1870, 1869, 176, 1868, 10, 69, 87, 8,
	1559, 1558, 135, 81, 39, 19, 1867, 1758, 1285, 910,
	31, 102, 66, 64, 103, 61, 73, 160, 113, 1859,
	1856, 137, 1855, 1854, 1852, 1851, 1849, 97, 1847, 1844,
	95, 158, 21, 5, 13, 114, 44, 57, 106, 133,
	163, 134, 1842, 110, 147, 68, 98, 1841, 1838, 2057,
	144, 1836, 1834, 1829, 1627, 1439, 1012, 186, 1823, 1822,
	783, 626, 1821, 1820, 75, 1818, 142, 1817, 1816, 164,
	242, 23, 1814, 52, 38, 116, 1811, 119, 65, 0,
	1709, 304, 1810, 150, 101, 1809, 1808, 1807, 1806, 16,
	2, 9, 6, 7, 4, 32, 25, 1803, 1800, 155,
	49, 86, 1799, 167, 1797, 1796, 1795, 58, 1794, 28,
	1792, 22, 1791, 1788, 11, 1, 1786, 1785, 157, 1783,
	128, 1782, 1592, 1780, 162, 1778, 1777, 1668, 53, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 53, 53, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 50, 50, 55, 55, 55, 57, 57, 54, 54,
	49, 49, 5, 5, 227, 227, 228, 228, 39, 39,
	43, 43, 40, 41, 41, 42, 42, 6, 6, 6,
	7, 7, 7, 7, 7, 7, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 101, 101, 100, 100, 103,
	103, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 195, 195, 194, 19,
	169, 169, 20, 20, 20, 20, 21, 126, 126, 22,
	22, 22, 22, 23, 28, 268, 268, 268, 272, 272,
	273, 273, 274, 274, 274, 274, 274, 274, 274, 270,
	270, 27, 31, 31, 31, 31, 31, 31, 145, 141,
	141, 143, 143, 143, 143, 64, 140, 140, 140, 140,
	142, 142, 142, 142, 220, 219, 219, 225, 225, 225,
	79, 79, 79, 79, 79, 80, 80, 80, 218, 218,
	218, 218, 226, 226, 226, 226, 226, 226, 81, 81,
	81, 224, 224, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	18, 269, 269, 271, 271, 33, 33, 34, 34, 35,
	35, 35, 35, 10, 10, 11, 11, 82, 82, 83,
	83, 148, 148, 148, 148, 84, 84, 56, 56, 56,
	147, 237, 237, 238, 238, 238, 238, 238, 238, 239,
	239, 239, 239, 239, 239, 239, 235, 235, 236, 233,
	233, 234, 234, 234, 234, 275, 275, 146, 146, 87,
	87, 242, 242, 242, 242, 240, 240, 240, 240, 240,
	243, 241, 244, 244, 244, 244, 244, 181, 181, 181,
	37, 12, 62, 62, 13, 9, 9, 130, 130, 91,
	91, 186, 186, 186, 72, 72, 51, 51, 51, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	131, 131, 132, 132, 25, 30, 36, 36, 36, 36,
	36, 277, 277, 68, 68, 68, 68, 69, 69, 144,
	144, 144, 144, 144, 63, 8, 8, 58, 58, 59,
	59, 60, 60, 61, 61, 278, 278, 24, 24, 24,
	75, 75, 137, 137, 137, 139, 139, 138, 138, 138,
	116, 116, 116, 38, 96, 96, 105, 105, 106, 106,
	192, 107, 107, 29, 29, 46, 46, 44, 44, 44,
	44, 44, 44, 45, 45, 47, 47, 47, 47, 47,
	47, 47, 250, 250, 250, 253, 253, 249, 251, 251,
	252, 252, 276, 276, 117, 117, 117, 86, 85, 85,
	89, 89, 88, 90, 90, 185, 114, 114, 114, 114,
	133, 134, 134, 135, 135, 136, 136, 113, 113, 165,
	165, 48, 48, 95, 95, 97, 97, 155, 155, 155,
	156, 156, 154, 154, 154, 154, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 266, 266, 266, 267, 267,
	184, 184, 188, 188, 188, 188, 188, 188, 182, 182,
	182, 182, 183, 183, 193, 193, 120, 120, 120, 120,
	118, 118, 119, 119, 189, 189, 189, 189, 115, 115,
	190, 190, 190, 149, 149, 196, 196, 196, 214, 214,
	94, 94, 94, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	198, 198, 198, 198, 200, 200, 200, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 213, 213, 213, 213, 213, 201, 201, 208, 208,
	209, 209, 210, 211, 202, 202, 203, 203, 204, 205,
	212, 212, 212, 212, 216, 216, 206, 206, 206, 206,
	206, 207, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 128, 128, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	159, 159, 159, 159, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 245, 245, 245, 245, 245,
	245, 245, 247, 247, 248, 248, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 254, 254, 255, 255, 257, 257, 258,
	258, 259, 260, 260, 260, 261, 262, 262, 256, 256,
	263, 263, 263, 264, 264, 265, 265, 265, 265, 265,
	171, 171, 171, 172, 172, 173, 179, 179, 179, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 70, 70, 70, 70, 70,
	102, 102, 168, 168, 166, 166, 166, 170, 170, 121,
	121, 215, 215, 215, 215, 215, 215, 215, 122, 122,
	122, 129, 123, 123, 124, 124, 124, 124, 124, 124,
	162, 163, 125, 125, 125, 164, 164, 174, 178, 178,
	177, 176, 176, 175, 175, 152, 152, 153, 153, 151,
	150, 110, 110, 109, 109, 108, 108, 279, 279, 180,
	180, 111, 111, 112, 104, 104, 191, 191, 191, 191,
	98, 98, 77, 77, 99, 99, 73, 73, 76, 76,
	74, 74, 74, 74, 92, 92, 93, 93, 71, 71,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 217, 217, 217, 167, 65, 65, 65, 66, 66,
	67, 67, 222, 222, 222, 223, 223, 223, 223, 221,
	221, 221, 221, 221, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 6, 1, 1, 1, 3, 3, 0,
	2, 0, 2, 1, 3, 5, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 3, 6, 3, 4, 1, 5, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 4, 4, 4, 2, 2,
	4, 2, 4, 4, 4, 4, 4, 4, 4, 2,
	3, 4, 3, 3, 4, 4, 2, 5, 5, 6,
	2, 2, 0, 2, 0, 6, 6, 5, 5, 4,
	12, 4, 12, 7, 10, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 5, 2, 0, 6, 11, 14, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	1, 3, 3, 0, 3, 8, 11, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 6,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 3, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 7, 4, 6, 3,
	1, 5, 6, 9, 5, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 1, 1, 1, 6, 6, 4, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 4, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, 23, 34, 224, 66, -8, -9, -10, -11, -12,
	-13, -252, 94, 103, 125, 206, 101, 87, 119, 227,
	234, -44, -46, 243, -145, 246, 35, 255, 60, 97,
	229, 222, 223, 280, 68, -250, -47, -45, 329, 304,
	310, 238, -48, 264, 296, 332, 264, 134, 80, 299,
	-268, -99, 264, 80, -74, -65, 322, 4, -229, -231,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 54,
	59, 60, 61, 63, 65, 66, 67, 70, 71, 78,
	79, 81, 83, 87, 89, 93, 94, 96, 101, 102,
	103, 109, 110, 113, 115, 120, 125, 126, 127, 128,
	135, 138, 140, 133, 148, 150, 151, 154, 153, 158,
	161, 164, 166, 167, 168, 171, 169, 173, 174, 176,
	175, 181, 183, 184, 186, 189, 192, 195, 198, 199,
	200, 201, 204, 206, 208, 209, 210, 212, 213, 215,
	216, 217, 218, 219, 222, 220, 221, 223, 224, 225,
	227, 229, 230, 232, 244, 245, 256, 234, 235, 236,
	237, 240, 241, 243, 246, 248, 251, 254, 255, 257,
	260, 258, 253, 263, 265, 266, 267, 268, 269, 276,
	280, 281, 282, 283, 286, 287, 288, 290, 293, 294,
	295, 300, 305, 306, 307, 308, 28, 36, 37, 38,
	39, 41, 42, 45, 46, 50, 51, 52, 55, 82,
	84, 85, 100, 104, 105, 111, 121, 123, 129, 130,
	139, 141, 142, 143, 145, 156, 170, 180, 182, 193,
	197, 203, 205, 211, 231, 239, 249, 250, 259, 261,
	271, 272, 273, 277, 278, 292, 296, 297, -268, -73,
	-65, 80, 89, 138, 288, 287, 80, 134, 264, 299,
	-17, 329, -29, -7, -15, -4, -24, -38, -14, -32,
	-18, -33, -34, -35, -16, 23, -221, 4, -229, -231,
	-230, -232, 57, 69, 118, 137, 131, 147, 149, 157,
	159, 172, 194, 196, 228, 247, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 43, 48, 49, 53, 56,
	58, 64, 68, 72, 73, 74, 75, 76, 77, 86,
	88, 90, 91, 92, 95, 97, 99, 106, 107, 108,
	114, 116, 117, 119, 122, 124, 132, 134, 136, 144,
	146, 152, 155, 160, 162, 163, 177, 178, 179, 185,
	187, 188, 190, 191, 202, 207, 214, 226, 238, 242,
	252, 262, 264, 270, 274, 275, 279, 284, 285, 289,
	291, 298, 299, 301, 302, 303, 304, -65, -65, -65,
	206, 22, -272, 22, -273, -274, 68, 94, 119, 238,
	138, 89, 287, -272, -69, 234, -65, -141, 161, 241,
	54, 231, 276, -142, -140, -220, 271, 171, -100, -65,
	4, 22, 54, 242, 80, 59, 81, 120, 134, 135,
	64, 65, 151, 265, 271, 276, 68, 290, 267, 102,
	-277, 276, 276, -277, -277, -68, 276, 274, -69, -220,
	-276, 264, 264, 289, 299, -130, 80, 285, -45, -47,
	-46, -88, -89, 284, 144, 99, 191, -44, -46, -250,
	-253, 212, -249, -65, -253, -85, -86, 22, 91, 333,
	-189, -73, 188, -112, 329, -3, -189, 129, -73, -76,
	129, -73, -65, -189, 129, 274, 333, -99, -92, -65,
	-151, -150, 331, 117, 117, 329, -109, -110, -150, -151,
	117, 146, 146, -190, -189, -65, 129, -77, 129, -76,
	-101, 129, -100, -101, 129, -195, -194, -223, 4, -229,
	-231, -230, 296, 264, 134, -169, 329, -126, 329, -65,
	22, 187, 333, 187, -65, -141, 52, -141, 244, 329,
	-143, -63, -64, 148, 208, 274, 314, 117, 308, -81,
	5, 86, -103, 331, 54, 244, 117, -269, 187, 117,
	117, 117, 117, 117, 117, 308, 148, 208, 256, 264,
	299, 117, 117, -144, -63, -64, -144, 274, -69, -115,
	-189, -100, 129, -65, -100, 134, -65, 129, -88, -89,
	-114, -133, -134, 160, 185, -117, 22, 91, -117, -117,
	44, 330, 330, 333, -253, -93, 329, -104, -191, -157,
	322, -159, 320, 321, 315, 177, 309, -171, -161, -174,
	100, 231, 329, -73, -160, 334, 9, -247, -46, 29,
	-172, -173, 48, -65, 7, 8, 5, 6, -71, -198,
	-167, -207, 279, 106, 179, -245, -246, 4, -229, -222,
	-199, -209, -203, -206, 145, 57, 73, 76, 74, 77,
	242, 289, 49, 28, 104, 105, 197, 203, 261, 277,
	278, 129, 180, 130, 55, 121, 156, 93, 37, 39,
	41, 42, 50, 51, 82, 84, 85, 111, 139, 141,
	142, 143, 182, 211, 249, 259, 272, 273, 297, -230,
	-210, -211, -204, -205, -212, -104, -112, 322, -73, 329,
	-111, -180, -157, 86, -53, 220, -52, 21, 23, 94,
	294, 100, 253, 268, 235, 253, 268, 235, 220, 100,
	334, 220, 220, 100, -227, -224, 9, -223, 5, -74,
	333, -221, 322, -228, -227, 257, 330, -98, -73, -110,
	-190, -75, -73, -75, 243, -65, 30, 100, -55, 333,
	47, 225, 100, -55, 333, 100, -55, 100, 330, 333,
	-189, 129, -76, 30, -168, -196, -197, -199, -208, -202,
	-206, -207, 40, 46, 45, 269, 170, 239, 250, 292,
	38, 186, 140, 139, 141, 142, 143, 249, 37, 211,
	111, 93, 85, 84, 182, 42, 41, -210, -211, -204,
	-205, 82, 272, 273, 145, 39, 51, 50, 297, 259,
	-102, -157, -268, -274, -268, 30, -140, -220, -102, 333,
	333, 158, -80, 164, 176, 126, -219, 86, -225, -218,
	-181, 9, 279, 106, 187, -224, 8, 321, -217, 7,
	320, -219, 86, 71, -226, 5, 4, -167, -181, 86,
	161, -207, 331, -221, 245, -100, 22, -220, -271, 114,
	-268, -220, -220, -220, -220, -220, -65, 158, -220, -220,
	264, 134, 264, 333, 333, -69, -55, 333, 329, -87,
	177, -251, 304, -87, 329, -66, 129, -65, -251, 177,
	-114, -134, -133, -135, -157, 22, -157, -159, -45, -45,
	-45, -90, -185, -157, -249, 30, -92, -95, 333, 117,
	10, 11, 56, 33, 320, 321, 322, 323, 112, 324,
	325, 318, 319, 317, 312, 313, 314, 62, 165, 233,
	13, 14, 15, 26, 190, 159, 309, 131, 247, 315,
	16, 17, 18, 147, 36, 132, -70, 30, 4, -78,
	-157, -157, -157, -157, -157, 196, -108, -152, 327, -46,
	329, -46, -157, -102, 7, -46, -166, 327, -175, -157,
	-109, 329, 5, 329, 5, -254, 305, 114, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 205, -216, 300, -216, -216,
	-200, 329, -200, -201, 329, -200, 306, 310, 329, -95,
	-73, 333, 330, 333, 274, -131, 64, 58, -147, 129,
	58, -233, -65, 64, -234, 53, 285, 207, 116, -131,
	64, -131, 64, 64, -189, 33, -29, 117, 33, -29,
	117, 274, -76, -65, 274, 274, -189, -193, 311, -65,
	-193, 333, 117, 330, 333, -149, 302, -137, -29, 329,
	86, 30, -137, -105, -106, -192, -107, -73, 329, -65,
	-65, -76, -77, -100, -101, -101, -17, -194, 100, -20,
	-29, -24, -38, -14, 330, 333, -94, 29, -127, 329,
	307, 168, 83, 127, 167, -128, 237, 330, 333, 274,
	117, 276, 330, -64, -63, -79, 210, 251, 221, 240,
	333, 8, 7, 7, -221, -270, -65, -73, -76, -73,
	-64, -63, -189, -82, -92, -83, -65, -148, -147, -235,
	-236, -233, 134, 285, 107, 30, 100, -62, 201, 30,
	187, 177, -58, 266, 100, -136, 231, 232, 333, -51,
	31, 90, 329, 330, -149, -191, -97, -187, 327, -189,
	-73, -46, -188, 329, -214, -196, -213, 216, 217, 215,
	219, 218, -196, -221, 271, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, -157, -157, -157, 159, 131, 247,
	36, 132, -157, 274, -157, -157, -157, -157, 169, 177,
	179, 279, 106, 286, 91, 183, -279, 262, 32, -164,
	-46, 329, -179, 27, 252, 22, -221, -171, 231, 329,
	-152, -157, -153, -102, 330, 330, 333, -102, -170, 328,
	-166, -178, -177, 301, 330, -102, 298, 22, 91, 322,
	7, -127, -255, 109, 122, 329, 330, 330, -157, -157,
	-121, -215, -102, 4, 307, 168, 83, 127, 167, 237,
	-121, -122, -157, -102, -123, -158, -159, 320, 321, 315,
	329, 231, -124, -157, -102, -157, 43, 155, 275, -125,
	-157, 117, -102, -157, -157, -157, -102, -102, -102, 329,
	7, 7, 271, 271, 7, -149, 330, -180, -52, -73,
	-65, -65, 177, -147, 129, -57, 177, -196, -65, 329,
	329, 150, 150, -65, -65, 129, -65, 129, -65, -65,
	-53, 220, -29, 329, -29, 329, -65, 220, -65, -73,
	220, -39, 128, 183, -42, 304, -227, 257, 117, -73,
	-116, 226, -157, -116, -139, 187, -98, 296, -65, -116,
	-96, 333, 117, 314, -98, -55, -55, -55, -189, -196,
	327, 327, 7, 274, 274, 274, 274, 329, -157, -270,
	-270, -63, 283, 61, 210, -225, 333, -193, 330, 330,
	333, -66, 134, -66, -29, -100, 5, -29, -73, 100,
	-59, 96, -278, 314, -65, -185, -20, -113, 122, -193,
	333, 69, -120, 149, 172, 118, 157, 228, 137, 7,
	103, -32, -154, 334, 329, -184, 310, -46, -188, -187,
	308, -157, -157, 274, -279, 262, -164, -157, 169, 179,
	279, 106, 286, 91, 183, 117, 329, -158, -158, -102,
	-161, 329, -102, 328, 337, 330, -157, 328, 328, 333,
	-176, -177, 95, -157, -89, 333, -88, -157, -102, -102,
	330, 330, -260, 195, 329, 329, -157, 30, 333, 330,
	117, 330, 330, -129, 202, 330, 10, 11, 320, 321,
	322, 323, 112, 324, 325, 318, 319, 317, 312, 313,
	314, 62, 165, 233, 13, 14, 15, 147, 132, -158,
	-158, -158, -102, 329, 330, -162, -163, 117, 114, 30,
	-125, -125, -125, 330, 117, -102, 333, 333, 333, 330,
	330, 330, 7, 330, 333, 330, 308, 308, 330, -113,
	274, 274, 100, 177, 293, -237, -234, -157, -91, -186,
	-65, -248, 329, -245, -246, -71, 329, 329, -50, 94,
	243, -132, 100, -55, 100, -55, 274, -131, 64, -102,
	-102, 274, 274, -42, 117, 263, 189, 257, -104, 178,
	-116, 63, 330, -149, -106, -97, -180, 330, 328, 7,
	7, 330, 168, 127, 167, -128, 167, -128, -128, 7,
	-65, -84, 133, -148, 329, -66, 329, 329, -87, 329,
	-65, -60, 154, -278, -224, -251, 330, -165, 124, 44,
	-187, 149, 149, -187, -120, 149, -118, 194, -118, -118,
	-266, 329, -17, 329, 328, -184, -221, 327, 335, -102,
	-183, -182, 30, -65, 192, 330, -157, -157, -158, -158,
	117, 329, -157, -168, 26, 26, 330, -102, 330, 333,
	-153, -157, 330, -166, 97, -157, 270, 330, 298, -89,
	-89, -89, 5, -261, -65, 329, 302, -88, 330, -214,
	-196, -157, -162, -157, -214, -196, -158, -158, -158, -158,
	-158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
	-158, -158, -158, -158, -158, 91, 177, 183, -158, 333,
	-102, 330, -163, -162, -157, -157, -196, 330, 330, 330,
	-102, -157, -157, -157, 330, 7, -165, -65, -65, -147,
	100, -238, 64, -239, 56, 107, 68, 177, 179, 285,
	207, 53, 86, 214, 330, 330, 333, -72, -109, 56,
	-72, -157, 329, -91, -92, 177, 86, 177, 86, 79,
	281, -65, -65, -73, -65, -65, 330, 330, -65, -73,
	-228, 271, 329, -138, 329, 187, -29, -116, 314, 328,
	328, 330, 132, -91, 329, -92, -82, 30, -91, 187,
	-61, 153, -278, -224, -58, -257, 303, -157, -102, -187,
	-187, -119, 291, 187, 149, -187, 328, 330, -267, 7,
	328, -195, -184, -183, 7, -156, -155, 115, 175, 330,
	-65, 329, -184, 26, 26, -157, -168, 330, -157, -157,
	330, -157, 328, -157, 5, -157, 330, 330, 330, -262,
	-65, -157, 330, 330, 330, -163, 117, 91, 183, 329,
	-157, 330, 330, 333, 330, 330, 330, -257, -147, -65,
	-221, -65, 107, 129, 179, 150, 329, -158, -73, -146,
	-275, 67, 260, -186, -51, -221, -51, 330, -102, 330,
	330, 179, 179, -157, -196, -55, -55, 274, 274, 274,
	274, -160, -71, -65, -41, -40, 5, 92, -92, 64,
	-112, -46, 329, 198, 330, -91, 330, 330, -29, 330,
	-73, -278, -224, -59, -258, -259, -65, -119, 329, -157,
	-187, -154, 330, 333, -184, 330, -183, 328, 333, 336,
	314, -184, 329, -92, -182, -157, -157, 330, 330, -89,
	-256, 200, 330, -158, 117, 329, -168, 330, -157, -239,
	-66, 177, -157, -67, 329, -84, 329, -72, -89, 214,
	-54, 56, -65, -65, 329, 329, 329, 333, 330, -43,
	314, 287, 178, 330, -65, -65, -146, 330, -84, -146,
	329, -224, -60, 333, 30, -92, -184, 7, -183, -17,
	-155, -221, 327, -183, -92, 330, 330, -89, 44, -158,
	-168, 330, 330, 100, 330, -242, 166, -65, -92, -51,
	330, -73, -49, 291, -221, -102, -102, -102, -40, 5,
	243, -149, 329, -84, -146, -84, -91, -61, -259, -261,
	330, -182, 328, 7, 330, -263, 209, 232, -102, 330,
	107, -240, -243, -241, 187, 118, 199, 248, 330, 330,
	-87, -157, 330, 330, -89, -105, -92, -84, 330, -184,
	328, 330, -264, -265, 36, 282, 71, -157, -264, -65,
	-241, 187, -243, 187, 287, 89, -242, 330, -149, 330,
	-146, -183, -265, 204, 113, 231, 204, 113, -244, 174,
	225, 47, 243, -244, -240, -56, 47, 225, -84, 26,
	20, 179, 86, -265,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 0, 0, 0, 0, 80, 81, 82, 83, 84,
	85, 0, 0, 431, 0, 0, 0, 0, 0, 0,
	0, 403, -2, 0, 157, 0, 352, 0, 352, 352,
	356, 0, 0, 433, 318, 430, -2, 441, 0, 0,
	0, 439, 417, 0, 0, -2, 0, 0, 0, 0,
	0, 135, 0, 965, 894, 900, 901, 925, 926, 927,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 0, 0,
	896, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 0, 230, 939, 940, 941,
	942, 943, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 121, 128, 129,
	1018, 131, 0, 138, 139, 140, 142, 143, 144, 145,
	146, 147, 148, 0, 345, 1042, 358, 152, 995, 1047,
	953, 1119, 1064, 160, 170, 0, 1125, -2, 174, 97,
	203, 204, 0, 208, 209, 0, 211, 232, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 226, 0, 0,
	363, 351, 363, 348, 349, 350, 353, 0, 344, 151,
	0, 432, 0, 0, 0, 0, 0, 317, -2, 413,
	414, -2, 0, 436, 436, 436, 0, 0, 414, 0,
	422, 1022, 425, 907, 423, 0, 0, 438, 437, 0,
	418, 514, 0, 461, 0, 2, 0, 1103, 514, 0,
	1103, 899, 0, 0, 1103, 0, 0, 136, 137, 904,
	902, 903, 0, 0, 0, 0, 897, 873, 871, 872,
	0, 0, 0, 0, 520, 87, 1103, 55, 1103, 892,
	55, 1103, 95, 55, 1103, 0, 116, 118, 935, 936,
	937, 938, 1131, 0, 0, 0, 0, 126, 0, 130,
	132, 0, 0, 0, 357, 153, 1092, 155, 0, 0,
	159, 161, 162, 0, 0, 0, 0, 0, 0, 173,
	198, 199, 98, 0, 0, 0, 0, 234, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 222, 223, 0,
	0, 0, 0, 346, 359, 360, 347, 0, 355, 55,
	518, 290, 1103, 429, 290, 929, 429, 1103, -2, 0,
	409, 448, 449, 0, 0, 0, 434, 435, 0, 0,
	0, 405, 406, 0, 424, 0, 0, 464, 884, 888,
	889, 618, 0, 0, 0, 0, 0, 0, 710, 712,
	1097, 1119, 0, 714, 715, 0, 717, 719, 720, 0,
	723, 724, 864, 896, 910, 911, 912, 913, 0, 0,
	916, 0, 918, 919, 920, 764, 733, -2, -2, 908,
	550, 551, 552, 553, -2, 1133, 737, 739, 741, 742,
	743, 744, 0, 1081, 1098, 1099, 1115, 1116, 1124, 1128,
	1129, 1103, 1112, 1104, 1093, 1101, 1110, 970, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 934,
	580, 581, 586, 587, 589, 464, 462, 515, 516, 0,
	0, 881, 879, 880, 32, 341, 34, 0, 341, 341,
	0, 0, 0, 0, 239, 0, 0, 241, 0, 0,
	0, 0, 0, 0, 505, 64, 65, 201, 202, 895,
	0, 869, 870, 505, 66, 77, 0, 0, 890, 874,
	524, 0, 380, 0, 0, 521, 0, 0, 89, 0,
	53, 54, 0, 91, 0, 0, 93, 0, 431, 0,
	0, 1103, 0, 431, 0, 822, 532, 533, 534, 535,
	536, 615, 539, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 557, 558, 559, 560, 561, 562, 563,
	577, 0, 556, 556, 556, 569, 570, 578, 579, 584,
	585, 596, 597, 599, 601, 595, 595, 595, 592, 593,
	0, 820, 0, 141, 0, 0, 156, 0, 0, 0,
	0, 0, 165, 185, 186, 187, 166, 168, 175, 177,
	178, 179, 188, 189, 190, 191, 307, 0, 309, 921,
	0, 167, 169, 171, 172, 192, 193, 194, 195, 196,
	197, 0, 0, 99, 207, 205, 206, 210, 212, 0,
	231, 213, 214, 215, 216, 217, 218, 221, 224, 225,
	0, 0, 0, 0, 0, 354, 310, 0, 248, 0,
	0, 313, 428, 0, 0, 0, 1103, 928, 368, 0,
	412, 446, 447, 450, 453, 454, 451, 618, 419, 420,
	421, 442, 443, 328, 426, 0, 0, 524, 0, 0,
	0, 0, 0, 0, 799, 800, 801, 802, 803, 804,
	807, 808, 805, 806, 809, 810, 811, 0, 0, 0,
	812, 813, 814, 0, 0, 816, 0, 818, 0, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 887, 815,
	623, 624, 625, 647, 648, 0, 711, 875, 868, 713,
	0, -2, 820, 0, 716, 721, 722, 0, 0, 863,
	-2, 0, 915, 0, 615, 766, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 843, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 583, 594, 591, 590,
	567, 0, 566, 564, 0, 568, 0, 0, 0, 524,
	0, 0, 883, 0, 0, 0, 0, 340, 36, 1103,
	0, 57, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 237, 0, 0, 238,
	0, 0, 0, 898, 0, 0, 0, 69, 0, 905,
	76, 0, 0, 0, 0, 392, 0, 392, 382, 0,
	0, 0, 392, 395, 396, 398, 399, 0, 0, 522,
	88, 893, 55, 96, 55, 55, 102, 117, 0, 119,
	122, 123, 124, 125, 120, 0, 525, 527, 537, 0,
	602, 603, 604, 605, 606, 607, 616, 127, 0, 0,
	0, 0, 158, 163, 164, 364, 0, 182, 0, 184,
	0, 308, 923, 922, 100, 233, 149, 227, 228, 505,
	361, 362, 519, 0, 0, 247, 904, 249, 251, 252,
	253, 254, 929, 0, 929, 0, 0, 311, 0, 0,
	0, 0, 370, 376, 0, 452, 455, 456, 0, 445,
	326, 327, 431, 906, 458, 885, 505, 465, 0, 475,
	514, 491, 480, 0, 619, 528, 529, 571, 572, 573,
	574, 575, 620, 621, 0, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, -2, -2, -2, 639, 640,
	641, -2, -2, -2, 645, 646, -2, 817, 819, 0,
	878, 0, -2, 0, -2, -2, -2, -2, 659, 0,
	661, 664, 666, 668, 0, 0, 0, 0, 877, 678,
	855, 0, 0, 796, 797, 798, 886, 663, 0, 0,
	876, 867, 0, 0, -2, 718, 0, 0, 0, 826,
	827, 862, 858, 0, 725, 441, 0, 0, 0, 0,
	0, 924, 774, 0, 0, 0, 738, 740, 0, 0,
	0, 0, 830, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 820, 840, 0, 0, 681, 0, 0, 0,
	0, 1119, 0, 820, 848, 0, 0, 0, 0, 0,
	820, 0, 854, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 458, 517, 882, 35, 330,
	0, 0, 0, 38, 1103, 46, 0, 262, 0, 0,
	0, 0, 0, 343, 47, 1103, 55, 1103, 55, 48,
	33, 341, 235, 0, 236, 0, 334, 0, 329, 332,
	0, 76, 0, 0, 63, 0, 67, 78, 0, 891,
	86, 0, 523, 377, 392, 0, 0, 384, 381, 379,
	524, 0, 0, 0, 0, 90, 92, 94, 0, 823,
	0, 0, 0, 0, 0, 0, 0, 0, 821, 133,
	134, 154, 180, 181, 183, 176, 0, 229, 256, 289,
	0, 0, 929, 0, 245, 290, 312, 314, 0, 0,
	372, 376, 0, 375, 429, 444, 0, 460, 0, 463,
	0, 0, 0, 0, 0, 511, 511, 511, 509, 485,
	431, 0, 491, 0, 0, 503, 0, -2, 480, 0,
	0, -2, -2, 0, 0, 0, 679, -2, 660, 662,
	665, 667, 669, 0, 0, 0, 0, 0, 0, 0,
	680, 0, 0, 865, 868, -2, 821, 824, 825, 0,
	0, 859, 0, 0, 0, 0, 440, 441, 441, 441,
	731, 0, 732, 0, 0, 0, 0, 0, 0, 747,
	0, 748, 749, 0, 0, 750, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 684,
	685, 686, 0, 0, 751, 846, 847, 0, 0, 0,
	0, 0, 0, 756, 0, 853, 0, 0, 0, 760,
	761, 762, 0, 554, 0, 576, 598, 600, 588, 460,
	0, 0, 0, 0, 56, 260, 279, 0, 0, 319,
	325, 325, 0, 734, 735, 0, 0, 0, 40, 0,
	0, 0, 0, 44, 0, 50, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 79, 390, 391,
	378, 389, 0, 392, 397, 394, 400, 0, 530, 0,
	0, 538, 608, 609, 610, 611, 612, 613, 614, 0,
	150, 243, 0, 250, 0, 0, 0, 248, 0, 0,
	0, 374, 376, 0, 367, 368, 427, 768, 0, 0,
	466, 0, 0, 0, 0, 0, 506, 510, 507, 508,
	0, 0, 0, 0, 491, 503, 472, 0, 0, 0,
	479, 502, 0, 501, 490, -2, 622, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 856, 0, 791, 0,
	0, 867, -2, 828, 857, 861, 0, 726, 0, 0,
	0, 0, 917, 772, 773, 777, 0, 0, 736, 0,
	0, 829, 839, 841, 682, 683, 687, 688, 689, 690,
	691, 692, 693, 694, 695, 696, -2, -2, -2, 700,
	701, 702, -2, -2, -2, 0, 0, 0, 842, 0,
	0, 794, 844, 845, 850, 851, 0, 753, 754, 755,
	852, 0, 0, 0, 582, 0, 768, 336, 338, 37,
	0, 261, 0, 264, 0, 0, 0, 0, 270, 271,
	0, 0, 0, 0, 281, 288, 0, 328, 909, 0,
	328, 0, 0, 0, 0, 0, 52, 0, 0, 342,
	0, 55, 55, 331, 0, 0, 0, 0, 335, 333,
	68, 0, 0, 0, 0, 0, 383, 393, 0, 531,
	526, 617, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 376, 0, 369, 370, 415, 0, 459, 457, 493,
	0, 495, 0, 0, 0, 497, 475, 486, 0, 488,
	491, 0, 503, 477, 0, 0, 470, 0, 469, 491,
	499, 0, 0, 0, 0, -2, 0, 672, -2, -2,
	790, 821, 866, 860, 914, 441, 727, 729, 730, 779,
	776, 0, 763, 745, 746, 838, 0, 0, 0, 0,
	821, 793, 752, 0, 758, 759, 555, 416, 39, 0,
	265, 266, 929, 0, 269, 272, 0, 274, 931, 256,
	0, 285, 286, 320, 321, 324, 322, 325, 441, 283,
	0, 41, 42, 51, 59, 43, 49, 0, 0, 0,
	0, 504, 0, 0, 0, 73, 71, 0, 0, 0,
	401, 402, 0, 0, 288, 0, 278, 256, 246, 288,
	0, 0, 371, 372, 767, 769, 0, 494, 0, 513,
	496, 491, 487, 0, 503, 431, 484, 473, 0, 474,
	0, 503, 0, 0, 481, -2, -2, 673, 792, 0,
	441, 0, 765, -2, 0, 0, 0, 795, 0, 263,
	267, 0, 0, 294, 0, 282, 0, 328, 0, 0,
	61, 0, 337, 339, 0, 0, 0, 0, 75, 72,
	0, 0, 386, 524, 388, 0, 256, 288, 244, 256,
	0, 373, 374, 0, 0, 0, 0, 489, 482, 0,
	471, 467, 0, 478, 0, 500, 728, 782, 0, -2,
	0, 708, 757, 0, 273, 299, 0, 0, 0, 323,
	726, 290, 45, 0, 58, 0, 0, 441, 74, 70,
	0, 387, 0, 276, 256, 315, 0, 366, 770, 771,
	512, 476, 491, 0, 498, 0, 0, 0, 778, 709,
	0, 275, 295, 296, 0, 291, 292, 293, 930, 287,
	294, 60, 240, 242, 0, 524, 0, 277, 288, 503,
	468, 775, 780, 783, -2, 1067, 962, 0, 781, 268,
	297, 0, 298, 0, 0, 0, 299, 0, 385, 259,
	256, 483, 0, 785, 786, 787, 788, 789, 300, 0,
	303, 304, 0, 301, 284, 255, 257, 258, 316, 0,
	302, 305, 306, 784,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 318, 3, 324, 319, 3,
	329, 330, 322, 320, 333, 321, 331, 323, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 337, 332,
	312, 314, 313, 3, 334, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 327, 3, 328, 325, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 335, 317, 336, 315,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 316,
	57655, 326, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:779
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:785
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:791
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:910
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:920
		{
			return unimplemented(sqllex)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = nil
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = DropCascade
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = DropRestrict
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = DropDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:982
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:983
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return unimplemented(sqllex)
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:987
		{
		}
	case 62:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.str = ""
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1060
		{
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{ /* SKIP DOC */
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1386
		{
			return unimplemented(sqllex)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1400
		{ /* SKIP DOC */
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			return unimplemented(sqllex)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			return unimplemented(sqllex)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = Low
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = Normal
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = High
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			return unimplemented(sqllex)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			return unimplemented(sqllex)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1580
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1608
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1656
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1660
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1684
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1688
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1692
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1735
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1739
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1745
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1749
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1753
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1757
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1828
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1832
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = DropDefault
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1842
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2047
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2048
		{
			return unimplemented(sqllex)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2049
		{
			return unimplemented(sqllex)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2050
		{
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2056
		{
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2057
		{
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2058
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2059
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2060
		{
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2063
		{
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2066
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2069
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2072
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			return unimplemented(sqllex)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2074
		{
			return unimplemented(sqllex)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2075
		{
			return unimplemented(sqllex)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = true
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = false
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2182
		{
			return unimplemented(sqllex)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2183
		{
			return unimplemented(sqllex)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2186
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2187
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = Ascending
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = Descending
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2241
		{
			return unimplemented(sqllex)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2242
		{
			return unimplemented(sqllex)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = true
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = false
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2255
		{
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2256
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2289
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2298
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2299
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.str = ""
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.str = ""
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.str = ""
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.str = ""
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.str = ""
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.str = ""
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2421
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2422
		{
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2486
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2490
		{
			return unimplemented(sqllex)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2498
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 393:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2520
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2521
		{
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2748
		{
			return unimplemented(sqllex)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2749
		{
			return unimplemented(sqllex)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2750
		{
			return unimplemented(sqllex)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
			return unimplemented(sqllex)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2754
		{
			return unimplemented(sqllex)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2757
		{
			return unimplemented(sqllex)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2760
		{
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2761
		{
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2764
		{
			return unimplemented(sqllex)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2765
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2768
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2769
		{
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = true
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = false
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = false
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = true
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2792
		{
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2793
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2831
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2851
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2892
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2893
		{
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2951
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &From{}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2987
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3005
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3032
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 476:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3049
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = nil
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3116
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3122
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = true
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = false
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.str = astFullJoin
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.str = astLeftJoin
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.str = astRightJoin
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.str = astInnerJoin
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3234
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3320
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3333
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3334
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3348
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3357
		{
			return unimplemented(sqllex)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3429
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = nil
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3478
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3574
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3606
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3645
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3646
		{
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = year
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = month
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = day
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = hour
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = minute
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = month
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = hour
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = minute
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = minute
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = nil
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = second
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3741
		{
			return unimplemented(sqllex)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3776
		{
			return unimplemented(sqllex)
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3944
		{
			return unimplemented(sqllex)
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4010
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4183
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4236
		{
			return unimplemented(sqllex)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4237
		{
			return unimplemented(sqllex)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4260
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4276
		{
			return unimplemented(sqllex)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4277
		{
			return unimplemented(sqllex)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4281
		{
			return unimplemented(sqllex)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4298
		{
			return unimplemented(sqllex)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4299
		{
			return unimplemented(sqllex)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4300
		{
			return unimplemented(sqllex)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			return unimplemented(sqllex)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4330
		{
			return unimplemented(sqllex)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4374
		{
			return unimplemented(sqllex)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4375
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = Window(nil)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4410
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.str = ""
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4472
		{
			return unimplemented(sqllex)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4473
		{
			return unimplemented(sqllex)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4474
		{
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4477
		{
			return unimplemented(sqllex)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4478
		{
			return unimplemented(sqllex)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4484
		{
			return unimplemented(sqllex)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4485
		{
			return unimplemented(sqllex)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4486
		{
			return unimplemented(sqllex)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4487
		{
			return unimplemented(sqllex)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4488
		{
			return unimplemented(sqllex)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = Any
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = Some
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = All
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = Plus
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = Minus
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = Mult
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = Div
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = FloorDiv
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = Mod
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = Bitand
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = Bitor
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = Pow
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = Bitxor
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = LT
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = GT
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = EQ
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = LE
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = GE
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = NE
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = Like
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = NotLike
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = ILike
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = NotILike
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 860:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4853
		{
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4971
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5015
		{
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5051
		{
			return unimplemented(sqllex)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5060
		{
			return unimplemented(sqllex)
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = DNull
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5087
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.str = ""
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
