// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

//line sql.y:482
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const JSON = 57515
const JSONB = 57516
const KEY = 57517
const KEYS = 57518
const KV = 57519
const LATERAL = 57520
const LC_CTYPE = 57521
const LC_COLLATE = 57522
const LEADING = 57523
const LEAST = 57524
const LEFT = 57525
const LESS = 57526
const LEVEL = 57527
const LIKE = 57528
const LIMIT = 57529
const LIST = 57530
const LOCAL = 57531
const LOCALTIME = 57532
const LOCALTIMESTAMP = 57533
const LOW = 57534
const LSHIFT = 57535
const MATCH = 57536
const MAXVALUE = 57537
const MINUTE = 57538
const MONTH = 57539
const NAN = 57540
const NAME = 57541
const NAMES = 57542
const NATURAL = 57543
const NEXT = 57544
const NO = 57545
const NO_INDEX_JOIN = 57546
const NORMAL = 57547
const NOT = 57548
const NOTHING = 57549
const NULL = 57550
const NULLIF = 57551
const NULLS = 57552
const NUMERIC = 57553
const OF = 57554
const OFF = 57555
const OFFSET = 57556
const OID = 57557
const ON = 57558
const ONLY = 57559
const OPTIONS = 57560
const OR = 57561
const ORDER = 57562
const ORDINALITY = 57563
const OUT = 57564
const OUTER = 57565
const OVER = 57566
const OVERLAPS = 57567
const OVERLAY = 57568
const PARENT = 57569
const PARTIAL = 57570
const PARTITION = 57571
const PASSWORD = 57572
const PAUSE = 57573
const PLACING = 57574
const PLANS = 57575
const POSITION = 57576
const PRECEDING = 57577
const PRECISION = 57578
const PREPARE = 57579
const PRIMARY = 57580
const PRIORITY = 57581
const QUERIES = 57582
const QUERY = 57583
const RANGE = 57584
const READ = 57585
const REAL = 57586
const RECURSIVE = 57587
const REF = 57588
const REFERENCES = 57589
const REGCLASS = 57590
const REGPROC = 57591
const REGPROCEDURE = 57592
const REGNAMESPACE = 57593
const REGTYPE = 57594
const REMOVE_PATH = 57595
const RENAME = 57596
const REPEATABLE = 57597
const RELEASE = 57598
const RESET = 57599
const RESTORE = 57600
const RESTRICT = 57601
const RESUME = 57602
const RETURNING = 57603
const REVOKE = 57604
const RIGHT = 57605
const ROLLBACK = 57606
const ROLLUP = 57607
const ROW = 57608
const ROWS = 57609
const RSHIFT = 57610
const SAVEPOINT = 57611
const SCATTER = 57612
const SCRUB = 57613
const SEARCH = 57614
const SECOND = 57615
const SELECT = 57616
const SEQUENCE = 57617
const SEQUENCES = 57618
const SERIAL = 57619
const SERIALIZABLE = 57620
const SESSION = 57621
const SESSIONS = 57622
const SESSION_USER = 57623
const SET = 57624
const SETTING = 57625
const SETTINGS = 57626
const SHOW = 57627
const SIMILAR = 57628
const SIMPLE = 57629
const SMALLINT = 57630
const SMALLSERIAL = 57631
const SNAPSHOT = 57632
const SOME = 57633
const SPLIT = 57634
const SQL = 57635
const START = 57636
const STATUS = 57637
const STDIN = 57638
const STRICT = 57639
const STRING = 57640
const STORE = 57641
const STORING = 57642
const SUBSTRING = 57643
const SYMMETRIC = 57644
const SYSTEM = 57645
const TABLE = 57646
const TABLES = 57647
const TEMP = 57648
const TEMPLATE = 57649
const TEMPORARY = 57650
const TESTING_RANGES = 57651
const TESTING_RELOCATE = 57652
const TEXT = 57653
const THAN = 57654
const THEN = 57655
const TIME = 57656
const TIMESTAMP = 57657
const TIMESTAMPTZ = 57658
const TO = 57659
const TRAILING = 57660
const TRACE = 57661
const TRANSACTION = 57662
const TREAT = 57663
const TRIM = 57664
const TRUE = 57665
const TRUNCATE = 57666
const TYPE = 57667
const UNBOUNDED = 57668
const UNCOMMITTED = 57669
const UNION = 57670
const UNIQUE = 57671
const UNKNOWN = 57672
const UPDATE = 57673
const UPSERT = 57674
const USE = 57675
const USER = 57676
const USERS = 57677
const USING = 57678
const UUID = 57679
const VALID = 57680
const VALIDATE = 57681
const VALUE = 57682
const VALUES = 57683
const VARCHAR = 57684
const VARIADIC = 57685
const VIEW = 57686
const VARYING = 57687
const WHEN = 57688
const WHERE = 57689
const WINDOW = 57690
const WITH = 57691
const WITHIN = 57692
const WITHOUT = 57693
const WRITE = 57694
const YEAR = 57695
const ZONE = 57696
const NOT_LA = 57697
const WITH_LA = 57698
const AS_LA = 57699
const CONTAINED_BY = 57700
const HAS_SOME_KEY = 57701
const HAS_ALL_KEYS = 57702
const POSTFIXOP = 57703
const UMINUS = 57704
const HELPTOKEN = 57705

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6884

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	383, 54,
	-2, 711,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	153, 561,
	-2, 0,
	-1, 65,
	96, 711,
	157, 711,
	331, 711,
	332, 711,
	-2, 0,
	-1, 75,
	1, 673,
	216, 673,
	261, 673,
	378, 673,
	380, 673,
	382, 673,
	383, 673,
	-2, 686,
	-1, 108,
	4, 713,
	20, 713,
	21, 713,
	23, 713,
	28, 713,
	33, 713,
	34, 713,
	35, 713,
	36, 713,
	37, 713,
	38, 713,
	39, 713,
	40, 713,
	41, 713,
	42, 713,
	44, 713,
	45, 713,
	46, 713,
	47, 713,
	48, 713,
	51, 713,
	52, 713,
	53, 713,
	55, 713,
	56, 713,
	60, 713,
	61, 713,
	62, 713,
	64, 713,
	65, 713,
	66, 713,
	67, 713,
	69, 713,
	71, 713,
	72, 713,
	75, 713,
	76, 713,
	77, 713,
	85, 713,
	86, 713,
	87, 713,
	88, 713,
	89, 713,
	90, 713,
	91, 713,
	92, 713,
	94, 713,
	96, 713,
	98, 713,
	101, 713,
	102, 713,
	104, 713,
	108, 713,
	109, 713,
	110, 713,
	111, 713,
	112, 713,
	113, 713,
	114, 713,
	122, 713,
	123, 713,
	124, 713,
	125, 713,
	126, 713,
	128, 713,
	130, 713,
	135, 713,
	136, 713,
	138, 713,
	141, 713,
	142, 713,
	145, 713,
	146, 713,
	147, 713,
	148, 713,
	151, 713,
	152, 713,
	154, 713,
	157, 713,
	158, 713,
	159, 713,
	160, 713,
	161, 713,
	162, 713,
	163, 713,
	164, 713,
	166, 713,
	169, 713,
	170, 713,
	171, 713,
	173, 713,
	174, 713,
	175, 713,
	176, 713,
	177, 713,
	179, 713,
	180, 713,
	182, 713,
	184, 713,
	185, 713,
	188, 713,
	189, 713,
	192, 713,
	194, 713,
	196, 713,
	197, 713,
	198, 713,
	199, 713,
	200, 713,
	202, 713,
	203, 713,
	204, 713,
	205, 713,
	209, 713,
	210, 713,
	211, 713,
	212, 713,
	213, 713,
	215, 713,
	217, 713,
	218, 713,
	221, 713,
	222, 713,
	224, 713,
	226, 713,
	227, 713,
	228, 713,
	229, 713,
	230, 713,
	231, 713,
	233, 713,
	234, 713,
	235, 713,
	236, 713,
	237, 713,
	239, 713,
	240, 713,
	241, 713,
	242, 713,
	243, 713,
	244, 713,
	245, 713,
	246, 713,
	248, 713,
	249, 713,
	250, 713,
	251, 713,
	252, 713,
	254, 713,
	255, 713,
	256, 713,
	257, 713,
	258, 713,
	259, 713,
	260, 713,
	262, 713,
	264, 713,
	265, 713,
	266, 713,
	267, 713,
	269, 713,
	270, 713,
	271, 713,
	272, 713,
	273, 713,
	275, 713,
	276, 713,
	277, 713,
	278, 713,
	279, 713,
	280, 713,
	282, 713,
	283, 713,
	284, 713,
	285, 713,
	287, 713,
	288, 713,
	289, 713,
	290, 713,
	292, 713,
	293, 713,
	294, 713,
	295, 713,
	296, 713,
	297, 713,
	298, 713,
	299, 713,
	300, 713,
	301, 713,
	303, 713,
	305, 713,
	306, 713,
	307, 713,
	308, 713,
	309, 713,
	310, 713,
	311, 713,
	312, 713,
	314, 713,
	315, 713,
	316, 713,
	319, 713,
	320, 713,
	321, 713,
	322, 713,
	324, 713,
	325, 713,
	326, 713,
	327, 713,
	330, 713,
	331, 713,
	332, 713,
	333, 713,
	335, 713,
	337, 713,
	338, 713,
	339, 713,
	340, 713,
	341, 713,
	342, 713,
	345, 713,
	350, 713,
	351, 713,
	352, 713,
	353, 713,
	354, 713,
	-2, 0,
	-1, 125,
	1, 676,
	216, 676,
	261, 676,
	378, 676,
	380, 676,
	382, 676,
	383, 676,
	-2, 685,
	-1, 130,
	1, 610,
	169, 610,
	239, 610,
	243, 610,
	382, 610,
	383, 610,
	-2, 0,
	-1, 132,
	1, 610,
	382, 610,
	383, 610,
	-2, 0,
	-1, 133,
	1, 610,
	382, 610,
	383, 610,
	-2, 0,
	-1, 134,
	1, 614,
	382, 614,
	383, 614,
	-2, 0,
	-1, 141,
	4, 719,
	5, 719,
	6, 719,
	7, 719,
	8, 719,
	9, 719,
	20, 719,
	21, 719,
	23, 719,
	28, 719,
	29, 719,
	33, 719,
	34, 719,
	35, 719,
	36, 719,
	37, 719,
	38, 719,
	39, 719,
	40, 719,
	41, 719,
	42, 719,
	44, 719,
	45, 719,
	46, 719,
	47, 719,
	48, 719,
	49, 719,
	50, 719,
	51, 719,
	52, 719,
	53, 719,
	55, 719,
	56, 719,
	58, 719,
	60, 719,
	61, 719,
	62, 719,
	64, 719,
	65, 719,
	66, 719,
	67, 719,
	69, 719,
	71, 719,
	72, 719,
	74, 719,
	75, 719,
	76, 719,
	77, 719,
	79, 719,
	80, 719,
	81, 719,
	83, 719,
	84, 719,
	85, 719,
	86, 719,
	87, 719,
	88, 719,
	89, 719,
	90, 719,
	91, 719,
	92, 719,
	94, 719,
	96, 719,
	98, 719,
	101, 719,
	102, 719,
	104, 719,
	108, 719,
	109, 719,
	110, 719,
	111, 719,
	112, 719,
	113, 719,
	114, 719,
	115, 719,
	116, 719,
	122, 719,
	123, 719,
	124, 719,
	125, 719,
	126, 719,
	128, 719,
	130, 719,
	133, 719,
	135, 719,
	136, 719,
	138, 719,
	141, 719,
	142, 719,
	145, 719,
	146, 719,
	147, 719,
	148, 719,
	149, 719,
	151, 719,
	152, 719,
	154, 719,
	156, 719,
	157, 719,
	158, 719,
	159, 719,
	160, 719,
	161, 719,
	162, 719,
	163, 719,
	164, 719,
	166, 719,
	168, 719,
	169, 719,
	170, 719,
	171, 719,
	172, 719,
	173, 719,
	174, 719,
	175, 719,
	176, 719,
	177, 719,
	179, 719,
	180, 719,
	182, 719,
	183, 719,
	184, 719,
	185, 719,
	186, 719,
	188, 719,
	189, 719,
	192, 719,
	194, 719,
	195, 719,
	196, 719,
	197, 719,
	198, 719,
	199, 719,
	200, 719,
	201, 719,
	202, 719,
	203, 719,
	204, 719,
	205, 719,
	206, 719,
	208, 719,
	209, 719,
	210, 719,
	211, 719,
	212, 719,
	213, 719,
	215, 719,
	218, 719,
	221, 719,
	222, 719,
	223, 719,
	224, 719,
	225, 719,
	226, 719,
	227, 719,
	228, 719,
	229, 719,
	230, 719,
	231, 719,
	233, 719,
	234, 719,
	235, 719,
	236, 719,
	237, 719,
	239, 719,
	240, 719,
	241, 719,
	242, 719,
	243, 719,
	244, 719,
	245, 719,
	246, 719,
	248, 719,
	249, 719,
	250, 719,
	251, 719,
	252, 719,
	254, 719,
	255, 719,
	256, 719,
	257, 719,
	258, 719,
	259, 719,
	260, 719,
	262, 719,
	263, 719,
	264, 719,
	265, 719,
	266, 719,
	267, 719,
	269, 719,
	270, 719,
	271, 719,
	272, 719,
	273, 719,
	275, 719,
	276, 719,
	277, 719,
	278, 719,
	279, 719,
	280, 719,
	281, 719,
	282, 719,
	283, 719,
	284, 719,
	285, 719,
	286, 719,
	287, 719,
	288, 719,
	289, 719,
	290, 719,
	292, 719,
	293, 719,
	294, 719,
	295, 719,
	296, 719,
	297, 719,
	298, 719,
	299, 719,
	300, 719,
	301, 719,
	303, 719,
	305, 719,
	306, 719,
	307, 719,
	308, 719,
	309, 719,
	310, 719,
	311, 719,
	312, 719,
	314, 719,
	315, 719,
	316, 719,
	319, 719,
	320, 719,
	321, 719,
	322, 719,
	323, 719,
	324, 719,
	325, 719,
	326, 719,
	327, 719,
	330, 719,
	331, 719,
	332, 719,
	333, 719,
	334, 719,
	335, 719,
	337, 719,
	338, 719,
	339, 719,
	340, 719,
	341, 719,
	342, 719,
	345, 719,
	350, 719,
	351, 719,
	352, 719,
	353, 719,
	354, 719,
	355, 719,
	365, 719,
	370, 719,
	371, 719,
	372, 719,
	379, 719,
	385, 719,
	-2, 0,
	-1, 144,
	1, 54,
	383, 54,
	-2, 711,
	-1, 518,
	132, 1333,
	317, 1333,
	360, 1333,
	381, 1333,
	-2, 0,
	-1, 519,
	132, 1280,
	317, 1280,
	360, 1280,
	381, 1280,
	-2, 0,
	-1, 521,
	132, 1393,
	317, 1393,
	360, 1393,
	381, 1393,
	-2, 0,
	-1, 523,
	132, 1416,
	317, 1416,
	360, 1416,
	381, 1416,
	-2, 0,
	-1, 530,
	132, 1338,
	317, 1338,
	360, 1338,
	381, 1338,
	-2, 328,
	-1, 556,
	1, 406,
	378, 406,
	380, 406,
	382, 406,
	383, 406,
	-2, 0,
	-1, 557,
	1, 458,
	129, 458,
	378, 458,
	380, 458,
	382, 458,
	383, 458,
	-2, 0,
	-1, 563,
	1, 420,
	378, 420,
	380, 420,
	382, 420,
	383, 420,
	-2, 0,
	-1, 565,
	1, 424,
	378, 424,
	380, 424,
	382, 424,
	383, 424,
	-2, 0,
	-1, 568,
	1, 432,
	378, 432,
	380, 432,
	382, 432,
	383, 432,
	-2, 0,
	-1, 569,
	1, 437,
	378, 437,
	380, 437,
	382, 437,
	383, 437,
	-2, 0,
	-1, 572,
	1, 447,
	378, 447,
	380, 447,
	382, 447,
	383, 447,
	-2, 0,
	-1, 588,
	117, 721,
	129, 721,
	187, 721,
	214, 721,
	-2, 680,
	-1, 591,
	117, 720,
	129, 720,
	187, 720,
	214, 720,
	-2, 677,
	-1, 648,
	379, 1258,
	-2, 1251,
	-1, 649,
	379, 1259,
	-2, 1252,
	-1, 655,
	5, 905,
	379, 905,
	-2, 1468,
	-1, 680,
	5, 864,
	-2, 1437,
	-1, 681,
	5, 899,
	379, 899,
	-2, 1439,
	-1, 682,
	5, 874,
	-2, 1440,
	-1, 683,
	5, 873,
	-2, 1441,
	-1, 684,
	5, 899,
	379, 899,
	-2, 1444,
	-1, 685,
	5, 899,
	379, 899,
	-2, 1445,
	-1, 686,
	5, 900,
	-2, 1448,
	-1, 687,
	5, 856,
	-2, 1449,
	-1, 688,
	5, 856,
	-2, 1450,
	-1, 689,
	5, 881,
	-2, 1454,
	-1, 690,
	5, 866,
	-2, 1455,
	-1, 691,
	5, 867,
	-2, 1456,
	-1, 692,
	5, 857,
	-2, 1462,
	-1, 693,
	5, 858,
	-2, 1463,
	-1, 694,
	5, 859,
	-2, 1464,
	-1, 695,
	5, 860,
	-2, 1465,
	-1, 696,
	5, 861,
	-2, 1466,
	-1, 697,
	5, 862,
	-2, 1467,
	-1, 698,
	5, 856,
	-2, 1474,
	-1, 699,
	5, 865,
	-2, 1479,
	-1, 700,
	5, 863,
	-2, 1482,
	-1, 701,
	5, 897,
	379, 897,
	-2, 1484,
	-1, 702,
	5, 901,
	-2, 1487,
	-1, 703,
	5, 903,
	-2, 1488,
	-1, 704,
	5, 896,
	379, 896,
	-2, 1493,
	-1, 891,
	230, 709,
	-2, 554,
	-1, 895,
	216, 1255,
	-2, 0,
	-1, 930,
	1, 217,
	378, 217,
	380, 217,
	382, 217,
	383, 217,
	-2, 684,
	-1, 937,
	4, 1492,
	10, 1492,
	11, 1492,
	13, 1492,
	14, 1492,
	15, 1492,
	16, 1492,
	17, 1492,
	18, 1492,
	20, 1492,
	21, 1492,
	23, 1492,
	26, 1492,
	28, 1492,
	30, 1492,
	33, 1492,
	34, 1492,
	35, 1492,
	36, 1492,
	37, 1492,
	38, 1492,
	39, 1492,
	40, 1492,
	41, 1492,
	42, 1492,
	44, 1492,
	45, 1492,
	46, 1492,
	47, 1492,
	48, 1492,
	51, 1492,
	52, 1492,
	53, 1492,
	55, 1492,
	56, 1492,
	57, 1492,
	60, 1492,
	61, 1492,
	62, 1492,
	63, 1492,
	64, 1492,
	65, 1492,
	66, 1492,
	67, 1492,
	69, 1492,
	70, 1492,
	71, 1492,
	72, 1492,
	74, 1492,
	75, 1492,
	76, 1492,
	77, 1492,
	85, 1492,
	86, 1492,
	87, 1492,
	88, 1492,
	89, 1492,
	90, 1492,
	91, 1492,
	92, 1492,
	94, 1492,
	96, 1492,
	98, 1492,
	101, 1492,
	102, 1492,
	104, 1492,
	108, 1492,
	109, 1492,
	110, 1492,
	111, 1492,
	112, 1492,
	113, 1492,
	114, 1492,
	118, 1492,
	119, 1492,
	120, 1492,
	121, 1492,
	122, 1492,
	123, 1492,
	124, 1492,
	125, 1492,
	126, 1492,
	127, 1492,
	128, 1492,
	130, 1492,
	133, 1492,
	135, 1492,
	136, 1492,
	138, 1492,
	141, 1492,
	142, 1492,
	145, 1492,
	146, 1492,
	147, 1492,
	148, 1492,
	149, 1492,
	150, 1492,
	151, 1492,
	152, 1492,
	154, 1492,
	156, 1492,
	157, 1492,
	158, 1492,
	159, 1492,
	160, 1492,
	161, 1492,
	162, 1492,
	163, 1492,
	164, 1492,
	166, 1492,
	168, 1492,
	169, 1492,
	170, 1492,
	171, 1492,
	172, 1492,
	173, 1492,
	174, 1492,
	175, 1492,
	176, 1492,
	177, 1492,
	179, 1492,
	180, 1492,
	182, 1492,
	183, 1492,
	184, 1492,
	185, 1492,
	186, 1492,
	188, 1492,
	189, 1492,
	192, 1492,
	193, 1492,
	194, 1492,
	196, 1492,
	197, 1492,
	198, 1492,
	199, 1492,
	200, 1492,
	201, 1492,
	202, 1492,
	203, 1492,
	204, 1492,
	205, 1492,
	209, 1492,
	210, 1492,
	211, 1492,
	212, 1492,
	213, 1492,
	215, 1492,
	218, 1492,
	219, 1492,
	221, 1492,
	222, 1492,
	224, 1492,
	226, 1492,
	227, 1492,
	228, 1492,
	229, 1492,
	230, 1492,
	231, 1492,
	233, 1492,
	234, 1492,
	235, 1492,
	236, 1492,
	237, 1492,
	239, 1492,
	240, 1492,
	241, 1492,
	242, 1492,
	243, 1492,
	244, 1492,
	245, 1492,
	246, 1492,
	248, 1492,
	249, 1492,
	250, 1492,
	251, 1492,
	252, 1492,
	253, 1492,
	254, 1492,
	255, 1492,
	256, 1492,
	257, 1492,
	258, 1492,
	259, 1492,
	260, 1492,
	262, 1492,
	263, 1492,
	264, 1492,
	265, 1492,
	266, 1492,
	267, 1492,
	268, 1492,
	269, 1492,
	270, 1492,
	271, 1492,
	272, 1492,
	273, 1492,
	275, 1492,
	276, 1492,
	277, 1492,
	278, 1492,
	279, 1492,
	280, 1492,
	282, 1492,
	283, 1492,
	284, 1492,
	285, 1492,
	286, 1492,
	287, 1492,
	288, 1492,
	289, 1492,
	290, 1492,
	292, 1492,
	293, 1492,
	294, 1492,
	295, 1492,
	296, 1492,
	297, 1492,
	298, 1492,
	299, 1492,
	300, 1492,
	301, 1492,
	303, 1492,
	305, 1492,
	306, 1492,
	307, 1492,
	308, 1492,
	309, 1492,
	310, 1492,
	311, 1492,
	312, 1492,
	314, 1492,
	315, 1492,
	316, 1492,
	319, 1492,
	320, 1492,
	321, 1492,
	322, 1492,
	324, 1492,
	325, 1492,
	326, 1492,
	327, 1492,
	330, 1492,
	331, 1492,
	332, 1492,
	333, 1492,
	335, 1492,
	337, 1492,
	338, 1492,
	339, 1492,
	340, 1492,
	341, 1492,
	342, 1492,
	345, 1492,
	350, 1492,
	351, 1492,
	352, 1492,
	353, 1492,
	354, 1492,
	355, 1492,
	356, 1492,
	358, 1492,
	359, 1492,
	360, 1492,
	361, 1492,
	362, 1492,
	363, 1492,
	364, 1492,
	365, 1492,
	367, 1492,
	368, 1492,
	369, 1492,
	370, 1492,
	371, 1492,
	372, 1492,
	373, 1492,
	374, 1492,
	375, 1492,
	377, 1492,
	380, 1492,
	381, 1492,
	384, 1492,
	385, 1492,
	-2, 0,
	-1, 950,
	132, 1393,
	317, 1393,
	360, 1393,
	381, 1393,
	-2, 0,
	-1, 967,
	132, 1416,
	317, 1416,
	360, 1416,
	381, 1416,
	-2, 0,
	-1, 968,
	169, 622,
	239, 622,
	243, 622,
	-2, 316,
	-1, 1040,
	117, 720,
	129, 720,
	187, 720,
	214, 720,
	-2, 681,
	-1, 1121,
	107, 686,
	117, 686,
	129, 686,
	165, 686,
	187, 686,
	214, 686,
	220, 686,
	328, 686,
	-2, 1034,
	-1, 1131,
	379, 1235,
	-2, 1223,
	-1, 1149,
	380, 1147,
	-2, 0,
	-1, 1173,
	169, 622,
	239, 622,
	243, 622,
	-2, 617,
	-1, 1201,
	380, 1147,
	-2, 0,
	-1, 1205,
	107, 686,
	117, 686,
	129, 686,
	165, 686,
	187, 686,
	214, 686,
	220, 686,
	328, 686,
	-2, 787,
	-1, 1348,
	169, 622,
	239, 622,
	243, 622,
	-2, 318,
	-1, 1456,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 940,
	-1, 1457,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 941,
	-1, 1458,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 942,
	-1, 1459,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 943,
	-1, 1460,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 944,
	-1, 1461,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 945,
	-1, 1462,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 946,
	-1, 1463,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 947,
	-1, 1472,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 956,
	-1, 1473,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 957,
	-1, 1474,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 958,
	-1, 1477,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 963,
	-1, 1483,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 965,
	-1, 1485,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 969,
	-1, 1486,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 970,
	-1, 1487,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 971,
	-1, 1488,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 972,
	-1, 1557,
	132, 1158,
	379, 1258,
	-2, 1251,
	-1, 1558,
	132, 1159,
	-2, 1433,
	-1, 1559,
	132, 1160,
	-2, 1337,
	-1, 1560,
	132, 1161,
	-2, 1298,
	-1, 1561,
	132, 1162,
	-2, 1315,
	-1, 1562,
	132, 1163,
	-2, 1336,
	-1, 1563,
	132, 1164,
	-2, 1389,
	-1, 1639,
	1, 788,
	74, 788,
	107, 788,
	117, 788,
	129, 788,
	133, 788,
	137, 788,
	139, 788,
	156, 788,
	165, 788,
	172, 788,
	183, 788,
	187, 788,
	201, 788,
	214, 788,
	216, 788,
	220, 788,
	261, 788,
	263, 788,
	328, 788,
	336, 788,
	347, 788,
	348, 788,
	357, 788,
	378, 788,
	380, 788,
	382, 788,
	383, 788,
	384, 788,
	-2, 787,
	-1, 1787,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 964,
	-1, 1788,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 966,
	-1, 1793,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 967,
	-1, 1811,
	225, 1118,
	-2, 1120,
	-1, 2043,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 968,
	-1, 2048,
	168, 0,
	-2, 984,
	-1, 2057,
	225, 1119,
	-2, 1121,
	-1, 2099,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1011,
	-1, 2100,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1012,
	-1, 2101,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1013,
	-1, 2105,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1017,
	-1, 2106,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1018,
	-1, 2107,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1019,
	-1, 2239,
	168, 0,
	-2, 985,
	-1, 2242,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 988,
	-1, 2243,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 990,
	-1, 2363,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 989,
	-1, 2364,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 991,
	-1, 2371,
	168, 0,
	-2, 1020,
	-1, 2448,
	168, 0,
	-2, 1021,
	-1, 2529,
	36, 0,
	149, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 1436,
	-1, 2615,
	379, 1504,
	-2, 493,
}

const sqlPrivate = 57344

const sqlLast = 44478

var sqlAct = [...]int{

	649, 2597, 2611, 2334, 2333, 2612, 2192, 2537, 2595, 2528,
	2578, 2501, 2538, 1706, 2539, 2397, 780, 2022, 1685, 1245,
	2076, 184, 1714, 2527, 2453, 2344, 647, 2202, 2158, 2307,
	74, 1342, 2293, 1253, 1343, 1634, 608, 753, 2224, 1988,
	1288, 2226, 183, 883, 1684, 625, 1199, 183, 646, 592,
	2159, 2218, 2377, 1925, 642, 1689, 183, 1904, 2273, 1877,
	1182, 1203, 1688, 1781, 1643, 183, 1715, 1249, 1996, 1635,
	183, 183, 1289, 1652, 183, 600, 124, 183, 1678, 475,
	26, 1912, 1703, 2129, 460, 183, 1822, 1537, 1430, 1127,
	1512, 1435, 1876, 1777, 971, 1761, 1241, 1990, 1373, 1045,
	1513, 988, 1211, 1266, 1183, 529, 1213, 1586, 1500, 1521,
	1497, 619, 1369, 1413, 970, 1159, 1411, 1163, 457, 920,
	759, 1531, 1686, 990, 931, 1708, 910, 762, 917, 1692,
	1190, 1608, 1621, 741, 509, 1553, 183, 183, 1372, 1116,
	1046, 124, 618, 125, 183, 1414, 641, 1412, 174, 487,
	526, 126, 1173, 907, 179, 522, 1260, 639, 597, 739,
	2308, 1050, 2143, 1172, 550, 2144, 1268, 1810, 1268, 1707,
	183, 183, 183, 183, 782, 1268, 2628, 2335, 183, 183,
	2621, 2627, 2620, 2335, 2574, 2621, 2621, 2573, 1236, 2572,
	2554, 1236, 2549, 1236, 2306, 783, 1729, 871, 2548, 2545,
	596, 1200, 1729, 1236, 1061, 1062, 2005, 596, 2041, 2006,
	1101, 1102, 1103, 591, 2525, 1232, 1610, 2633, 1744, 501,
	124, 1208, 2524, 1679, 26, 2496, 1744, 1064, 606, 1737,
	1105, 1061, 1062, 2491, 2487, 2479, 2450, 2358, 1236, 2306,
	1737, 2428, 2425, 2423, 2408, 2306, 1236, 2306, 1236, 2407,
	2132, 1063, 2385, 2306, 1064, 2619, 1236, 1083, 1061, 1062,
	1679, 1091, 1092, 1093, 1101, 1102, 1103, 2382, 589, 2365,
	745, 1236, 746, 1737, 1094, 2329, 588, 1729, 1063, 1729,
	1814, 1064, 1847, 1848, 1105, 2327, 1815, 1744, 2497, 1729,
	767, 771, 777, 601, 2305, 2286, 743, 2241, 2306, 1236,
	2217, 1737, 1061, 1062, 1683, 1063, 2212, 1744, 2358, 2132,
	1683, 1083, 1086, 1087, 1088, 1089, 2139, 1609, 1080, 2033,
	2140, 1069, 1641, 1847, 1848, 1064, 1865, 1866, 1867, 2052,
	2016, 705, 2629, 1729, 1977, 1862, 1976, 1901, 2608, 2112,
	1236, 1236, 1894, 1098, 1106, 2054, 1895, 1892, 1069, 1063,
	1891, 1729, 1890, 1748, 1729, 1083, 1729, 1729, 1061, 1062,
	1236, 1514, 1977, 1534, 1729, 756, 1086, 1087, 1088, 1089,
	1736, 1821, 1780, 1759, 1737, 1069, 1862, 1269, 1728, 1269,
	1096, 1064, 1729, 1351, 1682, 1615, 1269, 1084, 1683, 1614,
	1281, 1177, 1516, 869, 1282, 952, 599, 1098, 1106, 1853,
	144, 2309, 949, 948, 947, 1063, 1370, 946, 945, 141,
	1086, 1087, 1088, 1089, 1084, 1535, 1104, 944, 943, 1069,
	942, 183, 941, 183, 183, 183, 940, 183, 141, 939,
	938, 747, 183, 744, 1096, 582, 581, 580, 183, 143,
	1853, 1084, 548, 547, 1711, 546, 545, 1090, 544, 543,
	542, 183, 183, 183, 183, 183, 1061, 1062, 143, 875,
	934, 2005, 1085, 1847, 1848, 1863, 1920, 1095, 1609, 1536,
	1533, 541, 540, 924, 539, 1069, 142, 538, 537, 1064,
	1099, 935, 183, 536, 135, 1084, 535, 1847, 1848, 1085,
	597, 136, 534, 533, 532, 142, 183, 517, 516, 515,
	1550, 1090, 1274, 1063, 1267, 784, 1863, 514, 513, 1548,
	448, 1404, 183, 447, 127, 446, 1085, 1546, 445, 444,
	429, 428, 183, 419, 418, 417, 887, 416, 889, 409,
	893, 408, 167, 127, 1099, 166, 1544, 165, 164, 163,
	1864, 162, 161, 160, 159, 1090, 1538, 158, 157, 1097,
	156, 155, 154, 934, 153, 152, 913, 913, 909, 1100,
	1085, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071,
	151, 150, 149, 1069, 935, 882, 1204, 148, 914, 147,
	1853, 1864, 146, 932, 183, 145, 1376, 986, 1074, 1072,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 983, 2596, 2601,
	1057, 953, 2599, 1097, 1853, 2544, 1075, 1076, 1082, 1081,
	1077, 1078, 1079, 1100, 2526, 1074, 1072, 1073, 1065, 1066,
	1067, 1068, 1070, 1071, 40, 141, 1532, 2511, 1285, 981,
	2506, 2445, 2268, 2426, 2351, 41, 2272, 2271, 1041, 1858,
	1856, 1857, 1849, 1850, 1851, 1852, 1854, 1855, 44, 2267,
	2266, 2259, 1742, 1979, 597, 143, 2258, 2257, 2253, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 141, 2252,
	1863, 1859, 1860, 1861, 52, 1040, 968, 965, 2251, 2250,
	1858, 1856, 1857, 1849, 1850, 1851, 1852, 1854, 1855, 2244,
	2223, 2126, 142, 880, 2121, 2120, 2119, 2062, 143, 1975,
	135, 1932, 1928, 63, 1036, 1847, 1848, 136, 1899, 1896,
	64, 1884, 482, 65, 1875, 1846, 984, 1843, 1065, 1066,
	1067, 1068, 1070, 1071, 1508, 875, 1842, 1840, 754, 1827,
	1710, 1739, 1826, 1811, 1639, 142, 1057, 1135, 1042, 183,
	1043, 183, 1202, 135, 589, 1864, 67, 1056, 2618, 1201,
	136, 1128, 588, 1119, 2622, 2606, 1053, 1054, 2586, 2585,
	1252, 2078, 2516, 2515, 183, 183, 2514, 1058, 2482, 1371,
	1776, 2474, 2473, 127, 2464, 2462, 2440, 2439, 1775, 2438,
	2394, 2373, 2359, 2338, 1181, 2326, 2312, 2264, 2200, 2198,
	2197, 936, 1188, 2195, 597, 1131, 2167, 2350, 2166, 2147,
	1161, 1162, 2135, 2047, 1965, 1959, 1165, 1061, 1062, 1945,
	1186, 2020, 1944, 1930, 1900, 1874, 1168, 1836, 1067, 1068,
	1070, 1071, 1853, 1849, 1850, 1851, 1852, 1854, 1855, 1835,
	1064, 1832, 68, 1807, 124, 1802, 707, 1509, 2456, 1918,
	1502, 1164, 1167, 1626, 1858, 1856, 1857, 1849, 1850, 1851,
	1852, 1854, 1855, 1598, 1063, 1542, 1128, 1244, 128, 70,
	755, 71, 1180, 1171, 1157, 1061, 1062, 1156, 1155, 934,
	183, 1154, 1153, 1176, 1152, 141, 782, 1198, 1549, 1945,
	1763, 1151, 183, 481, 936, 1150, 104, 1547, 1064, 1149,
	935, 1206, 1237, 1174, 2357, 1545, 183, 783, 1148, 1147,
	1178, 1146, 183, 1234, 183, 143, 183, 1145, 1144, 1143,
	183, 1142, 1063, 1251, 1543, 1141, 1140, 1139, 1132, 1120,
	1119, 964, 956, 928, 1069, 2246, 1243, 2222, 2142, 2138,
	1813, 1627, 1202, 2018, 1286, 1117, 1847, 1848, 1747, 1991,
	881, 2361, 142, 2360, 2354, 2145, 980, 2007, 1221, 1169,
	135, 183, 183, 1679, 1170, 1204, 1039, 136, 934, 1968,
	183, 1962, 1958, 183, 1257, 1034, 1898, 1897, 1786, 1061,
	1062, 1408, 977, 1137, 1357, 2023, 1250, 2378, 1707, 935,
	127, 1746, 2079, 1522, 782, 1123, 1160, 1028, 1818, 2604,
	1084, 2603, 1064, 183, 1214, 2001, 1215, 2154, 183, 2509,
	1377, 1733, 2486, 183, 183, 783, 183, 706, 183, 2570,
	183, 1295, 183, 2569, 2320, 1571, 1063, 1415, 1271, 2030,
	734, 1273, 909, 183, 1235, 1276, 1749, 1029, 2419, 183,
	183, 595, 1366, 2418, 1214, 1645, 1215, 1645, 934, 2416,
	736, 1214, 732, 1215, 2178, 168, 1644, 730, 421, 727,
	1653, 1020, 2415, 2186, 2183, 1259, 2151, 2150, 488, 935,
	183, 1831, 1262, 1830, 782, 1085, 1829, 1851, 1852, 1854,
	1855, 434, 1405, 1828, 2616, 1216, 1789, 1732, 1674, 1740,
	1444, 493, 1670, 1667, 1484, 783, 1069, 489, 1175, 594,
	868, 2332, 1602, 124, 1601, 1445, 1704, 1401, 1378, 2190,
	1283, 1499, 1284, 1402, 1037, 755, 965, 1222, 1344, 1358,
	587, 1134, 584, 1345, 496, 1216, 1295, 1295, 1374, 490,
	1348, 1499, 1216, 2191, 1362, 1972, 2485, 1656, 1239, 1219,
	171, 978, 435, 426, 1436, 1443, 1392, 1361, 1360, 1403,
	1370, 1367, 492, 449, 596, 1381, 1417, 1220, 1382, 586,
	597, 1385, 1084, 2399, 1386, 597, 1387, 1060, 1388, 1506,
	1389, 2522, 1390, 587, 1504, 1072, 1073, 1065, 1066, 1067,
	1068, 1070, 1071, 654, 979, 1243, 183, 963, 183, 1396,
	1398, 183, 2019, 1263, 1280, 1538, 1416, 1409, 2561, 1410,
	1998, 2493, 183, 2035, 589, 1014, 172, 589, 589, 1607,
	936, 782, 1426, 2169, 183, 1427, 1428, 784, 183, 1202,
	1434, 183, 1967, 1534, 2588, 183, 2494, 1629, 1519, 183,
	1961, 2072, 783, 1223, 1999, 183, 1364, 1085, 453, 1517,
	1071, 1522, 183, 782, 1655, 1015, 1225, 183, 597, 1061,
	1062, 2467, 2475, 2031, 2569, 183, 1778, 1779, 1400, 1676,
	1581, 1027, 593, 183, 783, 1510, 410, 1507, 1158, 491,
	993, 1628, 1064, 1268, 183, 1535, 183, 1956, 183, 1998,
	1646, 183, 1699, 183, 1212, 183, 183, 2560, 183, 183,
	1657, 1659, 1564, 934, 2029, 173, 1063, 183, 1038, 936,
	1279, 2598, 2596, 2176, 452, 1642, 2476, 1727, 1538, 1336,
	1664, 1855, 1632, 2369, 935, 2335, 437, 436, 1672, 2422,
	1604, 1605, 1217, 1349, 610, 784, 494, 1033, 1613, 1536,
	1533, 422, 1365, 1619, 2541, 1654, 1346, 1623, 1624, 1065,
	1066, 1067, 1068, 1070, 1071, 1206, 2581, 1799, 728, 1662,
	1709, 506, 1709, 1114, 1649, 1668, 709, 169, 2034, 1622,
	420, 1675, 1217, 1797, 1495, 738, 1069, 124, 737, 1217,
	728, 485, 603, 124, 575, 729, 1834, 728, 1019, 936,
	1493, 1791, 1735, 1721, 1189, 427, 913, 782, 913, 1226,
	423, 2400, 605, 2170, 2559, 183, 1638, 170, 1713, 2069,
	424, 1498, 1230, 1760, 1724, 784, 1538, 1722, 783, 1723,
	1730, 183, 183, 183, 1725, 183, 932, 1731, 1229, 1734,
	2036, 484, 488, 1618, 585, 604, 495, 1741, 1024, 2542,
	596, 1743, 1084, 1481, 411, 2589, 2540, 1380, 1505, 2233,
	1227, 485, 2301, 1193, 183, 493, 1794, 985, 1059, 575,
	708, 489, 1165, 2070, 1168, 451, 1795, 576, 1228, 612,
	1800, 2568, 1752, 1489, 1162, 1161, 1196, 605, 962, 1847,
	1848, 1490, 1001, 1491, 1754, 1750, 2566, 1496, 2343, 124,
	1049, 2302, 1191, 490, 1269, 454, 1532, 1701, 2543, 974,
	974, 959, 488, 1194, 575, 450, 1123, 1755, 1025, 1847,
	1848, 2579, 1048, 951, 1524, 412, 492, 1085, 994, 1753,
	2410, 1192, 605, 1371, 1368, 493, 2262, 1556, 1556, 1569,
	1971, 489, 1764, 1589, 2409, 2392, 1914, 1593, 1594, 1596,
	1538, 1766, 576, 651, 1772, 1768, 1771, 2459, 2319, 1356,
	969, 2594, 784, 597, 1774, 2318, 1479, 1482, 995, 2153,
	2108, 992, 1941, 490, 1026, 1422, 1937, 2580, 1702, 975,
	975, 1258, 2316, 976, 976, 1247, 1246, 443, 1926, 2068,
	577, 1796, 1047, 1195, 784, 2502, 492, 576, 1798, 1395,
	2582, 1352, 885, 1478, 1820, 2607, 1853, 438, 1492, 2203,
	1354, 884, 2345, 2393, 2297, 1494, 2298, 1048, 1947, 1049,
	1946, 1792, 1790, 1355, 1784, 176, 876, 878, 1073, 1065,
	1066, 1067, 1068, 1070, 1071, 1915, 1853, 597, 1617, 1616,
	504, 183, 782, 491, 936, 1806, 2300, 183, 183, 2263,
	974, 183, 1902, 594, 1423, 2303, 183, 1908, 1907, 183,
	1817, 895, 1927, 783, 2193, 577, 1913, 183, 2336, 602,
	1193, 578, 1863, 183, 183, 183, 2593, 2109, 2317, 183,
	906, 1909, 183, 2110, 1970, 1048, 2390, 1047, 183, 183,
	183, 183, 183, 1196, 1922, 2315, 2274, 1044, 183, 498,
	494, 183, 1863, 1480, 579, 183, 1002, 2372, 2130, 1620,
	577, 1541, 954, 491, 183, 2261, 2189, 2391, 958, 1921,
	1194, 1881, 1882, 1883, 183, 1917, 183, 974, 183, 183,
	904, 1931, 183, 1023, 1938, 1295, 183, 2299, 784, 1878,
	1012, 183, 2046, 183, 1903, 610, 578, 1864, 1973, 1841,
	183, 480, 34, 1942, 1801, 1047, 726, 1978, 1745, 1980,
	1681, 479, 33, 183, 934, 478, 30, 477, 80, 1673,
	494, 597, 1295, 1957, 1666, 934, 183, 1864, 1933, 579,
	3, 1964, 1049, 873, 1032, 935, 1031, 1010, 957, 1879,
	1942, 578, 874, 1044, 1018, 1955, 935, 975, 2015, 1769,
	1195, 976, 2301, 870, 1008, 2294, 1981, 1006, 503, 2024,
	1985, 1393, 2003, 476, 79, 183, 2292, 1384, 439, 1138,
	1540, 2296, 1295, 1330, 579, 1004, 1847, 1848, 1109, 1110,
	1111, 1112, 1113, 1982, 1983, 2536, 1994, 2000, 1122, 1989,
	2017, 2302, 2499, 473, 22, 905, 2008, 1233, 1130, 1849,
	1850, 1851, 1852, 1854, 1855, 2290, 2009, 2010, 2014, 2011,
	2012, 440, 1906, 1022, 2295, 183, 2174, 497, 1910, 1911,
	1011, 2025, 1916, 2049, 2028, 2026, 2027, 1856, 1857, 1849,
	1850, 1851, 1852, 1854, 1855, 474, 23, 1295, 2032, 731,
	733, 441, 2172, 442, 1805, 903, 34, 2037, 2152, 2039,
	2059, 1808, 1987, 2064, 2065, 2066, 33, 472, 28, 1705,
	30, 998, 80, 471, 20, 469, 19, 1009, 1824, 1825,
	902, 1017, 1698, 1295, 1295, 765, 470, 18, 1330, 1330,
	1189, 2055, 1295, 1295, 1007, 2058, 1697, 1005, 2053, 1278,
	1277, 1436, 2083, 1853, 1275, 1272, 183, 2071, 2073, 2074,
	1436, 2088, 183, 2080, 2297, 1003, 2298, 1270, 79, 1231,
	2082, 183, 183, 1184, 1184, 1295, 2114, 2085, 1873, 2087,
	610, 464, 15, 784, 1224, 1589, 1589, 1589, 1218, 2148,
	1886, 465, 16, 2118, 463, 14, 2300, 2141, 22, 1193,
	468, 12, 462, 10, 1329, 2303, 467, 7, 466, 6,
	2115, 2433, 2164, 461, 5, 2113, 124, 750, 183, 1863,
	183, 2570, 1196, 2131, 1051, 2128, 1782, 2188, 183, 2356,
	2146, 934, 2133, 2134, 2163, 2355, 1375, 751, 1191, 2219,
	23, 2149, 2199, 2435, 2179, 483, 183, 183, 2184, 1194,
	1645, 997, 935, 2196, 2187, 1661, 1645, 2156, 2213, 1660,
	901, 2177, 28, 2211, 183, 1658, 1677, 1192, 20, 1669,
	19, 1665, 1406, 1407, 183, 782, 183, 183, 1770, 2469,
	2194, 18, 782, 2309, 2216, 996, 2447, 2299, 1061, 1062,
	2421, 2230, 1783, 2275, 1864, 2173, 783, 2175, 2236, 2209,
	2206, 1052, 2207, 783, 2215, 936, 2208, 1055, 2220, 1329,
	1329, 1064, 2214, 1671, 752, 1663, 936, 2498, 505, 183,
	1061, 1062, 2341, 1712, 1700, 1696, 15, 2204, 2240, 1195,
	1606, 1347, 2205, 1287, 2577, 1063, 16, 2592, 2384, 14,
	1847, 1848, 1295, 2165, 2235, 12, 2280, 10, 1061, 1062,
	2221, 7, 2127, 6, 1757, 1756, 2180, 2075, 5, 1757,
	2180, 2021, 1923, 1893, 1758, 1603, 2180, 1063, 1600, 1599,
	1294, 1530, 1125, 183, 2248, 2067, 183, 2137, 1984, 1135,
	1133, 1030, 1021, 1016, 1013, 2260, 782, 183, 183, 999,
	961, 183, 183, 183, 2278, 1857, 1849, 1850, 1851, 1852,
	1854, 1855, 2282, 610, 610, 1350, 2285, 783, 183, 583,
	2398, 486, 1383, 183, 1000, 183, 1919, 183, 183, 183,
	1625, 2492, 2284, 2254, 183, 2279, 2314, 183, 1833, 2452,
	934, 2310, 2277, 2164, 2368, 2313, 1539, 2281, 183, 183,
	1136, 56, 2161, 628, 2291, 934, 2155, 1691, 2289, 1690,
	785, 935, 1359, 650, 1555, 2163, 2339, 1437, 725, 652,
	1292, 2331, 2164, 653, 2337, 1293, 935, 2164, 1906, 2342,
	1166, 640, 1419, 1290, 1424, 1294, 1294, 929, 1716, 1363,
	1431, 1503, 1520, 2340, 2163, 1816, 1129, 2122, 620, 2163,
	1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 2353, 1483, 632, 1485, 1486, 1487, 1488, 2348,
	631, 183, 2352, 183, 1518, 782, 183, 955, 1924, 2367,
	2362, 2346, 1511, 1332, 183, 2374, 2347, 1997, 2349, 1122,
	782, 2388, 1421, 1773, 1418, 1993, 783, 2171, 425, 1295,
	1844, 2182, 936, 927, 2165, 1578, 2403, 2185, 1551, 1552,
	2381, 783, 1568, 2164, 1580, 1582, 1587, 1590, 1591, 1592,
	1570, 2383, 1566, 1035, 183, 1187, 2386, 934, 1115, 1717,
	982, 183, 1243, 2165, 2276, 2163, 2004, 2401, 2165, 183,
	183, 934, 934, 1738, 1179, 2164, 784, 2424, 935, 2434,
	1429, 2402, 749, 784, 2404, 1295, 748, 2605, 2420, 183,
	1353, 1751, 935, 935, 183, 1108, 1107, 2163, 2432, 735,
	2461, 183, 2436, 2412, 973, 2443, 2444, 1331, 2442, 972,
	2441, 1248, 1940, 2587, 2463, 2468, 2168, 2508, 1332, 1332,
	140, 137, 139, 138, 2449, 1969, 183, 183, 2446, 2455,
	2457, 2427, 83, 183, 2458, 2413, 2414, 32, 1295, 31,
	103, 934, 102, 2480, 101, 2465, 183, 100, 99, 2478,
	934, 934, 98, 2430, 2481, 97, 96, 95, 2431, 94,
	93, 92, 935, 91, 90, 89, 2466, 88, 87, 86,
	2484, 935, 935, 183, 2165, 183, 85, 2472, 183, 597,
	782, 2489, 2490, 527, 524, 1188, 82, 784, 81, 29,
	1291, 25, 107, 2504, 24, 2517, 2510, 1330, 2519, 78,
	2180, 783, 77, 27, 17, 2518, 2165, 11, 183, 1425,
	21, 2523, 1331, 1331, 61, 62, 60, 59, 58, 2164,
	2521, 2520, 13, 1803, 1804, 183, 183, 183, 2533, 2535,
	54, 936, 2534, 183, 1330, 2553, 53, 2546, 51, 2505,
	50, 2163, 2483, 2550, 2551, 2552, 936, 183, 49, 2558,
	48, 47, 2556, 2557, 9, 2555, 106, 45, 8, 43,
	42, 105, 2567, 2565, 119, 116, 118, 115, 2571, 117,
	121, 120, 113, 111, 112, 114, 110, 624, 109, 2576,
	2575, 122, 39, 38, 1330, 37, 36, 35, 2, 2584,
	1, 2583, 2590, 0, 0, 1291, 1291, 2591, 0, 1870,
	1871, 1872, 0, 0, 41, 0, 0, 782, 1572, 782,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 2609,
	2610, 0, 0, 2600, 413, 2602, 0, 2617, 783, 0,
	783, 2623, 0, 0, 0, 2626, 784, 2625, 2624, 0,
	0, 2632, 2630, 2631, 0, 2634, 0, 2380, 0, 1330,
	2165, 784, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1329, 0,
	0, 0, 0, 1787, 1788, 0, 0, 0, 0, 1793,
	0, 482, 0, 0, 2406, 1330, 1330, 0, 936, 634,
	0, 0, 0, 0, 1330, 1330, 0, 0, 2417, 0,
	0, 0, 936, 936, 0, 1329, 0, 0, 0, 0,
	0, 1812, 0, 0, 0, 67, 0, 1819, 0, 0,
	1823, 760, 0, 0, 0, 0, 0, 1330, 0, 0,
	0, 180, 0, 0, 0, 0, 414, 1837, 0, 0,
	0, 0, 0, 0, 0, 430, 0, 769, 773, 0,
	779, 0, 0, 0, 455, 1329, 0, 0, 0, 499,
	180, 0, 0, 507, 0, 0, 512, 0, 0, 0,
	0, 1122, 936, 0, 531, 0, 0, 0, 1587, 1587,
	1587, 936, 936, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 0, 1184, 0, 0, 0, 0, 610,
	0, 784, 0, 0, 0, 0, 2044, 2045, 0, 2495,
	1329, 0, 0, 0, 0, 742, 742, 128, 70, 0,
	71, 0, 0, 414, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 2512, 2513, 0, 0, 0,
	0, 0, 481, 0, 0, 104, 1329, 1329, 0, 414,
	414, 775, 414, 0, 0, 1329, 1329, 180, 872, 0,
	0, 1294, 0, 0, 143, 2089, 2090, 2091, 2092, 2093,
	2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103,
	2104, 2105, 2106, 2107, 1330, 2111, 0, 0, 1329, 0,
	0, 0, 1995, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 1294, 0, 0, 2013, 0, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 784, 0,
	784, 610, 610, 629, 75, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 610, 0, 0, 1572, 1572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2038, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 2042, 0, 0, 2043, 0, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2048, 0, 0, 0,
	0, 0, 0, 0, 0, 2056, 0, 1332, 0, 75,
	0, 0, 0, 2060, 0, 773, 2013, 0, 0, 0,
	0, 0, 1294, 1294, 0, 0, 0, 0, 0, 0,
	779, 1294, 1294, 1572, 1572, 1572, 2084, 0, 0, 0,
	2086, 0, 0, 0, 1332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1294, 1329, 0, 0, 590, 0,
	0, 598, 0, 2116, 2117, 0, 0, 0, 0, 0,
	0, 0, 2123, 2124, 2125, 0, 0, 761, 75, 0,
	0, 0, 0, 0, 1332, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 2136,
	531, 1330, 531, 891, 531, 0, 896, 0, 0, 0,
	0, 899, 0, 0, 0, 0, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 2157,
	531, 531, 414, 921, 872, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	0, 773, 0, 0, 0, 0, 0, 1330, 0, 0,
	0, 531, 0, 0, 0, 40, 0, 0, 0, 0,
	0, 0, 0, 0, 1291, 531, 41, 0, 1331, 0,
	0, 0, 0, 1184, 0, 1332, 1332, 0, 0, 44,
	0, 960, 610, 0, 1332, 1332, 0, 0, 0, 0,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	1330, 1291, 0, 0, 0, 52, 0, 0, 0, 0,
	0, 1294, 0, 0, 0, 0, 0, 1332, 0, 0,
	0, 2239, 0, 0, 0, 2242, 2243, 0, 0, 2245,
	1572, 1572, 0, 1331, 63, 0, 2247, 0, 2249, 0,
	0, 64, 0, 482, 65, 0, 0, 0, 0, 0,
	0, 1291, 0, 414, 2256, 0, 0, 0, 0, 0,
	0, 0, 1329, 0, 0, 0, 0, 2371, 0, 1331,
	1331, 0, 0, 0, 0, 0, 0, 67, 1331, 1331,
	0, 0, 0, 0, 0, 0, 0, 2265, 0, 1572,
	1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
	1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 2395, 1572,
	0, 1331, 0, 0, 0, 0, 1291, 0, 1329, 0,
	0, 760, 1209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2311, 549, 0,
	575, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1291, 1291, 0, 0, 0, 0, 554, 0,
	0, 1291, 1291, 68, 0, 0, 0, 0, 0, 0,
	552, 1329, 0, 0, 0, 0, 0, 0, 2448, 0,
	0, 0, 0, 598, 1332, 0, 0, 0, 0, 128,
	70, 553, 71, 0, 1291, 0, 555, 0, 0, 0,
	0, 0, 0, 0, 561, 562, 141, 0, 512, 571,
	742, 1391, 2363, 2364, 481, 0, 0, 104, 0, 0,
	0, 0, 0, 576, 556, 0, 0, 0, 1294, 0,
	0, 0, 0, 414, 414, 0, 143, 0, 0, 1242,
	0, 0, 0, 2376, 0, 0, 574, 0, 0, 2379,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 773,
	0, 1261, 0, 1261, 0, 1847, 1848, 0, 1865, 1866,
	1867, 557, 0, 142, 0, 0, 0, 0, 1331, 0,
	0, 135, 0, 0, 1294, 0, 0, 0, 136, 558,
	559, 0, 0, 2411, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1847, 1848, 565, 1865, 1866,
	1867, 127, 560, 567, 0, 0, 0, 0, 1862, 0,
	0, 2238, 0, 0, 590, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 577, 1294, 0, 180,
	0, 0, 0, 0, 0, 1118, 0, 1121, 0, 0,
	0, 414, 0, 0, 1126, 0, 0, 0, 1862, 0,
	0, 1291, 0, 0, 0, 1256, 0, 0, 0, 2460,
	0, 414, 0, 414, 0, 414, 563, 0, 0, 1264,
	0, 0, 1853, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 0, 0, 0, 1869, 0, 0, 0, 0,
	0, 0, 0, 610, 0, 551, 568, 578, 0, 0,
	531, 180, 1853, 1868, 0, 0, 0, 0, 0, 180,
	0, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 0, 0, 0, 573, 0, 0, 1863, 0,
	579, 0, 0, 0, 0, 566, 570, 1332, 0, 0,
	0, 0, 531, 1868, 0, 0, 0, 531, 2532, 2532,
	0, 572, 180, 531, 0, 531, 0, 531, 0, 531,
	0, 531, 75, 0, 2547, 0, 0, 1205, 1863, 0,
	0, 0, 1394, 0, 0, 1331, 0, 0, 531, 531,
	0, 1572, 0, 0, 2532, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1864, 0, 0, 0, 0, 0, 531,
	0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 1572, 0, 0, 0, 0, 0, 1094, 760,
	0, 1331, 2532, 0, 0, 1064, 0, 0, 1105, 0,
	0, 0, 0, 1864, 0, 760, 0, 0, 1640, 0,
	0, 0, 0, 0, 0, 0, 773, 0, 1291, 1063,
	0, 2613, 773, 0, 0, 1083, 0, 0, 0, 779,
	0, 1197, 1080, 2613, 0, 0, 2613, 2613, 0, 0,
	0, 0, 0, 0, 1331, 0, 0, 40, 0, 0,
	0, 0, 1572, 1859, 1860, 1861, 0, 0, 41, 0,
	0, 1718, 1858, 1856, 1857, 1849, 1850, 1851, 1852, 1854,
	1855, 44, 779, 779, 1291, 0, 0, 0, 0, 0,
	1086, 1087, 1088, 1089, 0, 512, 0, 742, 0, 1069,
	872, 0, 0, 1859, 1860, 1861, 0, 52, 0, 0,
	0, 414, 1858, 1856, 1857, 1849, 1850, 1851, 1852, 1854,
	1855, 1098, 1106, 1637, 0, 0, 0, 414, 0, 458,
	414, 0, 0, 0, 1650, 0, 63, 1291, 414, 0,
	1104, 0, 0, 64, 414, 482, 65, 0, 0, 0,
	40, 414, 0, 0, 0, 0, 1680, 0, 1096, 0,
	0, 41, 0, 0, 1687, 1084, 0, 0, 0, 0,
	0, 0, 872, 0, 44, 0, 0, 0, 0, 67,
	0, 0, 0, 414, 0, 1720, 0, 531, 0, 0,
	531, 75, 531, 0, 414, 414, 0, 1726, 872, 0,
	52, 0, 0, 0, 0, 0, 1650, 0, 1765, 779,
	1767, 0, 773, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 1090, 0, 590, 590, 63,
	0, 0, 0, 0, 0, 0, 64, 0, 482, 65,
	1085, 1785, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 0, 0,
	0, 0, 67, 40, 0, 0, 0, 0, 0, 0,
	1501, 0, 0, 0, 41, 0, 0, 0, 0, 0,
	0, 128, 70, 598, 71, 0, 0, 44, 1121, 0,
	0, 0, 0, 0, 1762, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 481, 0, 0, 104,
	414, 414, 414, 52, 414, 0, 0, 1097, 0, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 143, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0,
	0, 0, 63, 414, 0, 0, 0, 0, 68, 64,
	0, 482, 65, 0, 0, 761, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 0, 0, 0,
	0, 1205, 0, 135, 128, 70, 0, 71, 0, 0,
	136, 0, 0, 0, 75, 67, 0, 0, 0, 0,
	0, 141, 75, 1847, 1848, 0, 1865, 1866, 1867, 481,
	0, 0, 104, 127, 0, 0, 0, 0, 760, 2237,
	0, 0, 0, 0, 760, 760, 0, 0, 760, 0,
	0, 143, 0, 0, 75, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1934, 0, 0, 0, 0, 75, 1862, 0, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 1960, 135, 0, 0, 0,
	0, 68, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 1974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 459, 128, 70, 1986,
	71, 0, 0, 0, 0, 0, 0, 0, 1242, 0,
	1853, 0, 0, 0, 141, 0, 0, 1242, 0, 0,
	414, 0, 481, 0, 0, 104, 414, 414, 0, 0,
	414, 0, 0, 0, 0, 1637, 0, 0, 1637, 0,
	0, 0, 0, 0, 143, 0, 1929, 0, 0, 0,
	0, 1868, 414, 1935, 1936, 0, 0, 75, 1650, 0,
	0, 1943, 0, 0, 0, 0, 0, 1948, 1949, 1951,
	1953, 1954, 0, 0, 0, 0, 1863, 414, 0, 0,
	1963, 142, 2040, 0, 1966, 0, 0, 0, 0, 135,
	0, 0, 0, 414, 0, 0, 136, 0, 0, 0,
	0, 0, 0, 1256, 0, 1256, 0, 531, 531, 0,
	0, 414, 0, 0, 0, 1992, 0, 0, 0, 127,
	414, 0, 2002, 0, 0, 0, 0, 0, 0, 414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1762, 0, 0, 0, 1501, 0, 0, 0,
	0, 1864, 0, 0, 0, 1762, 1061, 1062, 0, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 1121, 0, 0, 0,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 414, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 760, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1121, 1859, 1860, 1861, 2077, 0, 0, 0, 0, 0,
	1858, 1856, 1857, 1849, 1850, 1851, 1852, 1854, 1855, 0,
	0, 0, 0, 0, 1086, 1087, 1088, 1089, 0, 0,
	0, 0, 0, 1069, 761, 0, 0, 0, 0, 0,
	761, 761, 0, 0, 761, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 1106, 0, 0, 0,
	0, 0, 0, 1718, 760, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 0, 75, 0, 0,
	0, 1637, 1096, 0, 2232, 75, 0, 0, 0, 1084,
	872, 1637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2160, 0, 0, 0, 0,
	75, 0, 0, 0, 75, 1095, 0, 0, 2181, 0,
	0, 0, 2181, 0, 598, 0, 0, 0, 2181, 0,
	0, 0, 0, 0, 0, 0, 0, 1650, 0, 1256,
	0, 0, 0, 0, 0, 0, 0, 2201, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 414, 414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	760, 0, 1099, 2227, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2229, 0, 2231, 414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2323, 0, 0, 0, 0, 0,
	0, 2328, 0, 0, 0, 0, 0, 0, 2255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078,
	1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 0, 0, 0, 0, 0, 0, 0, 0,
	1889, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 414, 0, 0, 872, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1637, 872, 0, 0,
	2287, 2288, 1650, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2160, 872, 0, 761,
	0, 0, 2321, 0, 2322, 0, 414, 2324, 2325, 0,
	0, 0, 0, 414, 0, 0, 2330, 0, 0, 0,
	0, 2396, 0, 0, 0, 2160, 0, 872, 1687, 0,
	2160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 2429, 0, 0, 0, 1064, 0, 0, 1105, 0,
	1847, 1848, 0, 1865, 1866, 1867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2051, 0, 0, 1063,
	761, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 1847, 1848, 0, 1865, 1866,
	1867, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1650, 2050, 2387, 1862, 0, 2389, 0, 0, 0, 0,
	0, 0, 0, 414, 0, 0, 2160, 0, 0, 0,
	2477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 1087, 1088, 1089, 0, 0, 0, 0, 1862, 1069,
	0, 0, 2181, 0, 0, 0, 0, 0, 2160, 0,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	872, 1098, 1106, 0, 0, 2507, 0, 1853, 2227, 2227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 2454, 0,
	0, 0, 0, 1637, 0, 0, 761, 0, 1096, 0,
	1256, 0, 1853, 0, 0, 1084, 0, 0, 1868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1718, 0, 0, 0, 0, 2470, 2471, 0, 0, 0,
	0, 1095, 414, 1863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1868, 0, 2488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 1863, 0,
	0, 0, 2503, 0, 872, 0, 75, 414, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2160, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 0, 0, 2454, 1864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 872, 872, 0, 0, 0,
	0, 0, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1864, 0, 0, 2564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1097, 0, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0,
	0, 0, 0, 0, 0, 0, 1888, 0, 1859, 1860,
	1861, 0, 0, 0, 0, 75, 0, 1858, 1856, 1857,
	1849, 1850, 1851, 1852, 1854, 1855, 0, 0, 2437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1859, 1860, 1861, 781, 0, 0, 0,
	0, 0, 1858, 1856, 1857, 1849, 1850, 1851, 1852, 1854,
	1855, 0, 185, 186, 787, 187, 788, 789, 790, 791,
	349, 792, 793, 794, 795, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 796, 192, 356, 357, 193,
	194, 797, 798, 358, 359, 360, 799, 195, 361, 800,
	786, 801, 196, 197, 198, 0, 200, 201, 202, 199,
	802, 203, 1121, 204, 205, 803, 710, 206, 207, 208,
	804, 805, 807, 806, 808, 809, 810, 209, 210, 415,
	211, 362, 212, 363, 364, 811, 213, 812, 214, 813,
	215, 814, 815, 216, 217, 816, 218, 817, 0, 818,
	365, 219, 221, 220, 222, 366, 367, 819, 711, 820,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 821, 226, 822, 823, 712, 824, 227, 371, 825,
	372, 826, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 714, 827, 375, 235, 828, 232, 829, 713, 233,
	376, 234, 377, 378, 379, 380, 381, 830, 382, 831,
	715, 236, 237, 238, 716, 383, 384, 239, 240, 241,
	832, 243, 242, 833, 385, 717, 244, 245, 718, 834,
	246, 247, 835, 836, 248, 0, 249, 719, 250, 251,
	253, 386, 252, 720, 254, 255, 257, 256, 837, 838,
	839, 387, 258, 388, 259, 260, 840, 261, 841, 842,
	262, 843, 844, 263, 389, 721, 264, 722, 390, 265,
	266, 267, 268, 269, 845, 270, 391, 271, 392, 272,
	846, 273, 274, 275, 276, 277, 393, 278, 279, 847,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 848, 292, 723, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 849, 305, 306, 395,
	304, 307, 308, 850, 309, 296, 297, 310, 724, 311,
	396, 397, 312, 851, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 852, 320, 853, 321, 322, 323,
	324, 325, 326, 327, 328, 854, 400, 401, 402, 855,
	856, 329, 330, 403, 404, 857, 331, 332, 333, 334,
	858, 859, 335, 336, 337, 338, 860, 339, 861, 405,
	340, 341, 342, 406, 407, 862, 863, 343, 864, 865,
	866, 867, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 781, 0, 0, 0, 0, 0, 1630,
	0, 0, 0, 0, 0, 0, 0, 0, 1631, 185,
	186, 787, 187, 788, 789, 790, 791, 349, 792, 793,
	794, 795, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 796, 192, 356, 357, 193, 194, 797, 798,
	358, 359, 360, 799, 195, 361, 800, 786, 801, 196,
	197, 198, 0, 200, 201, 202, 199, 802, 203, 0,
	204, 205, 803, 710, 206, 207, 208, 804, 805, 807,
	806, 808, 809, 810, 209, 210, 415, 211, 362, 212,
	363, 364, 811, 213, 812, 214, 813, 215, 814, 815,
	216, 217, 816, 218, 817, 0, 818, 365, 219, 221,
	220, 222, 366, 367, 819, 711, 820, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 821, 226,
	822, 823, 712, 824, 227, 371, 825, 372, 826, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 714, 827,
	375, 235, 828, 232, 829, 713, 233, 376, 234, 377,
	378, 379, 380, 381, 830, 382, 831, 715, 236, 237,
	238, 716, 383, 384, 239, 240, 241, 832, 243, 242,
	833, 385, 717, 244, 245, 718, 834, 246, 247, 835,
	836, 248, 0, 249, 719, 250, 251, 253, 386, 252,
	720, 254, 255, 257, 256, 837, 838, 839, 387, 258,
	388, 259, 260, 840, 261, 841, 842, 262, 843, 844,
	263, 389, 721, 264, 722, 390, 265, 266, 267, 268,
	269, 845, 270, 391, 271, 392, 272, 846, 273, 274,
	275, 276, 277, 393, 278, 279, 847, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	848, 292, 723, 293, 294, 394, 295, 0, 299, 300,
	301, 302, 303, 849, 305, 306, 395, 304, 307, 308,
	850, 309, 296, 297, 310, 724, 311, 396, 397, 312,
	851, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	399, 852, 320, 853, 321, 322, 323, 324, 325, 326,
	327, 328, 854, 400, 401, 402, 855, 856, 329, 330,
	403, 404, 857, 331, 332, 333, 334, 858, 859, 335,
	336, 337, 338, 860, 339, 861, 405, 340, 341, 342,
	406, 407, 862, 863, 343, 864, 865, 866, 867, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 781, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2283, 185, 186, 787,
	187, 788, 789, 790, 791, 349, 792, 793, 794, 795,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	796, 192, 356, 357, 193, 194, 797, 798, 358, 359,
	360, 799, 195, 361, 800, 786, 801, 196, 197, 198,
	0, 200, 201, 202, 199, 802, 203, 0, 204, 205,
	803, 710, 206, 207, 208, 804, 805, 807, 806, 808,
	809, 810, 209, 210, 415, 211, 362, 212, 363, 364,
	811, 213, 812, 214, 813, 215, 814, 815, 216, 217,
	816, 218, 817, 0, 818, 365, 219, 221, 220, 222,
	366, 367, 819, 711, 820, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 821, 226, 822, 823,
	712, 824, 227, 371, 825, 372, 826, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 714, 827, 375, 235,
	828, 232, 829, 713, 233, 376, 234, 377, 378, 379,
	380, 381, 830, 382, 831, 715, 236, 237, 238, 716,
	383, 384, 239, 240, 241, 832, 243, 242, 833, 385,
	717, 244, 245, 718, 834, 246, 247, 835, 836, 248,
	0, 249, 719, 250, 251, 253, 386, 252, 720, 254,
	255, 257, 256, 837, 838, 839, 387, 258, 388, 259,
	260, 840, 261, 841, 842, 262, 843, 844, 263, 389,
	721, 264, 722, 390, 265, 266, 267, 268, 269, 845,
	270, 391, 271, 392, 272, 846, 273, 274, 275, 276,
	277, 393, 278, 279, 847, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 848, 292,
	723, 293, 294, 394, 295, 0, 299, 300, 301, 302,
	303, 849, 305, 306, 395, 304, 307, 308, 850, 309,
	296, 297, 310, 724, 311, 396, 397, 312, 851, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 399, 852,
	320, 853, 321, 322, 323, 324, 325, 326, 327, 328,
	854, 400, 401, 402, 855, 856, 329, 330, 403, 404,
	857, 331, 332, 333, 334, 858, 859, 335, 336, 337,
	338, 860, 339, 861, 405, 340, 341, 342, 406, 407,
	862, 863, 343, 864, 865, 866, 867, 344, 345, 346,
	347, 348, 0, 0, 781, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1238,
	185, 186, 787, 187, 788, 789, 790, 791, 349, 792,
	793, 794, 795, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 796, 192, 356, 357, 193, 194, 797,
	798, 358, 359, 360, 799, 195, 361, 800, 786, 801,
	196, 197, 198, 0, 200, 201, 202, 199, 802, 203,
	0, 204, 205, 803, 710, 206, 207, 208, 804, 805,
	807, 806, 808, 809, 810, 209, 210, 415, 211, 362,
	212, 363, 364, 811, 213, 812, 214, 813, 215, 814,
	815, 216, 217, 816, 218, 817, 0, 818, 365, 219,
	221, 220, 222, 366, 367, 819, 711, 820, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 821,
	226, 822, 823, 712, 824, 227, 371, 825, 372, 826,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 714,
	827, 375, 235, 828, 232, 829, 713, 233, 376, 234,
	377, 378, 379, 380, 381, 830, 382, 831, 715, 236,
	237, 238, 716, 383, 384, 239, 240, 241, 832, 243,
	242, 833, 385, 717, 244, 245, 718, 834, 246, 247,
	835, 836, 248, 0, 249, 719, 250, 251, 253, 386,
	252, 720, 254, 255, 257, 256, 837, 838, 839, 387,
	258, 388, 259, 260, 840, 261, 841, 842, 262, 843,
	844, 263, 389, 721, 264, 722, 390, 265, 266, 267,
	268, 269, 845, 270, 391, 271, 392, 272, 846, 273,
	274, 275, 276, 277, 393, 278, 279, 847, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 848, 292, 723, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 849, 305, 306, 395, 304, 307,
	308, 850, 309, 296, 297, 310, 724, 311, 396, 397,
	312, 851, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 852, 320, 853, 321, 322, 323, 324, 325,
	326, 327, 328, 854, 400, 401, 402, 855, 856, 329,
	330, 403, 404, 857, 331, 332, 333, 334, 858, 859,
	335, 336, 337, 338, 860, 339, 861, 405, 340, 341,
	342, 406, 407, 862, 863, 343, 864, 865, 866, 867,
	344, 345, 346, 347, 348, 1529, 0, 648, 637, 638,
	635, 636, 627, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 1526, 187, 0, 0, 0,
	0, 665, 630, 0, 0, 0, 188, 189, 190, 350,
	680, 352, 681, 191, 682, 683, 0, 192, 356, 357,
	193, 194, 633, 664, 684, 685, 360, 0, 195, 676,
	0, 656, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 710, 206, 207,
	208, 0, 657, 658, 660, 0, 659, 661, 209, 210,
	415, 211, 686, 212, 687, 688, 0, 213, 0, 214,
	0, 215, 1527, 0, 679, 217, 0, 218, 0, 0,
	0, 621, 219, 221, 220, 222, 666, 667, 644, 711,
	0, 0, 0, 0, 0, 223, 224, 689, 690, 691,
	0, 225, 0, 226, 0, 0, 712, 0, 227, 677,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	673, 675, 714, 0, 375, 235, 0, 232, 0, 713,
	233, 692, 234, 693, 694, 695, 696, 697, 0, 655,
	0, 715, 236, 237, 238, 716, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 678, 717, 244, 245, 718,
	0, 246, 247, 0, 0, 248, 0, 249, 719, 250,
	251, 253, 386, 252, 720, 254, 255, 257, 256, 616,
	0, 645, 674, 258, 698, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 721, 264, 722, 668,
	265, 266, 267, 268, 269, 0, 270, 669, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 699, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 723, 293, 294, 622,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 662, 309, 296, 297, 310, 724,
	311, 700, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 701, 316, 317, 670, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 702, 703,
	0, 0, 329, 330, 671, 672, 643, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 663, 339, 0,
	405, 340, 341, 342, 406, 704, 1525, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 617, 0,
	648, 637, 638, 635, 636, 627, 0, 0, 615, 0,
	0, 0, 0, 613, 614, 1528, 185, 186, 0, 187,
	0, 0, 623, 1523, 665, 630, 0, 0, 626, 188,
	189, 190, 350, 680, 352, 681, 191, 682, 683, 0,
	192, 356, 357, 193, 194, 633, 664, 684, 685, 360,
	0, 195, 676, 0, 656, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	710, 206, 207, 208, 0, 657, 658, 660, 0, 659,
	661, 209, 210, 415, 211, 686, 212, 687, 688, 611,
	213, 0, 214, 0, 215, 0, 0, 679, 217, 0,
	218, 0, 0, 0, 621, 219, 221, 220, 222, 666,
	667, 644, 711, 0, 0, 0, 0, 0, 223, 224,
	689, 690, 691, 0, 225, 0, 226, 0, 0, 712,
	0, 227, 677, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 673, 675, 714, 0, 375, 235, 0,
	232, 0, 713, 233, 692, 234, 693, 694, 695, 696,
	697, 0, 655, 0, 715, 236, 237, 238, 716, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 678, 717,
	244, 245, 718, 0, 246, 247, 0, 0, 248, 0,
	249, 719, 250, 251, 253, 386, 252, 720, 254, 255,
	257, 256, 616, 0, 645, 674, 258, 698, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 721,
	264, 722, 668, 265, 266, 267, 268, 269, 0, 270,
	669, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	699, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 723,
	293, 294, 622, 295, 0, 299, 300, 301, 302, 303,
	141, 305, 306, 395, 304, 307, 308, 662, 309, 296,
	297, 310, 724, 311, 700, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 701, 316, 317, 670, 0, 320,
	143, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 702, 703, 0, 0, 329, 330, 671, 672, 643,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	663, 339, 0, 405, 340, 341, 342, 937, 704, 0,
	0, 343, 0, 0, 0, 135, 344, 345, 346, 347,
	348, 617, 136, 599, 0, 648, 637, 638, 635, 636,
	627, 615, 0, 0, 0, 0, 613, 614, 0, 0,
	0, 185, 186, 0, 187, 1124, 0, 0, 0, 665,
	630, 626, 0, 0, 188, 189, 190, 350, 680, 352,
	681, 191, 682, 683, 0, 192, 356, 357, 193, 194,
	633, 664, 684, 685, 360, 0, 195, 676, 0, 656,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 710, 206, 207, 208, 0,
	657, 658, 660, 0, 659, 661, 209, 210, 415, 211,
	686, 212, 687, 688, 0, 213, 0, 214, 0, 215,
	0, 0, 679, 217, 0, 218, 0, 0, 0, 621,
	219, 221, 220, 222, 666, 667, 644, 711, 0, 0,
	0, 0, 0, 223, 224, 689, 690, 691, 0, 225,
	0, 226, 0, 0, 712, 0, 227, 677, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 673, 675,
	714, 0, 375, 235, 0, 232, 0, 713, 233, 692,
	234, 693, 694, 695, 696, 697, 0, 655, 0, 715,
	236, 237, 238, 716, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 678, 717, 244, 245, 718, 0, 246,
	247, 0, 0, 248, 0, 249, 719, 250, 251, 253,
	386, 252, 720, 254, 255, 257, 256, 616, 0, 645,
	674, 258, 698, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 721, 264, 722, 668, 265, 266,
	267, 268, 269, 0, 270, 669, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 699, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 723, 293, 294, 622, 295, 0,
	299, 300, 301, 302, 303, 141, 305, 306, 395, 304,
	307, 308, 662, 309, 296, 297, 310, 724, 311, 700,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 701,
	316, 317, 670, 0, 320, 143, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 702, 703, 0, 0,
	329, 330, 671, 672, 643, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 663, 339, 0, 405, 340,
	341, 342, 937, 704, 0, 0, 343, 0, 0, 0,
	135, 344, 345, 346, 347, 348, 617, 136, 648, 637,
	638, 635, 636, 627, 0, 0, 615, 0, 0, 0,
	0, 613, 614, 0, 185, 186, 0, 187, 0, 0,
	1124, 0, 665, 630, 0, 0, 626, 188, 189, 190,
	350, 680, 352, 681, 191, 682, 683, 0, 192, 356,
	357, 193, 194, 633, 664, 684, 685, 360, 0, 195,
	676, 0, 656, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 710, 206,
	207, 208, 0, 657, 658, 660, 0, 659, 661, 209,
	210, 415, 211, 686, 212, 687, 688, 0, 213, 0,
	214, 0, 215, 0, 0, 679, 217, 0, 218, 0,
	0, 0, 621, 219, 221, 220, 222, 666, 667, 644,
	711, 0, 0, 0, 0, 0, 223, 224, 689, 690,
	691, 0, 225, 0, 226, 0, 0, 712, 0, 227,
	677, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 673, 675, 714, 0, 375, 235, 0, 232, 0,
	713, 233, 692, 234, 693, 694, 695, 696, 697, 0,
	655, 0, 715, 236, 237, 238, 716, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 678, 717, 244, 245,
	718, 0, 246, 247, 0, 0, 248, 0, 249, 719,
	250, 251, 253, 386, 252, 720, 254, 255, 257, 256,
	616, 0, 645, 674, 258, 698, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 721, 264, 722,
	668, 265, 266, 267, 268, 269, 0, 270, 669, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 699, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 723, 293, 294,
	622, 295, 0, 299, 300, 301, 302, 303, 141, 305,
	306, 395, 304, 307, 308, 662, 309, 296, 297, 310,
	724, 311, 700, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 701, 316, 317, 670, 0, 320, 143, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 702,
	703, 0, 0, 329, 330, 671, 672, 643, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 663, 339,
	0, 405, 340, 341, 342, 937, 704, 0, 0, 343,
	0, 0, 0, 135, 344, 345, 346, 347, 348, 617,
	136, 648, 637, 638, 635, 636, 627, 0, 0, 615,
	0, 0, 0, 0, 613, 614, 0, 185, 186, 0,
	187, 0, 0, 1124, 0, 665, 630, 0, 0, 626,
	188, 189, 190, 350, 680, 352, 681, 191, 682, 683,
	1583, 192, 356, 357, 193, 194, 633, 664, 684, 685,
	360, 0, 195, 676, 0, 656, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 710, 206, 207, 208, 0, 657, 658, 660, 0,
	659, 661, 209, 210, 415, 211, 686, 212, 687, 688,
	0, 213, 0, 214, 0, 215, 0, 0, 679, 217,
	0, 218, 0, 0, 0, 621, 219, 221, 220, 222,
	666, 667, 644, 711, 0, 0, 0, 0, 0, 223,
	224, 689, 690, 691, 0, 225, 0, 226, 0, 1588,
	712, 0, 227, 677, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 673, 675, 714, 0, 375, 235,
	0, 232, 0, 713, 233, 692, 234, 693, 694, 695,
	696, 697, 0, 655, 0, 715, 236, 237, 238, 716,
	383, 384, 239, 240, 241, 0, 243, 242, 1584, 678,
	717, 244, 245, 718, 0, 246, 247, 0, 0, 248,
	0, 249, 719, 250, 251, 253, 386, 252, 720, 254,
	255, 257, 256, 616, 0, 645, 674, 258, 698, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	721, 264, 722, 668, 265, 266, 267, 268, 269, 0,
	270, 669, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 699, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	723, 293, 294, 622, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 662, 309,
	296, 297, 310, 724, 311, 700, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 701, 316, 317, 670, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 702, 703, 0, 1585, 329, 330, 671, 672,
	643, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 663, 339, 0, 405, 340, 341, 342, 406, 704,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 617, 607, 0, 648, 637, 638, 635, 636,
	627, 0, 615, 0, 0, 0, 0, 613, 614, 0,
	0, 185, 186, 0, 187, 0, 623, 0, 0, 665,
	630, 0, 626, 0, 188, 189, 190, 350, 680, 352,
	681, 191, 682, 683, 0, 192, 356, 357, 193, 194,
	633, 664, 684, 685, 360, 0, 195, 676, 0, 656,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 710, 206, 207, 208, 0,
	657, 658, 660, 0, 659, 661, 209, 210, 415, 211,
	686, 212, 687, 688, 611, 213, 0, 214, 0, 215,
	0, 0, 679, 217, 0, 218, 0, 0, 0, 621,
	219, 221, 220, 222, 666, 667, 644, 711, 0, 0,
	0, 0, 0, 223, 224, 689, 690, 691, 0, 225,
	0, 226, 0, 0, 712, 0, 227, 677, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 673, 675,
	714, 0, 375, 235, 0, 232, 0, 713, 233, 692,
	234, 693, 694, 695, 696, 697, 0, 655, 0, 715,
	236, 237, 238, 716, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 678, 717, 244, 245, 718, 0, 246,
	247, 0, 0, 248, 0, 249, 719, 250, 251, 253,
	386, 252, 720, 254, 255, 257, 256, 616, 0, 645,
	674, 258, 698, 259, 260, 0, 261, 609, 0, 262,
	0, 0, 263, 389, 721, 264, 722, 668, 265, 266,
	267, 268, 269, 0, 270, 669, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 699, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 723, 293, 294, 622, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 662, 309, 296, 297, 310, 724, 311, 700,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 701,
	316, 317, 670, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 702, 703, 0, 0,
	329, 330, 671, 672, 643, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 663, 339, 0, 405, 340,
	341, 342, 406, 704, 0, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 617, 0, 648, 637,
	638, 635, 636, 627, 0, 0, 615, 0, 0, 0,
	0, 613, 614, 0, 185, 186, 0, 187, 0, 0,
	623, 0, 665, 630, 0, 0, 626, 188, 189, 190,
	350, 680, 352, 681, 191, 682, 683, 0, 192, 356,
	357, 193, 194, 633, 664, 684, 685, 360, 0, 195,
	676, 0, 656, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 710, 206,
	207, 208, 0, 657, 658, 660, 0, 659, 661, 209,
	210, 415, 211, 686, 212, 687, 688, 0, 213, 0,
	214, 0, 215, 0, 0, 679, 217, 0, 218, 0,
	0, 0, 621, 219, 221, 220, 222, 666, 667, 644,
	711, 0, 0, 0, 0, 0, 223, 224, 689, 690,
	691, 0, 225, 0, 226, 0, 0, 712, 0, 227,
	677, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 673, 675, 714, 0, 375, 235, 0, 232, 0,
	713, 233, 692, 234, 693, 694, 695, 696, 697, 0,
	655, 0, 715, 236, 237, 238, 716, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 678, 717, 244, 245,
	718, 0, 246, 247, 0, 0, 248, 0, 249, 719,
	250, 251, 253, 386, 252, 720, 254, 255, 257, 256,
	616, 2210, 645, 674, 258, 698, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 721, 264, 722,
	668, 265, 266, 267, 268, 269, 0, 270, 669, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 699, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 723, 293, 294,
	622, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 662, 309, 296, 297, 310,
	724, 311, 700, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 701, 316, 317, 670, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 702,
	703, 0, 0, 329, 330, 671, 672, 643, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 663, 339,
	0, 405, 340, 341, 342, 406, 704, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 617,
	0, 648, 637, 638, 635, 636, 627, 0, 0, 615,
	0, 0, 0, 0, 613, 614, 1185, 185, 186, 0,
	187, 0, 0, 623, 0, 665, 630, 0, 0, 626,
	188, 189, 190, 350, 680, 352, 681, 191, 682, 683,
	0, 192, 356, 357, 193, 194, 633, 664, 684, 685,
	360, 0, 195, 676, 0, 656, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 710, 206, 207, 208, 0, 657, 658, 660, 0,
	659, 661, 209, 210, 415, 211, 686, 212, 687, 688,
	0, 213, 0, 214, 0, 215, 0, 0, 679, 217,
	0, 218, 0, 0, 0, 621, 219, 221, 220, 222,
	666, 667, 644, 711, 0, 0, 0, 0, 0, 223,
	224, 689, 690, 691, 0, 225, 0, 226, 0, 0,
	712, 0, 227, 677, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 673, 675, 714, 0, 375, 235,
	1433, 232, 0, 713, 233, 692, 234, 693, 694, 695,
	696, 697, 0, 655, 0, 715, 236, 237, 238, 716,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 678,
	717, 244, 245, 718, 0, 246, 247, 0, 0, 248,
	0, 249, 719, 250, 251, 253, 386, 252, 720, 254,
	255, 257, 256, 616, 0, 645, 674, 258, 698, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	721, 264, 722, 668, 265, 266, 267, 268, 269, 0,
	270, 669, 271, 392, 272, 1432, 273, 274, 275, 276,
	277, 699, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	723, 293, 294, 622, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 662, 309,
	296, 297, 310, 724, 311, 700, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 701, 316, 317, 670, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 702, 703, 0, 0, 329, 330, 671, 672,
	643, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 663, 339, 0, 405, 340, 341, 342, 406, 704,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 617, 0, 648, 637, 638, 635, 636, 627,
	0, 0, 615, 0, 0, 0, 0, 613, 614, 0,
	185, 186, 0, 187, 0, 0, 623, 0, 665, 630,
	0, 0, 626, 188, 189, 190, 350, 680, 352, 681,
	191, 682, 683, 0, 192, 356, 357, 193, 194, 633,
	664, 684, 685, 360, 0, 195, 676, 0, 656, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 710, 206, 207, 208, 0, 657,
	658, 660, 0, 659, 661, 209, 210, 415, 211, 686,
	212, 687, 688, 611, 213, 0, 214, 0, 215, 0,
	0, 679, 217, 0, 218, 0, 0, 0, 621, 219,
	221, 220, 222, 666, 667, 644, 711, 0, 0, 0,
	0, 0, 223, 224, 689, 690, 691, 0, 225, 0,
	226, 0, 0, 712, 0, 227, 677, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 673, 675, 714,
	0, 375, 235, 0, 232, 0, 713, 233, 692, 234,
	693, 694, 695, 696, 697, 0, 655, 0, 715, 236,
	237, 238, 716, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 678, 717, 244, 245, 718, 0, 246, 247,
	0, 0, 248, 0, 249, 719, 250, 251, 253, 386,
	252, 720, 254, 255, 257, 256, 616, 0, 645, 674,
	258, 698, 259, 260, 0, 261, 609, 0, 262, 0,
	0, 263, 389, 721, 264, 722, 668, 265, 266, 267,
	268, 269, 0, 270, 669, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 699, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 723, 293, 294, 622, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 662, 309, 296, 297, 310, 724, 311, 700, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 701, 316,
	317, 670, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 702, 703, 0, 0, 329,
	330, 671, 672, 643, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 663, 339, 0, 405, 340, 341,
	342, 406, 704, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 617, 0, 648, 637, 638,
	635, 636, 627, 0, 0, 615, 0, 0, 0, 0,
	613, 614, 0, 185, 186, 0, 187, 0, 0, 623,
	0, 665, 630, 0, 0, 626, 188, 189, 190, 350,
	680, 352, 681, 191, 682, 683, 0, 192, 356, 357,
	193, 194, 633, 664, 684, 685, 360, 0, 195, 676,
	0, 656, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 710, 206, 207,
	208, 0, 657, 658, 660, 0, 659, 661, 209, 210,
	415, 211, 686, 212, 687, 688, 2614, 213, 0, 214,
	0, 215, 0, 0, 679, 217, 0, 218, 0, 0,
	0, 621, 219, 221, 220, 222, 666, 667, 644, 711,
	0, 0, 0, 0, 0, 223, 224, 689, 690, 691,
	0, 225, 0, 226, 0, 0, 712, 0, 227, 677,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	673, 675, 714, 0, 375, 235, 0, 232, 0, 713,
	233, 692, 234, 693, 694, 695, 696, 697, 0, 655,
	0, 715, 236, 237, 238, 716, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 678, 717, 244, 245, 718,
	0, 246, 247, 0, 0, 248, 0, 249, 2615, 250,
	251, 253, 386, 252, 720, 254, 255, 257, 256, 616,
	0, 645, 674, 258, 698, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 721, 264, 722, 668,
	265, 266, 267, 268, 269, 0, 270, 669, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 699, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 723, 293, 294, 622,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 662, 309, 296, 297, 310, 724,
	311, 700, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 701, 316, 317, 670, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 702, 703,
	0, 0, 329, 330, 671, 672, 643, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 663, 339, 0,
	405, 340, 341, 342, 406, 704, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 617, 0,
	648, 637, 638, 635, 636, 627, 0, 0, 615, 0,
	0, 0, 0, 613, 614, 0, 185, 186, 0, 187,
	0, 0, 623, 0, 665, 630, 0, 0, 626, 188,
	189, 190, 350, 680, 352, 681, 191, 682, 683, 0,
	192, 356, 357, 193, 194, 633, 664, 684, 685, 360,
	0, 195, 676, 0, 656, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	710, 206, 207, 208, 0, 657, 658, 660, 0, 659,
	661, 209, 210, 415, 211, 686, 212, 687, 688, 611,
	213, 0, 214, 0, 215, 0, 0, 679, 217, 0,
	218, 0, 0, 0, 621, 219, 221, 220, 222, 666,
	667, 644, 711, 0, 0, 0, 0, 0, 223, 224,
	689, 690, 691, 0, 225, 0, 226, 0, 0, 712,
	0, 227, 677, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 673, 675, 714, 0, 375, 235, 0,
	232, 0, 713, 233, 692, 234, 693, 694, 695, 696,
	697, 0, 655, 0, 715, 236, 237, 238, 716, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 678, 717,
	244, 245, 718, 0, 246, 247, 0, 0, 248, 0,
	249, 719, 250, 251, 253, 386, 252, 720, 254, 255,
	257, 256, 616, 0, 645, 674, 258, 698, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 721,
	264, 722, 668, 265, 266, 267, 268, 269, 0, 270,
	669, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	699, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 723,
	293, 294, 622, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 662, 309, 296,
	297, 310, 724, 311, 700, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 701, 316, 317, 670, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 702, 703, 0, 0, 329, 330, 671, 672, 643,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	663, 339, 0, 405, 340, 341, 342, 406, 704, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 617, 0, 648, 637, 638, 635, 636, 627, 0,
	0, 615, 0, 0, 0, 0, 613, 614, 0, 185,
	186, 0, 187, 0, 0, 623, 0, 665, 630, 0,
	0, 626, 188, 189, 190, 350, 680, 352, 681, 191,
	682, 683, 0, 192, 356, 357, 193, 194, 633, 664,
	684, 685, 360, 0, 195, 676, 0, 656, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 710, 206, 207, 208, 0, 657, 658,
	660, 0, 659, 661, 209, 210, 415, 211, 686, 212,
	687, 688, 0, 213, 0, 214, 0, 215, 0, 0,
	679, 217, 0, 218, 0, 0, 0, 621, 219, 221,
	220, 222, 666, 667, 644, 711, 0, 0, 0, 0,
	0, 223, 224, 689, 690, 691, 0, 225, 0, 226,
	0, 0, 712, 0, 227, 677, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 673, 675, 714, 0,
	375, 235, 0, 232, 0, 713, 233, 692, 234, 693,
	694, 695, 696, 697, 0, 655, 0, 715, 236, 237,
	238, 716, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 678, 717, 244, 245, 718, 0, 246, 247, 0,
	0, 248, 0, 249, 719, 250, 251, 253, 386, 252,
	720, 254, 255, 257, 256, 616, 0, 645, 674, 258,
	698, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 721, 264, 722, 668, 265, 266, 267, 268,
	269, 0, 270, 669, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 699, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 723, 293, 294, 622, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	662, 309, 296, 297, 310, 724, 311, 700, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 701, 316, 317,
	670, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 702, 703, 0, 0, 329, 330,
	671, 672, 643, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 663, 339, 0, 405, 340, 341, 342,
	406, 704, 2063, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 617, 0, 648, 637, 638, 635,
	636, 627, 0, 0, 615, 0, 0, 0, 0, 613,
	614, 0, 185, 186, 0, 187, 0, 0, 623, 0,
	665, 630, 0, 0, 626, 188, 189, 190, 350, 680,
	352, 681, 191, 682, 683, 0, 192, 356, 357, 193,
	194, 633, 664, 684, 685, 360, 0, 195, 676, 0,
	656, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 657, 658, 660, 0, 659, 661, 209, 210, 415,
	211, 686, 212, 687, 688, 0, 213, 0, 214, 0,
	215, 0, 0, 679, 217, 0, 218, 0, 0, 0,
	621, 219, 221, 220, 222, 666, 667, 644, 711, 0,
	0, 0, 0, 0, 223, 224, 689, 690, 691, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 677, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 673,
	675, 714, 0, 375, 235, 0, 232, 0, 713, 233,
	692, 234, 693, 694, 695, 696, 697, 0, 655, 0,
	715, 236, 237, 238, 716, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 678, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 250, 251,
	253, 386, 252, 720, 254, 255, 257, 256, 616, 0,
	645, 674, 258, 698, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 721, 264, 722, 668, 265,
	266, 267, 268, 269, 0, 270, 669, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 699, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 622, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 662, 309, 296, 297, 310, 724, 311,
	700, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	701, 316, 317, 670, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 702, 703, 0,
	0, 329, 330, 671, 672, 643, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 663, 339, 0, 405,
	340, 341, 342, 406, 704, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 617, 0, 648,
	637, 638, 635, 636, 627, 0, 0, 615, 0, 0,
	0, 0, 613, 614, 1185, 185, 186, 0, 187, 0,
	0, 623, 0, 665, 630, 0, 0, 626, 188, 189,
	190, 350, 680, 352, 681, 191, 682, 683, 0, 192,
	356, 357, 193, 194, 633, 664, 684, 685, 360, 0,
	195, 676, 0, 656, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 710,
	206, 207, 208, 0, 657, 658, 660, 0, 659, 661,
	209, 210, 415, 211, 686, 212, 687, 688, 0, 213,
	0, 214, 0, 215, 0, 0, 679, 217, 0, 218,
	0, 0, 0, 621, 219, 221, 220, 222, 666, 667,
	644, 711, 0, 0, 0, 0, 0, 223, 224, 689,
	690, 691, 0, 225, 0, 226, 0, 1588, 712, 0,
	227, 677, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 673, 675, 714, 0, 375, 235, 0, 232,
	0, 713, 233, 692, 234, 693, 694, 695, 696, 697,
	0, 655, 0, 715, 236, 237, 238, 716, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 678, 717, 244,
	245, 718, 0, 246, 247, 0, 0, 248, 0, 249,
	719, 250, 251, 253, 386, 252, 720, 254, 255, 257,
	256, 616, 0, 645, 674, 258, 698, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 721, 264,
	722, 668, 265, 266, 267, 268, 269, 0, 270, 669,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 699,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 723, 293,
	294, 622, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 662, 309, 296, 297,
	310, 724, 311, 700, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 701, 316, 317, 670, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	702, 703, 0, 0, 329, 330, 671, 672, 643, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 663,
	339, 0, 405, 340, 341, 342, 406, 704, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	617, 1633, 0, 648, 637, 638, 635, 636, 627, 0,
	615, 0, 0, 0, 0, 613, 614, 0, 0, 185,
	186, 0, 187, 0, 623, 0, 0, 665, 630, 0,
	626, 0, 188, 189, 190, 350, 680, 352, 681, 191,
	682, 683, 0, 192, 356, 357, 193, 194, 633, 664,
	684, 685, 360, 0, 195, 676, 0, 656, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 710, 206, 207, 208, 0, 657, 658,
	660, 0, 659, 661, 209, 210, 415, 211, 686, 212,
	687, 688, 0, 213, 0, 214, 0, 215, 0, 0,
	679, 217, 0, 218, 0, 0, 0, 621, 219, 221,
	220, 222, 666, 667, 644, 711, 0, 0, 0, 0,
	0, 223, 224, 689, 690, 691, 0, 225, 0, 226,
	0, 0, 712, 0, 227, 677, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 673, 675, 714, 0,
	375, 235, 0, 232, 0, 713, 233, 692, 234, 693,
	694, 695, 696, 697, 0, 655, 0, 715, 236, 237,
	238, 716, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 678, 717, 244, 245, 718, 0, 246, 247, 0,
	0, 248, 0, 249, 719, 250, 251, 253, 386, 252,
	720, 254, 255, 257, 256, 616, 0, 645, 674, 258,
	698, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 721, 264, 722, 668, 265, 266, 267, 268,
	269, 0, 270, 669, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 699, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 723, 293, 294, 622, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	662, 309, 296, 297, 310, 724, 311, 700, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 701, 316, 317,
	670, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 702, 703, 0, 0, 329, 330,
	671, 672, 643, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 663, 339, 0, 405, 340, 341, 342,
	406, 704, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 617, 1597, 0, 648, 637, 638,
	635, 636, 627, 0, 615, 0, 0, 0, 0, 613,
	614, 0, 0, 185, 186, 0, 187, 0, 623, 0,
	0, 665, 630, 0, 626, 0, 188, 189, 190, 350,
	680, 352, 681, 191, 682, 683, 0, 192, 356, 357,
	193, 194, 633, 664, 684, 685, 360, 0, 195, 676,
	0, 656, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 710, 206, 207,
	208, 0, 657, 658, 660, 0, 659, 661, 209, 210,
	415, 211, 686, 212, 687, 688, 0, 213, 0, 214,
	0, 215, 0, 0, 679, 217, 0, 218, 0, 0,
	0, 621, 219, 221, 220, 222, 666, 667, 644, 711,
	0, 0, 0, 0, 0, 223, 224, 689, 690, 691,
	0, 225, 0, 226, 0, 0, 712, 0, 227, 677,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	673, 675, 714, 0, 375, 235, 0, 232, 0, 713,
	233, 692, 234, 693, 694, 695, 696, 697, 0, 655,
	0, 715, 236, 237, 238, 716, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 678, 717, 244, 245, 718,
	0, 246, 247, 0, 0, 248, 0, 249, 719, 250,
	251, 253, 386, 252, 720, 254, 255, 257, 256, 616,
	0, 645, 674, 258, 698, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 721, 264, 722, 668,
	265, 266, 267, 268, 269, 0, 270, 669, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 699, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 723, 293, 294, 622,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 662, 309, 296, 297, 310, 724,
	311, 700, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 701, 316, 317, 670, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 702, 703,
	0, 0, 329, 330, 671, 672, 643, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 663, 339, 0,
	405, 340, 341, 342, 406, 704, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 617, 1595,
	0, 648, 637, 638, 635, 636, 627, 0, 615, 0,
	0, 0, 0, 613, 614, 0, 0, 185, 186, 0,
	187, 0, 623, 0, 0, 665, 630, 0, 626, 0,
	188, 189, 190, 350, 680, 352, 681, 191, 682, 683,
	0, 192, 356, 357, 193, 194, 633, 664, 684, 685,
	360, 0, 195, 676, 0, 656, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 710, 206, 207, 208, 0, 657, 658, 660, 0,
	659, 661, 209, 210, 415, 211, 686, 212, 687, 688,
	0, 213, 0, 214, 0, 215, 0, 0, 679, 217,
	0, 218, 0, 0, 0, 621, 219, 221, 220, 222,
	666, 667, 644, 711, 0, 0, 0, 0, 0, 223,
	224, 689, 690, 691, 0, 225, 0, 226, 0, 0,
	712, 0, 227, 677, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 673, 675, 714, 0, 375, 235,
	0, 232, 0, 713, 233, 692, 234, 693, 694, 695,
	696, 697, 0, 655, 0, 715, 236, 237, 238, 716,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 678,
	717, 244, 245, 718, 0, 246, 247, 0, 0, 248,
	0, 249, 719, 250, 251, 253, 386, 252, 720, 254,
	255, 257, 256, 616, 0, 645, 674, 258, 698, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	721, 264, 722, 668, 265, 266, 267, 268, 269, 0,
	270, 669, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 699, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	723, 293, 294, 622, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 662, 309,
	296, 297, 310, 724, 311, 700, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 701, 316, 317, 670, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 702, 703, 0, 0, 329, 330, 671, 672,
	643, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 663, 339, 0, 405, 340, 341, 342, 406, 704,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 617, 1579, 0, 648, 637, 638, 635, 636,
	627, 0, 615, 0, 0, 0, 0, 613, 614, 0,
	0, 185, 186, 0, 187, 0, 623, 0, 0, 665,
	630, 0, 626, 0, 188, 189, 190, 350, 680, 352,
	681, 191, 682, 683, 0, 192, 356, 357, 193, 194,
	633, 664, 684, 685, 360, 0, 195, 676, 0, 656,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 710, 206, 207, 208, 0,
	657, 658, 660, 0, 659, 661, 209, 210, 415, 211,
	686, 212, 687, 688, 0, 213, 0, 214, 0, 215,
	0, 0, 679, 217, 0, 218, 0, 0, 0, 621,
	219, 221, 220, 222, 666, 667, 644, 711, 0, 0,
	0, 0, 0, 223, 224, 689, 690, 691, 0, 225,
	0, 226, 0, 0, 712, 0, 227, 677, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 673, 675,
	714, 0, 375, 235, 0, 232, 0, 713, 233, 692,
	234, 693, 694, 695, 696, 697, 0, 655, 0, 715,
	236, 237, 238, 716, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 678, 717, 244, 245, 718, 0, 246,
	247, 0, 0, 248, 0, 249, 719, 250, 251, 253,
	386, 252, 720, 254, 255, 257, 256, 616, 0, 645,
	674, 258, 698, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 721, 264, 722, 668, 265, 266,
	267, 268, 269, 0, 270, 669, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 699, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 723, 293, 294, 622, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 662, 309, 296, 297, 310, 724, 311, 700,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 701,
	316, 317, 670, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 702, 703, 0, 0,
	329, 330, 671, 672, 643, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 663, 339, 0, 405, 340,
	341, 342, 406, 704, 0, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 617, 1567, 0, 648,
	637, 638, 635, 636, 627, 0, 615, 0, 0, 0,
	0, 613, 614, 0, 0, 185, 186, 0, 187, 0,
	623, 0, 0, 665, 630, 0, 626, 0, 188, 189,
	190, 350, 680, 352, 681, 191, 682, 683, 0, 192,
	356, 357, 193, 194, 633, 664, 684, 685, 360, 0,
	195, 676, 0, 656, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 710,
	206, 207, 208, 0, 657, 658, 660, 0, 659, 661,
	209, 210, 415, 211, 686, 212, 687, 688, 0, 213,
	0, 214, 0, 215, 0, 0, 679, 217, 0, 218,
	0, 0, 0, 621, 219, 221, 220, 222, 666, 667,
	644, 711, 0, 0, 0, 0, 0, 223, 224, 689,
	690, 691, 0, 225, 0, 226, 0, 0, 712, 0,
	227, 677, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 673, 675, 714, 0, 375, 235, 0, 232,
	0, 713, 233, 692, 234, 693, 694, 695, 696, 697,
	0, 655, 0, 715, 236, 237, 238, 716, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 678, 717, 244,
	245, 718, 0, 246, 247, 0, 0, 248, 0, 249,
	719, 250, 251, 253, 386, 252, 720, 254, 255, 257,
	256, 616, 0, 645, 674, 258, 698, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 721, 264,
	722, 668, 265, 266, 267, 268, 269, 0, 270, 669,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 699,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 723, 293,
	294, 622, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 662, 309, 296, 297,
	310, 724, 311, 700, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 701, 316, 317, 670, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	702, 703, 0, 0, 329, 330, 671, 672, 643, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 663,
	339, 0, 405, 340, 341, 342, 406, 704, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	617, 1565, 0, 1557, 637, 638, 635, 636, 627, 0,
	615, 0, 0, 0, 0, 613, 614, 0, 0, 185,
	186, 0, 187, 0, 623, 0, 0, 665, 630, 0,
	626, 0, 188, 189, 190, 350, 680, 352, 681, 191,
	682, 683, 0, 192, 356, 357, 193, 194, 633, 664,
	684, 685, 360, 0, 195, 676, 0, 656, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 710, 206, 207, 208, 0, 657, 658,
	660, 0, 659, 661, 209, 210, 415, 211, 686, 1560,
	687, 688, 0, 213, 0, 214, 0, 215, 0, 0,
	679, 217, 0, 218, 0, 0, 0, 621, 219, 221,
	220, 222, 666, 667, 644, 711, 0, 0, 0, 0,
	0, 223, 224, 689, 690, 691, 0, 225, 0, 226,
	0, 0, 712, 0, 227, 677, 0, 372, 0, 0,
	228, 1561, 0, 0, 230, 231, 673, 675, 714, 0,
	375, 235, 0, 232, 0, 713, 233, 692, 234, 693,
	694, 695, 696, 697, 0, 655, 0, 715, 236, 237,
	238, 716, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 678, 717, 244, 245, 718, 0, 246, 247, 0,
	0, 248, 0, 249, 719, 1562, 1559, 253, 386, 252,
	720, 254, 255, 257, 256, 616, 0, 645, 674, 258,
	698, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 721, 264, 722, 668, 265, 266, 267, 268,
	269, 0, 270, 669, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 699, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 723, 293, 294, 622, 295, 0, 299, 300,
	301, 302, 1563, 0, 305, 306, 395, 304, 307, 308,
	662, 309, 296, 297, 310, 724, 311, 700, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 701, 316, 317,
	670, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 702, 703, 0, 0, 329, 330,
	671, 672, 643, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 663, 339, 0, 405, 340, 341, 342,
	406, 704, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 1558, 348, 617, 1554, 0, 1557, 637, 638,
	635, 636, 627, 0, 615, 0, 0, 0, 0, 613,
	614, 0, 0, 185, 186, 0, 187, 0, 623, 0,
	0, 665, 630, 0, 626, 0, 188, 189, 190, 350,
	680, 352, 681, 191, 682, 683, 0, 192, 356, 357,
	193, 194, 633, 664, 684, 685, 360, 0, 195, 676,
	0, 656, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 710, 206, 207,
	208, 0, 657, 658, 660, 0, 659, 661, 209, 210,
	415, 211, 686, 1560, 687, 688, 0, 213, 0, 214,
	0, 215, 0, 0, 679, 217, 0, 218, 0, 0,
	0, 621, 219, 221, 220, 222, 666, 667, 644, 711,
	0, 0, 0, 0, 0, 223, 224, 689, 690, 691,
	0, 225, 0, 226, 0, 0, 712, 0, 227, 677,
	0, 372, 0, 0, 228, 1561, 0, 0, 230, 231,
	673, 675, 714, 0, 375, 235, 0, 232, 0, 713,
	233, 692, 234, 693, 694, 695, 696, 697, 0, 655,
	0, 715, 236, 237, 238, 716, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 678, 717, 244, 245, 718,
	0, 246, 247, 0, 0, 248, 0, 249, 719, 1562,
	1559, 253, 386, 252, 720, 254, 255, 257, 256, 616,
	0, 645, 674, 258, 698, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 721, 264, 722, 668,
	265, 266, 267, 268, 269, 0, 270, 669, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 699, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 723, 293, 294, 622,
	295, 0, 299, 300, 301, 302, 1563, 0, 305, 306,
	395, 304, 307, 308, 662, 309, 296, 297, 310, 724,
	311, 700, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 701, 316, 317, 670, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 702, 703,
	0, 0, 329, 330, 671, 672, 643, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 663, 339, 0,
	405, 340, 341, 342, 406, 704, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 1558, 348, 617, 0,
	648, 637, 638, 635, 636, 627, 0, 0, 615, 0,
	0, 0, 0, 613, 614, 0, 185, 186, 0, 187,
	0, 0, 623, 0, 665, 630, 0, 0, 626, 188,
	189, 190, 350, 680, 352, 681, 191, 682, 683, 0,
	192, 356, 357, 193, 194, 633, 664, 684, 685, 360,
	0, 195, 676, 0, 656, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	710, 206, 207, 208, 0, 657, 658, 660, 0, 659,
	661, 209, 210, 415, 211, 686, 212, 687, 688, 0,
	213, 0, 214, 0, 215, 0, 0, 679, 217, 0,
	218, 0, 0, 0, 621, 219, 221, 220, 222, 666,
	667, 644, 711, 0, 0, 0, 0, 0, 223, 224,
	689, 690, 691, 0, 225, 0, 226, 0, 0, 712,
	0, 227, 677, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 673, 675, 714, 0, 375, 235, 0,
	232, 0, 713, 233, 692, 234, 693, 694, 695, 696,
	697, 0, 655, 0, 715, 236, 237, 238, 716, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 678, 717,
	244, 245, 718, 0, 246, 247, 0, 0, 248, 0,
	249, 719, 250, 251, 253, 386, 252, 720, 254, 255,
	257, 256, 616, 0, 645, 674, 258, 698, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 721,
	264, 722, 668, 265, 266, 267, 268, 269, 0, 270,
	669, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	699, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 723,
	293, 294, 622, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 662, 309, 296,
	297, 310, 724, 311, 700, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 701, 316, 317, 670, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 702, 703, 0, 0, 329, 330, 671, 672, 643,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	663, 339, 0, 405, 340, 341, 342, 406, 704, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 617, 0, 648, 637, 638, 635, 636, 627, 0,
	0, 615, 0, 0, 0, 0, 613, 614, 0, 185,
	186, 1420, 187, 1128, 0, 623, 0, 665, 630, 0,
	0, 626, 188, 189, 190, 350, 680, 352, 681, 191,
	682, 683, 0, 192, 356, 357, 193, 194, 633, 664,
	684, 685, 360, 0, 195, 676, 0, 656, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 710, 206, 207, 208, 0, 657, 658,
	660, 0, 659, 661, 209, 210, 415, 211, 686, 212,
	687, 688, 0, 213, 0, 214, 0, 215, 0, 0,
	679, 217, 0, 218, 0, 0, 0, 621, 219, 221,
	220, 222, 666, 667, 644, 711, 0, 0, 0, 0,
	0, 223, 224, 689, 690, 691, 0, 225, 0, 226,
	0, 0, 712, 0, 227, 677, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 673, 675, 714, 0,
	375, 235, 0, 232, 0, 713, 233, 692, 234, 693,
	694, 695, 696, 697, 0, 655, 0, 715, 236, 237,
	238, 716, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 678, 717, 244, 245, 718, 0, 246, 247, 0,
	0, 248, 0, 249, 719, 250, 251, 253, 386, 252,
	720, 254, 255, 257, 256, 616, 0, 645, 674, 258,
	698, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 721, 264, 722, 668, 265, 266, 267, 268,
	269, 0, 270, 669, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 699, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 723, 293, 294, 622, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	662, 309, 296, 297, 310, 724, 311, 700, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 701, 316, 317,
	670, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 702, 703, 0, 0, 329, 330,
	671, 672, 643, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 663, 339, 0, 405, 340, 341, 342,
	406, 704, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 617, 879, 0, 648, 637, 638,
	635, 636, 627, 0, 615, 0, 0, 0, 0, 613,
	614, 0, 0, 185, 186, 0, 187, 0, 623, 0,
	0, 665, 630, 0, 626, 0, 188, 189, 190, 350,
	680, 352, 681, 191, 682, 683, 0, 192, 356, 357,
	193, 194, 633, 664, 684, 685, 360, 0, 195, 676,
	0, 656, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 710, 206, 207,
	208, 0, 657, 658, 660, 0, 659, 661, 209, 210,
	415, 211, 686, 212, 687, 688, 0, 213, 0, 214,
	0, 215, 0, 0, 679, 217, 0, 218, 0, 0,
	0, 621, 219, 221, 220, 222, 666, 667, 644, 711,
	0, 0, 0, 0, 0, 223, 224, 689, 690, 691,
	0, 225, 0, 226, 0, 0, 712, 0, 227, 677,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	673, 675, 714, 0, 375, 235, 0, 232, 0, 713,
	233, 692, 234, 693, 694, 695, 696, 697, 0, 655,
	0, 715, 236, 237, 238, 716, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 678, 717, 244, 245, 718,
	0, 246, 247, 0, 0, 248, 0, 249, 719, 250,
	251, 253, 386, 252, 720, 254, 255, 257, 256, 616,
	0, 645, 674, 258, 698, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 721, 264, 722, 668,
	265, 266, 267, 268, 269, 0, 270, 669, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 699, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 723, 293, 294, 622,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 662, 309, 296, 297, 310, 724,
	311, 700, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 701, 316, 317, 670, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 702, 703,
	0, 0, 329, 330, 671, 672, 643, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 663, 339, 0,
	405, 340, 341, 342, 406, 704, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 617, 877,
	0, 648, 637, 638, 635, 636, 627, 0, 615, 0,
	0, 0, 0, 613, 614, 0, 0, 185, 186, 0,
	187, 0, 623, 0, 0, 665, 630, 0, 626, 0,
	188, 189, 190, 350, 680, 352, 681, 191, 682, 683,
	0, 192, 356, 357, 193, 194, 633, 664, 684, 685,
	360, 0, 195, 676, 0, 656, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 710, 206, 207, 208, 0, 657, 658, 660, 0,
	659, 661, 209, 210, 415, 211, 686, 212, 687, 688,
	0, 213, 0, 214, 0, 215, 0, 0, 679, 217,
	0, 218, 0, 0, 0, 621, 219, 221, 220, 222,
	666, 667, 644, 711, 0, 0, 0, 0, 0, 223,
	224, 689, 690, 691, 0, 225, 0, 226, 0, 0,
	712, 0, 227, 677, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 673, 675, 714, 0, 375, 235,
	0, 232, 0, 713, 233, 692, 234, 693, 694, 695,
	696, 697, 0, 655, 0, 715, 236, 237, 238, 716,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 678,
	717, 244, 245, 718, 0, 246, 247, 0, 0, 248,
	0, 249, 719, 250, 251, 253, 386, 252, 720, 254,
	255, 257, 256, 616, 0, 645, 674, 258, 698, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	721, 264, 722, 668, 265, 266, 267, 268, 269, 0,
	270, 669, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 699, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	723, 293, 294, 622, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 662, 309,
	296, 297, 310, 724, 311, 700, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 701, 316, 317, 670, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 702, 703, 0, 0, 329, 330, 671, 672,
	643, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 663, 339, 0, 405, 340, 341, 342, 406, 704,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 617, 0, 648, 637, 638, 635, 636, 627,
	0, 0, 615, 0, 0, 0, 0, 613, 614, 0,
	185, 186, 0, 187, 0, 0, 623, 0, 665, 630,
	0, 0, 626, 188, 189, 190, 350, 680, 352, 681,
	191, 682, 683, 0, 192, 356, 357, 193, 194, 633,
	664, 684, 685, 360, 0, 195, 676, 0, 656, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 710, 206, 207, 2531, 0, 657,
	658, 660, 0, 659, 661, 209, 210, 415, 211, 686,
	212, 687, 688, 0, 213, 0, 214, 0, 215, 0,
	0, 679, 217, 0, 218, 0, 0, 0, 621, 219,
	221, 220, 222, 666, 667, 644, 711, 0, 0, 0,
	0, 0, 223, 224, 689, 690, 691, 0, 225, 0,
	226, 0, 0, 712, 0, 227, 677, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 673, 675, 714,
	0, 375, 235, 0, 232, 0, 713, 233, 692, 234,
	693, 694, 695, 696, 697, 0, 655, 0, 715, 236,
	237, 238, 716, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 678, 717, 244, 245, 718, 0, 246, 247,
	0, 0, 248, 0, 249, 719, 250, 251, 253, 386,
	252, 720, 254, 255, 257, 256, 616, 0, 645, 674,
	258, 698, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 721, 264, 722, 668, 265, 266, 267,
	268, 269, 0, 270, 669, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 699, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 723, 293, 294, 622, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 662, 309, 296, 297, 310, 724, 311, 700, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 701, 316,
	317, 670, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 702, 703, 0, 0, 329,
	330, 671, 672, 643, 331, 332, 2530, 334, 0, 0,
	335, 336, 337, 338, 663, 339, 0, 405, 340, 341,
	342, 406, 704, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 617, 0, 648, 637, 638,
	635, 636, 627, 0, 0, 615, 0, 0, 0, 0,
	613, 614, 0, 185, 186, 0, 187, 0, 0, 623,
	0, 665, 630, 0, 0, 626, 188, 189, 190, 350,
	680, 352, 681, 191, 682, 683, 0, 192, 356, 357,
	193, 194, 633, 664, 684, 685, 360, 0, 195, 676,
	0, 656, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 710, 206, 207,
	208, 0, 657, 658, 660, 0, 659, 661, 209, 210,
	415, 211, 686, 212, 687, 688, 0, 213, 0, 214,
	0, 215, 0, 0, 679, 217, 0, 218, 0, 0,
	0, 621, 219, 221, 220, 222, 666, 667, 644, 711,
	0, 0, 0, 0, 0, 223, 224, 689, 690, 691,
	0, 225, 0, 226, 0, 0, 712, 0, 227, 677,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	673, 675, 714, 0, 375, 235, 0, 232, 0, 713,
	233, 692, 234, 693, 694, 695, 696, 697, 0, 655,
	0, 715, 236, 237, 238, 716, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 678, 717, 244, 245, 718,
	0, 246, 247, 0, 0, 248, 0, 249, 719, 250,
	251, 253, 386, 252, 720, 254, 255, 257, 256, 616,
	0, 645, 674, 258, 698, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 721, 264, 722, 668,
	265, 266, 267, 268, 269, 0, 270, 669, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 699, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 723, 293, 294, 622,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 662, 309, 296, 297, 310, 724,
	311, 700, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 701, 316, 317, 670, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 702, 703,
	0, 0, 329, 330, 671, 672, 643, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 663, 339, 0,
	405, 340, 341, 342, 406, 704, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 617, 0,
	648, 637, 638, 635, 636, 627, 0, 0, 615, 0,
	0, 0, 0, 613, 614, 0, 185, 186, 0, 187,
	0, 0, 623, 0, 665, 630, 0, 0, 626, 188,
	189, 190, 2529, 680, 352, 681, 191, 682, 683, 0,
	192, 356, 357, 193, 194, 633, 664, 684, 685, 360,
	0, 195, 676, 0, 656, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	710, 206, 207, 2531, 0, 657, 658, 660, 0, 659,
	661, 209, 210, 415, 211, 686, 212, 687, 688, 0,
	213, 0, 214, 0, 215, 0, 0, 679, 217, 0,
	218, 0, 0, 0, 621, 219, 221, 220, 222, 666,
	667, 644, 711, 0, 0, 0, 0, 0, 223, 224,
	689, 690, 691, 0, 225, 0, 226, 0, 0, 712,
	0, 227, 677, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 673, 675, 714, 0, 375, 235, 0,
	232, 0, 713, 233, 692, 234, 693, 694, 695, 696,
	697, 0, 655, 0, 715, 236, 237, 238, 716, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 678, 717,
	244, 245, 718, 0, 246, 247, 0, 0, 248, 0,
	249, 719, 250, 251, 253, 386, 252, 720, 254, 255,
	257, 256, 616, 0, 645, 674, 258, 698, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 721,
	264, 722, 668, 265, 266, 267, 268, 269, 0, 270,
	669, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	699, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 723,
	293, 294, 622, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 662, 309, 296,
	297, 310, 724, 311, 700, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 701, 316, 317, 670, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 702, 703, 0, 0, 329, 330, 671, 672, 643,
	331, 332, 2530, 334, 0, 0, 335, 336, 337, 338,
	663, 339, 0, 405, 340, 341, 342, 406, 704, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 617, 0, 648, 637, 638, 635, 636, 627, 0,
	0, 615, 0, 0, 0, 0, 613, 614, 0, 185,
	186, 0, 187, 0, 0, 623, 0, 665, 630, 0,
	0, 626, 188, 189, 190, 350, 680, 352, 681, 191,
	682, 683, 0, 192, 356, 357, 193, 194, 633, 664,
	684, 685, 360, 0, 195, 676, 0, 656, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 710, 206, 207, 208, 0, 657, 658,
	660, 0, 659, 661, 209, 210, 415, 211, 686, 212,
	687, 688, 0, 213, 0, 214, 0, 215, 0, 0,
	679, 217, 0, 218, 0, 0, 0, 621, 219, 221,
	220, 222, 666, 667, 644, 711, 0, 0, 0, 0,
	0, 223, 224, 689, 690, 691, 0, 225, 0, 226,
	0, 0, 712, 0, 227, 677, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 673, 675, 714, 0,
	375, 235, 0, 232, 0, 713, 233, 692, 234, 693,
	694, 695, 696, 697, 0, 655, 0, 715, 236, 237,
	238, 716, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 678, 717, 244, 245, 718, 0, 246, 247, 0,
	0, 248, 0, 249, 719, 250, 251, 253, 386, 252,
	720, 254, 255, 257, 256, 0, 0, 645, 674, 258,
	698, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 721, 264, 722, 668, 265, 266, 267, 268,
	269, 0, 270, 669, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 699, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 723, 293, 294, 1577, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	662, 309, 296, 297, 310, 724, 311, 700, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 701, 316, 317,
	670, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 702, 703, 0, 0, 329, 330,
	671, 672, 643, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 663, 339, 0, 405, 340, 341, 342,
	406, 704, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 648, 637, 638, 635,
	636, 627, 0, 0, 1575, 0, 0, 0, 0, 1573,
	1574, 0, 185, 186, 0, 187, 0, 0, 1576, 0,
	665, 630, 0, 0, 626, 188, 189, 190, 350, 680,
	352, 681, 191, 682, 683, 0, 192, 356, 357, 193,
	194, 0, 664, 684, 685, 360, 0, 195, 676, 0,
	656, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 657, 658, 660, 0, 659, 661, 209, 210, 415,
	211, 686, 212, 687, 688, 0, 213, 0, 214, 0,
	215, 0, 0, 679, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 666, 667, 644, 711, 0,
	0, 0, 0, 0, 223, 224, 689, 690, 691, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 677, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 673,
	675, 714, 0, 375, 235, 0, 232, 0, 713, 233,
	692, 234, 693, 694, 695, 696, 697, 0, 655, 0,
	715, 236, 237, 238, 716, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 678, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 250, 251,
	253, 386, 252, 720, 254, 255, 257, 256, 0, 0,
	645, 674, 258, 698, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 721, 264, 722, 668, 265,
	266, 267, 268, 269, 0, 270, 669, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 699, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 1577, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 662, 309, 296, 297, 310, 724, 311,
	700, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	701, 316, 317, 670, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 702, 703, 0,
	0, 329, 330, 671, 672, 643, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 663, 339, 0, 405,
	340, 341, 342, 406, 704, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 648,
	637, 638, 635, 636, 627, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 1576, 0, 665, 630, 0, 0, 626, 188, 189,
	190, 0, 680, 352, 681, 191, 682, 683, 0, 192,
	356, 357, 193, 194, 633, 664, 684, 685, 360, 0,
	195, 676, 0, 656, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 710,
	206, 207, 2531, 0, 657, 658, 660, 0, 659, 661,
	209, 210, 415, 211, 686, 212, 687, 688, 0, 213,
	0, 214, 0, 215, 0, 0, 679, 217, 0, 218,
	0, 0, 0, 621, 219, 221, 220, 222, 666, 667,
	644, 711, 0, 0, 0, 0, 0, 223, 224, 689,
	690, 691, 0, 225, 0, 226, 0, 0, 712, 0,
	227, 677, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 673, 675, 0, 0, 375, 235, 0, 232,
	0, 713, 233, 692, 234, 693, 694, 695, 696, 697,
	0, 655, 0, 0, 236, 237, 238, 716, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 678, 717, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	719, 250, 251, 253, 386, 252, 720, 254, 255, 257,
	256, 616, 0, 645, 674, 258, 698, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 721, 264,
	722, 668, 265, 266, 267, 268, 269, 0, 270, 669,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 699,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 723, 293,
	294, 622, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 662, 309, 296, 297,
	310, 0, 311, 700, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 701, 316, 317, 670, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	702, 703, 0, 0, 329, 330, 671, 672, 643, 331,
	332, 2530, 334, 0, 0, 335, 336, 337, 338, 663,
	339, 0, 405, 340, 341, 342, 406, 704, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 648, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 613, 614, 0, 185, 186,
	0, 187, 0, 0, 623, 0, 665, 0, 0, 0,
	626, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 664, 358,
	359, 360, 0, 195, 676, 0, 656, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 710, 206, 207, 208, 0, 657, 658, 660,
	0, 659, 661, 209, 210, 415, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 666, 667, 0, 711, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 712, 0, 227, 677, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 673, 675, 714, 0, 375,
	235, 0, 232, 0, 713, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 715, 236, 237, 238,
	716, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	678, 717, 244, 245, 718, 0, 246, 247, 0, 0,
	248, 0, 249, 719, 250, 251, 253, 386, 252, 720,
	254, 255, 257, 256, 0, 0, 0, 674, 258, 388,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 721, 264, 722, 668, 265, 266, 267, 268, 269,
	0, 270, 669, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 393, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 723, 293, 294, 394, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 662,
	309, 296, 297, 310, 724, 311, 396, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 670,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 671,
	672, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 663, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 930, 0, 933, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 2162, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 786,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 710, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 711, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 712, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	714, 0, 375, 235, 0, 232, 0, 713, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 715,
	236, 237, 238, 716, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 717, 244, 245, 718, 0, 246,
	247, 0, 0, 248, 0, 249, 719, 250, 251, 253,
	386, 252, 720, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 721, 264, 722, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 723, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 141, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 724, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 143, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 937, 407, 0, 0, 343, 0, 0, 0,
	135, 344, 345, 346, 347, 348, 599, 136, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	127, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 764, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 141, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 143, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 937, 407, 0, 0, 343,
	0, 0, 0, 135, 344, 345, 346, 347, 348, 0,
	136, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 758, 0, 1207, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 415, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 385,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 386, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 387, 258, 388, 259,
	260, 0, 261, 0, 764, 262, 0, 0, 263, 389,
	0, 264, 0, 390, 265, 266, 267, 268, 269, 0,
	270, 391, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 393, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 394, 295, 0, 299, 300, 301, 302,
	303, 141, 305, 306, 395, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 399, 0,
	320, 143, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 937, 407,
	0, 0, 343, 0, 0, 0, 135, 344, 345, 346,
	347, 348, 599, 136, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 758, 0, 1207, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 141, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 143, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 937, 407, 0, 0, 343, 0, 0, 0, 135,
	344, 345, 346, 347, 348, 1905, 136, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 127,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 386, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	764, 262, 0, 0, 263, 389, 0, 264, 0, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 757, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	758, 0, 763, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 764, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 758, 0, 763, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 415, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	385, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 386, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 387, 258, 388,
	259, 260, 0, 261, 0, 764, 262, 0, 0, 263,
	389, 0, 264, 0, 390, 265, 266, 267, 268, 269,
	0, 270, 391, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 393, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 394, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 758, 0, 763, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	1240, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	1719, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 386, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 0, 264, 0, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 2078, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 648, 637, 638, 635, 636, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 1210, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 680, 352, 681, 191, 682, 683,
	0, 192, 356, 357, 193, 194, 0, 0, 684, 685,
	360, 0, 195, 361, 0, 786, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 710, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 415, 211, 686, 212, 687, 688,
	0, 213, 0, 214, 0, 215, 0, 0, 679, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 644, 711, 0, 0, 0, 0, 0, 223,
	224, 689, 690, 691, 0, 225, 0, 226, 0, 0,
	712, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 714, 0, 375, 235,
	0, 232, 0, 713, 233, 692, 234, 693, 694, 695,
	696, 697, 0, 655, 0, 715, 236, 237, 238, 716,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 385,
	717, 244, 245, 718, 0, 246, 247, 0, 0, 248,
	0, 249, 719, 250, 251, 253, 386, 252, 720, 254,
	255, 257, 256, 0, 0, 645, 387, 258, 698, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	721, 264, 722, 390, 265, 266, 267, 268, 269, 0,
	270, 391, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 699, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	723, 293, 294, 394, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 0, 309,
	296, 297, 310, 724, 311, 700, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 701, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 702, 703, 0, 0, 329, 330, 403, 404,
	643, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 704,
	0, 502, 343, 182, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 178, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 385, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 386, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 387, 258,
	388, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 0, 264, 0, 390, 265, 266, 267, 268,
	269, 0, 270, 391, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 393, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 394, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	399, 0, 320, 177, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 175, 343, 182, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 181, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 178, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 177, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 182, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 181, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 178, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 177, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 182, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 181, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 987, 0, 933, 991,
	0, 0, 0, 989, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 181, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 786, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 710, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	711, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 712, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 714, 0, 375, 235, 0, 232, 0,
	713, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 715, 236, 237, 238, 716, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 717, 244, 245,
	718, 0, 246, 247, 0, 0, 248, 0, 249, 719,
	250, 251, 253, 386, 252, 720, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 721, 264, 722,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 723, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	724, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 933, 991, 343,
	0, 0, 989, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 786, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 710, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 711,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 712, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 714, 0, 375, 235, 0, 232, 0, 713,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 715, 236, 237, 238, 716, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 717, 244, 245, 718,
	0, 246, 247, 0, 0, 248, 0, 249, 719, 250,
	251, 253, 386, 252, 720, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 721, 264, 722, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 723, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 724,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 933, 991, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	786, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 711, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 714, 0, 375, 235, 0, 232, 0, 713, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	715, 236, 237, 238, 716, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 250, 251,
	253, 386, 252, 720, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 721, 264, 722, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 724, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 933, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 786,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 710, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 711, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 712, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	714, 0, 375, 235, 0, 232, 0, 713, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 715,
	236, 237, 238, 716, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 717, 244, 245, 718, 0, 246,
	247, 0, 0, 248, 0, 249, 719, 250, 251, 253,
	386, 252, 720, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 721, 264, 722, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 723, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 724, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 182, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 1653, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 1651, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 1695, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 1656, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 1693, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 1655, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 1694,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 182, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 1653, 195, 361, 0, 0, 1648, 196,
	197, 198, 0, 200, 201, 202, 199, 1651, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 415, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	1656, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 1647, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 385, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 386, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 387, 258,
	388, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 0, 264, 0, 390, 265, 266, 267, 268,
	269, 0, 270, 391, 271, 392, 272, 1655, 273, 274,
	275, 276, 277, 393, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 394, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 1654, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 908, 343, 182, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 764, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 770, 343, 182, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	772, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 386, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	764, 262, 0, 0, 263, 389, 0, 264, 0, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 766, 343, 182,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 768, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 764, 262, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 433,
	343, 182, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 432,
	187, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 415, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 385,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 386, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 387, 258, 388, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	0, 264, 0, 390, 265, 266, 267, 268, 269, 0,
	270, 391, 271, 392, 431, 0, 273, 274, 275, 276,
	277, 393, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 394, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	182, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 349, 0, 1636, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 182,
	2228, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 182, 2228,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 2225, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 182, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 386, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	764, 262, 0, 0, 263, 389, 0, 264, 0, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 1399, 343, 182,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 1397,
	343, 182, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 415, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 385,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 386, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 387, 258, 388, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	0, 264, 0, 390, 265, 266, 267, 268, 269, 0,
	270, 391, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 393, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 394, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	182, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 185, 186, 1379, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	528, 343, 182, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 966, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 415, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	385, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 386, 530, 0,
	254, 255, 257, 256, 0, 0, 0, 387, 258, 388,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 0, 264, 0, 390, 265, 266, 267, 268, 269,
	0, 270, 391, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 393, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 394, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 525, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 1255, 343, 182, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 1254, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 528, 343, 182, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 966, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 530, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 525, 401, 402, 0,
	0, 329, 967, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 528, 343, 182, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 519,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 530, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 950, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 525, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 926, 343,
	182, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 925, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	923, 343, 182, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 415, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 922, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	385, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 386, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 387, 258, 388,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 0, 264, 0, 390, 265, 266, 267, 268, 269,
	0, 270, 391, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 393, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 394, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 919, 343, 182, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 918, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 916, 343, 182, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 915,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 912, 343, 182, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 911, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 182, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 185, 186, 900, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 386, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 0, 264, 0, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 898, 343, 182,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 897, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 894,
	343, 182, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 415, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 385,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 386, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 387, 258, 388, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	0, 264, 0, 390, 265, 266, 267, 268, 269, 0,
	270, 391, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 393, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 394, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 892, 343, 182, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 415, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 385, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 386, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 387, 258,
	388, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 0, 264, 0, 390, 265, 266, 267, 268,
	269, 0, 270, 391, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 393, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 394, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 886, 343, 182, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 888, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 776, 343, 182, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	778, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 386, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 0, 264, 0, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 774, 343, 182,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 528,
	343, 182, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 519, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 415, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 385,
	0, 244, 245, 0, 0, 246, 518, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 386, 530, 0, 254,
	255, 257, 256, 0, 0, 0, 387, 258, 388, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	0, 264, 0, 390, 265, 266, 267, 268, 269, 0,
	270, 391, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 393, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 520, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 521, 308, 0, 309,
	296, 297, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 525, 401, 402, 0, 0, 329, 523, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 510, 343, 182, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 415, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 385, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 386, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 387, 258,
	388, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 0, 264, 0, 390, 265, 266, 267, 268,
	269, 0, 270, 391, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 393, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 394, 295, 0, 511, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 508, 343, 182, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 500, 343, 182, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 386, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 0, 264, 0, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 456, 343, 182,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 182, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 182, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	1952, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 386, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 0, 264, 0, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 182, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 1950,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 182, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 1939, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 182, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 511,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 182, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 1265,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 415, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 385, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 386, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 387, 258,
	388, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 0, 264, 0, 390, 265, 266, 267, 268,
	269, 0, 270, 391, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 393, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 394, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	0, 0, 296, 297, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 182, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 415, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 890, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	385, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 386, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 387, 258, 388,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 0, 264, 0, 390, 265, 266, 267, 268, 269,
	0, 270, 391, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 393, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 394, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 182, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 415, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 385,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 386, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 387, 258, 388, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	0, 264, 0, 390, 265, 266, 267, 268, 269, 0,
	270, 391, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 393, 740, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 394, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	182, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 0, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 0, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 0, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103,
	0, 0, 0, 0, 0, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 0, 0, 1061, 1062, 0, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 0, 0, 1063, 0,
	0, 0, 1094, 0, 1083, 0, 0, 0, 0, 1064,
	0, 1080, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 1847,
	1848, 0, 1865, 1866, 1867, 0, 0, 0, 0, 1086,
	1087, 1088, 1089, 0, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 1106, 0, 0, 1086, 1087, 1088, 1089, 0, 0,
	0, 0, 1862, 1069, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093,
	1101, 1102, 1103, 0, 0, 1098, 1106, 1096, 0, 0,
	1094, 0, 0, 0, 1084, 0, 0, 1064, 0, 0,
	1105, 0, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1095, 1063, 1096, 0, 0, 0, 1853, 1083, 0, 1084,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 1095, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1868, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 1087, 1088, 1089, 0, 1099, 0, 1090,
	0, 1069, 1863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 1098, 1106, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1096, 0, 0, 0, 0, 0, 1097, 1084, 0, 1075,
	1076, 1082, 1081, 1077, 1078, 1079, 1100, 1864, 1074, 1072,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 0,
	0, 0, 0, 1095, 0, 1887, 0, 0, 0, 0,
	0, 1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078,
	1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 0, 0, 0, 0, 0, 1090, 0, 0,
	1839, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 1061, 1062, 0,
	1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0,
	1099, 0, 0, 1094, 0, 0, 0, 1859, 1860, 1861,
	1064, 0, 0, 1105, 0, 0, 1858, 1856, 1857, 1849,
	1850, 1851, 1852, 1854, 1855, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1097,
	0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100,
	0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071,
	0, 0, 0, 0, 2500, 1086, 1087, 1088, 1089, 0,
	0, 0, 0, 0, 1069, 0, 0, 0, 0, 0,
	0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 0, 0, 1098, 1106, 1094, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 1105, 0,
	0, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
	1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 1063,
	0, 0, 0, 1096, 0, 1083, 1094, 0, 0, 0,
	1084, 0, 1080, 1064, 0, 0, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, 1063, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 1087, 1088, 1089, 0, 0, 0, 0, 0, 1069,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 1098, 1106, 0, 0, 0, 0, 0, 1086, 1087,
	1088, 1089, 0, 1099, 0, 0, 0, 1069, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1096, 1098,
	1106, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 1097, 1084, 0, 1075, 1076, 1082, 1081, 1077,
	1078, 1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067,
	1068, 1070, 1071, 0, 0, 1090, 0, 2451, 0, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 1064, 0, 1097, 1105, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 1063,
	0, 0, 2405, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 1097, 0, 0, 1075, 1076,
	1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073,
	1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 0, 0,
	2375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 1087, 1088, 1089, 0, 0, 0, 0, 0, 1069,
	0, 0, 0, 0, 0, 0, 0, 1061, 1062, 0,
	1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0,
	0, 1098, 1106, 1094, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 1061, 1062, 0, 1091, 1092,
	1093, 1101, 1102, 1103, 1063, 0, 0, 0, 1096, 0,
	1083, 1094, 0, 0, 0, 1084, 0, 1080, 1064, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1095, 1063, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 1087, 1088, 1089, 0,
	0, 0, 0, 0, 1069, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 1098, 1106, 0, 0,
	0, 0, 0, 1086, 1087, 1088, 1089, 0, 1099, 0,
	0, 0, 1069, 0, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1096, 1098, 1106, 0, 0, 0, 0,
	1084, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 1096, 0, 0, 0, 0, 0, 1097, 1084, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0,
	1090, 0, 2370, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 1061, 1062, 0,
	1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	1064, 0, 1097, 1105, 0, 1075, 1076, 1082, 1081, 1077,
	1078, 1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067,
	1068, 1070, 1071, 0, 1063, 0, 0, 2366, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079,
	1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 0, 0, 0, 0, 2304, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 1087, 1088, 1089, 0,
	0, 0, 0, 0, 1069, 0, 0, 0, 0, 0,
	0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 0, 0, 1098, 1106, 1094, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 1105, 0,
	0, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
	1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 1063,
	0, 0, 0, 1096, 0, 1083, 1094, 0, 0, 0,
	1084, 0, 1080, 1064, 0, 0, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, 1063, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 1087, 1088, 1089, 0, 0, 0, 0, 0, 1069,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 1098, 1106, 0, 0, 0, 0, 0, 1086, 1087,
	1088, 1089, 0, 1099, 0, 0, 0, 1069, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1096, 1098,
	1106, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 1097, 1084, 0, 1075, 1076, 1082, 1081, 1077,
	1078, 1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067,
	1068, 1070, 1071, 0, 0, 1090, 0, 2270, 0, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 1064, 0, 1097, 1105, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 1063,
	0, 0, 2269, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 1097, 0, 0, 1075, 1076,
	1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073,
	1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 0, 0,
	2234, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 1087, 1088, 1089, 0, 0, 0, 0, 0, 1069,
	0, 0, 0, 0, 0, 0, 0, 1061, 1062, 0,
	1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0,
	0, 1098, 1106, 1094, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 1061, 1062, 0, 1091, 1092,
	1093, 1101, 1102, 1103, 1063, 0, 0, 0, 1096, 0,
	1083, 1094, 0, 0, 0, 1084, 0, 1080, 1064, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1095, 1063, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 1087, 1088, 1089, 0,
	0, 0, 0, 0, 1069, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 1098, 1106, 0, 0,
	0, 0, 0, 1086, 1087, 1088, 1089, 0, 1099, 0,
	0, 0, 1069, 0, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1096, 1098, 1106, 0, 0, 0, 0,
	1084, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 1096, 0, 0, 0, 0, 0, 1097, 1084, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0,
	1090, 0, 2081, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 1061, 1062, 0,
	1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	1064, 0, 1097, 1105, 0, 1075, 1076, 1082, 1081, 1077,
	1078, 1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067,
	1068, 1070, 1071, 0, 1063, 0, 0, 2057, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079,
	1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 0, 0, 0, 0, 1515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 1087, 1088, 1089, 0,
	0, 0, 0, 0, 1069, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1098, 1106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1104, 0, 0, 1061, 1062,
	0, 1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0,
	0, 0, 0, 1096, 1094, 0, 0, 0, 0, 0,
	1084, 1064, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 1095, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 1087, 1088, 1089,
	0, 0, 0, 1099, 0, 1069, 2563, 0, 0, 0,
	0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101,
	1102, 1103, 0, 0, 0, 0, 0, 1098, 1106, 1094,
	0, 0, 0, 0, 0, 0, 1064, 0, 0, 1105,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 0, 0, 0, 1096, 0, 1083, 0, 0, 0,
	0, 1084, 1097, 1080, 0, 1075, 1076, 1082, 1081, 1077,
	1078, 1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067,
	1068, 1070, 1071, 0, 0, 1809, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2562, 0, 0, 0, 0, 0, 0,
	0, 1086, 1087, 1088, 1089, 0, 0, 0, 0, 0,
	1069, 1090, 1879, 0, 0, 1878, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 1098, 1106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 1061, 1062, 0, 1091, 1092, 1093,
	1101, 1102, 1103, 0, 0, 0, 0, 0, 0, 1096,
	1094, 0, 0, 0, 0, 1782, 1084, 1064, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 1095, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 1097, 1080, 0, 1075, 1076, 1082, 1081,
	1077, 1078, 1079, 1100, 0, 1074, 1072, 1073, 1065, 1066,
	1067, 1068, 1070, 1071, 0, 0, 1090, 0, 0, 0,
	0, 1783, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 1087, 1088, 1089, 0, 0, 0, 1099,
	0, 1069, 0, 1612, 0, 0, 0, 0, 0, 1061,
	1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 0, 0,
	0, 0, 0, 1098, 1106, 1094, 0, 0, 0, 1611,
	0, 0, 1064, 0, 0, 1105, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	1096, 0, 1083, 0, 0, 0, 0, 1084, 1097, 1080,
	0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0,
	1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0,
	0, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 1087, 1088,
	1089, 0, 0, 0, 0, 0, 1069, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 1098, 1106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 0,
	0, 0, 0, 0, 0, 1096, 1094, 0, 0, 0,
	0, 0, 1084, 1064, 0, 0, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 1095, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 1097,
	1080, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100,
	0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 1087,
	1088, 1089, 0, 0, 0, 1099, 0, 1069, 0, 0,
	0, 0, 0, 0, 0, 1061, 1062, 0, 1091, 1092,
	1093, 1101, 1102, 1103, 0, 0, 0, 0, 0, 1098,
	1106, 1094, 0, 0, 0, 0, 0, 0, 1064, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 1104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1063, 0, 0, 0, 1096, 0, 1083, 0,
	0, 0, 0, 1084, 1097, 1080, 0, 1075, 1076, 1082,
	1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073, 1065,
	1066, 1067, 1068, 1070, 1071, 0, 0, 0, 0, 1095,
	596, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 1087, 1088, 1089, 0, 0, 0,
	0, 0, 1069, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 1098, 1106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 1061, 1062, 0, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0, 0,
	0, 1096, 1094, 0, 0, 0, 0, 0, 1084, 1064,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 1095, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 1097, 1080, 0, 1075, 1076,
	1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073,
	1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 1087, 1088, 1089, 0, 0,
	0, 1099, 0, 1069, 0, 0, 0, 0, 1885, 0,
	0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103,
	0, 0, 0, 0, 0, 1098, 1106, 1094, 2061, 0,
	0, 1880, 0, 0, 1064, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1063, 0,
	0, 0, 1096, 0, 1083, 0, 0, 0, 0, 1084,
	1097, 1080, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079,
	1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 0, 0, 0, 0, 1095, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	1087, 1088, 1089, 0, 0, 0, 0, 0, 1069, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	1098, 1106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 1104,
	0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 0, 0, 0, 1096, 1094, 0,
	0, 0, 0, 0, 1084, 1064, 0, 0, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	1095, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 1097, 1080, 0, 1075, 1076, 1082, 1081, 1077, 1078,
	1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 1087, 1088, 1089, 0, 0, 0, 1099, 0, 1069,
	0, 0, 0, 0, 0, 0, 0, 1061, 1062, 0,
	1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0,
	0, 1098, 1106, 1094, 0, 0, 0, 1838, 0, 0,
	1064, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 1096, 0,
	1083, 0, 0, 0, 0, 1084, 1097, 1080, 0, 1075,
	1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1845, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 1087, 1088, 1089, 0,
	0, 0, 0, 0, 1069, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 1098, 1106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1104, 0, 0, 1061, 1062,
	0, 1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0,
	0, 0, 0, 1096, 1094, 0, 0, 0, 0, 0,
	1084, 1064, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 1095, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 1097, 1080, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 1087, 1088, 1089,
	0, 0, 0, 1099, 0, 1069, 0, 0, 0, 0,
	0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101,
	1102, 1103, 0, 0, 0, 0, 0, 1098, 1106, 0,
	0, 0, 0, 0, 0, 0, 1064, 0, 0, 1105,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 0, 0, 0, 1096, 0, 1083, 0, 0, 0,
	0, 1084, 1097, 1080, 0, 1075, 1076, 1082, 1081, 1077,
	1078, 1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067,
	1068, 1070, 1071, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 1087, 1088, 1089, 0, 0, 0, 0, 0,
	1069, 1090, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 1098, 1106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 130, 1097, 0, 0, 1075, 1076, 1082, 1081,
	1077, 1078, 1079, 1100, 44, 1074, 1072, 1073, 1065, 1066,
	1067, 1068, 1070, 1071, 0, 0, 1090, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 46, 0,
	52, 1085, 0, 0, 0, 1061, 1062, 0, 1091, 1092,
	1093, 1101, 1102, 1103, 0, 0, 0, 0, 0, 1099,
	0, 55, 0, 0, 0, 57, 0, 0, 1064, 63,
	0, 1105, 133, 0, 0, 0, 64, 0, 123, 65,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1063, 0, 0, 0, 0, 0, 1083, 0,
	0, 66, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 67, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0,
	1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0,
	0, 0, 0, 1086, 1087, 1088, 1089, 0, 0, 0,
	0, 0, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 1106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 69, 1318, 1307, 1337, 1296, 1328,
	1327, 0, 0, 1298, 1297, 0, 0, 0, 0, 1339,
	1338, 1096, 0, 76, 128, 70, 0, 71, 1084, 72,
	0, 134, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 104, 0, 0, 0, 0, 1333, 0, 1325,
	1324, 131, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1090, 0,
	0, 108, 1322, 1320, 1321, 0, 0, 0, 0, 0,
	129, 0, 0, 1085, 0, 0, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 1306,
	0, 1099, 0, 136, 0, 0, 1311, 1309, 1312, 1313,
	1314, 1315, 1316, 0, 1336, 0, 0, 0, 0, 1310,
	0, 1300, 1299, 0, 0, 0, 127, 0, 0, 4,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1302, 0, 0,
	0, 0, 1318, 1307, 1337, 1296, 1328, 1327, 0, 1326,
	1298, 1297, 0, 1308, 0, 0, 1339, 1338, 0, 0,
	1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079,
	1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 0, 1319, 0, 0, 0, 1440, 1438, 1439, 1442,
	1441, 0, 0, 0, 1333, 0, 1325, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 1303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1317, 1304, 0, 1322,
	1320, 1321, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1301,
	0, 0, 0, 1334, 1335, 0, 1306, 0, 0, 0,
	0, 0, 0, 1311, 1309, 1312, 1313, 1314, 1315, 1316,
	0, 1336, 0, 0, 0, 1305, 0, 0, 1300, 1299,
	1340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1326, 0, 0, 0,
	1308, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1319,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1303, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1317, 1304, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1301, 0, 0, 0,
	1334, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1305, 0, 0, 0, 0, 1340,
}
var sqlPact = [...]int{

	43767, -1000, 17, -1000, -1000, -1000, 203, -1000, -1000, -1000,
	-1000, 200, 197, 195, -1000, 190, 189, 188, 173, 172,
	170, 169, 168, 166, 165, 162, -1000, 161, -1000, -1000,
	-1000, -1000, 160, 159, 157, 156, 155, 153, 150, -1000,
	1043, 22601, 149, 147, 1254, -1000, 36594, 145, 143, 142,
	141, -1000, 1046, 139, 138, 26697, 975, 1555, 137, 136,
	133, 131, 128, 1141, 36255, 3887, 1409, 1112, 1667, 35913,
	22259, 1608, 1339, 35571, -1000, -1000, 35229, 126, 125, 117,
	116, 115, -1000, -1000, 34887, 112, 111, 110, 104, 101,
	96, 95, 92, 90, 89, 68, 67, 66, 64, -1000,
	63, 61, 60, -1000, 3346, 55, 54, 53, 1110, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 878, 154, -1000, 924, 394, 1360, 8501,
	1047, 1045, 1040, 1018, 1038, 38967, 36594, 51, -112, 49,
	-1000, 1975, 726, 19806, 43767, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26355,
	26013, 34545, 34203, 6380, 773, -1000, 9, 23281, 36594, -1000,
	78, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15217, 14863, 561, 78, -1000, -1000, -1000, -1000, -1000,
	33861, -1000, 38628, 33519, 33177, 1478, 32835, -1000, -1000, -1000,
	-1000, 32493, -1000, -1000, 1888, 1698, 1648, 25671, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	32154, 31812, 31470, 31128, 30786, 544, -1000, -1000, -1000, 18041,
	-1000, -1000, -1000, -1000, 48, -1000, 47, -1000, 44, 40,
	38, 36, -1000, 35, 26, -1000, 25, 22, -1000, 21,
	20, 30444, 825, 1277, -1000, -1000, 11, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 36594, -1000, 15923, -1000, 543,
	-1000, 1626, -1000, 15923, -1000, 1265, -1000, -1000, -1000, -1000,
	-1000, 36594, -1000, -1000, -1000, -1000, -1000, -1000, 2148, 1175,
	542, 30102, -1000, 1528, -1000, 618, 814, -1000, -1000, -1000,
	9560, 216, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1435, 23634, 1258, 1990, 1879, 2147, 1460, 1793, 1775,
	1772, 1755, 1708, 2142, 955, 2141, 1762, 1049, 2140, 1701,
	1249, 683, 2139, 1624, 1622, -1000, -1000, -1000, -1000, 963,
	-1000, -1000, -1000, 28053, -1000, -1000, 800, 934, 924, -1000,
	-1000, -1000, 1538, 1962, 1962, 1962, 2023, 367, 356, -1000,
	154, -1000, 1480, -1000, 1155, -1000, -1000, -1000, -1000, -1000,
	43448, -1000, -1000, 15923, 15923, 15923, 15923, 15923, 1118, 558,
	-1000, 541, 540, 7794, -1000, -1000, 2125, -1000, -1000, -1000,
	374, -1000, -1000, 15923, 78, -1000, -1000, -1000, -1000, 539,
	2135, -1000, 732, -1000, -1000, -1000, 623, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1660, 538, 537, 536,
	-1000, 532, -1000, -1000, 530, 529, 528, 522, 520, 519,
	510, 506, 502, 495, 493, 492, 489, 488, 485, 1022,
	-1000, 641, -1000, -1000, 641, 641, -1000, 462, 462, 463,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 462, -1000,
	-1000, -1000, 598, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 484, 1310, -1000, -1000, 1310,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 771, 37950, 7,
	36594, -1000, 483, 7, -1000, -1000, 481, -1000, 10972, 10972,
	-1000, -1000, -1000, -1000, -1000, 10266, 1826, -1000, 3794, -184,
	370, 599, -1000, 18747, 21565, -1000, -1000, 1020, 1840, 837,
	-1000, 969, 1836, 560, -1000, 1125, -1000, 1138, 1821, -170,
	1706, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 23973, 23281,
	9, -24, -1000, -1000, -1000, 6027, 43448, -1000, 43448, -1000,
	832, 20510, 78, -1000, -1000, -1000, -1000, 478, 1350, -1000,
	1349, 627, -1000, 381, -1000, 29760, 627, 1345, -1000, -1000,
	-1000, 28053, -1000, 36594, -1000, 36594, -1000, 901, -1000, 38289,
	120, 1819, -1000, -1000, 120, 1807, -1000, 118, 1806, -1000,
	-1000, 1215, 1802, -1000, -24, 1801, -1000, -1000, 15923, 10,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 726, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	29418, 22941, 985, 555, 43448, 2063, 44135, 23973, 43448, 22941,
	-1000, -1000, 36594, -1000, 15923, -1000, 2061, 1311, -1, -1000,
	-1000, -1000, -1000, -1000, 1386, 1388, 757, 1133, 9560, 9560,
	1919, -1000, 205, 6380, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 29076, -1000, -1000, -1000, 1143, 36594, -1000, -1000,
	1658, -1000, 22941, 36594, -1000, 36594, -1000, 36594, -1000, 36594,
	-1000, 36594, -1000, -1000, -1000, -1000, -1000, 3142, -1000, 1652,
	-1000, -1000, 36594, -1000, 1384, -1000, -1000, -1000, 28737, 28395,
	-1000, 944, 799, -1000, -1000, 127, -1000, 23973, 1968, 617,
	-1000, 1538, 1375, 1634, 686, 1256, 1470, 14509, 1422, 15923,
	154, -1000, -1000, 154, 154, 9207, -1000, -1000, -1000, 36594,
	-1000, 43968, 44135, 6380, 781, 15923, 15923, 15923, 15923, 15923,
	15923, 15923, 15923, 15923, 15923, 15923, 15923, 15923, 15923, 15923,
	15923, 15923, 15923, 15923, 15923, 15923, 15923, 15923, 15923, 15923,
	15923, 15923, 15923, 15923, 15923, 15923, 15923, 1387, 15923, 767,
	15923, 15923, 15923, 15923, 1255, 1089, 461, 1137, -1000, 2098,
	2098, 2098, 43573, 43573, 458, 558, -1000, 15923, -1000, 135,
	15923, 356, 41575, 8, 7441, -1000, -1000, -1000, 14156, 637,
	43448, 78, 6733, -1000, 2124, 1123, 1668, 1544, 476, 534,
	515, 507, 498, 15923, 15923, 13803, 13449, 13095, 16629, 12741,
	15923, 8147, 15923, 15923, 15923, 15923, 12387, 12033, -1000, 474,
	-1000, -1000, -1000, -1000, 2122, -1000, -1000, 2121, -1000, 780,
	778, 2118, -1000, -1, -1000, 37950, -1000, 36594, 7, 2060,
	36594, -1000, 84, -1000, 42429, -1000, 84, 5, -1000, 1437,
	1436, 20158, 1507, 1126, 1126, 1126, -1000, 464, 553, 599,
	5302, 11679, -1000, 27036, 1165, 220, 354, 18394, 1826, -1000,
	36594, -62, 978, -1000, 25329, 1957, 1951, 1947, 28053, 2042,
	135, 1965, 1612, 766, 28053, 1963, 765, 2040, 135, 1607,
	761, 36594, 6380, 1960, 596, -1000, 36594, -1000, -1000, -1000,
	1598, 4, -1000, -1000, 24990, 2055, 1798, 1784, -1000, 1042,
	-1000, 2054, 36594, 1261, 1342, -1000, -1000, 789, 1771, 631,
	351, 2053, 351, 20861, -1000, 36594, -1000, 36594, -1000, -1000,
	36594, -1000, 36594, -1000, 36594, 36594, -1000, 36594, 36594, -2,
	43448, 4010, 24651, 760, -1000, 665, 24990, 2560, -10, -1000,
	702, -1000, -1000, -1000, -1000, 273, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 463, 1022, 462, 462, 462, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 598, -1000, -1000, 641, 641, 641,
	-1000, -1000, -97, -1000, 1596, 621, -27, 706, -1, -1000,
	1310, -1000, 1209, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2134, -1000, 2107, -1000,
	-1000, 2117, -11, -1000, -11, -1000, 6380, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36594, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 601, -1000, -1000, -1000, -1000, -1000, -1000,
	36594, 36594, 36594, -1000, 28053, -1000, 1640, -1000, 1973, 1375,
	1634, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43448,
	-1000, 399, -1000, -1000, 43448, 980, 1458, -1000, 1458, -12,
	-1000, 42304, 1419, 36594, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 614, 446, 446, 855, 855,
	855, 855, 2038, 1229, 959, 797, 194, 194, 194, 194,
	194, 194, 194, 194, 221, 348, 348, 221, 221, 221,
	221, 221, 194, 194, 194, 43573, 3732, 292, 15923, 15923,
	759, 1069, 461, 292, 15923, 292, 292, 292, 292, -1000,
	1238, -1000, -1000, -1000, -1000, 1592, 456, 16629, 16629, -1000,
	-1000, -1000, 7794, 16982, -1000, -1000, -1000, -1000, 454, 15923,
	-1000, 41857, -221, 353, -107, -1000, 15923, 552, -98, -1000,
	885, -1000, 15923, -1000, -13, 15923, 15923, 15923, 352, -1000,
	349, -1000, 756, -1000, 749, 746, 744, -1000, 452, 1142,
	450, 438, 15923, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 43287, 39686, 347, -1000, 1587, -107, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 346, -1000, 337, -1000, 43162, -107,
	335, 3465, -1000, 16629, 16629, 16629, 7794, 436, 334, -1000,
	42143, -1000, 43001, 11325, 11325, 11325, 331, 42876, 15923, -107,
	39651, 4882, 4416, -28, -30, -1000, -33, -1000, 2116, -38,
	329, 613, 612, 328, -1000, -1000, 435, -43, 631, 10972,
	19453, 6380, -1000, 631, 10266, -1000, 20158, 20158, 1300, 1433,
	20158, -1000, -1000, -1000, -1000, 27036, 459, 599, 27036, -1000,
	2115, 1428, 322, -1000, -1000, -1000, 36594, 434, -1000, 599,
	321, 973, 36594, 36594, 36594, -1000, -1000, 1340, 37611, 1336,
	44135, 36594, -1000, 433, 430, 1415, 1413, 36594, 36594, 37272,
	36933, 36594, 1013, 135, -1000, 608, 426, 36594, 966, 607,
	36594, 135, -1000, 425, 36594, 958, -1000, 605, 1508, 1298,
	-1000, 829, 1586, 36594, 319, -44, -22, 44135, -1000, -1000,
	-1000, -1000, -1000, 36594, 500, 36594, 135, 36594, 36594, 2133,
	135, 36594, 1764, 1705, 579, 36594, 1470, 15923, 1008, -1000,
	19100, 654, 36594, 929, 77, -1000, -1000, -1000, 587, 36594,
	-1000, -1000, 120, 120, -1000, 118, 1215, -24, -1000, 15923,
	-1000, -1000, 36594, 23973, -50, -1000, -1000, 44135, -1000, 556,
	804, -1000, 2114, 626, 23973, 36594, 9560, 9560, -1000, 1451,
	-1000, -1000, 957, -1000, 1000, -1000, -1000, -1000, -1000, 9560,
	-1000, -65, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1106,
	-1000, -1000, -1000, 980, -1000, 15923, 2112, -1000, -1000, -1000,
	9207, -1000, -1000, -1000, 36594, -177, 15923, 292, 292, 15923,
	16629, 16629, -1000, 292, -1000, -1000, -1000, -1000, -1000, 1580,
	424, 15923, 44135, 4945, 4910, -51, -1000, 15923, -39, -1000,
	15923, -1000, 41537, -1000, -1000, 479, 1765, -1000, 15923, 42715,
	317, 10619, -1000, 42590, -20, -20, -1000, 2130, 1362, 1247,
	1025, 912, 2110, -1000, 21213, 635, 1200, 41412, 43968, 44135,
	-1000, 15923, -1000, -1000, 1577, 15923, -1000, 43968, 44135, 16629,
	16629, 16629, 16629, 16629, 16629, 16629, 16629, 16629, 16629, 16629,
	16629, 16629, 16629, 16629, 16629, 16629, 16629, 16629, 1441, 16629,
	2090, 2090, 2090, -45, 15923, -1000, 1630, 1577, 15923, 15923,
	44135, 316, 315, 314, -1000, 15923, -107, 15923, 15923, 15923,
	-1000, -1000, -1000, 311, -1000, 2105, -1000, -1000, -1000, -1000,
	2560, -1000, 1541, -1000, -134, -1000, 1826, -1000, 1541, -1000,
	-1000, 1300, -1000, 423, 15923, 20158, -1000, 551, -1000, -64,
	-1000, 27036, -1000, 550, -222, -1000, 585, -1000, 599, 420,
	36594, 27036, -1000, -1000, -1000, 740, 739, 1760, -1000, 1333,
	-1000, 659, -1000, 996, 15923, 17688, 419, 417, 1101, -1000,
	1754, 1215, 1728, 1215, -1000, -62, 976, -1000, 21917, 15923,
	-1000, 737, 21917, -1000, -1000, 15923, -1000, 736, 21917, 626,
	1554, 796, -1000, 827, -1000, 1482, -1000, 24990, 414, 36594,
	411, -1000, 410, -1000, -1000, -1000, 409, 36594, 1399, 579,
	24312, -1000, 627, 929, -1000, 43448, -1000, 929, 8854, 1956,
	-74, -1000, -1000, -1000, 631, 20861, 20158, 10266, -80, -1000,
	-1000, -1000, -1000, 43448, -65, 1924, 1924, -1000, 2103, -1000,
	549, 310, -1000, 27714, -1000, -65, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 36594, 6380, 36594, 36594, 1212, 41130, -1000,
	1955, 6380, 2070, 292, 4153, 3505, 15923, 44135, 43835, -83,
	15923, 15923, -1000, 309, 15923, 547, 43448, -1000, -1000, -1000,
	43448, 15923, 2129, 15923, 299, 298, 289, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 278, -1000, -1000, 39306, 15923,
	277, -1000, 276, 271, 43448, 1630, 43448, -1000, -1000, 695,
	695, 926, 926, 926, 926, 2090, 1786, 1449, 1479, 272,
	272, 272, 477, 453, 453, 272, 272, 272, 1553, 1407,
	408, 39749, 15923, 270, -1000, -1000, 43448, 43448, 269, -1000,
	-1000, -1000, -107, 248, 41092, 40967, -1000, 257, 256, 1527,
	2009, -1000, 20158, 1527, -1000, 36594, 43448, -1000, -184, -1000,
	2099, -1000, -1000, 1428, -1000, 5669, 27036, 36594, -85, -1000,
	36594, 36594, 36594, 1717, -1000, 1718, -1000, 40685, -86, -1000,
	344, 1986, 15923, -1000, -1000, 407, 17688, 36594, -1000, 1459,
	1442, 689, 36594, -1000, 36594, -1000, 36594, 36594, 36594, -1000,
	406, 78, -95, 36594, -1000, -105, 36594, -1000, -1000, 23973,
	777, -1000, 1076, 1488, -1000, 17688, 404, 36594, 24990, 2052,
	17688, 1252, 1403, 579, 24312, -1000, 789, -1000, -1000, -67,
	-1000, 418, 135, 929, -1000, -75, -1000, 584, 1909, -1000,
	1903, 516, -1000, -1000, -76, 403, -1000, 583, 581, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1955, 15923, 15923, 43835,
	-111, -1000, 292, 292, -1000, 40647, -1000, 43448, -1000, 42590,
	-1000, -1000, -1000, -1000, 1074, -1000, 40522, -1000, -1000, -1000,
	-1000, 16629, 1545, 402, 44135, 40240, -1000, -1000, 15923, -1000,
	-1000, -1000, -1000, 629, 15923, 15923, 1826, 629, -113, 599,
	-1000, -1000, -1000, 2091, -1000, -128, -1000, -1000, -1000, -1000,
	36594, -1000, 36594, -1000, 6380, 36594, 1540, 1307, -1000, -1000,
	1408, 401, 16629, 36594, -1000, 1081, 17688, 1955, 78, 6380,
	1955, 40202, 6733, -131, -136, 1306, -1000, 1292, 15923, -1000,
	44135, 1215, 1215, -1000, 735, 722, 15923, 716, -1000, 711,
	-1000, -77, 21917, -1000, -1000, 2006, 1082, -137, 17688, -138,
	253, 135, -139, 36594, -1000, 579, 24312, -1000, 1705, 1871,
	36594, 1935, -1000, -1000, 400, 398, 397, -1000, 27375, 27375,
	23973, 23973, -1000, 292, 292, -1000, -1000, 251, 1200, 2002,
	-1000, 313, 16629, 44135, -144, -1000, 40077, -1000, 36594, 43448,
	-107, -1000, -1000, 27036, 460, -1000, -1000, 1378, -1000, -1000,
	36594, 1321, -1000, -1000, 15923, 39749, 396, 1482, 395, -1000,
	-1000, -1000, -1000, -1000, -1000, 1986, -13, -1000, 994, -1000,
	-1000, 43448, 1982, -1000, -1000, 36594, 36594, -20, 393, 392,
	-1000, 1054, 36594, 1081, -145, -1000, 1482, -1000, 1081, 389,
	24312, -1000, 1399, 795, -146, 36594, -1000, -1000, 7086, 23973,
	23973, -1000, -147, -1000, -1000, -1000, 949, 15923, 313, -155,
	-1000, -1000, -96, -1000, 2047, -1000, -1000, -1000, -1000, 1704,
	39814, 1371, 36594, -1000, 36594, 1955, 250, 36594, 663, 6380,
	-1000, -1000, 247, 15923, 15923, 387, 384, 383, 1482, 1081,
	-1000, 1482, 17688, -1000, 1403, 879, -1000, 631, -1000, -158,
	-166, -1000, 234, 16276, 16276, -107, -1000, 36594, 382, 1689,
	-1000, 1210, 1191, 225, -181, -1000, -1000, 381, -1000, 15923,
	-1000, 2129, -182, -188, 36594, 36594, 36594, -1000, 1482, -1000,
	-190, -1000, 20861, -1000, 626, 626, -1000, -1000, -1000, 17335,
	1149, 922, 42018, -1000, -1000, -1000, 36594, -1000, 1250, 1235,
	913, -1000, -1000, -1000, -1000, -1000, 1371, 43448, -1000, -1000,
	-191, -193, -196, -1000, 1081, -178, -1000, -1000, 2068, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1885, -1000, 682, 1288,
	1288, 1210, 380, 379, 1166, 1482, -1000, 15570, -1000, 2077,
	-1000, -1000, 1438, -1000, -1000, 1063, 1062, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 222, 6380, 219, 6380, -1000,
	650, -1000, 648, 376, 1391, -46, 9913, 762, 369, -129,
	-1000, -198, -1000, 43448, -1000, -1000, 375, -1000, 9913, 1063,
	-1000, 9913, 9913, -199, -1000, -1000, -204, -1000, -52, 1062,
	-167, -1000, -1000, 1062, -1000,
}
var sqlPgo = [...]int{

	0, 2580, 2578, 1750, 1973, 2577, 2576, 2575, 2573, 2572,
	2571, 2568, 2566, 2565, 2564, 2563, 2562, 2561, 2560, 2559,
	2557, 2556, 2555, 2554, 1968, 2551, 1966, 2550, 2549, 2548,
	2547, 2546, 2544, 1962, 2541, 2540, 2538, 2530, 2528, 2526,
	2520, 1960, 2512, 1954, 2508, 2507, 2506, 2505, 2504, 1951,
	2500, 84, 118, 1941, 2497, 2494, 1896, 1885, 1883, 2493,
	1877, 2492, 2489, 1855, 1813, 2484, 79, 2482, 2481, 2479,
	1783, 1737, 2478, 2476, 2474, 155, 2473, 1735, 2466, 2459,
	2458, 2457, 2455, 2454, 2453, 2451, 2450, 2449, 2447, 2446,
	2445, 2442, 2438, 2437, 2434, 2432, 2430, 164, 2429, 2427,
	1731, 1721, 2422, 2415, 41, 38, 17, 51, 30, 151,
	2933, 143, 2413, 2412, 2411, 2410, 2407, 2406, 63, 106,
	102, 2405, 103, 2403, 2402, 82, 39, 27, 25, 2401,
	94, 2399, 2394, 2679, 33, 2390, 2389, 134, 2386, 157,
	29, 2567, 154, 156, 119, 128, 2385, 2381, 2380, 44,
	122, 6, 4, 3, 8, 1, 2377, 2, 5, 2376,
	2372, 19, 86, 49, 2370, 28, 18, 2364, 2363, 131,
	2356, 57, 96, 1595, 105, 126, 361, 100, 2350, 60,
	22, 66, 2349, 2348, 160, 43, 2345, 37, 83, 147,
	116, 2343, 68, 161, 132, 81, 130, 135, 2342, 2340,
	2325, 107, 2323, 121, 87, 2320, 2318, 64, 2317, 99,
	140, 2315, 145, 113, 2314, 2313, 93, 2312, 125, 2308,
	2307, 163, 152, 114, 15, 55, 62, 13, 1581, 1572,
	139, 90, 46, 53, 2298, 1184, 1015, 1449, 45, 111,
	92, 59, 108, 58, 89, 146, 40, 2297, 2294, 142,
	2290, 2284, 2248, 2246, 2245, 109, 2242, 2241, 36, 2239,
	69, 35, 61, 88, 50, 221, 127, 120, 153, 104,
	2238, 78, 124, 2237, 72, 2233, 2231, 1523, 117, 2230,
	2225, 2223, 1440, 1346, 1173, 54, 2220, 2219, 1007, 836,
	2218, 2217, 91, 2214, 115, 112, 98, 138, 150, 16,
	2213, 123, 101, 2212, 34, 31, 0, 331, 21, 2210,
	129, 73, 2209, 2207, 2206, 2204, 32, 11, 7, 10,
	14, 12, 48, 26, 2203, 2202, 133, 75, 67, 2201,
	159, 2200, 2196, 2194, 52, 2189, 24, 2188, 20, 2183,
	2181, 23, 9, 2180, 2176, 148, 2174, 95, 2172, 2005,
	2171, 149, 2170, 2169, 1726, 2165, 97, 110,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 120, 120, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 117, 117, 122, 122, 122, 124, 124,
	121, 121, 116, 116, 24, 24, 64, 64, 107, 57,
	57, 57, 304, 304, 305, 305, 103, 103, 104, 104,
	104, 104, 105, 105, 106, 106, 106, 32, 32, 32,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 41, 41, 42, 42, 42, 42,
	42, 42, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 48, 48, 48, 46, 46, 46, 45,
	45, 45, 44, 44, 44, 47, 47, 47, 175, 175,
	174, 174, 178, 178, 49, 49, 49, 49, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 52, 52, 52, 52, 52, 52,
	52, 273, 273, 272, 50, 50, 247, 247, 53, 53,
	202, 202, 54, 54, 54, 54, 54, 55, 55, 65,
	65, 345, 345, 345, 349, 349, 350, 350, 351, 351,
	351, 351, 351, 351, 351, 347, 347, 60, 60, 60,
	60, 61, 61, 61, 62, 62, 102, 102, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 29, 30, 71,
	71, 71, 73, 70, 70, 70, 72, 72, 72, 72,
	74, 74, 75, 75, 75, 75, 75, 76, 76, 298,
	296, 296, 297, 297, 147, 147, 147, 147, 147, 148,
	148, 148, 303, 303, 303, 303, 303, 303, 302, 302,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 89, 89, 89,
	97, 97, 97, 97, 97, 97, 97, 78, 78, 83,
	83, 83, 83, 83, 79, 79, 84, 84, 85, 85,
	86, 86, 86, 86, 86, 86, 80, 80, 80, 80,
	88, 88, 88, 88, 87, 87, 93, 93, 93, 93,
	93, 93, 90, 90, 90, 90, 91, 91, 91, 94,
	94, 94, 94, 81, 81, 82, 82, 95, 95, 96,
	96, 96, 96, 96, 92, 92, 92, 346, 346, 348,
	348, 58, 58, 36, 36, 37, 37, 149, 149, 150,
	150, 226, 226, 226, 226, 151, 151, 123, 123, 123,
	152, 152, 153, 153, 154, 154, 154, 156, 156, 157,
	157, 158, 158, 158, 155, 155, 155, 225, 314, 314,
	315, 315, 315, 315, 315, 315, 316, 316, 316, 316,
	316, 316, 316, 312, 312, 313, 310, 310, 311, 311,
	311, 311, 352, 352, 224, 224, 161, 161, 317, 317,
	317, 317, 318, 318, 318, 318, 318, 321, 320, 319,
	319, 319, 319, 319, 259, 259, 259, 38, 38, 99,
	99, 39, 39, 129, 129, 40, 40, 35, 35, 35,
	206, 206, 165, 165, 264, 264, 264, 140, 140, 118,
	118, 118, 17, 13, 13, 13, 13, 13, 13, 23,
	23, 21, 21, 207, 207, 208, 208, 59, 59, 63,
	63, 68, 68, 98, 98, 98, 98, 98, 98, 25,
	25, 25, 25, 31, 31, 31, 31, 67, 67, 354,
	354, 136, 136, 136, 136, 137, 137, 221, 221, 222,
	222, 355, 355, 223, 223, 223, 131, 130, 132, 132,
	34, 34, 34, 125, 125, 126, 126, 127, 127, 128,
	128, 356, 356, 56, 56, 56, 101, 101, 143, 143,
	218, 218, 218, 220, 220, 219, 219, 219, 192, 192,
	192, 100, 100, 170, 170, 180, 180, 181, 181, 270,
	182, 182, 66, 66, 110, 110, 108, 108, 108, 108,
	108, 108, 108, 108, 109, 109, 109, 111, 111, 111,
	111, 111, 111, 111, 114, 114, 114, 115, 115, 115,
	113, 113, 327, 327, 327, 330, 330, 326, 328, 328,
	329, 329, 353, 353, 193, 193, 193, 160, 159, 159,
	163, 163, 162, 164, 164, 263, 263, 263, 190, 190,
	189, 189, 189, 189, 211, 211, 209, 209, 210, 210,
	214, 214, 215, 215, 215, 216, 216, 217, 217, 188,
	188, 243, 243, 213, 213, 212, 112, 112, 112, 169,
	169, 169, 171, 171, 233, 233, 233, 234, 234, 232,
	232, 232, 232, 265, 265, 265, 265, 265, 265, 265,
	265, 343, 343, 343, 344, 344, 262, 262, 266, 266,
	266, 266, 266, 266, 260, 260, 260, 260, 261, 261,
	271, 271, 196, 196, 196, 196, 194, 194, 195, 195,
	267, 267, 267, 267, 191, 191, 268, 268, 268, 227,
	227, 274, 274, 274, 292, 292, 168, 168, 168, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	276, 276, 276, 276, 278, 278, 278, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 291, 291, 291, 291, 291,
	279, 279, 286, 286, 287, 287, 288, 289, 280, 280,
	281, 281, 282, 283, 290, 290, 290, 290, 294, 294,
	284, 284, 284, 284, 284, 285, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	204, 204, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 237, 237, 237, 237, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 322,
	322, 322, 322, 322, 322, 322, 322, 324, 324, 325,
	325, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 331, 331, 332, 332, 334, 334, 335, 335, 336,
	337, 337, 337, 338, 339, 339, 333, 333, 340, 340,
	340, 341, 341, 342, 342, 342, 342, 342, 249, 249,
	250, 251, 257, 257, 257, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 138, 138, 138, 138, 138, 177, 177, 176, 176,
	246, 246, 244, 244, 248, 248, 197, 197, 293, 293,
	293, 293, 293, 293, 293, 198, 198, 198, 205, 199,
	199, 200, 200, 200, 200, 200, 240, 241, 201, 201,
	201, 242, 242, 252, 256, 256, 255, 254, 254, 253,
	253, 230, 230, 231, 231, 229, 228, 185, 185, 184,
	184, 183, 183, 357, 357, 258, 258, 186, 186, 187,
	179, 179, 269, 269, 269, 269, 172, 172, 145, 145,
	173, 173, 141, 141, 144, 144, 142, 142, 142, 142,
	166, 166, 167, 167, 139, 139, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 295, 295, 295,
	245, 133, 133, 133, 134, 134, 135, 135, 300, 300,
	300, 301, 301, 301, 301, 299, 299, 299, 299, 299,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 3, 1,
	2, 1, 2, 2, 7, 3, 2, 2, 2, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 1, 3,
	1, 2, 2, 3, 2, 2, 5, 3, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 1, 3, 1, 5, 2, 3, 0, 3, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 2, 6,
	2, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 3, 1, 4, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 4, 3, 5, 3,
	4, 5, 2, 3, 3, 3, 4, 2, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 2, 3, 7,
	7, 7, 4, 5, 5, 5, 5, 2, 0, 2,
	0, 3, 2, 8, 10, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	1, 0, 9, 9, 6, 7, 5, 3, 5, 1,
	3, 1, 1, 1, 10, 11, 9, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 3, 6, 4,
	2, 4, 3, 3, 0, 6, 3, 11, 14, 4,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 8, 10, 8, 10, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 0, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 2,
	0, 8, 3, 2, 0, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 4, 4,
	2, 3, 5, 5, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 1, 0,
	2, 2, 1, 1, 1, 0, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 1, 0, 2, 2, 2, 3, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 3, 3, 1, 5,
	5, 0, 2, 3, 1, 3, 2, 0, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 3, 3, 1, 3, 3, 1, 3,
	3, 1, 1, 3, 3, 1, 1, 6, 6, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 5,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 3,
	1, 3, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 382, -4, -24, -26, -29, -32,
	-33, -54, -41, -42, -43, -53, -49, -55, -56, -57,
	-58, -50, -64, -63, -65, -68, -66, -59, -60, -69,
	-77, -98, -99, -100, -101, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 47, -30, 71, -34, -35, -36,
	-37, -38, 73, -39, -40, 94, -329, 98, -44, -45,
	-46, -48, -47, 102, 109, 112, 134, 145, 231, 237,
	258, 260, 262, 269, -108, -110, 256, -61, -62, -70,
	-71, -72, -73, -102, 282, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -88, -89, -90, -91, -92,
	-93, -94, -95, -96, 285, -25, -31, -67, 324, -11,
	-12, -15, -14, -16, -13, -20, -22, -19, -21, -23,
	-17, -18, -10, 111, -327, -111, -109, 379, 257, 333,
	35, 294, 61, 105, 264, 349, 356, -114, -112, -113,
	-115, 274, 341, 304, 383, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 2, 304,
	344, 87, 153, 242, -345, 2, -173, 304, 87, -142,
	-133, 372, 4, -306, -308, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 67,
	64, 65, 66, 69, 71, 72, 75, 76, 77, 85,
	86, 88, 90, 94, 96, 98, 101, 102, 104, 109,
	111, 110, 112, 122, 123, 128, 130, 135, 141, 142,
	145, 146, 154, 157, 159, 152, 169, 170, 171, 175,
	176, 177, 180, 179, 184, 185, 188, 189, 192, 194,
	196, 197, 200, 198, 202, 203, 205, 204, 210, 212,
	213, 215, 218, 221, 224, 227, 228, 229, 230, 231,
	233, 235, 237, 239, 240, 241, 242, 243, 245, 246,
	248, 249, 250, 251, 252, 256, 254, 255, 257, 258,
	259, 260, 262, 264, 265, 267, 283, 284, 295, 269,
	270, 271, 272, 273, 278, 275, 276, 279, 280, 282,
	285, 287, 290, 293, 294, 296, 299, 300, 297, 292,
	303, 305, 306, 307, 308, 309, 310, 311, 312, 319,
	320, 324, 325, 326, 327, 330, 331, 332, 333, 335,
	338, 339, 340, 345, 350, 351, 352, 353, 354, 28,
	36, 37, 38, 39, 41, 42, 45, 46, 51, 52,
	53, 56, 89, 91, 92, 108, 113, 114, 124, 125,
	126, 136, 138, 147, 148, 151, 158, 160, 161, 162,
	163, 164, 166, 173, 174, 182, 199, 209, 211, 222,
	226, 234, 236, 244, 266, 277, 288, 289, 298, 301,
	314, 315, 316, 321, 322, 337, 341, 342, 382, 382,
	2, 170, 241, -141, -133, 87, 382, 382, 382, 382,
	304, 2, 275, 334, 344, -206, 87, 329, 382, 382,
	-133, 237, 22, 2, 96, 157, 332, 331, 22, 233,
	276, 306, 308, 2, 382, 382, 382, 382, 382, 2,
	344, 304, 153, 87, 334, -133, 2, -52, 2, 379,
	-51, -4, -33, -43, -53, -49, -24, -26, -41, -57,
	-56, -58, -60, -64, -63, -66, -70, -71, -77, -100,
	-101, 282, 111, -349, 2, 22, -350, -351, 73, 102,
	134, 274, 157, 96, 331, 304, 2, 170, 2, -133,
	2, -345, 2, 170, 2, -349, 2, -133, 2, -137,
	2, 269, -133, 382, 382, 382, 382, 382, 189, 55,
	266, 279, -75, 320, -74, 314, -298, -76, 2, -174,
	200, -133, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 2,
	-97, 279, 34, 55, 22, 60, 88, 135, 153, 154,
	176, 68, 69, 240, 189, 171, 319, 177, 280, 305,
	320, 73, 335, 309, 110, 4, 87, 200, 281, 314,
	382, 382, 382, -353, 2, 304, 271, 285, -109, -111,
	-110, -162, -163, 328, 165, 107, 220, -108, -110, 2,
	-327, -97, 279, 2, 55, 22, -296, 2, -258, 216,
	-235, 93, -237, 370, 371, 365, 206, 355, -249, -239,
	-252, 108, 266, 379, -141, -238, 385, 9, -324, -110,
	29, -250, -251, 49, -133, 7, 8, 5, 6, -139,
	-276, -245, -285, 323, 115, 208, -322, -323, 4, -306,
	-300, -277, -287, -281, -284, 166, 58, 79, 80, 83,
	81, 84, 281, 334, 50, 28, 113, 114, 226, 234,
	301, 321, 322, 147, 209, 148, 56, 136, 182, 101,
	37, 39, 41, 42, 51, 52, 89, 91, 92, 124,
	125, 126, 158, 160, 161, 162, 163, 164, 211, 244,
	288, 298, 315, 316, 342, -307, -288, -289, -282, -283,
	74, 116, 133, 156, 149, 168, 172, 183, 186, 195,
	201, 223, 225, 263, 286, -290, -354, 2, 320, 320,
	2, -354, 2, -354, 2, -136, 2, 320, 317, -330,
	245, -326, -133, -330, 382, 382, 384, 382, -159, -160,
	2, 22, 99, -187, 2, 379, -265, 2, 377, -267,
	-141, -110, -266, 379, 217, -3, 2, -267, 147, -141,
	2, -267, 147, -141, 2, -133, 2, -144, 147, -141,
	-299, 4, -306, -308, -307, -309, 58, 22, 24, 25,
	26, 27, 29, 30, 31, 32, 43, 49, 50, 54,
	57, 59, 68, 73, 78, 79, 81, 80, 82, 83,
	84, 93, 95, 97, 99, 100, 103, 105, 107, 115,
	117, 129, 131, 132, 134, 137, 139, 150, 153, 155,
	165, 167, 178, 181, 187, 190, 191, 206, 207, 208,
	214, 216, 217, 219, 220, 232, 238, 247, 261, 274,
	281, 291, 302, 304, 313, 317, 318, 323, 328, 329,
	334, 336, 343, 344, 346, 347, 348, 349, 317, 384,
	-173, -166, -133, -229, -228, 381, -235, 2, -235, 2,
	132, 379, -184, -185, -228, -229, 2, -174, 147, -174,
	147, -133, 2, -174, 2, 153, -133, 147, 2, -133,
	22, 132, 2, 167, 2, 167, 2, -268, 2, -267,
	-175, 147, 2, -174, -175, 147, 2, -145, 147, 2,
	-144, -133, 147, 2, -166, 147, 2, -202, 379, -273,
	2, -272, -301, 4, -306, -308, -307, 341, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	279, 216, 384, -174, -235, -247, 379, 132, -235, 216,
	-133, 2, 283, 2, 379, -75, 53, 320, -222, 2,
	-223, -130, -131, -132, 169, 239, 243, 354, 317, 360,
	132, -296, -178, 381, -97, 2, -304, 2, -302, 9,
	-301, 5, 283, 2, 240, 280, 55, 132, 2, 2,
	-346, 2, 216, 132, 2, 132, 2, 132, 2, 132,
	2, 132, 2, 2, 240, 280, 2, 129, 2, 319,
	2, 2, 132, 2, 169, 239, 295, 2, 304, 344,
	2, 132, 132, 354, 2, -191, -267, 304, 354, 22,
	-162, -163, -212, -189, 129, -209, -210, 187, 117, 214,
	-193, 22, 99, -193, -193, 44, 380, 380, -97, 283,
	2, 10, 11, 57, 33, 370, 371, 372, 373, 127,
	374, 375, 368, 369, 367, 358, 359, 362, 363, 364,
	70, 361, 360, 63, 193, 268, 118, 119, 120, 121,
	253, 13, 14, 15, 26, 219, 186, 355, 149, 286,
	365, 16, 17, 18, 168, 36, 150, -138, -146, -235,
	-235, -235, -235, -235, 225, -183, -230, 377, -110, 379,
	379, -110, -235, -176, 379, 7, -110, -244, 377, -253,
	-235, -184, 379, 5, 379, 5, -331, 350, 129, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 236, -294,
	345, -294, -294, -278, 379, -278, -279, 379, -278, 351,
	356, 379, -221, -222, -221, 317, -137, 384, -330, -167,
	379, -187, -179, -269, -235, 372, -179, -186, -258, 74,
	-196, 172, 201, 133, 183, 263, 156, 7, -52, -232,
	385, 379, 372, -262, 356, -110, -266, 379, -265, -141,
	379, -120, 254, -119, 21, 23, 102, 339, 108, 292,
	310, 111, 270, 254, 108, 111, 254, 292, 310, 270,
	254, 108, 385, 111, -304, -142, 384, -299, 372, 296,
	380, -172, -141, -185, 379, -161, 206, 206, -129, -328,
	349, -161, 379, -134, 147, 2, -133, -328, 206, -268,
	-143, -141, -143, 282, -133, 30, -122, 384, 48, 259,
	108, -122, 108, -122, 384, 108, -122, 108, 108, -176,
	-235, 380, 384, -345, -351, 73, 379, 30, -246, -274,
	-275, -277, -286, -280, -284, -285, 40, 46, 45, 174,
	173, 311, 199, 277, 289, 337, 151, 38, 215, 159,
	4, 158, 160, 161, 162, 163, 164, 288, 37, 244,
	125, 126, 124, 101, 92, 91, 211, 42, 41, -288,
	-289, -282, -283, 89, 315, 316, 166, 39, 52, 51,
	342, 298, -305, -304, -345, -298, -176, 30, -222, 2,
	-355, 384, 185, -148, 192, 205, 141, 217, 352, -303,
	5, 4, -245, -259, 93, 189, -285, 8, 371, -295,
	7, 370, -297, -296, -297, 77, 381, -299, -174, 22,
	284, 2, -298, -348, 129, -345, -298, -298, -298, -298,
	-298, 279, -52, 129, -133, 185, -298, 2, -298, 2,
	304, 153, 304, -122, 384, -304, 64, 65, 354, -212,
	-189, -190, -189, -213, -212, 331, -210, -209, -214, -235,
	22, -217, 123, 202, -235, -237, -109, -109, -109, -164,
	-263, -235, 238, 153, -298, -292, -274, -291, 249, 250,
	248, 252, 251, -274, -299, 314, -235, -235, -235, -235,
	-235, -235, -235, -235, -235, -235, -235, -235, -235, -235,
	-235, -235, -235, -235, -235, -235, -235, -235, -235, -235,
	-235, -235, -235, -235, -235, -235, -235, -235, 186, 149,
	286, 36, 150, -235, 317, -235, -235, -235, -235, 198,
	206, 208, 323, 115, 330, 99, 212, -357, 302, 32,
	-242, -110, 379, -257, 27, 291, 22, -249, 266, 379,
	-230, -235, -231, -177, -176, 380, 384, -177, -248, -244,
	-256, -255, 346, 380, -176, 343, 22, 99, 372, 2,
	7, -203, 353, 197, 90, 142, 196, -204, 273, -332,
	122, 137, 379, 380, 2, 380, 2, 380, 2, 380,
	2, -235, -235, -197, 2, -293, -176, 4, 353, 197,
	90, 142, 196, 273, -197, 2, -198, 2, -235, -176,
	-199, -236, -237, 370, 371, 365, 379, 266, -200, 2,
	-235, -177, -235, 43, 181, 318, -201, -235, 132, -176,
	-235, -235, -235, -176, -176, 2, -176, 2, 379, 7,
	7, 314, 314, 7, -137, -326, 30, -166, -169, 384,
	132, 30, 4, -169, 384, 380, 172, 172, -265, -196,
	172, -194, 223, -194, -194, -343, 379, 378, -262, -299,
	377, 386, -177, 2, -261, -260, 30, -133, 221, 380,
	-141, 384, 317, -207, 68, 59, -225, 147, 59, -310,
	-133, 68, -311, 54, 329, 238, 131, -207, 68, -207,
	68, 68, -267, 33, -66, 66, 132, 317, -267, 66,
	317, 33, -66, 132, 317, -144, -299, 66, -271, 357,
	-133, 132, 380, 384, -149, -166, -150, -133, -226, -225,
	-312, -313, -310, 153, 329, 116, 30, 108, 108, 230,
	30, 216, 206, -125, 307, 108, -227, 347, -218, -66,
	379, 93, 30, -218, -180, -181, -270, -182, -141, 379,
	-133, -174, -175, -175, -144, -145, -133, -166, 380, 384,
	-52, -272, 317, 336, -150, -51, 380, 384, -168, 29,
	377, -203, 379, -271, 384, 132, 360, 317, 380, 320,
	-223, -147, 243, 290, 255, 278, 8, 7, 7, 384,
	-299, -347, -133, 279, -52, -141, -144, -141, -267, 129,
	65, -190, -213, -215, -295, 379, 371, -216, 266, 267,
	384, -118, 31, 97, 175, -141, 354, -235, -235, 317,
	-357, 302, -242, -235, 198, 208, 323, 115, 330, 99,
	212, 132, 379, -236, -236, -176, -239, 379, -176, 378,
	388, 380, -235, 378, 378, 384, -254, -255, 103, -235,
	-163, 384, -162, -235, -176, -176, 380, 380, 317, 317,
	317, 317, 379, -337, 224, 379, 379, -235, 30, 384,
	380, 132, 380, 380, -205, 232, 380, 10, 11, 370,
	371, 372, 373, 127, 374, 375, 368, 369, 367, 358,
	359, 360, 63, 193, 268, 13, 14, 15, 168, 150,
	-236, -236, -236, -176, 379, 380, -240, -241, 132, 129,
	30, -201, -201, -201, 380, 132, -176, 384, 384, 384,
	380, 380, 380, 7, 380, 384, 380, 354, 354, 380,
	379, 380, -227, -269, -171, 2, -265, -299, -227, -258,
	-265, -265, -195, 336, 216, 172, -265, -260, 380, -344,
	7, -262, -261, 7, -234, -233, 130, 204, 380, -133,
	379, -262, 380, -119, -141, -133, -133, 206, -225, 147,
	-124, 206, -274, -133, 379, 379, 175, 175, -133, -133,
	147, -133, 147, -133, -133, -120, 254, -66, 354, 379,
	-141, 254, 354, -133, -66, 379, -133, 254, 354, -103,
	146, 212, 296, 132, -141, 380, 380, 384, -134, 153,
	-134, -66, -174, -174, 5, -66, -141, 108, -126, 104,
	-356, 360, -133, -211, -209, -235, -192, -220, 261, 216,
	-172, 341, -133, -192, -170, 384, 132, 360, -172, -122,
	-122, -122, -122, -235, -347, -304, 380, -274, 377, 378,
	7, 7, -106, 349, -304, -347, -296, -296, -130, 327,
	62, 243, -296, 384, 242, 87, 304, -216, -235, -263,
	-141, 385, -235, -235, -236, -236, 132, 379, -235, -246,
	26, 26, 380, -177, 384, -231, -235, 380, -244, 105,
	-235, 313, 380, 343, -163, -163, -163, 5, 197, 142,
	196, -204, 196, -204, -204, 7, -338, -133, 379, 347,
	-162, 380, -292, -274, -235, -240, -235, -292, -274, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, 99, 206,
	212, -236, 384, -177, -241, -240, -235, -235, -274, 380,
	380, 380, -176, -235, -235, -235, 380, 7, -51, -188,
	137, -271, 384, -188, -195, 379, -235, -265, 378, 380,
	384, -261, 378, 384, 387, 360, -262, 379, -166, -260,
	317, 317, 108, 206, 338, -314, -311, -235, -165, -264,
	-133, -325, 379, -322, -323, -139, 379, 379, -117, 102,
	282, -208, 108, -122, 108, -122, 317, -207, 68, -238,
	-139, -133, -176, 317, -238, -176, 317, -238, -106, 132,
	303, 296, -151, 152, -226, 379, -134, 379, 379, -161,
	379, -133, -127, 180, -356, -302, -328, -192, -192, -179,
	207, 67, 380, -227, -181, -171, -258, 380, -107, 75,
	-107, 7, 378, 380, -105, 218, -104, -133, 5, -133,
	-299, -133, -141, 217, 380, -118, -299, 26, 26, -235,
	-246, 380, -235, -235, 380, -235, 378, -235, 5, -235,
	380, 380, 380, 380, -339, -133, -235, 380, 380, 380,
	-241, 132, 99, 212, 379, -235, 380, 380, 384, 380,
	380, 380, 380, -243, 139, 44, -265, -243, -166, -232,
	7, -233, -299, 377, -261, -166, 380, -133, -133, -225,
	108, -315, 68, -316, 57, 116, 73, 206, 208, 329,
	238, 54, 93, 247, 380, 380, 384, -140, -184, 57,
	-140, -235, 379, -165, -166, 206, 93, 206, 93, 86,
	325, -133, -133, -141, -133, -133, 379, 380, -141, 380,
	-133, -305, 314, -152, -153, 229, 150, -165, 379, -166,
	-149, 30, -165, 216, -128, 179, -356, -302, -125, -219,
	379, 216, -66, -192, 360, 86, 86, 378, 384, 379,
	360, 360, -118, -235, -235, 380, 380, -163, -333, 229,
	380, -236, 132, 379, -246, 380, -235, -334, 348, -235,
	-176, -334, 380, -262, 7, 380, -225, -133, -299, -133,
	116, 147, 208, 175, 379, -236, -141, -224, -352, 72,
	300, -264, -118, -299, -118, 380, -176, 380, 380, 208,
	208, -235, -274, -122, -122, 317, 317, -176, 317, 317,
	-238, 44, 227, 380, -165, 380, 380, -66, 380, -141,
	-356, -302, -126, 100, -166, 68, -187, -110, 379, 379,
	379, -104, -105, -304, -304, 380, -163, 44, -236, -246,
	380, 380, -335, -336, -133, -261, 378, -316, -134, 206,
	-235, -135, 379, -151, 379, -140, -163, 247, -121, 57,
	-133, -133, -163, 379, 379, 188, 242, -141, -224, 380,
	-151, -224, 379, -302, -127, 331, 207, 380, -133, -305,
	-305, 380, -340, 242, 267, -176, 380, 384, 30, 108,
	380, -317, 194, -133, -166, -118, 380, -141, -116, 336,
	-299, 380, -176, -176, 379, 379, 379, -151, -224, -151,
	-165, -128, 282, -227, 380, 380, 380, -341, -342, 36,
	326, 77, -235, -341, -336, -338, 116, -318, -321, -320,
	216, 133, 228, 287, 380, 380, -161, -235, 380, 380,
	-166, -166, -166, -151, 380, -180, -106, -106, -342, 235,
	128, 266, 235, 128, -133, -320, 216, -321, 216, 331,
	96, -317, 380, 380, 380, -224, -227, 26, -319, 203,
	259, 48, 282, -319, -318, 379, 379, -123, 48, 259,
	-151, -342, 20, 208, 93, -154, 229, -155, 229, 380,
	-299, 380, -299, 341, 341, -156, 379, 184, 384, -153,
	-152, -157, -158, -235, 93, 195, 312, -154, 379, 384,
	380, 384, 379, -157, -154, -158, -157, 380, 380, 384,
	-153, -152, -155, 384, -155,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 307, 0, 159, 161, 163,
	165, 167, -2, 169, 171, 0, 0, 0, 182, 184,
	186, 188, 190, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 672, -2, 0, 287, 289, 298,
	300, 302, 304, 305, 0, 350, 352, 354, 356, 358,
	360, 362, 364, 366, 368, 370, 372, 374, 376, 378,
	379, 381, 383, 385, 0, 593, 595, 597, -2, 65,
	66, 67, 68, 69, 70, 78, 79, 80, 81, 72,
	74, 75, 77, 0, 710, -2, 721, 0, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 687, 689, 691,
	693, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	43, 49, 51, 53, 56, 58, 60, 62, 64, 0,
	0, 0, 0, 0, 0, 125, 271, 0, 1296, 1220,
	1226, 1227, 1251, 1252, 1253, 1270, 1271, 1272, 1273, 1274,
	1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284,
	1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
	1295, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
	1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
	1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
	1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
	1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
	1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
	1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
	1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
	1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425,
	1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435,
	1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
	1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 151, 153,
	154, 0, 0, 0, 1222, 1296, 160, 162, 164, 166,
	0, 173, 0, 0, 0, 0, 0, 560, 170, 172,
	262, 1358, 264, 266, 0, 0, 0, 0, 176, 177,
	178, 179, 180, 181, 183, 185, 187, 189, 191, 192,
	0, 0, 0, 0, 0, 261, 259, 214, 215, 0,
	244, 245, 246, 247, 248, 250, 218, 220, 221, 223,
	225, 227, 229, 230, 232, 234, 235, 237, 239, 240,
	242, 0, 0, 0, 268, 274, 275, 276, 278, 279,
	280, 281, 282, 283, 284, 0, 131, 0, 462, 257,
	255, 0, 127, 0, 590, 0, 270, 591, 592, 587,
	588, 1385, 616, 288, 290, 299, 301, 303, -2, -2,
	1480, -2, 314, -2, 322, 1486, 0, 325, 326, 329,
	-2, 210, 351, 353, 355, 357, 359, 361, 363, 365,
	367, 369, 371, 373, 375, 377, 380, 382, 384, 386,
	387, 0, 0, 0, 391, 0, -2, -2, 0, 0,
	0, 0, 0, -2, 0, -2, 0, 0, -2, -2,
	0, 0, -2, 0, 0, 390, 392, 393, 394, 0,
	594, 596, 598, 0, 550, 712, 0, 0, -2, 685,
	686, -2, 0, 716, 716, 716, 0, 0, 686, 684,
	0, 291, 0, 293, 0, 391, 296, 297, 330, 331,
	1205, 1206, 922, 0, 0, 0, 0, 0, 0, 1024,
	1026, 1451, 1480, 0, 1028, 1029, 0, 1031, 1033, 1034,
	0, 1037, 1038, 1190, 1222, 1236, 1237, 1238, 1239, 0,
	0, 1242, 0, 1244, 1245, 1246, 1092, 1048, -2, -2,
	1234, 850, 851, 852, 853, -2, 1494, 1052, 1055, 1058,
	1061, 1062, 1065, 1066, 0, 1435, 1452, 1453, 1476, 1477,
	1485, 1489, 1490, 1459, 1473, 1460, 1447, 1457, 1471, 1302,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1260, 884, 885, 890, 891,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 893, 618, 600, 609, 618,
	602, 603, 604, 605, 606, 607, 608, 611, 0, 702,
	1364, 705, 1233, 703, 688, 690, 0, 692, 0, 0,
	696, 718, 717, 756, 757, 0, 700, 701, 711, 772,
	810, 787, 778, 0, 0, 2, 71, 0, 1459, 810,
	73, 0, 1459, 810, 76, 0, 82, 0, 1459, 1225,
	0, 1265, 1266, 1267, 1268, 1269, 1494, 1510, 1511, 1512,
	1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
	1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
	1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 0, 0,
	272, 273, 1230, 1228, 1229, 0, 155, 156, 157, 158,
	0, 0, 1223, 1199, 1197, 1198, 168, 527, 1459, 547,
	1459, -2, 552, 527, 556, -2, 709, 1459, 632, 263,
	265, 0, 175, 0, 645, 0, 647, 0, 662, 816,
	117, 1459, 195, 208, 117, 1459, 198, 117, 1459, 201,
	1218, 117, 1459, 204, 205, 1459, 207, 258, 0, 0,
	-2, 251, 253, 1261, 1262, 1263, 1264, -2, 249, 219,
	222, 224, 226, 228, 231, 233, 236, 238, 241, 243,
	-2, 0, 0, 0, 461, 0, 0, 0, 589, 0,
	615, 306, 0, 311, 0, 313, 1446, -2, -2, 317,
	619, 623, 624, 625, 0, 0, 0, 0, 0, 0,
	0, 327, 211, 0, 388, 389, 397, 398, 132, 133,
	348, 349, 0, 401, 422, 434, 0, 0, 405, 407,
	460, 409, 0, 0, 411, 0, 413, 0, 415, 0,
	417, 0, 419, 421, 423, 435, 425, 711, 427, 0,
	429, 433, 0, 438, 0, 440, 441, 442, 0, 0,
	448, 0, 0, 395, 396, 117, 814, 0, 0, 0,
	-2, 0, 729, 754, 0, 732, 733, 0, 0, 0,
	0, 714, 715, 0, 0, 0, 674, 675, 292, 0,
	295, 0, 0, 0, 0, 1125, 1126, 1127, 1128, 1129,
	1130, 1133, 1134, 1131, 1132, 1135, 1136, 0, 0, 0,
	0, 0, 1137, 0, 0, 0, 0, 0, 0, 0,
	0, 1138, 1139, 1140, 0, 0, 1142, 0, 1144, 0,
	0, 0, 0, 0, 0, 1204, 0, 0, 1141, 927,
	928, 929, 961, 962, 0, 1025, 1201, 1194, 1027, 0,
	1147, -2, 1148, 0, 0, 1030, 1035, 1036, 1147, 0,
	1189, -2, 0, 1241, 0, 919, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1170, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 869, 887,
	898, 895, 894, 871, 0, 870, 868, 0, 872, 0,
	0, 0, 599, -2, 601, 0, 613, 0, 704, 0,
	0, 758, 761, 1210, 1214, 1215, 761, 0, 1207, 0,
	0, 0, 0, 807, 807, 807, 805, 781, 0, 787,
	0, -2, 811, 799, 0, -2, 778, 0, 0, 812,
	0, 83, 584, 96, 0, 584, 584, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 801, 1221, 0, 1195, 1196, 147,
	0, 0, 1216, 1200, 468, 0, 0, 0, 551, 0,
	708, 0, 0, 0, 1459, 559, 1254, 634, 0, 820,
	0, 648, 0, 0, 817, 0, 193, 0, 115, 116,
	0, 196, 0, 199, 0, 0, 202, 0, 0, 0,
	1148, 711, 0, 0, 277, 0, 0, 711, 0, 1150,
	828, 829, 830, 831, 832, 919, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 881, 0, 856, 856, 856, 873, 874, 882,
	883, 888, 889, 900, 901, 903, 905, 899, 899, 899,
	896, 897, 801, 134, 0, 0, 0, 0, -2, 319,
	0, 621, 0, 626, 339, 340, 341, 628, 629, 323,
	342, 343, 344, 345, 346, 347, 0, 544, 0, 546,
	1247, 0, 320, 332, 321, 324, 0, 212, 399, 400,
	402, 403, 404, 408, 0, 457, 410, 412, 414, 416,
	418, 426, 430, 711, 436, 439, 443, 444, 445, 446,
	0, 0, 0, 549, 0, 308, 0, 452, 0, 729,
	754, 678, 728, 679, 753, 755, 730, 731, 736, 740,
	741, 744, 747, 748, 738, 922, 697, 698, 699, 722,
	723, 571, 0, 0, 294, 923, 824, 825, 875, 876,
	877, 878, 879, 924, 925, 0, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, -2, -2, -2, -2,
	-2, -2, -2, -2, 948, 949, 950, 951, 952, 953,
	954, 955, -2, -2, -2, 959, 960, -2, 1143, 1145,
	0, 1204, 0, -2, 0, -2, -2, -2, -2, 973,
	0, 975, 978, 980, 982, 0, 0, 0, 0, 1203,
	992, 1181, 0, 0, 1122, 1123, 1124, 977, 0, 0,
	1202, 1193, 0, 0, 1146, 1032, 0, 0, 0, 1154,
	1188, 1184, 0, 1039, 721, 0, 0, 0, 0, 1046,
	0, 1250, 906, 907, 908, 909, 910, 911, 920, 1102,
	0, 0, 0, 1053, 1054, 1056, 1057, 1059, 1060, 1063,
	1064, 0, 0, 0, 1070, 0, 1157, -2, -2, -2,
	-2, -2, -2, -2, 0, 1072, 0, 1074, 1148, 1167,
	0, 0, 995, 0, 0, 0, 0, 1480, 0, 1077,
	1148, 1175, 0, 0, 0, 0, 0, 1148, 0, 1180,
	0, 0, 0, 0, 0, 1088, 0, 1090, 0, 0,
	0, 0, 0, 0, 612, 706, 0, 0, 820, 0,
	0, 0, 1213, 820, 0, 1209, 0, 0, 0, 0,
	0, 802, 806, 803, 804, 0, 0, 787, 799, 769,
	0, 0, 0, 776, 777, 798, 0, 797, 786, -2,
	0, 0, 0, 0, 0, 583, 98, 1459, 0, 119,
	0, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 1224, 0, 137, 0,
	1231, 0, 0, 0, 0, 0, 467, 1230, 469, 471,
	472, 473, 474, 1255, 0, 1255, 0, 0, 0, 0,
	0, 0, 0, 636, 642, 0, 735, 0, 660, 650,
	0, 0, 0, 660, 664, 665, 667, 668, 0, 0,
	818, 209, 117, 117, 1219, 117, 117, 206, 260, 0,
	216, 252, 0, 0, 0, 254, 256, 0, 821, 823,
	0, 833, 0, 146, 0, 0, 0, 0, 312, 0,
	620, 627, 0, 336, 0, 338, 545, 1249, 1248, 0,
	213, 459, 285, 428, 431, 454, 455, 456, 815, 0,
	453, 682, 683, 0, 742, 0, 0, 739, 745, 746,
	0, 725, 569, 570, 0, 0, 0, -2, -2, 0,
	0, 0, 993, -2, 974, 976, 979, 981, 983, 0,
	0, 0, 0, 0, 0, 0, 994, 1147, 0, 1191,
	1194, -2, 1149, 1152, 1153, 0, 0, 1185, 0, 0,
	0, 0, 720, 721, 721, 721, 1045, 0, 0, 0,
	0, 0, 0, 1047, 0, 0, 0, 0, 0, 0,
	1069, 0, 1071, 1073, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	998, 999, 1000, 0, 1147, 1076, 1173, 1174, 0, 0,
	0, 0, 0, 0, 1082, 0, 1179, 0, 0, 0,
	1086, 1087, 1089, 0, 854, 0, 880, 902, 904, 892,
	711, 1232, 750, 1211, 801, 760, 762, 1212, 750, 1208,
	789, 0, 791, 0, 0, 0, 793, 0, 782, 0,
	784, 799, 774, 0, 0, 767, 0, 766, 787, 795,
	0, 0, 813, 97, 573, 0, 0, 0, 100, 1459,
	108, 0, 499, 0, 0, 0, 0, 0, 586, 109,
	1459, 117, 1459, 117, 110, 84, 584, 85, 0, 0,
	579, 0, 0, 572, 86, 0, 581, 0, 0, 146,
	0, 0, 148, 0, 1217, 476, 526, 0, 0, 1255,
	0, 465, 527, 548, 553, 555, 0, 0, 638, 642,
	0, 641, 709, 660, 734, 819, 643, 660, 0, 0,
	0, 652, 649, 646, 820, 0, 0, 0, 0, 194,
	197, 200, 203, 1149, 267, 0, 0, 1151, 0, 826,
	0, 0, 126, 0, 135, 269, 309, 310, 315, 334,
	335, 337, 333, 0, 0, 0, 0, 0, 0, 724,
	571, 0, 926, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 1182, 0, 0, 0, 1193, -2, 1155, 1183,
	1187, 0, 1040, 0, 0, 0, 0, 1243, 912, 913,
	914, 915, 916, 917, 918, 0, 1100, 1101, 1105, 0,
	0, 1051, 0, 0, 1156, 1166, 1168, 996, 997, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, -2,
	-2, -2, 1014, 1015, 1016, -2, -2, -2, 0, 0,
	0, 1169, 0, 0, 1171, 1172, 1176, 1177, 0, 1079,
	1080, 1081, 1178, 0, 0, 0, 886, 0, 0, 752,
	0, 759, 0, 752, 790, 0, 809, 792, 772, 783,
	0, 780, 770, 0, 771, 0, 799, 0, 0, 779,
	0, 0, 0, 0, 118, 497, 516, 0, 0, 562,
	568, 568, 0, 1049, 1050, 0, 0, 0, 102, 0,
	0, 0, 0, 106, 0, 112, 0, 0, 0, 91,
	0, 0, 0, 0, 90, 0, 0, 89, 124, 0,
	0, 149, 481, 0, 470, 0, 0, 0, 468, 0,
	0, 0, 640, 642, 0, 633, 634, 174, 644, 658,
	659, 657, 0, 660, 666, 663, 669, 0, 0, 128,
	0, 0, 827, 834, 144, 1348, 142, 139, 141, 286,
	449, 450, 451, 737, 743, 726, 571, 0, 0, -2,
	0, 986, -2, -2, 1118, 1149, 1192, 1186, 1240, 721,
	1041, 1043, 1044, 921, 1107, 1104, 0, 1091, 1067, 1068,
	1165, 0, 0, 0, 0, 1149, 1120, 1078, 0, 1084,
	1085, 855, 707, 1096, 0, 0, 763, 1096, 0, 787,
	785, 768, 764, 0, 775, 0, 796, 575, 577, 99,
	0, 498, 0, 501, 0, 0, 0, 0, 507, 508,
	0, 0, 0, 0, 518, 525, 0, 571, 1235, 0,
	571, 0, 0, 0, 0, 0, 114, 0, 0, 585,
	0, 117, 117, 574, 0, 0, 0, 0, 580, 0,
	582, 136, 0, 463, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 630, 642, 0, 635, 636, 0,
	0, 0, 651, 661, 0, 0, 0, 822, 0, 0,
	0, 0, 727, -2, -2, 987, 1119, 0, 721, 0,
	1093, -2, 0, 0, 0, 1121, 0, 694, 0, 751,
	749, 695, 808, 799, 0, 794, 101, 0, 502, 503,
	1255, 0, 506, 509, 0, 511, 1257, 476, 0, 522,
	523, 563, 564, 567, 565, 568, 721, 520, 0, 103,
	104, 113, 121, 105, 111, 0, 0, 721, 0, 0,
	800, 0, 0, 525, 0, 515, 476, 466, 525, 0,
	0, 637, 638, 0, 0, 0, 670, 671, 0, 0,
	0, 143, 0, 138, 140, 1042, 1110, 0, -2, 0,
	1022, 1083, 1095, 1097, 0, 773, 765, 500, 504, 0,
	0, 531, 0, 519, 0, 571, 0, 0, 123, 0,
	576, 578, 0, 0, 0, 0, 0, 0, 476, 525,
	464, 476, 0, 639, 640, 0, 654, 820, 656, 0,
	0, 145, 0, 0, 0, 1106, 1023, 0, 0, 0,
	510, 536, 0, 0, 0, 566, 1040, 527, 107, 0,
	120, 0, 0, 0, 0, 0, 0, 513, 476, 557,
	0, 631, 0, 655, 146, 146, 1103, 1108, 1111, -2,
	1419, 1293, 0, 1109, 1098, 1099, 0, 512, 532, 533,
	0, 528, 529, 530, 1256, 524, 531, 122, 93, 95,
	0, 0, 0, 514, 525, 820, 129, 130, 0, 1113,
	1114, 1115, 1116, 1117, 505, 534, 0, 535, 0, 0,
	0, 536, 0, 0, 479, 476, 653, 0, 537, 0,
	540, 541, 0, 538, 521, 0, 0, 475, 477, 478,
	558, 1112, 539, 542, 543, 0, 0, 0, 0, 482,
	0, 483, 0, 0, 0, 481, 0, 0, 0, 480,
	486, 0, 489, 491, 492, -2, 0, 484, 0, 0,
	487, 0, 0, 0, 485, 490, 0, 488, 481, 0,
	480, 496, 494, 0, 495,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 368, 3, 374, 369, 3,
	379, 380, 372, 370, 384, 371, 381, 373, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 388, 383,
	358, 360, 359, 362, 385, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 377, 3, 378, 375, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 386, 367, 387, 365,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 361, 57701, 363, 57702, 364, 57703, 366, 57704, 376,
	57705, 382, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:898
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:904
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:910
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:919
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:965
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:967
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1003
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1014
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1026
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1075
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1081
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1087
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1096
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1105
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1174
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1197
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1207
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1269
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1270
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1273
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1274
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1327
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1365
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1434
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1467
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1478
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1486
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1492
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			return helpWith(sqllex, "CREATE")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1513
		{
			return helpWith(sqllex, "DELETE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1523
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1525
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1526
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1527
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1535
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1537
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			return helpWith(sqllex, "DROP")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1553
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1568
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1591
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1614
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1629
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1689
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1692
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			return helpWith(sqllex, "DELETE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1696
		{
			return helpWith(sqllex, "INSERT")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1699
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1717
		{ /* SKIP DOC */
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1745
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1824
		{
			return helpWith(sqllex, "GRANT")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1844
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1866
		{
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1922
		{
			return helpWith(sqllex, "RESET")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1923
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1938
		{
			return helpWith(sqllex, "RESET")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1954
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1957
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1965
		{ /* SKIP DOC */
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1966
		{
			return unimplemented(sqllex, "set local")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.expr()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1992
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2042
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2047
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2067
		{
			return unimplemented(sqllex, "set from current")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2075
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = Low
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = Normal
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = High
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2178
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2185
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2186
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2189
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2193
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2197
		{
			return helpWith(sqllex, "SHOW")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2206
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.str = "client_encoding"
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2221
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2232
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2249
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2254
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2265
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2298
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2308
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2324
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2354
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2367
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2372
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2390
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2413
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2421
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2425
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2432
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2443
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2454
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2465
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2469
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2473
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2477
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2481
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2485
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2491
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2495
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2499
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2505
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2533
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2640
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2644
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = DropDefault
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 495:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 496:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2758
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2965
		{
			return unimplemented(sqllex, "match full")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2966
		{
			return unimplemented(sqllex, "match partial")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2967
		{
			return unimplemented(sqllex, "match simple")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2968
		{
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = NoAction
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = Restrict
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = Cascade
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = SetNull
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = SetDefault
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = &CreateSequence{Name: sqlDollar[3].union.normalizableTableName(), IfNotExists: false}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &CreateSequence{Name: sqlDollar[6].union.normalizableTableName(), IfNotExists: true}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3075
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3079
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3100
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3140
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = true
		}
	case 561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = false
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3170
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3171
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3175
		{
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = Ascending
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = Descending
		}
	case 571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3215
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3217
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = true
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = false
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3250
		{
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3251
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3262
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3273
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3284
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3289
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3290
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3308
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3313
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3326
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3331
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3339
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3346
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3349
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3350
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.str = ""
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.str = ""
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3409
		{
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3411
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = ReadOnly
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = ReadWrite
		}
	case 630:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3475
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.str = ""
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.str = ""
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.str = ""
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.str = ""
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3518
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3519
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3543
		{
			return helpWith(sqllex, "INSERT")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3560
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3602
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3614
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 661:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3637
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3641
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3642
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3779
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3814
		{
			return helpWith(sqllex, "SELECT")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3815
		{
			return helpWith(sqllex, "VALUES")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3816
		{
			return helpWith(sqllex, "TABLE")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3863
		{
			return helpWith(sqllex, "SELECT")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3907
		{
			return helpWith(sqllex, "TABLE")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3918
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3919
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3920
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3923
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3924
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3927
		{
			return unimplemented(sqllex, "cte")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3930
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3931
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3934
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3935
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3938
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3939
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = true
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = false
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = false
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = true
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3962
		{
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3963
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4017
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4041
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4093
		{
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4094
		{
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4097
		{
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4098
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = false
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = true
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4169
		{
			return helpWith(sqllex, "VALUES")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4171
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4186
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &From{}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4208
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4226
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4253
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4290
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4315
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = nil
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4356
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4362
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = true
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = false
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.str = astFullJoin
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.str = astLeftJoin
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.str = astRightJoin
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.str = astInnerJoin
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4473
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4474
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4560
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4574
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4582
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4606
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4617
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = jsonbColType
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = jsonColType
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4706
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4715
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = nil
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4780
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4876
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4908
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4947
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4948
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 902:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 904:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = year
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = month
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = day
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = hour
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = minute
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = month
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = hour
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = minute
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = minute
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = nil
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = second
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5043
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5078
		{
			return unimplemented(sqllex, "at tz")
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5286
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5288
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5292
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5296
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5316
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5324
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5352
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5476
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5501
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5509
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5525
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5578
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5579
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5581
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5585
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5592
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5603
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5610
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5619
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5620
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5624
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5633
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5642
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5644
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5651
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5652
		{
			return unimplemented(sqllex, "current role")
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5661
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5667
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5671
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5675
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5682
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5687
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5692
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5698
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5701
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5702
		{
			return unimplemented(sqllex, "treat")
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5716
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5720
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5736
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5739
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5741
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5744
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5748
		{
			return unimplemented(sqllex, "within group")
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5749
		{
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5753
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5757
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5774
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5784
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5807
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5826
		{
			sqlVAL.str = ""
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5832
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5846
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5847
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5848
		{
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5851
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5852
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5858
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5859
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5860
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5861
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5862
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5873
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5877
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5883
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5889
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5895
		{
			sqlVAL.union.val = Any
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5899
		{
			sqlVAL.union.val = Some
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5903
		{
			sqlVAL.union.val = All
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = Plus
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5909
		{
			sqlVAL.union.val = Minus
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = Mult
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5911
		{
			sqlVAL.union.val = Div
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = Mod
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = Bitand
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5915
		{
			sqlVAL.union.val = Bitor
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = Pow
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = Bitxor
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = LT
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = GT
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = EQ
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5921
		{
			sqlVAL.union.val = LE
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = GE
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = NE
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = Like
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = NotLike
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5929
		{
			sqlVAL.union.val = ILike
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = NotILike
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5968
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6028
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6056
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6060
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6084
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6104
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6108
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6119
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6126
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6130
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6136
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6153
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6159
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6163
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6170
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6176
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6188
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6192
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6198
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6202
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6208
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6217
		{
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6218
		{
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6227
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6233
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6237
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6246
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6252
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6256
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6262
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6271
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6275
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6279
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6287
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6291
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6297
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6301
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6307
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6311
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6322
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6326
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6332
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6336
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6349
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6353
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6357
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6361
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6367
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6377
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6380
		{
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6390
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6394
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6401
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6405
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6409
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6413
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6416
		{
			return unimplemented(sqllex, "func const")
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6418
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6422
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6425
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6427
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6431
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6435
		{
			sqlVAL.union.val = DNull
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6442
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6446
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6452
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6487
		{
			sqlVAL.str = ""
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6493
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6497
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
