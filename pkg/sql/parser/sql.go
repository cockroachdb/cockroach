// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:311
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LC_CTYPE = 57490
const LC_COLLATE = 57491
const LEADING = 57492
const LEAST = 57493
const LEFT = 57494
const LEVEL = 57495
const LIKE = 57496
const LIMIT = 57497
const LOCAL = 57498
const LOCALTIME = 57499
const LOCALTIMESTAMP = 57500
const LOW = 57501
const LSHIFT = 57502
const MATCH = 57503
const MINUTE = 57504
const MONTH = 57505
const NAME = 57506
const NAMES = 57507
const NATURAL = 57508
const NEXT = 57509
const NO = 57510
const NO_INDEX_JOIN = 57511
const NORMAL = 57512
const NOT = 57513
const NOTHING = 57514
const NULL = 57515
const NULLIF = 57516
const NULLS = 57517
const NUMERIC = 57518
const OF = 57519
const OFF = 57520
const OFFSET = 57521
const OID = 57522
const ON = 57523
const ONLY = 57524
const OR = 57525
const ORDER = 57526
const ORDINALITY = 57527
const OUT = 57528
const OUTER = 57529
const OVER = 57530
const OVERLAPS = 57531
const OVERLAY = 57532
const PARENT = 57533
const PARTIAL = 57534
const PARTITION = 57535
const PASSWORD = 57536
const PLACING = 57537
const POSITION = 57538
const PRECEDING = 57539
const PRECISION = 57540
const PREPARE = 57541
const PRIMARY = 57542
const PRIORITY = 57543
const RANGE = 57544
const READ = 57545
const REAL = 57546
const RECURSIVE = 57547
const REF = 57548
const REFERENCES = 57549
const REGCLASS = 57550
const REGPROC = 57551
const REGPROCEDURE = 57552
const REGNAMESPACE = 57553
const REGTYPE = 57554
const RENAME = 57555
const REPEATABLE = 57556
const RELEASE = 57557
const RESTRICT = 57558
const RETURNING = 57559
const REVOKE = 57560
const RIGHT = 57561
const ROLLBACK = 57562
const ROLLUP = 57563
const ROW = 57564
const ROWS = 57565
const RSHIFT = 57566
const STATUS = 57567
const SAVEPOINT = 57568
const SEARCH = 57569
const SECOND = 57570
const SELECT = 57571
const SERIAL = 57572
const SERIALIZABLE = 57573
const SESSION = 57574
const SESSION_USER = 57575
const SET = 57576
const SHOW = 57577
const SIMILAR = 57578
const SIMPLE = 57579
const SMALLINT = 57580
const SMALLSERIAL = 57581
const SNAPSHOT = 57582
const SOME = 57583
const SPLIT = 57584
const SQL = 57585
const START = 57586
const STDIN = 57587
const STRICT = 57588
const STRING = 57589
const STORING = 57590
const SUBSTRING = 57591
const SYMMETRIC = 57592
const SYSTEM = 57593
const TABLE = 57594
const TABLES = 57595
const TEMPLATE = 57596
const TEXT = 57597
const THEN = 57598
const TIME = 57599
const TIMESTAMP = 57600
const TIMESTAMPTZ = 57601
const TO = 57602
const TRAILING = 57603
const TRANSACTION = 57604
const TREAT = 57605
const TRIM = 57606
const TRUE = 57607
const TRUNCATE = 57608
const TYPE = 57609
const UNBOUNDED = 57610
const UNCOMMITTED = 57611
const UNION = 57612
const UNIQUE = 57613
const UNKNOWN = 57614
const UPDATE = 57615
const UPSERT = 57616
const USER = 57617
const USERS = 57618
const USING = 57619
const VALID = 57620
const VALIDATE = 57621
const VALUE = 57622
const VALUES = 57623
const VARCHAR = 57624
const VARIADIC = 57625
const VIEW = 57626
const VARYING = 57627
const WHEN = 57628
const WHERE = 57629
const WINDOW = 57630
const WITH = 57631
const WITHIN = 57632
const WITHOUT = 57633
const YEAR = 57634
const ZONE = 57635
const NOT_LA = 57636
const WITH_LA = 57637
const AS_LA = 57638
const POSTFIXOP = 57639
const UMINUS = 57640

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5091

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	317, 27,
	-2, 396,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 369,
	181, 369,
	217, 369,
	315, 369,
	317, 369,
	-2, 379,
	-1, 59,
	1, 372,
	181, 372,
	217, 372,
	315, 372,
	317, 372,
	-2, 378,
	-1, 68,
	1, 27,
	317, 27,
	-2, 396,
	-1, 404,
	1, 177,
	317, 177,
	-2, 918,
	-1, 440,
	155, 406,
	179, 406,
	-2, 375,
	-1, 443,
	155, 405,
	179, 405,
	-2, 373,
	-1, 568,
	155, 405,
	179, 405,
	-2, 376,
	-1, 625,
	314, 854,
	-2, 847,
	-1, 626,
	314, 855,
	-2, 848,
	-1, 632,
	5, 552,
	314, 552,
	-2, 1019,
	-1, 656,
	5, 512,
	-2, 993,
	-1, 657,
	5, 546,
	314, 546,
	-2, 995,
	-1, 658,
	5, 520,
	-2, 996,
	-1, 659,
	5, 519,
	-2, 997,
	-1, 660,
	5, 546,
	314, 546,
	-2, 1000,
	-1, 661,
	5, 546,
	314, 546,
	-2, 1001,
	-1, 662,
	5, 547,
	-2, 1004,
	-1, 663,
	5, 506,
	-2, 1005,
	-1, 664,
	5, 506,
	-2, 1006,
	-1, 665,
	5, 528,
	-2, 1010,
	-1, 666,
	5, 507,
	-2, 1015,
	-1, 667,
	5, 508,
	-2, 1016,
	-1, 668,
	5, 509,
	-2, 1017,
	-1, 669,
	5, 510,
	-2, 1018,
	-1, 670,
	5, 506,
	-2, 1022,
	-1, 671,
	5, 513,
	-2, 1027,
	-1, 672,
	5, 511,
	-2, 1030,
	-1, 673,
	5, 544,
	314, 544,
	-2, 1032,
	-1, 674,
	5, 548,
	-2, 1035,
	-1, 675,
	5, 550,
	-2, 1036,
	-1, 676,
	5, 543,
	314, 543,
	-2, 1040,
	-1, 929,
	97, 379,
	139, 379,
	155, 379,
	179, 379,
	184, 379,
	270, 379,
	-2, 665,
	-1, 938,
	314, 832,
	-2, 820,
	-1, 1152,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 587,
	-1, 1153,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 588,
	-1, 1154,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 589,
	-1, 1158,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 593,
	-1, 1159,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 594,
	-1, 1160,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 595,
	-1, 1163,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 600,
	-1, 1169,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 602,
	-1, 1172,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 607,
	-1, 1173,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 608,
	-1, 1174,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 609,
	-1, 1200,
	189, 738,
	-2, 741,
	-1, 1223,
	114, 754,
	314, 854,
	-2, 847,
	-1, 1224,
	114, 755,
	-2, 989,
	-1, 1225,
	114, 756,
	-2, 916,
	-1, 1226,
	114, 757,
	-2, 887,
	-1, 1227,
	114, 758,
	-2, 902,
	-1, 1228,
	114, 759,
	-2, 915,
	-1, 1229,
	114, 760,
	-2, 957,
	-1, 1381,
	97, 379,
	139, 379,
	155, 379,
	179, 379,
	184, 379,
	270, 379,
	-2, 445,
	-1, 1385,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 601,
	-1, 1386,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 603,
	-1, 1391,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 604,
	-1, 1410,
	189, 737,
	-2, 740,
	-1, 1581,
	1, 446,
	67, 446,
	97, 446,
	115, 446,
	119, 446,
	121, 446,
	133, 446,
	139, 446,
	144, 446,
	152, 446,
	155, 446,
	166, 446,
	179, 446,
	181, 446,
	184, 446,
	217, 446,
	219, 446,
	270, 446,
	277, 446,
	287, 446,
	288, 446,
	296, 446,
	315, 446,
	317, 446,
	318, 446,
	-2, 445,
	-1, 1583,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 605,
	-1, 1588,
	142, 0,
	-2, 619,
	-1, 1596,
	189, 739,
	-2, 742,
	-1, 1630,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 645,
	-1, 1631,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 646,
	-1, 1632,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 647,
	-1, 1636,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 651,
	-1, 1637,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 652,
	-1, 1638,
	13, 0,
	14, 0,
	15, 0,
	297, 0,
	298, 0,
	299, 0,
	-2, 653,
	-1, 1750,
	142, 0,
	-2, 620,
	-1, 1753,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 623,
	-1, 1754,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 625,
	-1, 1846,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 624,
	-1, 1847,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 626,
	-1, 1854,
	142, 0,
	-2, 654,
	-1, 1905,
	142, 0,
	-2, 655,
	-1, 1961,
	35, 0,
	127, 0,
	154, 0,
	236, 0,
	294, 0,
	-2, 992,
}

const sqlNprod = 1135
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25585

var sqlAct = [...]int{

	626, 1542, 1940, 1960, 1984, 1911, 1941, 1959, 1018, 1793,
	1942, 1115, 444, 1026, 932, 851, 1607, 1741, 77, 1576,
	1667, 1816, 1832, 599, 616, 45, 1708, 1722, 1090, 76,
	1552, 741, 624, 275, 1709, 623, 857, 677, 1734, 277,
	76, 76, 76, 1577, 1379, 76, 19, 1355, 76, 1357,
	465, 1727, 1094, 1089, 1558, 1304, 76, 278, 1108, 1130,
	1467, 1369, 853, 76, 76, 1466, 692, 76, 587, 935,
	76, 76, 76, 76, 1568, 689, 279, 1093, 1027, 1413,
	480, 1123, 994, 985, 263, 1363, 1210, 449, 928, 479,
	1185, 1128, 1042, 1249, 1051, 874, 1182, 451, 58, 554,
	26, 15, 805, 1084, 789, 714, 710, 694, 725, 22,
	597, 1124, 481, 588, 1220, 555, 482, 786, 492, 1020,
	7, 816, 1097, 501, 880, 494, 21, 454, 571, 966,
	970, 572, 495, 1058, 10, 58, 570, 9, 268, 267,
	443, 59, 8, 6, 261, 4, 1125, 272, 785, 807,
	803, 383, 392, 488, 452, 598, 718, 395, 269, 553,
	405, 1017, 575, 1019, 270, 60, 58, 1839, 727, 1055,
	1840, 727, 271, 727, 448, 273, 883, 884, 1023, 448,
	265, 264, 618, 266, 73, 1975, 1956, 1948, 1119, 1815,
	1119, 1061, 1938, 1377, 1315, 1048, 471, 1316, 1933, 886,
	441, 1119, 1932, 1907, 1408, 1119, 1048, 402, 431, 1409,
	1407, 742, 1056, 462, 1901, 1061, 468, 1119, 456, 475,
	885, 1367, 463, 704, 440, 470, 473, 1885, 463, 1875,
	1815, 1848, 1119, 1826, 1048, 27, 1815, 1823, 1814, 64,
	1119, 1815, 1798, 1366, 1797, 1119, 50, 1119, 882, 1775,
	1057, 1054, 1061, 1755, 1891, 881, 1061, 76, 76, 76,
	76, 76, 66, 504, 1752, 1744, 1366, 1048, 1061, 1252,
	52, 1694, 1643, 1595, 1061, 891, 28, 1693, 57, 1679,
	1061, 505, 1119, 1592, 1528, 1342, 1061, 1015, 449, 1522,
	1484, 67, 1015, 1485, 983, 1482, 1345, 41, 1061, 62,
	506, 1818, 1119, 1481, 36, 63, 1061, 53, 1061, 1063,
	1194, 40, 37, 1412, 1480, 1410, 1059, 1061, 1061, 1344,
	1114, 1078, 1119, 64, 61, 583, 901, 1120, 42, 1070,
	1119, 846, 1061, 1060, 38, 845, 1061, 1047, 728, 1014,
	1048, 728, 1015, 728, 982, 735, 66, 981, 736, 797,
	483, 883, 884, 582, 484, 796, 483, 517, 461, 68,
	484, 1437, 1438, 679, 64, 1380, 484, 830, 537, 1995,
	1958, 1954, 1947, 1902, 886, 67, 1824, 1780, 1776, 76,
	1053, 1768, 1767, 62, 502, 582, 1766, 66, 1761, 63,
	902, 1760, 1759, 498, 76, 885, 1706, 76, 76, 1700,
	1658, 1315, 1052, 489, 1653, 1652, 1651, 1598, 1022, 941,
	1581, 39, 463, 1557, 473, 1532, 67, 1489, 1486, 1474,
	497, 497, 1465, 1436, 1433, 1432, 1430, 55, 1418, 1417,
	43, 76, 54, 76, 1347, 76, 76, 76, 44, 76,
	731, 64, 1190, 726, 685, 849, 47, 49, 1343, 61,
	891, 1378, 881, 569, 76, 1266, 51, 1217, 1216, 582,
	1443, 883, 884, 581, 66, 76, 477, 896, 893, 894,
	895, 887, 888, 889, 890, 892, 856, 912, 56, 76,
	936, 1931, 61, 1609, 886, 277, 76, 76, 76, 1921,
	76, 1888, 1867, 67, 1865, 1856, 1843, 1836, 1821, 525,
	1812, 62, 1790, 278, 1773, 885, 1746, 63, 1716, 76,
	76, 1587, 684, 883, 884, 526, 1550, 76, 715, 76,
	568, 1548, 279, 1547, 1545, 1501, 61, 683, 1437, 1438,
	504, 504, 1699, 1530, 1191, 1500, 886, 1464, 277, 76,
	1426, 76, 76, 76, 76, 76, 76, 76, 505, 505,
	1425, 1403, 76, 76, 520, 522, 278, 885, 76, 483,
	712, 936, 1399, 484, 1187, 1331, 76, 506, 506, 1293,
	1292, 831, 1280, 1279, 1259, 279, 1215, 1118, 1452, 560,
	855, 971, 974, 558, 76, 556, 978, 76, 463, 883,
	884, 964, 963, 441, 962, 561, 961, 564, 960, 959,
	958, 957, 956, 955, 730, 954, 953, 733, 584, 578,
	579, 952, 891, 951, 678, 878, 591, 440, 1280, 950,
	686, 949, 948, 939, 1437, 1438, 938, 1443, 449, 860,
	937, 61, 489, 885, 711, 739, 850, 466, 586, 717,
	523, 463, 719, 719, 720, 513, 887, 888, 889, 890,
	892, 511, 912, 1705, 1325, 737, 1439, 1440, 1441, 1442,
	1444, 1704, 1518, 700, 470, 473, 478, 793, 848, 792,
	1324, 685, 1841, 883, 884, 1358, 1703, 1317, 1453, 976,
	1380, 820, 827, 977, 531, 1488, 1487, 1384, 76, 835,
	547, 532, 946, 1728, 748, 854, 76, 1055, 1235, 1019,
	76, 864, 1610, 863, 76, 76, 862, 967, 76, 1211,
	847, 876, 1311, 1421, 1495, 826, 1917, 441, 942, 1971,
	441, 441, 76, 1443, 76, 76, 551, 76, 685, 1972,
	76, 1874, 76, 76, 695, 76, 696, 504, 1687, 1069,
	1056, 870, 1454, 995, 871, 872, 832, 253, 988, 836,
	837, 838, 839, 840, 424, 505, 1338, 425, 552, 843,
	844, 1806, 912, 257, 430, 1021, 429, 1021, 1805, 1516,
	1515, 1492, 1491, 1387, 506, 1330, 71, 1329, 1057, 1054,
	999, 1001, 263, 783, 438, 1437, 1438, 1043, 76, 76,
	968, 969, 1328, 795, 254, 972, 1327, 1170, 1062, 1011,
	1010, 975, 1007, 987, 998, 697, 557, 1834, 979, 1512,
	889, 890, 892, 1263, 912, 258, 1109, 1065, 991, 1448,
	1445, 1446, 1447, 1439, 1440, 1441, 1442, 1444, 70, 1008,
	529, 277, 1873, 58, 1262, 76, 268, 267, 58, 1529,
	1025, 1045, 1044, 980, 1059, 272, 1004, 987, 1035, 278,
	76, 76, 1034, 986, 1012, 463, 269, 76, 502, 473,
	1040, 1046, 270, 463, 1083, 1037, 1141, 1038, 279, 530,
	271, 509, 931, 273, 433, 771, 1731, 1030, 265, 264,
	1039, 266, 473, 76, 1443, 473, 76, 1184, 1184, 1121,
	912, 997, 1036, 497, 1795, 497, 972, 1072, 975, 1517,
	611, 1299, 447, 1066, 708, 1064, 1211, 1067, 1053, 969,
	968, 701, 1071, 1503, 702, 1971, 1919, 721, 1537, 1992,
	277, 1441, 1442, 1444, 631, 1981, 1291, 1059, 1305, 74,
	1534, 1935, 727, 256, 255, 1453, 1520, 259, 278, 548,
	375, 376, 377, 701, 446, 394, 1087, 695, 406, 696,
	69, 1180, 1936, 1188, 1112, 1113, 394, 279, 434, 1437,
	1438, 1086, 996, 455, 455, 1178, 1337, 74, 1535, 260,
	74, 74, 474, 74, 912, 1437, 1438, 439, 695, 1309,
	696, 435, 72, 1313, 1059, 76, 76, 76, 1265, 448,
	436, 76, 698, 508, 76, 1122, 1088, 549, 1298, 1454,
	76, 76, 76, 76, 76, 463, 1198, 1510, 76, 1192,
	1396, 76, 76, 712, 1295, 1305, 76, 1074, 697, 712,
	1987, 550, 706, 76, 1394, 76, 1167, 1944, 1076, 883,
	884, 705, 76, 1176, 1059, 1175, 1207, 1189, 1126, 1181,
	1868, 1339, 76, 1273, 528, 1077, 1140, 965, 449, 697,
	527, 984, 886, 1104, 1075, 1504, 1980, 1267, 1443, 1852,
	1813, 926, 1424, 76, 76, 1569, 748, 748, 1230, 76,
	1580, 1290, 448, 885, 1443, 445, 1307, 1796, 1943, 504,
	1439, 1440, 1441, 1442, 1444, 1368, 1970, 1968, 1771, 1993,
	1721, 1268, 1106, 573, 1392, 1131, 1139, 505, 1397, 76,
	540, 76, 728, 76, 1945, 1389, 1183, 76, 528, 1453,
	518, 76, 516, 1639, 574, 1800, 506, 574, 1165, 1168,
	76, 1562, 1533, 1302, 1799, 1453, 770, 1177, 891, 1310,
	76, 1788, 1862, 1372, 1179, 1346, 1912, 1348, 1318, 693,
	1269, 1999, 1985, 1979, 1319, 1164, 1320, 1321, 1349, 1946,
	1494, 1375, 1352, 1683, 1276, 449, 1272, 74, 490, 74,
	406, 406, 1370, 1107, 861, 1043, 1333, 1297, 1334, 1336,
	1373, 1301, 1335, 1454, 852, 748, 1772, 1341, 711, 901,
	573, 1340, 802, 842, 1371, 1742, 1393, 711, 1322, 1454,
	1986, 869, 798, 1395, 1553, 1640, 1686, 463, 681, 1736,
	1723, 1641, 1737, 1685, 1277, 698, 1195, 1199, 1988, 1202,
	1360, 1361, 1789, 449, 1564, 1411, 58, 1282, 800, 1045,
	1044, 1382, 1222, 1222, 1233, 680, 1244, 1166, 1281, 801,
	1998, 748, 1256, 1257, 1258, 1563, 698, 1374, 527, 1046,
	1682, 1383, 1743, 902, 487, 486, 628, 771, 771, 446,
	1448, 1445, 1446, 1447, 1439, 1440, 1441, 1442, 1444, 1390,
	1323, 565, 1353, 1350, 1388, 1543, 449, 1445, 1446, 1447,
	1439, 1440, 1441, 1442, 1444, 748, 1707, 1559, 1786, 514,
	1364, 76, 1405, 1214, 1855, 1126, 1770, 1468, 1213, 1586,
	1684, 1431, 1398, 1300, 519, 1735, 1420, 406, 406, 1787,
	1068, 1013, 546, 545, 1277, 544, 543, 542, 541, 1499,
	538, 485, 1469, 947, 834, 1939, 76, 76, 1909, 1664,
	1372, 1508, 1506, 1524, 887, 888, 889, 890, 892, 1493,
	912, 394, 1354, 74, 1110, 406, 563, 406, 1375, 566,
	1471, 1472, 1473, 76, 1102, 1041, 76, 734, 76, 1567,
	732, 1490, 729, 724, 455, 76, 771, 1373, 707, 703,
	699, 1497, 1604, 1356, 1807, 74, 1549, 76, 576, 1116,
	459, 76, 1972, 822, 1519, 1511, 534, 987, 277, 74,
	76, 3, 1523, 1002, 1546, 987, 74, 74, 74, 1290,
	722, 1000, 1809, 1527, 1525, 1507, 278, 1509, 1526, 1003,
	825, 824, 1521, 818, 813, 1818, 1554, 1870, 1904, 74,
	74, 1573, 771, 1560, 423, 279, 380, 790, 580, 790,
	1006, 1572, 1556, 1544, 1374, 76, 1117, 1600, 1601, 1602,
	1005, 1589, 1892, 1566, 1719, 577, 747, 460, 1105, 406,
	1101, 790, 406, 406, 406, 406, 406, 841, 1570, 1571,
	467, 1024, 406, 406, 877, 535, 771, 1402, 394, 794,
	391, 1404, 1536, 1538, 1539, 740, 859, 426, 427, 1050,
	1996, 1030, 1126, 1997, 1415, 1416, 1437, 1438, 1561, 1597,
	828, 1659, 1565, 1540, 455, 1531, 1192, 879, 1613, 883,
	884, 1483, 76, 76, 76, 1080, 1079, 1326, 770, 770,
	1616, 76, 76, 1264, 1261, 1260, 1611, 76, 1757, 76,
	1463, 76, 76, 76, 1208, 1081, 76, 76, 927, 432,
	1889, 1476, 1126, 1829, 274, 1725, 1126, 1646, 1603, 1680,
	1681, 1351, 1082, 1647, 940, 1555, 777, 1794, 382, 833,
	539, 1934, 1763, 1423, 1831, 1660, 1663, 1851, 76, 76,
	1212, 945, 829, 35, 1711, 604, 1665, 1496, 1096, 1095,
	280, 823, 1513, 1514, 76, 76, 1675, 57, 76, 1701,
	1715, 812, 1236, 76, 381, 1715, 1717, 1720, 1714, 76,
	1702, 1713, 748, 1714, 627, 806, 1713, 815, 74, 1697,
	1221, 1132, 1739, 36, 682, 629, 992, 745, 1676, 630,
	74, 37, 1718, 1724, 74, 1009, 746, 770, 74, 973,
	76, 748, 748, 617, 743, 1726, 500, 1365, 384, 1751,
	748, 748, 74, 38, 1032, 1033, 1747, 74, 1028, 1209,
	74, 784, 406, 406, 1419, 406, 943, 603, 609, 389,
	1131, 1614, 608, 1196, 385, 510, 1740, 1376, 1575, 1618,
	1619, 48, 524, 748, 400, 401, 1308, 1698, 1111, 865,
	1505, 437, 1434, 770, 512, 76, 1690, 76, 386, 76,
	76, 1242, 1696, 1593, 1234, 1732, 1733, 1769, 76, 1738,
	1231, 559, 1650, 688, 1029, 1671, 388, 1672, 790, 879,
	536, 1314, 1049, 585, 873, 458, 457, 1091, 533, 799,
	76, 819, 814, 1073, 428, 1864, 1103, 770, 1275, 1991,
	773, 1869, 1781, 1502, 1674, 1916, 65, 1782, 25, 1126,
	1126, 1677, 76, 1126, 23, 1817, 20, 18, 1808, 76,
	64, 17, 16, 1819, 1644, 1085, 49, 772, 76, 24,
	14, 1715, 13, 1822, 12, 1654, 11, 76, 76, 1714,
	74, 1092, 1713, 66, 1810, 34, 33, 879, 744, 32,
	31, 30, 29, 771, 5, 2, 1825, 1, 0, 0,
	748, 1850, 1835, 1828, 1830, 1844, 0, 0, 0, 0,
	0, 387, 67, 74, 0, 1673, 406, 76, 0, 1842,
	62, 1845, 771, 771, 0, 1866, 63, 1803, 1804, 1236,
	1236, 771, 771, 0, 1860, 1857, 76, 76, 747, 747,
	76, 0, 0, 0, 76, 61, 0, 0, 0, 76,
	0, 0, 0, 1861, 1878, 390, 1886, 0, 1880, 1784,
	1730, 1882, 0, 1792, 771, 0, 1887, 76, 449, 0,
	1715, 0, 277, 76, 76, 0, 0, 0, 1714, 1838,
	1879, 1713, 0, 0, 1236, 1236, 1236, 1897, 1893, 1894,
	278, 1890, 1899, 0, 1903, 1896, 76, 0, 76, 76,
	748, 76, 1900, 0, 0, 1898, 0, 1827, 0, 279,
	1922, 1400, 1401, 0, 1920, 74, 1270, 1271, 1906, 1926,
	0, 992, 76, 1126, 1278, 1925, 1914, 1924, 712, 1802,
	1283, 1284, 1286, 1288, 1289, 1923, 0, 0, 1294, 1930,
	1817, 1296, 74, 1715, 1929, 1927, 74, 747, 1928, 0,
	76, 1714, 76, 74, 1713, 1312, 0, 1955, 0, 0,
	0, 1949, 74, 1951, 0, 1953, 1460, 1461, 1462, 0,
	76, 0, 74, 0, 1965, 0, 0, 0, 0, 1969,
	1952, 771, 1967, 0, 0, 1973, 748, 0, 0, 0,
	1974, 0, 0, 1085, 790, 1978, 1976, 0, 0, 1085,
	1977, 0, 0, 747, 0, 0, 1990, 1989, 1994, 1881,
	1675, 0, 1668, 0, 0, 0, 0, 0, 0, 0,
	1666, 0, 0, 0, 1670, 0, 0, 0, 0, 859,
	2000, 859, 0, 406, 0, 1236, 1236, 74, 0, 0,
	0, 1359, 1676, 0, 770, 0, 0, 747, 1437, 1438,
	1362, 0, 0, 0, 1915, 0, 0, 0, 0, 0,
	74, 1918, 1669, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 770, 770, 0, 0, 0, 0, 0,
	0, 771, 770, 770, 0, 0, 1236, 1236, 1236, 1236,
	1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
	1236, 1236, 1236, 1236, 1236, 1030, 1236, 0, 0, 0,
	0, 0, 773, 773, 0, 770, 0, 1584, 1585, 589,
	589, 1884, 0, 274, 0, 0, 0, 0, 690, 1671,
	0, 1672, 0, 0, 0, 0, 0, 0, 0, 772,
	772, 0, 0, 0, 0, 713, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1674, 0,
	744, 744, 0, 0, 0, 1677, 57, 771, 1620, 1621,
	1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631,
	1632, 1633, 1634, 1635, 1636, 1637, 1638, 0, 1642, 0,
	883, 884, 36, 0, 0, 0, 0, 0, 1453, 384,
	37, 605, 46, 0, 1937, 0, 0, 0, 0, 0,
	0, 879, 0, 886, 0, 0, 0, 0, 0, 0,
	389, 773, 38, 0, 0, 385, 0, 0, 0, 1673,
	0, 1957, 770, 0, 885, 866, 868, 0, 0, 46,
	1437, 1438, 875, 1455, 1456, 1457, 74, 74, 772, 386,
	771, 1368, 0, 0, 921, 922, 923, 924, 925, 0,
	442, 0, 1454, 450, 930, 0, 0, 388, 0, 744,
	46, 0, 0, 1541, 0, 0, 992, 773, 859, 0,
	0, 0, 0, 0, 944, 1551, 0, 0, 0, 891,
	1452, 0, 0, 0, 0, 0, 0, 74, 0, 1372,
	0, 74, 0, 0, 772, 0, 0, 0, 0, 0,
	1579, 0, 0, 0, 0, 0, 0, 1375, 0, 0,
	0, 773, 0, 1236, 0, 744, 0, 0, 1370, 64,
	0, 0, 770, 0, 0, 49, 1373, 0, 0, 1443,
	901, 0, 1447, 1439, 1440, 1441, 1442, 1444, 772, 0,
	1371, 0, 66, 0, 747, 1608, 0, 0, 1459, 0,
	0, 0, 387, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 0, 747, 747, 0, 0, 0, 0, 62,
	1453, 0, 747, 747, 0, 63, 0, 0, 0, 0,
	0, 0, 0, 1374, 902, 1791, 390, 0, 0, 0,
	0, 0, 0, 0, 262, 0, 0, 1236, 770, 0,
	0, 0, 1661, 1662, 992, 747, 0, 0, 0, 0,
	0, 879, 879, 0, 0, 0, 0, 1688, 0, 1689,
	0, 74, 1691, 1692, 0, 0, 1695, 74, 0, 0,
	0, 0, 0, 0, 1454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1710, 0, 879, 1092,
	0, 1710, 893, 894, 895, 887, 888, 889, 890, 892,
	0, 912, 0, 0, 74, 74, 0, 0, 74, 1854,
	0, 770, 1236, 1579, 0, 0, 0, 0, 0, 1745,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 1450, 1451,
	0, 1448, 1445, 1446, 1447, 1439, 1440, 1441, 1442, 1444,
	1764, 0, 747, 589, 0, 0, 0, 0, 0, 1142,
	1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1163, 0, 1169, 0, 1171, 1172, 1173, 1174, 0, 0,
	0, 0, 0, 0, 1905, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 992, 0, 1783, 0, 406,
	1785, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 1218, 1219, 0, 0, 1232, 0, 1243, 1245,
	1250, 1253, 1254, 1255, 0, 0, 0, 0, 773, 0,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 747, 690, 0, 0, 0, 1710, 0, 0,
	0, 0, 74, 442, 0, 772, 0, 773, 773, 1833,
	1437, 1438, 0, 1455, 1456, 1457, 773, 773, 74, 0,
	0, 0, 0, 0, 0, 0, 744, 879, 1579, 1303,
	0, 1306, 0, 0, 772, 772, 0, 0, 0, 883,
	884, 0, 0, 772, 772, 0, 0, 0, 0, 773,
	0, 0, 0, 0, 0, 744, 744, 0, 0, 0,
	1452, 0, 886, 0, 744, 744, 0, 859, 0, 883,
	884, 0, 0, 1332, 0, 0, 772, 0, 747, 0,
	0, 0, 0, 885, 0, 0, 1871, 1872, 0, 900,
	1876, 0, 886, 0, 1877, 0, 1710, 744, 0, 406,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 0, 885, 0, 1895, 0, 879, 0, 0,
	0, 0, 0, 1579, 879, 0, 875, 442, 0, 0,
	442, 442, 0, 0, 0, 0, 0, 0, 891, 0,
	0, 0, 1458, 0, 0, 0, 1913, 0, 879, 74,
	0, 406, 0, 0, 929, 0, 0, 0, 933, 934,
	1453, 747, 0, 0, 0, 0, 773, 0, 891, 1710,
	0, 0, 1833, 0, 0, 0, 1385, 1386, 0, 0,
	0, 0, 1391, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 0, 772, 0, 0, 0, 0, 0, 0,
	74, 0, 879, 0, 0, 0, 1406, 0, 0, 0,
	0, 0, 0, 0, 744, 1414, 0, 0, 0, 901,
	1966, 0, 0, 1422, 1454, 883, 884, 1427, 903, 904,
	905, 913, 914, 915, 0, 0, 0, 0, 0, 0,
	0, 906, 0, 0, 0, 0, 0, 0, 886, 0,
	917, 0, 930, 902, 0, 0, 0, 0, 1250, 1250,
	1250, 0, 0, 0, 0, 0, 773, 0, 0, 885,
	46, 0, 46, 0, 0, 900, 0, 0, 0, 0,
	0, 0, 0, 902, 0, 0, 0, 46, 0, 0,
	0, 1498, 46, 772, 0, 0, 0, 1449, 1450, 1451,
	0, 1448, 1445, 1446, 1447, 1439, 1440, 1441, 1442, 1444,
	0, 0, 0, 0, 744, 0, 0, 589, 0, 0,
	0, 0, 0, 0, 891, 589, 0, 0, 0, 690,
	896, 893, 894, 895, 887, 888, 889, 890, 892, 0,
	912, 0, 910, 918, 0, 0, 0, 0, 0, 0,
	0, 0, 773, 0, 0, 0, 0, 916, 0, 0,
	0, 0, 0, 895, 887, 888, 889, 890, 892, 908,
	912, 0, 0, 0, 0, 901, 0, 0, 0, 772,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1582, 0, 907, 1583,
	744, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1588, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 0, 0, 0, 0, 0,
	0, 0, 0, 1605, 1127, 773, 0, 0, 0, 902,
	0, 0, 0, 1615, 0, 0, 0, 1617, 0, 0,
	0, 911, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 772, 0, 0, 0, 0, 0, 0, 0,
	1186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1648, 1649, 0, 744, 0, 0, 0, 0, 0, 1655,
	1656, 1657, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 909,
	0, 0, 897, 898, 899, 0, 896, 893, 894, 895,
	887, 888, 889, 890, 892, 0, 912, 0, 0, 0,
	0, 0, 589, 1777, 0, 0, 0, 0, 0, 0,
	0, 883, 884, 0, 903, 904, 905, 913, 914, 915,
	0, 0, 0, 0, 0, 0, 0, 906, 0, 0,
	0, 0, 0, 0, 886, 0, 917, 0, 0, 0,
	0, 1729, 0, 0, 450, 0, 0, 0, 0, 0,
	0, 883, 884, 0, 0, 885, 0, 913, 914, 915,
	0, 900, 0, 0, 0, 0, 1437, 1438, 1750, 1455,
	1456, 1457, 1753, 1754, 886, 0, 917, 1756, 0, 0,
	0, 1758, 1749, 0, 0, 0, 0, 0, 1762, 0,
	0, 0, 1765, 0, 0, 885, 0, 0, 0, 0,
	0, 900, 0, 0, 0, 0, 0, 0, 0, 0,
	891, 0, 0, 0, 1437, 1438, 1452, 1455, 1456, 1457,
	0, 0, 0, 46, 0, 1774, 0, 46, 910, 918,
	1748, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	46, 0, 0, 916, 0, 0, 0, 0, 0, 0,
	891, 1381, 0, 0, 0, 908, 0, 0, 0, 0,
	0, 901, 0, 0, 1452, 1443, 0, 1801, 910, 918,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 0, 0, 0, 0, 0,
	1186, 0, 0, 0, 1820, 908, 0, 0, 1458, 0,
	0, 901, 0, 0, 0, 0, 0, 0, 0, 929,
	0, 0, 0, 1443, 0, 0, 1453, 0, 1837, 0,
	0, 0, 0, 0, 0, 902, 0, 0, 0, 0,
	1846, 1847, 0, 0, 0, 0, 0, 911, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1859,
	0, 0, 929, 0, 1453, 902, 0, 0, 0, 0,
	0, 0, 1863, 0, 0, 0, 0, 911, 0, 0,
	1454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 690, 909, 0, 0, 897, 898,
	899, 0, 896, 893, 894, 895, 887, 888, 889, 890,
	892, 0, 912, 0, 0, 0, 0, 0, 0, 1479,
	0, 0, 0, 0, 0, 0, 0, 0, 1454, 0,
	0, 0, 0, 0, 0, 909, 0, 0, 1127, 0,
	0, 0, 896, 893, 894, 895, 887, 888, 889, 890,
	892, 0, 912, 1449, 1450, 1451, 0, 1448, 1445, 1446,
	1447, 1439, 1440, 1441, 1442, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1127, 0,
	0, 0, 1127, 0, 0, 0, 0, 0, 0, 1950,
	0, 1449, 1450, 1451, 0, 1448, 1445, 1446, 1447, 1439,
	1440, 1441, 1442, 1444, 0, 0, 0, 1964, 1964, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 1964, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 203,
	0, 0, 0, 0, 81, 82, 204, 205, 206, 207,
	83, 208, 209, 0, 84, 210, 211, 85, 1964, 0,
	212, 213, 214, 0, 215, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 216, 99, 217, 218, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 219,
	105, 106, 220, 221, 0, 0, 0, 107, 108, 222,
	0, 109, 0, 110, 46, 0, 0, 0, 111, 223,
	0, 224, 0, 112, 113, 114, 225, 226, 0, 0,
	117, 0, 115, 0, 0, 116, 227, 228, 229, 230,
	0, 231, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 232, 0, 123, 1127, 1127, 124, 0, 1127,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 233, 136, 234, 137, 138,
	0, 139, 0, 464, 0, 0, 140, 235, 0, 141,
	0, 236, 142, 143, 144, 145, 0, 237, 146, 238,
	147, 0, 148, 149, 150, 239, 151, 152, 0, 153,
	154, 155, 156, 157, 159, 160, 158, 161, 0, 162,
	0, 163, 164, 240, 165, 0, 166, 167, 168, 169,
	64, 241, 170, 171, 0, 172, 173, 0, 174, 242,
	243, 175, 0, 181, 176, 177, 178, 180, 244, 179,
	245, 0, 182, 66, 183, 184, 185, 0, 246, 247,
	248, 0, 0, 186, 249, 250, 0, 187, 188, 189,
	190, 0, 0, 191, 192, 193, 0, 194, 0, 195,
	196, 197, 507, 252, 0, 0, 198, 0, 0, 0,
	62, 199, 200, 201, 202, 1811, 63, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 46, 0, 0, 0, 1129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 295, 80, 296, 297,
	298, 299, 203, 300, 301, 302, 303, 81, 82, 204,
	205, 206, 207, 83, 208, 209, 304, 84, 210, 211,
	85, 305, 306, 212, 213, 214, 307, 215, 308, 281,
	309, 86, 87, 88, 929, 89, 310, 90, 91, 92,
	311, 282, 93, 94, 312, 313, 314, 315, 316, 317,
	95, 96, 97, 98, 216, 99, 217, 218, 318, 100,
	319, 101, 320, 321, 322, 102, 103, 323, 104, 324,
	0, 325, 219, 105, 106, 220, 221, 326, 327, 328,
	107, 108, 222, 0, 109, 329, 110, 330, 331, 283,
	332, 111, 223, 333, 224, 334, 112, 113, 114, 225,
	226, 285, 335, 117, 336, 115, 337, 284, 116, 227,
	228, 229, 230, 338, 231, 339, 286, 118, 287, 119,
	120, 340, 122, 121, 341, 232, 288, 123, 289, 342,
	124, 343, 344, 125, 0, 126, 127, 128, 129, 130,
	290, 131, 132, 135, 133, 345, 134, 346, 233, 136,
	234, 137, 138, 347, 139, 348, 349, 350, 351, 140,
	235, 291, 141, 292, 236, 142, 143, 144, 145, 352,
	237, 146, 238, 147, 353, 148, 149, 150, 239, 151,
	152, 354, 153, 154, 155, 156, 157, 159, 160, 158,
	161, 355, 162, 293, 163, 164, 240, 165, 0, 166,
	167, 168, 169, 356, 241, 170, 171, 357, 172, 173,
	294, 174, 242, 243, 175, 358, 181, 176, 177, 178,
	180, 244, 179, 245, 359, 182, 360, 183, 184, 185,
	361, 246, 247, 248, 362, 363, 186, 249, 250, 364,
	187, 188, 189, 190, 365, 366, 191, 192, 193, 367,
	194, 368, 195, 196, 197, 251, 252, 369, 370, 198,
	371, 372, 373, 374, 199, 200, 201, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1574, 78, 79, 295, 80, 296,
	297, 298, 299, 203, 300, 301, 302, 303, 81, 82,
	204, 205, 206, 207, 83, 208, 209, 304, 84, 210,
	211, 85, 305, 306, 212, 213, 214, 307, 215, 308,
	281, 309, 86, 87, 88, 0, 89, 310, 90, 91,
	92, 311, 282, 93, 94, 312, 313, 314, 315, 316,
	317, 95, 96, 97, 98, 216, 99, 217, 218, 318,
	100, 319, 101, 320, 321, 322, 102, 103, 323, 104,
	324, 0, 325, 219, 105, 106, 220, 221, 326, 327,
	328, 107, 108, 222, 0, 109, 329, 110, 330, 331,
	283, 332, 111, 223, 333, 224, 334, 112, 113, 114,
	225, 226, 285, 335, 117, 336, 115, 337, 284, 116,
	227, 228, 229, 230, 338, 231, 339, 286, 118, 287,
	119, 120, 340, 122, 121, 341, 232, 288, 123, 289,
	342, 124, 343, 344, 125, 0, 126, 127, 128, 129,
	130, 290, 131, 132, 135, 133, 345, 134, 346, 233,
	136, 234, 137, 138, 347, 139, 348, 349, 350, 351,
	140, 235, 291, 141, 292, 236, 142, 143, 144, 145,
	352, 237, 146, 238, 147, 353, 148, 149, 150, 239,
	151, 152, 354, 153, 154, 155, 156, 157, 159, 160,
	158, 161, 355, 162, 293, 163, 164, 240, 165, 0,
	166, 167, 168, 169, 356, 241, 170, 171, 357, 172,
	173, 294, 174, 242, 243, 175, 358, 181, 176, 177,
	178, 180, 244, 179, 245, 359, 182, 360, 183, 184,
	185, 361, 246, 247, 248, 362, 363, 186, 249, 250,
	364, 187, 188, 189, 190, 365, 366, 191, 192, 193,
	367, 194, 368, 195, 196, 197, 251, 252, 369, 370,
	198, 371, 372, 373, 374, 199, 200, 201, 202, 276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 716, 0, 0, 78, 79, 295, 80, 296,
	297, 298, 299, 203, 300, 301, 302, 303, 81, 82,
	204, 205, 206, 207, 83, 208, 209, 304, 84, 210,
	211, 85, 305, 306, 212, 213, 214, 307, 215, 308,
	281, 309, 86, 87, 88, 0, 89, 310, 90, 91,
	92, 311, 282, 93, 94, 312, 313, 314, 315, 316,
	317, 95, 96, 97, 98, 216, 99, 217, 218, 318,
	100, 319, 101, 320, 321, 322, 102, 103, 323, 104,
	324, 0, 325, 219, 105, 106, 220, 221, 326, 327,
	328, 107, 108, 222, 0, 109, 329, 110, 330, 331,
	283, 332, 111, 223, 333, 224, 334, 112, 113, 114,
	225, 226, 285, 335, 117, 336, 115, 337, 284, 116,
	227, 228, 229, 230, 338, 231, 339, 286, 118, 287,
	119, 120, 340, 122, 121, 341, 232, 288, 123, 289,
	342, 124, 343, 344, 125, 0, 126, 127, 128, 129,
	130, 290, 131, 132, 135, 133, 345, 134, 346, 233,
	136, 234, 137, 138, 347, 139, 348, 349, 350, 351,
	140, 235, 291, 141, 292, 236, 142, 143, 144, 145,
	352, 237, 146, 238, 147, 353, 148, 149, 150, 239,
	151, 152, 354, 153, 154, 155, 156, 157, 159, 160,
	158, 161, 355, 162, 293, 163, 164, 240, 165, 0,
	166, 167, 168, 169, 356, 241, 170, 171, 357, 172,
	173, 294, 174, 242, 243, 175, 358, 181, 176, 177,
	178, 180, 244, 179, 245, 359, 182, 360, 183, 184,
	185, 361, 246, 247, 248, 362, 363, 186, 249, 250,
	364, 187, 188, 189, 190, 365, 366, 191, 192, 193,
	367, 194, 368, 195, 196, 197, 251, 252, 369, 370,
	198, 371, 372, 373, 374, 199, 200, 201, 202, 625,
	614, 615, 612, 613, 601, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 1204, 80, 0,
	0, 0, 0, 641, 607, 0, 0, 0, 81, 82,
	204, 656, 206, 657, 83, 658, 659, 0, 84, 210,
	211, 85, 622, 640, 660, 661, 214, 0, 652, 0,
	633, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 282, 93, 94, 0, 634, 636, 0, 635,
	637, 95, 96, 97, 98, 662, 99, 663, 664, 0,
	100, 0, 101, 0, 1205, 0, 655, 103, 0, 104,
	0, 0, 0, 606, 105, 106, 642, 643, 620, 0,
	0, 107, 108, 665, 0, 109, 0, 110, 0, 0,
	283, 0, 111, 653, 0, 224, 0, 112, 113, 114,
	649, 651, 285, 0, 117, 0, 115, 0, 284, 116,
	666, 667, 668, 669, 0, 632, 0, 286, 118, 287,
	119, 120, 0, 122, 121, 0, 654, 288, 123, 289,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 290, 131, 132, 135, 133, 595, 134, 621, 650,
	136, 670, 137, 138, 0, 139, 0, 0, 0, 0,
	140, 235, 291, 141, 292, 644, 142, 143, 144, 145,
	0, 645, 146, 238, 147, 0, 148, 149, 150, 671,
	151, 152, 0, 153, 154, 155, 156, 157, 159, 160,
	158, 161, 0, 162, 293, 163, 164, 610, 165, 0,
	166, 167, 168, 169, 0, 241, 170, 171, 638, 172,
	173, 294, 174, 672, 243, 175, 0, 181, 176, 177,
	178, 180, 673, 179, 646, 0, 182, 0, 183, 184,
	185, 0, 246, 674, 675, 0, 0, 186, 647, 648,
	619, 187, 188, 189, 190, 0, 0, 191, 192, 193,
	639, 194, 0, 195, 196, 197, 251, 676, 1203, 0,
	198, 0, 0, 0, 0, 199, 200, 201, 202, 596,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 593, 1206, 0, 0, 0, 594, 0, 0, 602,
	1201, 0, 0, 0, 600, 625, 614, 615, 612, 613,
	601, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 641,
	607, 0, 0, 0, 81, 82, 204, 656, 206, 657,
	83, 658, 659, 0, 84, 210, 211, 85, 622, 640,
	660, 661, 214, 0, 652, 0, 633, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 282, 93,
	94, 0, 634, 636, 0, 635, 637, 95, 96, 97,
	98, 662, 99, 663, 664, 691, 100, 0, 101, 0,
	0, 0, 655, 103, 0, 104, 0, 0, 0, 606,
	105, 106, 642, 643, 620, 0, 0, 107, 108, 665,
	0, 109, 0, 110, 0, 0, 283, 0, 111, 653,
	0, 224, 0, 112, 113, 114, 649, 651, 285, 0,
	117, 0, 115, 0, 284, 116, 666, 667, 668, 669,
	0, 632, 0, 286, 118, 287, 119, 120, 0, 122,
	121, 0, 654, 288, 123, 289, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 290, 131, 132,
	135, 133, 595, 134, 621, 650, 136, 670, 137, 138,
	0, 139, 0, 0, 0, 0, 140, 235, 291, 141,
	292, 644, 142, 143, 144, 145, 0, 645, 146, 238,
	147, 0, 148, 149, 150, 671, 151, 152, 0, 153,
	154, 155, 156, 157, 159, 160, 158, 161, 0, 162,
	293, 163, 164, 610, 165, 0, 166, 167, 168, 169,
	64, 241, 170, 171, 638, 172, 173, 294, 174, 672,
	243, 175, 0, 181, 176, 177, 178, 180, 673, 179,
	646, 0, 182, 66, 183, 184, 185, 0, 246, 674,
	675, 0, 0, 186, 647, 648, 619, 187, 188, 189,
	190, 0, 0, 191, 192, 193, 639, 194, 0, 195,
	196, 197, 507, 676, 0, 0, 198, 0, 0, 0,
	62, 199, 200, 201, 202, 596, 63, 625, 614, 615,
	612, 613, 601, 0, 0, 0, 592, 593, 0, 0,
	0, 0, 594, 78, 79, 602, 80, 0, 0, 0,
	600, 641, 607, 0, 0, 0, 81, 82, 204, 656,
	206, 657, 83, 658, 659, 0, 84, 210, 211, 85,
	622, 640, 660, 661, 214, 0, 652, 0, 633, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	282, 93, 94, 0, 634, 636, 0, 635, 637, 95,
	96, 97, 98, 662, 99, 663, 664, 0, 100, 0,
	101, 0, 0, 0, 655, 103, 0, 104, 0, 0,
	0, 606, 105, 106, 642, 643, 620, 0, 0, 107,
	108, 665, 0, 109, 0, 110, 0, 0, 283, 0,
	111, 653, 0, 224, 0, 112, 113, 114, 649, 651,
	285, 0, 117, 0, 115, 0, 284, 116, 666, 667,
	668, 669, 0, 632, 0, 286, 118, 287, 119, 120,
	0, 122, 121, 0, 654, 288, 123, 289, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 290,
	131, 132, 135, 133, 595, 134, 621, 650, 136, 670,
	137, 138, 0, 139, 0, 0, 0, 0, 140, 235,
	291, 141, 292, 644, 142, 143, 144, 145, 0, 645,
	146, 238, 147, 0, 148, 149, 150, 671, 151, 152,
	0, 153, 154, 155, 156, 157, 159, 160, 158, 161,
	0, 162, 293, 163, 164, 610, 165, 0, 166, 167,
	168, 169, 64, 241, 170, 171, 638, 172, 173, 294,
	174, 672, 243, 175, 0, 181, 176, 177, 178, 180,
	673, 179, 646, 0, 182, 66, 183, 184, 185, 0,
	246, 674, 675, 0, 0, 186, 647, 648, 619, 187,
	188, 189, 190, 0, 0, 191, 192, 193, 639, 194,
	0, 195, 196, 197, 507, 676, 0, 0, 198, 0,
	0, 0, 62, 199, 200, 201, 202, 596, 63, 625,
	614, 615, 612, 613, 601, 0, 0, 0, 592, 593,
	0, 0, 0, 0, 594, 78, 79, 602, 80, 0,
	0, 0, 600, 641, 607, 0, 0, 0, 81, 82,
	204, 656, 206, 657, 83, 658, 659, 1246, 84, 210,
	211, 85, 622, 640, 660, 661, 214, 0, 652, 0,
	633, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 282, 93, 94, 0, 634, 636, 0, 635,
	637, 95, 96, 97, 98, 662, 99, 663, 664, 0,
	100, 0, 101, 0, 0, 0, 655, 103, 0, 104,
	0, 0, 0, 606, 105, 106, 642, 643, 620, 0,
	0, 107, 108, 665, 0, 109, 0, 110, 0, 1251,
	283, 0, 111, 653, 0, 224, 0, 112, 113, 114,
	649, 651, 285, 0, 117, 0, 115, 0, 284, 116,
	666, 667, 668, 669, 0, 632, 0, 286, 118, 287,
	119, 120, 0, 122, 121, 1247, 654, 288, 123, 289,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 290, 131, 132, 135, 133, 595, 134, 621, 650,
	136, 670, 137, 138, 0, 139, 0, 0, 0, 0,
	140, 235, 291, 141, 292, 644, 142, 143, 144, 145,
	0, 645, 146, 238, 147, 0, 148, 149, 150, 671,
	151, 152, 0, 153, 154, 155, 156, 157, 159, 160,
	158, 161, 0, 162, 293, 163, 164, 610, 165, 0,
	166, 167, 168, 169, 0, 241, 170, 171, 638, 172,
	173, 294, 174, 672, 243, 175, 0, 181, 176, 177,
	178, 180, 673, 179, 646, 0, 182, 0, 183, 184,
	185, 0, 246, 674, 675, 0, 1248, 186, 647, 648,
	619, 187, 188, 189, 190, 0, 0, 191, 192, 193,
	639, 194, 0, 195, 196, 197, 251, 676, 0, 0,
	198, 0, 0, 0, 0, 199, 200, 201, 202, 596,
	0, 625, 614, 615, 612, 613, 601, 0, 0, 0,
	592, 593, 0, 0, 0, 0, 594, 78, 79, 602,
	80, 0, 0, 0, 600, 641, 607, 0, 0, 0,
	81, 82, 204, 656, 206, 657, 83, 658, 659, 0,
	84, 210, 211, 85, 622, 640, 660, 661, 214, 0,
	652, 0, 633, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 282, 93, 94, 0, 634, 636,
	0, 635, 637, 95, 96, 97, 98, 662, 99, 663,
	664, 0, 100, 0, 101, 0, 0, 0, 655, 103,
	0, 104, 0, 0, 0, 606, 105, 106, 642, 643,
	620, 0, 0, 107, 108, 665, 0, 109, 0, 110,
	0, 0, 283, 0, 111, 653, 0, 224, 0, 112,
	113, 114, 649, 651, 285, 0, 117, 0, 115, 0,
	284, 116, 666, 667, 668, 669, 0, 632, 0, 286,
	118, 287, 119, 120, 0, 122, 121, 0, 654, 288,
	123, 289, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 290, 131, 132, 135, 133, 595, 134,
	621, 650, 136, 670, 137, 138, 0, 139, 0, 0,
	0, 0, 140, 235, 291, 141, 292, 644, 142, 143,
	144, 145, 0, 645, 146, 238, 147, 0, 148, 149,
	150, 671, 151, 152, 0, 153, 154, 155, 156, 157,
	159, 160, 158, 161, 0, 162, 293, 163, 164, 610,
	165, 0, 166, 167, 168, 169, 0, 241, 170, 171,
	638, 172, 173, 294, 174, 672, 243, 175, 0, 181,
	176, 177, 178, 180, 673, 179, 646, 0, 182, 0,
	183, 184, 185, 0, 246, 674, 675, 0, 0, 186,
	647, 648, 619, 187, 188, 189, 190, 0, 0, 191,
	192, 193, 639, 194, 0, 195, 196, 197, 251, 676,
	0, 0, 198, 0, 0, 0, 0, 199, 200, 201,
	202, 596, 0, 0, 0, 0, 625, 614, 615, 612,
	613, 601, 592, 593, 0, 0, 0, 0, 594, 936,
	1197, 602, 78, 79, 0, 80, 600, 0, 0, 0,
	641, 607, 0, 0, 0, 81, 82, 204, 656, 206,
	657, 83, 658, 659, 0, 84, 210, 211, 85, 622,
	640, 660, 661, 214, 0, 652, 0, 633, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 282,
	93, 94, 0, 634, 636, 0, 635, 637, 95, 96,
	97, 98, 662, 99, 663, 664, 0, 100, 0, 101,
	0, 0, 0, 655, 103, 0, 104, 0, 0, 0,
	606, 105, 106, 642, 643, 620, 0, 0, 107, 108,
	665, 0, 109, 0, 110, 0, 0, 283, 0, 111,
	653, 0, 224, 0, 112, 113, 114, 649, 651, 285,
	0, 117, 0, 115, 0, 284, 116, 666, 667, 668,
	669, 0, 632, 0, 286, 118, 287, 119, 120, 0,
	122, 121, 0, 654, 288, 123, 289, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 290, 131,
	132, 135, 133, 595, 134, 621, 650, 136, 670, 137,
	138, 0, 139, 0, 0, 0, 0, 140, 235, 291,
	141, 292, 644, 142, 143, 144, 145, 0, 645, 146,
	238, 147, 0, 148, 149, 150, 671, 151, 152, 0,
	153, 154, 155, 156, 157, 159, 160, 158, 161, 0,
	162, 293, 163, 164, 610, 165, 0, 166, 167, 168,
	169, 0, 241, 170, 171, 638, 172, 173, 294, 174,
	672, 243, 175, 0, 181, 176, 177, 178, 180, 673,
	179, 646, 0, 182, 0, 183, 184, 185, 0, 246,
	674, 675, 0, 0, 186, 647, 648, 619, 187, 188,
	189, 190, 0, 0, 191, 192, 193, 639, 194, 0,
	195, 196, 197, 251, 676, 0, 0, 198, 0, 0,
	0, 0, 199, 200, 201, 202, 596, 0, 625, 614,
	615, 612, 613, 601, 0, 0, 0, 592, 593, 590,
	0, 0, 0, 594, 78, 79, 602, 80, 0, 0,
	0, 600, 641, 607, 0, 0, 0, 81, 82, 204,
	656, 206, 657, 83, 658, 659, 0, 84, 210, 211,
	85, 622, 640, 660, 661, 214, 0, 652, 0, 633,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 282, 93, 94, 0, 634, 636, 0, 635, 637,
	95, 96, 97, 98, 662, 99, 663, 664, 0, 100,
	0, 101, 0, 0, 0, 655, 103, 0, 104, 0,
	0, 0, 606, 105, 106, 642, 643, 620, 0, 0,
	107, 108, 665, 0, 109, 0, 110, 0, 0, 283,
	0, 111, 653, 0, 224, 0, 112, 113, 114, 649,
	651, 285, 0, 117, 0, 115, 0, 284, 116, 666,
	667, 668, 669, 0, 632, 0, 286, 118, 287, 119,
	120, 0, 122, 121, 0, 654, 288, 123, 289, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	290, 131, 132, 135, 133, 595, 134, 621, 650, 136,
	670, 137, 138, 0, 139, 0, 0, 0, 0, 140,
	235, 291, 141, 292, 644, 142, 143, 144, 145, 0,
	645, 146, 238, 147, 0, 148, 149, 150, 671, 151,
	152, 0, 153, 154, 155, 156, 157, 159, 160, 158,
	161, 0, 162, 293, 163, 164, 610, 165, 0, 166,
	167, 168, 169, 0, 241, 170, 171, 638, 172, 173,
	294, 174, 672, 243, 175, 0, 181, 176, 177, 178,
	180, 673, 179, 646, 0, 182, 0, 183, 184, 185,
	0, 246, 674, 675, 0, 0, 186, 647, 648, 619,
	187, 188, 189, 190, 0, 0, 191, 192, 193, 639,
	194, 0, 195, 196, 197, 251, 676, 0, 0, 198,
	0, 0, 0, 0, 199, 200, 201, 202, 596, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	593, 0, 0, 0, 0, 594, 0, 0, 602, 1645,
	0, 0, 0, 600, 625, 614, 615, 612, 613, 601,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 0, 641, 607,
	0, 0, 0, 81, 82, 204, 656, 206, 657, 83,
	658, 659, 0, 84, 210, 211, 85, 622, 640, 660,
	661, 214, 0, 652, 0, 633, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 282, 93, 94,
	0, 634, 636, 0, 635, 637, 95, 96, 97, 98,
	662, 99, 663, 664, 0, 100, 0, 101, 0, 0,
	0, 655, 103, 0, 104, 0, 0, 0, 606, 105,
	106, 642, 643, 620, 0, 0, 107, 108, 665, 0,
	109, 0, 110, 0, 0, 283, 0, 111, 653, 0,
	224, 0, 112, 113, 114, 649, 651, 285, 0, 117,
	0, 115, 0, 284, 116, 666, 667, 668, 669, 0,
	632, 0, 286, 118, 287, 119, 120, 0, 122, 121,
	0, 654, 288, 123, 289, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 290, 131, 132, 135,
	133, 595, 134, 621, 650, 136, 670, 137, 138, 0,
	139, 0, 0, 0, 0, 140, 235, 291, 141, 292,
	644, 142, 143, 144, 145, 0, 645, 146, 238, 147,
	0, 148, 149, 150, 671, 151, 152, 0, 153, 154,
	155, 156, 157, 159, 160, 158, 161, 0, 162, 293,
	163, 164, 610, 165, 0, 166, 167, 168, 169, 0,
	241, 170, 171, 638, 172, 173, 294, 174, 672, 243,
	175, 0, 181, 176, 177, 178, 180, 673, 179, 646,
	0, 182, 0, 183, 184, 185, 0, 246, 674, 675,
	0, 0, 186, 647, 648, 619, 187, 188, 189, 190,
	0, 0, 191, 192, 193, 639, 194, 0, 195, 196,
	197, 251, 676, 1599, 0, 198, 0, 0, 0, 0,
	199, 200, 201, 202, 596, 0, 625, 614, 615, 612,
	613, 601, 0, 0, 0, 592, 593, 0, 0, 0,
	0, 594, 78, 79, 602, 80, 0, 0, 0, 600,
	641, 607, 0, 0, 0, 81, 82, 204, 656, 206,
	657, 83, 658, 659, 0, 84, 210, 211, 85, 622,
	640, 660, 661, 214, 0, 652, 0, 633, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 282,
	93, 94, 0, 634, 636, 0, 635, 637, 95, 96,
	97, 98, 662, 99, 663, 664, 0, 100, 0, 101,
	0, 0, 0, 655, 103, 0, 104, 0, 0, 0,
	606, 105, 106, 642, 643, 620, 0, 0, 107, 108,
	665, 0, 109, 0, 110, 0, 0, 283, 0, 111,
	653, 0, 224, 0, 112, 113, 114, 649, 651, 285,
	0, 117, 0, 115, 0, 284, 116, 666, 667, 668,
	669, 0, 632, 0, 286, 118, 287, 119, 120, 0,
	122, 121, 0, 654, 288, 123, 289, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 290, 131,
	132, 135, 133, 595, 134, 621, 650, 136, 670, 137,
	138, 0, 139, 0, 0, 0, 0, 140, 235, 291,
	141, 292, 644, 142, 143, 144, 145, 0, 645, 146,
	238, 147, 0, 148, 149, 150, 671, 151, 152, 0,
	153, 154, 155, 156, 157, 159, 160, 158, 161, 0,
	162, 293, 163, 164, 610, 165, 0, 166, 167, 168,
	169, 0, 241, 170, 171, 638, 172, 173, 294, 174,
	672, 243, 175, 0, 181, 176, 177, 178, 180, 673,
	179, 646, 0, 182, 0, 183, 184, 185, 0, 246,
	674, 675, 0, 0, 186, 647, 648, 619, 187, 188,
	189, 190, 0, 0, 191, 192, 193, 639, 194, 0,
	195, 196, 197, 251, 676, 0, 0, 198, 0, 0,
	0, 0, 199, 200, 201, 202, 596, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 593, 0,
	0, 0, 0, 594, 0, 0, 602, 1594, 0, 0,
	0, 600, 625, 614, 615, 612, 613, 601, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 0, 0, 641, 607, 0, 0,
	0, 81, 82, 204, 656, 206, 657, 83, 658, 659,
	0, 84, 210, 211, 85, 622, 640, 660, 661, 214,
	0, 652, 0, 633, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 282, 93, 94, 0, 634,
	636, 0, 635, 637, 95, 96, 97, 98, 662, 99,
	663, 664, 691, 100, 0, 101, 0, 0, 0, 655,
	103, 0, 104, 0, 0, 0, 606, 105, 106, 642,
	643, 620, 0, 0, 107, 108, 665, 0, 109, 0,
	110, 0, 0, 283, 0, 111, 653, 0, 224, 0,
	112, 113, 114, 649, 651, 285, 0, 117, 0, 115,
	0, 284, 116, 666, 667, 668, 669, 0, 632, 0,
	286, 118, 287, 119, 120, 0, 122, 121, 0, 654,
	288, 123, 289, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 290, 131, 132, 135, 133, 595,
	134, 621, 650, 136, 670, 137, 138, 0, 139, 0,
	0, 0, 0, 140, 235, 291, 141, 292, 644, 142,
	143, 144, 145, 0, 645, 146, 238, 147, 0, 148,
	149, 150, 671, 151, 152, 0, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 0, 162, 293, 163, 164,
	610, 165, 0, 166, 167, 168, 169, 0, 241, 170,
	171, 638, 172, 173, 294, 174, 672, 243, 175, 0,
	181, 176, 177, 178, 180, 673, 179, 646, 0, 182,
	0, 183, 184, 185, 0, 246, 674, 675, 0, 0,
	186, 647, 648, 619, 187, 188, 189, 190, 0, 0,
	191, 192, 193, 639, 194, 0, 195, 196, 197, 251,
	676, 0, 0, 198, 0, 0, 0, 0, 199, 200,
	201, 202, 596, 0, 625, 614, 615, 612, 613, 601,
	0, 0, 0, 592, 593, 0, 0, 0, 0, 594,
	78, 79, 602, 80, 0, 0, 0, 600, 641, 607,
	0, 0, 0, 81, 82, 204, 656, 206, 657, 83,
	658, 659, 0, 84, 210, 211, 85, 622, 640, 660,
	661, 214, 0, 652, 0, 633, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 282, 93, 94,
	0, 634, 636, 0, 635, 637, 95, 96, 97, 98,
	662, 99, 663, 664, 0, 100, 0, 101, 0, 0,
	0, 655, 103, 0, 104, 0, 0, 0, 606, 105,
	106, 642, 643, 620, 0, 0, 107, 108, 665, 0,
	109, 0, 110, 0, 1251, 283, 0, 111, 653, 0,
	224, 0, 112, 113, 114, 649, 651, 285, 0, 117,
	0, 115, 0, 284, 116, 666, 667, 668, 669, 0,
	632, 0, 286, 118, 287, 119, 120, 0, 122, 121,
	0, 654, 288, 123, 289, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 290, 131, 132, 135,
	133, 595, 134, 621, 650, 136, 670, 137, 138, 0,
	139, 0, 0, 0, 0, 140, 235, 291, 141, 292,
	644, 142, 143, 144, 145, 0, 645, 146, 238, 147,
	0, 148, 149, 150, 671, 151, 152, 0, 153, 154,
	155, 156, 157, 159, 160, 158, 161, 0, 162, 293,
	163, 164, 610, 165, 0, 166, 167, 168, 169, 0,
	241, 170, 171, 638, 172, 173, 294, 174, 672, 243,
	175, 0, 181, 176, 177, 178, 180, 673, 179, 646,
	0, 182, 0, 183, 184, 185, 0, 246, 674, 675,
	0, 0, 186, 647, 648, 619, 187, 188, 189, 190,
	0, 0, 191, 192, 193, 639, 194, 0, 195, 196,
	197, 251, 676, 0, 0, 198, 0, 0, 0, 0,
	199, 200, 201, 202, 596, 0, 625, 614, 615, 612,
	613, 601, 0, 0, 0, 592, 593, 0, 0, 0,
	0, 594, 78, 79, 602, 80, 0, 0, 0, 600,
	641, 607, 0, 0, 0, 81, 82, 204, 656, 206,
	657, 83, 658, 659, 0, 84, 210, 211, 85, 622,
	640, 660, 661, 214, 0, 652, 0, 633, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 282,
	93, 94, 0, 634, 636, 0, 635, 637, 95, 96,
	97, 98, 662, 99, 663, 664, 0, 100, 0, 101,
	0, 0, 0, 655, 103, 0, 104, 0, 0, 0,
	606, 105, 106, 642, 643, 620, 0, 0, 107, 108,
	665, 0, 109, 0, 110, 0, 0, 283, 0, 111,
	653, 0, 224, 0, 112, 113, 114, 649, 651, 285,
	0, 117, 0, 115, 0, 284, 116, 666, 667, 668,
	669, 0, 632, 0, 286, 118, 287, 119, 120, 0,
	122, 121, 0, 654, 288, 123, 289, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 290, 131,
	132, 135, 133, 595, 134, 621, 650, 136, 670, 137,
	138, 0, 139, 0, 0, 0, 0, 140, 235, 291,
	141, 292, 644, 142, 143, 144, 145, 0, 645, 146,
	238, 147, 0, 148, 149, 150, 671, 151, 152, 0,
	153, 154, 155, 156, 157, 159, 160, 158, 161, 0,
	162, 293, 163, 164, 610, 165, 0, 166, 167, 168,
	169, 0, 241, 170, 171, 638, 172, 173, 294, 174,
	672, 243, 175, 0, 181, 176, 177, 178, 180, 673,
	179, 646, 0, 182, 0, 183, 184, 185, 0, 246,
	674, 675, 0, 0, 186, 647, 648, 619, 187, 188,
	189, 190, 0, 0, 191, 192, 193, 639, 194, 0,
	195, 196, 197, 251, 676, 0, 0, 198, 0, 0,
	0, 0, 199, 200, 201, 202, 596, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 593, 0,
	0, 0, 0, 594, 0, 0, 602, 1200, 0, 0,
	0, 600, 625, 614, 615, 612, 613, 601, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 79,
	867, 80, 0, 0, 0, 0, 641, 607, 0, 0,
	0, 81, 82, 204, 656, 206, 657, 83, 658, 659,
	0, 84, 210, 211, 85, 622, 640, 660, 661, 214,
	0, 652, 0, 633, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 282, 93, 94, 0, 634,
	636, 0, 635, 637, 95, 96, 97, 98, 662, 99,
	663, 664, 0, 100, 0, 101, 0, 0, 0, 655,
	103, 0, 104, 0, 0, 0, 606, 105, 106, 642,
	643, 620, 0, 0, 107, 108, 665, 0, 109, 0,
	110, 0, 0, 283, 0, 111, 653, 0, 224, 0,
	112, 113, 114, 649, 651, 285, 0, 117, 0, 115,
	0, 284, 116, 666, 667, 668, 669, 0, 632, 0,
	286, 118, 287, 119, 120, 0, 122, 121, 0, 654,
	288, 123, 289, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 290, 131, 132, 135, 133, 595,
	134, 621, 650, 136, 670, 137, 138, 0, 139, 0,
	0, 0, 0, 140, 235, 291, 141, 292, 644, 142,
	143, 144, 145, 0, 645, 146, 238, 147, 0, 148,
	149, 150, 671, 151, 152, 0, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 0, 162, 293, 163, 164,
	610, 165, 0, 166, 167, 168, 169, 0, 241, 170,
	171, 638, 172, 173, 294, 174, 672, 243, 175, 0,
	181, 176, 177, 178, 180, 673, 179, 646, 0, 182,
	0, 183, 184, 185, 0, 246, 674, 675, 0, 0,
	186, 647, 648, 619, 187, 188, 189, 190, 0, 0,
	191, 192, 193, 639, 194, 0, 195, 196, 197, 251,
	676, 0, 0, 198, 0, 0, 0, 0, 199, 200,
	201, 202, 596, 0, 625, 614, 615, 612, 613, 601,
	0, 0, 0, 592, 593, 0, 0, 0, 0, 594,
	78, 79, 602, 80, 0, 0, 0, 600, 641, 607,
	0, 0, 0, 81, 82, 204, 656, 206, 657, 83,
	658, 659, 0, 84, 210, 211, 85, 622, 640, 660,
	661, 214, 0, 652, 0, 633, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 282, 93, 1963,
	0, 634, 636, 0, 635, 637, 95, 96, 97, 98,
	662, 99, 663, 664, 0, 100, 0, 101, 0, 0,
	0, 655, 103, 0, 104, 0, 0, 0, 606, 105,
	106, 642, 643, 620, 0, 0, 107, 108, 665, 0,
	109, 0, 110, 0, 0, 283, 0, 111, 653, 0,
	224, 0, 112, 113, 114, 649, 651, 285, 0, 117,
	0, 115, 0, 284, 116, 666, 667, 668, 669, 0,
	632, 0, 286, 118, 287, 119, 120, 0, 122, 121,
	0, 654, 288, 123, 289, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 290, 131, 132, 135,
	133, 595, 134, 621, 650, 136, 670, 137, 138, 0,
	139, 0, 0, 0, 0, 140, 235, 291, 141, 292,
	644, 142, 143, 144, 145, 0, 645, 146, 238, 147,
	0, 148, 149, 150, 671, 151, 152, 0, 153, 154,
	155, 156, 157, 159, 160, 158, 161, 0, 162, 293,
	163, 164, 610, 165, 0, 166, 167, 168, 169, 0,
	241, 170, 171, 638, 172, 173, 294, 174, 672, 243,
	175, 0, 181, 176, 177, 178, 180, 673, 179, 646,
	0, 182, 0, 183, 184, 185, 0, 246, 674, 675,
	0, 0, 186, 647, 648, 619, 187, 188, 1962, 190,
	0, 0, 191, 192, 193, 639, 194, 0, 195, 196,
	197, 251, 676, 0, 0, 198, 0, 0, 0, 0,
	199, 200, 201, 202, 596, 0, 625, 614, 615, 612,
	613, 601, 0, 0, 0, 592, 593, 0, 0, 0,
	0, 594, 78, 79, 602, 80, 0, 0, 0, 600,
	641, 607, 0, 0, 0, 81, 82, 1961, 656, 206,
	657, 83, 658, 659, 0, 84, 210, 211, 85, 622,
	640, 660, 661, 214, 0, 652, 0, 633, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 282,
	93, 1963, 0, 634, 636, 0, 635, 637, 95, 96,
	97, 98, 662, 99, 663, 664, 0, 100, 0, 101,
	0, 0, 0, 655, 103, 0, 104, 0, 0, 0,
	606, 105, 106, 642, 643, 620, 0, 0, 107, 108,
	665, 0, 109, 0, 110, 0, 0, 283, 0, 111,
	653, 0, 224, 0, 112, 113, 114, 649, 651, 285,
	0, 117, 0, 115, 0, 284, 116, 666, 667, 668,
	669, 0, 632, 0, 286, 118, 287, 119, 120, 0,
	122, 121, 0, 654, 288, 123, 289, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 290, 131,
	132, 135, 133, 595, 134, 621, 650, 136, 670, 137,
	138, 0, 139, 0, 0, 0, 0, 140, 235, 291,
	141, 292, 644, 142, 143, 144, 145, 0, 645, 146,
	238, 147, 0, 148, 149, 150, 671, 151, 152, 0,
	153, 154, 155, 156, 157, 159, 160, 158, 161, 0,
	162, 293, 163, 164, 610, 165, 0, 166, 167, 168,
	169, 0, 241, 170, 171, 638, 172, 173, 294, 174,
	672, 243, 175, 0, 181, 176, 177, 178, 180, 673,
	179, 646, 0, 182, 0, 183, 184, 185, 0, 246,
	674, 675, 0, 0, 186, 647, 648, 619, 187, 188,
	1962, 190, 0, 0, 191, 192, 193, 639, 194, 0,
	195, 196, 197, 251, 676, 0, 0, 198, 0, 0,
	0, 0, 199, 200, 201, 202, 596, 0, 625, 614,
	615, 612, 613, 601, 0, 0, 0, 592, 593, 0,
	0, 0, 0, 594, 78, 79, 602, 80, 0, 0,
	0, 600, 641, 607, 0, 0, 0, 81, 82, 204,
	656, 206, 657, 83, 658, 659, 0, 84, 210, 211,
	85, 622, 640, 660, 661, 214, 0, 652, 0, 633,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 282, 93, 94, 0, 634, 636, 0, 635, 637,
	95, 96, 97, 98, 662, 99, 663, 664, 0, 100,
	0, 101, 0, 0, 0, 655, 103, 0, 104, 0,
	0, 0, 606, 105, 106, 642, 643, 620, 0, 0,
	107, 108, 665, 0, 109, 0, 110, 0, 0, 283,
	0, 111, 653, 0, 224, 0, 112, 113, 114, 649,
	651, 285, 0, 117, 0, 115, 0, 284, 116, 666,
	667, 668, 669, 0, 632, 0, 286, 118, 287, 119,
	120, 0, 122, 121, 0, 654, 288, 123, 289, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	290, 131, 132, 135, 133, 595, 134, 621, 650, 136,
	670, 137, 138, 0, 139, 0, 0, 0, 0, 140,
	235, 291, 141, 292, 644, 142, 143, 144, 145, 0,
	645, 146, 238, 147, 0, 148, 149, 150, 671, 151,
	152, 0, 153, 154, 155, 156, 157, 159, 160, 158,
	161, 0, 162, 293, 163, 164, 610, 165, 0, 166,
	167, 168, 169, 0, 241, 170, 171, 638, 172, 173,
	294, 174, 672, 243, 175, 0, 181, 176, 177, 178,
	180, 673, 179, 646, 0, 182, 0, 183, 184, 185,
	0, 246, 674, 675, 0, 0, 186, 647, 648, 619,
	187, 188, 189, 190, 0, 0, 191, 192, 193, 639,
	194, 0, 195, 196, 197, 251, 676, 0, 0, 198,
	0, 0, 0, 0, 199, 200, 201, 202, 596, 0,
	1223, 614, 615, 612, 613, 601, 0, 0, 0, 592,
	593, 0, 0, 0, 0, 594, 78, 79, 602, 80,
	0, 0, 0, 600, 641, 607, 0, 0, 0, 81,
	82, 204, 656, 206, 657, 83, 658, 659, 0, 84,
	210, 211, 85, 622, 640, 660, 661, 214, 0, 652,
	0, 633, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 282, 93, 94, 0, 634, 636, 0,
	635, 637, 95, 96, 97, 98, 662, 1226, 663, 664,
	0, 100, 0, 101, 0, 0, 0, 655, 103, 0,
	104, 0, 0, 0, 606, 105, 106, 642, 643, 620,
	0, 0, 107, 108, 665, 0, 109, 0, 110, 0,
	0, 283, 0, 111, 653, 0, 224, 0, 112, 113,
	1227, 649, 651, 285, 0, 117, 0, 115, 0, 284,
	116, 666, 667, 668, 669, 0, 632, 0, 286, 118,
	287, 119, 120, 0, 122, 121, 0, 654, 288, 123,
	289, 0, 124, 0, 0, 125, 0, 126, 1228, 1225,
	129, 130, 290, 131, 132, 135, 133, 595, 134, 621,
	650, 136, 670, 137, 138, 0, 139, 0, 0, 0,
	0, 140, 235, 291, 141, 292, 644, 142, 143, 144,
	145, 0, 645, 146, 238, 147, 0, 148, 149, 150,
	671, 151, 152, 0, 153, 154, 155, 156, 157, 159,
	160, 158, 161, 0, 162, 293, 163, 164, 610, 165,
	0, 166, 167, 168, 1229, 0, 241, 170, 171, 638,
	172, 173, 294, 174, 672, 243, 175, 0, 181, 176,
	177, 178, 180, 673, 179, 646, 0, 182, 0, 183,
	184, 185, 0, 246, 674, 675, 0, 0, 186, 647,
	648, 619, 187, 188, 189, 190, 0, 0, 191, 192,
	193, 639, 194, 0, 195, 196, 197, 251, 676, 0,
	0, 198, 0, 0, 0, 0, 199, 200, 1224, 202,
	596, 0, 625, 614, 615, 612, 613, 601, 0, 0,
	0, 592, 593, 0, 0, 0, 0, 594, 78, 79,
	602, 80, 0, 0, 0, 600, 641, 607, 0, 0,
	0, 81, 82, 204, 656, 206, 657, 83, 658, 659,
	0, 84, 210, 211, 85, 622, 640, 660, 661, 214,
	0, 652, 0, 633, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 282, 93, 94, 0, 634,
	636, 0, 635, 637, 95, 96, 97, 98, 662, 99,
	663, 664, 0, 100, 0, 101, 0, 0, 0, 655,
	103, 0, 104, 0, 0, 0, 606, 105, 106, 642,
	643, 620, 0, 0, 107, 108, 665, 0, 109, 0,
	110, 0, 0, 283, 0, 111, 653, 0, 224, 0,
	112, 113, 114, 649, 651, 285, 0, 117, 0, 115,
	0, 284, 116, 666, 667, 668, 669, 0, 632, 0,
	286, 118, 287, 119, 120, 0, 122, 121, 0, 654,
	288, 123, 289, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 290, 131, 132, 135, 133, 0,
	134, 621, 650, 136, 670, 137, 138, 0, 139, 0,
	0, 0, 0, 140, 235, 291, 141, 292, 644, 142,
	143, 144, 145, 0, 645, 146, 238, 147, 0, 148,
	149, 150, 671, 151, 152, 0, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 0, 162, 293, 163, 164,
	1241, 165, 0, 166, 167, 168, 169, 0, 241, 170,
	171, 638, 172, 173, 294, 174, 672, 243, 175, 0,
	181, 176, 177, 178, 180, 673, 179, 646, 0, 182,
	0, 183, 184, 185, 0, 246, 674, 675, 0, 0,
	186, 647, 648, 619, 187, 188, 189, 190, 0, 0,
	191, 192, 193, 639, 194, 0, 195, 196, 197, 251,
	676, 0, 0, 198, 0, 0, 0, 0, 199, 200,
	201, 202, 0, 0, 625, 614, 615, 612, 613, 601,
	0, 0, 0, 1237, 1238, 0, 0, 0, 0, 1239,
	78, 79, 1240, 80, 0, 0, 0, 600, 641, 607,
	0, 0, 0, 81, 82, 0, 656, 206, 657, 83,
	658, 659, 0, 84, 210, 211, 85, 622, 640, 660,
	661, 214, 0, 652, 0, 633, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 282, 93, 1963,
	0, 634, 636, 0, 635, 637, 95, 96, 97, 98,
	662, 99, 663, 664, 0, 100, 0, 101, 0, 0,
	0, 655, 103, 0, 104, 0, 0, 0, 606, 105,
	106, 642, 643, 620, 0, 0, 107, 108, 665, 0,
	109, 0, 110, 0, 0, 283, 0, 111, 653, 0,
	224, 0, 112, 113, 114, 649, 651, 0, 0, 117,
	0, 115, 0, 284, 116, 666, 667, 668, 669, 0,
	632, 0, 0, 118, 287, 119, 120, 0, 122, 121,
	0, 654, 288, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 290, 131, 132, 135,
	133, 595, 134, 621, 650, 136, 670, 137, 138, 0,
	139, 0, 0, 0, 0, 140, 235, 291, 141, 292,
	644, 142, 143, 144, 145, 0, 645, 146, 238, 147,
	0, 148, 149, 150, 671, 151, 152, 0, 153, 154,
	155, 156, 157, 159, 160, 158, 161, 0, 162, 293,
	163, 164, 610, 165, 0, 166, 167, 168, 169, 0,
	241, 170, 171, 638, 172, 173, 0, 174, 672, 243,
	175, 0, 181, 176, 177, 178, 180, 673, 179, 646,
	0, 182, 0, 183, 184, 185, 0, 246, 674, 675,
	0, 0, 186, 647, 648, 619, 187, 188, 1962, 190,
	0, 0, 191, 192, 193, 639, 194, 0, 195, 196,
	197, 251, 676, 0, 0, 198, 0, 0, 0, 0,
	199, 200, 201, 202, 0, 0, 625, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 593, 0, 0, 0,
	0, 594, 78, 79, 602, 80, 0, 0, 0, 600,
	641, 0, 0, 0, 0, 81, 82, 204, 205, 206,
	207, 83, 208, 209, 0, 84, 210, 211, 85, 0,
	640, 212, 213, 214, 0, 652, 0, 633, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 282,
	93, 94, 0, 634, 636, 0, 635, 637, 95, 96,
	97, 98, 216, 99, 217, 218, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	219, 105, 106, 642, 643, 0, 0, 0, 107, 108,
	222, 0, 109, 0, 110, 0, 0, 283, 0, 111,
	653, 0, 224, 0, 112, 113, 114, 649, 651, 285,
	0, 117, 0, 115, 0, 284, 116, 227, 228, 229,
	230, 0, 231, 0, 286, 118, 287, 119, 120, 0,
	122, 121, 0, 654, 288, 123, 289, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 290, 131,
	132, 135, 133, 0, 134, 0, 650, 136, 234, 137,
	138, 0, 139, 0, 0, 0, 0, 140, 235, 291,
	141, 292, 644, 142, 143, 144, 145, 0, 645, 146,
	238, 147, 0, 148, 149, 150, 239, 151, 152, 0,
	153, 154, 155, 156, 157, 159, 160, 158, 161, 0,
	162, 293, 163, 164, 240, 165, 0, 166, 167, 168,
	169, 0, 241, 170, 171, 638, 172, 173, 294, 174,
	242, 243, 175, 0, 181, 176, 177, 178, 180, 244,
	179, 646, 0, 182, 0, 183, 184, 185, 0, 246,
	247, 248, 0, 0, 186, 647, 648, 0, 187, 188,
	189, 190, 503, 0, 191, 192, 193, 639, 194, 0,
	195, 196, 197, 251, 252, 0, 0, 198, 78, 79,
	0, 80, 199, 200, 201, 202, 203, 0, 0, 0,
	0, 81, 82, 204, 205, 206, 207, 83, 208, 209,
	0, 84, 210, 211, 85, 0, 1712, 212, 213, 214,
	0, 215, 0, 281, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 282, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 216, 99,
	217, 218, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 219, 105, 106, 220,
	221, 0, 0, 0, 107, 108, 222, 0, 109, 0,
	110, 0, 0, 283, 0, 111, 223, 0, 224, 0,
	112, 113, 114, 225, 226, 285, 0, 117, 0, 115,
	0, 284, 116, 227, 228, 229, 230, 0, 231, 0,
	286, 118, 287, 119, 120, 0, 122, 121, 0, 232,
	288, 123, 289, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 290, 131, 132, 135, 133, 0,
	134, 0, 233, 136, 234, 137, 138, 0, 139, 0,
	0, 0, 0, 140, 235, 291, 141, 292, 236, 142,
	143, 144, 145, 0, 237, 146, 238, 147, 0, 148,
	149, 150, 239, 151, 152, 0, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 0, 162, 293, 163, 164,
	240, 165, 0, 166, 167, 168, 169, 64, 241, 170,
	171, 0, 172, 173, 294, 174, 242, 243, 175, 0,
	181, 176, 177, 178, 180, 244, 179, 245, 0, 182,
	66, 183, 184, 185, 0, 246, 247, 248, 0, 0,
	186, 249, 250, 0, 187, 188, 189, 190, 0, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 507,
	252, 0, 0, 198, 0, 0, 0, 62, 199, 200,
	201, 202, 0, 63, 503, 817, 0, 818, 813, 808,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 79, 61, 80, 0, 0, 0, 0, 203, 0,
	0, 0, 0, 81, 82, 204, 205, 206, 207, 83,
	208, 209, 0, 84, 210, 211, 85, 0, 0, 212,
	213, 214, 0, 215, 0, 281, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 282, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	216, 99, 217, 218, 821, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 219, 105,
	106, 220, 221, 810, 0, 0, 107, 108, 222, 0,
	109, 0, 110, 0, 0, 283, 0, 111, 223, 0,
	224, 0, 112, 113, 114, 225, 226, 285, 0, 117,
	0, 115, 0, 284, 116, 227, 228, 229, 230, 0,
	231, 0, 286, 118, 287, 119, 120, 0, 122, 121,
	0, 232, 288, 123, 289, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 290, 131, 132, 135,
	133, 0, 134, 0, 233, 136, 234, 137, 138, 0,
	139, 811, 0, 0, 0, 140, 235, 291, 141, 292,
	236, 142, 143, 144, 145, 0, 237, 146, 238, 147,
	0, 148, 149, 150, 239, 151, 152, 0, 153, 154,
	155, 156, 157, 159, 160, 158, 161, 0, 162, 293,
	163, 164, 240, 165, 0, 166, 167, 168, 169, 0,
	241, 170, 171, 0, 172, 173, 294, 174, 242, 243,
	175, 0, 181, 176, 177, 178, 180, 244, 179, 245,
	0, 182, 0, 183, 184, 185, 0, 246, 247, 248,
	0, 0, 186, 249, 250, 809, 187, 188, 189, 190,
	0, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 251, 252, 503, 817, 198, 818, 813, 808, 0,
	199, 200, 201, 202, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 819, 814, 203, 0, 0,
	0, 0, 81, 82, 204, 205, 206, 207, 83, 208,
	209, 0, 84, 210, 211, 85, 0, 0, 212, 213,
	214, 0, 215, 0, 281, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 282, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 216,
	99, 217, 218, 804, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 219, 105, 106,
	220, 221, 810, 0, 0, 107, 108, 222, 0, 109,
	0, 110, 0, 0, 283, 0, 111, 223, 0, 224,
	0, 112, 113, 114, 225, 226, 285, 0, 117, 0,
	115, 0, 284, 116, 227, 228, 229, 230, 0, 231,
	0, 286, 118, 287, 119, 120, 0, 122, 121, 0,
	232, 288, 123, 289, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 290, 131, 132, 135, 133,
	0, 134, 0, 233, 136, 234, 137, 138, 0, 139,
	811, 0, 0, 0, 140, 235, 291, 141, 292, 236,
	142, 143, 144, 145, 0, 237, 146, 238, 147, 0,
	148, 149, 150, 239, 151, 152, 0, 153, 154, 155,
	156, 157, 159, 160, 158, 161, 0, 162, 293, 163,
	164, 240, 165, 0, 166, 167, 168, 169, 0, 241,
	170, 171, 0, 172, 173, 294, 174, 242, 243, 175,
	0, 181, 176, 177, 178, 180, 244, 179, 245, 0,
	182, 0, 183, 184, 185, 0, 246, 247, 248, 0,
	0, 186, 249, 250, 809, 187, 188, 189, 190, 0,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	251, 252, 503, 817, 198, 818, 813, 808, 0, 199,
	200, 201, 202, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 819, 814, 203, 0, 0, 0,
	0, 81, 82, 204, 205, 206, 207, 83, 208, 209,
	0, 84, 210, 211, 85, 0, 0, 212, 213, 214,
	0, 215, 0, 281, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 282, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 216, 99,
	217, 218, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 219, 105, 106, 220,
	221, 810, 0, 0, 107, 108, 222, 0, 109, 0,
	110, 0, 0, 283, 0, 111, 223, 0, 224, 0,
	112, 113, 114, 225, 226, 285, 0, 117, 0, 115,
	0, 284, 116, 227, 228, 229, 230, 0, 231, 0,
	286, 118, 287, 119, 120, 0, 122, 121, 0, 232,
	288, 123, 289, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 290, 131, 132, 135, 133, 0,
	134, 0, 233, 136, 234, 137, 138, 0, 139, 811,
	0, 0, 0, 140, 235, 291, 141, 292, 236, 142,
	143, 144, 145, 0, 237, 146, 238, 147, 0, 148,
	149, 150, 239, 151, 152, 0, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 0, 162, 293, 163, 164,
	240, 165, 0, 166, 167, 168, 169, 0, 241, 170,
	171, 0, 172, 173, 294, 174, 242, 243, 175, 0,
	181, 176, 177, 178, 180, 244, 179, 245, 0, 182,
	0, 183, 184, 185, 0, 246, 247, 248, 0, 0,
	186, 249, 250, 809, 187, 188, 189, 190, 0, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 251,
	252, 75, 0, 198, 0, 0, 0, 0, 199, 200,
	201, 202, 0, 0, 0, 0, 0, 78, 79, 0,
	80, 0, 0, 819, 814, 203, 0, 0, 0, 0,
	81, 82, 204, 205, 206, 207, 83, 208, 209, 0,
	84, 210, 211, 85, 0, 0, 212, 213, 214, 0,
	215, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 216, 99, 217,
	218, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 219, 105, 106, 220, 221,
	0, 0, 0, 107, 108, 222, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 223, 0, 224, 0, 112,
	113, 114, 225, 226, 0, 0, 117, 0, 115, 0,
	0, 116, 227, 228, 229, 230, 0, 231, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 232, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 233, 136, 234, 137, 138, 0, 139, 0, 0,
	0, 0, 140, 235, 0, 141, 0, 236, 142, 143,
	144, 145, 0, 237, 146, 238, 147, 0, 148, 149,
	150, 239, 151, 152, 0, 153, 154, 155, 156, 157,
	159, 160, 158, 161, 0, 162, 0, 163, 164, 240,
	165, 0, 166, 167, 168, 169, 64, 241, 170, 171,
	0, 172, 173, 0, 174, 242, 243, 175, 0, 181,
	176, 177, 178, 180, 244, 179, 245, 0, 182, 66,
	183, 184, 185, 0, 246, 247, 248, 0, 0, 186,
	249, 250, 0, 187, 188, 189, 190, 0, 0, 191,
	192, 193, 0, 194, 0, 195, 196, 197, 507, 252,
	0, 0, 198, 75, 0, 0, 62, 199, 200, 201,
	202, 0, 63, 0, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 0, 0, 203, 0, 0,
	0, 61, 81, 82, 204, 205, 206, 207, 83, 208,
	209, 0, 84, 210, 211, 85, 0, 0, 212, 213,
	214, 0, 215, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 216,
	99, 217, 218, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 219, 105, 106,
	220, 221, 0, 0, 0, 107, 108, 222, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 223, 0, 224,
	0, 112, 113, 114, 225, 226, 0, 0, 117, 0,
	115, 0, 0, 116, 227, 228, 229, 230, 0, 231,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	232, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 233, 136, 234, 137, 138, 0, 139,
	0, 464, 0, 0, 140, 235, 0, 141, 0, 236,
	142, 143, 144, 145, 0, 237, 146, 238, 147, 0,
	148, 149, 150, 239, 151, 152, 0, 153, 154, 155,
	156, 157, 159, 160, 158, 161, 0, 162, 0, 163,
	164, 240, 165, 0, 166, 167, 168, 169, 0, 241,
	170, 171, 0, 172, 173, 0, 174, 242, 243, 175,
	0, 181, 176, 177, 178, 180, 244, 179, 245, 0,
	182, 0, 183, 184, 185, 0, 246, 247, 248, 0,
	0, 186, 249, 250, 0, 187, 188, 189, 190, 75,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	251, 252, 0, 0, 198, 78, 79, 0, 80, 199,
	200, 201, 202, 203, 0, 0, 0, 0, 81, 82,
	204, 205, 206, 207, 83, 208, 209, 0, 84, 210,
	211, 85, 0, 1129, 212, 213, 214, 0, 215, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 216, 99, 217, 218, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 219, 105, 106, 220, 221, 0, 0,
	0, 107, 108, 222, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 223, 0, 224, 0, 112, 113, 114,
	225, 226, 0, 0, 117, 0, 115, 0, 0, 116,
	227, 228, 229, 230, 0, 231, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 232, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 233,
	136, 234, 137, 138, 0, 139, 0, 0, 0, 0,
	140, 235, 0, 141, 0, 236, 142, 143, 144, 145,
	0, 237, 146, 238, 147, 0, 148, 149, 150, 239,
	151, 152, 0, 153, 154, 155, 156, 157, 159, 160,
	158, 161, 0, 162, 0, 163, 164, 240, 165, 0,
	166, 167, 168, 169, 0, 241, 170, 171, 0, 172,
	173, 0, 174, 242, 243, 175, 0, 181, 176, 177,
	178, 180, 244, 179, 245, 0, 182, 0, 183, 184,
	185, 0, 246, 247, 248, 0, 0, 186, 249, 250,
	0, 187, 188, 189, 190, 0, 0, 191, 192, 193,
	0, 194, 0, 195, 196, 197, 251, 252, 0, 0,
	198, 0, 75, 0, 0, 199, 200, 201, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 0, 0, 203, 0, 0, 0,
	709, 81, 82, 204, 205, 206, 207, 83, 208, 209,
	0, 84, 210, 211, 85, 0, 0, 212, 213, 214,
	0, 215, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 216, 99,
	217, 218, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 219, 105, 106, 220,
	221, 0, 0, 0, 107, 108, 222, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 223, 0, 224, 0,
	112, 113, 114, 225, 226, 0, 0, 117, 0, 115,
	0, 0, 116, 227, 228, 229, 230, 0, 231, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 232,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 233, 136, 234, 137, 138, 0, 139, 0,
	0, 0, 0, 140, 235, 0, 141, 0, 236, 142,
	143, 144, 145, 0, 237, 146, 238, 147, 0, 148,
	149, 150, 239, 151, 152, 0, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 0, 162, 0, 163, 164,
	240, 165, 0, 166, 167, 168, 169, 0, 241, 170,
	171, 0, 172, 173, 0, 174, 242, 243, 175, 0,
	181, 176, 177, 178, 180, 244, 179, 245, 0, 182,
	0, 183, 184, 185, 0, 246, 247, 248, 0, 0,
	186, 249, 250, 0, 187, 188, 189, 190, 75, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 251,
	252, 0, 0, 198, 78, 79, 0, 80, 199, 200,
	201, 202, 203, 0, 0, 0, 0, 81, 82, 204,
	205, 206, 207, 83, 208, 209, 0, 84, 210, 211,
	85, 0, 1031, 212, 213, 214, 0, 215, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 216, 99, 217, 218, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 219, 105, 106, 220, 221, 0, 0, 0,
	107, 108, 222, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 223, 0, 224, 0, 112, 113, 114, 225,
	226, 0, 0, 117, 0, 115, 0, 0, 116, 227,
	228, 229, 230, 0, 231, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 232, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 233, 136,
	234, 137, 138, 0, 139, 0, 0, 0, 0, 140,
	235, 0, 141, 0, 236, 142, 143, 144, 145, 0,
	237, 146, 238, 147, 0, 148, 149, 150, 239, 151,
	152, 0, 153, 154, 155, 156, 157, 159, 160, 158,
	161, 0, 162, 0, 163, 164, 240, 165, 0, 166,
	167, 168, 169, 0, 241, 170, 171, 0, 172, 173,
	0, 174, 242, 243, 175, 0, 181, 176, 177, 178,
	180, 244, 179, 245, 0, 182, 0, 183, 184, 185,
	0, 246, 247, 248, 0, 0, 186, 249, 250, 0,
	187, 188, 189, 190, 75, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 251, 252, 0, 0, 198,
	78, 79, 0, 80, 199, 200, 201, 202, 203, 0,
	0, 0, 0, 81, 82, 204, 205, 206, 207, 83,
	208, 209, 0, 84, 210, 211, 85, 0, 1609, 212,
	213, 214, 0, 215, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	216, 99, 217, 218, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 219, 105,
	106, 220, 221, 0, 0, 0, 107, 108, 222, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 223, 0,
	224, 0, 112, 113, 114, 225, 226, 0, 0, 117,
	0, 115, 0, 0, 116, 227, 228, 229, 230, 0,
	231, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 232, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 233, 136, 234, 137, 138, 0,
	139, 0, 0, 0, 0, 140, 235, 0, 141, 0,
	236, 142, 143, 144, 145, 0, 237, 146, 238, 147,
	0, 148, 149, 150, 239, 151, 152, 0, 153, 154,
	155, 156, 157, 159, 160, 158, 161, 0, 162, 0,
	163, 164, 240, 165, 0, 166, 167, 168, 169, 0,
	241, 170, 171, 0, 172, 173, 0, 174, 242, 243,
	175, 0, 181, 176, 177, 178, 180, 244, 179, 245,
	0, 182, 0, 183, 184, 185, 0, 246, 247, 248,
	0, 0, 186, 249, 250, 0, 187, 188, 189, 190,
	0, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 251, 252, 0, 0, 198, 0, 0, 0, 0,
	199, 200, 201, 202, 625, 614, 615, 612, 613, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 687, 0, 0, 0, 203, 0,
	0, 0, 0, 81, 82, 204, 656, 206, 657, 83,
	658, 659, 0, 84, 210, 211, 85, 0, 0, 660,
	661, 214, 0, 215, 0, 281, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 282, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	662, 99, 663, 664, 0, 100, 0, 101, 0, 0,
	0, 655, 103, 0, 104, 0, 0, 0, 219, 105,
	106, 220, 221, 620, 0, 0, 107, 108, 665, 0,
	109, 0, 110, 0, 0, 283, 0, 111, 223, 0,
	224, 0, 112, 113, 114, 225, 226, 285, 0, 117,
	0, 115, 0, 284, 116, 666, 667, 668, 669, 0,
	632, 0, 286, 118, 287, 119, 120, 0, 122, 121,
	0, 232, 288, 123, 289, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 290, 131, 132, 135,
	133, 0, 134, 621, 233, 136, 670, 137, 138, 0,
	139, 0, 0, 0, 0, 140, 235, 291, 141, 292,
	236, 142, 143, 144, 145, 0, 237, 146, 238, 147,
	0, 148, 149, 150, 671, 151, 152, 0, 153, 154,
	155, 156, 157, 159, 160, 158, 161, 0, 162, 293,
	163, 164, 240, 165, 0, 166, 167, 168, 169, 0,
	241, 170, 171, 0, 172, 173, 294, 174, 672, 243,
	175, 0, 181, 176, 177, 178, 180, 673, 179, 245,
	0, 182, 0, 183, 184, 185, 0, 246, 674, 675,
	0, 0, 186, 249, 250, 619, 187, 188, 189, 190,
	75, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 251, 676, 0, 0, 198, 78, 79, 0, 80,
	199, 200, 201, 202, 203, 0, 0, 0, 0, 81,
	82, 204, 205, 206, 207, 83, 208, 209, 0, 84,
	210, 211, 85, 0, 0, 212, 213, 214, 0, 215,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 788, 98, 216, 99, 217, 218,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 219, 105, 106, 220, 221, 0,
	0, 0, 107, 108, 222, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 223, 0, 224, 0, 112, 113,
	114, 225, 226, 0, 0, 117, 0, 115, 0, 0,
	116, 227, 228, 229, 230, 0, 231, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 232, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	233, 136, 234, 137, 138, 0, 139, 0, 0, 0,
	0, 140, 235, 0, 141, 0, 236, 142, 143, 144,
	145, 0, 237, 146, 238, 147, 0, 148, 149, 150,
	239, 151, 152, 0, 153, 154, 155, 156, 157, 159,
	160, 158, 161, 0, 162, 0, 163, 164, 240, 165,
	0, 166, 167, 168, 169, 0, 241, 170, 171, 0,
	172, 173, 0, 174, 242, 243, 175, 0, 181, 176,
	177, 178, 180, 244, 179, 245, 0, 182, 787, 183,
	184, 185, 0, 246, 247, 248, 0, 0, 186, 249,
	250, 0, 187, 188, 189, 190, 0, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 251, 252, 0,
	75, 198, 0, 0, 0, 0, 199, 200, 201, 202,
	0, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 791, 203, 0, 0, 0, 0, 81,
	82, 204, 205, 206, 207, 83, 208, 209, 0, 84,
	210, 211, 85, 0, 0, 212, 213, 214, 0, 215,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 216, 99, 217, 218,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 219, 105, 106, 220, 221, 0,
	0, 0, 107, 108, 222, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 223, 0, 224, 0, 112, 113,
	114, 225, 226, 0, 0, 117, 0, 115, 0, 0,
	116, 227, 228, 229, 230, 0, 231, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 232, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	233, 136, 234, 137, 138, 0, 139, 0, 0, 0,
	0, 140, 235, 0, 141, 0, 236, 142, 143, 144,
	145, 0, 237, 146, 238, 147, 0, 148, 149, 150,
	239, 151, 152, 0, 153, 154, 155, 156, 157, 159,
	160, 158, 161, 0, 162, 0, 163, 164, 240, 165,
	0, 166, 167, 168, 169, 0, 241, 170, 171, 0,
	172, 173, 0, 174, 242, 243, 175, 0, 181, 176,
	177, 178, 180, 244, 179, 245, 0, 182, 0, 183,
	184, 185, 0, 246, 247, 248, 0, 0, 186, 249,
	250, 0, 187, 188, 189, 190, 0, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 251, 252, 0,
	503, 198, 0, 0, 0, 0, 199, 200, 201, 202,
	0, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 791, 203, 0, 0, 0, 0, 81,
	82, 204, 205, 206, 207, 83, 208, 209, 0, 84,
	210, 211, 85, 0, 0, 212, 213, 214, 0, 215,
	0, 281, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 282, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 216, 99, 217, 218,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 219, 105, 106, 220, 221, 0,
	0, 0, 107, 108, 222, 0, 109, 0, 110, 0,
	0, 283, 0, 111, 223, 0, 224, 0, 112, 113,
	114, 225, 226, 285, 0, 117, 0, 115, 0, 284,
	116, 227, 228, 229, 230, 0, 231, 0, 286, 118,
	287, 119, 120, 0, 122, 121, 0, 232, 288, 123,
	289, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 290, 131, 132, 135, 133, 0, 134, 0,
	233, 136, 234, 137, 138, 0, 139, 0, 0, 0,
	0, 140, 235, 291, 141, 292, 236, 142, 143, 144,
	145, 0, 237, 146, 238, 147, 0, 148, 149, 150,
	239, 151, 152, 0, 153, 154, 155, 156, 157, 159,
	160, 158, 161, 0, 162, 293, 163, 164, 240, 165,
	0, 166, 167, 168, 169, 0, 241, 170, 171, 0,
	172, 173, 294, 174, 242, 243, 175, 0, 181, 176,
	177, 178, 180, 244, 179, 245, 0, 182, 0, 183,
	184, 185, 0, 246, 247, 248, 0, 0, 186, 249,
	250, 0, 187, 188, 189, 190, 75, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 251, 252, 0,
	0, 198, 78, 79, 0, 80, 199, 200, 201, 202,
	203, 0, 0, 0, 0, 81, 82, 204, 205, 206,
	207, 83, 208, 209, 0, 84, 210, 211, 85, 0,
	0, 212, 213, 214, 995, 215, 0, 0, 0, 86,
	87, 88, 0, 89, 993, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 216, 99, 217, 218, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	219, 105, 106, 220, 221, 0, 1100, 0, 107, 108,
	222, 0, 109, 0, 110, 998, 0, 0, 0, 111,
	223, 0, 224, 0, 112, 113, 114, 225, 226, 0,
	0, 117, 1098, 115, 0, 0, 116, 227, 228, 229,
	230, 0, 231, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 232, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 233, 136, 234, 137,
	138, 0, 139, 0, 0, 0, 0, 140, 235, 0,
	141, 0, 236, 142, 143, 144, 145, 0, 237, 146,
	238, 147, 997, 148, 149, 150, 239, 151, 152, 0,
	153, 154, 155, 156, 157, 159, 160, 158, 161, 0,
	162, 0, 163, 164, 240, 165, 0, 166, 167, 168,
	169, 0, 241, 170, 171, 0, 172, 173, 0, 174,
	242, 243, 175, 0, 181, 176, 177, 178, 180, 244,
	179, 245, 0, 182, 0, 183, 184, 185, 0, 246,
	247, 248, 0, 0, 186, 249, 250, 0, 187, 188,
	189, 190, 75, 1099, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 251, 252, 0, 0, 198, 78, 79,
	0, 80, 199, 200, 201, 202, 203, 0, 0, 0,
	0, 81, 82, 204, 205, 206, 207, 83, 208, 209,
	0, 84, 210, 211, 85, 0, 0, 212, 213, 214,
	995, 215, 0, 0, 990, 86, 87, 88, 0, 89,
	993, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 216, 99,
	217, 218, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 219, 105, 106, 220,
	221, 0, 0, 0, 107, 108, 222, 0, 109, 0,
	110, 998, 0, 0, 0, 111, 223, 0, 224, 0,
	112, 113, 114, 989, 226, 0, 0, 117, 0, 115,
	0, 0, 116, 227, 228, 229, 230, 0, 231, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 232,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 233, 136, 234, 137, 138, 0, 139, 0,
	0, 0, 0, 140, 235, 0, 141, 0, 236, 142,
	143, 144, 145, 0, 237, 146, 238, 147, 997, 148,
	149, 150, 239, 151, 152, 0, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 0, 162, 0, 163, 164,
	240, 165, 0, 166, 167, 168, 169, 0, 241, 170,
	171, 0, 172, 173, 0, 174, 242, 243, 175, 0,
	181, 176, 177, 178, 180, 244, 179, 245, 0, 182,
	0, 183, 184, 185, 0, 246, 247, 248, 0, 0,
	186, 249, 250, 0, 187, 188, 189, 190, 75, 996,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 251,
	252, 0, 0, 198, 78, 79, 0, 80, 199, 200,
	201, 202, 203, 0, 1578, 0, 0, 81, 82, 204,
	205, 206, 207, 83, 208, 209, 0, 84, 210, 211,
	85, 0, 0, 212, 213, 214, 0, 215, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 216, 99, 217, 218, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 219, 105, 106, 220, 221, 0, 0, 0,
	107, 108, 222, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 223, 0, 224, 0, 112, 113, 114, 225,
	226, 0, 0, 117, 0, 115, 0, 0, 116, 227,
	228, 229, 230, 0, 231, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 232, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 233, 136,
	234, 137, 138, 0, 139, 0, 0, 0, 0, 140,
	235, 0, 141, 0, 236, 142, 143, 144, 145, 0,
	237, 146, 238, 147, 0, 148, 149, 150, 239, 151,
	152, 0, 153, 154, 155, 156, 157, 159, 160, 158,
	161, 0, 162, 0, 163, 164, 240, 165, 0, 166,
	167, 168, 169, 0, 241, 170, 171, 0, 172, 173,
	0, 174, 242, 243, 175, 0, 181, 176, 177, 178,
	180, 244, 179, 245, 0, 182, 0, 183, 184, 185,
	0, 246, 247, 248, 0, 0, 186, 249, 250, 0,
	187, 188, 189, 190, 75, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 251, 252, 0, 0, 198,
	78, 79, 0, 80, 199, 200, 201, 202, 203, 0,
	0, 0, 0, 81, 82, 204, 205, 206, 207, 83,
	208, 209, 0, 84, 210, 211, 85, 0, 0, 212,
	213, 214, 0, 215, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	216, 99, 217, 218, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 219, 105,
	106, 220, 221, 0, 0, 0, 107, 108, 222, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 223, 0,
	224, 0, 112, 113, 114, 225, 226, 0, 0, 117,
	0, 115, 0, 0, 116, 227, 228, 229, 230, 0,
	231, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 232, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 233, 136, 234, 137, 138, 0,
	139, 0, 464, 0, 0, 140, 235, 0, 141, 0,
	236, 142, 143, 144, 145, 0, 237, 146, 238, 147,
	0, 148, 149, 150, 239, 151, 152, 0, 153, 154,
	155, 156, 157, 159, 160, 158, 161, 0, 162, 0,
	163, 164, 240, 165, 0, 166, 167, 168, 169, 0,
	241, 170, 171, 0, 172, 173, 0, 174, 242, 243,
	175, 0, 181, 176, 177, 178, 180, 244, 179, 245,
	0, 182, 0, 183, 184, 185, 0, 246, 247, 248,
	0, 0, 186, 249, 250, 0, 187, 188, 189, 190,
	75, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 251, 252, 0, 0, 198, 78, 79, 0, 80,
	199, 200, 201, 202, 203, 0, 0, 0, 0, 81,
	82, 204, 205, 206, 207, 83, 208, 209, 0, 84,
	210, 211, 85, 0, 0, 212, 213, 214, 0, 215,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 216, 99, 217, 218,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 219, 105, 106, 220, 221, 0,
	0, 0, 107, 108, 222, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 223, 0, 224, 0, 112, 113,
	114, 738, 226, 0, 0, 117, 0, 115, 0, 0,
	116, 227, 228, 229, 230, 0, 231, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 232, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	233, 136, 234, 137, 138, 0, 139, 0, 464, 0,
	0, 140, 235, 0, 141, 0, 236, 142, 143, 144,
	145, 0, 237, 146, 238, 147, 0, 148, 149, 150,
	239, 151, 152, 0, 153, 154, 155, 156, 157, 159,
	160, 158, 161, 0, 162, 0, 163, 164, 240, 165,
	0, 166, 167, 168, 169, 0, 241, 170, 171, 0,
	172, 173, 0, 174, 242, 243, 175, 0, 181, 176,
	177, 178, 180, 244, 179, 245, 0, 182, 0, 183,
	184, 185, 0, 246, 247, 248, 0, 0, 186, 249,
	250, 0, 187, 188, 189, 190, 75, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 251, 252, 0,
	0, 198, 78, 79, 515, 80, 199, 200, 201, 202,
	203, 0, 0, 0, 0, 81, 82, 204, 205, 206,
	207, 83, 208, 209, 0, 84, 210, 211, 85, 0,
	0, 212, 213, 214, 0, 215, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 216, 99, 217, 218, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	219, 105, 106, 220, 221, 0, 0, 0, 107, 108,
	222, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	223, 0, 224, 0, 112, 113, 114, 225, 226, 0,
	0, 117, 0, 115, 0, 0, 116, 227, 228, 229,
	230, 0, 231, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 232, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 233, 136, 234, 137,
	138, 0, 139, 0, 0, 0, 0, 140, 235, 0,
	141, 0, 236, 142, 143, 144, 145, 0, 237, 146,
	238, 147, 0, 148, 149, 150, 239, 151, 152, 0,
	153, 154, 155, 156, 157, 159, 160, 158, 161, 0,
	162, 0, 163, 164, 240, 165, 0, 166, 167, 168,
	169, 0, 241, 170, 171, 0, 172, 173, 0, 174,
	242, 243, 175, 0, 181, 176, 177, 178, 180, 244,
	179, 245, 0, 182, 0, 183, 184, 185, 0, 246,
	247, 248, 0, 0, 186, 249, 250, 0, 187, 188,
	189, 190, 75, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 251, 252, 0, 0, 198, 78, 79,
	0, 80, 199, 200, 201, 202, 203, 0, 0, 0,
	0, 81, 82, 204, 205, 206, 207, 83, 208, 209,
	0, 84, 210, 211, 85, 0, 0, 212, 213, 214,
	0, 215, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 216, 99,
	217, 218, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 219, 105, 106, 220,
	221, 0, 0, 0, 107, 108, 222, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 223, 0, 224, 0,
	112, 113, 114, 476, 226, 0, 0, 117, 0, 115,
	0, 0, 116, 227, 228, 229, 230, 0, 231, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 232,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 233, 136, 234, 137, 138, 0, 139, 0,
	464, 0, 0, 140, 235, 0, 141, 0, 236, 142,
	143, 144, 145, 0, 237, 146, 238, 147, 0, 148,
	149, 150, 239, 151, 152, 0, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 0, 162, 0, 163, 164,
	240, 165, 0, 166, 167, 168, 169, 0, 241, 170,
	171, 0, 172, 173, 0, 174, 242, 243, 175, 0,
	181, 176, 177, 178, 180, 244, 179, 245, 0, 182,
	0, 183, 184, 185, 0, 246, 247, 248, 0, 0,
	186, 249, 250, 0, 187, 188, 189, 190, 75, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 251,
	252, 0, 0, 198, 78, 79, 0, 80, 199, 200,
	201, 202, 203, 0, 0, 0, 0, 81, 82, 204,
	205, 206, 207, 83, 208, 209, 0, 84, 210, 211,
	85, 0, 0, 212, 213, 214, 0, 215, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 216, 99, 217, 218, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 219, 105, 106, 220, 221, 0, 0, 0,
	107, 108, 222, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 223, 0, 224, 0, 112, 113, 114, 469,
	226, 0, 0, 117, 0, 115, 0, 0, 116, 227,
	228, 229, 230, 0, 231, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 232, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 233, 136,
	234, 137, 138, 0, 139, 0, 464, 0, 0, 140,
	235, 0, 141, 0, 236, 142, 143, 144, 145, 0,
	237, 146, 238, 147, 0, 148, 149, 150, 239, 151,
	152, 0, 153, 154, 155, 156, 157, 159, 160, 158,
	161, 0, 162, 0, 163, 164, 240, 165, 0, 166,
	167, 168, 169, 0, 241, 170, 171, 0, 172, 173,
	0, 174, 242, 243, 175, 0, 181, 176, 177, 178,
	180, 244, 179, 245, 0, 182, 0, 183, 184, 185,
	0, 246, 247, 248, 0, 0, 186, 249, 250, 0,
	187, 188, 189, 190, 75, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 251, 252, 0, 0, 198,
	78, 79, 379, 80, 199, 200, 201, 202, 203, 0,
	0, 0, 0, 81, 82, 204, 205, 206, 207, 83,
	208, 209, 0, 84, 210, 211, 85, 0, 0, 212,
	213, 214, 0, 215, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	216, 99, 217, 218, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 219, 105,
	106, 220, 221, 0, 0, 0, 107, 108, 222, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 223, 0,
	224, 0, 112, 113, 114, 225, 226, 0, 0, 117,
	0, 115, 0, 0, 116, 227, 228, 229, 230, 0,
	231, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 232, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 233, 136, 234, 137, 138, 0,
	139, 0, 0, 0, 0, 140, 235, 0, 141, 0,
	236, 142, 143, 144, 145, 0, 237, 146, 238, 378,
	0, 148, 149, 150, 239, 151, 152, 0, 153, 154,
	155, 156, 157, 159, 160, 158, 161, 0, 162, 0,
	163, 164, 240, 165, 0, 166, 167, 168, 169, 0,
	241, 170, 171, 0, 172, 173, 0, 174, 242, 243,
	175, 0, 181, 176, 177, 178, 180, 244, 179, 245,
	0, 182, 0, 183, 184, 185, 0, 246, 247, 248,
	0, 0, 186, 249, 250, 0, 187, 188, 189, 190,
	75, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 251, 252, 0, 0, 198, 78, 79, 0, 80,
	199, 200, 201, 202, 203, 0, 0, 0, 0, 81,
	82, 204, 205, 206, 207, 83, 208, 209, 0, 84,
	210, 211, 85, 0, 0, 212, 213, 214, 0, 215,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 216, 99, 217, 218,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 219, 105, 106, 220, 221, 0,
	0, 0, 107, 108, 222, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 223, 0, 224, 0, 112, 113,
	114, 225, 226, 0, 0, 117, 0, 115, 0, 0,
	116, 227, 228, 229, 230, 0, 231, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 232, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	233, 136, 234, 137, 138, 0, 139, 0, 0, 0,
	0, 140, 235, 0, 141, 0, 236, 142, 143, 144,
	145, 0, 237, 146, 238, 147, 0, 148, 149, 150,
	239, 151, 152, 0, 153, 154, 155, 156, 157, 159,
	160, 158, 161, 0, 162, 0, 163, 164, 240, 165,
	0, 166, 167, 168, 169, 0, 241, 170, 171, 0,
	172, 173, 0, 174, 242, 243, 175, 0, 181, 176,
	177, 178, 180, 244, 179, 245, 0, 182, 0, 183,
	184, 185, 0, 246, 247, 248, 0, 0, 186, 249,
	250, 0, 187, 188, 189, 190, 75, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 251, 252, 0,
	0, 198, 78, 79, 0, 80, 199, 200, 201, 202,
	203, 0, 0, 0, 0, 81, 82, 204, 205, 206,
	207, 83, 208, 209, 0, 84, 210, 211, 85, 0,
	0, 212, 213, 214, 0, 215, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 216, 99, 217, 218, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	219, 105, 106, 220, 221, 0, 0, 0, 107, 108,
	222, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	223, 0, 224, 0, 112, 113, 114, 1287, 226, 0,
	0, 117, 0, 115, 0, 0, 116, 227, 228, 229,
	230, 0, 231, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 232, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 233, 136, 234, 137,
	138, 0, 139, 0, 0, 0, 0, 140, 235, 0,
	141, 0, 236, 142, 143, 144, 145, 0, 237, 146,
	238, 147, 0, 148, 149, 150, 239, 151, 152, 0,
	153, 154, 155, 156, 157, 159, 160, 158, 161, 0,
	162, 0, 163, 164, 240, 165, 0, 166, 167, 168,
	169, 0, 241, 170, 171, 0, 172, 173, 0, 174,
	242, 243, 175, 0, 181, 176, 177, 178, 180, 244,
	179, 245, 0, 182, 0, 183, 184, 185, 0, 246,
	247, 248, 0, 0, 186, 249, 250, 0, 187, 188,
	189, 190, 75, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 251, 252, 0, 0, 198, 78, 79,
	0, 80, 199, 200, 201, 202, 203, 0, 0, 0,
	0, 81, 82, 204, 205, 206, 207, 83, 208, 209,
	0, 84, 210, 211, 85, 0, 0, 212, 213, 214,
	0, 215, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 216, 99,
	217, 218, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 219, 105, 106, 220,
	221, 0, 0, 0, 107, 108, 222, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 223, 0, 224, 0,
	112, 113, 114, 1285, 226, 0, 0, 117, 0, 115,
	0, 0, 116, 227, 228, 229, 230, 0, 231, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 232,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 233, 136, 234, 137, 138, 0, 139, 0,
	0, 0, 0, 140, 235, 0, 141, 0, 236, 142,
	143, 144, 145, 0, 237, 146, 238, 147, 0, 148,
	149, 150, 239, 151, 152, 0, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 0, 162, 0, 163, 164,
	240, 165, 0, 166, 167, 168, 169, 0, 241, 170,
	171, 0, 172, 173, 0, 174, 242, 243, 175, 0,
	181, 176, 177, 178, 180, 244, 179, 245, 0, 182,
	0, 183, 184, 185, 0, 246, 247, 248, 0, 0,
	186, 249, 250, 0, 187, 188, 189, 190, 75, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 251,
	252, 0, 0, 198, 78, 79, 0, 80, 199, 200,
	201, 202, 203, 0, 0, 0, 0, 81, 82, 204,
	205, 206, 207, 83, 208, 209, 0, 84, 210, 211,
	85, 0, 0, 212, 213, 214, 0, 215, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 216, 99, 217, 218, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 219, 105, 106, 220, 221, 0, 0, 0,
	107, 108, 222, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 223, 0, 224, 0, 112, 113, 114, 1274,
	226, 0, 0, 117, 0, 115, 0, 0, 116, 227,
	228, 229, 230, 0, 231, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 232, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 233, 136,
	234, 137, 138, 0, 139, 0, 0, 0, 0, 140,
	235, 0, 141, 0, 236, 142, 143, 144, 145, 0,
	237, 146, 238, 147, 0, 148, 149, 150, 239, 151,
	152, 0, 153, 154, 155, 156, 157, 159, 160, 158,
	161, 0, 162, 0, 163, 164, 240, 165, 0, 166,
	167, 168, 169, 0, 241, 170, 171, 0, 172, 173,
	0, 174, 242, 243, 175, 0, 181, 176, 177, 178,
	180, 244, 179, 245, 0, 182, 0, 183, 184, 185,
	0, 246, 247, 248, 0, 0, 186, 249, 250, 0,
	187, 188, 189, 190, 75, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 251, 252, 0, 0, 198,
	78, 79, 0, 80, 199, 200, 201, 202, 203, 0,
	0, 0, 0, 81, 82, 204, 205, 206, 207, 83,
	208, 209, 0, 84, 210, 211, 85, 0, 0, 212,
	213, 214, 0, 215, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	216, 99, 217, 218, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 219, 105,
	106, 220, 221, 0, 0, 0, 107, 108, 222, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 223, 0,
	224, 0, 112, 113, 114, 858, 226, 0, 0, 117,
	0, 115, 0, 0, 116, 227, 228, 229, 230, 0,
	231, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 232, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 233, 136, 234, 137, 138, 0,
	139, 0, 0, 0, 0, 140, 235, 0, 141, 0,
	236, 142, 143, 144, 145, 0, 237, 146, 238, 147,
	0, 148, 149, 150, 239, 151, 152, 0, 153, 154,
	155, 156, 157, 159, 160, 158, 161, 0, 162, 0,
	163, 164, 240, 165, 0, 166, 167, 168, 169, 0,
	241, 170, 171, 0, 172, 173, 0, 174, 242, 243,
	175, 0, 181, 176, 177, 178, 180, 244, 179, 245,
	0, 182, 0, 183, 184, 185, 0, 246, 247, 248,
	0, 0, 186, 249, 250, 0, 187, 188, 189, 190,
	75, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 251, 252, 0, 0, 198, 78, 79, 0, 80,
	199, 200, 201, 202, 203, 0, 0, 0, 0, 81,
	82, 204, 205, 206, 207, 83, 208, 209, 0, 84,
	210, 211, 85, 0, 0, 212, 213, 214, 0, 215,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 216, 99, 217, 218,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 219, 105, 106, 220, 221, 0,
	0, 0, 107, 108, 222, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 223, 0, 224, 0, 112, 113,
	114, 225, 226, 0, 0, 117, 0, 115, 0, 0,
	116, 227, 228, 229, 230, 0, 231, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 232, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	233, 136, 234, 137, 138, 0, 139, 0, 0, 0,
	0, 140, 235, 0, 141, 0, 236, 142, 143, 144,
	145, 0, 237, 146, 238, 147, 0, 148, 149, 150,
	239, 151, 152, 0, 153, 154, 155, 156, 157, 159,
	160, 158, 161, 0, 162, 0, 163, 164, 240, 165,
	0, 166, 393, 168, 169, 0, 241, 170, 171, 0,
	172, 173, 0, 174, 242, 243, 175, 0, 181, 176,
	177, 178, 180, 244, 179, 245, 0, 182, 0, 183,
	184, 185, 0, 246, 247, 248, 0, 0, 186, 249,
	250, 0, 187, 188, 189, 190, 75, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 251, 252, 0,
	0, 198, 78, 79, 0, 80, 199, 200, 201, 202,
	203, 0, 723, 0, 0, 81, 82, 204, 205, 206,
	207, 83, 208, 209, 0, 84, 210, 211, 85, 0,
	0, 212, 213, 214, 0, 215, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 216, 99, 217, 218, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	219, 105, 106, 220, 221, 0, 0, 0, 107, 108,
	222, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	223, 0, 224, 0, 112, 113, 114, 225, 226, 0,
	0, 117, 0, 115, 0, 0, 116, 227, 228, 229,
	230, 0, 231, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 232, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 233, 136, 234, 137,
	138, 0, 139, 0, 0, 0, 0, 140, 235, 0,
	141, 0, 236, 142, 143, 144, 145, 0, 237, 146,
	238, 147, 0, 148, 149, 150, 239, 151, 152, 0,
	153, 154, 155, 156, 157, 159, 160, 158, 161, 0,
	162, 0, 163, 164, 240, 165, 0, 166, 167, 168,
	169, 0, 241, 170, 171, 0, 0, 173, 0, 174,
	242, 243, 175, 0, 181, 176, 177, 178, 180, 244,
	179, 245, 0, 182, 0, 183, 184, 185, 0, 246,
	247, 248, 0, 0, 186, 249, 250, 0, 187, 188,
	189, 190, 75, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 251, 252, 0, 0, 198, 78, 79,
	0, 80, 199, 200, 201, 202, 203, 0, 0, 0,
	0, 81, 82, 204, 205, 206, 207, 83, 208, 209,
	0, 84, 210, 211, 85, 0, 0, 212, 213, 214,
	0, 215, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 216, 99,
	217, 218, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 219, 105, 106, 220,
	221, 0, 0, 0, 107, 108, 222, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 223, 0, 224, 0,
	112, 113, 114, 567, 226, 0, 0, 117, 0, 115,
	0, 0, 116, 227, 228, 229, 230, 0, 231, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 232,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 233, 136, 234, 137, 138, 0, 139, 0,
	0, 0, 0, 140, 235, 0, 141, 0, 236, 142,
	143, 144, 145, 0, 237, 146, 238, 147, 0, 148,
	149, 150, 239, 151, 152, 0, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 0, 162, 0, 163, 164,
	240, 165, 0, 166, 167, 168, 169, 0, 241, 170,
	171, 0, 172, 173, 0, 174, 242, 243, 175, 0,
	181, 176, 177, 178, 180, 244, 179, 245, 0, 182,
	0, 183, 184, 185, 0, 246, 247, 248, 0, 0,
	186, 249, 250, 0, 187, 188, 189, 190, 75, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 251,
	252, 0, 0, 198, 78, 79, 0, 80, 199, 200,
	201, 202, 203, 0, 0, 0, 0, 81, 82, 204,
	205, 206, 207, 83, 208, 209, 0, 84, 210, 211,
	85, 0, 0, 212, 213, 214, 0, 215, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 216, 99, 217, 218, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 219, 105, 106, 220, 221, 0, 0, 0,
	107, 108, 222, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 223, 0, 224, 0, 112, 113, 114, 562,
	226, 0, 0, 117, 0, 115, 0, 0, 116, 227,
	228, 229, 230, 0, 231, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 232, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 233, 136,
	234, 137, 138, 0, 139, 0, 0, 0, 0, 140,
	235, 0, 141, 0, 236, 142, 143, 144, 145, 0,
	237, 146, 238, 147, 0, 148, 149, 150, 239, 151,
	152, 0, 153, 154, 155, 156, 157, 159, 160, 158,
	161, 0, 162, 0, 163, 164, 240, 165, 0, 166,
	167, 168, 169, 0, 241, 170, 171, 0, 172, 173,
	0, 174, 242, 243, 175, 0, 181, 176, 177, 178,
	180, 244, 179, 245, 0, 182, 0, 183, 184, 185,
	0, 246, 247, 248, 0, 0, 186, 249, 250, 0,
	187, 188, 189, 190, 75, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 251, 252, 0, 0, 198,
	78, 79, 0, 80, 199, 200, 201, 202, 203, 0,
	0, 0, 0, 81, 82, 204, 205, 206, 207, 83,
	208, 209, 0, 84, 210, 211, 85, 0, 0, 212,
	213, 521, 0, 215, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	216, 99, 217, 218, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 219, 105,
	106, 220, 221, 0, 0, 0, 107, 108, 222, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 223, 0,
	224, 0, 112, 113, 114, 225, 226, 0, 0, 117,
	0, 115, 0, 0, 116, 227, 228, 229, 230, 0,
	231, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 232, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 404, 0, 131, 132, 135,
	133, 0, 134, 0, 233, 136, 234, 137, 138, 0,
	139, 0, 0, 0, 0, 140, 235, 0, 141, 0,
	236, 142, 143, 144, 145, 0, 237, 146, 238, 147,
	0, 148, 149, 150, 239, 151, 152, 0, 153, 154,
	155, 156, 157, 159, 160, 158, 161, 0, 162, 0,
	163, 164, 240, 165, 0, 166, 167, 168, 169, 0,
	241, 170, 171, 0, 172, 173, 0, 174, 242, 243,
	175, 0, 181, 176, 177, 178, 180, 244, 179, 245,
	0, 182, 0, 183, 184, 185, 0, 403, 247, 248,
	0, 0, 399, 249, 250, 0, 187, 188, 189, 190,
	75, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 251, 252, 0, 0, 198, 78, 79, 0, 80,
	199, 200, 201, 202, 203, 0, 0, 0, 0, 81,
	82, 204, 205, 206, 207, 83, 208, 209, 0, 84,
	210, 211, 85, 0, 0, 212, 213, 214, 0, 215,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 216, 99, 217, 218,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 219, 105, 106, 220, 221, 0,
	0, 0, 107, 108, 222, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 223, 0, 224, 0, 112, 113,
	114, 225, 226, 0, 0, 117, 0, 115, 0, 0,
	116, 227, 228, 229, 230, 0, 231, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 232, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 404, 0, 131, 132, 135, 133, 0, 134, 0,
	233, 136, 234, 137, 138, 0, 139, 0, 0, 0,
	0, 140, 235, 0, 141, 0, 236, 142, 143, 144,
	145, 0, 237, 146, 238, 147, 0, 148, 149, 150,
	239, 151, 152, 0, 153, 154, 155, 156, 157, 159,
	160, 158, 161, 0, 162, 0, 163, 164, 240, 165,
	0, 166, 167, 168, 169, 0, 241, 170, 171, 0,
	172, 173, 0, 174, 242, 243, 175, 0, 181, 176,
	177, 178, 180, 244, 179, 245, 0, 182, 0, 183,
	184, 185, 0, 403, 247, 248, 0, 0, 399, 249,
	250, 0, 187, 188, 189, 190, 75, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 251, 252, 0,
	0, 198, 78, 79, 0, 80, 199, 200, 201, 202,
	203, 0, 0, 0, 0, 81, 82, 204, 205, 206,
	207, 83, 208, 209, 0, 84, 210, 211, 85, 0,
	0, 212, 213, 214, 0, 215, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 216, 99, 217, 218, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	219, 105, 106, 220, 221, 0, 0, 0, 107, 108,
	222, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	223, 0, 224, 0, 112, 113, 114, 499, 226, 0,
	0, 117, 0, 115, 0, 0, 116, 227, 228, 229,
	230, 0, 231, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 232, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 233, 136, 234, 137,
	138, 0, 139, 0, 0, 0, 0, 140, 235, 0,
	141, 0, 236, 142, 143, 144, 145, 0, 237, 146,
	238, 147, 0, 148, 149, 150, 239, 151, 152, 0,
	153, 154, 155, 156, 157, 159, 160, 158, 161, 0,
	162, 0, 163, 164, 240, 165, 0, 166, 167, 168,
	169, 0, 241, 170, 171, 0, 172, 173, 0, 174,
	242, 243, 175, 0, 181, 176, 177, 178, 180, 244,
	179, 245, 0, 182, 0, 183, 184, 185, 0, 246,
	247, 248, 0, 0, 186, 249, 250, 0, 187, 188,
	189, 190, 75, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 251, 252, 0, 0, 198, 78, 79,
	0, 80, 199, 200, 201, 202, 203, 0, 0, 0,
	0, 81, 82, 204, 205, 206, 207, 83, 208, 209,
	0, 84, 210, 211, 85, 0, 0, 212, 213, 214,
	0, 215, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 216, 99,
	217, 218, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 219, 105, 106, 220,
	221, 0, 0, 0, 107, 108, 222, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 223, 0, 224, 0,
	112, 113, 114, 496, 226, 0, 0, 117, 0, 115,
	0, 0, 116, 227, 228, 229, 230, 0, 231, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 232,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 233, 136, 234, 137, 138, 0, 139, 0,
	0, 0, 0, 140, 235, 0, 141, 0, 236, 142,
	143, 144, 145, 0, 237, 146, 238, 147, 0, 148,
	149, 150, 239, 151, 152, 0, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 0, 162, 0, 163, 164,
	240, 165, 0, 166, 167, 168, 169, 0, 241, 170,
	171, 0, 172, 173, 0, 174, 242, 243, 175, 0,
	181, 176, 177, 178, 180, 244, 179, 245, 0, 182,
	0, 183, 184, 185, 0, 246, 247, 248, 0, 0,
	186, 249, 250, 0, 187, 188, 189, 190, 75, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 251,
	252, 0, 0, 198, 78, 79, 0, 80, 199, 200,
	201, 202, 203, 0, 0, 0, 0, 81, 82, 204,
	205, 206, 207, 83, 208, 209, 0, 84, 210, 211,
	85, 0, 0, 212, 213, 214, 0, 215, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 216, 99, 217, 218, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 219, 105, 106, 220, 221, 0, 0, 0,
	107, 108, 222, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 223, 0, 224, 0, 112, 113, 114, 493,
	226, 0, 0, 117, 0, 115, 0, 0, 116, 227,
	228, 229, 230, 0, 231, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 232, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 233, 136,
	234, 137, 138, 0, 139, 0, 0, 0, 0, 140,
	235, 0, 141, 0, 236, 142, 143, 144, 145, 0,
	237, 146, 238, 147, 0, 148, 149, 150, 239, 151,
	152, 0, 153, 154, 155, 156, 157, 159, 160, 158,
	161, 0, 162, 0, 163, 164, 240, 165, 0, 166,
	167, 168, 169, 0, 241, 170, 171, 0, 172, 173,
	0, 174, 242, 243, 175, 0, 181, 176, 177, 178,
	180, 244, 179, 245, 0, 182, 0, 183, 184, 185,
	0, 246, 247, 248, 0, 0, 186, 249, 250, 0,
	187, 188, 189, 190, 75, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 251, 252, 0, 0, 198,
	78, 79, 0, 80, 199, 200, 201, 202, 203, 0,
	0, 0, 0, 81, 82, 204, 205, 206, 207, 83,
	208, 209, 0, 84, 210, 211, 85, 0, 0, 212,
	213, 214, 0, 215, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	216, 99, 217, 218, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 219, 105,
	106, 220, 221, 0, 0, 0, 107, 108, 222, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 223, 0,
	224, 0, 112, 113, 114, 491, 226, 0, 0, 117,
	0, 115, 0, 0, 116, 227, 228, 229, 230, 0,
	231, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 232, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 233, 136, 234, 137, 138, 0,
	139, 0, 0, 0, 0, 140, 235, 0, 141, 0,
	236, 142, 143, 144, 145, 0, 237, 146, 238, 147,
	0, 148, 149, 150, 239, 151, 152, 0, 153, 154,
	155, 156, 157, 159, 160, 158, 161, 0, 162, 0,
	163, 164, 240, 165, 0, 166, 167, 168, 169, 0,
	241, 170, 171, 0, 172, 173, 0, 174, 242, 243,
	175, 0, 181, 176, 177, 178, 180, 244, 179, 245,
	0, 182, 0, 183, 184, 185, 0, 246, 247, 248,
	0, 0, 186, 249, 250, 0, 187, 188, 189, 190,
	75, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 251, 252, 0, 0, 198, 78, 79, 0, 80,
	199, 200, 201, 202, 203, 0, 0, 0, 0, 81,
	82, 204, 205, 206, 207, 83, 208, 209, 0, 84,
	210, 211, 85, 0, 0, 212, 213, 214, 0, 215,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 216, 99, 217, 218,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 219, 105, 106, 220, 221, 0,
	0, 0, 107, 108, 222, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 223, 0, 224, 0, 112, 113,
	114, 472, 226, 0, 0, 117, 0, 115, 0, 0,
	116, 227, 228, 229, 230, 0, 231, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 232, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	233, 136, 234, 137, 138, 0, 139, 0, 0, 0,
	0, 140, 235, 0, 141, 0, 236, 142, 143, 144,
	145, 0, 237, 146, 238, 147, 0, 148, 149, 150,
	239, 151, 152, 0, 153, 154, 155, 156, 157, 159,
	160, 158, 161, 0, 162, 0, 163, 164, 240, 165,
	0, 166, 167, 168, 169, 0, 241, 170, 171, 0,
	172, 173, 0, 174, 242, 243, 175, 0, 181, 176,
	177, 178, 180, 244, 179, 245, 0, 182, 0, 183,
	184, 185, 0, 246, 247, 248, 0, 0, 186, 249,
	250, 0, 187, 188, 189, 190, 75, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 251, 252, 0,
	0, 198, 78, 79, 0, 80, 199, 200, 201, 202,
	203, 0, 0, 0, 0, 81, 82, 204, 205, 206,
	207, 83, 208, 209, 0, 84, 210, 211, 85, 0,
	0, 212, 213, 214, 0, 215, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 216, 99, 217, 218, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	219, 105, 106, 220, 221, 0, 0, 0, 107, 108,
	222, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	223, 0, 224, 0, 112, 113, 114, 225, 226, 0,
	0, 117, 0, 115, 0, 0, 116, 227, 228, 229,
	230, 0, 231, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 232, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 233, 136, 234, 137,
	138, 0, 139, 0, 0, 0, 0, 140, 235, 0,
	141, 0, 236, 142, 143, 144, 145, 0, 237, 146,
	238, 147, 0, 148, 149, 150, 239, 453, 152, 0,
	153, 154, 155, 156, 157, 159, 160, 158, 161, 0,
	162, 0, 163, 164, 240, 165, 0, 166, 167, 168,
	169, 0, 241, 170, 171, 0, 172, 173, 0, 174,
	242, 243, 175, 0, 181, 176, 177, 178, 180, 244,
	179, 245, 0, 182, 0, 183, 184, 185, 0, 246,
	247, 248, 0, 0, 186, 249, 250, 0, 187, 188,
	189, 190, 75, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 251, 252, 0, 0, 198, 78, 79,
	0, 80, 199, 200, 201, 202, 203, 0, 0, 0,
	0, 81, 82, 204, 205, 206, 207, 83, 208, 209,
	0, 84, 210, 211, 85, 0, 0, 212, 213, 214,
	0, 215, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 216, 99,
	217, 218, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 219, 105, 106, 220,
	221, 0, 0, 0, 107, 108, 222, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 223, 0, 224, 0,
	112, 113, 114, 225, 226, 0, 0, 117, 0, 115,
	0, 0, 116, 227, 228, 229, 230, 0, 231, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 232,
	0, 123, 0, 0, 396, 0, 0, 125, 0, 126,
	127, 128, 129, 404, 0, 131, 132, 135, 133, 0,
	134, 0, 233, 136, 234, 137, 138, 0, 139, 0,
	0, 0, 0, 140, 235, 0, 141, 0, 236, 142,
	143, 144, 145, 0, 237, 146, 238, 147, 0, 148,
	149, 150, 239, 151, 152, 0, 153, 154, 155, 156,
	157, 159, 160, 158, 161, 0, 162, 0, 163, 164,
	398, 165, 0, 166, 167, 168, 169, 0, 241, 170,
	397, 0, 172, 173, 0, 174, 242, 243, 175, 0,
	181, 176, 177, 178, 180, 244, 179, 245, 0, 182,
	0, 183, 184, 185, 0, 403, 247, 248, 0, 0,
	399, 249, 250, 0, 187, 188, 189, 190, 75, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 251,
	252, 0, 0, 198, 78, 79, 0, 80, 199, 200,
	201, 202, 203, 0, 0, 0, 0, 81, 82, 204,
	205, 206, 207, 83, 208, 209, 0, 84, 210, 211,
	85, 0, 0, 212, 213, 214, 0, 215, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 216, 99, 217, 218, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 219, 105, 106, 220, 221, 0, 0, 0,
	107, 108, 222, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 223, 0, 224, 0, 112, 113, 114, 225,
	226, 0, 0, 117, 0, 115, 0, 0, 116, 227,
	228, 229, 230, 0, 231, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 232, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 233, 136,
	234, 137, 138, 0, 139, 0, 0, 0, 0, 140,
	235, 0, 141, 0, 236, 142, 143, 0, 145, 0,
	237, 146, 238, 147, 0, 148, 0, 150, 239, 151,
	152, 0, 153, 154, 155, 156, 157, 159, 160, 158,
	161, 0, 162, 0, 163, 164, 240, 0, 0, 166,
	167, 168, 169, 0, 241, 170, 171, 0, 172, 173,
	0, 174, 242, 243, 175, 0, 181, 176, 177, 178,
	180, 244, 179, 245, 0, 182, 0, 183, 184, 185,
	0, 246, 247, 248, 0, 0, 186, 249, 250, 0,
	187, 188, 189, 190, 0, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 251, 252, 0, 0, 198,
	0, 0, 0, 0, 199, 200, 201, 202, 883, 884,
	0, 903, 904, 905, 913, 914, 915, 0, 0, 0,
	0, 0, 0, 0, 906, 0, 0, 0, 0, 0,
	0, 886, 0, 917, 0, 0, 0, 0, 883, 884,
	0, 903, 904, 905, 913, 914, 915, 0, 0, 0,
	0, 0, 885, 0, 906, 0, 0, 0, 900, 0,
	0, 886, 0, 917, 0, 0, 0, 0, 883, 884,
	0, 903, 904, 905, 913, 914, 915, 0, 0, 0,
	0, 0, 885, 0, 906, 0, 0, 0, 900, 0,
	0, 886, 0, 917, 0, 0, 0, 0, 883, 884,
	0, 903, 904, 905, 913, 914, 915, 891, 0, 0,
	0, 0, 885, 0, 906, 0, 0, 0, 900, 0,
	0, 886, 0, 917, 0, 910, 918, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 891, 0, 0,
	916, 0, 885, 0, 0, 0, 0, 0, 900, 0,
	0, 0, 908, 0, 0, 910, 918, 0, 901, 0,
	0, 0, 0, 0, 0, 0, 0, 891, 0, 0,
	916, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 907, 908, 0, 0, 910, 918, 0, 901, 0,
	0, 0, 0, 0, 0, 0, 0, 891, 0, 0,
	916, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 907, 908, 0, 0, 910, 918, 0, 901, 0,
	0, 0, 902, 0, 0, 0, 0, 0, 0, 0,
	916, 0, 0, 0, 911, 0, 0, 0, 0, 0,
	0, 907, 908, 0, 0, 0, 0, 0, 901, 0,
	0, 0, 902, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 911, 0, 0, 0, 0, 0,
	0, 907, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 902, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 909, 0, 911, 897, 898, 899, 0, 896,
	893, 894, 895, 887, 888, 889, 890, 892, 0, 912,
	0, 0, 902, 0, 0, 0, 1478, 0, 0, 0,
	0, 0, 909, 0, 911, 897, 898, 899, 0, 896,
	893, 894, 895, 887, 888, 889, 890, 892, 0, 912,
	0, 0, 0, 0, 0, 0, 1477, 0, 0, 0,
	0, 0, 909, 0, 0, 897, 898, 899, 0, 896,
	893, 894, 895, 887, 888, 889, 890, 892, 0, 912,
	0, 0, 0, 0, 0, 0, 1429, 0, 0, 0,
	0, 0, 909, 0, 0, 897, 898, 899, 0, 896,
	893, 894, 895, 887, 888, 889, 890, 892, 0, 912,
	0, 883, 884, 1910, 903, 904, 905, 913, 914, 915,
	0, 0, 0, 0, 0, 0, 0, 906, 0, 0,
	0, 0, 0, 0, 886, 0, 917, 0, 0, 0,
	0, 883, 884, 0, 903, 904, 905, 913, 914, 915,
	0, 0, 0, 0, 0, 885, 0, 906, 0, 0,
	0, 900, 0, 0, 886, 0, 917, 0, 0, 0,
	0, 883, 884, 0, 903, 904, 905, 913, 914, 915,
	0, 0, 0, 0, 0, 885, 0, 906, 0, 0,
	0, 900, 0, 0, 886, 0, 917, 0, 0, 0,
	0, 883, 884, 0, 903, 904, 905, 913, 914, 915,
	891, 0, 0, 0, 0, 885, 0, 906, 0, 0,
	0, 900, 0, 0, 886, 0, 917, 0, 910, 918,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	891, 0, 0, 916, 0, 885, 0, 0, 0, 0,
	0, 900, 0, 0, 0, 908, 0, 0, 910, 918,
	0, 901, 0, 0, 0, 0, 0, 0, 0, 0,
	891, 0, 0, 916, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 908, 0, 0, 910, 918,
	0, 901, 0, 0, 0, 0, 0, 0, 0, 0,
	891, 0, 0, 916, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 908, 0, 0, 910, 918,
	0, 901, 0, 0, 0, 902, 0, 0, 0, 0,
	0, 0, 0, 916, 0, 0, 0, 911, 0, 0,
	0, 0, 0, 0, 907, 908, 0, 0, 0, 0,
	0, 901, 0, 0, 0, 902, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 911, 0, 0,
	0, 0, 0, 0, 907, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 902, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 909, 0, 911, 897, 898,
	899, 0, 896, 893, 894, 895, 887, 888, 889, 890,
	892, 0, 912, 0, 0, 902, 1908, 0, 0, 0,
	0, 0, 0, 0, 0, 909, 0, 911, 897, 898,
	899, 0, 896, 893, 894, 895, 887, 888, 889, 890,
	892, 0, 912, 0, 0, 0, 1883, 0, 0, 0,
	0, 0, 0, 0, 0, 909, 0, 0, 897, 898,
	899, 0, 896, 893, 894, 895, 887, 888, 889, 890,
	892, 0, 912, 0, 0, 0, 1858, 0, 0, 0,
	0, 0, 0, 0, 0, 909, 0, 0, 897, 898,
	899, 0, 896, 893, 894, 895, 887, 888, 889, 890,
	892, 0, 912, 0, 883, 884, 1853, 903, 904, 905,
	913, 914, 915, 0, 0, 0, 0, 0, 0, 0,
	906, 0, 0, 0, 0, 0, 0, 886, 0, 917,
	0, 0, 0, 0, 883, 884, 0, 903, 904, 905,
	913, 914, 915, 0, 0, 0, 0, 0, 885, 0,
	906, 0, 0, 0, 900, 0, 0, 886, 0, 917,
	0, 0, 0, 0, 883, 884, 0, 903, 904, 905,
	913, 914, 915, 0, 0, 0, 0, 0, 885, 0,
	906, 0, 0, 0, 900, 0, 0, 886, 0, 917,
	0, 0, 0, 0, 883, 884, 0, 903, 904, 905,
	913, 914, 915, 891, 0, 0, 0, 0, 885, 0,
	906, 0, 0, 0, 900, 0, 0, 886, 0, 917,
	0, 910, 918, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 891, 0, 0, 916, 0, 885, 0,
	0, 0, 0, 0, 900, 0, 0, 0, 908, 0,
	0, 910, 918, 0, 901, 0, 0, 0, 0, 0,
	0, 0, 0, 891, 0, 0, 916, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 907, 908, 0,
	0, 910, 918, 0, 901, 0, 0, 0, 0, 0,
	0, 0, 0, 891, 0, 0, 916, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 907, 908, 0,
	0, 910, 918, 0, 901, 0, 0, 0, 902, 0,
	0, 0, 0, 0, 0, 0, 916, 0, 0, 0,
	911, 0, 0, 0, 0, 0, 0, 907, 908, 0,
	0, 0, 0, 0, 901, 0, 0, 0, 902, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 0, 0, 907, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 902, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 909, 0,
	911, 897, 898, 899, 0, 896, 893, 894, 895, 887,
	888, 889, 890, 892, 0, 912, 0, 0, 902, 1849,
	0, 0, 0, 0, 0, 0, 0, 0, 909, 0,
	911, 897, 898, 899, 0, 896, 893, 894, 895, 887,
	888, 889, 890, 892, 0, 912, 0, 0, 0, 1779,
	0, 0, 0, 0, 0, 0, 0, 0, 909, 0,
	0, 897, 898, 899, 0, 896, 893, 894, 895, 887,
	888, 889, 890, 892, 0, 912, 0, 0, 0, 1778,
	0, 0, 0, 0, 0, 0, 0, 0, 909, 0,
	0, 897, 898, 899, 0, 896, 893, 894, 895, 887,
	888, 889, 890, 892, 0, 912, 0, 883, 884, 1678,
	903, 904, 905, 913, 914, 915, 0, 0, 0, 0,
	0, 0, 0, 906, 0, 0, 0, 0, 0, 0,
	886, 0, 917, 0, 0, 0, 0, 883, 884, 0,
	903, 904, 905, 913, 914, 915, 0, 0, 0, 0,
	0, 885, 0, 906, 0, 0, 0, 900, 0, 0,
	886, 0, 917, 0, 0, 0, 0, 883, 884, 0,
	903, 904, 905, 913, 914, 915, 0, 0, 0, 0,
	0, 885, 0, 906, 0, 0, 0, 900, 0, 0,
	886, 0, 917, 0, 0, 0, 0, 883, 884, 0,
	903, 904, 905, 913, 914, 915, 891, 0, 0, 0,
	0, 885, 0, 906, 0, 0, 0, 900, 0, 0,
	886, 0, 917, 0, 910, 918, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 891, 0, 0, 916,
	0, 885, 0, 0, 0, 0, 0, 900, 0, 0,
	0, 908, 0, 0, 910, 918, 0, 901, 0, 0,
	0, 0, 0, 0, 0, 0, 891, 0, 0, 916,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	907, 908, 0, 0, 910, 918, 0, 901, 0, 0,
	0, 0, 0, 0, 0, 0, 891, 0, 0, 916,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	907, 908, 0, 0, 910, 918, 0, 901, 0, 0,
	0, 902, 0, 0, 0, 0, 0, 0, 0, 916,
	0, 0, 0, 911, 0, 0, 0, 0, 0, 0,
	907, 908, 0, 0, 0, 0, 0, 901, 0, 0,
	0, 902, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 911, 0, 0, 0, 0, 0, 0,
	907, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 902, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 909, 0, 911, 897, 898, 899, 0, 896, 893,
	894, 895, 887, 888, 889, 890, 892, 0, 912, 0,
	0, 902, 1612, 0, 0, 0, 0, 0, 0, 0,
	0, 909, 0, 911, 897, 898, 899, 0, 896, 893,
	894, 895, 887, 888, 889, 890, 892, 0, 912, 0,
	0, 0, 1596, 0, 0, 0, 0, 0, 0, 0,
	0, 909, 0, 0, 897, 898, 899, 0, 896, 893,
	894, 895, 887, 888, 889, 890, 892, 0, 912, 0,
	0, 0, 1193, 1437, 1438, 0, 1455, 1456, 1457, 0,
	0, 909, 0, 0, 897, 898, 899, 0, 896, 893,
	894, 895, 887, 888, 889, 890, 892, 0, 912, 0,
	1016, 883, 884, 0, 903, 904, 905, 913, 914, 915,
	0, 0, 0, 0, 0, 0, 0, 906, 0, 0,
	0, 0, 0, 1452, 886, 0, 917, 0, 0, 0,
	0, 883, 884, 0, 903, 904, 905, 913, 914, 915,
	0, 0, 0, 0, 0, 885, 0, 906, 0, 0,
	0, 900, 0, 0, 886, 0, 917, 0, 0, 0,
	0, 883, 884, 0, 903, 904, 905, 913, 914, 915,
	0, 0, 1443, 0, 0, 885, 0, 906, 0, 0,
	0, 900, 1116, 0, 886, 0, 917, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	891, 1983, 0, 0, 0, 885, 0, 0, 0, 0,
	0, 900, 0, 0, 0, 0, 0, 0, 910, 918,
	0, 0, 0, 1453, 0, 0, 0, 0, 0, 0,
	891, 0, 1469, 916, 0, 1468, 0, 0, 0, 1117,
	0, 0, 0, 0, 0, 908, 0, 0, 910, 918,
	0, 901, 0, 0, 0, 0, 0, 0, 0, 0,
	891, 0, 0, 916, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 908, 0, 0, 910, 918,
	0, 901, 0, 0, 0, 0, 0, 1454, 1982, 0,
	0, 0, 0, 916, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 908, 0, 0, 0, 0,
	0, 901, 0, 0, 0, 902, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 911, 0, 0,
	0, 0, 0, 0, 907, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 902, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 911, 0, 0,
	1449, 1450, 1451, 0, 1448, 1445, 1446, 1447, 1439, 1440,
	1441, 1442, 1444, 0, 0, 902, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 909, 0, 911, 897, 898,
	899, 0, 896, 893, 894, 895, 887, 888, 889, 890,
	892, 0, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 909, 0, 0, 897, 898,
	899, 0, 896, 893, 894, 895, 887, 888, 889, 890,
	892, 0, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 909, 0, 0, 897, 898,
	899, 0, 896, 893, 894, 895, 887, 888, 889, 890,
	892, 920, 912, 0, 0, 0, 0, 883, 884, 0,
	903, 904, 905, 913, 914, 915, 0, 407, 0, 0,
	0, 0, 0, 906, 0, 0, 0, 919, 0, 0,
	886, 0, 917, 0, 0, 408, 0, 883, 884, 0,
	903, 904, 905, 913, 914, 915, 0, 0, 0, 0,
	0, 885, 0, 906, 0, 0, 0, 900, 0, 0,
	886, 0, 917, 0, 0, 0, 0, 0, 0, 0,
	410, 0, 0, 0, 0, 415, 416, 0, 0, 421,
	0, 885, 0, 0, 0, 0, 0, 900, 0, 0,
	0, 409, 411, 0, 0, 0, 883, 884, 0, 903,
	904, 905, 913, 914, 915, 0, 891, 0, 0, 0,
	0, 0, 906, 0, 0, 0, 0, 0, 0, 886,
	0, 917, 0, 0, 910, 918, 0, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 891, 0, 0, 916,
	885, 0, 0, 413, 414, 0, 900, 0, 0, 0,
	0, 908, 0, 0, 910, 918, 0, 901, 0, 417,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 916,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	907, 908, 0, 0, 0, 0, 0, 901, 0, 0,
	0, 0, 0, 0, 0, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	907, 448, 0, 910, 918, 0, 0, 0, 0, 0,
	0, 902, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 0, 0, 911, 0, 0, 0, 0, 0, 0,
	908, 0, 0, 0, 0, 0, 901, 0, 0, 0,
	0, 902, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 911, 0, 0, 418, 0, 0, 907,
	419, 0, 0, 0, 0, 420, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 422,
	0, 909, 0, 0, 897, 898, 899, 0, 896, 893,
	894, 895, 887, 888, 889, 890, 892, 0, 912, 0,
	902, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 909, 911, 0, 897, 898, 899, 0, 896, 893,
	894, 895, 887, 888, 889, 890, 892, 0, 912, 0,
	0, 0, 1606, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 884, 0, 903, 904, 905, 913, 914,
	915, 0, 0, 0, 0, 0, 0, 0, 906, 0,
	0, 0, 0, 0, 0, 886, 0, 917, 0, 0,
	909, 0, 0, 897, 898, 899, 0, 896, 893, 894,
	895, 887, 888, 889, 890, 892, 885, 912, 0, 0,
	883, 884, 900, 903, 904, 905, 913, 914, 915, 0,
	0, 0, 0, 0, 0, 0, 906, 0, 0, 0,
	1470, 0, 0, 886, 0, 917, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 0, 0, 0,
	900, 891, 0, 0, 0, 0, 1475, 883, 884, 0,
	903, 904, 905, 913, 914, 915, 0, 0, 0, 910,
	918, 0, 0, 906, 0, 0, 0, 0, 0, 0,
	886, 0, 917, 0, 916, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 908, 0, 0, 891,
	0, 885, 901, 0, 0, 0, 0, 900, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 910, 918, 0,
	0, 0, 0, 0, 0, 907, 0, 0, 0, 0,
	0, 0, 916, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 908, 0, 0, 0, 0, 0,
	901, 0, 0, 0, 0, 0, 891, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 902, 0, 0, 0,
	0, 0, 0, 907, 910, 918, 0, 0, 911, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 916,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 908, 0, 0, 0, 0, 0, 901, 0, 0,
	0, 0, 0, 0, 902, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 911, 0, 0, 0,
	907, 0, 0, 0, 0, 0, 909, 0, 0, 897,
	898, 899, 1435, 896, 893, 894, 895, 887, 888, 889,
	890, 892, 0, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 902, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 911, 909, 0, 0, 897, 898, 899,
	0, 896, 893, 894, 895, 887, 888, 889, 890, 892,
	0, 912, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 883, 884, 0, 903, 904, 905, 913,
	914, 915, 0, 0, 0, 0, 0, 0, 0, 906,
	0, 0, 0, 1428, 0, 0, 886, 0, 917, 0,
	0, 909, 0, 0, 897, 898, 899, 0, 896, 893,
	894, 895, 887, 888, 889, 890, 892, 885, 912, 0,
	0, 883, 884, 900, 903, 904, 905, 913, 914, 915,
	0, 0, 0, 0, 0, 0, 0, 906, 0, 0,
	0, 0, 0, 0, 886, 0, 917, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 0, 0,
	0, 900, 891, 0, 0, 0, 0, 0, 883, 884,
	0, 903, 904, 905, 913, 914, 915, 0, 0, 0,
	910, 918, 0, 0, 906, 0, 0, 0, 0, 0,
	0, 886, 0, 917, 0, 916, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 908, 0, 0,
	891, 0, 885, 901, 0, 0, 0, 0, 900, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 910, 918,
	0, 0, 0, 0, 0, 0, 907, 0, 0, 0,
	0, 0, 0, 916, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 908, 0, 0, 0, 0,
	0, 901, 0, 0, 0, 0, 0, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 902, 0, 0,
	0, 0, 0, 0, 907, 910, 918, 0, 0, 911,
	0, 0, 0, 0, 0, 0, 0, 0, 883, 884,
	916, 903, 904, 905, 913, 914, 915, 0, 0, 0,
	0, 0, 908, 0, 0, 0, 0, 0, 901, 0,
	0, 886, 0, 917, 0, 902, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 911, 0, 0,
	0, 0, 885, 0, 0, 0, 0, 909, 900, 0,
	897, 898, 899, 0, 896, 893, 894, 895, 887, 888,
	889, 890, 892, 0, 912, 0, 0, 0, 0, 1437,
	1438, 0, 1455, 1456, 1457, 0, 0, 0, 0, 0,
	0, 0, 902, 0, 0, 1591, 0, 0, 0, 0,
	0, 0, 0, 0, 911, 909, 0, 891, 897, 898,
	899, 0, 896, 893, 894, 895, 887, 888, 889, 890,
	892, 0, 912, 0, 0, 910, 918, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 883, 884,
	916, 903, 904, 905, 913, 914, 915, 0, 0, 0,
	0, 0, 908, 0, 0, 0, 0, 0, 901, 0,
	0, 886, 909, 917, 0, 897, 898, 899, 0, 896,
	893, 894, 895, 887, 888, 889, 890, 892, 1443, 912,
	1437, 1438, 885, 1455, 1456, 1457, 0, 0, 900, 0,
	0, 0, 0, 0, 0, 0, 1590, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 902, 0, 0, 0, 0, 0, 0, 1453,
	1452, 0, 0, 0, 911, 0, 0, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 910, 918, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 908, 0, 0, 0, 0, 0, 901, 0,
	0, 0, 909, 1454, 0, 897, 898, 899, 0, 896,
	893, 894, 895, 887, 888, 889, 890, 892, 0, 912,
	0, 0, 1458, 0, 761, 755, 778, 749, 769, 768,
	0, 0, 751, 750, 0, 0, 0, 780, 779, 0,
	1453, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 902, 0, 0, 0, 0, 0, 774, 0,
	766, 765, 0, 0, 911, 0, 1449, 1450, 1451, 764,
	1448, 1445, 1446, 1447, 1439, 1440, 1441, 1442, 1444, 0,
	0, 0, 0, 0, 0, 0, 763, 0, 0, 0,
	0, 0, 0, 0, 1454, 0, 0, 0, 761, 755,
	778, 749, 769, 768, 0, 0, 751, 750, 0, 0,
	0, 780, 779, 756, 757, 758, 759, 0, 777, 0,
	0, 0, 909, 0, 0, 897, 898, 899, 0, 896,
	893, 894, 895, 887, 888, 889, 890, 892, 0, 912,
	0, 0, 774, 0, 766, 765, 0, 0, 0, 0,
	0, 0, 0, 764, 767, 0, 0, 0, 1133, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 1450, 1451,
	763, 1448, 1445, 1446, 1447, 1439, 1440, 1441, 1442, 1444,
	0, 0, 762, 0, 0, 0, 1136, 1134, 1135, 1138,
	1137, 0, 0, 0, 0, 0, 0, 756, 757, 758,
	759, 0, 777, 0, 0, 0, 0, 0, 753, 0,
	0, 0, 0, 0, 0, 0, 760, 754, 0, 0,
	0, 0, 0, 0, 0, 782, 0, 0, 0, 0,
	0, 0, 0, 752, 0, 0, 775, 776, 767, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	781, 0, 0, 0, 0, 0, 762, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 753, 0, 0, 0, 0, 0, 0, 0,
	760, 754, 0, 0, 0, 0, 0, 0, 0, 782,
	0, 0, 0, 0, 0, 0, 0, 752, 0, 0,
	775, 776, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 781,
}
var sqlPact = [...]int{

	212, -1000, 42, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 698, 16986, -1000,
	-1000, -1000, -1000, -1000, -1000, 660, 685, 2070, 4515, 16986,
	16986, 16720, 1552, 1552, 18316, -1000, -1000, 21508, -1000, 24013,
	492, 495, 492, 492, 504, 18316, 622, 706, 135, -1000,
	805, 10, 21242, 16986, 1348, 40, 15390, 323, 212, 16454,
	20976, 16986, 16188, 352, 44, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1197, 1104, 1103, 15390, 20710, 20444, 20178,
	19912, -1000, 10718, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 741, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 337, 331, -1000, 15922, -1000,
	931, -1000, 39, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 929, -1000, 16986, -1000, -1000, 19646, 19380, 326, 907,
	-1000, -1000, 570, 398, 1371, -1000, 52, -1000, -1000, -1000,
	1196, -1000, 919, 1194, 1193, 1192, 1191, 1189, 1188, 397,
	796, 474, -1000, 907, -1000, 907, -1000, -1000, -1000, 546,
	18316, -1000, 15390, -1000, 19114, 16986, 16986, 1131, 18848, -1000,
	805, -1000, -1000, -1000, 938, 1346, 1346, 1346, 1375, 148,
	144, 135, 7, 16986, -1000, 324, 7, 6292, 6292, -1000,
	-1000, 323, -1000, 364, 13210, -1000, 7508, -1000, 926, 1262,
	421, 701, 1261, -96, 818, 809, 1260, 659, 12395, 44,
	-1000, -1000, -1000, 9284, 4225, 15390, 16986, 16986, 683, 18582,
	-1000, 1255, 125, 1254, -1000, 122, 1252, -1000, 122, 1249,
	30, -1000, -1000, -1000, -1000, -1000, -1000, 323, 15656, 16986,
	1435, 25302, -1000, 9284, -1000, -1000, 13766, 2103, 13766, -1000,
	-1000, 1429, -1000, 9284, -1000, 37, 31, 1039, 1059, 11289,
	11010, 1304, 1396, -1000, -1000, -1000, 51, 4515, 16986, 1203,
	13766, 16986, 16986, 16986, 16986, 16986, 16986, -1000, 1030, -1000,
	-1000, 16986, 16986, -1000, 17, 13, -1000, 18316, -1000, 127,
	-1000, 322, 1003, 406, 162, 18050, 406, 993, -1000, 938,
	-1000, 935, 1025, 8408, 9284, 135, -1000, -1000, 135, 135,
	9284, -1000, -1000, 16986, 7, 1424, 16986, 134, -1000, 23997,
	-1000, -1000, 9284, 9284, 9284, 9284, 9284, 872, -1000, -1000,
	1511, -1000, 5413, -1000, -1000, 44, 317, 168, -1000, -1000,
	316, 44, -1000, -1000, -1000, -1000, 309, 1529, 404, -1000,
	-1000, -1000, 9284, 402, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1202, 308, 307, -1000, -1000, -1000, -1000,
	305, 299, 297, 292, 291, 289, 288, 287, 286, 285,
	284, 282, 280, 278, 277, 849, -1000, 422, -1000, -1000,
	422, 422, -1000, 267, 267, 268, -1000, -1000, -1000, -1000,
	267, -1000, -1000, -1000, 388, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 272, 134, -1000, -1000, -1000, 16986, 29, -1000,
	24751, -1000, -24, 791, -1000, 14858, 1329, 1321, 1337, 15390,
	1397, 1387, 542, 16986, 16986, 540, 539, 15390, -1000, 1187,
	24, -1000, -1000, 23327, -161, -1000, -1000, 412, 94, 1421,
	94, 12678, -1000, 16986, 16986, -1000, 16986, -1000, -1000, 16986,
	-1000, 16986, 16986, -1000, 16986, 1501, 14326, 957, 1247, 669,
	10, 22, -1000, 1440, -1000, -1000, -1000, -1000, 88, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 268, 849, 267, 267, 267, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 388, -1000, -1000, 422, 422,
	422, -1000, -1000, 18, 24751, 538, -9, 14046, 16986, -1000,
	50, -1000, -1000, 1186, 477, 14, 843, 1095, 814, -1000,
	-1000, -1000, -1000, 3, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1488, -1000, -1000, -1000, -1000, 1508,
	3, -1000, -1000, -1000, -1000, -1000, 1527, -1000, -1000, -1000,
	4515, -1000, -1000, -1000, 16986, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 843, 1095, -1000, -1000, 15390,
	14592, 1410, 1246, 859, -1000, 1408, 16986, 911, 992, -1000,
	562, 1236, -1000, -1000, -1000, -1000, 24751, -1000, 24751, 732,
	1110, -1000, 1110, 2, -1000, 23691, -1000, 263, 12, -1000,
	412, 6292, 12129, 25218, 25302, 16986, 609, 9284, 9284, 9284,
	9284, 9284, 9284, 9284, 9284, 9284, 9284, 9284, 9284, 9284,
	9284, 9284, 9284, 9284, 9284, 9284, 9284, 9284, 9284, 991,
	9284, 537, 9284, 9284, 9284, 9284, 862, 856, 250, 4515,
	-1000, 663, 663, 663, 24938, 24938, 220, -1000, 44, 38,
	23297, -8, 44, -1000, -1000, -1000, 5997, 8092, 44, 4805,
	-1000, 616, 1507, 423, 24751, 1182, 1164, 262, 143, 142,
	9284, 9284, 9576, 9576, 9284, 9868, 9284, 9284, 5705, 9284,
	9284, 9284, 9284, 9284, 9284, -1000, 260, -1000, -1000, -1000,
	-1000, 1498, -1000, -1000, 1497, -1000, 577, 556, 1496, 412,
	140, 7508, -1000, 957, 16986, 16986, 16986, -1000, -1000, 985,
	17784, 983, 25302, 16986, -1000, 259, 258, 1083, 1072, 16986,
	16986, 17518, 17252, 16986, 713, 256, 255, 16986, 801, -1000,
	16986, 16986, 785, 656, 1179, 16986, -1000, 9284, 711, 9284,
	798, -1000, 11847, 431, 16986, 766, 83, -1000, -1000, -1000,
	378, 16986, -1000, -1000, -1000, 125, -1000, 122, 122, -1000,
	-1000, 15390, -1000, -1000, -1000, -1000, -1000, -1000, 25302, 358,
	342, -1000, 1490, 536, -1000, 532, 517, 515, -1000, 251,
	-1000, 9284, 16986, 14046, -9, -16, -1000, -1000, 16986, 1095,
	-1000, -1000, -1000, -1000, 697, -1000, 838, -1000, 11568, -1000,
	-1000, -1000, 616, -1000, -33, -1000, -1000, -1000, -1000, 133,
	4, -22, 25302, -1000, -1000, -1000, -1000, -1000, 16986, 304,
	16986, 10, 16986, -1000, 1526, 10, 16986, 1234, 1269, 376,
	16986, -1000, -1000, -1000, 9284, -1000, -1000, -1000, 10, 16986,
	-1000, 1161, -1000, -75, 2154, -126, 137, 385, -1000, 3581,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 394, 503, 503, 451, 451, 451, 451, 2679, 2679,
	1019, 2150, 3191, 3191, 3191, 166, 341, 341, 3191, 3191,
	3191, 24938, 24808, 2649, 9284, 9284, 513, 855, 250, 2649,
	9284, 1479, 2649, 2649, 2649, -1000, 921, -1000, -1000, -1000,
	1178, 248, 9868, 9868, -1000, -1000, -1000, 5413, -1000, -1000,
	237, 9284, -1000, -1000, 9284, -103, -109, -1000, -1000, 0,
	-1000, -1000, -5, 9284, 9284, 9284, 114, -1000, 113, 620,
	-1000, 9284, 874, 236, 226, 9284, -1000, -1000, 24703, 22118,
	111, 1177, -127, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	110, 109, 24447, -127, 108, 2200, -1000, 9868, 9868, 9868,
	5413, 223, 107, 23661, -127, 24390, 7800, 7800, 7800, 104,
	24342, 9284, -127, 22088, 22058, 3151, -1, -12, -20, 1484,
	-25, 103, 393, 392, 102, 1161, -1000, -1000, -1000, -1000,
	512, 511, 1231, -1000, 979, -1000, 436, -1000, 691, 9284,
	16986, 221, 211, 821, -1000, 1224, 886, 1223, 886, -1000,
	-24, 747, 9284, 9284, -1000, 510, -1000, -1000, 509, -1000,
	654, -1000, 349, 24751, -1000, 6292, 24751, -1000, 719, 1341,
	-26, -1000, -1000, 6292, 412, 12678, 12129, 7508, -31, -1000,
	-1000, -1000, 957, -1000, 526, 1478, 100, 959, 806, 756,
	699, 1476, 24751, -33, -1000, -33, -1000, -1000, -1000, -1000,
	-1000, -1000, 16986, 1136, -1000, 14592, 210, 16986, 209, -1000,
	207, -1000, -1000, 202, 16986, 1045, 376, 1531, -1000, 406,
	-1000, 98, -1000, 1156, 1370, -1000, 12129, 944, 1091, 1070,
	12129, 1205, 878, 878, 878, -1000, 385, 3924, 9284, 15124,
	885, 70, 95, 2154, 9284, 2649, 2649, 9284, 9868, 9868,
	-1000, 2649, -1000, -1000, -1000, -1000, 1175, 197, 9284, 25302,
	25110, 25009, -32, 7192, -45, 44, 23267, -1000, -1000, 249,
	-1000, 92, 6900, -1000, 24027, -10, -10, -1000, 1523, 1267,
	-1000, 9284, 24086, -1000, 12944, 415, 888, 23237, 25218, 25302,
	-1000, 9284, -1000, -1000, 1173, 9284, -1000, 25302, 25302, 9868,
	9868, 9868, 9868, 9868, 9868, 9868, 9868, 9868, 9868, 9868,
	9868, 9868, 9868, 9868, 9868, 9868, 9868, 9868, 1024, 9868,
	1466, 1466, 1466, -46, 6584, -1000, 1201, 1173, 9284, 9284,
	25302, 91, 90, 89, -1000, 9284, -127, 9284, 9284, 9284,
	-1000, -1000, -1000, 85, -1000, 1474, -1000, -1000, -1000, -1000,
	1156, 16986, 16986, 16986, 1221, -1000, 1928, -1000, 22934, -36,
	16986, 16986, -1000, 1069, 1119, 471, 16986, -1000, 16986, -1000,
	16986, 16986, 16986, -38, -44, 16986, 16986, -1000, -1000, -63,
	6292, 218, 10, -63, 711, -1000, -52, -1000, 377, -1000,
	348, 340, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	81, -1000, -1000, 1148, -1000, 10452, 194, 16986, 14592, 1404,
	10452, 909, 1052, 376, 1520, -1000, 562, -1000, 405, 9284,
	9284, 2154, 625, 12129, 12129, 1018, 1058, 12129, -1000, -1000,
	-1000, -1000, 15124, -1000, 1073, -50, -1000, -1000, 16986, 192,
	-1000, 385, 579, 2649, 3254, 3206, 9284, 25302, 25068, -51,
	9284, 9284, -1000, -62, -1000, 9284, -1000, -1000, 1503, 9284,
	77, 76, 73, -1000, -1000, 24751, 9284, -1000, -1000, 21774,
	9284, 71, -1000, 67, 66, 24751, 1201, 24751, -1000, -1000,
	614, 614, 1466, 1466, 1466, 1466, 2008, 2008, 775, 965,
	518, 518, 518, 949, 351, 351, 518, 518, 518, 1172,
	999, 190, 2620, 9284, -66, -1000, -1000, -1000, 24751, 24751,
	63, -1000, -1000, -1000, -127, 2835, 22904, 22874, -1000, 62,
	405, -1000, -1000, -1000, 16986, -1000, 16986, -1000, 16986, 16986,
	1174, 958, -1000, -1000, 1067, 188, 9868, 16986, -1000, 829,
	-71, -73, 951, -1000, 942, 9284, -1000, 25302, 886, 886,
	-1000, 508, 501, -1000, -1000, -1000, -1000, -63, 1274, 16986,
	1330, -1000, -1000, 186, -1000, -1000, -1000, 869, -77, -1000,
	247, 1351, 9284, -1000, -1000, 184, 10452, -78, 61, 10,
	-82, 16986, -1000, 376, 1518, -1000, 1269, -1000, 16986, 24751,
	-127, 550, -1000, 1018, -1000, 183, 9284, 12129, -1000, -1000,
	-151, -1000, 373, -1000, 385, 182, 16986, 15124, 9284, 9284,
	25068, -84, -1000, 2649, 2649, -1000, 22844, -1000, 24027, -1000,
	-1000, -1000, 24751, 866, -1000, 22541, -1000, -1000, -1000, -1000,
	9868, 1170, 181, 25302, 22511, -1000, -1000, 9284, -1000, -1000,
	-1000, -1000, -1000, 1514, -1000, -1000, 16986, 961, -1000, -1000,
	9284, 2620, 180, 1136, 178, -1000, -1000, -1000, 833, -1000,
	-1000, 24751, 1353, -1000, -1000, 16986, 16986, 559, -86, 16986,
	-1000, -1000, 5121, 16986, 829, 10452, 1338, 44, 16986, 1338,
	22481, 4805, -88, -1000, 1136, -1000, 829, 177, 1515, -1000,
	1045, -64, -1000, 1402, 13500, -1000, 16986, 24751, -1000, 1073,
	-1000, 4515, 15124, 16986, -101, -1000, 2649, 2649, -1000, -1000,
	58, 888, 1365, -1000, 23603, 9868, 25302, -112, -1000, 22451,
	-1000, -1000, 1220, 22148, 975, 16986, -1000, 16986, 16986, 439,
	16986, -1000, -1000, 682, -1000, 412, -1000, 175, 1136, -1000,
	-1000, -1000, -1000, 1351, -5, 829, -1000, 1136, 10452, -1000,
	1052, 16986, 169, -1000, 167, 44, -113, -1000, -1000, -1000,
	-117, -1000, -1000, 729, 9284, 23603, -123, -1000, -1000, 1211,
	-1000, 897, 912, 57, -128, 162, -1000, 9284, -1000, 12678,
	-1000, 16986, -1000, 1338, 56, 1136, -1000, -129, -1000, -1000,
	-1000, 9284, -1000, -1000, 55, 8992, 8992, -127, -1000, 16986,
	-1000, 906, 905, 642, -1000, -1000, -1000, -1000, -1000, 975,
	24751, -124, -130, -1000, -1000, -1000, 829, -10, -1000, -1000,
	-1000, 10160, 946, 703, 23631, -1000, -1000, -1000, 1285, -1000,
	446, 974, 974, 897, -1000, 873, 1136, 54, 1444, -1000,
	-1000, -1000, -1000, -1000, -1000, 1453, -1000, -1000, 1057, -1000,
	-1000, -1000, -1000, -1000, -1000, 1503, 8700, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 1767, 1765, 1381, 145, 1764, 143, 1762, 1761, 1760,
	1759, 1756, 1755, 120, 142, 137, 144, 134, 1746, 92,
	1744, 1742, 1740, 101, 1739, 1732, 1731, 46, 1727, 1726,
	126, 109, 1724, 1718, 100, 25, 165, 2171, 141, 1716,
	1715, 1713, 11, 107, 66, 1711, 108, 1709, 1708, 58,
	47, 30, 27, 1706, 99, 115, 900, 36, 1705, 1704,
	152, 24, 21, 155, 104, 156, 125, 118, 1703, 1699,
	1698, 53, 1697, 1, 1696, 1695, 15, 79, 12, 1694,
	26, 28, 1693, 1692, 124, 1691, 81, 106, 117, 160,
	132, 269, 1690, 68, 13, 78, 1684, 14, 88, 1683,
	50, 85, 136, 1681, 55, 162, 74, 38, 61, 114,
	1680, 1674, 1671, 93, 1664, 94, 133, 1662, 1661, 83,
	1660, 128, 131, 1659, 1658, 119, 1657, 1656, 1655, 157,
	1654, 1652, 159, 1651, 9, 52, 77, 8, 116, 112,
	80, 105, 1647, 17, 1646, 1631, 698, 616, 23, 65,
	60, 90, 54, 69, 31, 1645, 1643, 110, 1642, 1638,
	1637, 1636, 1634, 86, 1629, 75, 149, 43, 19, 44,
	95, 34, 111, 91, 146, 153, 113, 1628, 1617, 123,
	1616, 211, 1614, 1613, 1246, 130, 1609, 1606, 1599, 1225,
	1198, 924, 182, 1597, 1595, 614, 363, 1594, 1591, 59,
	1590, 129, 1587, 1585, 150, 207, 33, 1584, 121, 1571,
	102, 1561, 0, 37, 18, 1560, 122, 82, 1559, 1558,
	1557, 1556, 20, 2, 10, 5, 6, 4, 35, 32,
	1555, 1554, 127, 97, 62, 1553, 154, 1551, 1550, 1547,
	51, 1544, 22, 1543, 16, 1542, 1541, 7, 3, 148,
	1540, 103, 1539, 1416, 1538, 151, 1537, 1519, 1414, 49,
	96,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	44, 44, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 41, 41, 46,
	46, 46, 48, 48, 45, 45, 40, 40, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 13, 14, 14,
	14, 14, 14, 14, 14, 14, 90, 90, 89, 89,
	92, 92, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 180, 180, 179, 18, 155,
	155, 19, 19, 19, 19, 20, 114, 114, 21, 21,
	21, 21, 22, 26, 249, 249, 249, 253, 253, 254,
	254, 255, 255, 255, 255, 255, 255, 255, 251, 251,
	29, 29, 29, 29, 29, 133, 129, 129, 131, 131,
	131, 131, 55, 128, 128, 128, 128, 130, 130, 130,
	130, 205, 204, 204, 210, 210, 210, 68, 68, 68,
	68, 68, 69, 69, 69, 203, 203, 203, 203, 211,
	211, 211, 211, 211, 211, 70, 70, 70, 209, 209,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	17, 250, 250, 252, 252, 31, 31, 9, 9, 10,
	10, 71, 71, 72, 72, 136, 136, 136, 136, 73,
	73, 47, 47, 47, 135, 220, 220, 221, 221, 221,
	221, 221, 221, 222, 222, 222, 222, 222, 222, 222,
	218, 218, 219, 216, 216, 217, 217, 217, 217, 256,
	256, 134, 134, 76, 76, 225, 225, 225, 225, 223,
	223, 223, 223, 223, 226, 224, 227, 227, 227, 227,
	227, 166, 166, 166, 33, 11, 53, 53, 12, 8,
	8, 118, 118, 80, 80, 171, 171, 171, 62, 62,
	42, 42, 42, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 119, 119, 120, 120, 24, 28,
	32, 32, 32, 32, 32, 258, 258, 59, 59, 59,
	59, 60, 60, 132, 132, 132, 132, 132, 54, 7,
	7, 49, 49, 50, 50, 51, 51, 52, 52, 259,
	259, 23, 23, 23, 23, 23, 65, 65, 125, 125,
	125, 127, 127, 126, 126, 126, 104, 104, 34, 85,
	85, 94, 94, 95, 95, 177, 96, 96, 27, 27,
	37, 37, 35, 35, 35, 35, 35, 35, 36, 36,
	38, 38, 38, 38, 38, 38, 38, 233, 233, 233,
	236, 236, 232, 234, 234, 235, 235, 257, 257, 105,
	105, 105, 75, 74, 74, 78, 78, 77, 79, 79,
	170, 102, 102, 102, 102, 121, 122, 122, 123, 123,
	124, 124, 101, 101, 152, 152, 39, 39, 84, 84,
	86, 86, 143, 143, 144, 144, 142, 142, 142, 172,
	172, 172, 172, 172, 169, 169, 173, 173, 173, 173,
	173, 173, 167, 167, 167, 167, 168, 168, 178, 178,
	108, 108, 108, 108, 106, 106, 107, 107, 174, 174,
	174, 174, 103, 103, 175, 175, 175, 137, 137, 181,
	181, 181, 199, 199, 83, 83, 83, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	183, 183, 183, 183, 185, 185, 185, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 198, 198, 198, 198, 198, 198, 186, 186, 193,
	193, 194, 194, 195, 196, 187, 187, 188, 188, 189,
	190, 197, 197, 197, 197, 201, 201, 191, 191, 191,
	191, 191, 192, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 116, 116, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 228, 228, 228, 228, 228, 228, 228, 230,
	230, 231, 231, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	237, 237, 238, 238, 240, 240, 241, 241, 242, 243,
	243, 243, 244, 245, 245, 239, 239, 246, 246, 246,
	247, 247, 248, 248, 248, 248, 248, 157, 157, 157,
	158, 158, 159, 91, 91, 154, 154, 153, 153, 153,
	156, 156, 109, 109, 200, 200, 200, 200, 200, 200,
	200, 110, 110, 110, 117, 111, 111, 112, 112, 112,
	112, 112, 112, 149, 150, 113, 113, 113, 151, 151,
	160, 164, 164, 163, 162, 162, 161, 161, 140, 140,
	140, 140, 141, 141, 139, 138, 97, 97, 98, 98,
	260, 260, 165, 165, 99, 99, 100, 93, 93, 176,
	176, 176, 176, 87, 87, 67, 67, 88, 88, 63,
	63, 66, 66, 64, 64, 64, 64, 81, 81, 82,
	82, 61, 61, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 202, 202, 202, 56, 56, 56,
	57, 57, 58, 58, 207, 207, 207, 208, 208, 208,
	208, 206, 206, 206, 206, 206, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 3, 4, 4, 2,
	2, 2, 0, 2, 0, 8, 8, 7, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 5, 2, 0, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 1, 3, 3, 0, 3, 8,
	11, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 6, 8, 5, 7, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 3, 3, 1, 1, 3, 2, 4, 0, 4,
	6, 3, 1, 5, 2, 0, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	2, 2, 4, 1, 1, 1, 2, 2, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 6, 4, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 0, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 1, 1,
	3, 5, 1, 0, 2, 2, 1, 2, 0, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 1, 1, 2, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 3,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -18, -20, -21, -22, -23, -25, -26, -28, -27,
	-29, -30, -31, -32, -24, -33, -34, 23, 64, -7,
	-8, -9, -10, -11, -12, -235, 92, 100, 122, 199,
	99, 85, 116, 218, 226, -35, -37, 234, -133, 235,
	34, 244, 58, 95, 220, 215, 266, 66, -233, -38,
	-36, 314, 289, 295, 229, -39, 252, 281, 317, 252,
	130, 78, 284, -63, -56, 4, -212, -214, 20, 21,
	23, 33, 34, 39, 43, 46, 57, 58, 59, 61,
	63, 64, 65, 68, 69, 76, 77, 78, 79, 81,
	85, 87, 91, 92, 94, 99, 100, 106, 107, 110,
	112, 117, 122, 123, 124, 131, 134, 129, 143, 145,
	146, 149, 148, 153, 156, 159, 161, 162, 163, 164,
	165, 167, 168, 170, 172, 169, 175, 177, 178, 180,
	185, 188, 191, 192, 193, 194, 197, 199, 201, 202,
	203, 205, 206, 208, 209, 210, 211, 212, 215, 213,
	214, 216, 218, 220, 221, 223, 225, 226, 227, 228,
	231, 232, 234, 235, 237, 240, 243, 244, 245, 248,
	246, 242, 251, 253, 254, 255, 262, 266, 267, 268,
	269, 272, 273, 274, 276, 278, 279, 280, 285, 290,
	291, 292, 293, 28, 35, 36, 37, 38, 40, 41,
	44, 45, 49, 50, 51, 53, 80, 82, 83, 98,
	101, 102, 108, 118, 120, 125, 126, 135, 136, 137,
	138, 140, 151, 174, 176, 186, 190, 196, 198, 204,
	222, 230, 238, 239, 247, 249, 257, 258, 259, 263,
	264, 281, 282, 87, 134, 274, 273, 78, 130, 252,
	284, -16, 314, -27, -6, -14, -4, -23, -34, -13,
	-30, -17, -31, -15, 23, -206, 4, -212, -214, -213,
	-215, 55, 67, 115, 133, 127, 142, 144, 152, 154,
	166, 187, 189, 219, 236, 22, 24, 25, 26, 27,
	29, 30, 31, 32, 42, 47, 48, 52, 54, 56,
	62, 66, 70, 71, 72, 73, 74, 75, 84, 86,
	88, 89, 90, 93, 95, 97, 103, 104, 105, 111,
	113, 114, 116, 119, 121, 128, 130, 132, 139, 141,
	147, 150, 155, 157, 158, 171, 173, 179, 181, 182,
	183, 184, 195, 200, 207, 217, 229, 233, 241, 250,
	252, 256, 260, 261, 265, 270, 271, 275, 277, 283,
	284, 286, 287, 288, 289, -56, -56, -56, 199, 22,
	-253, 22, -254, -255, 66, 92, 116, 229, 134, 87,
	273, -253, -60, 226, -56, -129, 156, 232, 222, 262,
	-130, -128, -205, 257, 165, -89, -56, 4, 22, 78,
	57, 79, 117, 130, 131, 62, 63, 146, 253, 257,
	262, 66, 276, -258, 262, 262, -258, -258, -59, 262,
	260, -60, -257, 252, 252, 275, 284, -118, 78, 271,
	-36, -38, -37, -77, -78, 270, 139, 97, 184, -35,
	-37, -233, -236, 205, -232, -56, -236, -74, -75, 22,
	89, 318, -174, -63, 182, -100, 314, -3, -174, 125,
	-63, -66, 125, -63, -56, -174, 125, 114, 314, -97,
	-140, -139, -138, 312, 316, 114, 141, 141, -175, -174,
	-56, 125, -67, 125, -66, -90, 125, -89, -90, 125,
	-180, -179, -208, 4, -212, -214, -213, 281, 252, 130,
	-155, 314, -114, 314, -56, 22, 181, 318, 181, -56,
	-129, 51, -129, 314, -131, -54, -55, 143, 201, 260,
	299, 114, 293, -70, 5, 84, -92, 316, 114, -250,
	181, 114, 114, 114, 114, 114, 114, 293, 143, 201,
	225, 252, 284, -132, -54, -55, -132, 260, -60, -103,
	-174, -89, 125, -56, -89, 130, -56, 125, -77, -78,
	-102, -121, -122, 155, 179, -105, 22, 89, -105, -105,
	43, 315, 315, 318, -236, -82, 314, -93, -176, -145,
	307, -147, 305, 306, 311, 171, 294, -157, -63, -148,
	319, 9, 314, -160, -230, -37, 98, 29, -158, -159,
	222, -56, 7, 8, 5, 6, -61, -183, -192, 265,
	103, 173, 47, -228, -229, 4, -212, -207, -184, -194,
	-188, -191, 140, 55, 71, 74, 72, 75, 233, 275,
	48, 28, 101, 102, 190, 196, 249, 263, 264, 125,
	174, 126, 53, 118, 151, 91, 36, 38, 40, 41,
	49, 50, 80, 82, 83, 108, 135, 136, 137, 138,
	176, 204, 238, 247, 258, 259, 282, -213, -195, -196,
	-189, -190, -197, -93, -100, 307, -63, 314, -99, -165,
	-145, 84, -44, 213, -43, 21, 23, 92, 279, 98,
	242, 242, 213, 98, 319, 213, 213, 98, 245, 315,
	-87, -63, -140, -145, -141, -206, 307, -175, -65, -63,
	-65, 234, -56, 30, 98, -46, 318, 46, 216, 98,
	-46, 318, 98, -46, 98, 315, 318, -174, 125, -66,
	30, -154, -181, -182, -184, -193, -187, -191, -192, 39,
	45, 44, 255, 230, 239, 37, 135, 136, 137, 138,
	238, 36, 204, 108, 91, 83, 82, 176, 41, 40,
	-195, -196, -189, -190, 80, 258, 259, 140, 38, 50,
	49, 282, 247, -91, -145, -249, -88, 252, 78, -64,
	-56, 307, -255, -249, 30, -91, 318, 318, 153, -69,
	159, 170, 123, -204, 84, -210, -203, -166, 9, 265,
	103, 181, -209, 8, 306, -202, -208, 5, 7, 305,
	-204, 84, 69, -211, 5, 4, -192, -166, 84, 156,
	316, -206, -205, -252, 111, -249, -205, -205, -205, -205,
	-205, -56, 153, -205, -205, 318, 318, -60, -46, 318,
	314, -76, 171, -234, 289, -76, 314, -57, 125, -56,
	-234, 171, -102, -122, -121, -123, -145, 22, -145, -147,
	-36, -36, -36, -79, -170, -145, -232, 30, -81, -56,
	-84, 318, 114, 10, 11, 54, 33, 305, 306, 307,
	308, 109, 309, 302, 303, 304, 301, 297, 298, 299,
	60, 160, 224, 13, 14, 15, 26, 183, 154, 294,
	127, 236, 311, 16, 17, 18, 142, 35, 128, 30,
	4, -145, -145, -145, -145, -145, 189, 7, -98, -37,
	-145, -91, -97, -37, -37, -153, 312, 314, -97, 314,
	5, 5, 314, -161, -145, -237, 290, 111, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 198, -201, 285, -201, -201,
	-185, 314, -185, -186, 314, -185, 291, 295, 314, -84,
	-63, 318, 315, 318, 260, -119, 62, 56, -135, 125,
	56, -216, -56, 62, -217, 52, 271, 200, 113, -119,
	62, -119, 62, 62, -174, 33, 33, 260, -66, -56,
	260, 260, -174, 114, 315, 318, 313, 322, -137, 287,
	-125, -27, 314, 84, 30, -125, -94, -95, -177, -96,
	-63, 314, -56, -56, -66, -67, -89, -90, -90, -16,
	-179, 98, -19, -27, -23, -34, -13, 315, 318, -83,
	29, -115, 314, 292, 163, 81, 124, 162, -116, 228,
	315, 318, 260, 318, -88, -81, -139, -138, 114, 262,
	315, -55, -54, -68, 203, 240, 214, 231, 318, 8,
	7, 7, 5, -206, -251, -56, -55, -54, -174, -71,
	-81, -72, -56, -136, -135, -218, -219, -216, 130, 271,
	104, 30, 98, -53, 194, 30, 181, 171, -49, 254,
	98, -124, 222, 223, 318, -42, 31, 88, 314, 318,
	315, -137, -176, -86, -172, -174, -63, -37, -173, 314,
	-199, -181, -198, 180, 209, 210, 208, 212, 211, -181,
	-89, 257, -145, -145, -145, -145, -145, -145, -145, -145,
	-145, -145, -145, -145, -145, -145, -145, -145, -145, -145,
	-145, -145, -145, -145, 154, 127, 236, 35, 128, -145,
	260, -145, -145, -145, -145, 173, 171, 265, 103, 272,
	89, 177, -260, 250, 32, -151, -37, 314, -206, -157,
	222, 314, -140, 315, 318, -91, -156, 313, -153, -91,
	315, 315, -91, 283, 22, 89, 307, -115, 7, -164,
	-163, 286, -238, 106, 119, 314, 315, 315, -145, -145,
	-109, -200, -91, 4, 292, 163, 81, 124, 162, 228,
	-109, -110, -145, -91, -111, -146, -147, 305, 306, 311,
	314, 222, -112, -145, -91, -145, 42, 150, 261, -113,
	-145, 114, -91, -145, -145, -145, -91, -91, -91, 314,
	7, 7, 257, 257, 7, -137, 315, -165, -43, -63,
	-56, -56, 171, -135, 125, -48, 171, -181, -56, 314,
	314, 145, 145, -56, -56, 125, -56, 125, -56, -56,
	-44, 213, 314, 314, -56, 213, -56, -63, 213, 245,
	114, -63, -141, -145, -104, 217, -145, -104, -127, 181,
	-87, 281, -56, 217, -85, 318, 114, 299, -87, -46,
	-46, -46, -174, -181, 312, 312, 7, 260, 260, 260,
	260, 314, -145, -251, -64, -251, -54, 269, 59, 203,
	-210, -115, 318, 315, 315, 318, -57, 130, -57, -27,
	-89, 5, -27, -63, 98, -50, 94, -259, 299, -56,
	-170, -19, -56, -101, 119, -178, 318, 296, 67, -108,
	144, 166, 115, 152, 219, 133, -142, 319, 314, -169,
	295, -37, -173, -172, 293, -145, -145, 260, -260, 250,
	-151, -145, 173, 265, 103, 272, 89, 177, 114, 314,
	-146, -146, -91, 314, -91, -98, -145, 313, 313, 318,
	315, -78, 318, -77, -145, -91, -91, 315, 315, -162,
	-163, 93, -145, -243, 188, 314, 314, -145, 30, 318,
	315, 114, 315, 315, -117, 195, 315, 10, 11, 305,
	306, 307, 308, 109, 309, 302, 303, 304, 301, 297,
	298, 299, 60, 160, 224, 13, 14, 15, 142, 128,
	-146, -146, -146, -91, 314, 315, -149, -150, 114, 111,
	30, -113, -113, -113, 315, 114, -91, 318, 318, 318,
	315, 315, 315, 7, 315, 318, 315, 293, 293, 315,
	-101, 260, 260, 98, 171, 278, -220, -217, -145, -81,
	314, 314, -41, 92, 234, -120, 98, -46, 98, -46,
	260, -119, 62, -91, -91, 260, 260, 245, 313, -93,
	217, 61, 315, -93, -137, -95, -86, -165, 315, 313,
	7, 7, 315, 163, 124, 162, -116, 162, -116, -116,
	7, -56, -73, 129, -136, 314, -57, 314, 314, -76,
	314, -56, -51, 149, -259, 4, -234, 315, -152, 121,
	43, -172, 177, 144, 144, -172, -108, 144, -106, 187,
	-106, -106, -169, -206, 320, -91, -168, -167, 30, -56,
	185, 315, -145, -145, -146, -146, 114, 314, -145, -154,
	26, 26, 315, -91, 315, 318, 315, -153, 315, 283,
	-78, -78, -78, 5, 95, -145, 256, -244, -56, 314,
	287, -77, 315, -199, -181, -145, -149, -145, -181, -181,
	-146, -146, -146, -146, -146, -146, -146, -146, -146, -146,
	-146, -146, -146, -146, -146, -146, -146, -146, -146, 89,
	171, 177, -146, 318, -91, 315, -150, -149, -145, -145,
	-181, 315, 315, 315, -91, -145, -145, -145, 315, 7,
	-152, -56, -56, -135, 98, -221, 62, -222, 54, 104,
	66, 171, 173, 271, 200, 52, 84, 207, 315, 315,
	-81, -81, 171, 84, 171, 84, 77, 267, -56, -56,
	-63, -56, -56, 315, 315, -56, -63, -93, -126, 314,
	181, -27, -104, 299, 313, 313, 315, 128, -80, -171,
	-56, -231, 314, -228, -229, -61, 314, -81, -71, 30,
	-80, 181, -52, 148, -259, 5, -49, -240, 288, -145,
	-91, 251, -172, -172, -107, 277, 181, 144, -172, -168,
	-144, -143, 112, 169, 315, -56, 314, -169, 26, 26,
	-145, -154, 315, -145, -145, 315, -145, 5, -145, 315,
	315, 315, -145, -245, -56, -145, 315, 315, 315, -150,
	114, 89, 177, 314, -145, 315, 315, 318, 315, 315,
	315, -240, -135, -56, -89, -56, 104, 125, 173, 145,
	314, -146, -63, -134, -256, 65, 248, 315, 315, 173,
	173, -145, -181, -46, -46, 260, 260, 90, -81, 62,
	-100, -37, 314, 191, 315, 318, -62, -97, 54, -62,
	-145, 314, -80, 315, 315, -27, 315, -63, -259, 5,
	-50, -241, -242, -56, 257, -107, 314, -145, -172, 318,
	321, 299, -169, 314, -81, -167, -145, -145, 315, 315,
	-78, -239, 193, 315, -146, 114, 314, -154, 315, -145,
	-222, -57, 171, -145, -58, 314, -73, 314, 207, -45,
	54, -56, -56, 273, 172, 315, -56, -56, -134, -171,
	-42, -89, -42, 315, -91, 315, -73, -134, 314, 5,
	-51, 318, 30, -148, -61, -56, -81, -143, -206, -168,
	-81, 315, 315, -78, 43, -146, -154, 315, 315, 98,
	315, -225, 161, -56, -81, -63, -40, 277, -89, 234,
	-137, 314, -73, -62, -78, -134, -73, -80, -52, -242,
	-244, 314, 315, 315, -246, 202, 223, -91, 315, 104,
	-223, -226, -224, 181, 115, 192, 237, 315, 315, -76,
	-145, -94, -81, -42, 315, -73, 315, -91, 315, -247,
	-248, 35, 268, 69, -145, -247, -56, -224, 181, -226,
	181, 273, 87, -225, -137, 315, -134, -78, -248, 197,
	110, 222, 197, 110, -227, 168, 216, 46, 234, -227,
	-223, -47, 46, 216, -73, 315, 26, 20, 173, 84,
	-248,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 66, 0, 0, 396, 0, 0,
	0, 0, 0, 0, 0, 368, -2, 0, 134, 0,
	316, 0, 316, 316, 320, 0, 398, 282, 395, -2,
	406, 0, 0, 0, 404, 382, 0, 0, -2, 0,
	0, 0, 0, 0, 819, 847, 848, 849, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 0, 200, 861, 862, 863, 864,
	865, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
	1130, 1131, 1132, 1133, 1134, 100, 107, 108, 935, 110,
	0, 117, 118, 119, 121, 122, 123, 124, 125, 126,
	127, 0, 309, 955, 322, 130, 912, 959, 1028, 974,
	137, 147, 0, 1034, -2, 151, 78, 180, 181, 182,
	0, 184, 202, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 199, 327, 315, 327, 312, 313, 314, 317,
	0, 308, 0, 397, 0, 0, 0, 0, 0, 281,
	-2, 378, 379, -2, 0, 401, 401, 401, 0, 0,
	379, 0, 387, 939, 390, 830, 388, 0, 0, 403,
	402, 0, 383, 468, 0, 426, 0, 2, 0, 1013,
	468, 0, 1013, 822, 0, 0, 1013, 0, 0, 820,
	796, 788, 789, 793, 0, 0, 0, 0, 0, 474,
	68, 1013, 51, 1013, 815, 51, 1013, 76, 51, 1013,
	0, 95, 97, 857, 858, 859, 860, 1039, 0, 0,
	0, 0, 105, 0, 109, 111, 0, 0, 0, 321,
	131, 1002, 133, 0, 136, 138, 139, 0, 0, 0,
	0, 0, 0, 150, 175, 176, 79, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 195,
	196, 0, 0, 310, 323, 324, 311, 0, 319, 51,
	472, 254, 1013, 394, 254, 851, 394, 1013, -2, 0,
	374, 413, 414, 0, 0, 0, 399, 400, 0, 0,
	0, 370, 371, 0, 389, 0, 0, 429, 807, 811,
	812, 569, 0, 0, 0, 0, 0, 0, 658, 659,
	0, 798, 0, 663, 664, 665, 1007, 0, 670, 671,
	1028, 819, 833, 834, 835, 836, 0, 0, 0, 841,
	842, 843, 787, 711, 680, -2, -2, 831, 500, 501,
	502, 503, -2, 1041, 684, 686, 688, 689, 690, 691,
	0, 991, 1008, 1009, 1024, 1025, 1033, 1037, 1038, 1013,
	1021, 1014, 1003, 1011, 1020, 890, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 856, 531, 532,
	537, 538, 540, 429, 427, 469, 470, 0, 0, 804,
	802, 803, 28, 305, 30, 0, 305, 305, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 813, 797, 792, 0, 794, 795, 478, 0, 346,
	0, 0, 475, 0, 0, 70, 0, 49, 50, 0,
	72, 0, 0, 74, 0, 396, 0, 0, 1013, 0,
	396, 0, 745, 486, 487, 488, 489, 490, 566, 493,
	494, 495, 496, 497, 498, 499, 507, 508, 509, 510,
	511, 512, 513, 528, 0, 506, 506, 506, 519, 520,
	529, 530, 535, 536, 547, 548, 550, 552, 546, 546,
	546, 543, 544, 0, 743, 0, 114, 0, 885, 817,
	823, 824, 120, 0, 0, 0, 0, 0, 0, 142,
	162, 163, 164, 143, 145, 152, 154, 155, 156, 165,
	166, 167, 168, 271, 0, 273, 178, 179, 844, 0,
	144, 146, 148, 149, 169, 170, 0, 172, 173, 174,
	0, 80, 183, 185, 0, 201, 186, 187, 188, 189,
	190, 191, 194, 197, 198, 0, 0, 318, 274, 0,
	212, 0, 0, 277, 393, 0, 0, 0, 1013, 850,
	332, 0, 377, 411, 412, 415, 418, 419, 416, 569,
	384, 385, 386, 407, 408, 292, 391, 0, 0, 827,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 801, 0, 0,
	810, 574, 575, 576, 598, 599, 0, 660, 661, -2,
	743, 0, 666, 667, 668, 669, 0, 0, -2, 0,
	838, 566, 0, 0, 786, 713, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 766, 772, 0, 0, 0,
	0, 0, 0, 0, 0, 515, 534, 545, 542, 541,
	517, 0, 516, 514, 0, 518, 0, 0, 0, 478,
	0, 0, 806, 0, 0, 0, 0, 304, 32, 1013,
	0, 53, 0, 0, 244, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 821,
	0, 0, 0, 0, 0, 0, 790, 793, 357, 0,
	357, 348, 0, 0, 0, 344, 360, 361, 363, 364,
	0, 0, 476, 69, 816, 51, 77, 51, 51, 83,
	96, 0, 98, 101, 102, 103, 104, 99, 0, 479,
	481, 491, 0, 553, 554, 555, 556, 557, 558, 567,
	106, 0, 0, 0, 115, 116, 825, 826, 0, 0,
	135, 140, 141, 328, 0, 159, 0, 161, 0, 272,
	846, 845, 566, 81, 203, 128, 325, 326, 473, 0,
	0, 211, 827, 213, 215, 216, 217, 218, 851, 0,
	851, 0, 0, 275, 0, 0, 0, 0, 334, 340,
	0, 417, 420, 421, 0, 410, 290, 291, 396, 0,
	829, 423, 808, 459, 430, 438, 468, 445, 442, 0,
	570, 482, 483, 521, 522, 523, 524, 525, 526, 571,
	572, 0, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, -2, -2, -2, 590, 591, 592, -2, -2,
	-2, 596, 597, -2, 0, 0, 0, 801, 0, -2,
	0, 606, -2, -2, -2, 610, 0, 613, 615, 617,
	0, 0, 0, 0, 800, 627, 778, 0, 809, 612,
	0, 0, 799, 798, 0, 0, 0, 749, 750, 0,
	-2, 672, 406, 0, 0, 0, 0, 839, 0, 785,
	781, 0, 721, 0, 0, 0, 685, 687, 0, 0,
	0, 0, 753, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 743, 763, 0, 0, 629, 0, 0, 0,
	0, 1028, 0, 743, 771, 0, 0, 0, 0, 0,
	743, 0, 777, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 423, 471, 805, 31, 294,
	0, 0, 0, 34, 1013, 42, 0, 226, 0, 0,
	0, 0, 0, 307, 43, 1013, 51, 1013, 51, 44,
	29, 305, 0, 0, 298, 0, 293, 296, 0, 59,
	0, 814, 0, 792, 67, 0, 477, 341, 342, 0,
	0, 350, 347, 0, 478, 0, 0, 0, 0, 71,
	73, 75, 0, 746, 0, 0, 0, 0, 0, 0,
	0, 0, 744, 112, 818, 113, 132, 157, 158, 160,
	153, 171, 0, 220, 253, 0, 0, 851, 0, 209,
	254, 276, 278, 0, 0, 336, 340, 0, 339, 394,
	409, 0, 828, 425, 0, 428, 0, 0, 0, 0,
	0, 0, 465, 465, 465, 463, 445, 0, 0, 457,
	0, -2, 442, 0, 0, -2, -2, 0, 0, 0,
	628, -2, 611, 614, 616, 618, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 662, 744, 747, 748, 0,
	-2, 0, 0, 405, 406, 406, 406, 678, 0, 0,
	782, 0, 0, 679, 0, 0, 0, 0, 0, 0,
	694, 0, 695, 696, 0, 0, 697, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	632, 633, 634, 0, 0, 698, 769, 770, 0, 0,
	0, 0, 0, 0, 703, 0, 776, 0, 0, 0,
	707, 708, 709, 0, 504, 0, 527, 549, 551, 539,
	425, 0, 0, 0, 0, 52, 224, 243, 0, 0,
	0, 0, 36, 0, 0, 0, 0, 40, 0, 46,
	0, 0, 0, 0, 0, 0, 0, 60, 791, 356,
	0, 355, 0, 345, 357, 362, 359, 365, 0, 484,
	0, 0, 492, 559, 560, 561, 562, 563, 564, 565,
	0, 129, 207, 0, 214, 0, 0, 0, 212, 0,
	0, 0, 338, 340, 0, 331, 332, 392, 715, 0,
	0, 431, 0, 0, 0, 0, 0, 0, 460, 464,
	461, 462, 457, 436, 0, 0, 441, 456, 0, 455,
	444, -2, 573, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 779, 0, 738, 0, -2, 751, 673, 0,
	0, 0, 0, 840, 780, 784, 0, 719, 720, 724,
	0, 0, 683, 0, 0, 752, 762, 764, 630, 631,
	635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
	-2, -2, -2, 648, 649, 650, -2, -2, -2, 0,
	0, 0, 765, 0, 0, 741, 767, 768, 773, 774,
	0, 700, 701, 702, 775, 0, 0, 0, 533, 0,
	715, 300, 302, 33, 0, 225, 0, 228, 0, 0,
	0, 0, 234, 235, 0, 0, 0, 0, 245, 252,
	0, 0, 0, 48, 0, 0, 306, 0, 51, 51,
	295, 0, 0, 205, 206, 299, 297, 343, 0, 0,
	0, 349, 358, 0, 485, 480, 568, 0, 0, 283,
	289, 289, 0, 681, 682, 0, 0, 0, 0, 0,
	0, 0, 329, 340, 0, 333, 334, 380, 0, 424,
	422, 0, 447, 0, 449, 0, 0, 0, 451, 439,
	0, 434, 0, 433, 445, 453, 0, 0, 0, 0,
	-2, 0, 621, -2, -2, 737, 744, 837, 406, 674,
	676, 677, 783, 726, 723, 0, 710, 692, 693, 761,
	0, 0, 0, 0, 744, 740, 699, 0, 705, 706,
	505, 381, 35, 0, 229, 230, 851, 0, 233, 236,
	0, 238, 853, 220, 0, 249, 250, 247, 0, 37,
	38, 47, 55, 39, 45, 0, 0, 0, 0, 0,
	366, 367, 0, 0, 252, 0, 292, 832, 0, 292,
	0, 0, 0, 242, 220, 210, 252, 0, 0, 335,
	336, 714, 716, 0, 0, 448, 0, 467, 450, 0,
	437, 0, 457, 0, 0, 443, -2, -2, 622, 739,
	0, 406, 0, 712, -2, 0, 0, 0, 742, 0,
	227, 231, 0, 0, 258, 0, 246, 0, 0, 57,
	0, 301, 303, 0, 352, 478, 354, 0, 220, 284,
	285, 288, 286, 289, 406, 252, 208, 220, 0, 337,
	338, 0, 0, 458, 0, 0, 0, 435, 432, 440,
	0, 454, 675, 729, 0, -2, 0, 656, 704, 0,
	237, 263, 0, 0, 0, 254, 41, 0, 54, 0,
	353, 0, 240, 292, 0, 220, 279, 0, 330, 717,
	718, 0, 466, 452, 0, 0, 0, 725, 657, 0,
	239, 259, 260, 0, 255, 256, 257, 852, 251, 258,
	56, 478, 0, 287, 673, 241, 252, 406, 722, 727,
	730, -2, 977, 882, 0, 728, 232, 261, 0, 262,
	0, 0, 0, 263, 351, 223, 220, 0, 0, 732,
	733, 734, 735, 736, 264, 0, 267, 268, 0, 265,
	248, 219, 221, 222, 280, 0, 0, 266, 269, 270,
	731,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 303, 3, 309, 304, 3,
	314, 315, 307, 305, 318, 306, 316, 308, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 322, 317,
	297, 299, 298, 3, 319, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 312, 3, 313, 302, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 320, 301, 321, 311,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 300,
	57640, 310, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:731
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:737
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:743
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:768
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:811
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:835
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:858
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:931
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:935
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1065
		{ /* SKIP DOC */
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1190
		{
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1252
		{
			return unimplemented(sqllex)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1261
		{ /* SKIP DOC */
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1324
		{
			return unimplemented(sqllex)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1330
		{
			return unimplemented(sqllex)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = Low
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = Normal
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = High
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1422
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1441
		{
			return unimplemented(sqllex)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1442
		{
			return unimplemented(sqllex)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1443
		{
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1641
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1645
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = DropDefault
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1655
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			return unimplemented(sqllex)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			return unimplemented(sqllex)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1858
		{
			return unimplemented(sqllex)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			return unimplemented(sqllex)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1860
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1867
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1868
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1870
		{
			return unimplemented(sqllex)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1871
		{
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1874
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1877
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1881
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1882
		{
			return unimplemented(sqllex)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1884
		{
			return unimplemented(sqllex)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = true
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = false
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1991
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1994
		{
			return unimplemented(sqllex)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1995
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = Ascending
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = Descending
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2049
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2050
		{
			return unimplemented(sqllex)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = true
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = false
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2063
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2064
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2106
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2107
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.str = ""
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.str = ""
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].union.strVal(),
				Encoding: sqlDollar[6].union.strVal(),
				Collate:  sqlDollar[7].union.strVal(),
				CType:    sqlDollar[8].union.strVal(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].union.strVal(),
				Encoding:    sqlDollar[9].union.strVal(),
				Collate:     sqlDollar[10].union.strVal(),
				CType:       sqlDollar[11].union.strVal(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2229
		{
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2230
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2249
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2256
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2298
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2302
		{
			return unimplemented(sqllex)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2327
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2328
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2555
		{
			return unimplemented(sqllex)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2556
		{
			return unimplemented(sqllex)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2557
		{
			return unimplemented(sqllex)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2560
		{
			return unimplemented(sqllex)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2561
		{
			return unimplemented(sqllex)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2564
		{
			return unimplemented(sqllex)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2567
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2568
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2571
		{
			return unimplemented(sqllex)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2572
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2575
		{
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2576
		{
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = true
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = false
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = false
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = true
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2599
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2600
		{
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2638
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2658
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2699
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2700
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2758
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &From{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2806
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = true
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = false
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.str = astFullJoin
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.str = astLeftJoin
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.str = astRightJoin
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.str = astInnerJoin
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2966
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2967
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3053
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3066
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3067
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3081
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3090
		{
			return unimplemented(sqllex)
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3137
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3146
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = nil
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3195
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = oidPseudoTypeOid
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = oidPseudoTypeRegProc
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = oidPseudoTypeRegProc
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = oidPseudoTypeRegClass
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = oidPseudoTypeRegType
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = oidPseudoTypeRegNamespace
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3294
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3326
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3365
		{
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3366
		{
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3397
		{
			return unimplemented(sqllex)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3398
		{
			return unimplemented(sqllex)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3399
		{
			return unimplemented(sqllex)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3400
		{
			return unimplemented(sqllex)
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3401
		{
			return unimplemented(sqllex)
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3402
		{
			return unimplemented(sqllex)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3403
		{
			return unimplemented(sqllex)
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			return unimplemented(sqllex)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			return unimplemented(sqllex)
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3406
		{
			return unimplemented(sqllex)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3407
		{
			return unimplemented(sqllex)
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			return unimplemented(sqllex)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			return unimplemented(sqllex)
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3410
		{
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			return unimplemented(sqllex)
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3414
		{
			return unimplemented(sqllex)
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3449
		{
			return unimplemented(sqllex)
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3609
		{
			return unimplemented(sqllex)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3813
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3826
		{
			placeholder := NewPlaceholder(sqlDollar[1].str)
			if indirection := sqlDollar[2].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        placeholder,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = placeholder
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3838
		{
			paren := &ParenExpr{Expr: sqlDollar[2].union.expr()}
			if indirection := sqlDollar[4].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        paren,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = paren
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        &Subquery{Select: sqlDollar[1].union.selectStmt()},
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3894
		{
			return unimplemented(sqllex)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3895
		{
			return unimplemented(sqllex)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3918
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3933
		{
			return unimplemented(sqllex)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3934
		{
			return unimplemented(sqllex)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3938
		{
			return unimplemented(sqllex)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3955
		{
			return unimplemented(sqllex)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3956
		{
			return unimplemented(sqllex)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3957
		{
			return unimplemented(sqllex)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3958
		{
			return unimplemented(sqllex)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3987
		{
			return unimplemented(sqllex)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4031
		{
			return unimplemented(sqllex)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4032
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4035
		{
			return unimplemented(sqllex)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4036
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = Window(nil)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.str = ""
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4123
		{
			return unimplemented(sqllex)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4124
		{
			return unimplemented(sqllex)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4125
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4128
		{
			return unimplemented(sqllex)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4129
		{
			return unimplemented(sqllex)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4135
		{
			return unimplemented(sqllex)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4136
		{
			return unimplemented(sqllex)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4137
		{
			return unimplemented(sqllex)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4138
		{
			return unimplemented(sqllex)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4139
		{
			return unimplemented(sqllex)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4492
		{
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4493
		{
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4653
		{
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4689
		{
			return unimplemented(sqllex)
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = DNull
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.str = ""
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
