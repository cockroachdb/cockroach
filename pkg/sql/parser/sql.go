// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:476
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const KEY = 57515
const KEYS = 57516
const KV = 57517
const LATERAL = 57518
const LC_CTYPE = 57519
const LC_COLLATE = 57520
const LEADING = 57521
const LEAST = 57522
const LEFT = 57523
const LESS = 57524
const LEVEL = 57525
const LIKE = 57526
const LIMIT = 57527
const LIST = 57528
const LOCAL = 57529
const LOCALTIME = 57530
const LOCALTIMESTAMP = 57531
const LOW = 57532
const LSHIFT = 57533
const MATCH = 57534
const MINUTE = 57535
const MONTH = 57536
const NAN = 57537
const NAME = 57538
const NAMES = 57539
const NATURAL = 57540
const NEXT = 57541
const NO = 57542
const NO_INDEX_JOIN = 57543
const NORMAL = 57544
const NOT = 57545
const NOTHING = 57546
const NULL = 57547
const NULLIF = 57548
const NULLS = 57549
const NUMERIC = 57550
const OF = 57551
const OFF = 57552
const OFFSET = 57553
const OID = 57554
const ON = 57555
const ONLY = 57556
const OPTIONS = 57557
const OR = 57558
const ORDER = 57559
const ORDINALITY = 57560
const OUT = 57561
const OUTER = 57562
const OVER = 57563
const OVERLAPS = 57564
const OVERLAY = 57565
const PARENT = 57566
const PARTIAL = 57567
const PARTITION = 57568
const PASSWORD = 57569
const PAUSE = 57570
const PLACING = 57571
const PLANS = 57572
const POSITION = 57573
const PRECEDING = 57574
const PRECISION = 57575
const PREPARE = 57576
const PRIMARY = 57577
const PRIORITY = 57578
const QUERIES = 57579
const QUERY = 57580
const RANGE = 57581
const READ = 57582
const REAL = 57583
const RECURSIVE = 57584
const REF = 57585
const REFERENCES = 57586
const REGCLASS = 57587
const REGPROC = 57588
const REGPROCEDURE = 57589
const REGNAMESPACE = 57590
const REGTYPE = 57591
const REMOVE_PATH = 57592
const RENAME = 57593
const REPEATABLE = 57594
const RELEASE = 57595
const RESET = 57596
const RESTORE = 57597
const RESTRICT = 57598
const RESUME = 57599
const RETURNING = 57600
const REVOKE = 57601
const RIGHT = 57602
const ROLLBACK = 57603
const ROLLUP = 57604
const ROW = 57605
const ROWS = 57606
const RSHIFT = 57607
const SAVEPOINT = 57608
const SCATTER = 57609
const SEARCH = 57610
const SECOND = 57611
const SELECT = 57612
const SEQUENCES = 57613
const SERIAL = 57614
const SERIALIZABLE = 57615
const SESSION = 57616
const SESSIONS = 57617
const SESSION_USER = 57618
const SET = 57619
const SETTING = 57620
const SETTINGS = 57621
const SHOW = 57622
const SIMILAR = 57623
const SIMPLE = 57624
const SMALLINT = 57625
const SMALLSERIAL = 57626
const SNAPSHOT = 57627
const SOME = 57628
const SPLIT = 57629
const SQL = 57630
const START = 57631
const STATUS = 57632
const STDIN = 57633
const STRICT = 57634
const STRING = 57635
const STORE = 57636
const STORING = 57637
const SUBSTRING = 57638
const SYMMETRIC = 57639
const SYSTEM = 57640
const TABLE = 57641
const TABLES = 57642
const TEMP = 57643
const TEMPLATE = 57644
const TEMPORARY = 57645
const TESTING_RANGES = 57646
const TESTING_RELOCATE = 57647
const TEXT = 57648
const THAN = 57649
const THEN = 57650
const TIME = 57651
const TIMESTAMP = 57652
const TIMESTAMPTZ = 57653
const TO = 57654
const TRAILING = 57655
const TRACE = 57656
const TRANSACTION = 57657
const TREAT = 57658
const TRIM = 57659
const TRUE = 57660
const TRUNCATE = 57661
const TYPE = 57662
const UNBOUNDED = 57663
const UNCOMMITTED = 57664
const UNION = 57665
const UNIQUE = 57666
const UNKNOWN = 57667
const UPDATE = 57668
const UPSERT = 57669
const USE = 57670
const USER = 57671
const USERS = 57672
const USING = 57673
const UUID = 57674
const VALID = 57675
const VALIDATE = 57676
const VALUE = 57677
const VALUES = 57678
const VARCHAR = 57679
const VARIADIC = 57680
const VIEW = 57681
const VARYING = 57682
const WHEN = 57683
const WHERE = 57684
const WINDOW = 57685
const WITH = 57686
const WITHIN = 57687
const WITHOUT = 57688
const WRITE = 57689
const YEAR = 57690
const ZONE = 57691
const NOT_LA = 57692
const WITH_LA = 57693
const AS_LA = 57694
const CONTAINED_BY = 57695
const HAS_SOME_KEY = 57696
const HAS_ALL_KEYS = 57697
const POSTFIXOP = 57698
const UMINUS = 57699
const HELPTOKEN = 57700

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6744

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	378, 53,
	-2, 698,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	153, 550,
	-2, 0,
	-1, 62,
	96, 698,
	157, 698,
	326, 698,
	327, 698,
	-2, 0,
	-1, 72,
	107, 673,
	117, 673,
	165, 673,
	185, 673,
	211, 673,
	217, 673,
	323, 673,
	-2, 662,
	-1, 105,
	4, 700,
	20, 700,
	21, 700,
	23, 700,
	28, 700,
	33, 700,
	34, 700,
	35, 700,
	36, 700,
	37, 700,
	38, 700,
	39, 700,
	40, 700,
	41, 700,
	42, 700,
	44, 700,
	45, 700,
	46, 700,
	47, 700,
	48, 700,
	51, 700,
	52, 700,
	53, 700,
	55, 700,
	56, 700,
	60, 700,
	61, 700,
	62, 700,
	64, 700,
	65, 700,
	66, 700,
	67, 700,
	69, 700,
	71, 700,
	72, 700,
	75, 700,
	76, 700,
	77, 700,
	85, 700,
	86, 700,
	87, 700,
	88, 700,
	89, 700,
	90, 700,
	91, 700,
	92, 700,
	94, 700,
	96, 700,
	98, 700,
	101, 700,
	102, 700,
	104, 700,
	108, 700,
	109, 700,
	110, 700,
	111, 700,
	112, 700,
	113, 700,
	114, 700,
	122, 700,
	123, 700,
	124, 700,
	125, 700,
	126, 700,
	128, 700,
	130, 700,
	135, 700,
	136, 700,
	138, 700,
	141, 700,
	142, 700,
	145, 700,
	146, 700,
	147, 700,
	148, 700,
	151, 700,
	152, 700,
	154, 700,
	157, 700,
	158, 700,
	159, 700,
	160, 700,
	161, 700,
	162, 700,
	163, 700,
	164, 700,
	166, 700,
	169, 700,
	170, 700,
	171, 700,
	173, 700,
	174, 700,
	175, 700,
	177, 700,
	178, 700,
	180, 700,
	182, 700,
	183, 700,
	186, 700,
	187, 700,
	190, 700,
	192, 700,
	193, 700,
	194, 700,
	195, 700,
	196, 700,
	197, 700,
	199, 700,
	200, 700,
	201, 700,
	202, 700,
	206, 700,
	207, 700,
	208, 700,
	209, 700,
	210, 700,
	212, 700,
	214, 700,
	215, 700,
	218, 700,
	219, 700,
	221, 700,
	223, 700,
	224, 700,
	225, 700,
	226, 700,
	227, 700,
	228, 700,
	230, 700,
	231, 700,
	232, 700,
	233, 700,
	234, 700,
	236, 700,
	237, 700,
	238, 700,
	239, 700,
	240, 700,
	241, 700,
	242, 700,
	243, 700,
	245, 700,
	246, 700,
	247, 700,
	248, 700,
	249, 700,
	251, 700,
	252, 700,
	253, 700,
	254, 700,
	255, 700,
	256, 700,
	257, 700,
	259, 700,
	261, 700,
	262, 700,
	263, 700,
	264, 700,
	266, 700,
	267, 700,
	268, 700,
	269, 700,
	271, 700,
	272, 700,
	273, 700,
	274, 700,
	275, 700,
	277, 700,
	278, 700,
	279, 700,
	280, 700,
	282, 700,
	283, 700,
	284, 700,
	285, 700,
	287, 700,
	288, 700,
	289, 700,
	290, 700,
	291, 700,
	292, 700,
	293, 700,
	294, 700,
	295, 700,
	296, 700,
	298, 700,
	300, 700,
	301, 700,
	302, 700,
	303, 700,
	304, 700,
	305, 700,
	306, 700,
	307, 700,
	309, 700,
	310, 700,
	311, 700,
	314, 700,
	315, 700,
	316, 700,
	317, 700,
	319, 700,
	320, 700,
	321, 700,
	322, 700,
	325, 700,
	326, 700,
	327, 700,
	328, 700,
	330, 700,
	332, 700,
	333, 700,
	334, 700,
	335, 700,
	336, 700,
	337, 700,
	340, 700,
	345, 700,
	346, 700,
	347, 700,
	348, 700,
	349, 700,
	-2, 0,
	-1, 121,
	107, 672,
	117, 672,
	165, 672,
	185, 672,
	211, 672,
	217, 672,
	323, 672,
	-2, 665,
	-1, 127,
	1, 599,
	169, 599,
	236, 599,
	240, 599,
	377, 599,
	378, 599,
	-2, 0,
	-1, 129,
	1, 599,
	377, 599,
	378, 599,
	-2, 0,
	-1, 130,
	1, 599,
	377, 599,
	378, 599,
	-2, 0,
	-1, 131,
	1, 603,
	377, 603,
	378, 603,
	-2, 0,
	-1, 138,
	4, 706,
	5, 706,
	6, 706,
	7, 706,
	8, 706,
	9, 706,
	20, 706,
	21, 706,
	23, 706,
	28, 706,
	29, 706,
	33, 706,
	34, 706,
	35, 706,
	36, 706,
	37, 706,
	38, 706,
	39, 706,
	40, 706,
	41, 706,
	42, 706,
	44, 706,
	45, 706,
	46, 706,
	47, 706,
	48, 706,
	49, 706,
	50, 706,
	51, 706,
	52, 706,
	53, 706,
	55, 706,
	56, 706,
	58, 706,
	60, 706,
	61, 706,
	62, 706,
	64, 706,
	65, 706,
	66, 706,
	67, 706,
	69, 706,
	71, 706,
	72, 706,
	74, 706,
	75, 706,
	76, 706,
	77, 706,
	79, 706,
	80, 706,
	81, 706,
	83, 706,
	84, 706,
	85, 706,
	86, 706,
	87, 706,
	88, 706,
	89, 706,
	90, 706,
	91, 706,
	92, 706,
	94, 706,
	96, 706,
	98, 706,
	101, 706,
	102, 706,
	104, 706,
	108, 706,
	109, 706,
	110, 706,
	111, 706,
	112, 706,
	113, 706,
	114, 706,
	115, 706,
	116, 706,
	122, 706,
	123, 706,
	124, 706,
	125, 706,
	126, 706,
	128, 706,
	130, 706,
	133, 706,
	135, 706,
	136, 706,
	138, 706,
	141, 706,
	142, 706,
	145, 706,
	146, 706,
	147, 706,
	148, 706,
	149, 706,
	151, 706,
	152, 706,
	154, 706,
	156, 706,
	157, 706,
	158, 706,
	159, 706,
	160, 706,
	161, 706,
	162, 706,
	163, 706,
	164, 706,
	166, 706,
	168, 706,
	169, 706,
	170, 706,
	171, 706,
	172, 706,
	173, 706,
	174, 706,
	175, 706,
	177, 706,
	178, 706,
	180, 706,
	181, 706,
	182, 706,
	183, 706,
	184, 706,
	186, 706,
	187, 706,
	190, 706,
	192, 706,
	193, 706,
	194, 706,
	195, 706,
	196, 706,
	197, 706,
	198, 706,
	199, 706,
	200, 706,
	201, 706,
	202, 706,
	203, 706,
	205, 706,
	206, 706,
	207, 706,
	208, 706,
	209, 706,
	210, 706,
	212, 706,
	215, 706,
	218, 706,
	219, 706,
	220, 706,
	221, 706,
	222, 706,
	223, 706,
	224, 706,
	225, 706,
	226, 706,
	227, 706,
	228, 706,
	230, 706,
	231, 706,
	232, 706,
	233, 706,
	234, 706,
	236, 706,
	237, 706,
	238, 706,
	239, 706,
	240, 706,
	241, 706,
	242, 706,
	243, 706,
	245, 706,
	246, 706,
	247, 706,
	248, 706,
	249, 706,
	251, 706,
	252, 706,
	253, 706,
	254, 706,
	255, 706,
	256, 706,
	257, 706,
	259, 706,
	260, 706,
	261, 706,
	262, 706,
	263, 706,
	264, 706,
	266, 706,
	267, 706,
	268, 706,
	269, 706,
	271, 706,
	272, 706,
	273, 706,
	274, 706,
	275, 706,
	276, 706,
	277, 706,
	278, 706,
	279, 706,
	280, 706,
	281, 706,
	282, 706,
	283, 706,
	284, 706,
	285, 706,
	287, 706,
	288, 706,
	289, 706,
	290, 706,
	291, 706,
	292, 706,
	293, 706,
	294, 706,
	295, 706,
	296, 706,
	298, 706,
	300, 706,
	301, 706,
	302, 706,
	303, 706,
	304, 706,
	305, 706,
	306, 706,
	307, 706,
	309, 706,
	310, 706,
	311, 706,
	314, 706,
	315, 706,
	316, 706,
	317, 706,
	318, 706,
	319, 706,
	320, 706,
	321, 706,
	322, 706,
	325, 706,
	326, 706,
	327, 706,
	328, 706,
	329, 706,
	330, 706,
	332, 706,
	333, 706,
	334, 706,
	335, 706,
	336, 706,
	337, 706,
	340, 706,
	345, 706,
	346, 706,
	347, 706,
	348, 706,
	349, 706,
	350, 706,
	360, 706,
	365, 706,
	366, 706,
	367, 706,
	374, 706,
	380, 706,
	-2, 0,
	-1, 141,
	1, 53,
	378, 53,
	-2, 698,
	-1, 509,
	132, 1313,
	312, 1313,
	355, 1313,
	376, 1313,
	-2, 0,
	-1, 510,
	132, 1260,
	312, 1260,
	355, 1260,
	376, 1260,
	-2, 0,
	-1, 512,
	132, 1371,
	312, 1371,
	355, 1371,
	376, 1371,
	-2, 0,
	-1, 514,
	132, 1394,
	312, 1394,
	355, 1394,
	376, 1394,
	-2, 0,
	-1, 521,
	132, 1318,
	312, 1318,
	355, 1318,
	376, 1318,
	-2, 324,
	-1, 547,
	1, 402,
	373, 402,
	375, 402,
	377, 402,
	378, 402,
	-2, 0,
	-1, 548,
	1, 454,
	129, 454,
	373, 454,
	375, 454,
	377, 454,
	378, 454,
	-2, 0,
	-1, 554,
	1, 416,
	373, 416,
	375, 416,
	377, 416,
	378, 416,
	-2, 0,
	-1, 556,
	1, 420,
	373, 420,
	375, 420,
	377, 420,
	378, 420,
	-2, 0,
	-1, 559,
	1, 428,
	373, 428,
	375, 428,
	377, 428,
	378, 428,
	-2, 0,
	-1, 560,
	1, 433,
	373, 433,
	375, 433,
	377, 433,
	378, 433,
	-2, 0,
	-1, 563,
	1, 443,
	373, 443,
	375, 443,
	377, 443,
	378, 443,
	-2, 0,
	-1, 577,
	117, 708,
	185, 708,
	211, 708,
	-2, 668,
	-1, 580,
	117, 707,
	185, 707,
	211, 707,
	-2, 666,
	-1, 637,
	374, 1238,
	-2, 1231,
	-1, 638,
	374, 1239,
	-2, 1232,
	-1, 644,
	5, 885,
	374, 885,
	-2, 1446,
	-1, 669,
	5, 844,
	-2, 1415,
	-1, 670,
	5, 879,
	374, 879,
	-2, 1417,
	-1, 671,
	5, 854,
	-2, 1418,
	-1, 672,
	5, 853,
	-2, 1419,
	-1, 673,
	5, 879,
	374, 879,
	-2, 1422,
	-1, 674,
	5, 879,
	374, 879,
	-2, 1423,
	-1, 675,
	5, 880,
	-2, 1426,
	-1, 676,
	5, 836,
	-2, 1427,
	-1, 677,
	5, 836,
	-2, 1428,
	-1, 678,
	5, 861,
	-2, 1432,
	-1, 679,
	5, 846,
	-2, 1433,
	-1, 680,
	5, 847,
	-2, 1434,
	-1, 681,
	5, 837,
	-2, 1440,
	-1, 682,
	5, 838,
	-2, 1441,
	-1, 683,
	5, 839,
	-2, 1442,
	-1, 684,
	5, 840,
	-2, 1443,
	-1, 685,
	5, 841,
	-2, 1444,
	-1, 686,
	5, 842,
	-2, 1445,
	-1, 687,
	5, 836,
	-2, 1450,
	-1, 688,
	5, 845,
	-2, 1455,
	-1, 689,
	5, 843,
	-2, 1458,
	-1, 690,
	5, 877,
	374, 877,
	-2, 1460,
	-1, 691,
	5, 881,
	-2, 1463,
	-1, 692,
	5, 883,
	-2, 1464,
	-1, 693,
	5, 876,
	374, 876,
	-2, 1469,
	-1, 878,
	227, 696,
	-2, 543,
	-1, 882,
	213, 1235,
	-2, 0,
	-1, 917,
	1, 215,
	373, 215,
	375, 215,
	377, 215,
	378, 215,
	-2, 671,
	-1, 924,
	4, 1468,
	10, 1468,
	11, 1468,
	13, 1468,
	14, 1468,
	15, 1468,
	16, 1468,
	17, 1468,
	18, 1468,
	20, 1468,
	21, 1468,
	23, 1468,
	26, 1468,
	28, 1468,
	30, 1468,
	33, 1468,
	34, 1468,
	35, 1468,
	36, 1468,
	37, 1468,
	38, 1468,
	39, 1468,
	40, 1468,
	41, 1468,
	42, 1468,
	44, 1468,
	45, 1468,
	46, 1468,
	47, 1468,
	48, 1468,
	51, 1468,
	52, 1468,
	53, 1468,
	55, 1468,
	56, 1468,
	57, 1468,
	60, 1468,
	61, 1468,
	62, 1468,
	63, 1468,
	64, 1468,
	65, 1468,
	66, 1468,
	67, 1468,
	69, 1468,
	70, 1468,
	71, 1468,
	72, 1468,
	74, 1468,
	75, 1468,
	76, 1468,
	77, 1468,
	85, 1468,
	86, 1468,
	87, 1468,
	88, 1468,
	89, 1468,
	90, 1468,
	91, 1468,
	92, 1468,
	94, 1468,
	96, 1468,
	98, 1468,
	101, 1468,
	102, 1468,
	104, 1468,
	108, 1468,
	109, 1468,
	110, 1468,
	111, 1468,
	112, 1468,
	113, 1468,
	114, 1468,
	118, 1468,
	119, 1468,
	120, 1468,
	121, 1468,
	122, 1468,
	123, 1468,
	124, 1468,
	125, 1468,
	126, 1468,
	127, 1468,
	128, 1468,
	130, 1468,
	133, 1468,
	135, 1468,
	136, 1468,
	138, 1468,
	141, 1468,
	142, 1468,
	145, 1468,
	146, 1468,
	147, 1468,
	148, 1468,
	149, 1468,
	150, 1468,
	151, 1468,
	152, 1468,
	154, 1468,
	156, 1468,
	157, 1468,
	158, 1468,
	159, 1468,
	160, 1468,
	161, 1468,
	162, 1468,
	163, 1468,
	164, 1468,
	166, 1468,
	168, 1468,
	169, 1468,
	170, 1468,
	171, 1468,
	172, 1468,
	173, 1468,
	174, 1468,
	175, 1468,
	177, 1468,
	178, 1468,
	180, 1468,
	181, 1468,
	182, 1468,
	183, 1468,
	184, 1468,
	186, 1468,
	187, 1468,
	190, 1468,
	191, 1468,
	192, 1468,
	193, 1468,
	194, 1468,
	195, 1468,
	196, 1468,
	197, 1468,
	198, 1468,
	199, 1468,
	200, 1468,
	201, 1468,
	202, 1468,
	206, 1468,
	207, 1468,
	208, 1468,
	209, 1468,
	210, 1468,
	212, 1468,
	215, 1468,
	216, 1468,
	218, 1468,
	219, 1468,
	221, 1468,
	223, 1468,
	224, 1468,
	225, 1468,
	226, 1468,
	227, 1468,
	228, 1468,
	230, 1468,
	231, 1468,
	232, 1468,
	233, 1468,
	234, 1468,
	236, 1468,
	237, 1468,
	238, 1468,
	239, 1468,
	240, 1468,
	241, 1468,
	242, 1468,
	243, 1468,
	245, 1468,
	246, 1468,
	247, 1468,
	248, 1468,
	249, 1468,
	250, 1468,
	251, 1468,
	252, 1468,
	253, 1468,
	254, 1468,
	255, 1468,
	256, 1468,
	257, 1468,
	259, 1468,
	260, 1468,
	261, 1468,
	262, 1468,
	263, 1468,
	264, 1468,
	265, 1468,
	266, 1468,
	267, 1468,
	268, 1468,
	269, 1468,
	271, 1468,
	272, 1468,
	273, 1468,
	274, 1468,
	275, 1468,
	277, 1468,
	278, 1468,
	279, 1468,
	280, 1468,
	281, 1468,
	282, 1468,
	283, 1468,
	284, 1468,
	285, 1468,
	287, 1468,
	288, 1468,
	289, 1468,
	290, 1468,
	291, 1468,
	292, 1468,
	293, 1468,
	294, 1468,
	295, 1468,
	296, 1468,
	298, 1468,
	300, 1468,
	301, 1468,
	302, 1468,
	303, 1468,
	304, 1468,
	305, 1468,
	306, 1468,
	307, 1468,
	309, 1468,
	310, 1468,
	311, 1468,
	314, 1468,
	315, 1468,
	316, 1468,
	317, 1468,
	319, 1468,
	320, 1468,
	321, 1468,
	322, 1468,
	325, 1468,
	326, 1468,
	327, 1468,
	328, 1468,
	330, 1468,
	332, 1468,
	333, 1468,
	334, 1468,
	335, 1468,
	336, 1468,
	337, 1468,
	340, 1468,
	345, 1468,
	346, 1468,
	347, 1468,
	348, 1468,
	349, 1468,
	350, 1468,
	351, 1468,
	353, 1468,
	354, 1468,
	355, 1468,
	356, 1468,
	357, 1468,
	358, 1468,
	359, 1468,
	360, 1468,
	362, 1468,
	363, 1468,
	364, 1468,
	365, 1468,
	366, 1468,
	367, 1468,
	368, 1468,
	369, 1468,
	370, 1468,
	372, 1468,
	375, 1468,
	376, 1468,
	379, 1468,
	380, 1468,
	-2, 0,
	-1, 937,
	132, 1371,
	312, 1371,
	355, 1371,
	376, 1371,
	-2, 0,
	-1, 954,
	132, 1394,
	312, 1394,
	355, 1394,
	376, 1394,
	-2, 0,
	-1, 955,
	169, 611,
	236, 611,
	240, 611,
	-2, 312,
	-1, 1024,
	117, 707,
	185, 707,
	211, 707,
	-2, 669,
	-1, 1103,
	107, 673,
	117, 673,
	165, 673,
	185, 673,
	211, 673,
	217, 673,
	323, 673,
	-2, 1014,
	-1, 1113,
	374, 1215,
	-2, 1203,
	-1, 1131,
	375, 1127,
	-2, 0,
	-1, 1157,
	169, 611,
	236, 611,
	240, 611,
	-2, 606,
	-1, 1185,
	375, 1127,
	-2, 0,
	-1, 1189,
	107, 673,
	117, 673,
	165, 673,
	185, 673,
	211, 673,
	217, 673,
	323, 673,
	-2, 769,
	-1, 1329,
	169, 611,
	236, 611,
	240, 611,
	-2, 314,
	-1, 1427,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 920,
	-1, 1428,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 921,
	-1, 1429,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 922,
	-1, 1430,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 923,
	-1, 1431,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 924,
	-1, 1432,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 925,
	-1, 1433,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 926,
	-1, 1434,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 927,
	-1, 1443,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 936,
	-1, 1444,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 937,
	-1, 1445,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 938,
	-1, 1448,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	281, 0,
	350, 0,
	360, 0,
	-2, 943,
	-1, 1454,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	281, 0,
	350, 0,
	360, 0,
	-2, 945,
	-1, 1456,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	281, 0,
	350, 0,
	360, 0,
	-2, 949,
	-1, 1457,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	281, 0,
	350, 0,
	360, 0,
	-2, 950,
	-1, 1458,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	281, 0,
	350, 0,
	360, 0,
	-2, 951,
	-1, 1459,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	281, 0,
	350, 0,
	360, 0,
	-2, 952,
	-1, 1528,
	132, 1138,
	374, 1238,
	-2, 1231,
	-1, 1529,
	132, 1139,
	-2, 1411,
	-1, 1530,
	132, 1140,
	-2, 1317,
	-1, 1531,
	132, 1141,
	-2, 1278,
	-1, 1532,
	132, 1142,
	-2, 1295,
	-1, 1533,
	132, 1143,
	-2, 1316,
	-1, 1534,
	132, 1144,
	-2, 1368,
	-1, 1613,
	1, 770,
	74, 770,
	107, 770,
	117, 770,
	133, 770,
	137, 770,
	139, 770,
	156, 770,
	165, 770,
	172, 770,
	181, 770,
	185, 770,
	198, 770,
	211, 770,
	213, 770,
	217, 770,
	258, 770,
	260, 770,
	323, 770,
	331, 770,
	342, 770,
	343, 770,
	352, 770,
	373, 770,
	375, 770,
	377, 770,
	378, 770,
	379, 770,
	-2, 769,
	-1, 1756,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	281, 0,
	350, 0,
	360, 0,
	-2, 944,
	-1, 1757,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	281, 0,
	350, 0,
	360, 0,
	-2, 946,
	-1, 1762,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	281, 0,
	350, 0,
	360, 0,
	-2, 947,
	-1, 1780,
	222, 1098,
	-2, 1100,
	-1, 2010,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	281, 0,
	350, 0,
	360, 0,
	-2, 948,
	-1, 2015,
	168, 0,
	-2, 964,
	-1, 2024,
	222, 1099,
	-2, 1101,
	-1, 2066,
	13, 0,
	14, 0,
	15, 0,
	353, 0,
	354, 0,
	355, 0,
	-2, 991,
	-1, 2067,
	13, 0,
	14, 0,
	15, 0,
	353, 0,
	354, 0,
	355, 0,
	-2, 992,
	-1, 2068,
	13, 0,
	14, 0,
	15, 0,
	353, 0,
	354, 0,
	355, 0,
	-2, 993,
	-1, 2072,
	13, 0,
	14, 0,
	15, 0,
	353, 0,
	354, 0,
	355, 0,
	-2, 997,
	-1, 2073,
	13, 0,
	14, 0,
	15, 0,
	353, 0,
	354, 0,
	355, 0,
	-2, 998,
	-1, 2074,
	13, 0,
	14, 0,
	15, 0,
	353, 0,
	354, 0,
	355, 0,
	-2, 999,
	-1, 2206,
	168, 0,
	-2, 965,
	-1, 2209,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	281, 0,
	350, 0,
	360, 0,
	-2, 968,
	-1, 2210,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	281, 0,
	350, 0,
	360, 0,
	-2, 970,
	-1, 2333,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	281, 0,
	350, 0,
	360, 0,
	-2, 969,
	-1, 2334,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	184, 0,
	281, 0,
	350, 0,
	360, 0,
	-2, 971,
	-1, 2341,
	168, 0,
	-2, 1000,
	-1, 2418,
	168, 0,
	-2, 1001,
	-1, 2499,
	36, 0,
	149, 0,
	184, 0,
	281, 0,
	350, 0,
	360, 0,
	-2, 1414,
}

const sqlPrivate = 57344

const sqlLast = 43087

var sqlAct = [...]int{

	638, 2304, 2567, 2303, 2507, 2498, 2162, 2565, 2548, 742,
	2367, 2471, 2508, 769, 1229, 1687, 2509, 2497, 1679, 1992,
	2043, 71, 2423, 2314, 975, 1750, 1323, 1236, 2172, 2194,
	872, 581, 1958, 2263, 1324, 2196, 597, 1676, 2277, 1271,
	614, 180, 1960, 2129, 2347, 180, 1272, 1966, 1896, 1183,
	1658, 1663, 2243, 180, 1846, 1875, 2188, 1232, 1688, 1608,
	1166, 1662, 180, 1617, 1883, 1845, 1626, 180, 180, 1609,
	2099, 180, 1652, 628, 180, 1406, 2128, 1659, 1791, 1483,
	636, 452, 180, 635, 467, 25, 1109, 1401, 1187, 1746,
	589, 120, 1225, 958, 1197, 1027, 1195, 520, 1492, 1167,
	1484, 1734, 1354, 608, 1557, 1508, 601, 1471, 1350, 1192,
	181, 1468, 957, 449, 1141, 907, 748, 1660, 1502, 977,
	1145, 904, 918, 1681, 751, 897, 1595, 1666, 1582, 730,
	1174, 1524, 500, 180, 180, 1098, 121, 607, 1028, 171,
	1353, 180, 122, 630, 478, 586, 1157, 513, 1243, 894,
	176, 1249, 728, 120, 517, 1026, 1156, 541, 2278, 1032,
	2113, 1779, 1251, 2114, 2305, 2305, 1251, 180, 180, 180,
	180, 771, 1680, 2544, 585, 180, 180, 1220, 1251, 585,
	2543, 2542, 2524, 1485, 1220, 1220, 2276, 2519, 1184, 2518,
	2515, 1702, 694, 1702, 1220, 1976, 2495, 2008, 1043, 1044,
	1717, 580, 1584, 1653, 1083, 1084, 1085, 492, 2494, 1975,
	2466, 2461, 1717, 2457, 1710, 2328, 2449, 1220, 2420, 2398,
	2276, 1046, 1710, 2276, 1087, 2395, 25, 2393, 595, 1220,
	2102, 2276, 120, 2378, 1816, 1817, 2377, 1220, 2591, 2355,
	2276, 1043, 1044, 1220, 2352, 1045, 1216, 734, 1220, 735,
	745, 1065, 2335, 860, 2299, 2297, 1710, 578, 1702, 1702,
	2584, 2275, 2256, 577, 1046, 2276, 1220, 2208, 2187, 1702,
	2467, 1710, 1657, 1816, 1817, 2182, 1834, 1835, 1836, 1657,
	1717, 772, 590, 756, 760, 766, 732, 1831, 1045, 2205,
	1816, 1817, 2109, 2019, 1986, 1947, 2110, 1702, 1948, 1220,
	1872, 1863, 2328, 2102, 1220, 1864, 1068, 1069, 1070, 1071,
	1861, 1583, 1860, 2003, 1702, 1051, 1702, 2587, 2578, 1859,
	1615, 1653, 2079, 1702, 1043, 1044, 1831, 1073, 1074, 1075,
	1083, 1084, 1085, 1783, 2021, 1220, 1702, 1080, 1088, 1784,
	1076, 1790, 1721, 1948, 138, 1709, 1702, 1046, 1717, 1710,
	1087, 1822, 1505, 1701, 1749, 1656, 1589, 1702, 1051, 1657,
	1588, 1264, 1684, 773, 1732, 1265, 1332, 1161, 1487, 858,
	1252, 1045, 1078, 140, 1252, 939, 141, 1065, 2279, 1066,
	631, 936, 935, 934, 1062, 933, 1252, 932, 931, 930,
	1822, 929, 928, 927, 926, 925, 736, 733, 573, 572,
	571, 539, 538, 1351, 1506, 537, 536, 1822, 1816, 1817,
	139, 138, 535, 534, 180, 1832, 180, 180, 132, 180,
	533, 532, 1066, 531, 180, 133, 530, 529, 528, 527,
	180, 1837, 1068, 1069, 1070, 1071, 526, 525, 1072, 524,
	140, 1051, 1975, 180, 180, 180, 180, 180, 123, 1583,
	523, 864, 921, 1067, 1832, 1507, 1504, 508, 507, 506,
	1043, 1044, 505, 1080, 1088, 504, 440, 439, 438, 1081,
	437, 1832, 436, 586, 180, 421, 420, 139, 412, 411,
	410, 409, 1086, 1046, 39, 402, 401, 180, 164, 1833,
	588, 1521, 163, 1257, 162, 40, 1067, 1250, 1078, 161,
	160, 159, 158, 180, 40, 1066, 157, 1045, 43, 1385,
	156, 876, 155, 180, 880, 123, 154, 43, 1188, 153,
	152, 151, 150, 149, 911, 1822, 148, 147, 1833, 146,
	1077, 1509, 145, 144, 49, 143, 142, 1891, 1079, 138,
	900, 900, 1039, 1519, 921, 1833, 896, 1517, 1082, 1357,
	1056, 1054, 1055, 1047, 1048, 1049, 1050, 1052, 1053, 1515,
	970, 2571, 922, 60, 1072, 2569, 871, 2514, 140, 901,
	61, 919, 126, 62, 2566, 180, 2496, 1051, 973, 1067,
	2481, 126, 2476, 2415, 940, 2396, 1827, 1825, 1826, 1818,
	1819, 1820, 1821, 1823, 1824, 1081, 1047, 1048, 1049, 1050,
	1052, 1053, 1816, 1817, 2242, 139, 64, 2238, 2234, 1025,
	1503, 2233, 2321, 132, 2226, 64, 1828, 1829, 1830, 2225,
	133, 2224, 2220, 2219, 968, 1827, 1825, 1826, 1818, 1819,
	1820, 1821, 1823, 1824, 586, 2218, 1715, 1479, 1117, 2217,
	2211, 2193, 2093, 1683, 923, 1818, 1819, 1820, 1821, 1823,
	1824, 2088, 2087, 2086, 922, 1950, 1024, 2029, 1946, 1903,
	952, 955, 1899, 1868, 1079, 1865, 1853, 1057, 1058, 1064,
	1063, 1059, 1060, 1061, 1082, 1844, 1056, 1054, 1055, 1047,
	1048, 1049, 1050, 1052, 1053, 1815, 1812, 1811, 1809, 65,
	1796, 1023, 1795, 2235, 1780, 1613, 1186, 864, 65, 1039,
	971, 1268, 743, 1185, 1110, 1038, 1101, 869, 744, 1816,
	1817, 2556, 2555, 1816, 1817, 124, 67, 1235, 68, 1822,
	2045, 2486, 744, 2485, 124, 67, 578, 68, 180, 2484,
	180, 138, 577, 2452, 2444, 1736, 923, 2443, 473, 2434,
	138, 101, 2432, 1035, 1036, 1165, 2410, 473, 1480, 1040,
	101, 2409, 2408, 180, 180, 2364, 1043, 1044, 138, 2343,
	140, 1352, 1745, 1818, 1819, 1820, 1821, 1823, 1824, 140,
	1744, 2329, 1110, 2320, 586, 2308, 2296, 2282, 2231, 1046,
	2170, 1172, 1113, 1832, 2168, 2167, 2165, 140, 1143, 1144,
	2137, 2136, 2117, 2105, 2014, 1990, 1105, 139, 1147, 1170,
	1936, 1930, 1916, 1045, 1915, 132, 139, 1901, 1150, 1871,
	1843, 1805, 133, 1804, 132, 1047, 1048, 1049, 1050, 1052,
	1053, 133, 1801, 1776, 139, 1771, 1822, 1473, 1146, 1149,
	1822, 1600, 132, 1043, 1044, 123, 1569, 1513, 120, 133,
	1228, 1164, 1153, 1139, 123, 1138, 1342, 1341, 1137, 1351,
	1348, 1136, 1135, 1134, 1133, 1132, 1046, 1833, 921, 180,
	1160, 1182, 123, 2426, 1520, 771, 1131, 1130, 1129, 1128,
	1127, 180, 1126, 1051, 1125, 1158, 1916, 1190, 1221, 1124,
	1045, 1123, 1162, 180, 1122, 1121, 1043, 1044, 1114, 180,
	1832, 180, 1218, 180, 1102, 1234, 1101, 180, 951, 943,
	915, 2327, 1227, 1186, 2213, 1889, 2192, 2112, 2108, 1046,
	1782, 1601, 1712, 1816, 1817, 1988, 1518, 967, 1099, 1961,
	1516, 2331, 1816, 1817, 1720, 2330, 1205, 2324, 2115, 1977,
	1653, 1151, 1514, 1045, 1188, 1345, 1152, 1066, 180, 180,
	1155, 1240, 1939, 1933, 1929, 921, 1021, 180, 1505, 870,
	180, 1867, 1866, 1755, 1827, 1825, 1826, 1818, 1819, 1820,
	1821, 1823, 1824, 1577, 1833, 964, 1119, 1719, 922, 1993,
	1233, 771, 1338, 2348, 1680, 772, 2046, 1493, 1142, 1015,
	180, 1787, 2574, 2573, 1358, 180, 1971, 2124, 2479, 1706,
	180, 180, 2540, 180, 1542, 180, 2539, 180, 2290, 180,
	1506, 723, 1269, 1051, 2456, 896, 1722, 1116, 1317, 1219,
	180, 1067, 2581, 441, 2389, 2000, 180, 180, 1619, 1016,
	2388, 2386, 721, 725, 2385, 719, 2156, 2148, 716, 1346,
	2153, 2121, 2120, 1800, 1007, 1619, 584, 414, 1242, 1822,
	696, 1245, 180, 1799, 1618, 1798, 771, 1797, 1758, 1705,
	923, 1507, 1504, 1254, 1648, 922, 1256, 773, 1677, 1415,
	1259, 1644, 1825, 1826, 1818, 1819, 1820, 1821, 1823, 1824,
	1820, 1821, 1823, 1824, 744, 1641, 1455, 1359, 1266, 1159,
	857, 772, 1206, 2302, 1267, 952, 1325, 1198, 1573, 1199,
	1407, 1414, 1572, 1416, 583, 120, 2096, 965, 445, 1262,
	1383, 1329, 1203, 1832, 1326, 1339, 165, 1355, 1343, 1054,
	1055, 1047, 1048, 1049, 1050, 1052, 1053, 2160, 1373, 1198,
	1204, 1199, 418, 586, 1388, 575, 2455, 1509, 586, 1366,
	2161, 1943, 487, 1470, 2369, 1327, 1223, 923, 1396, 1363,
	966, 1382, 1470, 714, 1227, 1367, 585, 1368, 1627, 1369,
	2492, 1370, 1246, 1371, 1362, 2039, 772, 479, 1509, 426,
	180, 1989, 180, 773, 444, 180, 1387, 1001, 1200, 578,
	1377, 1379, 578, 578, 1384, 1397, 180, 1833, 1398, 1399,
	484, 1386, 1186, 2531, 1042, 771, 480, 1198, 180, 1199,
	1725, 168, 180, 1053, 1968, 180, 1405, 1490, 1603, 180,
	1200, 950, 1727, 180, 2551, 1002, 1503, 1352, 1349, 180,
	980, 1488, 1938, 586, 2271, 39, 180, 771, 481, 1493,
	427, 180, 2539, 1728, 1932, 1630, 40, 2139, 1209, 180,
	1650, 1509, 1552, 1481, 1478, 1726, 180, 1543, 773, 43,
	1207, 483, 1581, 1049, 1050, 1052, 1053, 180, 2095, 180,
	1620, 180, 582, 2272, 180, 1713, 180, 169, 180, 180,
	1535, 180, 180, 1631, 1633, 49, 921, 1154, 1200, 2437,
	180, 2146, 1602, 1824, 695, 1999, 1826, 1818, 1819, 1820,
	1821, 1823, 1824, 2001, 2463, 1592, 1606, 1381, 1616, 1638,
	1105, 1579, 1578, 1020, 60, 772, 2036, 1646, 1495, 1587,
	2558, 61, 1251, 126, 62, 1597, 1598, 1593, 2097, 2464,
	443, 1527, 1527, 1540, 717, 1477, 1190, 1560, 643, 1636,
	1475, 1564, 1565, 1567, 1278, 1642, 1623, 772, 1682, 1629,
	1682, 1649, 1173, 727, 413, 717, 726, 64, 718, 1700,
	446, 717, 497, 170, 1466, 1347, 1006, 2037, 1694, 1927,
	442, 900, 1708, 900, 482, 120, 2549, 2370, 771, 419,
	1464, 120, 476, 2267, 415, 2268, 180, 2511, 1210, 1686,
	1969, 1733, 2530, 1697, 416, 1014, 922, 773, 1703, 1695,
	1698, 1696, 180, 180, 180, 919, 180, 1707, 1704, 429,
	428, 1177, 1747, 1748, 1140, 2270, 1716, 1714, 1760, 475,
	1201, 1452, 2140, 166, 2273, 180, 1330, 1469, 1672, 773,
	485, 1768, 2550, 479, 1180, 1968, 2568, 1196, 1628, 476,
	65, 2566, 576, 1509, 1278, 1278, 1147, 1766, 1150, 486,
	1175, 1361, 1201, 2552, 1144, 1143, 484, 2445, 2339, 1178,
	1460, 1177, 480, 167, 1723, 981, 124, 67, 1461, 68,
	1462, 1214, 961, 592, 1467, 566, 1176, 566, 923, 2512,
	1041, 972, 138, 566, 1180, 120, 1372, 1213, 772, 473,
	479, 1885, 101, 594, 481, 594, 2529, 949, 1803, 403,
	1594, 594, 2305, 982, 2269, 2392, 979, 1211, 1737, 1178,
	2446, 140, 435, 484, 1096, 586, 1596, 483, 1739, 480,
	1201, 1743, 1741, 1612, 585, 1212, 593, 1763, 2559, 2200,
	1252, 2510, 430, 988, 1450, 1453, 2513, 1764, 1179, 962,
	2538, 1769, 2536, 963, 2313, 956, 1674, 1789, 139, 946,
	1030, 481, 938, 1031, 1942, 2380, 132, 2379, 567, 2362,
	567, 2429, 1011, 133, 2229, 2286, 567, 1337, 2123, 1449,
	773, 1912, 1908, 1675, 483, 1241, 1230, 1897, 2035, 2472,
	1376, 1761, 1393, 1463, 1759, 2564, 123, 1333, 1179, 586,
	1465, 1030, 2577, 961, 2173, 1543, 1543, 2315, 1775, 1476,
	2363, 2075, 1918, 1917, 1753, 180, 771, 874, 873, 1884,
	1786, 180, 180, 1886, 1591, 180, 1335, 173, 1029, 1878,
	180, 1873, 1590, 180, 961, 495, 1879, 583, 1336, 1012,
	482, 180, 489, 882, 893, 2289, 891, 180, 180, 180,
	2163, 2306, 2288, 180, 1031, 1880, 180, 1941, 1898, 2342,
	1765, 2244, 180, 180, 180, 180, 180, 1767, 1394, 1029,
	962, 2100, 180, 1512, 963, 180, 1451, 404, 568, 180,
	568, 1543, 1543, 1543, 2230, 2285, 568, 1774, 180, 1850,
	1851, 1852, 1893, 1013, 1777, 698, 485, 482, 180, 1888,
	180, 1913, 180, 1010, 1909, 180, 999, 2563, 2360, 180,
	997, 1793, 1794, 1874, 180, 2076, 180, 2228, 3, 1173,
	1892, 2077, 961, 180, 1877, 1949, 772, 1951, 472, 33,
	1881, 1882, 1902, 2159, 1887, 586, 180, 921, 1913, 2361,
	1904, 471, 32, 995, 1847, 405, 470, 29, 921, 180,
	431, 2013, 1928, 485, 989, 591, 1944, 569, 697, 569,
	1935, 1842, 2287, 1926, 1973, 569, 469, 77, 1560, 1560,
	1560, 1985, 993, 1855, 468, 76, 991, 623, 1177, 640,
	1810, 1770, 1994, 1718, 180, 1952, 1655, 1987, 1955, 962,
	570, 432, 570, 963, 1647, 862, 863, 1640, 570, 1953,
	1019, 1180, 859, 494, 1018, 1964, 1970, 944, 773, 892,
	488, 890, 465, 21, 1005, 1978, 1848, 1175, 177, 1869,
	1374, 433, 407, 434, 1365, 1120, 1178, 1511, 2506, 1217,
	422, 2469, 2260, 1009, 180, 2144, 998, 1984, 2142, 447,
	996, 2016, 2122, 1176, 490, 177, 1998, 922, 498, 2026,
	1995, 503, 1996, 1997, 2031, 2032, 2033, 985, 922, 522,
	754, 1957, 2004, 466, 22, 2002, 1678, 2006, 1671, 889,
	33, 464, 27, 994, 463, 19, 1261, 1979, 1980, 1260,
	1981, 1982, 1959, 32, 1407, 2050, 461, 18, 29, 2022,
	1258, 1255, 1253, 1407, 2055, 1215, 1543, 1543, 1208, 1202,
	2403, 2025, 992, 2540, 2326, 1179, 990, 2020, 77, 2052,
	731, 731, 2325, 2049, 2047, 1356, 76, 180, 407, 462,
	17, 2189, 2054, 180, 456, 14, 2085, 457, 15, 923,
	2081, 2405, 180, 180, 2038, 2040, 2041, 455, 13, 1635,
	923, 1004, 2082, 2181, 407, 407, 764, 407, 460, 11,
	454, 9, 177, 861, 21, 1543, 1543, 1543, 1543, 1543,
	1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
	1543, 1543, 1543, 1543, 2080, 1543, 1033, 2104, 2101, 180,
	2103, 180, 2111, 2098, 474, 1651, 1619, 984, 180, 715,
	2158, 921, 120, 459, 7, 1634, 458, 6, 2169, 888,
	2149, 1751, 2119, 1619, 2154, 22, 180, 180, 2166, 2118,
	2157, 2126, 1632, 27, 1311, 2175, 19, 1643, 2116, 1639,
	2135, 2147, 1870, 2183, 180, 2439, 2107, 2134, 18, 2279,
	2133, 983, 2174, 2150, 180, 1278, 2417, 2150, 2391, 771,
	2164, 2177, 2245, 2150, 2186, 2178, 1037, 453, 5, 1645,
	2176, 1637, 2203, 1034, 496, 1575, 1576, 739, 2468, 2179,
	2311, 17, 2185, 2202, 2184, 1685, 14, 1752, 2089, 15,
	1043, 1044, 1278, 2190, 1673, 1670, 180, 740, 1580, 13,
	1328, 1270, 1043, 1044, 2207, 2547, 2562, 1816, 1817, 2354,
	11, 2215, 9, 1046, 1043, 1044, 1730, 1729, 2250, 2191,
	2094, 922, 2042, 1730, 2143, 1991, 2145, 1894, 1862, 1731,
	1574, 1571, 1570, 1501, 1311, 1311, 1877, 1045, 1107, 720,
	722, 1278, 2034, 1954, 1117, 1115, 771, 180, 180, 1045,
	1017, 1008, 1003, 180, 1000, 7, 180, 2227, 6, 2239,
	986, 948, 1331, 574, 2152, 2368, 771, 180, 180, 772,
	2155, 180, 180, 180, 741, 477, 1364, 987, 1890, 2252,
	1599, 2462, 2221, 1802, 2422, 2338, 1510, 1118, 180, 53,
	2131, 617, 2261, 180, 2125, 180, 1665, 180, 180, 180,
	1664, 774, 1278, 923, 180, 1340, 2247, 180, 2249, 5,
	921, 522, 2251, 878, 522, 639, 883, 1526, 180, 180,
	2280, 886, 1408, 713, 2259, 921, 2254, 407, 641, 1263,
	1275, 642, 1276, 2248, 1148, 629, 2301, 1273, 1278, 1278,
	522, 522, 407, 908, 861, 2255, 916, 1278, 1278, 2317,
	1689, 773, 1344, 1474, 1491, 1785, 772, 1111, 609, 621,
	2135, 620, 2246, 2283, 2318, 2284, 2316, 2134, 1310, 2310,
	2133, 522, 1489, 942, 1895, 1967, 772, 2319, 1392, 2332,
	1278, 2323, 1742, 1389, 522, 1963, 2141, 417, 1813, 2135,
	914, 1549, 2307, 1541, 2135, 2309, 2134, 2312, 2337, 2133,
	947, 2134, 1537, 1022, 2133, 1171, 1097, 1690, 969, 1974,
	522, 180, 1277, 180, 1711, 771, 180, 2322, 1163, 1400,
	922, 2344, 738, 737, 180, 2575, 1334, 1724, 2358, 1090,
	771, 1089, 724, 2431, 960, 922, 959, 1231, 773, 1911,
	2557, 2438, 2351, 2373, 2138, 2478, 137, 134, 136, 135,
	1043, 1044, 1940, 2372, 80, 599, 2374, 31, 773, 1227,
	30, 100, 2356, 99, 180, 98, 97, 921, 1310, 1310,
	2371, 180, 407, 1046, 96, 95, 94, 93, 92, 180,
	180, 921, 921, 91, 2406, 1543, 90, 2382, 2353, 89,
	88, 2401, 87, 2390, 86, 85, 84, 1045, 83, 180,
	2135, 2402, 923, 82, 180, 518, 515, 2134, 2400, 2412,
	2133, 180, 1277, 1277, 2411, 2413, 2414, 923, 79, 78,
	2416, 28, 24, 104, 2433, 772, 2150, 23, 75, 1543,
	74, 26, 2135, 2419, 16, 2394, 180, 180, 2428, 2134,
	772, 2427, 2133, 180, 10, 1278, 2397, 20, 2404, 58,
	59, 921, 57, 2450, 2448, 56, 180, 55, 2436, 2451,
	921, 921, 12, 2425, 2435, 51, 50, 1051, 48, 2442,
	47, 46, 45, 8, 103, 2453, 42, 922, 41, 2350,
	586, 2454, 102, 180, 116, 180, 2459, 2460, 180, 113,
	771, 922, 922, 2383, 2384, 1172, 115, 112, 114, 1543,
	118, 117, 110, 2480, 108, 2487, 109, 773, 2489, 111,
	2488, 2475, 107, 1772, 1773, 106, 2376, 119, 180, 38,
	37, 36, 773, 35, 34, 503, 2493, 731, 2491, 2,
	2387, 1066, 2503, 1, 0, 180, 180, 180, 0, 2505,
	2504, 0, 2516, 180, 0, 2523, 0, 0, 0, 2271,
	407, 407, 2264, 0, 0, 2528, 0, 180, 2525, 923,
	0, 922, 2474, 2262, 2526, 2527, 0, 0, 2266, 0,
	922, 922, 2537, 923, 923, 2535, 2135, 0, 2541, 2490,
	0, 0, 0, 2134, 0, 2545, 2133, 0, 2272, 1839,
	1840, 1841, 0, 0, 2546, 0, 2554, 0, 0, 2553,
	772, 0, 2560, 2561, 0, 1067, 0, 0, 0, 0,
	0, 2265, 2520, 2521, 2522, 0, 0, 771, 0, 771,
	0, 0, 0, 0, 0, 0, 0, 2579, 0, 2580,
	2570, 0, 2572, 2576, 865, 867, 2582, 2588, 2583, 2589,
	2590, 2585, 2586, 923, 2592, 0, 0, 0, 0, 0,
	0, 2465, 923, 923, 0, 0, 177, 0, 0, 1313,
	0, 0, 1278, 0, 0, 0, 0, 0, 407, 0,
	0, 0, 0, 0, 0, 0, 0, 2482, 2483, 0,
	1239, 0, 773, 0, 0, 0, 407, 0, 407, 0,
	407, 0, 0, 0, 1247, 0, 0, 0, 2267, 0,
	2268, 0, 1056, 1054, 1055, 1047, 1048, 1049, 1050, 1052,
	1053, 0, 0, 0, 0, 1311, 0, 0, 941, 0,
	0, 1278, 1312, 0, 945, 0, 0, 772, 0, 772,
	2270, 0, 0, 0, 0, 522, 177, 0, 0, 2273,
	0, 0, 0, 1274, 177, 0, 450, 522, 0, 0,
	0, 599, 1311, 0, 0, 0, 0, 0, 0, 1313,
	1313, 0, 0, 0, 0, 0, 0, 39, 0, 0,
	0, 0, 0, 0, 1278, 0, 0, 522, 40, 0,
	0, 0, 522, 613, 0, 0, 0, 177, 522, 0,
	522, 43, 522, 0, 522, 0, 522, 0, 0, 0,
	0, 1311, 1043, 1044, 2011, 2012, 0, 1375, 0, 773,
	0, 773, 0, 522, 522, 0, 0, 49, 0, 2269,
	0, 0, 1312, 1312, 0, 1046, 0, 0, 406, 0,
	0, 0, 1091, 1092, 1093, 1094, 1095, 0, 0, 522,
	0, 0, 1104, 1274, 1274, 0, 60, 0, 0, 1045,
	0, 0, 1112, 61, 0, 126, 62, 0, 0, 0,
	0, 0, 1311, 2056, 2057, 2058, 2059, 2060, 2061, 2062,
	2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,
	2073, 2074, 0, 2078, 0, 0, 0, 0, 0, 64,
	0, 1816, 1817, 0, 1834, 1835, 1836, 0, 1311, 1311,
	0, 0, 0, 0, 0, 0, 0, 1311, 1311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1051,
	0, 0, 0, 0, 749, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 0, 1831, 0, 0, 0, 0, 1310,
	758, 762, 0, 768, 0, 0, 0, 503, 0, 731,
	0, 0, 861, 0, 0, 0, 0, 1168, 1168, 0,
	0, 0, 65, 407, 599, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 1611, 1310, 0, 0, 407,
	0, 0, 407, 1277, 0, 0, 1624, 0, 124, 67,
	407, 68, 0, 0, 0, 0, 407, 0, 1822, 0,
	0, 0, 0, 407, 138, 0, 0, 0, 1654, 0,
	0, 473, 0, 0, 101, 0, 1661, 0, 618, 72,
	1277, 1838, 0, 861, 0, 1310, 0, 0, 0, 0,
	0, 0, 0, 140, 407, 0, 1693, 0, 522, 1837,
	0, 522, 0, 522, 0, 407, 407, 1067, 1699, 861,
	0, 0, 0, 0, 0, 0, 0, 1624, 0, 0,
	0, 0, 1832, 0, 0, 0, 0, 0, 0, 1277,
	139, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 72, 0, 0, 0, 133, 1310, 0, 0, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1310, 1310, 0, 0, 0, 0, 0, 0,
	1277, 1310, 1310, 0, 0, 0, 1833, 0, 0, 579,
	0, 0, 587, 0, 0, 0, 1055, 1047, 1048, 1049,
	1050, 1052, 1053, 1735, 0, 0, 0, 0, 0, 750,
	72, 0, 0, 0, 1310, 0, 1277, 1277, 0, 407,
	407, 407, 0, 407, 0, 1277, 1277, 0, 0, 0,
	0, 0, 0, 0, 0, 599, 599, 0, 0, 0,
	0, 0, 407, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 762, 0, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 0, 0, 1828, 1829, 1830, 0, 0, 0,
	0, 0, 0, 1827, 1825, 1826, 1818, 1819, 1820, 1821,
	1823, 1824, 0, 0, 0, 0, 0, 0, 0, 1390,
	0, 1395, 0, 0, 0, 0, 0, 1402, 0, 0,
	0, 0, 0, 2341, 0, 0, 0, 1417, 1418, 1419,
	1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
	1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 0,
	1454, 0, 1456, 1457, 1458, 1459, 0, 2365, 0, 0,
	0, 0, 1311, 0, 0, 0, 0, 0, 0, 1482,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 1310,
	1313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1522, 1523, 0, 762, 1539,
	0, 1551, 1553, 1558, 1561, 1562, 1563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	0, 1311, 407, 1277, 0, 0, 0, 2418, 407, 407,
	0, 0, 407, 0, 0, 0, 0, 1611, 0, 0,
	1611, 0, 0, 1312, 0, 0, 0, 0, 1900, 0,
	0, 0, 0, 0, 407, 1906, 1907, 0, 0, 0,
	1624, 0, 0, 1914, 1274, 0, 1313, 0, 0, 1919,
	1920, 1922, 1924, 1925, 1311, 0, 0, 0, 0, 407,
	1312, 0, 1934, 0, 0, 0, 1937, 0, 0, 0,
	0, 0, 0, 0, 0, 407, 0, 0, 0, 0,
	0, 1274, 0, 0, 0, 1239, 0, 1239, 0, 522,
	0, 0, 407, 0, 0, 0, 1962, 0, 0, 0,
	587, 407, 0, 1972, 0, 0, 1181, 1313, 0, 1312,
	407, 0, 1816, 1817, 0, 1834, 1835, 1836, 0, 0,
	0, 0, 39, 1735, 0, 0, 0, 0, 2204, 0,
	1274, 0, 0, 40, 0, 0, 1735, 0, 0, 0,
	0, 0, 0, 1313, 1313, 0, 43, 0, 0, 0,
	0, 0, 1313, 1313, 0, 0, 749, 1193, 0, 0,
	0, 0, 0, 0, 0, 1831, 0, 0, 39, 0,
	1312, 407, 49, 0, 0, 0, 1310, 0, 0, 40,
	0, 0, 0, 0, 0, 1313, 0, 0, 0, 0,
	0, 1274, 43, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 0, 0, 1312, 1312, 61, 0,
	126, 62, 0, 0, 0, 1312, 1312, 0, 49, 0,
	1277, 2044, 0, 0, 0, 0, 0, 1274, 1274, 1822,
	0, 0, 0, 0, 0, 1310, 1274, 1274, 579, 0,
	0, 0, 0, 0, 64, 0, 0, 60, 1312, 0,
	0, 0, 0, 0, 61, 0, 126, 62, 0, 1100,
	0, 1103, 0, 0, 0, 0, 0, 0, 1108, 1274,
	1837, 0, 0, 0, 1226, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 0, 0, 1310, 0,
	64, 0, 762, 1832, 1244, 0, 1244, 0, 0, 1756,
	1757, 0, 0, 0, 407, 1762, 0, 0, 0, 0,
	1611, 0, 0, 0, 0, 0, 0, 0, 0, 861,
	1611, 0, 0, 0, 0, 0, 0, 65, 0, 0,
	0, 0, 1277, 0, 2130, 0, 0, 1781, 0, 0,
	0, 0, 0, 1788, 0, 0, 1792, 2151, 0, 0,
	1313, 2151, 0, 124, 67, 0, 68, 2151, 0, 0,
	0, 0, 0, 1806, 0, 0, 1624, 1833, 1239, 138,
	0, 0, 0, 65, 0, 2171, 473, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 407, 407, 0, 72, 1104, 140, 124,
	67, 1189, 68, 0, 1558, 1558, 1558, 0, 0, 0,
	0, 2197, 0, 1312, 0, 138, 0, 0, 0, 0,
	0, 2199, 473, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 1168, 1274, 139, 0, 0, 599, 0,
	0, 0, 0, 132, 140, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 0, 1828, 1829, 1830, 0, 0,
	0, 0, 0, 2222, 1827, 1825, 1826, 1818, 1819, 1820,
	1821, 1823, 1824, 123, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2240, 407, 0, 0, 0, 123,
	407, 0, 0, 861, 0, 0, 0, 0, 0, 0,
	1965, 0, 0, 0, 1611, 861, 0, 0, 2257, 2258,
	1624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1983, 0, 2130, 861, 0, 0, 0, 0,
	2291, 0, 2292, 0, 407, 2294, 2295, 1313, 0, 599,
	599, 407, 0, 0, 2300, 0, 0, 0, 0, 749,
	0, 0, 599, 2130, 0, 861, 1661, 0, 2130, 0,
	0, 0, 0, 0, 2005, 749, 0, 0, 1614, 1402,
	0, 0, 0, 0, 0, 2009, 762, 0, 2010, 0,
	0, 0, 762, 0, 0, 0, 0, 0, 0, 768,
	2015, 0, 0, 0, 0, 0, 1313, 0, 0, 2023,
	1312, 0, 0, 0, 0, 0, 0, 2027, 0, 0,
	1983, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1691, 1274, 0, 72, 0, 0, 0, 0, 0, 0,
	2051, 768, 768, 0, 2053, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1624, 1313,
	2357, 579, 0, 2359, 579, 579, 0, 0, 0, 1312,
	0, 407, 0, 0, 2130, 0, 0, 2083, 2084, 0,
	0, 0, 0, 0, 0, 0, 2090, 2091, 2092, 0,
	1274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2151, 0, 0, 0, 0, 0, 2130, 0, 0, 0,
	0, 407, 0, 0, 0, 2106, 0, 1472, 861, 0,
	0, 0, 1312, 0, 0, 0, 2197, 2197, 0, 0,
	587, 0, 0, 0, 0, 1103, 0, 0, 0, 0,
	0, 0, 0, 1274, 0, 2127, 2424, 0, 0, 0,
	0, 1611, 1816, 1817, 0, 1834, 1835, 1836, 1239, 0,
	0, 0, 0, 0, 0, 1738, 768, 1740, 2018, 762,
	0, 0, 1816, 1817, 0, 1834, 1835, 1836, 0, 0,
	0, 0, 0, 2440, 2441, 0, 0, 0, 1754, 0,
	407, 0, 0, 0, 0, 0, 0, 0, 1168, 0,
	0, 0, 0, 2458, 750, 1831, 0, 599, 1043, 1044,
	0, 1073, 1074, 1075, 1083, 1084, 1085, 0, 0, 0,
	1189, 0, 0, 0, 1076, 1831, 0, 0, 0, 0,
	2473, 1046, 861, 72, 1087, 407, 0, 0, 0, 0,
	0, 72, 0, 2206, 0, 0, 0, 2209, 2210, 0,
	2130, 2212, 0, 0, 0, 1045, 0, 0, 2214, 0,
	2216, 1065, 0, 0, 0, 2424, 0, 0, 1062, 1822,
	0, 0, 72, 0, 72, 0, 2223, 0, 0, 0,
	0, 0, 861, 861, 861, 0, 0, 0, 0, 1822,
	407, 0, 0, 72, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 2534, 0, 0, 0, 0, 2232,
	1837, 0, 0, 0, 0, 0, 1068, 1069, 1070, 1071,
	0, 0, 0, 0, 0, 1051, 0, 0, 0, 0,
	1837, 0, 0, 1832, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 1088, 0,
	0, 0, 0, 1832, 0, 0, 0, 0, 0, 0,
	0, 0, 2281, 0, 0, 0, 1086, 0, 749, 0,
	0, 0, 0, 0, 749, 749, 0, 0, 749, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 1066,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1905, 0, 0, 72, 0, 0, 0, 1833, 0, 0,
	0, 0, 0, 0, 1077, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1931, 0, 1833, 0, 0,
	0, 0, 0, 0, 2333, 2334, 0, 0, 0, 0,
	0, 1945, 0, 0, 0, 0, 0, 0, 1072, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1956, 0,
	0, 0, 0, 1067, 0, 2346, 0, 1226, 0, 0,
	0, 0, 0, 0, 2349, 0, 1226, 0, 0, 1081,
	0, 0, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1828, 1829, 1830, 0, 0,
	0, 0, 1103, 0, 1827, 1825, 1826, 1818, 1819, 1820,
	1821, 1823, 1824, 0, 0, 1828, 1829, 1830, 2381, 0,
	0, 0, 0, 0, 1827, 1825, 1826, 1818, 1819, 1820,
	1821, 1823, 1824, 0, 0, 0, 0, 2007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 0,
	0, 1057, 1058, 1064, 1063, 1059, 1060, 1061, 1082, 0,
	1056, 1054, 1055, 1047, 1048, 1049, 1050, 1052, 1053, 0,
	0, 0, 0, 0, 0, 0, 1103, 1858, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1816, 1817,
	0, 1834, 1835, 1836, 2430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2017, 0, 0, 0, 0, 0,
	0, 0, 0, 750, 0, 0, 0, 0, 0, 750,
	750, 0, 0, 750, 1043, 1044, 0, 1073, 1074, 1075,
	1083, 1084, 1085, 0, 0, 0, 0, 0, 599, 0,
	1076, 1831, 0, 0, 1043, 1044, 0, 1046, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 1046, 0, 0,
	749, 1045, 0, 0, 72, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 1062, 0, 0, 0, 0, 0,
	0, 1045, 0, 2502, 2502, 0, 0, 1065, 0, 72,
	0, 0, 72, 0, 0, 1822, 0, 0, 0, 2517,
	0, 0, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2502,
	0, 0, 1068, 1069, 1070, 1071, 0, 0, 0, 0,
	0, 1051, 0, 0, 0, 0, 1837, 0, 0, 0,
	0, 0, 1068, 1069, 1070, 1071, 0, 0, 0, 1691,
	749, 1051, 0, 1080, 1088, 0, 0, 0, 0, 1832,
	0, 0, 0, 0, 0, 0, 0, 2502, 0, 0,
	1043, 1044, 1086, 1073, 1074, 1075, 1083, 1084, 1085, 0,
	0, 0, 0, 0, 0, 0, 1076, 0, 1078, 0,
	0, 0, 0, 1046, 0, 1066, 1087, 1816, 1817, 0,
	1834, 1835, 1836, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1066, 0, 1045, 0, 0,
	1077, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	1062, 0, 0, 1833, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1831, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 2241, 0, 0, 1072, 0, 749, 0, 1068, 1069,
	1070, 1071, 0, 0, 0, 1081, 0, 1051, 0, 1067,
	72, 0, 1043, 1044, 0, 1073, 1074, 1075, 1083, 1084,
	1085, 0, 0, 0, 0, 750, 0, 0, 1076, 1080,
	1088, 0, 0, 0, 1822, 1046, 0, 0, 1087, 0,
	2293, 1828, 1829, 1830, 0, 0, 0, 2298, 1086, 0,
	1827, 1825, 1826, 1818, 1819, 1820, 1821, 1823, 1824, 1045,
	0, 0, 0, 0, 1078, 1065, 0, 0, 0, 0,
	0, 1066, 1062, 0, 1079, 0, 0, 1057, 1058, 1064,
	1063, 1059, 1060, 1061, 1082, 0, 1056, 1054, 1055, 1047,
	1048, 1049, 1050, 1052, 1053, 0, 1077, 0, 1832, 0,
	0, 0, 0, 1857, 0, 0, 1056, 1054, 1055, 1047,
	1048, 1049, 1050, 1052, 1053, 750, 0, 0, 0, 0,
	1068, 1069, 1070, 1071, 0, 0, 0, 0, 0, 1051,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 1080, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 2366, 0, 0,
	1086, 0, 1833, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1077, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 0, 0, 1057, 1058, 1064, 1063, 1059, 1060, 1061,
	1082, 750, 1056, 1054, 1055, 1047, 1048, 1049, 1050, 1052,
	1053, 0, 1072, 0, 0, 0, 0, 0, 0, 1856,
	1828, 1829, 1830, 0, 0, 0, 0, 1067, 0, 1827,
	1825, 1826, 1818, 1819, 1820, 1821, 1823, 1824, 0, 0,
	0, 0, 0, 1081, 0, 0, 2447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 0, 0, 1057, 1058, 1064, 1063, 1059,
	1060, 1061, 1082, 0, 1056, 1054, 1055, 1047, 1048, 1049,
	1050, 1052, 1053, 0, 0, 0, 0, 0, 0, 0,
	0, 1808, 0, 0, 0, 0, 1691, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2407, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 770, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 776,
	184, 777, 778, 779, 780, 344, 781, 782, 783, 784,
	185, 186, 187, 345, 346, 347, 348, 188, 349, 350,
	785, 189, 351, 352, 190, 191, 786, 787, 353, 354,
	355, 788, 192, 356, 789, 775, 790, 193, 194, 195,
	0, 197, 198, 199, 196, 791, 200, 1103, 201, 202,
	792, 699, 203, 204, 205, 793, 794, 796, 795, 797,
	798, 799, 206, 207, 408, 208, 357, 209, 358, 359,
	800, 210, 801, 211, 802, 212, 803, 804, 213, 214,
	805, 215, 806, 0, 807, 360, 216, 218, 217, 219,
	361, 362, 808, 700, 809, 0, 0, 0, 0, 220,
	221, 363, 364, 365, 0, 222, 810, 223, 811, 812,
	701, 813, 224, 366, 814, 367, 815, 0, 225, 226,
	0, 0, 227, 228, 368, 369, 703, 816, 370, 232,
	817, 229, 818, 702, 230, 371, 231, 372, 373, 374,
	375, 376, 819, 377, 820, 704, 233, 234, 235, 705,
	236, 237, 238, 821, 240, 239, 822, 378, 706, 241,
	242, 707, 823, 243, 244, 824, 825, 245, 0, 246,
	247, 248, 250, 379, 249, 708, 251, 252, 254, 253,
	826, 827, 828, 380, 255, 381, 256, 257, 829, 258,
	830, 831, 259, 832, 833, 260, 382, 709, 261, 710,
	383, 262, 263, 264, 265, 266, 834, 267, 384, 268,
	385, 269, 835, 270, 271, 272, 273, 274, 386, 275,
	276, 836, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 837, 289, 711, 290, 291,
	387, 292, 0, 296, 297, 298, 299, 838, 301, 388,
	300, 302, 303, 839, 304, 293, 294, 305, 712, 306,
	389, 390, 307, 840, 314, 308, 309, 295, 310, 313,
	391, 311, 312, 392, 841, 315, 842, 316, 317, 318,
	319, 320, 321, 322, 323, 843, 393, 394, 395, 844,
	845, 324, 325, 396, 397, 846, 326, 327, 328, 329,
	847, 848, 330, 331, 332, 333, 849, 334, 850, 398,
	335, 336, 337, 399, 400, 851, 852, 338, 853, 854,
	855, 856, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 770, 0, 0, 0, 0, 0, 1604,
	0, 0, 0, 0, 0, 0, 0, 0, 1605, 182,
	183, 776, 184, 777, 778, 779, 780, 344, 781, 782,
	783, 784, 185, 186, 187, 345, 346, 347, 348, 188,
	349, 350, 785, 189, 351, 352, 190, 191, 786, 787,
	353, 354, 355, 788, 192, 356, 789, 775, 790, 193,
	194, 195, 0, 197, 198, 199, 196, 791, 200, 0,
	201, 202, 792, 699, 203, 204, 205, 793, 794, 796,
	795, 797, 798, 799, 206, 207, 408, 208, 357, 209,
	358, 359, 800, 210, 801, 211, 802, 212, 803, 804,
	213, 214, 805, 215, 806, 0, 807, 360, 216, 218,
	217, 219, 361, 362, 808, 700, 809, 0, 0, 0,
	0, 220, 221, 363, 364, 365, 0, 222, 810, 223,
	811, 812, 701, 813, 224, 366, 814, 367, 815, 0,
	225, 226, 0, 0, 227, 228, 368, 369, 703, 816,
	370, 232, 817, 229, 818, 702, 230, 371, 231, 372,
	373, 374, 375, 376, 819, 377, 820, 704, 233, 234,
	235, 705, 236, 237, 238, 821, 240, 239, 822, 378,
	706, 241, 242, 707, 823, 243, 244, 824, 825, 245,
	0, 246, 247, 248, 250, 379, 249, 708, 251, 252,
	254, 253, 826, 827, 828, 380, 255, 381, 256, 257,
	829, 258, 830, 831, 259, 832, 833, 260, 382, 709,
	261, 710, 383, 262, 263, 264, 265, 266, 834, 267,
	384, 268, 385, 269, 835, 270, 271, 272, 273, 274,
	386, 275, 276, 836, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 837, 289, 711,
	290, 291, 387, 292, 0, 296, 297, 298, 299, 838,
	301, 388, 300, 302, 303, 839, 304, 293, 294, 305,
	712, 306, 389, 390, 307, 840, 314, 308, 309, 295,
	310, 313, 391, 311, 312, 392, 841, 315, 842, 316,
	317, 318, 319, 320, 321, 322, 323, 843, 393, 394,
	395, 844, 845, 324, 325, 396, 397, 846, 326, 327,
	328, 329, 847, 848, 330, 331, 332, 333, 849, 334,
	850, 398, 335, 336, 337, 399, 400, 851, 852, 338,
	853, 854, 855, 856, 339, 340, 341, 342, 343, 0,
	0, 0, 0, 0, 0, 0, 770, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2253, 182, 183, 776, 184, 777, 778, 779, 780,
	344, 781, 782, 783, 784, 185, 186, 187, 345, 346,
	347, 348, 188, 349, 350, 785, 189, 351, 352, 190,
	191, 786, 787, 353, 354, 355, 788, 192, 356, 789,
	775, 790, 193, 194, 195, 0, 197, 198, 199, 196,
	791, 200, 0, 201, 202, 792, 699, 203, 204, 205,
	793, 794, 796, 795, 797, 798, 799, 206, 207, 408,
	208, 357, 209, 358, 359, 800, 210, 801, 211, 802,
	212, 803, 804, 213, 214, 805, 215, 806, 0, 807,
	360, 216, 218, 217, 219, 361, 362, 808, 700, 809,
	0, 0, 0, 0, 220, 221, 363, 364, 365, 0,
	222, 810, 223, 811, 812, 701, 813, 224, 366, 814,
	367, 815, 0, 225, 226, 0, 0, 227, 228, 368,
	369, 703, 816, 370, 232, 817, 229, 818, 702, 230,
	371, 231, 372, 373, 374, 375, 376, 819, 377, 820,
	704, 233, 234, 235, 705, 236, 237, 238, 821, 240,
	239, 822, 378, 706, 241, 242, 707, 823, 243, 244,
	824, 825, 245, 0, 246, 247, 248, 250, 379, 249,
	708, 251, 252, 254, 253, 826, 827, 828, 380, 255,
	381, 256, 257, 829, 258, 830, 831, 259, 832, 833,
	260, 382, 709, 261, 710, 383, 262, 263, 264, 265,
	266, 834, 267, 384, 268, 385, 269, 835, 270, 271,
	272, 273, 274, 386, 275, 276, 836, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	837, 289, 711, 290, 291, 387, 292, 0, 296, 297,
	298, 299, 838, 301, 388, 300, 302, 303, 839, 304,
	293, 294, 305, 712, 306, 389, 390, 307, 840, 314,
	308, 309, 295, 310, 313, 391, 311, 312, 392, 841,
	315, 842, 316, 317, 318, 319, 320, 321, 322, 323,
	843, 393, 394, 395, 844, 845, 324, 325, 396, 397,
	846, 326, 327, 328, 329, 847, 848, 330, 331, 332,
	333, 849, 334, 850, 398, 335, 336, 337, 399, 400,
	851, 852, 338, 853, 854, 855, 856, 339, 340, 341,
	342, 343, 0, 0, 770, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1222,
	182, 183, 776, 184, 777, 778, 779, 780, 344, 781,
	782, 783, 784, 185, 186, 187, 345, 346, 347, 348,
	188, 349, 350, 785, 189, 351, 352, 190, 191, 786,
	787, 353, 354, 355, 788, 192, 356, 789, 775, 790,
	193, 194, 195, 0, 197, 198, 199, 196, 791, 200,
	0, 201, 202, 792, 699, 203, 204, 205, 793, 794,
	796, 795, 797, 798, 799, 206, 207, 408, 208, 357,
	209, 358, 359, 800, 210, 801, 211, 802, 212, 803,
	804, 213, 214, 805, 215, 806, 0, 807, 360, 216,
	218, 217, 219, 361, 362, 808, 700, 809, 0, 0,
	0, 0, 220, 221, 363, 364, 365, 0, 222, 810,
	223, 811, 812, 701, 813, 224, 366, 814, 367, 815,
	0, 225, 226, 0, 0, 227, 228, 368, 369, 703,
	816, 370, 232, 817, 229, 818, 702, 230, 371, 231,
	372, 373, 374, 375, 376, 819, 377, 820, 704, 233,
	234, 235, 705, 236, 237, 238, 821, 240, 239, 822,
	378, 706, 241, 242, 707, 823, 243, 244, 824, 825,
	245, 0, 246, 247, 248, 250, 379, 249, 708, 251,
	252, 254, 253, 826, 827, 828, 380, 255, 381, 256,
	257, 829, 258, 830, 831, 259, 832, 833, 260, 382,
	709, 261, 710, 383, 262, 263, 264, 265, 266, 834,
	267, 384, 268, 385, 269, 835, 270, 271, 272, 273,
	274, 386, 275, 276, 836, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 837, 289,
	711, 290, 291, 387, 292, 0, 296, 297, 298, 299,
	838, 301, 388, 300, 302, 303, 839, 304, 293, 294,
	305, 712, 306, 389, 390, 307, 840, 314, 308, 309,
	295, 310, 313, 391, 311, 312, 392, 841, 315, 842,
	316, 317, 318, 319, 320, 321, 322, 323, 843, 393,
	394, 395, 844, 845, 324, 325, 396, 397, 846, 326,
	327, 328, 329, 847, 848, 330, 331, 332, 333, 849,
	334, 850, 398, 335, 336, 337, 399, 400, 851, 852,
	338, 853, 854, 855, 856, 339, 340, 341, 342, 343,
	1500, 0, 637, 626, 627, 624, 625, 616, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	1497, 184, 0, 0, 0, 0, 654, 619, 0, 0,
	0, 185, 186, 187, 345, 669, 347, 670, 188, 671,
	672, 0, 189, 351, 352, 190, 191, 622, 653, 673,
	674, 355, 0, 192, 665, 0, 645, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 699, 203, 204, 205, 0, 646, 647, 649,
	0, 648, 650, 206, 207, 408, 208, 675, 209, 676,
	677, 0, 210, 0, 211, 0, 212, 1498, 0, 668,
	214, 0, 215, 0, 0, 0, 610, 216, 218, 217,
	219, 655, 656, 633, 700, 0, 0, 0, 0, 0,
	220, 221, 678, 679, 680, 0, 222, 0, 223, 0,
	0, 701, 0, 224, 666, 0, 367, 0, 0, 225,
	226, 0, 0, 227, 228, 662, 664, 703, 0, 370,
	232, 0, 229, 0, 702, 230, 681, 231, 682, 683,
	684, 685, 686, 0, 644, 0, 704, 233, 234, 235,
	705, 236, 237, 238, 0, 240, 239, 0, 667, 706,
	241, 242, 707, 0, 243, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 708, 251, 252, 254,
	253, 605, 0, 634, 663, 255, 687, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 709, 261,
	710, 657, 262, 263, 264, 265, 266, 0, 267, 658,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 688,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 711, 290,
	291, 611, 292, 0, 296, 297, 298, 299, 0, 301,
	388, 300, 302, 303, 651, 304, 293, 294, 305, 712,
	306, 689, 390, 307, 0, 314, 308, 309, 295, 310,
	313, 690, 311, 312, 659, 0, 315, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 691, 692,
	0, 0, 324, 325, 660, 661, 632, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 652, 334, 0,
	398, 335, 336, 337, 399, 693, 1496, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 606, 0,
	637, 626, 627, 624, 625, 616, 0, 0, 604, 0,
	0, 0, 0, 602, 603, 1499, 182, 183, 0, 184,
	0, 0, 612, 1494, 654, 619, 0, 0, 615, 185,
	186, 187, 345, 669, 347, 670, 188, 671, 672, 0,
	189, 351, 352, 190, 191, 622, 653, 673, 674, 355,
	0, 192, 665, 0, 645, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	699, 203, 204, 205, 0, 646, 647, 649, 0, 648,
	650, 206, 207, 408, 208, 675, 209, 676, 677, 600,
	210, 0, 211, 0, 212, 0, 0, 668, 214, 0,
	215, 0, 0, 0, 610, 216, 218, 217, 219, 655,
	656, 633, 700, 0, 0, 0, 0, 0, 220, 221,
	678, 679, 680, 0, 222, 0, 223, 0, 0, 701,
	0, 224, 666, 0, 367, 0, 0, 225, 226, 0,
	0, 227, 228, 662, 664, 703, 0, 370, 232, 0,
	229, 0, 702, 230, 681, 231, 682, 683, 684, 685,
	686, 0, 644, 0, 704, 233, 234, 235, 705, 236,
	237, 238, 0, 240, 239, 0, 667, 706, 241, 242,
	707, 0, 243, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 379, 249, 708, 251, 252, 254, 253, 605,
	0, 634, 663, 255, 687, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 382, 709, 261, 710, 657,
	262, 263, 264, 265, 266, 0, 267, 658, 268, 385,
	269, 0, 270, 271, 272, 273, 274, 688, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 711, 290, 291, 611,
	292, 0, 296, 297, 298, 299, 138, 301, 388, 300,
	302, 303, 651, 304, 293, 294, 305, 712, 306, 689,
	390, 307, 0, 314, 308, 309, 295, 310, 313, 690,
	311, 312, 659, 0, 315, 140, 316, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 691, 692, 0, 0,
	324, 325, 660, 661, 632, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 652, 334, 0, 398, 335,
	336, 337, 924, 693, 0, 0, 338, 0, 0, 0,
	132, 339, 340, 341, 342, 343, 606, 133, 588, 0,
	637, 626, 627, 624, 625, 616, 604, 0, 0, 0,
	0, 602, 603, 0, 0, 0, 182, 183, 0, 184,
	1106, 0, 0, 0, 654, 619, 615, 0, 0, 185,
	186, 187, 345, 669, 347, 670, 188, 671, 672, 0,
	189, 351, 352, 190, 191, 622, 653, 673, 674, 355,
	0, 192, 665, 0, 645, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	699, 203, 204, 205, 0, 646, 647, 649, 0, 648,
	650, 206, 207, 408, 208, 675, 209, 676, 677, 0,
	210, 0, 211, 0, 212, 0, 0, 668, 214, 0,
	215, 0, 0, 0, 610, 216, 218, 217, 219, 655,
	656, 633, 700, 0, 0, 0, 0, 0, 220, 221,
	678, 679, 680, 0, 222, 0, 223, 0, 0, 701,
	0, 224, 666, 0, 367, 0, 0, 225, 226, 0,
	0, 227, 228, 662, 664, 703, 0, 370, 232, 0,
	229, 0, 702, 230, 681, 231, 682, 683, 684, 685,
	686, 0, 644, 0, 704, 233, 234, 235, 705, 236,
	237, 238, 0, 240, 239, 0, 667, 706, 241, 242,
	707, 0, 243, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 379, 249, 708, 251, 252, 254, 253, 605,
	0, 634, 663, 255, 687, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 382, 709, 261, 710, 657,
	262, 263, 264, 265, 266, 0, 267, 658, 268, 385,
	269, 0, 270, 271, 272, 273, 274, 688, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 711, 290, 291, 611,
	292, 0, 296, 297, 298, 299, 138, 301, 388, 300,
	302, 303, 651, 304, 293, 294, 305, 712, 306, 689,
	390, 307, 0, 314, 308, 309, 295, 310, 313, 690,
	311, 312, 659, 0, 315, 140, 316, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 691, 692, 0, 0,
	324, 325, 660, 661, 632, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 652, 334, 0, 398, 335,
	336, 337, 924, 693, 0, 0, 338, 0, 0, 0,
	132, 339, 340, 341, 342, 343, 606, 133, 637, 626,
	627, 624, 625, 616, 0, 0, 604, 0, 0, 0,
	0, 602, 603, 0, 182, 183, 0, 184, 0, 0,
	1106, 0, 654, 619, 0, 0, 615, 185, 186, 187,
	345, 669, 347, 670, 188, 671, 672, 0, 189, 351,
	352, 190, 191, 622, 653, 673, 674, 355, 0, 192,
	665, 0, 645, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 699, 203,
	204, 205, 0, 646, 647, 649, 0, 648, 650, 206,
	207, 408, 208, 675, 209, 676, 677, 0, 210, 0,
	211, 0, 212, 0, 0, 668, 214, 0, 215, 0,
	0, 0, 610, 216, 218, 217, 219, 655, 656, 633,
	700, 0, 0, 0, 0, 0, 220, 221, 678, 679,
	680, 0, 222, 0, 223, 0, 0, 701, 0, 224,
	666, 0, 367, 0, 0, 225, 226, 0, 0, 227,
	228, 662, 664, 703, 0, 370, 232, 0, 229, 0,
	702, 230, 681, 231, 682, 683, 684, 685, 686, 0,
	644, 0, 704, 233, 234, 235, 705, 236, 237, 238,
	0, 240, 239, 0, 667, 706, 241, 242, 707, 0,
	243, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 249, 708, 251, 252, 254, 253, 605, 0, 634,
	663, 255, 687, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 382, 709, 261, 710, 657, 262, 263,
	264, 265, 266, 0, 267, 658, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 688, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 711, 290, 291, 611, 292, 0,
	296, 297, 298, 299, 138, 301, 388, 300, 302, 303,
	651, 304, 293, 294, 305, 712, 306, 689, 390, 307,
	0, 314, 308, 309, 295, 310, 313, 690, 311, 312,
	659, 0, 315, 140, 316, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 691, 692, 0, 0, 324, 325,
	660, 661, 632, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 652, 334, 0, 398, 335, 336, 337,
	924, 693, 0, 0, 338, 0, 0, 0, 132, 339,
	340, 341, 342, 343, 606, 133, 637, 626, 627, 624,
	625, 616, 0, 0, 604, 0, 0, 0, 0, 602,
	603, 0, 182, 183, 0, 184, 0, 0, 1106, 0,
	654, 619, 0, 0, 615, 185, 186, 187, 345, 669,
	347, 670, 188, 671, 672, 1554, 189, 351, 352, 190,
	191, 622, 653, 673, 674, 355, 0, 192, 665, 0,
	645, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 699, 203, 204, 205,
	0, 646, 647, 649, 0, 648, 650, 206, 207, 408,
	208, 675, 209, 676, 677, 0, 210, 0, 211, 0,
	212, 0, 0, 668, 214, 0, 215, 0, 0, 0,
	610, 216, 218, 217, 219, 655, 656, 633, 700, 0,
	0, 0, 0, 0, 220, 221, 678, 679, 680, 0,
	222, 0, 223, 0, 1559, 701, 0, 224, 666, 0,
	367, 0, 0, 225, 226, 0, 0, 227, 228, 662,
	664, 703, 0, 370, 232, 0, 229, 0, 702, 230,
	681, 231, 682, 683, 684, 685, 686, 0, 644, 0,
	704, 233, 234, 235, 705, 236, 237, 238, 0, 240,
	239, 1555, 667, 706, 241, 242, 707, 0, 243, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	708, 251, 252, 254, 253, 605, 0, 634, 663, 255,
	687, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 709, 261, 710, 657, 262, 263, 264, 265,
	266, 0, 267, 658, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 688, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 711, 290, 291, 611, 292, 0, 296, 297,
	298, 299, 0, 301, 388, 300, 302, 303, 651, 304,
	293, 294, 305, 712, 306, 689, 390, 307, 0, 314,
	308, 309, 295, 310, 313, 690, 311, 312, 659, 0,
	315, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 691, 692, 0, 1556, 324, 325, 660, 661,
	632, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 652, 334, 0, 398, 335, 336, 337, 399, 693,
	0, 0, 338, 0, 0, 0, 0, 339, 340, 341,
	342, 343, 606, 596, 0, 637, 626, 627, 624, 625,
	616, 0, 604, 0, 0, 0, 0, 602, 603, 0,
	0, 182, 183, 0, 184, 0, 612, 0, 0, 654,
	619, 0, 615, 0, 185, 186, 187, 345, 669, 347,
	670, 188, 671, 672, 0, 189, 351, 352, 190, 191,
	622, 653, 673, 674, 355, 0, 192, 665, 0, 645,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 699, 203, 204, 205, 0,
	646, 647, 649, 0, 648, 650, 206, 207, 408, 208,
	675, 209, 676, 677, 600, 210, 0, 211, 0, 212,
	0, 0, 668, 214, 0, 215, 0, 0, 0, 610,
	216, 218, 217, 219, 655, 656, 633, 700, 0, 0,
	0, 0, 0, 220, 221, 678, 679, 680, 0, 222,
	0, 223, 0, 0, 701, 0, 224, 666, 0, 367,
	0, 0, 225, 226, 0, 0, 227, 228, 662, 664,
	703, 0, 370, 232, 0, 229, 0, 702, 230, 681,
	231, 682, 683, 684, 685, 686, 0, 644, 0, 704,
	233, 234, 235, 705, 236, 237, 238, 0, 240, 239,
	0, 667, 706, 241, 242, 707, 0, 243, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 249, 708,
	251, 252, 254, 253, 605, 0, 634, 663, 255, 687,
	256, 257, 0, 258, 598, 0, 259, 0, 0, 260,
	382, 709, 261, 710, 657, 262, 263, 264, 265, 266,
	0, 267, 658, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 688, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 711, 290, 291, 611, 292, 0, 296, 297, 298,
	299, 0, 301, 388, 300, 302, 303, 651, 304, 293,
	294, 305, 712, 306, 689, 390, 307, 0, 314, 308,
	309, 295, 310, 313, 690, 311, 312, 659, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 691, 692, 0, 0, 324, 325, 660, 661, 632,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	652, 334, 0, 398, 335, 336, 337, 399, 693, 0,
	0, 338, 0, 0, 0, 0, 339, 340, 341, 342,
	343, 606, 0, 637, 626, 627, 624, 625, 616, 0,
	0, 604, 0, 0, 0, 0, 602, 603, 0, 182,
	183, 0, 184, 0, 0, 612, 0, 654, 619, 0,
	0, 615, 185, 186, 187, 345, 669, 347, 670, 188,
	671, 672, 0, 189, 351, 352, 190, 191, 622, 653,
	673, 674, 355, 0, 192, 665, 0, 645, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 699, 203, 204, 205, 0, 646, 647,
	649, 0, 648, 650, 206, 207, 408, 208, 675, 209,
	676, 677, 0, 210, 0, 211, 0, 212, 0, 0,
	668, 214, 0, 215, 0, 0, 0, 610, 216, 218,
	217, 219, 655, 656, 633, 700, 0, 0, 0, 0,
	0, 220, 221, 678, 679, 680, 0, 222, 0, 223,
	0, 0, 701, 0, 224, 666, 0, 367, 0, 0,
	225, 226, 0, 0, 227, 228, 662, 664, 703, 0,
	370, 232, 0, 229, 0, 702, 230, 681, 231, 682,
	683, 684, 685, 686, 0, 644, 0, 704, 233, 234,
	235, 705, 236, 237, 238, 0, 240, 239, 0, 667,
	706, 241, 242, 707, 0, 243, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 379, 249, 708, 251, 252,
	254, 253, 605, 2180, 634, 663, 255, 687, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 382, 709,
	261, 710, 657, 262, 263, 264, 265, 266, 0, 267,
	658, 268, 385, 269, 0, 270, 271, 272, 273, 274,
	688, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 711,
	290, 291, 611, 292, 0, 296, 297, 298, 299, 0,
	301, 388, 300, 302, 303, 651, 304, 293, 294, 305,
	712, 306, 689, 390, 307, 0, 314, 308, 309, 295,
	310, 313, 690, 311, 312, 659, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 691,
	692, 0, 0, 324, 325, 660, 661, 632, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 652, 334,
	0, 398, 335, 336, 337, 399, 693, 0, 0, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 606,
	0, 637, 626, 627, 624, 625, 616, 0, 0, 604,
	0, 0, 0, 0, 602, 603, 1169, 182, 183, 0,
	184, 0, 0, 612, 0, 654, 619, 0, 0, 615,
	185, 186, 187, 345, 669, 347, 670, 188, 671, 672,
	0, 189, 351, 352, 190, 191, 622, 653, 673, 674,
	355, 0, 192, 665, 0, 645, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 699, 203, 204, 205, 0, 646, 647, 649, 0,
	648, 650, 206, 207, 408, 208, 675, 209, 676, 677,
	0, 210, 0, 211, 0, 212, 0, 0, 668, 214,
	0, 215, 0, 0, 0, 610, 216, 218, 217, 219,
	655, 656, 633, 700, 0, 0, 0, 0, 0, 220,
	221, 678, 679, 680, 0, 222, 0, 223, 0, 0,
	701, 0, 224, 666, 0, 367, 0, 0, 225, 226,
	0, 0, 227, 228, 662, 664, 703, 0, 370, 232,
	1404, 229, 0, 702, 230, 681, 231, 682, 683, 684,
	685, 686, 0, 644, 0, 704, 233, 234, 235, 705,
	236, 237, 238, 0, 240, 239, 0, 667, 706, 241,
	242, 707, 0, 243, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 708, 251, 252, 254, 253,
	605, 0, 634, 663, 255, 687, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 709, 261, 710,
	657, 262, 263, 264, 265, 266, 0, 267, 658, 268,
	385, 269, 1403, 270, 271, 272, 273, 274, 688, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 711, 290, 291,
	611, 292, 0, 296, 297, 298, 299, 0, 301, 388,
	300, 302, 303, 651, 304, 293, 294, 305, 712, 306,
	689, 390, 307, 0, 314, 308, 309, 295, 310, 313,
	690, 311, 312, 659, 0, 315, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 691, 692, 0,
	0, 324, 325, 660, 661, 632, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 652, 334, 0, 398,
	335, 336, 337, 399, 693, 0, 0, 338, 0, 0,
	0, 0, 339, 340, 341, 342, 343, 606, 0, 637,
	626, 627, 624, 625, 616, 0, 0, 604, 0, 0,
	0, 0, 602, 603, 0, 182, 183, 0, 184, 0,
	0, 612, 0, 654, 619, 0, 0, 615, 185, 186,
	187, 345, 669, 347, 670, 188, 671, 672, 0, 189,
	351, 352, 190, 191, 622, 653, 673, 674, 355, 0,
	192, 665, 0, 645, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 699,
	203, 204, 205, 0, 646, 647, 649, 0, 648, 650,
	206, 207, 408, 208, 675, 209, 676, 677, 600, 210,
	0, 211, 0, 212, 0, 0, 668, 214, 0, 215,
	0, 0, 0, 610, 216, 218, 217, 219, 655, 656,
	633, 700, 0, 0, 0, 0, 0, 220, 221, 678,
	679, 680, 0, 222, 0, 223, 0, 0, 701, 0,
	224, 666, 0, 367, 0, 0, 225, 226, 0, 0,
	227, 228, 662, 664, 703, 0, 370, 232, 0, 229,
	0, 702, 230, 681, 231, 682, 683, 684, 685, 686,
	0, 644, 0, 704, 233, 234, 235, 705, 236, 237,
	238, 0, 240, 239, 0, 667, 706, 241, 242, 707,
	0, 243, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 708, 251, 252, 254, 253, 605, 0,
	634, 663, 255, 687, 256, 257, 0, 258, 598, 0,
	259, 0, 0, 260, 382, 709, 261, 710, 657, 262,
	263, 264, 265, 266, 0, 267, 658, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 688, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 711, 290, 291, 611, 292,
	0, 296, 297, 298, 299, 0, 301, 388, 300, 302,
	303, 651, 304, 293, 294, 305, 712, 306, 689, 390,
	307, 0, 314, 308, 309, 295, 310, 313, 690, 311,
	312, 659, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 691, 692, 0, 0, 324,
	325, 660, 661, 632, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 652, 334, 0, 398, 335, 336,
	337, 399, 693, 0, 0, 338, 0, 0, 0, 0,
	339, 340, 341, 342, 343, 606, 0, 637, 626, 627,
	624, 625, 616, 0, 0, 604, 0, 0, 0, 0,
	602, 603, 0, 182, 183, 0, 184, 0, 0, 612,
	0, 654, 619, 0, 0, 615, 185, 186, 187, 345,
	669, 347, 670, 188, 671, 672, 0, 189, 351, 352,
	190, 191, 622, 653, 673, 674, 355, 0, 192, 665,
	0, 645, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 699, 203, 204,
	205, 0, 646, 647, 649, 0, 648, 650, 206, 207,
	408, 208, 675, 209, 676, 677, 600, 210, 0, 211,
	0, 212, 0, 0, 668, 214, 0, 215, 0, 0,
	0, 610, 216, 218, 217, 219, 655, 656, 633, 700,
	0, 0, 0, 0, 0, 220, 221, 678, 679, 680,
	0, 222, 0, 223, 0, 0, 701, 0, 224, 666,
	0, 367, 0, 0, 225, 226, 0, 0, 227, 228,
	662, 664, 703, 0, 370, 232, 0, 229, 0, 702,
	230, 681, 231, 682, 683, 684, 685, 686, 0, 644,
	0, 704, 233, 234, 235, 705, 236, 237, 238, 0,
	240, 239, 0, 667, 706, 241, 242, 707, 0, 243,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 708, 251, 252, 254, 253, 605, 0, 634, 663,
	255, 687, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 382, 709, 261, 710, 657, 262, 263, 264,
	265, 266, 0, 267, 658, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 688, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 711, 290, 291, 611, 292, 0, 296,
	297, 298, 299, 0, 301, 388, 300, 302, 303, 651,
	304, 293, 294, 305, 712, 306, 689, 390, 307, 0,
	314, 308, 309, 295, 310, 313, 690, 311, 312, 659,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 691, 692, 0, 0, 324, 325, 660,
	661, 632, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 652, 334, 0, 398, 335, 336, 337, 399,
	693, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 606, 0, 637, 626, 627, 624, 625,
	616, 0, 0, 604, 0, 0, 0, 0, 602, 603,
	0, 182, 183, 0, 184, 0, 0, 612, 0, 654,
	619, 0, 0, 615, 185, 186, 187, 345, 669, 347,
	670, 188, 671, 672, 0, 189, 351, 352, 190, 191,
	622, 653, 673, 674, 355, 0, 192, 665, 0, 645,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 699, 203, 204, 205, 0,
	646, 647, 649, 0, 648, 650, 206, 207, 408, 208,
	675, 209, 676, 677, 0, 210, 0, 211, 0, 212,
	0, 0, 668, 214, 0, 215, 0, 0, 0, 610,
	216, 218, 217, 219, 655, 656, 633, 700, 0, 0,
	0, 0, 0, 220, 221, 678, 679, 680, 0, 222,
	0, 223, 0, 0, 701, 0, 224, 666, 0, 367,
	0, 0, 225, 226, 0, 0, 227, 228, 662, 664,
	703, 0, 370, 232, 0, 229, 0, 702, 230, 681,
	231, 682, 683, 684, 685, 686, 0, 644, 0, 704,
	233, 234, 235, 705, 236, 237, 238, 0, 240, 239,
	0, 667, 706, 241, 242, 707, 0, 243, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 249, 708,
	251, 252, 254, 253, 605, 0, 634, 663, 255, 687,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	382, 709, 261, 710, 657, 262, 263, 264, 265, 266,
	0, 267, 658, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 688, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 711, 290, 291, 611, 292, 0, 296, 297, 298,
	299, 0, 301, 388, 300, 302, 303, 651, 304, 293,
	294, 305, 712, 306, 689, 390, 307, 0, 314, 308,
	309, 295, 310, 313, 690, 311, 312, 659, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 691, 692, 0, 0, 324, 325, 660, 661, 632,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	652, 334, 0, 398, 335, 336, 337, 399, 693, 2030,
	0, 338, 0, 0, 0, 0, 339, 340, 341, 342,
	343, 606, 0, 637, 626, 627, 624, 625, 616, 0,
	0, 604, 0, 0, 0, 0, 602, 603, 0, 182,
	183, 0, 184, 0, 0, 612, 0, 654, 619, 0,
	0, 615, 185, 186, 187, 345, 669, 347, 670, 188,
	671, 672, 0, 189, 351, 352, 190, 191, 622, 653,
	673, 674, 355, 0, 192, 665, 0, 645, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 699, 203, 204, 205, 0, 646, 647,
	649, 0, 648, 650, 206, 207, 408, 208, 675, 209,
	676, 677, 0, 210, 0, 211, 0, 212, 0, 0,
	668, 214, 0, 215, 0, 0, 0, 610, 216, 218,
	217, 219, 655, 656, 633, 700, 0, 0, 0, 0,
	0, 220, 221, 678, 679, 680, 0, 222, 0, 223,
	0, 0, 701, 0, 224, 666, 0, 367, 0, 0,
	225, 226, 0, 0, 227, 228, 662, 664, 703, 0,
	370, 232, 0, 229, 0, 702, 230, 681, 231, 682,
	683, 684, 685, 686, 0, 644, 0, 704, 233, 234,
	235, 705, 236, 237, 238, 0, 240, 239, 0, 667,
	706, 241, 242, 707, 0, 243, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 379, 249, 708, 251, 252,
	254, 253, 605, 0, 634, 663, 255, 687, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 382, 709,
	261, 710, 657, 262, 263, 264, 265, 266, 0, 267,
	658, 268, 385, 269, 0, 270, 271, 272, 273, 274,
	688, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 711,
	290, 291, 611, 292, 0, 296, 297, 298, 299, 0,
	301, 388, 300, 302, 303, 651, 304, 293, 294, 305,
	712, 306, 689, 390, 307, 0, 314, 308, 309, 295,
	310, 313, 690, 311, 312, 659, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 691,
	692, 0, 0, 324, 325, 660, 661, 632, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 652, 334,
	0, 398, 335, 336, 337, 399, 693, 0, 0, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 606,
	0, 637, 626, 627, 624, 625, 616, 0, 0, 604,
	0, 0, 0, 0, 602, 603, 1169, 182, 183, 0,
	184, 0, 0, 612, 0, 654, 619, 0, 0, 615,
	185, 186, 187, 345, 669, 347, 670, 188, 671, 672,
	0, 189, 351, 352, 190, 191, 622, 653, 673, 674,
	355, 0, 192, 665, 0, 645, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 699, 203, 204, 205, 0, 646, 647, 649, 0,
	648, 650, 206, 207, 408, 208, 675, 209, 676, 677,
	0, 210, 0, 211, 0, 212, 0, 0, 668, 214,
	0, 215, 0, 0, 0, 610, 216, 218, 217, 219,
	655, 656, 633, 700, 0, 0, 0, 0, 0, 220,
	221, 678, 679, 680, 0, 222, 0, 223, 0, 1559,
	701, 0, 224, 666, 0, 367, 0, 0, 225, 226,
	0, 0, 227, 228, 662, 664, 703, 0, 370, 232,
	0, 229, 0, 702, 230, 681, 231, 682, 683, 684,
	685, 686, 0, 644, 0, 704, 233, 234, 235, 705,
	236, 237, 238, 0, 240, 239, 0, 667, 706, 241,
	242, 707, 0, 243, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 708, 251, 252, 254, 253,
	605, 0, 634, 663, 255, 687, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 709, 261, 710,
	657, 262, 263, 264, 265, 266, 0, 267, 658, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 688, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 711, 290, 291,
	611, 292, 0, 296, 297, 298, 299, 0, 301, 388,
	300, 302, 303, 651, 304, 293, 294, 305, 712, 306,
	689, 390, 307, 0, 314, 308, 309, 295, 310, 313,
	690, 311, 312, 659, 0, 315, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 691, 692, 0,
	0, 324, 325, 660, 661, 632, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 652, 334, 0, 398,
	335, 336, 337, 399, 693, 0, 0, 338, 0, 0,
	0, 0, 339, 340, 341, 342, 343, 606, 1607, 0,
	637, 626, 627, 624, 625, 616, 0, 604, 0, 0,
	0, 0, 602, 603, 0, 0, 182, 183, 0, 184,
	0, 612, 0, 0, 654, 619, 0, 615, 0, 185,
	186, 187, 345, 669, 347, 670, 188, 671, 672, 0,
	189, 351, 352, 190, 191, 622, 653, 673, 674, 355,
	0, 192, 665, 0, 645, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	699, 203, 204, 205, 0, 646, 647, 649, 0, 648,
	650, 206, 207, 408, 208, 675, 209, 676, 677, 0,
	210, 0, 211, 0, 212, 0, 0, 668, 214, 0,
	215, 0, 0, 0, 610, 216, 218, 217, 219, 655,
	656, 633, 700, 0, 0, 0, 0, 0, 220, 221,
	678, 679, 680, 0, 222, 0, 223, 0, 0, 701,
	0, 224, 666, 0, 367, 0, 0, 225, 226, 0,
	0, 227, 228, 662, 664, 703, 0, 370, 232, 0,
	229, 0, 702, 230, 681, 231, 682, 683, 684, 685,
	686, 0, 644, 0, 704, 233, 234, 235, 705, 236,
	237, 238, 0, 240, 239, 0, 667, 706, 241, 242,
	707, 0, 243, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 379, 249, 708, 251, 252, 254, 253, 605,
	0, 634, 663, 255, 687, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 382, 709, 261, 710, 657,
	262, 263, 264, 265, 266, 0, 267, 658, 268, 385,
	269, 0, 270, 271, 272, 273, 274, 688, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 711, 290, 291, 611,
	292, 0, 296, 297, 298, 299, 0, 301, 388, 300,
	302, 303, 651, 304, 293, 294, 305, 712, 306, 689,
	390, 307, 0, 314, 308, 309, 295, 310, 313, 690,
	311, 312, 659, 0, 315, 0, 316, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 691, 692, 0, 0,
	324, 325, 660, 661, 632, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 652, 334, 0, 398, 335,
	336, 337, 399, 693, 0, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 606, 1568, 0, 637,
	626, 627, 624, 625, 616, 0, 604, 0, 0, 0,
	0, 602, 603, 0, 0, 182, 183, 0, 184, 0,
	612, 0, 0, 654, 619, 0, 615, 0, 185, 186,
	187, 345, 669, 347, 670, 188, 671, 672, 0, 189,
	351, 352, 190, 191, 622, 653, 673, 674, 355, 0,
	192, 665, 0, 645, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 699,
	203, 204, 205, 0, 646, 647, 649, 0, 648, 650,
	206, 207, 408, 208, 675, 209, 676, 677, 0, 210,
	0, 211, 0, 212, 0, 0, 668, 214, 0, 215,
	0, 0, 0, 610, 216, 218, 217, 219, 655, 656,
	633, 700, 0, 0, 0, 0, 0, 220, 221, 678,
	679, 680, 0, 222, 0, 223, 0, 0, 701, 0,
	224, 666, 0, 367, 0, 0, 225, 226, 0, 0,
	227, 228, 662, 664, 703, 0, 370, 232, 0, 229,
	0, 702, 230, 681, 231, 682, 683, 684, 685, 686,
	0, 644, 0, 704, 233, 234, 235, 705, 236, 237,
	238, 0, 240, 239, 0, 667, 706, 241, 242, 707,
	0, 243, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 708, 251, 252, 254, 253, 605, 0,
	634, 663, 255, 687, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 382, 709, 261, 710, 657, 262,
	263, 264, 265, 266, 0, 267, 658, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 688, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 711, 290, 291, 611, 292,
	0, 296, 297, 298, 299, 0, 301, 388, 300, 302,
	303, 651, 304, 293, 294, 305, 712, 306, 689, 390,
	307, 0, 314, 308, 309, 295, 310, 313, 690, 311,
	312, 659, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 691, 692, 0, 0, 324,
	325, 660, 661, 632, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 652, 334, 0, 398, 335, 336,
	337, 399, 693, 0, 0, 338, 0, 0, 0, 0,
	339, 340, 341, 342, 343, 606, 1566, 0, 637, 626,
	627, 624, 625, 616, 0, 604, 0, 0, 0, 0,
	602, 603, 0, 0, 182, 183, 0, 184, 0, 612,
	0, 0, 654, 619, 0, 615, 0, 185, 186, 187,
	345, 669, 347, 670, 188, 671, 672, 0, 189, 351,
	352, 190, 191, 622, 653, 673, 674, 355, 0, 192,
	665, 0, 645, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 699, 203,
	204, 205, 0, 646, 647, 649, 0, 648, 650, 206,
	207, 408, 208, 675, 209, 676, 677, 0, 210, 0,
	211, 0, 212, 0, 0, 668, 214, 0, 215, 0,
	0, 0, 610, 216, 218, 217, 219, 655, 656, 633,
	700, 0, 0, 0, 0, 0, 220, 221, 678, 679,
	680, 0, 222, 0, 223, 0, 0, 701, 0, 224,
	666, 0, 367, 0, 0, 225, 226, 0, 0, 227,
	228, 662, 664, 703, 0, 370, 232, 0, 229, 0,
	702, 230, 681, 231, 682, 683, 684, 685, 686, 0,
	644, 0, 704, 233, 234, 235, 705, 236, 237, 238,
	0, 240, 239, 0, 667, 706, 241, 242, 707, 0,
	243, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 249, 708, 251, 252, 254, 253, 605, 0, 634,
	663, 255, 687, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 382, 709, 261, 710, 657, 262, 263,
	264, 265, 266, 0, 267, 658, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 688, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 711, 290, 291, 611, 292, 0,
	296, 297, 298, 299, 0, 301, 388, 300, 302, 303,
	651, 304, 293, 294, 305, 712, 306, 689, 390, 307,
	0, 314, 308, 309, 295, 310, 313, 690, 311, 312,
	659, 0, 315, 0, 316, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 691, 692, 0, 0, 324, 325,
	660, 661, 632, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 652, 334, 0, 398, 335, 336, 337,
	399, 693, 0, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 606, 1550, 0, 637, 626, 627,
	624, 625, 616, 0, 604, 0, 0, 0, 0, 602,
	603, 0, 0, 182, 183, 0, 184, 0, 612, 0,
	0, 654, 619, 0, 615, 0, 185, 186, 187, 345,
	669, 347, 670, 188, 671, 672, 0, 189, 351, 352,
	190, 191, 622, 653, 673, 674, 355, 0, 192, 665,
	0, 645, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 699, 203, 204,
	205, 0, 646, 647, 649, 0, 648, 650, 206, 207,
	408, 208, 675, 209, 676, 677, 0, 210, 0, 211,
	0, 212, 0, 0, 668, 214, 0, 215, 0, 0,
	0, 610, 216, 218, 217, 219, 655, 656, 633, 700,
	0, 0, 0, 0, 0, 220, 221, 678, 679, 680,
	0, 222, 0, 223, 0, 0, 701, 0, 224, 666,
	0, 367, 0, 0, 225, 226, 0, 0, 227, 228,
	662, 664, 703, 0, 370, 232, 0, 229, 0, 702,
	230, 681, 231, 682, 683, 684, 685, 686, 0, 644,
	0, 704, 233, 234, 235, 705, 236, 237, 238, 0,
	240, 239, 0, 667, 706, 241, 242, 707, 0, 243,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 708, 251, 252, 254, 253, 605, 0, 634, 663,
	255, 687, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 382, 709, 261, 710, 657, 262, 263, 264,
	265, 266, 0, 267, 658, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 688, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 711, 290, 291, 611, 292, 0, 296,
	297, 298, 299, 0, 301, 388, 300, 302, 303, 651,
	304, 293, 294, 305, 712, 306, 689, 390, 307, 0,
	314, 308, 309, 295, 310, 313, 690, 311, 312, 659,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 691, 692, 0, 0, 324, 325, 660,
	661, 632, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 652, 334, 0, 398, 335, 336, 337, 399,
	693, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 606, 1538, 0, 637, 626, 627, 624,
	625, 616, 0, 604, 0, 0, 0, 0, 602, 603,
	0, 0, 182, 183, 0, 184, 0, 612, 0, 0,
	654, 619, 0, 615, 0, 185, 186, 187, 345, 669,
	347, 670, 188, 671, 672, 0, 189, 351, 352, 190,
	191, 622, 653, 673, 674, 355, 0, 192, 665, 0,
	645, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 699, 203, 204, 205,
	0, 646, 647, 649, 0, 648, 650, 206, 207, 408,
	208, 675, 209, 676, 677, 0, 210, 0, 211, 0,
	212, 0, 0, 668, 214, 0, 215, 0, 0, 0,
	610, 216, 218, 217, 219, 655, 656, 633, 700, 0,
	0, 0, 0, 0, 220, 221, 678, 679, 680, 0,
	222, 0, 223, 0, 0, 701, 0, 224, 666, 0,
	367, 0, 0, 225, 226, 0, 0, 227, 228, 662,
	664, 703, 0, 370, 232, 0, 229, 0, 702, 230,
	681, 231, 682, 683, 684, 685, 686, 0, 644, 0,
	704, 233, 234, 235, 705, 236, 237, 238, 0, 240,
	239, 0, 667, 706, 241, 242, 707, 0, 243, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	708, 251, 252, 254, 253, 605, 0, 634, 663, 255,
	687, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 709, 261, 710, 657, 262, 263, 264, 265,
	266, 0, 267, 658, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 688, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 711, 290, 291, 611, 292, 0, 296, 297,
	298, 299, 0, 301, 388, 300, 302, 303, 651, 304,
	293, 294, 305, 712, 306, 689, 390, 307, 0, 314,
	308, 309, 295, 310, 313, 690, 311, 312, 659, 0,
	315, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 691, 692, 0, 0, 324, 325, 660, 661,
	632, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 652, 334, 0, 398, 335, 336, 337, 399, 693,
	0, 0, 338, 0, 0, 0, 0, 339, 340, 341,
	342, 343, 606, 1536, 0, 1528, 626, 627, 624, 625,
	616, 0, 604, 0, 0, 0, 0, 602, 603, 0,
	0, 182, 183, 0, 184, 0, 612, 0, 0, 654,
	619, 0, 615, 0, 185, 186, 187, 345, 669, 347,
	670, 188, 671, 672, 0, 189, 351, 352, 190, 191,
	622, 653, 673, 674, 355, 0, 192, 665, 0, 645,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 699, 203, 204, 205, 0,
	646, 647, 649, 0, 648, 650, 206, 207, 408, 208,
	675, 1531, 676, 677, 0, 210, 0, 211, 0, 212,
	0, 0, 668, 214, 0, 215, 0, 0, 0, 610,
	216, 218, 217, 219, 655, 656, 633, 700, 0, 0,
	0, 0, 0, 220, 221, 678, 679, 680, 0, 222,
	0, 223, 0, 0, 701, 0, 224, 666, 0, 367,
	0, 0, 225, 1532, 0, 0, 227, 228, 662, 664,
	703, 0, 370, 232, 0, 229, 0, 702, 230, 681,
	231, 682, 683, 684, 685, 686, 0, 644, 0, 704,
	233, 234, 235, 705, 236, 237, 238, 0, 240, 239,
	0, 667, 706, 241, 242, 707, 0, 243, 244, 0,
	0, 245, 0, 246, 1533, 1530, 250, 379, 249, 708,
	251, 252, 254, 253, 605, 0, 634, 663, 255, 687,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	382, 709, 261, 710, 657, 262, 263, 264, 265, 266,
	0, 267, 658, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 688, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 711, 290, 291, 611, 292, 0, 296, 297, 298,
	1534, 0, 301, 388, 300, 302, 303, 651, 304, 293,
	294, 305, 712, 306, 689, 390, 307, 0, 314, 308,
	309, 295, 310, 313, 690, 311, 312, 659, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 691, 692, 0, 0, 324, 325, 660, 661, 632,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	652, 334, 0, 398, 335, 336, 337, 399, 693, 0,
	0, 338, 0, 0, 0, 0, 339, 340, 341, 1529,
	343, 606, 1525, 0, 1528, 626, 627, 624, 625, 616,
	0, 604, 0, 0, 0, 0, 602, 603, 0, 0,
	182, 183, 0, 184, 0, 612, 0, 0, 654, 619,
	0, 615, 0, 185, 186, 187, 345, 669, 347, 670,
	188, 671, 672, 0, 189, 351, 352, 190, 191, 622,
	653, 673, 674, 355, 0, 192, 665, 0, 645, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 699, 203, 204, 205, 0, 646,
	647, 649, 0, 648, 650, 206, 207, 408, 208, 675,
	1531, 676, 677, 0, 210, 0, 211, 0, 212, 0,
	0, 668, 214, 0, 215, 0, 0, 0, 610, 216,
	218, 217, 219, 655, 656, 633, 700, 0, 0, 0,
	0, 0, 220, 221, 678, 679, 680, 0, 222, 0,
	223, 0, 0, 701, 0, 224, 666, 0, 367, 0,
	0, 225, 1532, 0, 0, 227, 228, 662, 664, 703,
	0, 370, 232, 0, 229, 0, 702, 230, 681, 231,
	682, 683, 684, 685, 686, 0, 644, 0, 704, 233,
	234, 235, 705, 236, 237, 238, 0, 240, 239, 0,
	667, 706, 241, 242, 707, 0, 243, 244, 0, 0,
	245, 0, 246, 1533, 1530, 250, 379, 249, 708, 251,
	252, 254, 253, 605, 0, 634, 663, 255, 687, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	709, 261, 710, 657, 262, 263, 264, 265, 266, 0,
	267, 658, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 688, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	711, 290, 291, 611, 292, 0, 296, 297, 298, 1534,
	0, 301, 388, 300, 302, 303, 651, 304, 293, 294,
	305, 712, 306, 689, 390, 307, 0, 314, 308, 309,
	295, 310, 313, 690, 311, 312, 659, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	691, 692, 0, 0, 324, 325, 660, 661, 632, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 652,
	334, 0, 398, 335, 336, 337, 399, 693, 0, 0,
	338, 0, 0, 0, 0, 339, 340, 341, 1529, 343,
	606, 0, 637, 626, 627, 624, 625, 616, 0, 0,
	604, 0, 0, 0, 0, 602, 603, 0, 182, 183,
	0, 184, 0, 0, 612, 0, 654, 619, 0, 0,
	615, 185, 186, 187, 345, 669, 347, 670, 188, 671,
	672, 0, 189, 351, 352, 190, 191, 622, 653, 673,
	674, 355, 0, 192, 665, 0, 645, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 699, 203, 204, 205, 0, 646, 647, 649,
	0, 648, 650, 206, 207, 408, 208, 675, 209, 676,
	677, 0, 210, 0, 211, 0, 212, 0, 0, 668,
	214, 0, 215, 0, 0, 0, 610, 216, 218, 217,
	219, 655, 656, 633, 700, 0, 0, 0, 0, 0,
	220, 221, 678, 679, 680, 0, 222, 0, 223, 0,
	0, 701, 0, 224, 666, 0, 367, 0, 0, 225,
	226, 0, 0, 227, 228, 662, 664, 703, 0, 370,
	232, 0, 229, 0, 702, 230, 681, 231, 682, 683,
	684, 685, 686, 0, 644, 0, 704, 233, 234, 235,
	705, 236, 237, 238, 0, 240, 239, 0, 667, 706,
	241, 242, 707, 0, 243, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 708, 251, 252, 254,
	253, 605, 0, 634, 663, 255, 687, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 709, 261,
	710, 657, 262, 263, 264, 265, 266, 0, 267, 658,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 688,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 711, 290,
	291, 611, 292, 0, 296, 297, 298, 299, 0, 301,
	388, 300, 302, 303, 651, 304, 293, 294, 305, 712,
	306, 689, 390, 307, 0, 314, 308, 309, 295, 310,
	313, 690, 311, 312, 659, 0, 315, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 691, 692,
	0, 0, 324, 325, 660, 661, 632, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 652, 334, 0,
	398, 335, 336, 337, 399, 693, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 606, 0,
	637, 626, 627, 624, 625, 616, 0, 0, 604, 0,
	0, 0, 0, 602, 603, 0, 182, 183, 1391, 184,
	1110, 0, 612, 0, 654, 619, 0, 0, 615, 185,
	186, 187, 345, 669, 347, 670, 188, 671, 672, 0,
	189, 351, 352, 190, 191, 622, 653, 673, 674, 355,
	0, 192, 665, 0, 645, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	699, 203, 204, 205, 0, 646, 647, 649, 0, 648,
	650, 206, 207, 408, 208, 675, 209, 676, 677, 0,
	210, 0, 211, 0, 212, 0, 0, 668, 214, 0,
	215, 0, 0, 0, 610, 216, 218, 217, 219, 655,
	656, 633, 700, 0, 0, 0, 0, 0, 220, 221,
	678, 679, 680, 0, 222, 0, 223, 0, 0, 701,
	0, 224, 666, 0, 367, 0, 0, 225, 226, 0,
	0, 227, 228, 662, 664, 703, 0, 370, 232, 0,
	229, 0, 702, 230, 681, 231, 682, 683, 684, 685,
	686, 0, 644, 0, 704, 233, 234, 235, 705, 236,
	237, 238, 0, 240, 239, 0, 667, 706, 241, 242,
	707, 0, 243, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 379, 249, 708, 251, 252, 254, 253, 605,
	0, 634, 663, 255, 687, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 382, 709, 261, 710, 657,
	262, 263, 264, 265, 266, 0, 267, 658, 268, 385,
	269, 0, 270, 271, 272, 273, 274, 688, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 711, 290, 291, 611,
	292, 0, 296, 297, 298, 299, 0, 301, 388, 300,
	302, 303, 651, 304, 293, 294, 305, 712, 306, 689,
	390, 307, 0, 314, 308, 309, 295, 310, 313, 690,
	311, 312, 659, 0, 315, 0, 316, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 691, 692, 0, 0,
	324, 325, 660, 661, 632, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 652, 334, 0, 398, 335,
	336, 337, 399, 693, 0, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 606, 868, 0, 637,
	626, 627, 624, 625, 616, 0, 604, 0, 0, 0,
	0, 602, 603, 0, 0, 182, 183, 0, 184, 0,
	612, 0, 0, 654, 619, 0, 615, 0, 185, 186,
	187, 345, 669, 347, 670, 188, 671, 672, 0, 189,
	351, 352, 190, 191, 622, 653, 673, 674, 355, 0,
	192, 665, 0, 645, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 699,
	203, 204, 205, 0, 646, 647, 649, 0, 648, 650,
	206, 207, 408, 208, 675, 209, 676, 677, 0, 210,
	0, 211, 0, 212, 0, 0, 668, 214, 0, 215,
	0, 0, 0, 610, 216, 218, 217, 219, 655, 656,
	633, 700, 0, 0, 0, 0, 0, 220, 221, 678,
	679, 680, 0, 222, 0, 223, 0, 0, 701, 0,
	224, 666, 0, 367, 0, 0, 225, 226, 0, 0,
	227, 228, 662, 664, 703, 0, 370, 232, 0, 229,
	0, 702, 230, 681, 231, 682, 683, 684, 685, 686,
	0, 644, 0, 704, 233, 234, 235, 705, 236, 237,
	238, 0, 240, 239, 0, 667, 706, 241, 242, 707,
	0, 243, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 708, 251, 252, 254, 253, 605, 0,
	634, 663, 255, 687, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 382, 709, 261, 710, 657, 262,
	263, 264, 265, 266, 0, 267, 658, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 688, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 711, 290, 291, 611, 292,
	0, 296, 297, 298, 299, 0, 301, 388, 300, 302,
	303, 651, 304, 293, 294, 305, 712, 306, 689, 390,
	307, 0, 314, 308, 309, 295, 310, 313, 690, 311,
	312, 659, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 691, 692, 0, 0, 324,
	325, 660, 661, 632, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 652, 334, 0, 398, 335, 336,
	337, 399, 693, 0, 0, 338, 0, 0, 0, 0,
	339, 340, 341, 342, 343, 606, 866, 0, 637, 626,
	627, 624, 625, 616, 0, 604, 0, 0, 0, 0,
	602, 603, 0, 0, 182, 183, 0, 184, 0, 612,
	0, 0, 654, 619, 0, 615, 0, 185, 186, 187,
	345, 669, 347, 670, 188, 671, 672, 0, 189, 351,
	352, 190, 191, 622, 653, 673, 674, 355, 0, 192,
	665, 0, 645, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 699, 203,
	204, 205, 0, 646, 647, 649, 0, 648, 650, 206,
	207, 408, 208, 675, 209, 676, 677, 0, 210, 0,
	211, 0, 212, 0, 0, 668, 214, 0, 215, 0,
	0, 0, 610, 216, 218, 217, 219, 655, 656, 633,
	700, 0, 0, 0, 0, 0, 220, 221, 678, 679,
	680, 0, 222, 0, 223, 0, 0, 701, 0, 224,
	666, 0, 367, 0, 0, 225, 226, 0, 0, 227,
	228, 662, 664, 703, 0, 370, 232, 0, 229, 0,
	702, 230, 681, 231, 682, 683, 684, 685, 686, 0,
	644, 0, 704, 233, 234, 235, 705, 236, 237, 238,
	0, 240, 239, 0, 667, 706, 241, 242, 707, 0,
	243, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 249, 708, 251, 252, 254, 253, 605, 0, 634,
	663, 255, 687, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 382, 709, 261, 710, 657, 262, 263,
	264, 265, 266, 0, 267, 658, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 688, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 711, 290, 291, 611, 292, 0,
	296, 297, 298, 299, 0, 301, 388, 300, 302, 303,
	651, 304, 293, 294, 305, 712, 306, 689, 390, 307,
	0, 314, 308, 309, 295, 310, 313, 690, 311, 312,
	659, 0, 315, 0, 316, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 691, 692, 0, 0, 324, 325,
	660, 661, 632, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 652, 334, 0, 398, 335, 336, 337,
	399, 693, 0, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 606, 0, 637, 626, 627, 624,
	625, 616, 0, 0, 604, 0, 0, 0, 0, 602,
	603, 0, 182, 183, 0, 184, 0, 0, 612, 0,
	654, 619, 0, 0, 615, 185, 186, 187, 345, 669,
	347, 670, 188, 671, 672, 0, 189, 351, 352, 190,
	191, 622, 653, 673, 674, 355, 0, 192, 665, 0,
	645, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 699, 203, 204, 2501,
	0, 646, 647, 649, 0, 648, 650, 206, 207, 408,
	208, 675, 209, 676, 677, 0, 210, 0, 211, 0,
	212, 0, 0, 668, 214, 0, 215, 0, 0, 0,
	610, 216, 218, 217, 219, 655, 656, 633, 700, 0,
	0, 0, 0, 0, 220, 221, 678, 679, 680, 0,
	222, 0, 223, 0, 0, 701, 0, 224, 666, 0,
	367, 0, 0, 225, 226, 0, 0, 227, 228, 662,
	664, 703, 0, 370, 232, 0, 229, 0, 702, 230,
	681, 231, 682, 683, 684, 685, 686, 0, 644, 0,
	704, 233, 234, 235, 705, 236, 237, 238, 0, 240,
	239, 0, 667, 706, 241, 242, 707, 0, 243, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	708, 251, 252, 254, 253, 605, 0, 634, 663, 255,
	687, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 709, 261, 710, 657, 262, 263, 264, 265,
	266, 0, 267, 658, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 688, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 711, 290, 291, 611, 292, 0, 296, 297,
	298, 299, 0, 301, 388, 300, 302, 303, 651, 304,
	293, 294, 305, 712, 306, 689, 390, 307, 0, 314,
	308, 309, 295, 310, 313, 690, 311, 312, 659, 0,
	315, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 691, 692, 0, 0, 324, 325, 660, 661,
	632, 326, 327, 2500, 329, 0, 0, 330, 331, 332,
	333, 652, 334, 0, 398, 335, 336, 337, 399, 693,
	0, 0, 338, 0, 0, 0, 0, 339, 340, 341,
	342, 343, 606, 0, 637, 626, 627, 624, 625, 616,
	0, 0, 604, 0, 0, 0, 0, 602, 603, 0,
	182, 183, 0, 184, 0, 0, 612, 0, 654, 619,
	0, 0, 615, 185, 186, 187, 345, 669, 347, 670,
	188, 671, 672, 0, 189, 351, 352, 190, 191, 622,
	653, 673, 674, 355, 0, 192, 665, 0, 645, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 699, 203, 204, 205, 0, 646,
	647, 649, 0, 648, 650, 206, 207, 408, 208, 675,
	209, 676, 677, 0, 210, 0, 211, 0, 212, 0,
	0, 668, 214, 0, 215, 0, 0, 0, 610, 216,
	218, 217, 219, 655, 656, 633, 700, 0, 0, 0,
	0, 0, 220, 221, 678, 679, 680, 0, 222, 0,
	223, 0, 0, 701, 0, 224, 666, 0, 367, 0,
	0, 225, 226, 0, 0, 227, 228, 662, 664, 703,
	0, 370, 232, 0, 229, 0, 702, 230, 681, 231,
	682, 683, 684, 685, 686, 0, 644, 0, 704, 233,
	234, 235, 705, 236, 237, 238, 0, 240, 239, 0,
	667, 706, 241, 242, 707, 0, 243, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 708, 251,
	252, 254, 253, 605, 0, 634, 663, 255, 687, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	709, 261, 710, 657, 262, 263, 264, 265, 266, 0,
	267, 658, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 688, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	711, 290, 291, 611, 292, 0, 296, 297, 298, 299,
	0, 301, 388, 300, 302, 303, 651, 304, 293, 294,
	305, 712, 306, 689, 390, 307, 0, 314, 308, 309,
	295, 310, 313, 690, 311, 312, 659, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	691, 692, 0, 0, 324, 325, 660, 661, 632, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 652,
	334, 0, 398, 335, 336, 337, 399, 693, 0, 0,
	338, 0, 0, 0, 0, 339, 340, 341, 342, 343,
	606, 0, 637, 626, 627, 624, 625, 616, 0, 0,
	604, 0, 0, 0, 0, 602, 603, 0, 182, 183,
	0, 184, 0, 0, 612, 0, 654, 619, 0, 0,
	615, 185, 186, 187, 2499, 669, 347, 670, 188, 671,
	672, 0, 189, 351, 352, 190, 191, 622, 653, 673,
	674, 355, 0, 192, 665, 0, 645, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 699, 203, 204, 2501, 0, 646, 647, 649,
	0, 648, 650, 206, 207, 408, 208, 675, 209, 676,
	677, 0, 210, 0, 211, 0, 212, 0, 0, 668,
	214, 0, 215, 0, 0, 0, 610, 216, 218, 217,
	219, 655, 656, 633, 700, 0, 0, 0, 0, 0,
	220, 221, 678, 679, 680, 0, 222, 0, 223, 0,
	0, 701, 0, 224, 666, 0, 367, 0, 0, 225,
	226, 0, 0, 227, 228, 662, 664, 703, 0, 370,
	232, 0, 229, 0, 702, 230, 681, 231, 682, 683,
	684, 685, 686, 0, 644, 0, 704, 233, 234, 235,
	705, 236, 237, 238, 0, 240, 239, 0, 667, 706,
	241, 242, 707, 0, 243, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 708, 251, 252, 254,
	253, 605, 0, 634, 663, 255, 687, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 709, 261,
	710, 657, 262, 263, 264, 265, 266, 0, 267, 658,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 688,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 711, 290,
	291, 611, 292, 0, 296, 297, 298, 299, 0, 301,
	388, 300, 302, 303, 651, 304, 293, 294, 305, 712,
	306, 689, 390, 307, 0, 314, 308, 309, 295, 310,
	313, 690, 311, 312, 659, 0, 315, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 691, 692,
	0, 0, 324, 325, 660, 661, 632, 326, 327, 2500,
	329, 0, 0, 330, 331, 332, 333, 652, 334, 0,
	398, 335, 336, 337, 399, 693, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 606, 0,
	637, 626, 627, 624, 625, 616, 0, 0, 604, 0,
	0, 0, 0, 602, 603, 0, 182, 183, 0, 184,
	0, 0, 612, 0, 654, 619, 0, 0, 615, 185,
	186, 187, 345, 669, 347, 670, 188, 671, 672, 0,
	189, 351, 352, 190, 191, 622, 653, 673, 674, 355,
	0, 192, 665, 0, 645, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	699, 203, 204, 205, 0, 646, 647, 649, 0, 648,
	650, 206, 207, 408, 208, 675, 209, 676, 677, 0,
	210, 0, 211, 0, 212, 0, 0, 668, 214, 0,
	215, 0, 0, 0, 610, 216, 218, 217, 219, 655,
	656, 633, 700, 0, 0, 0, 0, 0, 220, 221,
	678, 679, 680, 0, 222, 0, 223, 0, 0, 701,
	0, 224, 666, 0, 367, 0, 0, 225, 226, 0,
	0, 227, 228, 662, 664, 703, 0, 370, 232, 0,
	229, 0, 702, 230, 681, 231, 682, 683, 684, 685,
	686, 0, 644, 0, 704, 233, 234, 235, 705, 236,
	237, 238, 0, 240, 239, 0, 667, 706, 241, 242,
	707, 0, 243, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 379, 249, 708, 251, 252, 254, 253, 0,
	0, 634, 663, 255, 687, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 382, 709, 261, 710, 657,
	262, 263, 264, 265, 266, 0, 267, 658, 268, 385,
	269, 0, 270, 271, 272, 273, 274, 688, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 711, 290, 291, 1548,
	292, 0, 296, 297, 298, 299, 0, 301, 388, 300,
	302, 303, 651, 304, 293, 294, 305, 712, 306, 689,
	390, 307, 0, 314, 308, 309, 295, 310, 313, 690,
	311, 312, 659, 0, 315, 0, 316, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 691, 692, 0, 0,
	324, 325, 660, 661, 632, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 652, 334, 0, 398, 335,
	336, 337, 399, 693, 0, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 0, 637, 626,
	627, 624, 625, 616, 0, 0, 1546, 0, 0, 0,
	0, 1544, 1545, 0, 182, 183, 0, 184, 0, 0,
	1547, 0, 654, 619, 0, 0, 615, 185, 186, 187,
	345, 669, 347, 670, 188, 671, 672, 0, 189, 351,
	352, 190, 191, 0, 653, 673, 674, 355, 0, 192,
	665, 0, 645, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 699, 203,
	204, 205, 0, 646, 647, 649, 0, 648, 650, 206,
	207, 408, 208, 675, 209, 676, 677, 0, 210, 0,
	211, 0, 212, 0, 0, 668, 214, 0, 215, 0,
	0, 0, 360, 216, 218, 217, 219, 655, 656, 633,
	700, 0, 0, 0, 0, 0, 220, 221, 678, 679,
	680, 0, 222, 0, 223, 0, 0, 701, 0, 224,
	666, 0, 367, 0, 0, 225, 226, 0, 0, 227,
	228, 662, 664, 703, 0, 370, 232, 0, 229, 0,
	702, 230, 681, 231, 682, 683, 684, 685, 686, 0,
	644, 0, 704, 233, 234, 235, 705, 236, 237, 238,
	0, 240, 239, 0, 667, 706, 241, 242, 707, 0,
	243, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 249, 708, 251, 252, 254, 253, 0, 0, 634,
	663, 255, 687, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 382, 709, 261, 710, 657, 262, 263,
	264, 265, 266, 0, 267, 658, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 688, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 711, 290, 291, 1548, 292, 0,
	296, 297, 298, 299, 0, 301, 388, 300, 302, 303,
	651, 304, 293, 294, 305, 712, 306, 689, 390, 307,
	0, 314, 308, 309, 295, 310, 313, 690, 311, 312,
	659, 0, 315, 0, 316, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 691, 692, 0, 0, 324, 325,
	660, 661, 632, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 652, 334, 0, 398, 335, 336, 337,
	399, 693, 0, 0, 338, 0, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 0, 637, 626, 627, 624,
	625, 616, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 1547, 0,
	654, 619, 0, 0, 615, 185, 186, 187, 0, 669,
	347, 670, 188, 671, 672, 0, 189, 351, 352, 190,
	191, 622, 653, 673, 674, 355, 0, 192, 665, 0,
	645, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 699, 203, 204, 2501,
	0, 646, 647, 649, 0, 648, 650, 206, 207, 408,
	208, 675, 209, 676, 677, 0, 210, 0, 211, 0,
	212, 0, 0, 668, 214, 0, 215, 0, 0, 0,
	610, 216, 218, 217, 219, 655, 656, 633, 700, 0,
	0, 0, 0, 0, 220, 221, 678, 679, 680, 0,
	222, 0, 223, 0, 0, 701, 0, 224, 666, 0,
	367, 0, 0, 225, 226, 0, 0, 227, 228, 662,
	664, 0, 0, 370, 232, 0, 229, 0, 702, 230,
	681, 231, 682, 683, 684, 685, 686, 0, 644, 0,
	0, 233, 234, 235, 705, 236, 237, 238, 0, 240,
	239, 0, 667, 706, 241, 242, 0, 0, 243, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	708, 251, 252, 254, 253, 605, 0, 634, 663, 255,
	687, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 709, 261, 710, 657, 262, 263, 264, 265,
	266, 0, 267, 658, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 688, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 711, 290, 291, 611, 292, 0, 296, 297,
	298, 299, 0, 301, 388, 300, 302, 303, 651, 304,
	293, 294, 305, 0, 306, 689, 390, 307, 0, 314,
	308, 309, 295, 310, 313, 690, 311, 312, 659, 0,
	315, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 691, 692, 0, 0, 324, 325, 660, 661,
	632, 326, 327, 2500, 329, 0, 0, 330, 331, 332,
	333, 652, 334, 0, 398, 335, 336, 337, 399, 693,
	0, 0, 338, 0, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 637, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 603, 0,
	182, 183, 0, 184, 0, 0, 612, 0, 654, 0,
	0, 0, 615, 185, 186, 187, 345, 346, 347, 348,
	188, 349, 350, 0, 189, 351, 352, 190, 191, 0,
	653, 353, 354, 355, 0, 192, 665, 0, 645, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 699, 203, 204, 205, 0, 646,
	647, 649, 0, 648, 650, 206, 207, 408, 208, 357,
	209, 358, 359, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 360, 216,
	218, 217, 219, 655, 656, 0, 700, 0, 0, 0,
	0, 0, 220, 221, 363, 364, 365, 0, 222, 0,
	223, 0, 0, 701, 0, 224, 666, 0, 367, 0,
	0, 225, 226, 0, 0, 227, 228, 662, 664, 703,
	0, 370, 232, 0, 229, 0, 702, 230, 371, 231,
	372, 373, 374, 375, 376, 0, 377, 0, 704, 233,
	234, 235, 705, 236, 237, 238, 0, 240, 239, 0,
	667, 706, 241, 242, 707, 0, 243, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 708, 251,
	252, 254, 253, 0, 0, 0, 663, 255, 381, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	709, 261, 710, 657, 262, 263, 264, 265, 266, 0,
	267, 658, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 386, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	711, 290, 291, 387, 292, 0, 296, 297, 298, 299,
	0, 301, 388, 300, 302, 303, 651, 304, 293, 294,
	305, 712, 306, 389, 390, 307, 0, 314, 308, 309,
	295, 310, 313, 391, 311, 312, 659, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 660, 661, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 652,
	334, 0, 398, 335, 336, 337, 399, 400, 0, 0,
	338, 0, 0, 0, 0, 339, 340, 341, 342, 343,
	917, 0, 920, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 2132, 0, 344, 0, 0, 0,
	0, 185, 186, 187, 345, 346, 347, 348, 188, 349,
	350, 0, 189, 351, 352, 190, 191, 0, 0, 353,
	354, 355, 0, 192, 356, 0, 775, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 699, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 408, 208, 357, 209, 358,
	359, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 360, 216, 218, 217,
	219, 361, 362, 0, 700, 0, 0, 0, 0, 0,
	220, 221, 363, 364, 365, 0, 222, 0, 223, 0,
	0, 701, 0, 224, 366, 0, 367, 0, 0, 225,
	226, 0, 0, 227, 228, 368, 369, 703, 0, 370,
	232, 0, 229, 0, 702, 230, 371, 231, 372, 373,
	374, 375, 376, 0, 377, 0, 704, 233, 234, 235,
	705, 236, 237, 238, 0, 240, 239, 0, 378, 706,
	241, 242, 707, 0, 243, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 708, 251, 252, 254,
	253, 0, 0, 0, 380, 255, 381, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 709, 261,
	710, 383, 262, 263, 264, 265, 266, 0, 267, 384,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 386,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 711, 290,
	291, 387, 292, 0, 296, 297, 298, 299, 138, 301,
	388, 300, 302, 303, 0, 304, 293, 294, 305, 712,
	306, 389, 390, 307, 0, 314, 308, 309, 295, 310,
	313, 391, 311, 312, 392, 0, 315, 140, 316, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 924, 400, 0, 0, 338, 0,
	0, 0, 132, 339, 340, 341, 342, 343, 588, 133,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 123, 0, 344, 0, 0, 0, 0, 185,
	186, 187, 345, 346, 347, 348, 188, 349, 350, 0,
	189, 351, 352, 190, 191, 0, 0, 353, 354, 355,
	0, 192, 356, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 408, 208, 357, 209, 358, 359, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 360, 216, 218, 217, 219, 361,
	362, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	363, 364, 365, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 366, 0, 367, 0, 0, 225, 226, 0,
	0, 227, 228, 368, 369, 0, 0, 370, 232, 0,
	229, 0, 0, 230, 371, 231, 372, 373, 374, 375,
	376, 0, 377, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 378, 0, 241, 242,
	0, 0, 243, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 379, 249, 0, 251, 252, 254, 253, 0,
	0, 0, 380, 255, 381, 256, 257, 0, 258, 0,
	753, 259, 0, 0, 260, 382, 0, 261, 0, 383,
	262, 263, 264, 265, 266, 0, 267, 384, 268, 385,
	269, 0, 270, 271, 272, 273, 274, 386, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 0, 290, 291, 387,
	292, 0, 296, 297, 298, 299, 138, 301, 388, 300,
	302, 303, 0, 304, 293, 294, 305, 0, 306, 389,
	390, 307, 0, 314, 308, 309, 295, 310, 313, 391,
	311, 312, 392, 0, 315, 140, 316, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 394, 395, 0, 0,
	324, 325, 396, 397, 0, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 0, 334, 0, 398, 335,
	336, 337, 924, 400, 0, 0, 338, 0, 0, 0,
	132, 339, 340, 341, 342, 343, 0, 133, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 0, 184, 747, 0,
	1191, 0, 344, 0, 0, 0, 0, 185, 186, 187,
	345, 346, 347, 348, 188, 349, 350, 0, 189, 351,
	352, 190, 191, 0, 0, 353, 354, 355, 0, 192,
	356, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 408, 208, 357, 209, 358, 359, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 360, 216, 218, 217, 219, 361, 362, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 363, 364,
	365, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	366, 0, 367, 0, 0, 225, 226, 0, 0, 227,
	228, 368, 369, 0, 0, 370, 232, 0, 229, 0,
	0, 230, 371, 231, 372, 373, 374, 375, 376, 0,
	377, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 378, 0, 241, 242, 0, 0,
	243, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 249, 0, 251, 252, 254, 253, 0, 0, 0,
	380, 255, 381, 256, 257, 0, 258, 0, 753, 259,
	0, 0, 260, 382, 0, 261, 0, 383, 262, 263,
	264, 265, 266, 0, 267, 384, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 386, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 0, 290, 291, 387, 292, 0,
	296, 297, 298, 299, 138, 301, 388, 300, 302, 303,
	0, 304, 293, 294, 305, 0, 306, 389, 390, 307,
	0, 314, 308, 309, 295, 310, 313, 391, 311, 312,
	392, 0, 315, 140, 316, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 394, 395, 0, 0, 324, 325,
	396, 397, 0, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 0, 334, 0, 398, 335, 336, 337,
	924, 400, 0, 0, 338, 0, 0, 0, 132, 339,
	340, 341, 342, 343, 588, 133, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 747, 0, 1191, 0,
	344, 0, 0, 0, 0, 185, 186, 187, 345, 346,
	347, 348, 188, 349, 350, 0, 189, 351, 352, 190,
	191, 0, 0, 353, 354, 355, 0, 192, 356, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 408,
	208, 357, 209, 358, 359, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	360, 216, 218, 217, 219, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 363, 364, 365, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 366, 0,
	367, 0, 0, 225, 226, 0, 0, 227, 228, 368,
	369, 0, 0, 370, 232, 0, 229, 0, 0, 230,
	371, 231, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 378, 0, 241, 242, 0, 0, 243, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 380, 255,
	381, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 0, 261, 0, 383, 262, 263, 264, 265,
	266, 0, 267, 384, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 386, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 387, 292, 0, 296, 297,
	298, 299, 138, 301, 388, 300, 302, 303, 0, 304,
	293, 294, 305, 0, 306, 389, 390, 307, 0, 314,
	308, 309, 295, 310, 313, 391, 311, 312, 392, 0,
	315, 140, 316, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 924, 400,
	0, 0, 338, 0, 0, 0, 132, 339, 340, 341,
	342, 343, 1876, 133, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 123, 0, 344, 0,
	0, 0, 0, 185, 186, 187, 345, 346, 347, 348,
	188, 349, 350, 0, 189, 351, 352, 190, 191, 0,
	0, 353, 354, 355, 0, 192, 356, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 408, 208, 357,
	209, 358, 359, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 360, 216,
	218, 217, 219, 361, 362, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 363, 364, 365, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 366, 0, 367, 0,
	0, 225, 226, 0, 0, 227, 228, 368, 369, 0,
	0, 370, 232, 0, 229, 0, 0, 230, 371, 231,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	378, 0, 241, 242, 0, 0, 243, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 0, 251,
	252, 254, 253, 0, 0, 0, 380, 255, 381, 256,
	257, 0, 258, 0, 753, 259, 0, 0, 260, 382,
	0, 261, 0, 383, 262, 263, 264, 265, 266, 0,
	267, 384, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 386, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 387, 292, 0, 296, 297, 298, 299,
	0, 301, 388, 300, 302, 303, 0, 304, 293, 294,
	305, 0, 306, 389, 390, 307, 0, 314, 308, 309,
	295, 310, 313, 391, 311, 312, 392, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 0, 0,
	338, 0, 0, 0, 0, 339, 340, 341, 342, 343,
	746, 0, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 747, 0, 752, 0, 344, 0, 0, 0,
	0, 185, 186, 187, 345, 346, 347, 348, 188, 349,
	350, 0, 189, 351, 352, 190, 191, 0, 0, 353,
	354, 355, 0, 192, 356, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 408, 208, 357, 209, 358,
	359, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 360, 216, 218, 217,
	219, 361, 362, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 363, 364, 365, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 366, 0, 367, 0, 0, 225,
	226, 0, 0, 227, 228, 368, 369, 0, 0, 370,
	232, 0, 229, 0, 0, 230, 371, 231, 372, 373,
	374, 375, 376, 0, 377, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 378, 0,
	241, 242, 0, 0, 243, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 0, 251, 252, 254,
	253, 0, 0, 0, 380, 255, 381, 256, 257, 0,
	258, 0, 753, 259, 0, 0, 260, 382, 0, 261,
	0, 383, 262, 263, 264, 265, 266, 0, 267, 384,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 386,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 387, 292, 0, 296, 297, 298, 299, 0, 301,
	388, 300, 302, 303, 0, 304, 293, 294, 305, 0,
	306, 389, 390, 307, 0, 314, 308, 309, 295, 310,
	313, 391, 311, 312, 392, 0, 315, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	747, 0, 752, 344, 0, 0, 0, 0, 185, 186,
	187, 345, 346, 347, 348, 188, 349, 350, 0, 189,
	351, 352, 190, 191, 0, 0, 353, 354, 355, 0,
	192, 356, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 408, 208, 357, 209, 358, 359, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 360, 216, 218, 217, 219, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 363,
	364, 365, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 366, 0, 367, 0, 0, 225, 226, 0, 0,
	227, 228, 368, 369, 0, 0, 370, 232, 0, 229,
	0, 0, 230, 371, 231, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 378, 0, 241, 242, 0,
	0, 243, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 753,
	259, 0, 0, 260, 382, 0, 261, 0, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 0, 301, 388, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 389, 390,
	307, 0, 314, 308, 309, 295, 310, 313, 391, 311,
	312, 392, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 0, 0, 338, 0, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 747, 0, 752,
	344, 0, 0, 0, 0, 185, 186, 187, 345, 346,
	347, 348, 188, 349, 350, 0, 189, 351, 352, 190,
	191, 0, 0, 353, 354, 355, 0, 192, 356, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 408,
	208, 357, 209, 358, 359, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	360, 216, 218, 217, 219, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 363, 364, 365, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 366, 0,
	367, 0, 0, 225, 226, 0, 0, 227, 228, 368,
	369, 0, 0, 370, 232, 0, 229, 0, 0, 230,
	371, 231, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 378, 0, 241, 242, 0, 0, 243, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 380, 255,
	381, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 0, 261, 0, 383, 262, 263, 264, 265,
	266, 0, 267, 384, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 386, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 387, 292, 0, 296, 297,
	298, 299, 0, 301, 388, 300, 302, 303, 0, 304,
	293, 294, 305, 0, 306, 389, 390, 307, 0, 314,
	308, 309, 295, 310, 313, 391, 311, 312, 392, 0,
	315, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	0, 0, 338, 0, 0, 0, 0, 339, 340, 341,
	342, 343, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 344, 1224, 0, 0,
	0, 185, 186, 187, 345, 346, 347, 348, 188, 349,
	350, 0, 189, 351, 352, 190, 191, 0, 0, 353,
	354, 355, 0, 192, 356, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 408, 208, 357, 209, 358,
	359, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 360, 216, 218, 217,
	219, 361, 362, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 363, 364, 365, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 366, 0, 367, 0, 0, 225,
	226, 0, 0, 227, 228, 368, 369, 0, 0, 370,
	232, 0, 229, 0, 0, 230, 371, 231, 372, 373,
	374, 375, 376, 0, 377, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 378, 0,
	241, 242, 0, 0, 243, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 0, 251, 252, 254,
	253, 0, 0, 0, 380, 255, 381, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 0, 261,
	0, 383, 262, 263, 264, 265, 266, 0, 267, 384,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 386,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 387, 292, 0, 296, 297, 298, 299, 0, 301,
	388, 300, 302, 303, 0, 304, 293, 294, 305, 0,
	306, 389, 390, 307, 0, 314, 308, 309, 295, 310,
	313, 391, 311, 312, 392, 0, 315, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 0, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 1692, 344, 0, 0, 0, 0, 185, 186,
	187, 345, 346, 347, 348, 188, 349, 350, 0, 189,
	351, 352, 190, 191, 0, 0, 353, 354, 355, 0,
	192, 356, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 408, 208, 357, 209, 358, 359, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 360, 216, 218, 217, 219, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 363,
	364, 365, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 366, 0, 367, 0, 0, 225, 226, 0, 0,
	227, 228, 368, 369, 0, 0, 370, 232, 0, 229,
	0, 0, 230, 371, 231, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 378, 0, 241, 242, 0,
	0, 243, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 382, 0, 261, 0, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 0, 301, 388, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 389, 390,
	307, 0, 314, 308, 309, 295, 310, 313, 391, 311,
	312, 392, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 0, 0, 338, 0, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 2045,
	344, 0, 0, 0, 0, 185, 186, 187, 345, 346,
	347, 348, 188, 349, 350, 0, 189, 351, 352, 190,
	191, 0, 0, 353, 354, 355, 0, 192, 356, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 408,
	208, 357, 209, 358, 359, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	360, 216, 218, 217, 219, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 363, 364, 365, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 366, 0,
	367, 0, 0, 225, 226, 0, 0, 227, 228, 368,
	369, 0, 0, 370, 232, 0, 229, 0, 0, 230,
	371, 231, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 378, 0, 241, 242, 0, 0, 243, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 380, 255,
	381, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 0, 261, 0, 383, 262, 263, 264, 265,
	266, 0, 267, 384, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 386, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 387, 292, 0, 296, 297,
	298, 299, 0, 301, 388, 300, 302, 303, 0, 304,
	293, 294, 305, 0, 306, 389, 390, 307, 0, 314,
	308, 309, 295, 310, 313, 391, 311, 312, 392, 0,
	315, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	0, 0, 338, 0, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 637, 626, 627, 624, 625, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 1194, 344, 0, 0,
	0, 0, 185, 186, 187, 345, 669, 347, 670, 188,
	671, 672, 0, 189, 351, 352, 190, 191, 0, 0,
	673, 674, 355, 0, 192, 356, 0, 775, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 699, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 408, 208, 675, 209,
	676, 677, 0, 210, 0, 211, 0, 212, 0, 0,
	668, 214, 0, 215, 0, 0, 0, 360, 216, 218,
	217, 219, 361, 362, 633, 700, 0, 0, 0, 0,
	0, 220, 221, 678, 679, 680, 0, 222, 0, 223,
	0, 0, 701, 0, 224, 366, 0, 367, 0, 0,
	225, 226, 0, 0, 227, 228, 368, 369, 703, 0,
	370, 232, 0, 229, 0, 702, 230, 681, 231, 682,
	683, 684, 685, 686, 0, 644, 0, 704, 233, 234,
	235, 705, 236, 237, 238, 0, 240, 239, 0, 378,
	706, 241, 242, 707, 0, 243, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 379, 249, 708, 251, 252,
	254, 253, 0, 0, 634, 380, 255, 687, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 382, 709,
	261, 710, 383, 262, 263, 264, 265, 266, 0, 267,
	384, 268, 385, 269, 0, 270, 271, 272, 273, 274,
	688, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 711,
	290, 291, 387, 292, 0, 296, 297, 298, 299, 0,
	301, 388, 300, 302, 303, 0, 304, 293, 294, 305,
	712, 306, 689, 390, 307, 0, 314, 308, 309, 295,
	310, 313, 690, 311, 312, 392, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 691,
	692, 0, 0, 324, 325, 396, 397, 632, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 0, 334,
	0, 398, 335, 336, 337, 399, 693, 0, 493, 338,
	179, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 344, 0, 0, 0, 0, 185,
	186, 187, 345, 346, 347, 348, 188, 349, 350, 0,
	189, 351, 352, 190, 191, 0, 0, 353, 354, 355,
	0, 192, 356, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 175, 208, 357, 209, 358, 359, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 360, 216, 218, 217, 219, 361,
	362, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	363, 364, 365, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 366, 0, 367, 0, 0, 225, 226, 0,
	0, 227, 228, 368, 369, 0, 0, 370, 232, 0,
	229, 0, 0, 230, 371, 231, 372, 373, 374, 375,
	376, 0, 377, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 378, 0, 241, 242,
	0, 0, 243, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 379, 249, 0, 251, 252, 254, 253, 0,
	0, 0, 380, 255, 381, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 382, 0, 261, 0, 383,
	262, 263, 264, 265, 266, 0, 267, 384, 268, 385,
	269, 0, 270, 271, 272, 273, 274, 386, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 0, 290, 291, 387,
	292, 0, 296, 297, 298, 299, 0, 301, 388, 300,
	302, 303, 0, 304, 293, 294, 305, 0, 306, 389,
	390, 307, 0, 314, 308, 309, 295, 310, 313, 391,
	311, 312, 392, 0, 315, 174, 316, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 394, 395, 0, 0,
	324, 325, 396, 397, 0, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 0, 334, 0, 398, 335,
	336, 337, 399, 400, 0, 172, 338, 179, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 344, 0, 178, 0, 0, 185, 186, 187, 345,
	346, 347, 348, 188, 349, 350, 0, 189, 351, 352,
	190, 191, 0, 0, 353, 354, 355, 0, 192, 356,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	175, 208, 357, 209, 358, 359, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 360, 216, 218, 217, 219, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 363, 364, 365,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 366,
	0, 367, 0, 0, 225, 226, 0, 0, 227, 228,
	368, 369, 0, 0, 370, 232, 0, 229, 0, 0,
	230, 371, 231, 372, 373, 374, 375, 376, 0, 377,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 378, 0, 241, 242, 0, 0, 243,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 380,
	255, 381, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 382, 0, 261, 0, 383, 262, 263, 264,
	265, 266, 0, 267, 384, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 386, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 387, 292, 0, 296,
	297, 298, 299, 0, 301, 388, 300, 302, 303, 0,
	304, 293, 294, 305, 0, 306, 389, 390, 307, 0,
	314, 308, 309, 295, 310, 313, 391, 311, 312, 392,
	0, 315, 174, 316, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 0, 179, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 344, 0, 0, 0,
	178, 185, 186, 187, 345, 346, 347, 348, 188, 349,
	350, 0, 189, 351, 352, 190, 191, 0, 0, 353,
	354, 355, 0, 192, 356, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 175, 208, 357, 209, 358,
	359, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 360, 216, 218, 217,
	219, 361, 362, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 363, 364, 365, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 366, 0, 367, 0, 0, 225,
	226, 0, 0, 227, 228, 368, 369, 0, 0, 370,
	232, 0, 229, 0, 0, 230, 371, 231, 372, 373,
	374, 375, 376, 0, 377, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 378, 0,
	241, 242, 0, 0, 243, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 0, 251, 252, 254,
	253, 0, 0, 0, 380, 255, 381, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 0, 261,
	0, 383, 262, 263, 264, 265, 266, 0, 267, 384,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 386,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 387, 292, 0, 296, 297, 298, 299, 0, 301,
	388, 300, 302, 303, 0, 304, 293, 294, 305, 0,
	306, 389, 390, 307, 0, 314, 308, 309, 295, 310,
	313, 391, 311, 312, 392, 0, 315, 174, 316, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 179, 338, 0,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 344, 0, 0, 0, 178, 185, 186, 187, 345,
	346, 347, 348, 188, 349, 350, 0, 189, 351, 352,
	190, 191, 0, 0, 353, 354, 355, 0, 192, 356,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	408, 208, 357, 209, 358, 359, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 360, 216, 218, 217, 219, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 363, 364, 365,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 366,
	0, 367, 0, 0, 225, 226, 0, 0, 227, 228,
	368, 369, 0, 0, 370, 232, 0, 229, 0, 0,
	230, 371, 231, 372, 373, 374, 375, 376, 0, 377,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 378, 0, 241, 242, 0, 0, 243,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 380,
	255, 381, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 382, 0, 261, 0, 383, 262, 263, 264,
	265, 266, 0, 267, 384, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 386, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 387, 292, 0, 296,
	297, 298, 299, 0, 301, 388, 300, 302, 303, 0,
	304, 293, 294, 305, 0, 306, 389, 390, 307, 0,
	314, 308, 309, 295, 310, 313, 391, 311, 312, 392,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 0, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 974, 0, 920, 978, 0, 0, 0,
	976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 182, 183, 0, 184, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 185, 186, 187, 345, 346, 347,
	348, 188, 349, 350, 0, 189, 351, 352, 190, 191,
	0, 0, 353, 354, 355, 0, 192, 356, 0, 775,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 699, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 408, 208,
	357, 209, 358, 359, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 360,
	216, 218, 217, 219, 361, 362, 0, 700, 0, 0,
	0, 0, 0, 220, 221, 363, 364, 365, 0, 222,
	0, 223, 0, 0, 701, 0, 224, 366, 0, 367,
	0, 0, 225, 226, 0, 0, 227, 228, 368, 369,
	703, 0, 370, 232, 0, 229, 0, 702, 230, 371,
	231, 372, 373, 374, 375, 376, 0, 377, 0, 704,
	233, 234, 235, 705, 236, 237, 238, 0, 240, 239,
	0, 378, 706, 241, 242, 707, 0, 243, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 249, 708,
	251, 252, 254, 253, 0, 0, 0, 380, 255, 381,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	382, 709, 261, 710, 383, 262, 263, 264, 265, 266,
	0, 267, 384, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 386, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 711, 290, 291, 387, 292, 0, 296, 297, 298,
	299, 0, 301, 388, 300, 302, 303, 0, 304, 293,
	294, 305, 712, 306, 389, 390, 307, 0, 314, 308,
	309, 295, 310, 313, 391, 311, 312, 392, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 394, 395, 0, 0, 324, 325, 396, 397, 0,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	0, 334, 0, 398, 335, 336, 337, 399, 400, 920,
	978, 338, 0, 0, 976, 0, 339, 340, 341, 342,
	343, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 185, 186,
	187, 345, 346, 347, 348, 188, 349, 350, 0, 189,
	351, 352, 190, 191, 0, 0, 353, 354, 355, 0,
	192, 356, 0, 775, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 699,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 408, 208, 357, 209, 358, 359, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 360, 216, 218, 217, 219, 361, 362,
	0, 700, 0, 0, 0, 0, 0, 220, 221, 363,
	364, 365, 0, 222, 0, 223, 0, 0, 701, 0,
	224, 366, 0, 367, 0, 0, 225, 226, 0, 0,
	227, 228, 368, 369, 703, 0, 370, 232, 0, 229,
	0, 702, 230, 371, 231, 372, 373, 374, 375, 376,
	0, 377, 0, 704, 233, 234, 235, 705, 236, 237,
	238, 0, 240, 239, 0, 378, 706, 241, 242, 707,
	0, 243, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 708, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 382, 709, 261, 710, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 711, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 0, 301, 388, 300, 302,
	303, 0, 304, 293, 294, 305, 712, 306, 389, 390,
	307, 0, 314, 308, 309, 295, 310, 313, 391, 311,
	312, 392, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 920, 978, 338, 0, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 185, 186, 187, 345, 346, 347, 348, 188,
	349, 350, 0, 189, 351, 352, 190, 191, 0, 0,
	353, 354, 355, 0, 192, 356, 0, 775, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 699, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 408, 208, 357, 209,
	358, 359, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 360, 216, 218,
	217, 219, 361, 362, 0, 700, 0, 0, 0, 0,
	0, 220, 221, 363, 364, 365, 0, 222, 0, 223,
	0, 0, 701, 0, 224, 366, 0, 367, 0, 0,
	225, 226, 0, 0, 227, 228, 368, 369, 703, 0,
	370, 232, 0, 229, 0, 702, 230, 371, 231, 372,
	373, 374, 375, 376, 0, 377, 0, 704, 233, 234,
	235, 705, 236, 237, 238, 0, 240, 239, 0, 378,
	706, 241, 242, 707, 0, 243, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 379, 249, 708, 251, 252,
	254, 253, 0, 0, 0, 380, 255, 381, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 382, 709,
	261, 710, 383, 262, 263, 264, 265, 266, 0, 267,
	384, 268, 385, 269, 0, 270, 271, 272, 273, 274,
	386, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 711,
	290, 291, 387, 292, 0, 296, 297, 298, 299, 0,
	301, 388, 300, 302, 303, 0, 304, 293, 294, 305,
	712, 306, 389, 390, 307, 0, 314, 308, 309, 295,
	310, 313, 391, 311, 312, 392, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 394,
	395, 0, 0, 324, 325, 396, 397, 0, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 0, 334,
	0, 398, 335, 336, 337, 399, 400, 920, 0, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 185, 186, 187, 345,
	346, 347, 348, 188, 349, 350, 0, 189, 351, 352,
	190, 191, 0, 0, 353, 354, 355, 0, 192, 356,
	0, 775, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 699, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	408, 208, 357, 209, 358, 359, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 360, 216, 218, 217, 219, 361, 362, 0, 700,
	0, 0, 0, 0, 0, 220, 221, 363, 364, 365,
	0, 222, 0, 223, 0, 0, 701, 0, 224, 366,
	0, 367, 0, 0, 225, 226, 0, 0, 227, 228,
	368, 369, 703, 0, 370, 232, 0, 229, 0, 702,
	230, 371, 231, 372, 373, 374, 375, 376, 0, 377,
	0, 704, 233, 234, 235, 705, 236, 237, 238, 0,
	240, 239, 0, 378, 706, 241, 242, 707, 0, 243,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 708, 251, 252, 254, 253, 0, 0, 0, 380,
	255, 381, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 382, 709, 261, 710, 383, 262, 263, 264,
	265, 266, 0, 267, 384, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 386, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 711, 290, 291, 387, 292, 0, 296,
	297, 298, 299, 0, 301, 388, 300, 302, 303, 0,
	304, 293, 294, 305, 712, 306, 389, 390, 307, 0,
	314, 308, 309, 295, 310, 313, 391, 311, 312, 392,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 179, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	185, 186, 187, 345, 346, 347, 348, 188, 349, 350,
	0, 189, 351, 352, 190, 191, 0, 0, 353, 354,
	355, 1627, 192, 356, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 1625, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 408, 208, 357, 209, 358, 359,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 360, 216, 218, 217, 219,
	361, 362, 0, 1669, 0, 0, 0, 0, 0, 220,
	221, 363, 364, 365, 0, 222, 0, 223, 1630, 0,
	0, 0, 224, 366, 0, 367, 0, 0, 225, 226,
	0, 0, 227, 228, 368, 369, 0, 0, 370, 232,
	1667, 229, 0, 0, 230, 371, 231, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 378, 0, 241,
	242, 0, 0, 243, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 380, 255, 381, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 0, 261, 0,
	383, 262, 263, 264, 265, 266, 0, 267, 384, 268,
	385, 269, 1629, 270, 271, 272, 273, 274, 386, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	387, 292, 0, 296, 297, 298, 299, 0, 301, 388,
	300, 302, 303, 0, 304, 293, 294, 305, 0, 306,
	389, 390, 307, 0, 314, 308, 309, 295, 310, 313,
	391, 311, 312, 392, 0, 315, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 1668, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 179, 0, 338, 0, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 185, 186, 187, 345, 346, 347,
	348, 188, 349, 350, 0, 189, 351, 352, 190, 191,
	0, 0, 353, 354, 355, 1627, 192, 356, 0, 0,
	1622, 193, 194, 195, 0, 197, 198, 199, 196, 1625,
	200, 0, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 408, 208,
	357, 209, 358, 359, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 360,
	216, 218, 217, 219, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 363, 364, 365, 0, 222,
	0, 223, 1630, 0, 0, 0, 224, 366, 0, 367,
	0, 0, 225, 226, 0, 0, 227, 228, 1621, 369,
	0, 0, 370, 232, 0, 229, 0, 0, 230, 371,
	231, 372, 373, 374, 375, 376, 0, 377, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 378, 0, 241, 242, 0, 0, 243, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 249, 0,
	251, 252, 254, 253, 0, 0, 0, 380, 255, 381,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	382, 0, 261, 0, 383, 262, 263, 264, 265, 266,
	0, 267, 384, 268, 385, 269, 1629, 270, 271, 272,
	273, 274, 386, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 0, 290, 291, 387, 292, 0, 296, 297, 298,
	299, 0, 301, 388, 300, 302, 303, 0, 304, 293,
	294, 305, 0, 306, 389, 390, 307, 0, 314, 308,
	309, 295, 310, 313, 391, 311, 312, 392, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 394, 395, 0, 0, 324, 325, 396, 397, 0,
	326, 327, 328, 329, 0, 1628, 330, 331, 332, 333,
	0, 334, 0, 398, 335, 336, 337, 399, 400, 0,
	895, 338, 179, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 344, 0, 0, 0,
	0, 185, 186, 187, 345, 346, 347, 348, 188, 349,
	350, 0, 189, 351, 352, 190, 191, 0, 0, 353,
	354, 355, 0, 192, 356, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 408, 208, 357, 209, 358,
	359, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 360, 216, 218, 217,
	219, 361, 362, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 363, 364, 365, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 366, 0, 367, 0, 0, 225,
	226, 0, 0, 227, 228, 368, 369, 0, 0, 370,
	232, 0, 229, 0, 0, 230, 371, 231, 372, 373,
	374, 375, 376, 0, 377, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 378, 0,
	241, 242, 0, 0, 243, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 0, 251, 252, 254,
	253, 0, 0, 0, 380, 255, 381, 256, 257, 0,
	258, 0, 753, 259, 0, 0, 260, 382, 0, 261,
	0, 383, 262, 263, 264, 265, 266, 0, 267, 384,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 386,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 387, 292, 0, 296, 297, 298, 299, 0, 301,
	388, 300, 302, 303, 0, 304, 293, 294, 305, 0,
	306, 389, 390, 307, 0, 314, 308, 309, 295, 310,
	313, 391, 311, 312, 392, 0, 315, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 759, 338, 179,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 185, 186,
	187, 345, 346, 347, 348, 188, 349, 350, 0, 189,
	351, 352, 190, 191, 0, 0, 353, 354, 355, 0,
	192, 356, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 408, 208, 357, 209, 358, 359, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 360, 216, 218, 217, 219, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 363,
	364, 365, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 366, 0, 367, 0, 0, 225, 226, 0, 0,
	227, 228, 761, 369, 0, 0, 370, 232, 0, 229,
	0, 0, 230, 371, 231, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 378, 0, 241, 242, 0,
	0, 243, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 753,
	259, 0, 0, 260, 382, 0, 261, 0, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 0, 301, 388, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 389, 390,
	307, 0, 314, 308, 309, 295, 310, 313, 391, 311,
	312, 392, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 0, 755, 338, 179, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 185, 186, 187, 345, 346,
	347, 348, 188, 349, 350, 0, 189, 351, 352, 190,
	191, 0, 0, 353, 354, 355, 0, 192, 356, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 408,
	208, 357, 209, 358, 359, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	360, 216, 218, 217, 219, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 363, 364, 365, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 366, 0,
	367, 0, 0, 225, 226, 0, 0, 227, 228, 757,
	369, 0, 0, 370, 232, 0, 229, 0, 0, 230,
	371, 231, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 378, 0, 241, 242, 0, 0, 243, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 380, 255,
	381, 256, 257, 0, 258, 0, 753, 259, 0, 0,
	260, 382, 0, 261, 0, 383, 262, 263, 264, 265,
	266, 0, 267, 384, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 386, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 387, 292, 0, 296, 297,
	298, 299, 0, 301, 388, 300, 302, 303, 0, 304,
	293, 294, 305, 0, 306, 389, 390, 307, 0, 314,
	308, 309, 295, 310, 313, 391, 311, 312, 392, 0,
	315, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	0, 425, 338, 179, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 424, 184, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 185, 186, 187, 345, 346, 347, 348, 188,
	349, 350, 0, 189, 351, 352, 190, 191, 0, 0,
	353, 354, 355, 0, 192, 356, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 408, 208, 357, 209,
	358, 359, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 360, 216, 218,
	217, 219, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 363, 364, 365, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 366, 0, 367, 0, 0,
	225, 226, 0, 0, 227, 228, 368, 369, 0, 0,
	370, 232, 0, 229, 0, 0, 230, 371, 231, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 378,
	0, 241, 242, 0, 0, 243, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 379, 249, 0, 251, 252,
	254, 253, 0, 0, 0, 380, 255, 381, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 382, 0,
	261, 0, 383, 262, 263, 264, 265, 266, 0, 267,
	384, 268, 385, 423, 0, 270, 271, 272, 273, 274,
	386, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 0,
	290, 291, 387, 292, 0, 296, 297, 298, 299, 0,
	301, 388, 300, 302, 303, 0, 304, 293, 294, 305,
	0, 306, 389, 390, 307, 0, 314, 308, 309, 295,
	310, 313, 391, 311, 312, 392, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 394,
	395, 0, 0, 324, 325, 396, 397, 0, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 0, 334,
	0, 398, 335, 336, 337, 399, 400, 179, 0, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 344, 0, 1610, 0, 0, 185, 186, 187, 345,
	346, 347, 348, 188, 349, 350, 0, 189, 351, 352,
	190, 191, 0, 0, 353, 354, 355, 0, 192, 356,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	408, 208, 357, 209, 358, 359, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 360, 216, 218, 217, 219, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 363, 364, 365,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 366,
	0, 367, 0, 0, 225, 226, 0, 0, 227, 228,
	368, 369, 0, 0, 370, 232, 0, 229, 0, 0,
	230, 371, 231, 372, 373, 374, 375, 376, 0, 377,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 378, 0, 241, 242, 0, 0, 243,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 380,
	255, 381, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 382, 0, 261, 0, 383, 262, 263, 264,
	265, 266, 0, 267, 384, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 386, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 387, 292, 0, 296,
	297, 298, 299, 0, 301, 388, 300, 302, 303, 0,
	304, 293, 294, 305, 0, 306, 389, 390, 307, 0,
	314, 308, 309, 295, 310, 313, 391, 311, 312, 392,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 179, 2198, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	185, 186, 187, 345, 346, 347, 348, 188, 349, 350,
	0, 189, 351, 352, 190, 191, 0, 0, 353, 354,
	355, 0, 192, 356, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 408, 208, 357, 209, 358, 359,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 360, 216, 218, 217, 219,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 363, 364, 365, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 366, 0, 367, 0, 0, 225, 226,
	0, 0, 227, 228, 368, 369, 0, 0, 370, 232,
	0, 229, 0, 0, 230, 371, 231, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 378, 0, 241,
	242, 0, 0, 243, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 380, 255, 381, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 0, 261, 0,
	383, 262, 263, 264, 265, 266, 0, 267, 384, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 386, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	387, 292, 0, 296, 297, 298, 299, 0, 301, 388,
	300, 302, 303, 0, 304, 293, 294, 305, 0, 306,
	389, 390, 307, 0, 314, 308, 309, 295, 310, 313,
	391, 311, 312, 392, 0, 315, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 179, 2198, 338, 0, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 185, 186, 187, 345, 346, 347,
	348, 188, 349, 350, 0, 189, 351, 352, 190, 191,
	0, 0, 353, 354, 355, 0, 192, 356, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 408, 208,
	357, 209, 358, 359, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 360,
	216, 218, 217, 219, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 363, 364, 365, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 366, 0, 367,
	0, 0, 225, 226, 0, 0, 227, 228, 368, 369,
	0, 0, 370, 232, 0, 229, 0, 0, 230, 371,
	231, 372, 373, 374, 375, 376, 0, 377, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 378, 0, 241, 242, 0, 0, 243, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 249, 0,
	251, 252, 254, 253, 0, 0, 0, 380, 255, 381,
	256, 257, 0, 258, 0, 0, 2195, 0, 0, 260,
	382, 0, 261, 0, 383, 262, 263, 264, 265, 266,
	0, 267, 384, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 386, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 0, 290, 291, 387, 292, 0, 296, 297, 298,
	299, 0, 301, 388, 300, 302, 303, 0, 304, 293,
	294, 305, 0, 306, 389, 390, 307, 0, 314, 308,
	309, 295, 310, 313, 391, 311, 312, 392, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 394, 395, 0, 0, 324, 325, 396, 397, 0,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	0, 334, 0, 398, 335, 336, 337, 399, 400, 179,
	0, 338, 0, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 185, 186,
	187, 345, 346, 347, 348, 188, 349, 350, 0, 189,
	351, 352, 190, 191, 0, 0, 353, 354, 355, 0,
	192, 356, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 408, 208, 357, 209, 358, 359, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 360, 216, 218, 217, 219, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 363,
	364, 365, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 366, 0, 367, 0, 0, 225, 226, 0, 0,
	227, 228, 368, 369, 0, 0, 370, 232, 0, 229,
	0, 0, 230, 371, 231, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 378, 0, 241, 242, 0,
	0, 243, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 753,
	259, 0, 0, 260, 382, 0, 261, 0, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 0, 301, 388, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 389, 390,
	307, 0, 314, 308, 309, 295, 310, 313, 391, 311,
	312, 392, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 0, 1380, 338, 179, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 185, 186, 187, 345, 346,
	347, 348, 188, 349, 350, 0, 189, 351, 352, 190,
	191, 0, 0, 353, 354, 355, 0, 192, 356, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 408,
	208, 357, 209, 358, 359, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	360, 216, 218, 217, 219, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 363, 364, 365, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 366, 0,
	367, 0, 0, 225, 226, 0, 0, 227, 228, 368,
	369, 0, 0, 370, 232, 0, 229, 0, 0, 230,
	371, 231, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 378, 0, 241, 242, 0, 0, 243, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 380, 255,
	381, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 0, 261, 0, 383, 262, 263, 264, 265,
	266, 0, 267, 384, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 386, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 387, 292, 0, 296, 297,
	298, 299, 0, 301, 388, 300, 302, 303, 0, 304,
	293, 294, 305, 0, 306, 389, 390, 307, 0, 314,
	308, 309, 295, 310, 313, 391, 311, 312, 392, 0,
	315, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	0, 1378, 338, 179, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 185, 186, 187, 345, 346, 347, 348, 188,
	349, 350, 0, 189, 351, 352, 190, 191, 0, 0,
	353, 354, 355, 0, 192, 356, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 408, 208, 357, 209,
	358, 359, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 360, 216, 218,
	217, 219, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 363, 364, 365, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 366, 0, 367, 0, 0,
	225, 226, 0, 0, 227, 228, 368, 369, 0, 0,
	370, 232, 0, 229, 0, 0, 230, 371, 231, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 378,
	0, 241, 242, 0, 0, 243, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 379, 249, 0, 251, 252,
	254, 253, 0, 0, 0, 380, 255, 381, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 382, 0,
	261, 0, 383, 262, 263, 264, 265, 266, 0, 267,
	384, 268, 385, 269, 0, 270, 271, 272, 273, 274,
	386, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 0,
	290, 291, 387, 292, 0, 296, 297, 298, 299, 0,
	301, 388, 300, 302, 303, 0, 304, 293, 294, 305,
	0, 306, 389, 390, 307, 0, 314, 308, 309, 295,
	310, 313, 391, 311, 312, 392, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 394,
	395, 0, 0, 324, 325, 396, 397, 0, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 0, 334,
	0, 398, 335, 336, 337, 399, 400, 179, 0, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	0, 0, 0, 182, 183, 1360, 184, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 185, 186, 187, 345,
	346, 347, 348, 188, 349, 350, 0, 189, 351, 352,
	190, 191, 0, 0, 353, 354, 355, 0, 192, 356,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	408, 208, 357, 209, 358, 359, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 360, 216, 218, 217, 219, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 363, 364, 365,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 366,
	0, 367, 0, 0, 225, 226, 0, 0, 227, 228,
	368, 369, 0, 0, 370, 232, 0, 229, 0, 0,
	230, 371, 231, 372, 373, 374, 375, 376, 0, 377,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 378, 0, 241, 242, 0, 0, 243,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 380,
	255, 381, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 382, 0, 261, 0, 383, 262, 263, 264,
	265, 266, 0, 267, 384, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 386, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 387, 292, 0, 296,
	297, 298, 299, 0, 301, 388, 300, 302, 303, 0,
	304, 293, 294, 305, 0, 306, 389, 390, 307, 0,
	314, 308, 309, 295, 310, 313, 391, 311, 312, 392,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 0, 519, 338, 179, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 344, 0,
	0, 0, 0, 185, 186, 187, 345, 346, 347, 348,
	188, 349, 350, 0, 189, 351, 352, 190, 191, 0,
	0, 353, 354, 953, 0, 192, 356, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 408, 208, 357,
	209, 358, 359, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 360, 216,
	218, 217, 219, 361, 362, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 363, 364, 365, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 366, 0, 367, 0,
	0, 225, 226, 0, 0, 227, 228, 368, 369, 0,
	0, 370, 232, 0, 229, 0, 0, 230, 371, 231,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	378, 0, 241, 242, 0, 0, 243, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 521, 0, 251,
	252, 254, 253, 0, 0, 0, 380, 255, 381, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	0, 261, 0, 383, 262, 263, 264, 265, 266, 0,
	267, 384, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 386, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 387, 292, 0, 296, 297, 298, 299,
	0, 301, 388, 300, 302, 303, 0, 304, 293, 294,
	305, 0, 306, 389, 390, 307, 0, 314, 308, 309,
	295, 310, 313, 391, 311, 312, 392, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 323, 0, 516,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 0, 1238,
	338, 179, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	185, 186, 187, 345, 346, 347, 348, 188, 349, 350,
	0, 189, 351, 352, 190, 191, 0, 0, 353, 354,
	355, 0, 192, 356, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 408, 208, 357, 209, 358, 359,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 360, 216, 218, 217, 219,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 363, 364, 365, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 366, 0, 367, 0, 0, 225, 226,
	0, 0, 227, 228, 1237, 369, 0, 0, 370, 232,
	0, 229, 0, 0, 230, 371, 231, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 378, 0, 241,
	242, 0, 0, 243, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 380, 255, 381, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 0, 261, 0,
	383, 262, 263, 264, 265, 266, 0, 267, 384, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 386, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	387, 292, 0, 296, 297, 298, 299, 0, 301, 388,
	300, 302, 303, 0, 304, 293, 294, 305, 0, 306,
	389, 390, 307, 0, 314, 308, 309, 295, 310, 313,
	391, 311, 312, 392, 0, 315, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 0, 519, 338, 179, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 344, 0, 0, 0, 0, 185, 186, 187,
	345, 346, 347, 348, 188, 349, 350, 0, 189, 351,
	352, 190, 191, 0, 0, 353, 354, 953, 0, 192,
	356, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 408, 208, 357, 209, 358, 359, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 360, 216, 218, 217, 219, 361, 362, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 363, 364,
	365, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	366, 0, 367, 0, 0, 225, 226, 0, 0, 227,
	228, 368, 369, 0, 0, 370, 232, 0, 229, 0,
	0, 230, 371, 231, 372, 373, 374, 375, 376, 0,
	377, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 378, 0, 241, 242, 0, 0,
	243, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 521, 0, 251, 252, 254, 253, 0, 0, 0,
	380, 255, 381, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 382, 0, 261, 0, 383, 262, 263,
	264, 265, 266, 0, 267, 384, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 386, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 0, 290, 291, 387, 292, 0,
	296, 297, 298, 299, 0, 301, 388, 300, 302, 303,
	0, 304, 293, 294, 305, 0, 306, 389, 390, 307,
	0, 314, 308, 309, 295, 310, 313, 391, 311, 312,
	392, 0, 315, 0, 316, 317, 318, 319, 320, 321,
	322, 323, 0, 516, 394, 395, 0, 0, 324, 954,
	396, 397, 0, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 0, 334, 0, 398, 335, 336, 337,
	399, 400, 0, 519, 338, 179, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 0, 0, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 185, 186, 187, 345, 346, 347,
	348, 188, 349, 350, 0, 189, 351, 352, 190, 191,
	0, 0, 353, 354, 355, 0, 510, 356, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 408, 208,
	357, 209, 358, 359, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 360,
	216, 218, 217, 219, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 363, 364, 365, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 366, 0, 367,
	0, 0, 225, 226, 0, 0, 227, 228, 368, 369,
	0, 0, 370, 232, 0, 229, 0, 0, 230, 371,
	231, 372, 373, 374, 375, 376, 0, 377, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 378, 0, 241, 242, 0, 0, 243, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 521, 0,
	251, 252, 254, 253, 0, 0, 0, 380, 255, 381,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	382, 0, 261, 0, 383, 262, 263, 264, 265, 266,
	0, 267, 384, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 386, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 0, 290, 291, 387, 292, 0, 296, 297, 298,
	299, 0, 301, 388, 300, 937, 303, 0, 304, 293,
	294, 305, 0, 306, 389, 390, 307, 0, 314, 308,
	309, 295, 310, 313, 391, 311, 312, 392, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 323, 0,
	516, 394, 395, 0, 0, 324, 325, 396, 397, 0,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	0, 334, 0, 398, 335, 336, 337, 399, 400, 0,
	913, 338, 179, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 344, 0, 0, 0,
	0, 185, 186, 187, 345, 346, 347, 348, 188, 349,
	350, 0, 189, 351, 352, 190, 191, 0, 0, 353,
	354, 355, 0, 192, 356, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 408, 208, 357, 209, 358,
	359, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 360, 216, 218, 217,
	219, 361, 362, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 363, 364, 365, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 366, 0, 367, 0, 0, 225,
	226, 0, 0, 227, 228, 912, 369, 0, 0, 370,
	232, 0, 229, 0, 0, 230, 371, 231, 372, 373,
	374, 375, 376, 0, 377, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 378, 0,
	241, 242, 0, 0, 243, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 0, 251, 252, 254,
	253, 0, 0, 0, 380, 255, 381, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 0, 261,
	0, 383, 262, 263, 264, 265, 266, 0, 267, 384,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 386,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 387, 292, 0, 296, 297, 298, 299, 0, 301,
	388, 300, 302, 303, 0, 304, 293, 294, 305, 0,
	306, 389, 390, 307, 0, 314, 308, 309, 295, 310,
	313, 391, 311, 312, 392, 0, 315, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 910, 338, 179,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 185, 186,
	187, 345, 346, 347, 348, 188, 349, 350, 0, 189,
	351, 352, 190, 191, 0, 0, 353, 354, 355, 0,
	192, 356, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 408, 208, 357, 209, 358, 359, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 360, 216, 218, 217, 219, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 363,
	364, 365, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 366, 0, 367, 0, 0, 225, 226, 0, 0,
	227, 228, 909, 369, 0, 0, 370, 232, 0, 229,
	0, 0, 230, 371, 231, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 378, 0, 241, 242, 0,
	0, 243, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 382, 0, 261, 0, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 0, 301, 388, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 389, 390,
	307, 0, 314, 308, 309, 295, 310, 313, 391, 311,
	312, 392, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 0, 906, 338, 179, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 185, 186, 187, 345, 346,
	347, 348, 188, 349, 350, 0, 189, 351, 352, 190,
	191, 0, 0, 353, 354, 355, 0, 192, 356, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 408,
	208, 357, 209, 358, 359, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	360, 216, 218, 217, 219, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 363, 364, 365, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 366, 0,
	367, 0, 0, 225, 226, 0, 0, 227, 228, 905,
	369, 0, 0, 370, 232, 0, 229, 0, 0, 230,
	371, 231, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 378, 0, 241, 242, 0, 0, 243, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 380, 255,
	381, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 0, 261, 0, 383, 262, 263, 264, 265,
	266, 0, 267, 384, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 386, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 387, 292, 0, 296, 297,
	298, 299, 0, 301, 388, 300, 302, 303, 0, 304,
	293, 294, 305, 0, 306, 389, 390, 307, 0, 314,
	308, 309, 295, 310, 313, 391, 311, 312, 392, 0,
	315, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	0, 903, 338, 179, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 185, 186, 187, 345, 346, 347, 348, 188,
	349, 350, 0, 189, 351, 352, 190, 191, 0, 0,
	353, 354, 355, 0, 192, 356, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 408, 208, 357, 209,
	358, 359, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 360, 216, 218,
	217, 219, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 363, 364, 365, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 366, 0, 367, 0, 0,
	225, 226, 0, 0, 227, 228, 902, 369, 0, 0,
	370, 232, 0, 229, 0, 0, 230, 371, 231, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 378,
	0, 241, 242, 0, 0, 243, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 379, 249, 0, 251, 252,
	254, 253, 0, 0, 0, 380, 255, 381, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 382, 0,
	261, 0, 383, 262, 263, 264, 265, 266, 0, 267,
	384, 268, 385, 269, 0, 270, 271, 272, 273, 274,
	386, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 0,
	290, 291, 387, 292, 0, 296, 297, 298, 299, 0,
	301, 388, 300, 302, 303, 0, 304, 293, 294, 305,
	0, 306, 389, 390, 307, 0, 314, 308, 309, 295,
	310, 313, 391, 311, 312, 392, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 394,
	395, 0, 0, 324, 325, 396, 397, 0, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 0, 334,
	0, 398, 335, 336, 337, 399, 400, 0, 899, 338,
	179, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 344, 0, 0, 0, 0, 185,
	186, 187, 345, 346, 347, 348, 188, 349, 350, 0,
	189, 351, 352, 190, 191, 0, 0, 353, 354, 355,
	0, 192, 356, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 408, 208, 357, 209, 358, 359, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 360, 216, 218, 217, 219, 361,
	362, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	363, 364, 365, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 366, 0, 367, 0, 0, 225, 226, 0,
	0, 227, 228, 898, 369, 0, 0, 370, 232, 0,
	229, 0, 0, 230, 371, 231, 372, 373, 374, 375,
	376, 0, 377, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 378, 0, 241, 242,
	0, 0, 243, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 379, 249, 0, 251, 252, 254, 253, 0,
	0, 0, 380, 255, 381, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 382, 0, 261, 0, 383,
	262, 263, 264, 265, 266, 0, 267, 384, 268, 385,
	269, 0, 270, 271, 272, 273, 274, 386, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 0, 290, 291, 387,
	292, 0, 296, 297, 298, 299, 0, 301, 388, 300,
	302, 303, 0, 304, 293, 294, 305, 0, 306, 389,
	390, 307, 0, 314, 308, 309, 295, 310, 313, 391,
	311, 312, 392, 0, 315, 0, 316, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 394, 395, 0, 0,
	324, 325, 396, 397, 0, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 0, 334, 0, 398, 335,
	336, 337, 399, 400, 179, 0, 338, 0, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 0, 0, 0,
	182, 183, 887, 184, 0, 0, 0, 0, 344, 0,
	0, 0, 0, 185, 186, 187, 345, 346, 347, 348,
	188, 349, 350, 0, 189, 351, 352, 190, 191, 0,
	0, 353, 354, 355, 0, 192, 356, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 408, 208, 357,
	209, 358, 359, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 360, 216,
	218, 217, 219, 361, 362, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 363, 364, 365, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 366, 0, 367, 0,
	0, 225, 226, 0, 0, 227, 228, 368, 369, 0,
	0, 370, 232, 0, 229, 0, 0, 230, 371, 231,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	378, 0, 241, 242, 0, 0, 243, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 0, 251,
	252, 254, 253, 0, 0, 0, 380, 255, 381, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	0, 261, 0, 383, 262, 263, 264, 265, 266, 0,
	267, 384, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 386, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 387, 292, 0, 296, 297, 298, 299,
	0, 301, 388, 300, 302, 303, 0, 304, 293, 294,
	305, 0, 306, 389, 390, 307, 0, 314, 308, 309,
	295, 310, 313, 391, 311, 312, 392, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 0, 885,
	338, 179, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	185, 186, 187, 345, 346, 347, 348, 188, 349, 350,
	0, 189, 351, 352, 190, 191, 0, 0, 353, 354,
	355, 0, 192, 356, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 408, 208, 357, 209, 358, 359,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 360, 216, 218, 217, 219,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 363, 364, 365, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 366, 0, 367, 0, 0, 225, 226,
	0, 0, 227, 228, 884, 369, 0, 0, 370, 232,
	0, 229, 0, 0, 230, 371, 231, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 378, 0, 241,
	242, 0, 0, 243, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 380, 255, 381, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 0, 261, 0,
	383, 262, 263, 264, 265, 266, 0, 267, 384, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 386, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	387, 292, 0, 296, 297, 298, 299, 0, 301, 388,
	300, 302, 303, 0, 304, 293, 294, 305, 0, 306,
	389, 390, 307, 0, 314, 308, 309, 295, 310, 313,
	391, 311, 312, 392, 0, 315, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 0, 881, 338, 179, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 344, 0, 0, 0, 0, 185, 186, 187,
	345, 346, 347, 348, 188, 349, 350, 0, 189, 351,
	352, 190, 191, 0, 0, 353, 354, 355, 0, 192,
	356, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 408, 208, 357, 209, 358, 359, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 360, 216, 218, 217, 219, 361, 362, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 363, 364,
	365, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	366, 0, 367, 0, 0, 225, 226, 0, 0, 227,
	228, 368, 369, 0, 0, 370, 232, 0, 229, 0,
	0, 230, 371, 231, 372, 373, 374, 375, 376, 0,
	377, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 378, 0, 241, 242, 0, 0,
	243, 244, 0, 0, 245, 0, 246, 247, 248, 250,
	379, 249, 0, 251, 252, 254, 253, 0, 0, 0,
	380, 255, 381, 256, 257, 0, 258, 0, 0, 259,
	0, 0, 260, 382, 0, 261, 0, 383, 262, 263,
	264, 265, 266, 0, 267, 384, 268, 385, 269, 0,
	270, 271, 272, 273, 274, 386, 275, 276, 0, 277,
	278, 279, 280, 281, 0, 283, 284, 282, 285, 286,
	287, 288, 0, 289, 0, 290, 291, 387, 292, 0,
	296, 297, 298, 299, 0, 301, 388, 300, 302, 303,
	0, 304, 293, 294, 305, 0, 306, 389, 390, 307,
	0, 314, 308, 309, 295, 310, 313, 391, 311, 312,
	392, 0, 315, 0, 316, 317, 318, 319, 320, 321,
	322, 323, 0, 393, 394, 395, 0, 0, 324, 325,
	396, 397, 0, 326, 327, 328, 329, 0, 0, 330,
	331, 332, 333, 0, 334, 0, 398, 335, 336, 337,
	399, 400, 0, 879, 338, 179, 0, 0, 0, 339,
	340, 341, 342, 343, 0, 0, 0, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 185, 186, 187, 345, 346, 347,
	348, 188, 349, 350, 0, 189, 351, 352, 190, 191,
	0, 0, 353, 354, 355, 0, 192, 356, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 408, 208,
	357, 209, 358, 359, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 360,
	216, 218, 217, 219, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 363, 364, 365, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 366, 0, 367,
	0, 0, 225, 226, 0, 0, 227, 228, 368, 369,
	0, 0, 370, 232, 0, 229, 0, 0, 230, 371,
	231, 372, 373, 374, 375, 376, 0, 377, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 378, 0, 241, 242, 0, 0, 243, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 249, 0,
	251, 252, 254, 253, 0, 0, 0, 380, 255, 381,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	382, 0, 261, 0, 383, 262, 263, 264, 265, 266,
	0, 267, 384, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 386, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 0, 290, 291, 387, 292, 0, 296, 297, 298,
	299, 0, 301, 388, 300, 302, 303, 0, 304, 293,
	294, 305, 0, 306, 389, 390, 307, 0, 314, 308,
	309, 295, 310, 313, 391, 311, 312, 392, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 394, 395, 0, 0, 324, 325, 396, 397, 0,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	0, 334, 0, 398, 335, 336, 337, 399, 400, 0,
	875, 338, 179, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 344, 0, 0, 0,
	0, 185, 186, 187, 345, 346, 347, 348, 188, 349,
	350, 0, 189, 351, 352, 190, 191, 0, 0, 353,
	354, 355, 0, 192, 356, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 408, 208, 357, 209, 358,
	359, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 360, 216, 218, 217,
	219, 361, 362, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 363, 364, 365, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 366, 0, 367, 0, 0, 225,
	226, 0, 0, 227, 228, 877, 369, 0, 0, 370,
	232, 0, 229, 0, 0, 230, 371, 231, 372, 373,
	374, 375, 376, 0, 377, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 378, 0,
	241, 242, 0, 0, 243, 244, 0, 0, 245, 0,
	246, 247, 248, 250, 379, 249, 0, 251, 252, 254,
	253, 0, 0, 0, 380, 255, 381, 256, 257, 0,
	258, 0, 0, 259, 0, 0, 260, 382, 0, 261,
	0, 383, 262, 263, 264, 265, 266, 0, 267, 384,
	268, 385, 269, 0, 270, 271, 272, 273, 274, 386,
	275, 276, 0, 277, 278, 279, 280, 281, 0, 283,
	284, 282, 285, 286, 287, 288, 0, 289, 0, 290,
	291, 387, 292, 0, 296, 297, 298, 299, 0, 301,
	388, 300, 302, 303, 0, 304, 293, 294, 305, 0,
	306, 389, 390, 307, 0, 314, 308, 309, 295, 310,
	313, 391, 311, 312, 392, 0, 315, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 0, 393, 394, 395,
	0, 0, 324, 325, 396, 397, 0, 326, 327, 328,
	329, 0, 0, 330, 331, 332, 333, 0, 334, 0,
	398, 335, 336, 337, 399, 400, 0, 765, 338, 179,
	0, 0, 0, 339, 340, 341, 342, 343, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 185, 186,
	187, 345, 346, 347, 348, 188, 349, 350, 0, 189,
	351, 352, 190, 191, 0, 0, 353, 354, 355, 0,
	192, 356, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 408, 208, 357, 209, 358, 359, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 360, 216, 218, 217, 219, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 363,
	364, 365, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 366, 0, 367, 0, 0, 225, 226, 0, 0,
	227, 228, 767, 369, 0, 0, 370, 232, 0, 229,
	0, 0, 230, 371, 231, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 378, 0, 241, 242, 0,
	0, 243, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 382, 0, 261, 0, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 0, 301, 388, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 389, 390,
	307, 0, 314, 308, 309, 295, 310, 313, 391, 311,
	312, 392, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 0, 763, 338, 179, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 185, 186, 187, 345, 346,
	347, 348, 188, 349, 350, 0, 189, 351, 352, 190,
	191, 0, 0, 353, 354, 355, 0, 192, 356, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 408,
	208, 357, 209, 358, 359, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	360, 216, 218, 217, 219, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 363, 364, 365, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 366, 0,
	367, 0, 0, 225, 226, 0, 0, 227, 228, 368,
	369, 0, 0, 370, 232, 0, 229, 0, 0, 230,
	371, 231, 372, 373, 374, 375, 376, 0, 377, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 378, 0, 241, 242, 0, 0, 243, 244,
	0, 0, 245, 0, 246, 247, 248, 250, 379, 249,
	0, 251, 252, 254, 253, 0, 0, 0, 380, 255,
	381, 256, 257, 0, 258, 0, 0, 259, 0, 0,
	260, 382, 0, 261, 0, 383, 262, 263, 264, 265,
	266, 0, 267, 384, 268, 385, 269, 0, 270, 271,
	272, 273, 274, 386, 275, 276, 0, 277, 278, 279,
	280, 281, 0, 283, 284, 282, 285, 286, 287, 288,
	0, 289, 0, 290, 291, 387, 292, 0, 296, 297,
	298, 299, 0, 301, 388, 300, 302, 303, 0, 304,
	293, 294, 305, 0, 306, 389, 390, 307, 0, 314,
	308, 309, 295, 310, 313, 391, 311, 312, 392, 0,
	315, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	0, 393, 394, 395, 0, 0, 324, 325, 396, 397,
	0, 326, 327, 328, 329, 0, 0, 330, 331, 332,
	333, 0, 334, 0, 398, 335, 336, 337, 399, 400,
	0, 519, 338, 179, 0, 0, 0, 339, 340, 341,
	342, 343, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 185, 186, 187, 345, 346, 347, 348, 188,
	349, 350, 0, 189, 351, 352, 190, 191, 0, 0,
	353, 354, 355, 0, 510, 356, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 408, 208, 357, 209,
	358, 359, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 360, 216, 218,
	217, 219, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 363, 364, 365, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 366, 0, 367, 0, 0,
	225, 226, 0, 0, 227, 228, 368, 369, 0, 0,
	370, 232, 0, 229, 0, 0, 230, 371, 231, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 378,
	0, 241, 242, 0, 0, 243, 509, 0, 0, 245,
	0, 246, 247, 248, 250, 379, 521, 0, 251, 252,
	254, 253, 0, 0, 0, 380, 255, 381, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 382, 0,
	261, 0, 383, 262, 263, 264, 265, 266, 0, 267,
	384, 268, 385, 269, 0, 270, 271, 272, 273, 274,
	386, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 0,
	290, 291, 511, 292, 0, 296, 297, 298, 299, 0,
	301, 388, 300, 512, 303, 0, 304, 293, 294, 305,
	0, 306, 389, 390, 307, 0, 314, 308, 309, 295,
	310, 313, 391, 311, 312, 392, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 0, 516, 394,
	395, 0, 0, 324, 514, 396, 397, 0, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 0, 334,
	0, 398, 335, 336, 337, 399, 400, 0, 501, 338,
	179, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 344, 0, 0, 0, 0, 185,
	186, 187, 345, 346, 347, 348, 188, 349, 350, 0,
	189, 351, 352, 190, 191, 0, 0, 353, 354, 355,
	0, 192, 356, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 408, 208, 357, 209, 358, 359, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 360, 216, 218, 217, 219, 361,
	362, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	363, 364, 365, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 366, 0, 367, 0, 0, 225, 226, 0,
	0, 227, 228, 368, 369, 0, 0, 370, 232, 0,
	229, 0, 0, 230, 371, 231, 372, 373, 374, 375,
	376, 0, 377, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 378, 0, 241, 242,
	0, 0, 243, 244, 0, 0, 245, 0, 246, 247,
	248, 250, 379, 249, 0, 251, 252, 254, 253, 0,
	0, 0, 380, 255, 381, 256, 257, 0, 258, 0,
	0, 259, 0, 0, 260, 382, 0, 261, 0, 383,
	262, 263, 264, 265, 266, 0, 267, 384, 268, 385,
	269, 0, 270, 271, 272, 273, 274, 386, 275, 276,
	0, 277, 278, 279, 280, 281, 0, 283, 284, 282,
	285, 286, 287, 288, 0, 289, 0, 290, 291, 387,
	292, 0, 502, 297, 298, 299, 0, 301, 388, 300,
	302, 303, 0, 304, 293, 294, 305, 0, 306, 389,
	390, 307, 0, 314, 308, 309, 295, 310, 313, 391,
	311, 312, 392, 0, 315, 0, 316, 317, 318, 319,
	320, 321, 322, 323, 0, 393, 394, 395, 0, 0,
	324, 325, 396, 397, 0, 326, 327, 328, 329, 0,
	0, 330, 331, 332, 333, 0, 334, 0, 398, 335,
	336, 337, 399, 400, 0, 499, 338, 179, 0, 0,
	0, 339, 340, 341, 342, 343, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 185, 186, 187, 345,
	346, 347, 348, 188, 349, 350, 0, 189, 351, 352,
	190, 191, 0, 0, 353, 354, 355, 0, 192, 356,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	408, 208, 357, 209, 358, 359, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 360, 216, 218, 217, 219, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 363, 364, 365,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 366,
	0, 367, 0, 0, 225, 226, 0, 0, 227, 228,
	368, 369, 0, 0, 370, 232, 0, 229, 0, 0,
	230, 371, 231, 372, 373, 374, 375, 376, 0, 377,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 378, 0, 241, 242, 0, 0, 243,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 380,
	255, 381, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 382, 0, 261, 0, 383, 262, 263, 264,
	265, 266, 0, 267, 384, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 386, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 387, 292, 0, 296,
	297, 298, 299, 0, 301, 388, 300, 302, 303, 0,
	304, 293, 294, 305, 0, 306, 389, 390, 307, 0,
	314, 308, 309, 295, 310, 313, 391, 311, 312, 392,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 0, 491, 338, 179, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 344, 0,
	0, 0, 0, 185, 186, 187, 345, 346, 347, 348,
	188, 349, 350, 0, 189, 351, 352, 190, 191, 0,
	0, 353, 354, 355, 0, 192, 356, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 408, 208, 357,
	209, 358, 359, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 360, 216,
	218, 217, 219, 361, 362, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 363, 364, 365, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 366, 0, 367, 0,
	0, 225, 226, 0, 0, 227, 228, 368, 369, 0,
	0, 370, 232, 0, 229, 0, 0, 230, 371, 231,
	372, 373, 374, 375, 376, 0, 377, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	378, 0, 241, 242, 0, 0, 243, 244, 0, 0,
	245, 0, 246, 247, 248, 250, 379, 249, 0, 251,
	252, 254, 253, 0, 0, 0, 380, 255, 381, 256,
	257, 0, 258, 0, 0, 259, 0, 0, 260, 382,
	0, 261, 0, 383, 262, 263, 264, 265, 266, 0,
	267, 384, 268, 385, 269, 0, 270, 271, 272, 273,
	274, 386, 275, 276, 0, 277, 278, 279, 280, 281,
	0, 283, 284, 282, 285, 286, 287, 288, 0, 289,
	0, 290, 291, 387, 292, 0, 296, 297, 298, 299,
	0, 301, 388, 300, 302, 303, 0, 304, 293, 294,
	305, 0, 306, 389, 390, 307, 0, 314, 308, 309,
	295, 310, 313, 391, 311, 312, 392, 0, 315, 0,
	316, 317, 318, 319, 320, 321, 322, 323, 0, 393,
	394, 395, 0, 0, 324, 325, 396, 397, 0, 326,
	327, 328, 329, 0, 0, 330, 331, 332, 333, 0,
	334, 0, 398, 335, 336, 337, 399, 400, 0, 448,
	338, 179, 0, 0, 0, 339, 340, 341, 342, 343,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	185, 186, 187, 345, 346, 347, 348, 188, 349, 350,
	0, 189, 351, 352, 190, 191, 0, 0, 353, 354,
	355, 0, 192, 356, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 408, 208, 357, 209, 358, 359,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 360, 216, 218, 217, 219,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 363, 364, 365, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 366, 0, 367, 0, 0, 225, 226,
	0, 0, 227, 228, 368, 369, 0, 0, 370, 232,
	0, 229, 0, 0, 230, 371, 231, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 378, 0, 241,
	242, 0, 0, 243, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 380, 255, 381, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 0, 261, 0,
	383, 262, 263, 264, 265, 266, 0, 267, 384, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 386, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	387, 292, 0, 296, 297, 298, 299, 0, 301, 388,
	300, 302, 303, 0, 304, 293, 294, 305, 0, 306,
	389, 390, 307, 0, 314, 308, 309, 295, 310, 313,
	391, 311, 312, 392, 0, 315, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 179, 0, 338, 0, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 185, 186, 187, 345, 346, 347,
	348, 188, 349, 350, 0, 189, 351, 352, 190, 191,
	0, 0, 353, 354, 355, 0, 192, 356, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 408, 208,
	357, 209, 358, 359, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 360,
	216, 218, 217, 219, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 363, 364, 365, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 366, 0, 367,
	0, 0, 225, 226, 0, 0, 227, 228, 368, 369,
	0, 0, 370, 232, 0, 229, 0, 0, 230, 371,
	231, 372, 373, 374, 375, 376, 0, 377, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 378, 0, 241, 242, 0, 0, 243, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 249, 0,
	251, 252, 254, 253, 0, 0, 0, 380, 255, 381,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	382, 0, 261, 0, 383, 262, 263, 264, 265, 266,
	0, 267, 384, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 386, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 0, 290, 291, 387, 292, 0, 296, 297, 298,
	299, 0, 301, 388, 300, 302, 303, 0, 304, 293,
	294, 305, 0, 306, 389, 390, 307, 0, 314, 308,
	309, 295, 310, 313, 391, 311, 312, 392, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 394, 395, 0, 0, 324, 325, 396, 397, 0,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	0, 334, 0, 398, 335, 336, 337, 399, 400, 179,
	0, 338, 0, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 185, 186,
	187, 345, 346, 347, 348, 188, 349, 350, 0, 189,
	351, 352, 190, 191, 0, 0, 353, 354, 355, 0,
	192, 356, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 408, 208, 357, 209, 358, 359, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 360, 216, 218, 217, 219, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 363,
	364, 365, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 366, 0, 367, 0, 0, 225, 226, 0, 0,
	227, 228, 1923, 369, 0, 0, 370, 232, 0, 229,
	0, 0, 230, 371, 231, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 378, 0, 241, 242, 0,
	0, 243, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 382, 0, 261, 0, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 275, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 0, 301, 388, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 389, 390,
	307, 0, 314, 308, 309, 295, 310, 313, 391, 311,
	312, 392, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 179, 0, 338, 0, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 185, 186, 187, 345, 346, 347, 348, 188,
	349, 350, 0, 189, 351, 352, 190, 191, 0, 0,
	353, 354, 355, 0, 192, 356, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 408, 208, 357, 209,
	358, 359, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 360, 216, 218,
	217, 219, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 363, 364, 365, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 366, 0, 367, 0, 0,
	225, 226, 0, 0, 227, 228, 1921, 369, 0, 0,
	370, 232, 0, 229, 0, 0, 230, 371, 231, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 378,
	0, 241, 242, 0, 0, 243, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 379, 249, 0, 251, 252,
	254, 253, 0, 0, 0, 380, 255, 381, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 382, 0,
	261, 0, 383, 262, 263, 264, 265, 266, 0, 267,
	384, 268, 385, 269, 0, 270, 271, 272, 273, 274,
	386, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 0,
	290, 291, 387, 292, 0, 296, 297, 298, 299, 0,
	301, 388, 300, 302, 303, 0, 304, 293, 294, 305,
	0, 306, 389, 390, 307, 0, 314, 308, 309, 295,
	310, 313, 391, 311, 312, 392, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 394,
	395, 0, 0, 324, 325, 396, 397, 0, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 0, 334,
	0, 398, 335, 336, 337, 399, 400, 179, 0, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 185, 186, 187, 345,
	346, 347, 348, 188, 349, 350, 0, 189, 351, 352,
	190, 191, 0, 0, 353, 354, 355, 0, 192, 356,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	408, 208, 357, 209, 358, 359, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 360, 216, 218, 217, 219, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 363, 364, 365,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 366,
	0, 367, 0, 0, 225, 226, 0, 0, 227, 228,
	1910, 369, 0, 0, 370, 232, 0, 229, 0, 0,
	230, 371, 231, 372, 373, 374, 375, 376, 0, 377,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 378, 0, 241, 242, 0, 0, 243,
	244, 0, 0, 245, 0, 246, 247, 248, 250, 379,
	249, 0, 251, 252, 254, 253, 0, 0, 0, 380,
	255, 381, 256, 257, 0, 258, 0, 0, 259, 0,
	0, 260, 382, 0, 261, 0, 383, 262, 263, 264,
	265, 266, 0, 267, 384, 268, 385, 269, 0, 270,
	271, 272, 273, 274, 386, 275, 276, 0, 277, 278,
	279, 280, 281, 0, 283, 284, 282, 285, 286, 287,
	288, 0, 289, 0, 290, 291, 387, 292, 0, 296,
	297, 298, 299, 0, 301, 388, 300, 302, 303, 0,
	304, 293, 294, 305, 0, 306, 389, 390, 307, 0,
	314, 308, 309, 295, 310, 313, 391, 311, 312, 392,
	0, 315, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 0, 393, 394, 395, 0, 0, 324, 325, 396,
	397, 0, 326, 327, 328, 329, 0, 0, 330, 331,
	332, 333, 0, 334, 0, 398, 335, 336, 337, 399,
	400, 179, 0, 338, 0, 0, 0, 0, 339, 340,
	341, 342, 343, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	185, 186, 187, 345, 346, 347, 348, 188, 349, 350,
	0, 189, 351, 352, 190, 191, 0, 0, 353, 354,
	355, 0, 192, 356, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 408, 208, 357, 209, 358, 359,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 360, 216, 218, 217, 219,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 363, 364, 365, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 366, 0, 367, 0, 0, 225, 226,
	0, 0, 227, 228, 368, 369, 0, 0, 370, 232,
	0, 229, 0, 0, 230, 371, 231, 372, 373, 374,
	375, 376, 0, 377, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 378, 0, 241,
	242, 0, 0, 243, 244, 0, 0, 245, 0, 246,
	247, 248, 250, 379, 249, 0, 251, 252, 254, 253,
	0, 0, 0, 380, 255, 381, 256, 257, 0, 258,
	0, 0, 259, 0, 0, 260, 382, 0, 261, 0,
	383, 262, 263, 264, 265, 266, 0, 267, 384, 268,
	385, 269, 0, 270, 271, 272, 273, 274, 386, 275,
	276, 0, 277, 278, 279, 280, 281, 0, 283, 284,
	282, 285, 286, 287, 288, 0, 289, 0, 290, 291,
	387, 292, 0, 502, 297, 298, 299, 0, 301, 388,
	300, 302, 303, 0, 304, 293, 294, 305, 0, 306,
	389, 390, 307, 0, 314, 308, 309, 295, 310, 313,
	391, 311, 312, 392, 0, 315, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 0, 393, 394, 395, 0,
	0, 324, 325, 396, 397, 0, 326, 327, 328, 329,
	0, 0, 330, 331, 332, 333, 0, 334, 0, 398,
	335, 336, 337, 399, 400, 179, 0, 338, 0, 0,
	0, 0, 339, 340, 341, 342, 343, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 344,
	0, 1248, 0, 0, 185, 186, 187, 345, 346, 347,
	348, 188, 349, 350, 0, 189, 351, 352, 190, 191,
	0, 0, 353, 354, 355, 0, 192, 356, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 408, 208,
	357, 209, 358, 359, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 360,
	216, 218, 217, 219, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 363, 364, 365, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 366, 0, 367,
	0, 0, 225, 226, 0, 0, 227, 228, 368, 369,
	0, 0, 370, 232, 0, 229, 0, 0, 230, 371,
	231, 372, 373, 374, 375, 376, 0, 377, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 378, 0, 241, 242, 0, 0, 243, 244, 0,
	0, 245, 0, 246, 247, 248, 250, 379, 249, 0,
	251, 252, 254, 253, 0, 0, 0, 380, 255, 381,
	256, 257, 0, 258, 0, 0, 259, 0, 0, 260,
	382, 0, 261, 0, 383, 262, 263, 264, 265, 266,
	0, 267, 384, 268, 385, 269, 0, 270, 271, 272,
	273, 274, 386, 275, 276, 0, 277, 278, 279, 280,
	281, 0, 283, 284, 282, 285, 286, 287, 288, 0,
	289, 0, 290, 291, 387, 292, 0, 296, 297, 298,
	299, 0, 301, 388, 300, 302, 303, 0, 0, 293,
	294, 305, 0, 306, 389, 390, 307, 0, 314, 308,
	309, 295, 310, 313, 391, 311, 312, 392, 0, 315,
	0, 316, 317, 318, 319, 320, 321, 322, 323, 0,
	393, 394, 395, 0, 0, 324, 325, 396, 397, 0,
	326, 327, 328, 329, 0, 0, 330, 331, 332, 333,
	0, 334, 0, 398, 335, 336, 337, 399, 400, 179,
	0, 338, 0, 0, 0, 0, 339, 340, 341, 342,
	343, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 185, 186,
	187, 345, 346, 347, 348, 188, 349, 350, 0, 189,
	351, 352, 190, 191, 0, 0, 353, 354, 355, 0,
	192, 356, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 408, 208, 357, 209, 358, 359, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 360, 216, 218, 217, 219, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 363,
	364, 365, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 366, 0, 367, 0, 0, 225, 226, 0, 0,
	227, 228, 368, 369, 0, 0, 370, 232, 0, 229,
	0, 0, 230, 371, 231, 372, 373, 374, 375, 376,
	0, 377, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 378, 0, 241, 242, 0,
	0, 243, 244, 0, 0, 245, 0, 246, 247, 248,
	250, 379, 249, 0, 251, 252, 254, 253, 0, 0,
	0, 380, 255, 381, 256, 257, 0, 258, 0, 0,
	259, 0, 0, 260, 382, 0, 261, 0, 383, 262,
	263, 264, 265, 266, 0, 267, 384, 268, 385, 269,
	0, 270, 271, 272, 273, 274, 386, 729, 276, 0,
	277, 278, 279, 280, 281, 0, 283, 284, 282, 285,
	286, 287, 288, 0, 289, 0, 290, 291, 387, 292,
	0, 296, 297, 298, 299, 0, 301, 388, 300, 302,
	303, 0, 304, 293, 294, 305, 0, 306, 389, 390,
	307, 0, 314, 308, 309, 295, 310, 313, 391, 311,
	312, 392, 0, 315, 0, 316, 317, 318, 319, 320,
	321, 322, 323, 0, 393, 394, 395, 0, 0, 324,
	325, 396, 397, 0, 326, 327, 328, 329, 0, 0,
	330, 331, 332, 333, 0, 334, 0, 398, 335, 336,
	337, 399, 400, 179, 0, 338, 0, 0, 0, 0,
	339, 340, 341, 342, 343, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 344, 0, 0,
	0, 0, 185, 186, 187, 345, 346, 347, 348, 188,
	349, 350, 0, 189, 351, 352, 190, 191, 0, 0,
	353, 354, 355, 0, 192, 356, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 408, 208, 357, 209,
	358, 359, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 360, 216, 218,
	217, 219, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 363, 364, 365, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 366, 0, 367, 0, 0,
	225, 226, 0, 0, 227, 228, 368, 369, 0, 0,
	370, 232, 0, 229, 0, 0, 230, 371, 231, 372,
	373, 374, 375, 376, 0, 377, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 378,
	0, 241, 242, 0, 0, 243, 244, 0, 0, 245,
	0, 246, 247, 248, 250, 379, 249, 0, 251, 252,
	254, 253, 0, 0, 0, 380, 255, 381, 256, 257,
	0, 258, 0, 0, 259, 0, 0, 260, 382, 0,
	261, 0, 383, 262, 263, 0, 265, 266, 0, 267,
	384, 268, 385, 269, 0, 270, 271, 272, 0, 274,
	386, 275, 276, 0, 277, 278, 279, 280, 281, 0,
	283, 284, 282, 285, 286, 287, 288, 0, 289, 0,
	290, 291, 387, 0, 0, 296, 297, 298, 299, 0,
	301, 388, 300, 302, 303, 0, 304, 293, 294, 305,
	0, 306, 389, 390, 307, 0, 314, 308, 309, 295,
	310, 313, 391, 311, 312, 392, 0, 315, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 0, 393, 394,
	395, 0, 0, 324, 325, 396, 397, 0, 326, 327,
	328, 329, 0, 0, 330, 331, 332, 333, 0, 334,
	0, 398, 335, 336, 337, 399, 400, 0, 0, 338,
	0, 0, 0, 0, 339, 340, 341, 342, 343, 1043,
	1044, 0, 1073, 1074, 1075, 1083, 1084, 1085, 0, 0,
	0, 0, 0, 0, 0, 1076, 0, 0, 0, 0,
	0, 0, 1046, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 1043, 1044, 0, 1073, 1074, 1075, 1083, 1084,
	1085, 0, 0, 0, 0, 0, 1045, 0, 1076, 0,
	0, 0, 1065, 0, 0, 1046, 0, 0, 1087, 1062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1045,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 1062, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 1069, 1070,
	1071, 0, 0, 0, 0, 0, 1051, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 1088,
	1068, 1069, 1070, 1071, 0, 0, 0, 0, 0, 1051,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1080, 1088, 1078, 0, 0, 0, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1077, 1078, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1077, 1072,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1067, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 0, 1072, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1043, 1044, 0, 1073, 1074, 1075,
	1083, 1084, 1085, 0, 0, 0, 0, 0, 0, 0,
	1076, 0, 0, 0, 0, 0, 0, 1046, 0, 1079,
	1087, 0, 1057, 1058, 1064, 1063, 1059, 1060, 1061, 1082,
	0, 1056, 1054, 1055, 1047, 1048, 1049, 1050, 1052, 1053,
	0, 1045, 0, 0, 2470, 0, 0, 1065, 0, 0,
	0, 0, 1079, 0, 1062, 1057, 1058, 1064, 1063, 1059,
	1060, 1061, 1082, 0, 1056, 1054, 1055, 1047, 1048, 1049,
	1050, 1052, 1053, 0, 0, 0, 0, 2421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1068, 1069, 1070, 1071, 0, 0, 0, 0,
	0, 1051, 0, 0, 0, 0, 1043, 1044, 0, 1073,
	1074, 1075, 1083, 1084, 1085, 0, 0, 0, 0, 0,
	0, 0, 1076, 1080, 1088, 0, 0, 0, 0, 1046,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1045, 0, 0, 0, 0, 1078, 1065,
	0, 0, 0, 0, 0, 1066, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1077, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 1069, 1070, 1071, 0, 0,
	0, 0, 0, 1051, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 0, 1080, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 0,
	0, 0, 1043, 1044, 1086, 1073, 1074, 1075, 1083, 1084,
	1085, 0, 0, 0, 0, 0, 0, 0, 1076, 0,
	1078, 0, 0, 0, 0, 1046, 0, 1066, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1045,
	0, 0, 1077, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 1062, 0, 1079, 0, 0, 1057, 1058, 1064,
	1063, 1059, 1060, 1061, 1082, 0, 1056, 1054, 1055, 1047,
	1048, 1049, 1050, 1052, 1053, 0, 1072, 0, 0, 2375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 0,
	1068, 1069, 1070, 1071, 0, 0, 0, 1081, 0, 1051,
	0, 0, 0, 0, 1043, 1044, 0, 1073, 1074, 1075,
	1083, 1084, 1085, 0, 0, 0, 0, 0, 0, 0,
	1076, 1080, 1088, 0, 0, 0, 0, 1046, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1045, 0, 0, 0, 0, 1078, 1065, 0, 0,
	0, 0, 0, 1066, 1062, 0, 1079, 0, 0, 1057,
	1058, 1064, 1063, 1059, 1060, 1061, 1082, 0, 1056, 1054,
	1055, 1047, 1048, 1049, 1050, 1052, 1053, 0, 1077, 0,
	0, 2345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1068, 1069, 1070, 1071, 0, 0, 0, 0,
	0, 1051, 1072, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 1080, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 0, 0, 0,
	1043, 1044, 1086, 1073, 1074, 1075, 1083, 1084, 1085, 0,
	0, 0, 0, 0, 0, 0, 1076, 0, 1078, 0,
	0, 0, 0, 1046, 0, 1066, 1087, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1045, 0, 0,
	1077, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	1062, 0, 1079, 0, 0, 1057, 1058, 1064, 1063, 1059,
	1060, 1061, 1082, 0, 1056, 1054, 1055, 1047, 1048, 1049,
	1050, 1052, 1053, 0, 1072, 0, 0, 2340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 1069,
	1070, 1071, 0, 0, 0, 1081, 0, 1051, 0, 0,
	0, 0, 1043, 1044, 0, 1073, 1074, 1075, 1083, 1084,
	1085, 0, 0, 0, 0, 0, 0, 0, 1076, 1080,
	1088, 0, 0, 0, 0, 1046, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1045,
	0, 0, 0, 0, 1078, 1065, 0, 0, 0, 0,
	0, 1066, 1062, 0, 1079, 0, 0, 1057, 1058, 1064,
	1063, 1059, 1060, 1061, 1082, 0, 1056, 1054, 1055, 1047,
	1048, 1049, 1050, 1052, 1053, 0, 1077, 0, 0, 2336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1068, 1069, 1070, 1071, 0, 0, 0, 0, 0, 1051,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 1080, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 0, 1043, 1044,
	1086, 1073, 1074, 1075, 1083, 1084, 1085, 0, 0, 0,
	0, 0, 0, 0, 1076, 0, 1078, 0, 0, 0,
	0, 1046, 0, 1066, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1045, 0, 0, 1077, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 1062, 0,
	1079, 0, 0, 1057, 1058, 1064, 1063, 1059, 1060, 1061,
	1082, 0, 1056, 1054, 1055, 1047, 1048, 1049, 1050, 1052,
	1053, 0, 1072, 0, 0, 2274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 1068, 1069, 1070, 1071,
	0, 0, 0, 1081, 0, 1051, 0, 0, 0, 0,
	1043, 1044, 0, 1073, 1074, 1075, 1083, 1084, 1085, 0,
	0, 0, 0, 0, 0, 0, 1076, 1080, 1088, 0,
	0, 0, 0, 1046, 0, 0, 1087, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1045, 0, 0,
	0, 0, 1078, 1065, 0, 0, 0, 0, 0, 1066,
	1062, 0, 1079, 0, 0, 1057, 1058, 1064, 1063, 1059,
	1060, 1061, 1082, 0, 1056, 1054, 1055, 1047, 1048, 1049,
	1050, 1052, 1053, 0, 1077, 0, 0, 2237, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 1069,
	1070, 1071, 0, 0, 0, 0, 0, 1051, 1072, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 1080,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	0, 0, 0, 0, 0, 0, 1043, 1044, 1086, 1073,
	1074, 1075, 1083, 1084, 1085, 0, 0, 0, 0, 0,
	0, 0, 1076, 0, 1078, 0, 0, 0, 0, 1046,
	0, 1066, 1087, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1045, 0, 0, 1077, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 1062, 0, 1079, 0,
	0, 1057, 1058, 1064, 1063, 1059, 1060, 1061, 1082, 0,
	1056, 1054, 1055, 1047, 1048, 1049, 1050, 1052, 1053, 0,
	1072, 0, 0, 2236, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 1069, 1070, 1071, 0, 0,
	0, 1081, 0, 1051, 0, 0, 0, 0, 1043, 1044,
	0, 1073, 1074, 1075, 1083, 1084, 1085, 0, 0, 0,
	0, 0, 0, 0, 1076, 1080, 1088, 0, 0, 0,
	0, 1046, 0, 0, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1045, 0, 0, 0, 0,
	1078, 1065, 0, 0, 0, 0, 0, 1066, 1062, 0,
	1079, 0, 0, 1057, 1058, 1064, 1063, 1059, 1060, 1061,
	1082, 0, 1056, 1054, 1055, 1047, 1048, 1049, 1050, 1052,
	1053, 0, 1077, 0, 0, 2201, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1068, 1069, 1070, 1071,
	0, 0, 0, 0, 0, 1051, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 1080, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 0, 0,
	0, 0, 0, 0, 1043, 1044, 1086, 1073, 1074, 1075,
	1083, 1084, 1085, 0, 0, 0, 0, 0, 0, 0,
	1076, 0, 1078, 0, 0, 0, 0, 1046, 0, 1066,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1045, 0, 0, 1077, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 1062, 0, 1079, 0, 0, 1057,
	1058, 1064, 1063, 1059, 1060, 1061, 1082, 0, 1056, 1054,
	1055, 1047, 1048, 1049, 1050, 1052, 1053, 0, 1072, 0,
	0, 2048, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 0,
	0, 0, 1068, 1069, 1070, 1071, 0, 0, 0, 1081,
	0, 1051, 0, 0, 0, 0, 1043, 1044, 0, 1073,
	1074, 1075, 1083, 1084, 1085, 0, 0, 0, 0, 0,
	0, 0, 1076, 1080, 1088, 0, 0, 0, 0, 1046,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1045, 0, 0, 0, 0, 1078, 1065,
	0, 0, 0, 0, 0, 1066, 1062, 0, 1079, 0,
	0, 1057, 1058, 1064, 1063, 1059, 1060, 1061, 1082, 0,
	1056, 1054, 1055, 1047, 1048, 1049, 1050, 1052, 1053, 0,
	1077, 0, 0, 2024, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 1069, 1070, 1071, 0, 0,
	0, 0, 0, 1051, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 0, 1080, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 0,
	0, 0, 1043, 1044, 1086, 1073, 1074, 1075, 1083, 1084,
	1085, 0, 0, 0, 0, 0, 0, 0, 1076, 0,
	1078, 0, 0, 0, 0, 1046, 0, 1066, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1045,
	0, 0, 1077, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 1062, 0, 1079, 0, 0, 1057, 1058, 1064,
	1063, 1059, 1060, 1061, 1082, 0, 1056, 1054, 1055, 1047,
	1048, 1049, 1050, 1052, 1053, 0, 1072, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 0,
	1068, 1069, 1070, 1071, 0, 0, 0, 1081, 0, 1051,
	2533, 0, 0, 0, 1043, 1044, 0, 1073, 1074, 1075,
	1083, 1084, 1085, 0, 0, 0, 0, 0, 0, 0,
	1076, 1080, 1088, 0, 0, 0, 0, 1046, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1045, 0, 0, 0, 0, 1078, 1065, 0, 0,
	0, 0, 0, 1066, 1062, 0, 1079, 0, 0, 1057,
	1058, 1064, 1063, 1059, 1060, 1061, 1082, 0, 1056, 1054,
	1055, 1047, 1048, 1049, 1050, 1052, 1053, 0, 1077, 1778,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2532, 0, 0, 0, 0, 0,
	0, 0, 1068, 1069, 1070, 1071, 0, 0, 0, 0,
	0, 1051, 1072, 1848, 0, 0, 1847, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 1080, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 0, 0, 0,
	1043, 1044, 1086, 1073, 1074, 1075, 1083, 1084, 1085, 0,
	0, 0, 0, 0, 0, 0, 1076, 0, 1078, 0,
	0, 1751, 0, 1046, 0, 1066, 1087, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1045, 0, 0,
	1077, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	1062, 0, 1079, 0, 0, 1057, 1058, 1064, 1063, 1059,
	1060, 1061, 1082, 0, 1056, 1054, 1055, 1047, 1048, 1049,
	1050, 1052, 1053, 0, 1072, 0, 0, 1752, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 1069,
	1070, 1071, 0, 0, 0, 1081, 1586, 1051, 0, 0,
	0, 0, 1043, 1044, 0, 1073, 1074, 1075, 1083, 1084,
	1085, 0, 0, 0, 0, 0, 0, 0, 1076, 1080,
	1088, 0, 1585, 0, 0, 1046, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1045,
	0, 0, 0, 0, 1078, 1065, 0, 0, 0, 0,
	0, 1066, 1062, 0, 1079, 0, 0, 1057, 1058, 1064,
	1063, 1059, 1060, 1061, 1082, 0, 1056, 1054, 1055, 1047,
	1048, 1049, 1050, 1052, 1053, 0, 1077, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1068, 1069, 1070, 1071, 0, 0, 0, 0, 0, 1051,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 1080, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 0, 1043, 1044,
	1086, 1073, 1074, 1075, 1083, 1084, 1085, 0, 0, 0,
	0, 0, 0, 0, 1076, 0, 1078, 0, 0, 0,
	0, 1046, 0, 1066, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1045, 0, 0, 1077, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 1062, 0,
	1079, 0, 0, 1057, 1058, 1064, 1063, 1059, 1060, 1061,
	1082, 0, 1056, 1054, 1055, 1047, 1048, 1049, 1050, 1052,
	1053, 0, 1072, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 1068, 1069, 1070, 1071,
	0, 0, 0, 1081, 0, 1051, 0, 0, 0, 0,
	1043, 1044, 0, 1073, 1074, 1075, 1083, 1084, 1085, 0,
	0, 0, 0, 0, 0, 0, 1076, 1080, 1088, 0,
	0, 0, 0, 1046, 0, 0, 1087, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1045, 0, 0,
	0, 0, 1078, 1065, 0, 0, 0, 0, 0, 1066,
	1062, 0, 1079, 0, 0, 1057, 1058, 1064, 1063, 1059,
	1060, 1061, 1082, 0, 1056, 1054, 1055, 1047, 1048, 1049,
	1050, 1052, 1053, 0, 1077, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 1069,
	1070, 1071, 0, 0, 0, 0, 0, 1051, 1072, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 1080,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	0, 0, 0, 0, 0, 0, 1043, 1044, 1086, 1073,
	1074, 1075, 1083, 1084, 1085, 0, 0, 0, 0, 0,
	0, 0, 1076, 0, 1078, 0, 0, 0, 0, 1046,
	0, 1066, 1087, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1045, 0, 0, 1077, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 1062, 0, 1079, 0,
	0, 1057, 1058, 1064, 1063, 1059, 1060, 1061, 1082, 0,
	1056, 1054, 1055, 1047, 1048, 1049, 1050, 1052, 1053, 0,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 1069, 1070, 1071, 0, 0,
	0, 1081, 0, 1051, 0, 0, 0, 0, 1854, 0,
	0, 1043, 1044, 0, 1073, 1074, 1075, 1083, 1084, 1085,
	0, 0, 0, 0, 0, 1080, 1088, 1076, 2028, 0,
	0, 1849, 0, 0, 1046, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1045, 0,
	1078, 0, 0, 0, 1065, 0, 0, 1066, 0, 0,
	1079, 1062, 0, 1057, 1058, 1064, 1063, 1059, 1060, 1061,
	1082, 0, 1056, 1054, 1055, 1047, 1048, 1049, 1050, 1052,
	1053, 0, 1077, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1068,
	1069, 1070, 1071, 0, 0, 0, 1072, 0, 1051, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 1088, 0, 0, 0, 0, 0, 1081, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1043, 1044, 1086,
	1073, 1074, 1075, 1083, 1084, 1085, 0, 0, 0, 0,
	0, 0, 0, 1076, 0, 1078, 0, 0, 0, 0,
	1046, 0, 1066, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1045, 0, 0, 1077, 0, 0,
	1065, 0, 0, 0, 0, 0, 1079, 1062, 0, 1057,
	1058, 1064, 1063, 1059, 1060, 1061, 1082, 0, 1056, 1054,
	1055, 1047, 1048, 1049, 1050, 1052, 1053, 0, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 1069, 1070, 1071, 0,
	0, 0, 1081, 0, 1051, 0, 0, 0, 0, 1043,
	1044, 0, 1073, 1074, 1075, 1083, 1084, 1085, 0, 0,
	0, 0, 0, 0, 0, 1076, 1080, 1088, 0, 1807,
	0, 0, 1046, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1045, 0, 0, 0,
	0, 1078, 1065, 0, 0, 0, 0, 0, 1066, 1062,
	0, 1079, 0, 0, 1057, 1058, 1064, 1063, 1059, 1060,
	1061, 1082, 0, 1056, 1054, 1055, 1047, 1048, 1049, 1050,
	1052, 1053, 0, 1077, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1814, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 1069, 1070,
	1071, 0, 0, 0, 0, 0, 1051, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 0, 0, 0, 1080, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 1043, 1044, 1086, 1073, 1074,
	1075, 1083, 1084, 1085, 0, 0, 0, 0, 0, 0,
	0, 1076, 0, 1078, 0, 0, 0, 0, 1046, 0,
	1066, 1087, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1045, 0, 0, 1077, 0, 0, 1065, 0,
	0, 0, 0, 0, 0, 1062, 0, 1079, 0, 0,
	1057, 1058, 1064, 1063, 1059, 1060, 1061, 1082, 0, 1056,
	1054, 1055, 1047, 1048, 1049, 1050, 1052, 1053, 0, 1072,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1067, 0, 0, 0, 0, 0,
	0, 0, 0, 1068, 1069, 1070, 1071, 0, 0, 0,
	1081, 0, 1051, 0, 0, 0, 0, 1043, 1044, 0,
	1073, 1074, 1075, 1083, 1084, 1085, 0, 0, 0, 0,
	0, 0, 0, 1076, 1080, 1088, 0, 0, 0, 0,
	1046, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1045, 0, 0, 0, 0, 1078,
	1065, 0, 0, 0, 0, 0, 1066, 1062, 0, 1079,
	0, 0, 1057, 1058, 1064, 1063, 1059, 1060, 1061, 1082,
	0, 1056, 1054, 1055, 1047, 1048, 1049, 1050, 1052, 1053,
	0, 1077, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 1069, 1070, 1071, 0,
	0, 0, 0, 0, 1051, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1067, 0, 0, 0, 0, 0, 1080, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 1043, 1044, 1086, 1073, 1074, 1075, 1083,
	1084, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 1046, 0, 1066, 1087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1045, 0, 0, 0, 0, 0, 1065, 0, 0, 0,
	0, 0, 0, 1062, 0, 1079, 0, 0, 1057, 1058,
	1064, 1063, 1059, 1060, 1061, 1082, 0, 1056, 1054, 1055,
	1047, 1048, 1049, 1050, 1052, 1053, 0, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 1069, 1070, 1071, 0, 0, 0, 1081, 0,
	1051, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 39, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 1066, 40, 127, 1079, 0, 0,
	1057, 1058, 1064, 1063, 1059, 1060, 1061, 1082, 43, 1056,
	1054, 1055, 1047, 1048, 1049, 1050, 1052, 1053, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 0, 49, 0, 0, 0, 1043, 1044,
	0, 1073, 1074, 1075, 1083, 1084, 1085, 0, 0, 0,
	0, 0, 0, 1072, 0, 52, 0, 0, 0, 54,
	0, 1046, 0, 60, 1087, 0, 130, 0, 1067, 0,
	61, 0, 126, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1081, 1045, 0, 0, 0, 0,
	0, 1065, 0, 0, 0, 63, 0, 0, 1062, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1068, 1069, 1070, 1071,
	0, 0, 0, 1079, 0, 1051, 1057, 1058, 1064, 1063,
	1059, 1060, 1061, 1082, 0, 1056, 1054, 1055, 1047, 1048,
	1049, 1050, 1052, 1053, 0, 0, 0, 1080, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	0, 0, 0, 0, 0, 66, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1291, 1078, 0, 73, 124, 67, 0, 68, 1066,
	69, 0, 131, 0, 0, 0, 0, 70, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 101, 0, 0, 1299, 1288, 1318, 1279, 1309, 1308,
	128, 0, 1281, 1280, 0, 0, 0, 0, 1320, 1319,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1072, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 1067, 0, 0, 1314, 139, 1306, 1305,
	0, 0, 0, 0, 0, 132, 0, 0, 1304, 1081,
	0, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1303, 1301, 1302, 0, 123, 0, 0, 4, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1287, 0,
	0, 0, 0, 0, 0, 1292, 1290, 1293, 1294, 1295,
	1296, 1297, 0, 1317, 0, 1291, 0, 0, 1079, 0,
	0, 1057, 1058, 1064, 1063, 1059, 1060, 1061, 1082, 0,
	1056, 1054, 1055, 1047, 1048, 1049, 1050, 1052, 1053, 0,
	0, 0, 0, 1283, 0, 0, 0, 0, 1299, 1288,
	1318, 1279, 1309, 1308, 0, 1307, 1281, 1280, 540, 1289,
	566, 0, 1320, 1319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 0,
	543, 0, 1411, 1409, 1410, 1413, 1412, 0, 0, 0,
	1314, 0, 1306, 1305, 0, 0, 0, 0, 0, 0,
	0, 544, 1304, 0, 0, 0, 546, 0, 0, 1284,
	0, 0, 0, 0, 552, 553, 0, 0, 0, 562,
	1298, 1285, 0, 0, 0, 1303, 1301, 1302, 0, 0,
	1322, 0, 0, 567, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 1282, 0, 0, 0, 1315, 1316, 0,
	0, 0, 1287, 0, 0, 0, 565, 0, 0, 1292,
	1290, 1293, 1294, 1295, 1296, 1297, 0, 1317, 0, 1286,
	0, 0, 0, 0, 1321, 0, 0, 0, 0, 0,
	0, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1283, 0, 549,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 1307,
	0, 0, 0, 1289, 0, 0, 0, 556, 0, 0,
	551, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 568, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1284, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 554, 1298, 1285, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1282, 0, 0,
	0, 1315, 1316, 0, 0, 0, 0, 0, 0, 0,
	542, 559, 569, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1286, 0, 0, 0, 0, 1321, 0,
	0, 0, 0, 0, 0, 0, 560, 0, 0, 0,
	564, 0, 0, 0, 0, 570, 0, 0, 0, 0,
	557, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 563,
}
var sqlPact = [...]int{

	42301, -1000, -2, -1000, -1000, -1000, 159, -1000, -1000, -1000,
	158, 156, 155, -1000, 152, 150, 149, 146, 145, 144,
	143, 142, 139, 135, 133, -1000, 129, -1000, -1000, -1000,
	-1000, 125, 124, 123, 122, 117, 115, 111, -1000, 1104,
	22023, 109, 108, 1477, 35811, 104, 103, 102, 101, 1035,
	99, 98, 26059, 1063, 1490, 95, 93, 91, 90, 89,
	1011, 35477, 2694, 1397, 1130, 1610, 35140, 21686, 1603, 1340,
	34803, -1000, -1000, 34466, 88, 85, 82, 81, 80, -1000,
	-1000, 34129, 73, 62, 60, 59, 52, 51, 50, 49,
	46, 44, 43, 36, 35, 29, -1000, 28, 25, 24,
	-1000, 42756, 23, 22, 21, 1123, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	141, -1000, 929, 488, 1451, 8471, 863, 1026, 1023, 1020,
	999, 1021, 37815, 35811, 20, -130, 19, -1000, 2025, 700,
	19268, 42301, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 25722, 25385, 33792, 33455,
	6380, 768, -1000, -10, 22693, 35811, -1000, 75, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14744, 14395, 575, 75, -1000, -1000,
	-1000, -1000, -1000, 33118, -1000, 32781, 32444, 1460, 32107, -1000,
	-1000, -1000, -1000, 31770, -1000, -1000, 1837, 1614, 1612, 25048,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 31436, 31099, 30762, 30425, 30088, 526, -1000, -1000,
	-1000, 17528, -1000, -1000, -1000, -1000, 18, -1000, 17, -1000,
	16, 15, 14, 12, -1000, 11, 10, -1000, 8, 6,
	-1000, 5, 4, 29751, 1319, -1000, -1000, -4, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 35811, -1000, 15440, -1000,
	525, -1000, 1645, -1000, 15440, -1000, 1316, -1000, -1000, -1000,
	-1000, -1000, 35811, -1000, -1000, -1000, -1000, -1000, -1000, 2109,
	1199, 524, 29414, -1000, 1523, -1000, 616, 785, -1000, -1000,
	-1000, 9515, 184, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1459, 23041, 1208, 1946, 1825, 2108, 1511, 1744,
	1740, 1711, 1678, 1674, 2102, 930, 2100, 1782, 1032, 2099,
	1671, 1373, 680, 2098, 1642, 1638, -1000, -1000, -1000, -1000,
	944, -1000, -1000, -1000, 27395, -1000, -1000, 929, -1000, -1000,
	-1000, 1413, 1924, 1924, 1924, 1972, 330, 324, -1000, 141,
	-1000, 1453, -1000, 1182, -1000, -1000, -1000, -1000, -1000, 41865,
	-1000, -1000, 15440, 15440, 15440, 15440, 15440, 1272, 546, -1000,
	522, 520, 7774, -1000, -1000, 2081, -1000, -1000, -1000, 332,
	-1000, -1000, 15440, 75, -1000, -1000, -1000, -1000, 514, 2090,
	-1000, 633, -1000, -1000, -1000, 621, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1666, 511, 510, 507, -1000,
	505, -1000, -1000, 500, 498, 496, 495, 494, 493, 492,
	481, 480, 479, 478, 477, 474, 471, 469, 1161, -1000,
	638, -1000, -1000, 638, 638, -1000, 454, 454, 455, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 454, -1000, -1000,
	-1000, 585, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 468, 918, 1283, -1000, -1000, 1283, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 767, 37147, -12, 35811,
	-1000, 467, -12, -1000, -1000, 334, -1000, 10559, 10559, -1000,
	-1000, -1000, -1000, -1000, 9863, 1615, -1000, 3429, -192, 329,
	583, -1000, 18224, 21002, -1000, -1000, 1166, 1761, 815, -1000,
	989, 1760, 536, -1000, 1117, -1000, 1200, 1757, -134, 1688,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 23375, 22693, -10,
	-44, -1000, -1000, -1000, 6032, 41865, -1000, 41865, -1000, 845,
	19962, 75, -1000, -1000, -1000, -1000, 466, 1353, 626, -1000,
	343, -1000, 29077, 626, 1352, -1000, -1000, -1000, 27395, -1000,
	35811, -1000, 35811, -1000, 875, -1000, 37481, 118, 1754, -1000,
	-1000, 118, 1753, -1000, 114, 1752, -1000, -1000, 1254, 1741,
	-1000, -44, 1738, -1000, -1000, 15440, -14, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 700, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 28740, 22358, 1084,
	628, 41865, 2021, 42711, 23375, 41865, 22358, -1000, -1000, 35811,
	-1000, 15440, -1000, 2020, 1404, -13, -1000, -1000, -1000, -1000,
	-1000, 1384, 1406, 758, 842, 9515, 9515, 1808, -1000, 173,
	6380, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 28403,
	-1000, -1000, -1000, 1152, 35811, -1000, -1000, 1665, -1000, 22358,
	35811, -1000, 35811, -1000, 35811, -1000, 35811, -1000, 35811, -1000,
	-1000, -1000, -1000, -1000, 1192, -1000, 1661, -1000, -1000, 35811,
	-1000, 1377, -1000, -1000, -1000, 28069, 27732, -1000, 988, 801,
	-1000, -1000, 130, -1000, -1000, 1413, -1000, 1322, 1454, 14046,
	1439, 15440, 141, -1000, -1000, 141, 141, 9167, -1000, -1000,
	-1000, 35811, -1000, 42547, 42711, 6380, 784, 15440, 15440, 15440,
	15440, 15440, 15440, 15440, 15440, 15440, 15440, 15440, 15440, 15440,
	15440, 15440, 15440, 15440, 15440, 15440, 15440, 15440, 15440, 15440,
	15440, 15440, 15440, 15440, 15440, 15440, 15440, 15440, 15440, 1365,
	15440, 764, 15440, 15440, 15440, 15440, 1245, 1110, 453, 1293,
	-1000, 2054, 2054, 2054, 42143, 42143, 374, 546, -1000, 15440,
	-1000, 74, 15440, 324, 40194, -11, 7426, -1000, -1000, -1000,
	13698, 636, 41865, 75, 6728, -1000, 2076, 858, 1675, 1506,
	463, 557, 545, 541, 489, 15440, 15440, 13350, 13001, 12652,
	16136, 12303, 15440, 8122, 15440, 15440, 15440, 15440, 11954, 11605,
	-1000, 462, -1000, -1000, -1000, -1000, 2075, -1000, -1000, 2074,
	-1000, 783, 779, 2073, 1961, 614, -1000, -13, -1000, 37147,
	-1000, 35811, -12, 2018, 35811, -1000, 70, -1000, 40872, -1000,
	70, -19, -1000, 1430, 1422, 19615, 1308, 1276, 1276, 1276,
	-1000, 457, 538, 583, 5317, 11256, -1000, 26393, 1285, 167,
	320, 17876, 1615, -1000, 35811, -59, 976, -1000, 24711, 1914,
	1897, 1841, 27395, 1988, 74, 1923, 1635, 763, 27395, 1921,
	749, 1986, 74, 1632, 742, 35811, 6380, 1889, 578, -1000,
	35811, -1000, -1000, -1000, 1624, -20, -1000, -1000, 24377, 2015,
	1730, -1000, 1181, -1000, 2014, 35811, 1313, 1350, -1000, -1000,
	756, 1728, 632, 269, 2005, 269, 20308, -1000, 35811, -1000,
	35811, -1000, -1000, 35811, -1000, 35811, -1000, 35811, 35811, -1000,
	35811, 35811, -22, 41865, 3475, 24043, 737, -1000, 658, 24377,
	470, -30, -1000, 883, -1000, -1000, -1000, -1000, 262, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 455, 1161, 454, 454, 454, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 585, -1000, -1000, 638, 638,
	638, -1000, -1000, -31, -1000, 1621, 612, -33, 691, -13,
	-1000, 1283, -1000, 950, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2089, -1000, 2059,
	-1000, -1000, 2072, -15, -1000, -15, -1000, 6380, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 35811, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 461, -1000, -1000, -1000, -1000, -1000,
	-1000, 35811, 35811, 35811, -1000, 27395, -1000, -1000, -1000, -1000,
	41865, -1000, 396, -1000, -1000, 41865, 1129, 1442, -1000, 1442,
	-25, -1000, 40750, 1411, 35811, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 604, 876, 876, 823,
	823, 823, 823, 2030, 2742, 231, 746, 188, 188, 188,
	188, 188, 188, 188, 188, 2290, 450, 450, 2290, 2290,
	2290, 2290, 2290, 188, 188, 188, 42143, 41987, 4584, 15440,
	15440, 736, 1101, 453, 4584, 15440, 4584, 4584, 4584, 4584,
	-1000, 1312, -1000, -1000, -1000, -1000, 1619, 451, 16136, 16136,
	-1000, -1000, -1000, 7774, 16484, -1000, -1000, -1000, -1000, 449,
	15440, -1000, 40316, -222, 319, -110, -1000, 15440, 537, -40,
	-1000, 878, -1000, 15440, -1000, -38, 15440, 15440, 15440, 317,
	-1000, 315, -1000, 735, -1000, 733, 731, 721, -1000, 448,
	1257, 439, 437, 15440, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 41709, 4842, 313, -1000, 1618, -110, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 312, -1000, 311, -1000, 41587,
	-110, 310, 2831, -1000, 16136, 16136, 16136, 7774, 436, 300,
	-1000, 40594, -1000, 41431, 10907, 10907, 10907, 291, 41306, 15440,
	-110, 4720, 4564, 4148, -56, -63, -1000, -65, -1000, 2071,
	-74, 290, 603, 602, 288, 1660, -1000, 1927, -1000, -1000,
	435, -75, 632, 10559, 18920, 6380, -1000, 632, 9863, -1000,
	19615, 19615, 1258, 1421, 19615, -1000, -1000, -1000, -1000, 26393,
	530, 583, 26393, -1000, 2070, 1427, 287, -1000, -1000, -1000,
	35811, 433, -1000, 583, 284, 1066, 35811, 35811, 35811, -1000,
	-1000, 1349, 36813, 1348, 42711, 35811, -1000, 430, 428, 1410,
	1409, 35811, 35811, 36479, 36145, 35811, 1098, 74, -1000, 595,
	427, 35811, 973, 594, 35811, 74, -1000, 426, 35811, 961,
	-1000, 593, 1481, 1325, -1000, 840, 1594, 35811, 283, -80,
	-36, 42711, -1000, -1000, -1000, -1000, -1000, 35811, 502, 35811,
	74, 35811, 2088, 74, 35811, 1723, 1748, 564, 35811, 1454,
	15440, 1157, -1000, 18572, 650, 35811, 936, 63, -1000, -1000,
	-1000, 574, 35811, -1000, -1000, 118, 118, -1000, 114, 1254,
	-44, -1000, 15440, -1000, -1000, 35811, 23375, -81, -1000, -1000,
	42711, -1000, 543, 788, -1000, 2068, 625, 23375, 35811, 9515,
	9515, -1000, 1435, -1000, -1000, 953, -1000, 1043, -1000, -1000,
	-1000, -1000, 9515, -1000, -66, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1129, -1000, 15440, 2066, -1000, -1000, -1000, 9167,
	-1000, -1000, -1000, 35811, -183, 15440, 4584, 4584, 15440, 16136,
	16136, -1000, 4584, -1000, -1000, -1000, -1000, -1000, 1589, 420,
	15440, 42711, 4528, 4092, -82, -1000, 15440, -45, -1000, 15440,
	-1000, 40038, -1000, -1000, 400, 1714, -1000, 15440, 41150, 282,
	10211, -1000, 41028, -43, -43, -1000, 2087, 1364, 1154, 962,
	889, 2065, -1000, 20655, 634, 1287, 39916, 42547, 42711, -1000,
	15440, -1000, -1000, 1582, 15440, -1000, 42547, 42711, 16136, 16136,
	16136, 16136, 16136, 16136, 16136, 16136, 16136, 16136, 16136, 16136,
	16136, 16136, 16136, 16136, 16136, 16136, 16136, 1482, 16136, 2047,
	2047, 2047, -57, 15440, -1000, 1657, 1582, 15440, 15440, 42711,
	278, 277, 276, -1000, 15440, -110, 15440, 15440, 15440, -1000,
	-1000, -1000, 267, -1000, 2063, -1000, -1000, -1000, -1000, 1009,
	-1000, 470, -1000, 1504, -1000, -149, -1000, 1615, -1000, 1504,
	-1000, -1000, 1258, -1000, 419, 15440, 19615, -1000, 535, -1000,
	-83, -1000, 26393, -1000, 534, -219, -1000, 573, -1000, 583,
	418, 35811, 26393, -1000, -1000, -1000, 720, 719, 1704, -1000,
	1345, -1000, 654, -1000, 1094, 15440, 17180, 417, 416, 1125,
	-1000, 1700, 1254, 1697, 1254, -1000, -59, 959, -1000, 21349,
	15440, -1000, 718, 21349, -1000, -1000, 15440, -1000, 714, 21349,
	625, 1571, 819, -1000, 839, -1000, 1468, -1000, 24377, 412,
	35811, 411, -1000, 410, -1000, -1000, 406, 35811, 1396, 564,
	23709, -1000, 626, 936, -1000, 41865, -1000, 936, 8819, 1846,
	-100, -1000, -1000, -1000, 632, 20308, 19615, 9863, -107, -1000,
	-1000, -1000, -1000, 41865, -66, 1816, 1816, -1000, 2062, -1000,
	533, 266, -1000, 27061, -1000, -66, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35811, 1295, 39760, -1000, 1940, 6380, 2042,
	4584, 3432, 263, 15440, 42711, 42368, -108, 15440, 15440, -1000,
	265, 15440, 531, 41865, -1000, -1000, -1000, 41865, 15440, 2056,
	15440, 264, 260, 248, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 247, -1000, -1000, 38149, 15440, 246, -1000, 244,
	239, 41865, 1657, 41865, -1000, -1000, 703, 703, 903, 903,
	903, 903, 2047, 912, 280, 699, 224, 224, 224, 592,
	398, 398, 224, 224, 224, 1555, 1445, 404, 4112, 15440,
	236, -1000, -1000, 41865, 41865, 233, -1000, -1000, -1000, -110,
	314, 39638, 39482, -1000, 232, 6380, 35811, 35811, 229, 1492,
	1968, -1000, 19615, 1492, -1000, 35811, 41865, -1000, -192, -1000,
	2061, -1000, -1000, 1427, -1000, 5679, 26393, 35811, -113, -1000,
	35811, 35811, 35811, 1694, -1000, 2445, -1000, 39360, -114, -1000,
	321, 1942, 15440, -1000, -1000, 403, 17180, 35811, -1000, 1452,
	1529, 678, 35811, -1000, 35811, -1000, 35811, 35811, 35811, -1000,
	402, 75, -120, 35811, -1000, -121, 35811, -1000, -1000, 23375,
	774, -1000, 1256, 1471, -1000, 17180, 401, 35811, 24377, 2000,
	17180, 1311, 1400, 564, 23709, -1000, 756, -1000, -1000, -68,
	-1000, 399, 74, 936, -1000, -76, -1000, 572, 1796, -1000,
	1788, 528, -1000, -1000, -77, 397, -1000, 570, 566, -1000,
	-1000, -1000, -1000, 1940, 15440, 15440, 42368, -123, -1000, 4584,
	4584, -1000, 39204, -1000, 41865, -1000, 41028, -1000, -1000, -1000,
	-1000, 1212, -1000, 39082, -1000, -1000, -1000, -1000, 16136, 1497,
	385, 42711, 38926, -1000, -1000, 15440, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 630, 15440, 15440, 1615, 630, -131, 583,
	-1000, -1000, -1000, 2052, -1000, -136, -1000, -1000, -1000, -1000,
	35811, -1000, 35811, -1000, 6380, 35811, 1562, 1334, -1000, -1000,
	1407, 381, 16136, 35811, -1000, 1062, 17180, 1940, 75, 6380,
	1940, 38804, 6728, -139, -142, 1332, -1000, 1330, 15440, -1000,
	42711, 1254, 1254, -1000, 712, 709, 15440, 708, -1000, 702,
	-1000, -99, 21349, -1000, -1000, 1964, 1261, -148, 17180, -150,
	210, 74, -156, 35811, -1000, 564, 23709, -1000, 1748, 1770,
	35811, 1833, -1000, -1000, 378, 377, 372, -1000, 26727, 26727,
	23375, 23375, -1000, 4584, 4584, -1000, -1000, 208, 1287, 1962,
	-1000, 4747, 16136, 42711, -157, -1000, 38522, -1000, 35811, 41865,
	-110, -1000, -1000, 26393, 490, -1000, -1000, 1160, -1000, -1000,
	35811, 1338, -1000, -1000, 15440, 4112, 368, 1468, 365, -1000,
	-1000, -1000, -1000, -1000, -1000, 1942, -38, -1000, 1025, -1000,
	-1000, 41865, 1938, -1000, -1000, 35811, 35811, -43, 363, 360,
	-1000, 1251, 35811, 1062, -159, -1000, 1468, -1000, 1062, 359,
	23709, -1000, 1396, 800, -162, 35811, -1000, -1000, 7076, 23375,
	23375, -1000, -164, -1000, -1000, -1000, 1045, 15440, 4747, -165,
	-1000, -1000, -109, -1000, 1998, -1000, -1000, -1000, -1000, 1693,
	38489, 1367, 35811, -1000, 35811, 1940, 207, 35811, 657, 6380,
	-1000, -1000, 205, 15440, 15440, 355, 349, 347, 1468, 1062,
	-1000, 1468, 17180, -1000, 1400, 873, -1000, 632, -1000, -167,
	-179, -1000, 201, 15788, 15788, -110, -1000, 35811, 346, 1682,
	-1000, 1298, 1234, 192, -185, -1000, -1000, 343, -1000, 15440,
	-1000, 2056, -186, -188, 35811, 35811, 35811, -1000, 1468, -1000,
	-193, -1000, 20308, -1000, 625, 625, -1000, -1000, -1000, 16832,
	1244, 920, 40472, -1000, -1000, -1000, 35811, -1000, 1309, 1307,
	896, -1000, -1000, -1000, -1000, -1000, 1367, 41865, -1000, -1000,
	-194, -195, -202, -1000, 1062, -170, -1000, -1000, 2029, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1777, -1000, 670, 1156,
	1156, 1298, 338, 337, 1252, 1468, -1000, 15092, -1000, 2036,
	-1000, -1000, 1472, -1000, -1000, 1195, 1190, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 190, 6380, 186, 6380, -1000,
	647, -1000, 646, 334, 1390, -61, -1000, 705, 348, -119,
	-1000, 334, -1000, -1000, 1195, -62, -1000, 1190, -141, -1000,
	-1000, 1190, -1000,
}
var sqlPgo = [...]int{

	0, 2483, 2479, 1688, 2017, 2474, 2473, 2471, 2470, 2469,
	2467, 2465, 2462, 2459, 2456, 2454, 2452, 2451, 2450, 2448,
	2447, 2446, 2439, 2434, 1966, 2432, 1963, 2428, 2426, 2424,
	2423, 1920, 2422, 2421, 2420, 2418, 2416, 2415, 1918, 2412,
	1907, 2407, 2405, 2402, 2400, 2399, 1897, 2397, 81, 113,
	1894, 2394, 2384, 1889, 1856, 1844, 2381, 1841, 2380, 2378,
	1833, 1782, 2377, 84, 2373, 2372, 2371, 1744, 1736, 2369,
	2368, 2356, 147, 2355, 1716, 2353, 2348, 2346, 2345, 2344,
	2342, 2340, 2339, 2336, 2333, 2328, 2327, 2326, 2325, 2324,
	2316, 2315, 2313, 2311, 157, 2310, 2307, 1711, 1698, 2304,
	2302, 35, 29, 19, 56, 21, 142, 2978, 136, 2299,
	2298, 2297, 2296, 2295, 2294, 25, 94, 96, 2291, 151,
	2290, 2289, 37, 32, 28, 23, 2287, 93, 2286, 2284,
	1747, 27, 2283, 2282, 132, 2281, 73, 38, 2733, 150,
	148, 115, 121, 2279, 2277, 2276, 50, 117, 6, 3,
	1, 7, 2, 2275, 2273, 2272, 14, 78, 31, 2269,
	76, 77, 2268, 2264, 128, 2259, 55, 92, 1597, 97,
	125, 183, 100, 2258, 60, 15, 58, 2257, 2256, 158,
	30, 2255, 9, 70, 155, 2253, 47, 159, 126, 64,
	130, 131, 2252, 2243, 2241, 104, 2240, 118, 105, 2238,
	2237, 63, 2236, 95, 138, 2235, 2233, 2232, 89, 2228,
	123, 2227, 2225, 156, 146, 112, 10, 51, 61, 18,
	1588, 1587, 135, 79, 49, 48, 2224, 2179, 994, 106,
	40, 103, 65, 54, 107, 52, 86, 143, 39, 2223,
	2222, 137, 2211, 2209, 2208, 2207, 2205, 98, 2204, 2203,
	36, 2202, 69, 59, 88, 87, 43, 109, 124, 116,
	149, 99, 2200, 72, 122, 2196, 46, 2187, 2185, 1749,
	120, 2184, 2182, 2181, 1728, 1665, 1318, 380, 2180, 2178,
	1274, 1040, 2173, 2172, 75, 2167, 114, 108, 102, 140,
	154, 13, 2165, 119, 24, 2155, 34, 26, 0, 192,
	110, 2151, 127, 66, 2150, 2146, 2144, 2142, 33, 4,
	16, 11, 12, 8, 83, 80, 2141, 2140, 129, 90,
	57, 2139, 152, 2137, 2136, 2135, 44, 2134, 22, 2133,
	20, 2132, 2131, 17, 5, 2130, 2128, 139, 2127, 101,
	2126, 1954, 2125, 144, 2115, 2113, 1959, 2112, 42, 111,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	5, 7, 7, 8, 8, 8, 9, 6, 6, 6,
	6, 6, 11, 11, 12, 20, 15, 22, 10, 18,
	16, 14, 14, 19, 19, 117, 117, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 114, 114, 119, 119, 119, 121, 121, 118,
	118, 113, 113, 24, 24, 61, 61, 104, 54, 54,
	54, 296, 296, 297, 297, 100, 100, 101, 101, 101,
	101, 102, 102, 103, 103, 103, 30, 30, 30, 26,
	26, 26, 26, 26, 27, 27, 28, 28, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 38, 38, 39, 39, 39, 39, 39, 39,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 45, 45, 45, 43, 43, 43, 42, 42, 42,
	41, 41, 41, 44, 44, 44, 170, 170, 169, 169,
	173, 173, 46, 46, 46, 46, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 49, 49, 49, 49, 49, 49, 49, 265,
	265, 264, 47, 47, 239, 239, 50, 50, 196, 196,
	51, 51, 51, 51, 51, 52, 52, 62, 62, 337,
	337, 337, 341, 341, 342, 342, 343, 343, 343, 343,
	343, 343, 343, 339, 339, 57, 57, 57, 57, 58,
	58, 58, 59, 59, 99, 99, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 68, 68, 68, 70, 67,
	67, 67, 69, 69, 69, 69, 71, 71, 72, 72,
	72, 72, 72, 73, 73, 290, 288, 288, 289, 289,
	144, 144, 144, 144, 144, 145, 145, 145, 295, 295,
	295, 295, 295, 295, 294, 294, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 86, 86, 86, 94, 94, 94, 94,
	94, 94, 94, 75, 75, 80, 80, 80, 80, 80,
	76, 76, 81, 81, 82, 82, 83, 83, 83, 83,
	83, 83, 77, 77, 77, 77, 85, 85, 85, 85,
	84, 84, 90, 90, 90, 90, 90, 90, 87, 87,
	87, 87, 88, 88, 88, 91, 91, 91, 91, 78,
	78, 79, 79, 92, 92, 93, 93, 93, 93, 93,
	89, 89, 89, 338, 338, 340, 340, 55, 55, 34,
	34, 35, 35, 146, 146, 147, 147, 218, 218, 218,
	218, 148, 148, 120, 120, 120, 149, 149, 150, 150,
	151, 151, 151, 153, 153, 152, 152, 152, 217, 306,
	306, 307, 307, 307, 307, 307, 307, 308, 308, 308,
	308, 308, 308, 308, 304, 304, 305, 302, 302, 303,
	303, 303, 303, 344, 344, 216, 216, 156, 156, 311,
	311, 311, 311, 309, 309, 309, 309, 309, 312, 310,
	313, 313, 313, 313, 313, 251, 251, 251, 96, 96,
	36, 36, 126, 126, 37, 37, 33, 33, 33, 200,
	200, 160, 160, 256, 256, 256, 137, 137, 115, 115,
	115, 17, 13, 13, 13, 13, 13, 13, 23, 23,
	21, 21, 201, 201, 202, 202, 56, 56, 60, 60,
	65, 65, 95, 95, 95, 95, 95, 95, 25, 25,
	25, 25, 29, 29, 29, 29, 64, 64, 346, 346,
	133, 133, 133, 133, 134, 134, 213, 213, 214, 214,
	347, 347, 215, 215, 215, 128, 127, 129, 129, 32,
	32, 32, 122, 122, 123, 123, 124, 124, 125, 125,
	348, 348, 53, 53, 53, 98, 98, 140, 140, 210,
	210, 210, 212, 212, 211, 211, 211, 186, 186, 186,
	97, 97, 165, 165, 175, 175, 176, 176, 262, 177,
	177, 63, 63, 107, 107, 105, 105, 105, 105, 105,
	105, 106, 106, 106, 108, 108, 108, 108, 108, 108,
	108, 111, 111, 111, 112, 112, 112, 110, 110, 319,
	319, 319, 322, 322, 318, 320, 320, 321, 321, 345,
	345, 187, 187, 187, 155, 154, 154, 158, 158, 157,
	159, 159, 255, 255, 255, 184, 184, 184, 184, 205,
	205, 203, 203, 204, 204, 206, 206, 207, 207, 207,
	208, 208, 209, 209, 183, 183, 235, 235, 109, 109,
	109, 164, 164, 164, 166, 166, 225, 225, 225, 226,
	226, 224, 224, 224, 224, 257, 257, 257, 257, 257,
	257, 257, 257, 335, 335, 335, 336, 336, 254, 254,
	258, 258, 258, 258, 258, 258, 252, 252, 252, 252,
	253, 253, 263, 263, 190, 190, 190, 190, 188, 188,
	189, 189, 259, 259, 259, 259, 185, 185, 260, 260,
	260, 219, 219, 266, 266, 266, 284, 284, 163, 163,
	163, 267, 267, 267, 267, 267, 267, 267, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 267, 267,
	268, 268, 268, 268, 270, 270, 270, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 283, 283, 283, 283, 283,
	271, 271, 278, 278, 279, 279, 280, 281, 272, 272,
	273, 273, 274, 275, 282, 282, 282, 282, 286, 286,
	276, 276, 276, 276, 276, 277, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	198, 198, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 229, 229, 229, 229, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 314,
	314, 314, 314, 314, 314, 314, 314, 316, 316, 317,
	317, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 323, 323, 324, 324, 326, 326, 327, 327, 328,
	329, 329, 329, 330, 331, 331, 325, 325, 332, 332,
	332, 333, 333, 334, 334, 334, 334, 334, 241, 241,
	242, 243, 249, 249, 249, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 135, 135, 135, 135, 135, 172, 172, 171, 171,
	238, 238, 236, 236, 240, 240, 191, 191, 285, 285,
	285, 285, 285, 285, 285, 192, 192, 192, 199, 193,
	193, 194, 194, 194, 194, 194, 232, 233, 195, 195,
	195, 234, 234, 244, 248, 248, 247, 246, 246, 245,
	245, 222, 222, 223, 223, 221, 220, 180, 180, 179,
	179, 178, 178, 349, 349, 250, 250, 181, 181, 182,
	174, 174, 261, 261, 261, 261, 167, 167, 142, 142,
	168, 168, 138, 138, 141, 141, 139, 139, 139, 139,
	161, 161, 162, 162, 136, 136, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 287, 287, 287,
	237, 130, 130, 130, 131, 131, 132, 132, 292, 292,
	292, 293, 293, 293, 293, 291, 291, 291, 291, 291,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 3, 1, 1, 1, 1,
	1, 3, 4, 6, 6, 6, 5, 5, 7, 7,
	7, 4, 12, 4, 12, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 7, 2, 6, 2, 1, 12, 12,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 4, 6, 7, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 1, 2, 1,
	2, 2, 7, 3, 2, 2, 2, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 1, 3, 1, 2,
	2, 3, 2, 2, 5, 3, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 1,
	3, 1, 5, 2, 3, 0, 3, 2, 3, 0,
	2, 3, 2, 3, 2, 6, 2, 6, 2, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 2, 1, 2, 2,
	3, 2, 4, 3, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 3, 6, 6, 3, 5, 3,
	2, 6, 3, 3, 4, 4, 3, 3, 1, 3,
	3, 1, 1, 2, 1, 1, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 3, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 2, 3, 3, 3,
	2, 3, 4, 3, 5, 3, 4, 5, 2, 3,
	3, 3, 4, 2, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 2, 3, 7, 7, 7, 4, 5,
	5, 5, 5, 2, 0, 2, 0, 3, 2, 8,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 1, 0, 9, 9,
	6, 7, 5, 1, 3, 8, 9, 7, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 2,
	4, 3, 3, 0, 6, 3, 11, 14, 4, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 8, 10, 8, 10, 6, 8,
	6, 8, 1, 0, 2, 0, 2, 2, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 2, 2, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 0, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 2, 0,
	8, 3, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 2, 2, 1, 1, 1,
	0, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 2,
	3, 3, 2, 0, 1, 3, 3, 5, 1, 1,
	3, 2, 4, 4, 0, 8, 4, 6, 3, 3,
	1, 5, 5, 0, 2, 3, 1, 3, 2, 0,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 3, 3, 1, 3, 3, 1, 3,
	3, 1, 1, 3, 3, 1, 1, 6, 6, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 5,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 3,
	1, 3, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 377, -4, -24, -26, -30, -31,
	-51, -38, -39, -40, -50, -46, -52, -53, -54, -55,
	-47, -61, -60, -62, -65, -63, -56, -57, -66, -74,
	-95, -96, -97, -98, -5, -6, -7, -8, -9, 23,
	34, -27, -28, 47, 71, -32, -33, -34, -35, 73,
	-36, -37, 94, -321, 98, -41, -42, -43, -45, -44,
	102, 109, 112, 134, 145, 228, 234, 255, 257, 259,
	266, -105, -107, 253, -58, -59, -67, -68, -69, -70,
	-99, 277, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -88, -89, -90, -91, -92,
	-93, 280, -25, -29, -64, 319, -11, -12, -15, -14,
	-16, -13, -20, -22, -19, -21, -23, -17, -18, -10,
	-319, -108, -106, 374, 254, 328, 111, 35, 289, 61,
	105, 261, 344, 351, -111, -109, -110, -112, 270, 336,
	299, 378, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 2, 299, 339, 87, 153,
	239, -337, 2, -168, 299, 87, -139, -130, 367, 4,
	-298, -300, 20, 21, 23, 33, 34, 35, 40, 44,
	47, 48, 55, 60, 61, 62, 67, 64, 65, 66,
	69, 71, 72, 75, 76, 77, 85, 86, 88, 90,
	94, 96, 98, 101, 102, 104, 109, 111, 110, 112,
	122, 123, 128, 130, 135, 141, 142, 145, 146, 154,
	157, 159, 152, 169, 170, 171, 173, 174, 175, 178,
	177, 182, 183, 186, 187, 190, 192, 193, 194, 197,
	195, 199, 200, 202, 201, 207, 209, 210, 212, 215,
	218, 221, 224, 225, 226, 227, 228, 230, 232, 234,
	236, 237, 238, 239, 240, 242, 243, 245, 246, 247,
	248, 249, 253, 251, 252, 254, 255, 256, 257, 259,
	261, 262, 264, 278, 279, 290, 266, 267, 268, 269,
	273, 271, 274, 275, 277, 280, 282, 285, 288, 289,
	291, 294, 295, 292, 287, 298, 300, 301, 302, 303,
	304, 305, 306, 307, 314, 315, 319, 320, 321, 322,
	325, 326, 327, 328, 330, 333, 334, 335, 340, 345,
	346, 347, 348, 349, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 51, 52, 53, 56, 89, 91, 92,
	108, 113, 114, 124, 125, 126, 136, 138, 147, 148,
	151, 158, 160, 161, 162, 163, 164, 166, 180, 196,
	206, 208, 219, 223, 231, 233, 241, 263, 272, 283,
	284, 293, 296, 309, 310, 311, 316, 317, 332, 336,
	337, 377, 377, 2, 170, 238, -138, -130, 87, 377,
	377, 377, 377, 299, 2, 329, 339, -200, 87, 324,
	377, 377, -130, 234, 22, 2, 96, 157, 327, 326,
	22, 230, 271, 301, 303, 2, 377, 377, 377, 377,
	377, 2, 339, 299, 153, 87, 329, -130, 2, -49,
	2, 374, -48, -4, -31, -40, -50, -46, -24, -26,
	-38, -54, -53, -55, -57, -61, -60, -63, -67, -68,
	-74, -97, -98, 277, -341, 2, 22, -342, -343, 73,
	102, 134, 270, 157, 96, 326, 299, 2, 170, 2,
	-130, 2, -337, 2, 170, 2, -341, 2, -130, 2,
	-134, 2, 266, -130, 377, 377, 377, 377, 377, 187,
	55, 263, 274, -72, 315, -71, 309, -290, -73, 2,
	-169, 197, -130, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	2, -94, 274, 34, 55, 22, 60, 88, 135, 153,
	154, 174, 68, 69, 237, 187, 171, 314, 175, 275,
	300, 315, 73, 330, 304, 110, 4, 87, 197, 276,
	309, 377, 377, 377, -345, 2, 299, -106, -108, -107,
	-157, -158, 323, 165, 107, 217, -105, -107, 2, -319,
	-94, 274, 2, 55, 22, -288, 2, -250, 213, -227,
	93, -229, 365, 366, 360, 203, 350, -241, -231, -244,
	108, 263, 374, -138, -230, 380, 9, -316, -107, 29,
	-242, -243, 49, -130, 7, 8, 5, 6, -136, -268,
	-237, -277, 318, 115, 205, -314, -315, 4, -298, -292,
	-269, -279, -273, -276, 166, 58, 79, 80, 83, 81,
	84, 276, 329, 50, 28, 113, 114, 223, 231, 296,
	316, 317, 147, 206, 148, 56, 136, 180, 101, 37,
	39, 41, 42, 51, 52, 89, 91, 92, 124, 125,
	126, 158, 160, 161, 162, 163, 164, 208, 241, 283,
	293, 310, 311, 337, -299, -280, -281, -274, -275, 74,
	116, 133, 156, 149, 168, 172, 181, 184, 198, 220,
	222, 260, 281, -282, 280, -346, 2, 315, 315, 2,
	-346, 2, -346, 2, -133, 2, 315, 312, -322, 242,
	-318, -130, -322, 377, 377, 379, 377, -154, -155, 2,
	22, 99, -182, 2, 374, -257, 2, 372, -259, -138,
	-107, -258, 374, 214, -3, 2, -259, 147, -138, 2,
	-259, 147, -138, 2, -130, 2, -141, 147, -138, -291,
	4, -298, -300, -299, -301, 58, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 43, 49, 50, 54, 57,
	59, 68, 73, 78, 79, 81, 80, 82, 83, 84,
	93, 95, 97, 99, 100, 103, 105, 107, 115, 117,
	129, 131, 132, 134, 137, 139, 150, 153, 155, 165,
	167, 176, 179, 185, 188, 189, 203, 204, 205, 211,
	213, 214, 216, 217, 229, 235, 244, 258, 270, 276,
	286, 297, 299, 308, 312, 313, 318, 323, 324, 329,
	331, 338, 339, 341, 342, 343, 344, 312, 379, -168,
	-161, -130, -221, -220, 376, -227, 2, -227, 2, 132,
	374, -179, -180, -220, -221, 2, -169, 147, -130, 2,
	-169, 2, 153, -130, 147, 2, -130, 22, 132, 2,
	167, 2, 167, 2, -260, 2, -259, -170, 147, 2,
	-169, -170, 147, 2, -142, 147, 2, -141, -130, 147,
	2, -161, 147, 2, -196, 374, -265, 2, -264, -293,
	4, -298, -300, -299, 336, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 274, 213, 379,
	-169, -227, -239, 374, 132, -227, 213, -130, 2, 278,
	2, 374, -72, 53, 315, -214, 2, -215, -127, -128,
	-129, 169, 236, 240, 349, 312, 355, 132, -288, -173,
	376, -94, 2, -296, 2, -294, 9, -293, 5, 278,
	2, 237, 275, 55, 132, 2, 2, -338, 2, 213,
	132, 2, 132, 2, 132, 2, 132, 2, 132, 2,
	2, 237, 275, 2, 129, 2, 314, 2, 2, 132,
	2, 169, 236, 290, 2, 299, 339, 2, 132, 132,
	349, 2, -185, -259, -157, -158, -184, -203, -204, 185,
	117, 211, -187, 22, 99, -187, -187, 44, 375, 375,
	-94, 278, 2, 10, 11, 57, 33, 365, 366, 367,
	368, 127, 369, 370, 363, 364, 362, 353, 354, 357,
	358, 359, 70, 356, 355, 63, 191, 265, 118, 119,
	120, 121, 250, 13, 14, 15, 26, 216, 184, 350,
	149, 281, 360, 16, 17, 18, 168, 36, 150, -135,
	-143, -227, -227, -227, -227, -227, 222, -178, -222, 372,
	-107, 374, 374, -107, -227, -171, 374, 7, -107, -236,
	372, -245, -227, -179, 374, 5, 374, 5, -323, 345,
	129, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	233, -286, 340, -286, -286, -270, 374, -270, -271, 374,
	-270, 346, 351, 374, 349, 22, -213, -214, -213, 312,
	-134, 379, -322, -162, 374, -182, -174, -261, -227, 367,
	-174, -181, -250, 74, -190, 172, 198, 133, 181, 260,
	156, 7, -49, -224, 380, 374, 367, -254, 351, -107,
	-258, 374, -257, -138, 374, -117, 251, -116, 21, 23,
	102, 334, 108, 287, 305, 111, 267, 251, 108, 111,
	251, 287, 305, 267, 251, 108, 380, 111, -296, -139,
	379, -291, 367, 291, 375, -167, -138, -180, 374, -156,
	203, -126, -320, 344, -156, 374, -131, 147, 2, -130,
	-320, 203, -260, -140, -138, -140, 277, -130, 30, -119,
	379, 48, 256, 108, -119, 108, -119, 379, 108, -119,
	108, 108, -171, -227, 375, 379, -337, -343, 73, 374,
	30, -238, -266, -267, -269, -278, -272, -276, -277, 40,
	46, 45, 306, 196, 272, 284, 332, 151, 38, 212,
	159, 4, 158, 160, 161, 162, 163, 164, 283, 37,
	241, 125, 126, 124, 101, 92, 91, 208, 42, 41,
	-280, -281, -274, -275, 89, 310, 311, 166, 39, 52,
	51, 337, 293, -297, -296, -337, -290, -171, 30, -214,
	2, -347, 379, 183, -145, 190, 202, 141, 214, 347,
	-295, 5, 4, -237, -251, 93, 187, -277, 8, 366,
	-287, 7, 365, -289, -288, -289, 77, 376, -291, -169,
	22, 279, 2, -290, -340, 129, -337, -290, -290, -290,
	-290, -290, 274, -49, 129, -130, 183, -290, 2, -290,
	2, 299, 153, 299, -119, 379, -184, -204, -203, -206,
	-227, 22, -209, 123, 199, -227, -229, -106, -106, -106,
	-159, -255, -227, 235, 153, -290, -284, -266, -283, 246,
	247, 245, 249, 248, -266, -291, 309, -227, -227, -227,
	-227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
	-227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
	-227, -227, -227, -227, -227, -227, -227, -227, -227, 184,
	149, 281, 36, 150, -227, 312, -227, -227, -227, -227,
	195, 203, 205, 318, 115, 325, 99, 209, -349, 297,
	32, -234, -107, 374, -249, 27, 286, 22, -241, 263,
	374, -222, -227, -223, -172, -171, 375, 379, -172, -240,
	-236, -248, -247, 341, 375, -171, 338, 22, 99, 367,
	2, 7, -197, 348, 194, 90, 142, 193, -198, 269,
	-324, 122, 137, 374, 375, 2, 375, 2, 375, 2,
	375, 2, -227, -227, -191, 2, -285, -171, 4, 348,
	194, 90, 142, 193, 269, -191, 2, -192, 2, -227,
	-171, -193, -228, -229, 365, 366, 360, 374, 263, -194,
	2, -227, -172, -227, 43, 179, 313, -195, -227, 132,
	-171, -227, -227, -227, -171, -171, 2, -171, 2, 374,
	7, 7, 309, 309, 7, 64, 65, 349, -134, -318,
	30, -161, -164, 379, 132, 30, 4, -164, 379, 375,
	172, 172, -257, -190, 172, -188, 220, -188, -188, -335,
	374, 373, -254, -291, 372, 381, -172, 2, -253, -252,
	30, -130, 218, 375, -138, 379, 312, -201, 68, 59,
	-217, 147, 59, -302, -130, 68, -303, 54, 324, 235,
	131, -201, 68, -201, 68, 68, -259, 33, -63, 66,
	132, 312, -259, 66, 312, 33, -63, 132, 312, -141,
	-291, 66, -263, 352, -130, 132, 375, 379, -146, -161,
	-147, -130, -218, -217, -304, -305, -302, 153, 324, 116,
	30, 108, 227, 30, 213, 203, -122, 302, 108, -219,
	342, -210, -63, 374, 93, 30, -210, -175, -176, -262,
	-177, -138, 374, -130, -169, -170, -170, -141, -142, -130,
	-161, 375, 379, -49, -264, 312, 331, -147, -48, 375,
	379, -163, 29, 372, -197, 374, -263, 379, 132, 355,
	312, 375, 315, -215, -144, 240, 285, 252, 273, 8,
	7, 7, 379, -291, -339, -130, 274, -49, -138, -141,
	-138, -259, -207, -287, 374, 366, -208, 263, 264, 379,
	-115, 31, 97, 173, -138, 349, -227, -227, 312, -349,
	297, -234, -227, 195, 205, 318, 115, 325, 99, 209,
	132, 374, -228, -228, -171, -231, 374, -171, 373, 383,
	375, -227, 373, 373, 379, -246, -247, 103, -227, -158,
	379, -157, -227, -171, -171, 375, 375, 312, 312, 312,
	312, 374, -329, 221, 374, 374, -227, 30, 379, 375,
	132, 375, 375, -199, 229, 375, 10, 11, 365, 366,
	367, 368, 127, 369, 370, 363, 364, 362, 353, 354,
	355, 63, 191, 265, 13, 14, 15, 168, 150, -228,
	-228, -228, -171, 374, 375, -232, -233, 132, 129, 30,
	-195, -195, -195, 375, 132, -171, 379, 379, 379, 375,
	375, 375, 7, 375, 379, 375, 349, 349, 375, 129,
	65, 374, 375, -219, -261, -166, 2, -257, -291, -219,
	-250, -257, -257, -189, 331, 213, 172, -257, -252, 375,
	-336, 7, -254, -253, 7, -226, -225, 130, 201, 375,
	-130, 374, -254, 375, -116, -138, -130, -130, 203, -217,
	147, -121, 203, -266, -130, 374, 374, 173, 173, -130,
	-130, 147, -130, 147, -130, -130, -117, 251, -63, 349,
	374, -138, 251, 349, -130, -63, 374, -130, 251, 349,
	-100, 146, 209, 291, 132, -138, 375, 375, 379, -131,
	153, -131, -63, -169, 5, -63, -138, 108, -123, 104,
	-348, 355, -130, -205, -203, -227, -186, -212, 258, 213,
	-167, 336, -130, -186, -165, 379, 132, 355, -167, -119,
	-119, -119, -119, -227, -339, -296, 375, -266, 372, 373,
	7, 7, -103, 344, -296, -339, -288, -288, -127, 322,
	62, 240, -288, 379, -208, -227, -255, -138, 380, -227,
	-227, -228, -228, 132, 374, -227, -238, 26, 26, 375,
	-172, 379, -223, -227, 375, -236, 105, -227, 308, 375,
	338, -158, -158, -158, 5, 194, 142, 193, -198, 193,
	-198, -198, 7, -330, -130, 374, 342, -157, 375, -284,
	-266, -227, -232, -227, -284, -266, -228, -228, -228, -228,
	-228, -228, -228, -228, -228, -228, -228, -228, -228, -228,
	-228, -228, -228, -228, -228, 99, 203, 209, -228, 379,
	-172, -233, -232, -227, -227, -266, 375, 375, 375, -171,
	-227, -227, -227, 375, 7, 239, 87, 299, -48, -183,
	137, -263, 379, -183, -189, 374, -227, -257, 373, 375,
	379, -253, 373, 379, 382, 355, -254, 374, -161, -252,
	312, 312, 108, 203, 333, -306, -303, -227, -160, -256,
	-130, -317, 374, -314, -315, -136, 374, 374, -114, 102,
	277, -202, 108, -119, 108, -119, 312, -201, 68, -230,
	-136, -130, -171, 312, -230, -171, 312, -230, -103, 132,
	298, 291, -148, 152, -218, 374, -131, 374, 374, -156,
	374, -130, -124, 178, -348, -294, -320, -186, -186, -174,
	204, 67, 375, -219, -176, -166, -250, 375, -104, 75,
	-104, 7, 373, 375, -102, 215, -101, -130, 5, -130,
	214, 375, -115, -291, 26, 26, -227, -238, 375, -227,
	-227, 375, -227, 373, -227, 5, -227, 375, 375, 375,
	375, -331, -130, -227, 375, 375, 375, -233, 132, 99,
	209, 374, -227, 375, 375, 379, 375, 375, 375, -291,
	-130, -138, 375, -235, 139, 44, -257, -235, -161, -224,
	7, -225, -291, 372, -253, -161, 375, -130, -130, -217,
	108, -307, 68, -308, 57, 116, 73, 203, 205, 324,
	235, 54, 93, 244, 375, 375, 379, -137, -179, 57,
	-137, -227, 374, -160, -161, 203, 93, 203, 93, 86,
	320, -130, -130, -138, -130, -130, 374, 375, -138, 375,
	-130, -297, 309, -149, -150, 226, 150, -160, 374, -161,
	-146, 30, -160, 213, -125, 177, -348, -294, -122, -211,
	374, 213, -63, -186, 355, 86, 86, 373, 379, 374,
	355, 355, -115, -227, -227, 375, 375, -158, -325, 226,
	375, -228, 132, 374, -238, 375, -227, -326, 343, -227,
	-171, -326, 375, -254, 7, 375, -217, -130, -291, -130,
	116, 147, 205, 173, 374, -228, -138, -216, -344, 72,
	295, -256, -115, -291, -115, 375, -171, 375, 375, 205,
	205, -227, -266, -119, -119, 312, 312, -171, 312, 312,
	-230, 44, 224, 375, -160, 375, 375, -63, 375, -138,
	-348, -294, -123, 100, -161, 68, -182, -107, 374, 374,
	374, -101, -102, -296, -296, 375, -158, 44, -228, -238,
	375, 375, -327, -328, -130, -253, 373, -308, -131, 203,
	-227, -132, 374, -148, 374, -137, -158, 244, -118, 57,
	-130, -130, -158, 374, 374, 186, 239, -138, -216, 375,
	-148, -216, 374, -294, -124, 326, 204, 375, -130, -297,
	-297, 375, -332, 239, 264, -171, 375, 379, 30, 108,
	375, -311, 192, -130, -161, -115, 375, -138, -113, 331,
	-291, 375, -171, -171, 374, 374, 374, -148, -216, -148,
	-160, -125, 277, -219, 375, 375, 375, -333, -334, 36,
	321, 77, -227, -333, -328, -330, 116, -309, -312, -310,
	213, 133, 225, 282, 375, 375, -156, -227, 375, 375,
	-161, -161, -161, -148, 375, -175, -103, -103, -334, 232,
	128, 263, 232, 128, -130, -310, 213, -312, 213, 326,
	96, -311, 375, 375, 375, -216, -219, 26, -313, 200,
	256, 48, 277, -313, -309, 374, 374, -120, 48, 256,
	-148, -334, 20, 205, 93, -151, 226, -152, 226, 375,
	-291, 375, -291, 336, 336, -153, -182, 182, 379, -150,
	-149, 307, -151, -182, 379, -182, -151, 379, -150, -149,
	-152, 379, -152,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 62, 0,
	0, 149, 151, 0, 0, 158, 160, 162, 164, -2,
	167, 169, 0, 0, 0, 180, 182, 184, 186, 188,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 661, -2, 0, 285, 287, 296, 298, 300, 302,
	303, 0, 346, 348, 350, 352, 354, 356, 358, 360,
	362, 364, 366, 368, 370, 372, 374, 375, 377, 379,
	381, 0, 582, 584, 586, -2, 64, 65, 66, 67,
	68, 69, 77, 78, 79, 80, 71, 73, 74, 76,
	697, -2, 708, 0, 0, 0, 0, -2, 0, -2,
	-2, -2, 0, 0, 674, 676, 678, 680, -2, 0,
	0, -2, 7, 12, 14, 16, 19, 21, 23, 25,
	27, 29, 31, 33, 35, 37, 39, 42, 48, 50,
	52, 55, 57, 59, 61, 63, 0, 0, 0, 0,
	0, 0, 124, 269, 0, 1276, 1200, 1206, 1207, 1231,
	1232, 1233, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267,
	1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
	1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
	1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
	1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
	1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	1469, 150, 152, 153, 0, 0, 0, 1202, 1276, 159,
	161, 163, 165, 0, 171, 0, 0, 0, 0, 549,
	168, 170, 260, 1338, 262, 264, 0, 0, 0, 0,
	174, 175, 176, 177, 178, 179, 181, 183, 185, 187,
	189, 190, 0, 0, 0, 0, 0, 259, 257, 212,
	213, 0, 242, 243, 244, 245, 246, 248, 216, 218,
	219, 221, 223, 225, 227, 228, 230, 232, 233, 235,
	237, 238, 240, 0, 0, 266, 272, 273, 274, 276,
	277, 278, 279, 280, 281, 282, 0, 130, 0, 458,
	255, 253, 0, 126, 0, 579, 0, 268, 580, 581,
	576, 577, 1365, 605, 286, 288, 297, 299, 301, -2,
	-2, 1456, -2, 310, -2, 318, 1462, 0, 321, 322,
	325, -2, 208, 347, 349, 351, 353, 355, 357, 359,
	361, 363, 365, 367, 369, 371, 373, 376, 378, 380,
	382, 383, 0, 0, 0, 387, 0, -2, -2, 0,
	0, 0, 0, 0, -2, 0, -2, 0, 0, -2,
	-2, 0, 0, -2, 0, 0, 386, 388, 389, 390,
	0, 583, 585, 587, 0, 539, 699, -2, 672, 673,
	-2, 0, 703, 703, 703, 0, 0, 673, 671, 0,
	289, 0, 291, 0, 387, 294, 295, 326, 327, 1185,
	1186, 902, 0, 0, 0, 0, 0, 0, 1004, 1006,
	1429, 1456, 0, 1008, 1009, 0, 1011, 1013, 1014, 0,
	1017, 1018, 1170, 1202, 1216, 1217, 1218, 1219, 0, 0,
	1222, 0, 1224, 1225, 1226, 1072, 1028, -2, -2, 1214,
	830, 831, 832, 833, -2, 1470, 1032, 1035, 1038, 1041,
	1042, 1045, 1046, 0, 1413, 1430, 1431, 1452, 1453, 1461,
	1465, 1466, 1437, 1449, 1438, 1425, 1435, 1447, 1282, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1240, 864, 865, 870, 871, 1471,
	1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
	1482, 1483, 1484, 873, 0, 607, 589, 598, 607, 591,
	592, 593, 594, 595, 596, 597, 600, 0, 689, 1344,
	692, 1213, 690, 675, 677, 0, 679, 0, 0, 683,
	705, 704, 738, 739, 0, 687, 688, 698, 754, 792,
	769, 760, 0, 0, 2, 70, 0, 1437, 792, 72,
	0, 1437, 792, 75, 0, 81, 0, 1437, 1205, 0,
	1245, 1246, 1247, 1248, 1249, 1470, 1485, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498,
	1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
	1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
	1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
	1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
	1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
	1559, 1560, 1561, 1562, 1563, 1564, 1565, 0, 0, 270,
	271, 1210, 1208, 1209, 0, 154, 155, 156, 157, 0,
	0, 1203, 1179, 1177, 1178, 166, 518, 1437, -2, 541,
	518, 545, -2, 696, 1437, 621, 261, 263, 0, 173,
	0, 634, 0, 636, 0, 651, 798, 116, 1437, 193,
	206, 116, 1437, 196, 116, 1437, 199, 1198, 116, 1437,
	202, 203, 1437, 205, 256, 0, 0, -2, 249, 251,
	1241, 1242, 1243, 1244, -2, 247, 217, 220, 222, 224,
	226, 229, 231, 234, 236, 239, 241, -2, 0, 0,
	0, 457, 0, 0, 0, 578, 0, 604, 304, 0,
	307, 0, 309, 1424, -2, -2, 313, 608, 612, 613,
	614, 0, 0, 0, 0, 0, 0, 0, 323, 209,
	0, 384, 385, 393, 394, 131, 132, 344, 345, 0,
	397, 418, 430, 0, 0, 401, 403, 456, 405, 0,
	0, 407, 0, 409, 0, 411, 0, 413, 0, 415,
	417, 419, 431, 421, 698, 423, 0, 425, 429, 0,
	434, 0, 436, 437, 438, 0, 0, 444, 0, 0,
	391, 392, 116, 796, -2, 0, 667, 717, 718, 0,
	0, 0, 0, 701, 702, 0, 0, 0, 663, 664,
	290, 0, 293, 0, 0, 0, 0, 1105, 1106, 1107,
	1108, 1109, 1110, 1113, 1114, 1111, 1112, 1115, 1116, 0,
	0, 0, 0, 0, 1117, 0, 0, 0, 0, 0,
	0, 0, 0, 1118, 1119, 1120, 0, 0, 1122, 0,
	1124, 0, 0, 0, 0, 0, 0, 1184, 0, 0,
	1121, 907, 908, 909, 941, 942, 0, 1005, 1181, 1174,
	1007, 0, 1127, -2, 1128, 0, 0, 1010, 1015, 1016,
	1127, 0, 1169, -2, 0, 1221, 0, 899, 1074, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1150, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	849, 867, 878, 875, 874, 851, 0, 850, 848, 0,
	852, 0, 0, 0, 0, 0, 588, -2, 590, 0,
	602, 0, 691, 0, 0, 740, 743, 1190, 1194, 1195,
	743, 0, 1187, 0, 0, 0, 0, 789, 789, 789,
	787, 763, 0, 769, 0, -2, 793, 781, 0, -2,
	760, 0, 0, 794, 0, 82, 573, 95, 0, 573,
	573, 0, 0, 0, 0, 0, 91, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 783, 1201,
	0, 1175, 1176, 146, 0, 0, 1196, 1180, 464, 0,
	0, 540, 0, 695, 0, 0, 0, 1437, 548, 1234,
	623, 0, 802, 0, 637, 0, 0, 799, 0, 191,
	0, 114, 115, 0, 194, 0, 197, 0, 0, 200,
	0, 0, 0, 1128, 698, 0, 0, 275, 0, 0,
	698, 0, 1130, 810, 811, 812, 813, 814, 899, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 861, 0, 836, 836, 836, 853, 854,
	862, 863, 868, 869, 880, 881, 883, 885, 879, 879,
	879, 876, 877, 783, 133, 0, 0, 0, 0, -2,
	315, 0, 610, 0, 615, 335, 336, 337, 617, 618,
	319, 338, 339, 340, 341, 342, 343, 0, 535, 0,
	537, 1227, 0, 316, 328, 317, 320, 0, 210, 395,
	396, 398, 399, 400, 404, 0, 453, 406, 408, 410,
	412, 414, 422, 426, 698, 432, 435, 439, 440, 441,
	442, 0, 0, 0, 538, 0, 670, 715, 716, 721,
	725, 726, 729, 732, 733, 723, 902, 684, 685, 686,
	709, 710, 560, 0, 0, 292, 903, 806, 807, 855,
	856, 857, 858, 859, 904, 905, 0, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, -2, -2, -2,
	-2, -2, -2, -2, -2, 928, 929, 930, 931, 932,
	933, 934, 935, -2, -2, -2, 939, 940, -2, 1123,
	1125, 0, 1184, 0, -2, 0, -2, -2, -2, -2,
	953, 0, 955, 958, 960, 962, 0, 0, 0, 0,
	1183, 972, 1161, 0, 0, 1102, 1103, 1104, 957, 0,
	0, 1182, 1173, 0, 0, 1126, 1012, 0, 0, 0,
	1134, 1168, 1164, 0, 1019, 708, 0, 0, 0, 0,
	1026, 0, 1230, 886, 887, 888, 889, 890, 891, 900,
	1082, 0, 0, 0, 1033, 1034, 1036, 1037, 1039, 1040,
	1043, 1044, 0, 0, 0, 1050, 0, 1137, -2, -2,
	-2, -2, -2, -2, -2, 0, 1052, 0, 1054, 1128,
	1147, 0, 0, 975, 0, 0, 0, 0, 1456, 0,
	1057, 1128, 1155, 0, 0, 0, 0, 0, 1128, 0,
	1160, 0, 0, 0, 0, 0, 1068, 0, 1070, 0,
	0, 0, 0, 0, 0, 0, 448, 0, 601, 693,
	0, 0, 802, 0, 0, 0, 1193, 802, 0, 1189,
	0, 0, 0, 0, 0, 784, 788, 785, 786, 0,
	0, 769, 781, 751, 0, 0, 0, 758, 759, 780,
	0, 779, 768, -2, 0, 0, 0, 0, 0, 572,
	97, 1437, 0, 118, 0, 0, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	1204, 0, 136, 0, 1211, 0, 0, 0, 0, 0,
	463, 1210, 465, 467, 468, 469, 470, 1235, 0, 1235,
	0, 0, 0, 0, 0, 0, 625, 631, 0, 720,
	0, 649, 639, 0, 0, 0, 649, 653, 654, 656,
	657, 0, 0, 800, 207, 116, 116, 1199, 116, 116,
	204, 258, 0, 214, 250, 0, 0, 0, 252, 254,
	0, 803, 805, 0, 815, 0, 145, 0, 0, 0,
	0, 308, 0, 609, 616, 0, 332, 0, 334, 536,
	1229, 1228, 0, 211, 455, 283, 424, 427, 450, 451,
	452, 797, 0, 727, 0, 0, 724, 730, 731, 0,
	712, 558, 559, 0, 0, 0, -2, -2, 0, 0,
	0, 973, -2, 954, 956, 959, 961, 963, 0, 0,
	0, 0, 0, 0, 0, 974, 1127, 0, 1171, 1174,
	-2, 1129, 1132, 1133, 0, 0, 1165, 0, 0, 0,
	0, 707, 708, 708, 708, 1025, 0, 0, 0, 0,
	0, 0, 1027, 0, 0, 0, 0, 0, 0, 1049,
	0, 1051, 1053, 0, 0, 1055, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 978,
	979, 980, 0, 1127, 1056, 1153, 1154, 0, 0, 0,
	0, 0, 0, 1062, 0, 1159, 0, 0, 0, 1066,
	1067, 1069, 0, 834, 0, 860, 882, 884, 872, 0,
	449, 698, 1212, 735, 1191, 783, 742, 744, 1192, 735,
	1188, 771, 0, 773, 0, 0, 0, 775, 0, 764,
	0, 766, 781, 756, 0, 0, 749, 0, 748, 769,
	777, 0, 0, 795, 96, 562, 0, 0, 0, 99,
	1437, 107, 0, 490, 0, 0, 0, 0, 0, 575,
	108, 1437, 116, 1437, 116, 109, 83, 573, 84, 0,
	0, 568, 0, 0, 561, 85, 0, 570, 0, 0,
	145, 0, 0, 147, 0, 1197, 472, 517, 0, 0,
	1235, 0, 461, 518, 542, 544, 0, 0, 627, 631,
	0, 630, 696, 649, 719, 801, 632, 649, 0, 0,
	0, 641, 638, 635, 802, 0, 0, 0, 0, 192,
	195, 198, 201, 1129, 265, 0, 0, 1131, 0, 808,
	0, 0, 125, 0, 134, 267, 305, 306, 311, 330,
	331, 333, 329, 0, 0, 0, 711, 560, 0, 906,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 1162,
	0, 0, 0, 1173, -2, 1135, 1163, 1167, 0, 1020,
	0, 0, 0, 0, 1223, 892, 893, 894, 895, 896,
	897, 898, 0, 1080, 1081, 1085, 0, 0, 1031, 0,
	0, 1136, 1146, 1148, 976, 977, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, -2, -2, -2, 994,
	995, 996, -2, -2, -2, 0, 0, 0, 1149, 0,
	0, 1151, 1152, 1156, 1157, 0, 1059, 1060, 1061, 1158,
	0, 0, 0, 866, 0, 0, 0, 0, 0, 737,
	0, 741, 0, 737, 772, 0, 791, 774, 754, 765,
	0, 762, 752, 0, 753, 0, 781, 0, 0, 761,
	0, 0, 0, 0, 117, 488, 507, 0, 0, 551,
	557, 557, 0, 1029, 1030, 0, 0, 0, 101, 0,
	0, 0, 0, 105, 0, 111, 0, 0, 0, 90,
	0, 0, 0, 0, 89, 0, 0, 88, 123, 0,
	0, 148, 477, 0, 466, 0, 0, 0, 464, 0,
	0, 0, 629, 631, 0, 622, 623, 172, 633, 647,
	648, 646, 0, 649, 655, 652, 658, 0, 0, 127,
	0, 0, 809, 816, 143, 1328, 141, 138, 140, 284,
	722, 728, 713, 560, 0, 0, -2, 0, 966, -2,
	-2, 1098, 1129, 1172, 1166, 1220, 708, 1021, 1023, 1024,
	901, 1087, 1084, 0, 1071, 1047, 1048, 1145, 0, 0,
	0, 0, 1129, 1100, 1058, 0, 1064, 1065, 835, 445,
	446, 447, 694, 1076, 0, 0, 745, 1076, 0, 769,
	767, 750, 746, 0, 757, 0, 778, 564, 566, 98,
	0, 489, 0, 492, 0, 0, 0, 0, 498, 499,
	0, 0, 0, 0, 509, 516, 0, 560, 1215, 0,
	560, 0, 0, 0, 0, 0, 113, 0, 0, 574,
	0, 116, 116, 563, 0, 0, 0, 0, 569, 0,
	571, 135, 0, 459, 476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 619, 631, 0, 624, 625, 0,
	0, 0, 640, 650, 0, 0, 0, 804, 0, 0,
	0, 0, 714, -2, -2, 967, 1099, 0, 708, 0,
	1073, -2, 0, 0, 0, 1101, 0, 681, 0, 736,
	734, 682, 790, 781, 0, 776, 100, 0, 493, 494,
	1235, 0, 497, 500, 0, 502, 1237, 472, 0, 513,
	514, 552, 553, 556, 554, 557, 708, 511, 0, 102,
	103, 112, 120, 104, 110, 0, 0, 708, 0, 0,
	782, 0, 0, 516, 0, 506, 472, 462, 516, 0,
	0, 626, 627, 0, 0, 0, 659, 660, 0, 0,
	0, 142, 0, 137, 139, 1022, 1090, 0, -2, 0,
	1002, 1063, 1075, 1077, 0, 755, 747, 491, 495, 0,
	0, 522, 0, 510, 0, 560, 0, 0, 122, 0,
	565, 567, 0, 0, 0, 0, 0, 0, 472, 516,
	460, 472, 0, 628, 629, 0, 643, 802, 645, 0,
	0, 144, 0, 0, 0, 1086, 1003, 0, 0, 0,
	501, 527, 0, 0, 0, 555, 1020, 518, 106, 0,
	119, 0, 0, 0, 0, 0, 0, 504, 472, 546,
	0, 620, 0, 644, 145, 145, 1083, 1088, 1091, -2,
	1397, 1273, 0, 1089, 1078, 1079, 0, 503, 523, 524,
	0, 519, 520, 521, 1236, 515, 522, 121, 92, 94,
	0, 0, 0, 505, 516, 802, 128, 129, 0, 1093,
	1094, 1095, 1096, 1097, 496, 525, 0, 526, 0, 0,
	0, 527, 0, 0, 475, 472, 642, 0, 528, 0,
	531, 532, 0, 529, 512, 0, 0, 471, 473, 474,
	547, 1092, 530, 533, 534, 0, 0, 0, 0, 478,
	0, 479, 0, 0, 0, 477, 483, 0, 0, 476,
	482, 0, 480, 484, 0, 477, 481, 0, 476, 487,
	485, 0, 486,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 363, 3, 369, 364, 3,
	374, 375, 367, 365, 379, 366, 376, 368, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 383, 378,
	353, 355, 354, 357, 380, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 372, 3, 373, 370, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 381, 362, 382, 360,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 356, 57696, 358, 57697, 359, 57698, 361, 57699, 371,
	57700, 377, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:883
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:889
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:895
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:916
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:918
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:919
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "ALTER")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:987
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:998
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1010
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1033
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1059
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1065
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1071
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1080
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1089
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1158
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1181
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1191
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = nil
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = DropCascade
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = DropRestrict
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = DropDefault
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1253
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1254
		{
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1257
		{
			return unimplemented(sqllex, "alter using")
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1258
		{
		}
	case 123:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1285
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1311
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.str = "CSV"
		}
	case 128:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1349
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1418
		{
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1438
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1439
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1470
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1471
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1472
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			return helpWith(sqllex, "CREATE")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1496
		{
			return helpWith(sqllex, "DELETE")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1508
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1509
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1516
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1519
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			return helpWith(sqllex, "DROP")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1536
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1551
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1574
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1597
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1612
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1663
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1672
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1675
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			return helpWith(sqllex, "DELETE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1678
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1679
		{
			return helpWith(sqllex, "INSERT")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1688
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1691
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1692
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1699
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1700
		{ /* SKIP DOC */
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1728
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1807
		{
			return helpWith(sqllex, "GRANT")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1827
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1849
		{
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			return helpWith(sqllex, "RESET")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1906
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			return helpWith(sqllex, "RESET")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1932
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1937
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1940
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1944
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1945
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1947
		{ /* SKIP DOC */
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1948
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			return unimplemented(sqllex, "set local")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1965
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2015
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2020
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2037
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2040
		{
			return unimplemented(sqllex, "set from current")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2042
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2048
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2052
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = Low
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = Normal
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = High
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2152
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2153
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2154
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2155
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2156
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2157
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2158
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2159
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2160
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2161
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2162
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2163
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2164
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2167
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2168
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2170
		{
			return helpWith(sqllex, "SHOW")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2179
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.str = "client_encoding"
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2205
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2222
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2227
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2238
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2249
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2260
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2281
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2292
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2297
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2308
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2327
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2345
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2386
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2394
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2402
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2416
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2427
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2438
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2442
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2446
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2450
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2454
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2458
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2464
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2468
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2472
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2478
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2506
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2613
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2617
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = DropDefault
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[1].union.exprs()}}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[3].union.exprs()})
		}
	case 485:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[6].union.exprs()},
			}}, sqlDollar[8].union.rangePartitions()...)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[7].union.partitionBy(),
			}}, sqlDollar[9].union.rangePartitions()...)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[7].union.partitionBy(),
			}}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2710
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2915
		{
			return unimplemented(sqllex, "match full")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2916
		{
			return unimplemented(sqllex, "match partial")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2917
		{
			return unimplemented(sqllex, "match simple")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2918
		{
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2924
		{
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2926
		{
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2927
		{
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2928
		{
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2931
		{
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2934
		{
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2937
		{
			return unimplemented(sqllex, "no action")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2940
		{
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2942
		{
			return unimplemented(sqllex, "action set null")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2943
		{
			return unimplemented(sqllex, "action set default")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2968
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2979
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2983
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3004
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3044
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = true
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = false
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3074
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3075
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3078
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3079
		{
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = Ascending
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = Descending
		}
	case 560:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 561:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3119
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3121
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = true
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = false
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3154
		{
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3155
		{
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3166
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3177
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3188
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3192
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3194
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3212
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3230
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3235
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3243
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3250
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3253
		{
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3254
		{
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.str = ""
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.str = ""
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3313
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3315
		{
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = ReadOnly
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = ReadWrite
		}
	case 619:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3379
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.str = ""
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.str = ""
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.str = ""
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.str = ""
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3422
		{
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3423
		{
		}
	case 632:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3447
		{
			return helpWith(sqllex, "INSERT")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3464
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3506
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3518
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 650:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3541
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3545
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3546
		{
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3675
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3710
		{
			return helpWith(sqllex, "SELECT")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			return helpWith(sqllex, "VALUES")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3712
		{
			return helpWith(sqllex, "TABLE")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3758
		{
			return helpWith(sqllex, "SELECT")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3802
		{
			return helpWith(sqllex, "TABLE")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3813
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3814
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3815
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3818
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3819
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3822
		{
			return unimplemented(sqllex, "cte")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3825
		{
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3826
		{
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3829
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3830
		{
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3833
		{
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3834
		{
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = true
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = false
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = false
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = true
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3857
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3858
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3905
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3929
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3981
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3982
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3985
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3986
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4044
		{
			return helpWith(sqllex, "VALUES")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4046
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4061
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &From{}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4083
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4101
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4128
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4165
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4190
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = nil
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4231
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4237
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = true
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = false
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.str = astFullJoin
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.str = astLeftJoin
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.str = astRightJoin
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.str = astInnerJoin
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4348
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4349
		{
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4435
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4449
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4457
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4481
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4492
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4573
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4582
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = nil
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4647
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4743
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 872:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4775
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4814
		{
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4815
		{
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 884:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = year
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = month
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = day
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = hour
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = minute
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = month
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = hour
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = minute
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = minute
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = nil
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = second
		}
	case 901:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4910
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4945
		{
			return unimplemented(sqllex, "at tz")
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5153
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5219
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5368
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5376
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5387
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5392
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5445
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5446
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5459
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5470
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5477
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5486
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5487
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5491
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5493
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5500
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5509
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5515
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5518
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5519
		{
			return unimplemented(sqllex, "current role")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5521
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5525
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5528
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5549
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5554
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5559
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5561
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5565
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5568
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5569
		{
			return unimplemented(sqllex, "treat")
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5606
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5611
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5615
		{
			return unimplemented(sqllex, "within group")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5616
		{
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5631
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5641
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5645
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5651
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5667
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.str = ""
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5703
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5713
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5714
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5715
		{
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5718
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5719
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5725
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5726
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5727
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5728
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5729
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5740
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = Any
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = Some
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5770
		{
			sqlVAL.union.val = All
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5775
		{
			sqlVAL.union.val = Plus
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = Minus
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5777
		{
			sqlVAL.union.val = Mult
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = Div
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5779
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5780
		{
			sqlVAL.union.val = Mod
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5781
		{
			sqlVAL.union.val = Bitand
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = Bitor
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5783
		{
			sqlVAL.union.val = Pow
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = Bitxor
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5785
		{
			sqlVAL.union.val = LT
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5786
		{
			sqlVAL.union.val = GT
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5787
		{
			sqlVAL.union.val = EQ
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = LE
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5789
		{
			sqlVAL.union.val = GE
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = NE
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = Like
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5795
		{
			sqlVAL.union.val = NotLike
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = ILike
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5797
		{
			sqlVAL.union.val = NotILike
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5815
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5819
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5825
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5829
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5835
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5839
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5845
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5849
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5855
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5859
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5885
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5889
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5895
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5931
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5935
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5971
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6020
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6075
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6079
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6084
		{
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6085
		{
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6100
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6104
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6119
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6123
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6154
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6164
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6174
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6178
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6189
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6193
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6199
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6203
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6216
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6220
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6224
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6228
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6234
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6238
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6244
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6247
		{
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6257
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6261
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6268
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6272
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6276
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6280
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6283
		{
			return unimplemented(sqllex, "func const")
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6285
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6289
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6292
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6294
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6298
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6302
		{
			sqlVAL.union.val = DNull
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6309
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6313
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6319
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6354
		{
			sqlVAL.str = ""
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6360
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6364
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
