// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) seqOpt() SequenceOption {
	return u.val.(SequenceOption)
}
func (u *sqlSymUnion) intVal() *int64 {
	return u.val.(*int64)
}
func (u *sqlSymUnion) seqOpts() []SequenceOption {
	return u.val.([]SequenceOption)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

//line sql.y:491
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CACHE = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const HAS_SOME = 57486
const HAS_ALL = 57487
const IMPORT = 57488
const INCREMENT = 57489
const INCREMENTAL = 57490
const IF = 57491
const IFNULL = 57492
const ILIKE = 57493
const IN = 57494
const INET = 57495
const INTERLEAVE = 57496
const INDEX = 57497
const INDEXES = 57498
const INITIALLY = 57499
const INNER = 57500
const INSERT = 57501
const INT = 57502
const INT2VECTOR = 57503
const INT2 = 57504
const INT4 = 57505
const INT8 = 57506
const INT64 = 57507
const INTEGER = 57508
const INTERSECT = 57509
const INTERVAL = 57510
const INTO = 57511
const IS = 57512
const ISOLATION = 57513
const JOB = 57514
const JOBS = 57515
const JOIN = 57516
const JSON = 57517
const JSONB = 57518
const KEY = 57519
const KEYS = 57520
const KV = 57521
const LATERAL = 57522
const LC_CTYPE = 57523
const LC_COLLATE = 57524
const LEADING = 57525
const LEAST = 57526
const LEFT = 57527
const LESS = 57528
const LEVEL = 57529
const LIKE = 57530
const LIMIT = 57531
const LIST = 57532
const LOCAL = 57533
const LOCALTIME = 57534
const LOCALTIMESTAMP = 57535
const LOW = 57536
const LSHIFT = 57537
const MATCH = 57538
const MINVALUE = 57539
const MAXVALUE = 57540
const MINUTE = 57541
const MONTH = 57542
const NAN = 57543
const NAME = 57544
const NAMES = 57545
const NATURAL = 57546
const NEXT = 57547
const NO = 57548
const NO_INDEX_JOIN = 57549
const NORMAL = 57550
const NOT = 57551
const NOTHING = 57552
const NULL = 57553
const NULLIF = 57554
const NULLS = 57555
const NUMERIC = 57556
const OF = 57557
const OFF = 57558
const OFFSET = 57559
const OID = 57560
const ON = 57561
const ONLY = 57562
const OPTIONS = 57563
const OR = 57564
const ORDER = 57565
const ORDINALITY = 57566
const OUT = 57567
const OUTER = 57568
const OVER = 57569
const OVERLAPS = 57570
const OVERLAY = 57571
const PARENT = 57572
const PARTIAL = 57573
const PARTITION = 57574
const PASSWORD = 57575
const PAUSE = 57576
const PLACING = 57577
const PLANS = 57578
const POSITION = 57579
const PRECEDING = 57580
const PRECISION = 57581
const PREPARE = 57582
const PRIMARY = 57583
const PRIORITY = 57584
const QUERIES = 57585
const QUERY = 57586
const RANGE = 57587
const READ = 57588
const REAL = 57589
const RECURSIVE = 57590
const REF = 57591
const REFERENCES = 57592
const REGCLASS = 57593
const REGPROC = 57594
const REGPROCEDURE = 57595
const REGNAMESPACE = 57596
const REGTYPE = 57597
const REMOVE_PATH = 57598
const RENAME = 57599
const REPEATABLE = 57600
const RELEASE = 57601
const RESET = 57602
const RESTORE = 57603
const RESTRICT = 57604
const RESUME = 57605
const RETURNING = 57606
const REVOKE = 57607
const RIGHT = 57608
const ROLLBACK = 57609
const ROLLUP = 57610
const ROW = 57611
const ROWS = 57612
const RSHIFT = 57613
const SAVEPOINT = 57614
const SCATTER = 57615
const SCRUB = 57616
const SEARCH = 57617
const SECOND = 57618
const SELECT = 57619
const SEQUENCE = 57620
const SEQUENCES = 57621
const SERIAL = 57622
const SERIALIZABLE = 57623
const SESSION = 57624
const SESSIONS = 57625
const SESSION_USER = 57626
const SET = 57627
const SETTING = 57628
const SETTINGS = 57629
const SHOW = 57630
const SIMILAR = 57631
const SIMPLE = 57632
const SMALLINT = 57633
const SMALLSERIAL = 57634
const SNAPSHOT = 57635
const SOME = 57636
const SPLIT = 57637
const SQL = 57638
const START = 57639
const STATUS = 57640
const STDIN = 57641
const STRICT = 57642
const STRING = 57643
const STORE = 57644
const STORING = 57645
const SUBSTRING = 57646
const SYMMETRIC = 57647
const SYSTEM = 57648
const TABLE = 57649
const TABLES = 57650
const TEMP = 57651
const TEMPLATE = 57652
const TEMPORARY = 57653
const TESTING_RANGES = 57654
const TESTING_RELOCATE = 57655
const TEXT = 57656
const THAN = 57657
const THEN = 57658
const TIME = 57659
const TIMESTAMP = 57660
const TIMESTAMPTZ = 57661
const TO = 57662
const TRAILING = 57663
const TRACE = 57664
const TRANSACTION = 57665
const TREAT = 57666
const TRIM = 57667
const TRUE = 57668
const TRUNCATE = 57669
const TYPE = 57670
const UNBOUNDED = 57671
const UNCOMMITTED = 57672
const UNION = 57673
const UNIQUE = 57674
const UNKNOWN = 57675
const UPDATE = 57676
const UPSERT = 57677
const USE = 57678
const USER = 57679
const USERS = 57680
const USING = 57681
const UUID = 57682
const VALID = 57683
const VALIDATE = 57684
const VALUE = 57685
const VALUES = 57686
const VARCHAR = 57687
const VARIADIC = 57688
const VIEW = 57689
const VARYING = 57690
const WHEN = 57691
const WHERE = 57692
const WINDOW = 57693
const WITH = 57694
const WITHIN = 57695
const WITHOUT = 57696
const WRITE = 57697
const YEAR = 57698
const ZONE = 57699
const NOT_LA = 57700
const WITH_LA = 57701
const AS_LA = 57702
const CONTAINED_BY = 57703
const HAS_SOME_KEY = 57704
const HAS_ALL_KEYS = 57705
const POSTFIXOP = 57706
const UMINUS = 57707
const HELPTOKEN = 57708

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6947

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	386, 54,
	-2, 725,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	155, 575,
	-2, 0,
	-1, 65,
	97, 725,
	159, 725,
	334, 725,
	335, 725,
	-2, 0,
	-1, 75,
	1, 687,
	219, 687,
	264, 687,
	381, 687,
	383, 687,
	385, 687,
	386, 687,
	-2, 700,
	-1, 108,
	4, 727,
	20, 727,
	21, 727,
	23, 727,
	28, 727,
	33, 727,
	34, 727,
	35, 727,
	36, 727,
	37, 727,
	38, 727,
	39, 727,
	40, 727,
	41, 727,
	42, 727,
	44, 727,
	45, 727,
	46, 727,
	47, 727,
	48, 727,
	49, 727,
	52, 727,
	53, 727,
	54, 727,
	56, 727,
	57, 727,
	61, 727,
	62, 727,
	63, 727,
	65, 727,
	66, 727,
	67, 727,
	68, 727,
	70, 727,
	72, 727,
	73, 727,
	76, 727,
	77, 727,
	78, 727,
	86, 727,
	87, 727,
	88, 727,
	89, 727,
	90, 727,
	91, 727,
	92, 727,
	93, 727,
	95, 727,
	97, 727,
	99, 727,
	102, 727,
	103, 727,
	105, 727,
	109, 727,
	110, 727,
	111, 727,
	112, 727,
	113, 727,
	114, 727,
	115, 727,
	123, 727,
	124, 727,
	125, 727,
	126, 727,
	127, 727,
	129, 727,
	131, 727,
	136, 727,
	137, 727,
	139, 727,
	142, 727,
	143, 727,
	146, 727,
	147, 727,
	148, 727,
	149, 727,
	150, 727,
	153, 727,
	154, 727,
	156, 727,
	159, 727,
	160, 727,
	161, 727,
	162, 727,
	163, 727,
	164, 727,
	165, 727,
	166, 727,
	168, 727,
	171, 727,
	172, 727,
	173, 727,
	175, 727,
	176, 727,
	177, 727,
	178, 727,
	179, 727,
	181, 727,
	182, 727,
	184, 727,
	186, 727,
	187, 727,
	190, 727,
	191, 727,
	194, 727,
	196, 727,
	197, 727,
	199, 727,
	200, 727,
	201, 727,
	202, 727,
	203, 727,
	205, 727,
	206, 727,
	207, 727,
	208, 727,
	212, 727,
	213, 727,
	214, 727,
	215, 727,
	216, 727,
	218, 727,
	220, 727,
	221, 727,
	224, 727,
	225, 727,
	227, 727,
	229, 727,
	230, 727,
	231, 727,
	232, 727,
	233, 727,
	234, 727,
	236, 727,
	237, 727,
	238, 727,
	239, 727,
	240, 727,
	242, 727,
	243, 727,
	244, 727,
	245, 727,
	246, 727,
	247, 727,
	248, 727,
	249, 727,
	251, 727,
	252, 727,
	253, 727,
	254, 727,
	255, 727,
	257, 727,
	258, 727,
	259, 727,
	260, 727,
	261, 727,
	262, 727,
	263, 727,
	265, 727,
	267, 727,
	268, 727,
	269, 727,
	270, 727,
	272, 727,
	273, 727,
	274, 727,
	275, 727,
	276, 727,
	278, 727,
	279, 727,
	280, 727,
	281, 727,
	282, 727,
	283, 727,
	285, 727,
	286, 727,
	287, 727,
	288, 727,
	290, 727,
	291, 727,
	292, 727,
	293, 727,
	295, 727,
	296, 727,
	297, 727,
	298, 727,
	299, 727,
	300, 727,
	301, 727,
	302, 727,
	303, 727,
	304, 727,
	306, 727,
	308, 727,
	309, 727,
	310, 727,
	311, 727,
	312, 727,
	313, 727,
	314, 727,
	315, 727,
	317, 727,
	318, 727,
	319, 727,
	322, 727,
	323, 727,
	324, 727,
	325, 727,
	327, 727,
	328, 727,
	329, 727,
	330, 727,
	333, 727,
	334, 727,
	335, 727,
	336, 727,
	338, 727,
	340, 727,
	341, 727,
	342, 727,
	343, 727,
	344, 727,
	345, 727,
	348, 727,
	353, 727,
	354, 727,
	355, 727,
	356, 727,
	357, 727,
	-2, 0,
	-1, 125,
	1, 690,
	219, 690,
	264, 690,
	381, 690,
	383, 690,
	385, 690,
	386, 690,
	-2, 699,
	-1, 130,
	1, 624,
	171, 624,
	242, 624,
	246, 624,
	385, 624,
	386, 624,
	-2, 0,
	-1, 132,
	1, 624,
	385, 624,
	386, 624,
	-2, 0,
	-1, 133,
	1, 624,
	385, 624,
	386, 624,
	-2, 0,
	-1, 134,
	1, 628,
	385, 628,
	386, 628,
	-2, 0,
	-1, 141,
	4, 733,
	5, 733,
	6, 733,
	7, 733,
	8, 733,
	9, 733,
	20, 733,
	21, 733,
	23, 733,
	28, 733,
	29, 733,
	33, 733,
	34, 733,
	35, 733,
	36, 733,
	37, 733,
	38, 733,
	39, 733,
	40, 733,
	41, 733,
	42, 733,
	44, 733,
	45, 733,
	46, 733,
	47, 733,
	48, 733,
	49, 733,
	50, 733,
	51, 733,
	52, 733,
	53, 733,
	54, 733,
	56, 733,
	57, 733,
	59, 733,
	61, 733,
	62, 733,
	63, 733,
	65, 733,
	66, 733,
	67, 733,
	68, 733,
	70, 733,
	72, 733,
	73, 733,
	75, 733,
	76, 733,
	77, 733,
	78, 733,
	80, 733,
	81, 733,
	82, 733,
	84, 733,
	85, 733,
	86, 733,
	87, 733,
	88, 733,
	89, 733,
	90, 733,
	91, 733,
	92, 733,
	93, 733,
	95, 733,
	97, 733,
	99, 733,
	102, 733,
	103, 733,
	105, 733,
	109, 733,
	110, 733,
	111, 733,
	112, 733,
	113, 733,
	114, 733,
	115, 733,
	116, 733,
	117, 733,
	123, 733,
	124, 733,
	125, 733,
	126, 733,
	127, 733,
	129, 733,
	131, 733,
	134, 733,
	136, 733,
	137, 733,
	139, 733,
	142, 733,
	143, 733,
	146, 733,
	147, 733,
	148, 733,
	149, 733,
	150, 733,
	151, 733,
	153, 733,
	154, 733,
	156, 733,
	158, 733,
	159, 733,
	160, 733,
	161, 733,
	162, 733,
	163, 733,
	164, 733,
	165, 733,
	166, 733,
	168, 733,
	170, 733,
	171, 733,
	172, 733,
	173, 733,
	174, 733,
	175, 733,
	176, 733,
	177, 733,
	178, 733,
	179, 733,
	181, 733,
	182, 733,
	184, 733,
	185, 733,
	186, 733,
	187, 733,
	188, 733,
	190, 733,
	191, 733,
	194, 733,
	196, 733,
	197, 733,
	198, 733,
	199, 733,
	200, 733,
	201, 733,
	202, 733,
	203, 733,
	204, 733,
	205, 733,
	206, 733,
	207, 733,
	208, 733,
	209, 733,
	211, 733,
	212, 733,
	213, 733,
	214, 733,
	215, 733,
	216, 733,
	218, 733,
	221, 733,
	224, 733,
	225, 733,
	226, 733,
	227, 733,
	228, 733,
	229, 733,
	230, 733,
	231, 733,
	232, 733,
	233, 733,
	234, 733,
	236, 733,
	237, 733,
	238, 733,
	239, 733,
	240, 733,
	242, 733,
	243, 733,
	244, 733,
	245, 733,
	246, 733,
	247, 733,
	248, 733,
	249, 733,
	251, 733,
	252, 733,
	253, 733,
	254, 733,
	255, 733,
	257, 733,
	258, 733,
	259, 733,
	260, 733,
	261, 733,
	262, 733,
	263, 733,
	265, 733,
	266, 733,
	267, 733,
	268, 733,
	269, 733,
	270, 733,
	272, 733,
	273, 733,
	274, 733,
	275, 733,
	276, 733,
	278, 733,
	279, 733,
	280, 733,
	281, 733,
	282, 733,
	283, 733,
	284, 733,
	285, 733,
	286, 733,
	287, 733,
	288, 733,
	289, 733,
	290, 733,
	291, 733,
	292, 733,
	293, 733,
	295, 733,
	296, 733,
	297, 733,
	298, 733,
	299, 733,
	300, 733,
	301, 733,
	302, 733,
	303, 733,
	304, 733,
	306, 733,
	308, 733,
	309, 733,
	310, 733,
	311, 733,
	312, 733,
	313, 733,
	314, 733,
	315, 733,
	317, 733,
	318, 733,
	319, 733,
	322, 733,
	323, 733,
	324, 733,
	325, 733,
	326, 733,
	327, 733,
	328, 733,
	329, 733,
	330, 733,
	333, 733,
	334, 733,
	335, 733,
	336, 733,
	337, 733,
	338, 733,
	340, 733,
	341, 733,
	342, 733,
	343, 733,
	344, 733,
	345, 733,
	348, 733,
	353, 733,
	354, 733,
	355, 733,
	356, 733,
	357, 733,
	358, 733,
	368, 733,
	373, 733,
	374, 733,
	375, 733,
	382, 733,
	388, 733,
	-2, 0,
	-1, 144,
	1, 54,
	386, 54,
	-2, 725,
	-1, 522,
	133, 1349,
	320, 1349,
	363, 1349,
	384, 1349,
	-2, 0,
	-1, 523,
	133, 1295,
	320, 1295,
	363, 1295,
	384, 1295,
	-2, 0,
	-1, 525,
	133, 1410,
	320, 1410,
	363, 1410,
	384, 1410,
	-2, 0,
	-1, 527,
	133, 1433,
	320, 1433,
	363, 1433,
	384, 1433,
	-2, 0,
	-1, 534,
	133, 1355,
	320, 1355,
	363, 1355,
	384, 1355,
	-2, 329,
	-1, 560,
	1, 407,
	381, 407,
	383, 407,
	385, 407,
	386, 407,
	-2, 0,
	-1, 561,
	1, 459,
	130, 459,
	381, 459,
	383, 459,
	385, 459,
	386, 459,
	-2, 0,
	-1, 567,
	1, 421,
	381, 421,
	383, 421,
	385, 421,
	386, 421,
	-2, 0,
	-1, 569,
	1, 425,
	381, 425,
	383, 425,
	385, 425,
	386, 425,
	-2, 0,
	-1, 572,
	1, 433,
	381, 433,
	383, 433,
	385, 433,
	386, 433,
	-2, 0,
	-1, 573,
	1, 438,
	381, 438,
	383, 438,
	385, 438,
	386, 438,
	-2, 0,
	-1, 576,
	1, 448,
	381, 448,
	383, 448,
	385, 448,
	386, 448,
	-2, 0,
	-1, 592,
	118, 735,
	130, 735,
	189, 735,
	217, 735,
	-2, 694,
	-1, 595,
	118, 734,
	130, 734,
	189, 734,
	217, 734,
	-2, 691,
	-1, 652,
	382, 1272,
	-2, 1265,
	-1, 653,
	382, 1273,
	-2, 1266,
	-1, 659,
	5, 919,
	382, 919,
	-2, 1485,
	-1, 684,
	5, 878,
	-2, 1454,
	-1, 685,
	5, 913,
	382, 913,
	-2, 1456,
	-1, 686,
	5, 888,
	-2, 1457,
	-1, 687,
	5, 887,
	-2, 1458,
	-1, 688,
	5, 913,
	382, 913,
	-2, 1461,
	-1, 689,
	5, 913,
	382, 913,
	-2, 1462,
	-1, 690,
	5, 914,
	-2, 1465,
	-1, 691,
	5, 870,
	-2, 1466,
	-1, 692,
	5, 870,
	-2, 1467,
	-1, 693,
	5, 895,
	-2, 1471,
	-1, 694,
	5, 880,
	-2, 1472,
	-1, 695,
	5, 881,
	-2, 1473,
	-1, 696,
	5, 871,
	-2, 1479,
	-1, 697,
	5, 872,
	-2, 1480,
	-1, 698,
	5, 873,
	-2, 1481,
	-1, 699,
	5, 874,
	-2, 1482,
	-1, 700,
	5, 875,
	-2, 1483,
	-1, 701,
	5, 876,
	-2, 1484,
	-1, 702,
	5, 870,
	-2, 1491,
	-1, 703,
	5, 879,
	-2, 1496,
	-1, 704,
	5, 877,
	-2, 1499,
	-1, 705,
	5, 911,
	382, 911,
	-2, 1501,
	-1, 706,
	5, 915,
	-2, 1504,
	-1, 707,
	5, 917,
	-2, 1505,
	-1, 708,
	5, 910,
	382, 910,
	-2, 1510,
	-1, 894,
	233, 723,
	-2, 568,
	-1, 898,
	219, 1269,
	-2, 0,
	-1, 933,
	1, 218,
	381, 218,
	383, 218,
	385, 218,
	386, 218,
	-2, 698,
	-1, 940,
	4, 1509,
	10, 1509,
	11, 1509,
	13, 1509,
	14, 1509,
	15, 1509,
	16, 1509,
	17, 1509,
	18, 1509,
	20, 1509,
	21, 1509,
	23, 1509,
	26, 1509,
	28, 1509,
	30, 1509,
	33, 1509,
	34, 1509,
	35, 1509,
	36, 1509,
	37, 1509,
	38, 1509,
	39, 1509,
	40, 1509,
	41, 1509,
	42, 1509,
	44, 1509,
	45, 1509,
	46, 1509,
	47, 1509,
	48, 1509,
	49, 1509,
	52, 1509,
	53, 1509,
	54, 1509,
	56, 1509,
	57, 1509,
	58, 1509,
	61, 1509,
	62, 1509,
	63, 1509,
	64, 1509,
	65, 1509,
	66, 1509,
	67, 1509,
	68, 1509,
	70, 1509,
	71, 1509,
	72, 1509,
	73, 1509,
	75, 1509,
	76, 1509,
	77, 1509,
	78, 1509,
	86, 1509,
	87, 1509,
	88, 1509,
	89, 1509,
	90, 1509,
	91, 1509,
	92, 1509,
	93, 1509,
	95, 1509,
	97, 1509,
	99, 1509,
	102, 1509,
	103, 1509,
	105, 1509,
	109, 1509,
	110, 1509,
	111, 1509,
	112, 1509,
	113, 1509,
	114, 1509,
	115, 1509,
	119, 1509,
	120, 1509,
	121, 1509,
	122, 1509,
	123, 1509,
	124, 1509,
	125, 1509,
	126, 1509,
	127, 1509,
	128, 1509,
	129, 1509,
	131, 1509,
	134, 1509,
	136, 1509,
	137, 1509,
	139, 1509,
	142, 1509,
	143, 1509,
	146, 1509,
	147, 1509,
	148, 1509,
	149, 1509,
	150, 1509,
	151, 1509,
	152, 1509,
	153, 1509,
	154, 1509,
	156, 1509,
	158, 1509,
	159, 1509,
	160, 1509,
	161, 1509,
	162, 1509,
	163, 1509,
	164, 1509,
	165, 1509,
	166, 1509,
	168, 1509,
	170, 1509,
	171, 1509,
	172, 1509,
	173, 1509,
	174, 1509,
	175, 1509,
	176, 1509,
	177, 1509,
	178, 1509,
	179, 1509,
	181, 1509,
	182, 1509,
	184, 1509,
	185, 1509,
	186, 1509,
	187, 1509,
	188, 1509,
	190, 1509,
	191, 1509,
	194, 1509,
	195, 1509,
	196, 1509,
	197, 1509,
	199, 1509,
	200, 1509,
	201, 1509,
	202, 1509,
	203, 1509,
	204, 1509,
	205, 1509,
	206, 1509,
	207, 1509,
	208, 1509,
	212, 1509,
	213, 1509,
	214, 1509,
	215, 1509,
	216, 1509,
	218, 1509,
	221, 1509,
	222, 1509,
	224, 1509,
	225, 1509,
	227, 1509,
	229, 1509,
	230, 1509,
	231, 1509,
	232, 1509,
	233, 1509,
	234, 1509,
	236, 1509,
	237, 1509,
	238, 1509,
	239, 1509,
	240, 1509,
	242, 1509,
	243, 1509,
	244, 1509,
	245, 1509,
	246, 1509,
	247, 1509,
	248, 1509,
	249, 1509,
	251, 1509,
	252, 1509,
	253, 1509,
	254, 1509,
	255, 1509,
	256, 1509,
	257, 1509,
	258, 1509,
	259, 1509,
	260, 1509,
	261, 1509,
	262, 1509,
	263, 1509,
	265, 1509,
	266, 1509,
	267, 1509,
	268, 1509,
	269, 1509,
	270, 1509,
	271, 1509,
	272, 1509,
	273, 1509,
	274, 1509,
	275, 1509,
	276, 1509,
	278, 1509,
	279, 1509,
	280, 1509,
	281, 1509,
	282, 1509,
	283, 1509,
	285, 1509,
	286, 1509,
	287, 1509,
	288, 1509,
	289, 1509,
	290, 1509,
	291, 1509,
	292, 1509,
	293, 1509,
	295, 1509,
	296, 1509,
	297, 1509,
	298, 1509,
	299, 1509,
	300, 1509,
	301, 1509,
	302, 1509,
	303, 1509,
	304, 1509,
	306, 1509,
	308, 1509,
	309, 1509,
	310, 1509,
	311, 1509,
	312, 1509,
	313, 1509,
	314, 1509,
	315, 1509,
	317, 1509,
	318, 1509,
	319, 1509,
	322, 1509,
	323, 1509,
	324, 1509,
	325, 1509,
	327, 1509,
	328, 1509,
	329, 1509,
	330, 1509,
	333, 1509,
	334, 1509,
	335, 1509,
	336, 1509,
	338, 1509,
	340, 1509,
	341, 1509,
	342, 1509,
	343, 1509,
	344, 1509,
	345, 1509,
	348, 1509,
	353, 1509,
	354, 1509,
	355, 1509,
	356, 1509,
	357, 1509,
	358, 1509,
	359, 1509,
	361, 1509,
	362, 1509,
	363, 1509,
	364, 1509,
	365, 1509,
	366, 1509,
	367, 1509,
	368, 1509,
	370, 1509,
	371, 1509,
	372, 1509,
	373, 1509,
	374, 1509,
	375, 1509,
	376, 1509,
	377, 1509,
	378, 1509,
	380, 1509,
	383, 1509,
	384, 1509,
	387, 1509,
	388, 1509,
	-2, 0,
	-1, 953,
	133, 1410,
	320, 1410,
	363, 1410,
	384, 1410,
	-2, 0,
	-1, 970,
	133, 1433,
	320, 1433,
	363, 1433,
	384, 1433,
	-2, 0,
	-1, 971,
	171, 636,
	242, 636,
	246, 636,
	-2, 317,
	-1, 1043,
	118, 734,
	130, 734,
	189, 734,
	217, 734,
	-2, 695,
	-1, 1124,
	108, 700,
	118, 700,
	130, 700,
	167, 700,
	189, 700,
	217, 700,
	223, 700,
	331, 700,
	-2, 1048,
	-1, 1134,
	382, 1249,
	-2, 1237,
	-1, 1152,
	383, 1161,
	-2, 0,
	-1, 1176,
	171, 636,
	242, 636,
	246, 636,
	-2, 631,
	-1, 1204,
	383, 1161,
	-2, 0,
	-1, 1208,
	108, 700,
	118, 700,
	130, 700,
	167, 700,
	189, 700,
	217, 700,
	223, 700,
	331, 700,
	-2, 801,
	-1, 1360,
	171, 636,
	242, 636,
	246, 636,
	-2, 319,
	-1, 1468,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 954,
	-1, 1469,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 955,
	-1, 1470,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 956,
	-1, 1471,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 957,
	-1, 1472,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 958,
	-1, 1473,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 959,
	-1, 1474,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 960,
	-1, 1475,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 961,
	-1, 1484,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 970,
	-1, 1485,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 971,
	-1, 1486,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 972,
	-1, 1489,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 977,
	-1, 1495,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 979,
	-1, 1497,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 983,
	-1, 1498,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 984,
	-1, 1499,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 985,
	-1, 1500,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 986,
	-1, 1569,
	133, 1172,
	382, 1272,
	-2, 1265,
	-1, 1570,
	133, 1173,
	-2, 1450,
	-1, 1571,
	133, 1174,
	-2, 1354,
	-1, 1572,
	133, 1175,
	-2, 1313,
	-1, 1573,
	133, 1176,
	-2, 1330,
	-1, 1574,
	133, 1177,
	-2, 1352,
	-1, 1575,
	133, 1178,
	-2, 1406,
	-1, 1651,
	1, 802,
	75, 802,
	108, 802,
	118, 802,
	130, 802,
	134, 802,
	138, 802,
	140, 802,
	158, 802,
	167, 802,
	174, 802,
	185, 802,
	189, 802,
	204, 802,
	217, 802,
	219, 802,
	223, 802,
	264, 802,
	266, 802,
	331, 802,
	339, 802,
	350, 802,
	351, 802,
	360, 802,
	381, 802,
	383, 802,
	385, 802,
	386, 802,
	387, 802,
	-2, 801,
	-1, 1808,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 978,
	-1, 1809,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 980,
	-1, 1814,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 981,
	-1, 1832,
	228, 1132,
	-2, 1134,
	-1, 2063,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 982,
	-1, 2068,
	170, 0,
	-2, 998,
	-1, 2077,
	228, 1133,
	-2, 1135,
	-1, 2119,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1025,
	-1, 2120,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1026,
	-1, 2121,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1027,
	-1, 2125,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1031,
	-1, 2126,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1032,
	-1, 2127,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1033,
	-1, 2259,
	170, 0,
	-2, 999,
	-1, 2262,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1002,
	-1, 2263,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1004,
	-1, 2383,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1003,
	-1, 2384,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1005,
	-1, 2391,
	170, 0,
	-2, 1034,
	-1, 2468,
	170, 0,
	-2, 1035,
	-1, 2549,
	36, 0,
	151, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1453,
	-1, 2635,
	382, 1521,
	-2, 494,
}

const sqlPrivate = 57344

const sqlLast = 45455

var sqlAct = [...]int{

	653, 2617, 2631, 2354, 2353, 2632, 2615, 2557, 2548, 2598,
	2521, 1728, 2212, 2417, 2558, 2042, 2559, 1248, 1697, 1736,
	2364, 74, 2222, 2096, 651, 643, 2473, 2178, 2244, 2008,
	1265, 757, 1354, 2547, 1802, 612, 2313, 1300, 2327, 2246,
	887, 1946, 183, 2179, 629, 2397, 2293, 183, 1898, 1202,
	1701, 596, 1925, 1301, 2016, 2238, 183, 2010, 991, 1646,
	711, 1737, 784, 1725, 1185, 183, 1355, 1700, 1261, 1647,
	183, 183, 1664, 1696, 183, 604, 124, 183, 464, 1933,
	2149, 1690, 1655, 1897, 1843, 183, 1524, 479, 26, 1130,
	1447, 1206, 1798, 1442, 974, 1385, 1244, 1048, 1525, 1783,
	1186, 1598, 1214, 1533, 1216, 533, 623, 1512, 1712, 1509,
	1425, 973, 1549, 763, 461, 1423, 1162, 923, 1166, 1543,
	1698, 993, 920, 650, 913, 1278, 934, 1730, 1704, 1252,
	1633, 1193, 766, 1620, 745, 513, 183, 183, 1119, 1565,
	622, 124, 125, 1211, 183, 530, 645, 1426, 1049, 601,
	1384, 174, 628, 1424, 491, 126, 1272, 1176, 526, 910,
	179, 743, 1175, 2328, 554, 1711, 1053, 1831, 1729, 1280,
	183, 183, 183, 183, 786, 1280, 1280, 2163, 183, 183,
	2164, 2355, 2648, 2647, 2640, 2355, 2641, 2641, 2641, 2594,
	2593, 2592, 2574, 1239, 1239, 1239, 2326, 875, 2569, 416,
	2568, 600, 1751, 600, 1751, 2025, 1064, 1065, 2565, 2545,
	2544, 595, 1239, 1766, 1766, 2516, 1203, 2511, 2061, 1759,
	124, 2378, 505, 2507, 2499, 610, 2470, 1239, 2326, 1067,
	1759, 2448, 26, 2445, 2443, 2326, 2428, 1239, 2326, 2427,
	1239, 2405, 2402, 2326, 2385, 1239, 1239, 2349, 1759, 2347,
	1691, 1751, 2325, 1751, 1066, 2306, 2326, 2026, 1622, 1239,
	1086, 1868, 1869, 1235, 2261, 2237, 2232, 593, 1759, 1695,
	1695, 2159, 2072, 1835, 2036, 2160, 1751, 2152, 1998, 1836,
	592, 1997, 1922, 771, 775, 1239, 1239, 760, 2653, 2639,
	781, 1915, 184, 605, 1691, 1916, 764, 1913, 747, 1751,
	749, 1751, 750, 1064, 1065, 2517, 1094, 1095, 1096, 1104,
	1105, 1106, 1766, 2378, 2152, 1089, 1090, 1091, 1092, 1097,
	1621, 1766, 773, 777, 1072, 783, 1067, 1912, 1911, 1108,
	1770, 1751, 1751, 1758, 1751, 1750, 2649, 1759, 2053, 1751,
	2628, 1653, 1868, 1869, 1694, 1886, 1887, 1888, 1695, 1627,
	1293, 1066, 2132, 1626, 1294, 2074, 141, 1086, 2258, 1239,
	1998, 1064, 1065, 41, 1083, 1751, 1801, 1842, 1781, 1363,
	1180, 1064, 1065, 1528, 873, 955, 144, 44, 952, 1874,
	951, 950, 1281, 949, 1067, 948, 143, 141, 1281, 1281,
	947, 1087, 946, 945, 1067, 944, 1883, 943, 942, 941,
	751, 748, 586, 585, 2329, 584, 552, 603, 1382, 1066,
	551, 550, 1089, 1090, 1091, 1092, 549, 143, 548, 1066,
	547, 1072, 546, 142, 183, 545, 183, 183, 183, 544,
	183, 135, 543, 1868, 1869, 542, 183, 541, 136, 540,
	539, 486, 183, 538, 1101, 1109, 1884, 537, 536, 521,
	520, 519, 1093, 518, 142, 183, 183, 183, 183, 183,
	1874, 127, 517, 1107, 937, 452, 787, 1088, 451, 450,
	449, 448, 433, 432, 431, 67, 422, 927, 421, 1072,
	420, 1099, 419, 412, 411, 601, 183, 1546, 1087, 1072,
	1868, 1869, 127, 1886, 1887, 1888, 167, 166, 1064, 1065,
	183, 165, 1889, 164, 163, 879, 2257, 1286, 162, 1297,
	1562, 2025, 1621, 1279, 1416, 1098, 183, 1064, 1065, 161,
	160, 1067, 1885, 159, 158, 157, 183, 1884, 156, 891,
	155, 893, 154, 896, 153, 152, 151, 150, 149, 1547,
	1067, 148, 147, 146, 1883, 145, 1066, 1941, 1560, 1093,
	1558, 1874, 1207, 1556, 1388, 912, 1087, 937, 709, 986,
	916, 916, 2621, 68, 1088, 1066, 1077, 1075, 1076, 1068,
	1069, 1070, 1071, 1073, 1074, 2619, 1060, 2564, 2546, 1733,
	917, 886, 1102, 2531, 2526, 935, 2465, 2446, 183, 128,
	70, 2616, 71, 2292, 777, 1548, 1545, 2291, 2371, 2287,
	2286, 2279, 2278, 1885, 2277, 956, 141, 2273, 1874, 783,
	2272, 2271, 2270, 2264, 485, 2243, 1072, 104, 2146, 2141,
	2140, 2139, 2082, 989, 1870, 1871, 1872, 1873, 1875, 1876,
	984, 1996, 1088, 1953, 758, 1072, 143, 1868, 1869, 1949,
	1920, 2000, 1917, 1905, 1044, 1896, 1867, 1864, 1863, 601,
	1889, 1100, 1861, 1848, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 1847, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 1550, 142, 1832, 1884, 1138, 1043, 1651, 1060,
	2288, 135, 141, 1087, 968, 971, 1059, 884, 136, 1205,
	1520, 2642, 2626, 1880, 1881, 1882, 1204, 1131, 2606, 1122,
	2605, 1039, 1879, 1877, 1878, 1870, 1871, 1872, 1873, 1875,
	1876, 127, 143, 1264, 2040, 2098, 2536, 2535, 1868, 1869,
	987, 1886, 1887, 1888, 1068, 1069, 1070, 1071, 1073, 1074,
	879, 2534, 788, 1076, 1068, 1069, 1070, 1071, 1073, 1074,
	777, 2638, 2502, 183, 1045, 183, 2494, 593, 2493, 142,
	1046, 1885, 1544, 2484, 2482, 1874, 938, 135, 2460, 1088,
	592, 2370, 141, 2459, 136, 1056, 1057, 2458, 183, 183,
	2414, 1061, 1883, 2393, 1383, 1713, 2379, 2358, 1764, 2346,
	2332, 2284, 1184, 1797, 2220, 2218, 2217, 127, 2215, 601,
	2187, 2186, 143, 2167, 2155, 1191, 1870, 1871, 1872, 1873,
	1875, 1876, 1134, 1521, 2067, 1164, 1165, 1986, 1980, 1966,
	1965, 1168, 1951, 1921, 1895, 1857, 1856, 1298, 1189, 1853,
	1828, 1171, 1823, 1514, 646, 1167, 1170, 1638, 1610, 142,
	1554, 1247, 759, 1183, 1174, 1160, 1874, 135, 124, 1159,
	1158, 1880, 1881, 1882, 136, 1157, 1156, 1155, 1154, 938,
	1879, 1877, 1878, 1870, 1871, 1872, 1873, 1875, 1876, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 1732, 1966, 1064,
	1065, 1153, 1152, 937, 183, 1151, 1150, 1201, 1179, 1149,
	786, 1148, 1070, 1071, 1073, 1074, 183, 1147, 1146, 1205,
	2476, 1561, 1067, 1145, 1144, 1143, 1177, 1142, 1135, 183,
	1209, 1123, 1122, 1884, 967, 183, 1181, 183, 959, 183,
	931, 2377, 2266, 183, 1263, 2242, 2162, 1066, 2158, 1834,
	764, 1212, 1761, 1939, 1639, 1868, 1869, 1246, 1769, 1559,
	1131, 1557, 2038, 1120, 1555, 2011, 885, 983, 1224, 1237,
	1382, 2381, 1240, 2380, 2374, 2165, 2027, 1172, 1691, 1207,
	1140, 1042, 1173, 1037, 183, 183, 1989, 1983, 1979, 1919,
	1918, 937, 1807, 183, 1420, 1369, 183, 980, 1269, 2043,
	1262, 1768, 2398, 1729, 2099, 1839, 1031, 1534, 1163, 1885,
	2624, 2623, 2021, 2174, 2529, 1546, 1755, 786, 2590, 2506,
	2589, 424, 1217, 1427, 1218, 2050, 183, 738, 2340, 740,
	1771, 183, 1872, 1873, 1875, 1876, 183, 183, 2439, 183,
	736, 183, 1657, 183, 759, 183, 1032, 1023, 912, 734,
	1342, 2198, 939, 2438, 731, 2436, 183, 1217, 2636, 1218,
	2435, 2206, 183, 183, 1238, 2203, 2171, 1547, 1245, 2170,
	1852, 937, 1851, 1283, 1820, 1850, 1285, 1849, 1810, 1389,
	1288, 1754, 1686, 1137, 1682, 1679, 1496, 777, 599, 1273,
	1818, 1273, 1178, 183, 1271, 1274, 872, 786, 2352, 1880,
	1881, 1882, 1614, 1665, 1219, 1613, 1457, 429, 1879, 1877,
	1878, 1870, 1871, 1872, 1873, 1875, 1876, 1726, 2039, 1381,
	588, 500, 1233, 1548, 1545, 1657, 124, 1868, 1869, 1225,
	1370, 1390, 1414, 1040, 1656, 2210, 1295, 1417, 1232, 1219,
	1296, 1357, 968, 2505, 1356, 939, 2211, 598, 1448, 1455,
	1993, 1222, 1242, 2419, 981, 1342, 1342, 1374, 1360, 1456,
	1230, 1518, 1413, 1386, 591, 1404, 1516, 1868, 1869, 1223,
	1886, 1887, 1888, 2542, 601, 1815, 1394, 1429, 1231, 601,
	1668, 996, 1398, 1583, 1399, 1816, 1400, 1397, 1401, 1821,
	1402, 1063, 438, 1275, 1415, 938, 1017, 982, 1511, 590,
	1550, 1511, 787, 600, 2561, 1246, 1550, 1408, 1410, 183,
	1292, 183, 2581, 591, 183, 966, 2018, 1868, 1869, 453,
	2487, 1883, 1421, 1393, 2189, 183, 593, 1428, 1422, 593,
	593, 1205, 1619, 1988, 786, 1982, 1018, 183, 1446, 1438,
	1226, 183, 1439, 1440, 183, 1874, 1064, 1065, 183, 2513,
	1534, 1531, 183, 1161, 439, 2589, 1064, 1065, 183, 2051,
	1529, 492, 601, 1721, 2601, 183, 786, 1074, 1117, 1067,
	183, 1883, 1373, 1372, 2514, 1382, 1379, 2092, 183, 1067,
	1544, 1593, 2580, 938, 497, 1874, 2618, 1522, 1519, 1667,
	493, 2055, 2049, 1977, 1066, 183, 1641, 425, 1658, 2616,
	1817, 2562, 2196, 1762, 1066, 457, 183, 1819, 183, 787,
	183, 597, 1884, 183, 1412, 183, 1041, 183, 183, 1576,
	183, 183, 494, 1876, 1640, 937, 423, 1889, 1688, 183,
	168, 1669, 1671, 1644, 1030, 1874, 1383, 1713, 1036, 1749,
	614, 1676, 2019, 1220, 1616, 1617, 496, 742, 732, 1684,
	741, 430, 1884, 1625, 1550, 1258, 426, 1631, 1635, 1636,
	2563, 732, 1376, 938, 1072, 1674, 427, 1022, 1630, 2389,
	733, 1680, 456, 1209, 1072, 732, 1661, 764, 1220, 616,
	1666, 2355, 1687, 2420, 2442, 1654, 1493, 2018, 1885, 787,
	1731, 2579, 1731, 764, 1259, 1855, 1652, 1634, 1217, 124,
	1218, 1228, 1884, 2608, 777, 124, 2190, 1650, 1757, 600,
	777, 1710, 2495, 1192, 1280, 1743, 171, 783, 916, 786,
	916, 2599, 997, 2089, 2253, 589, 499, 183, 1885, 441,
	440, 1087, 1735, 1517, 1746, 2560, 1348, 1744, 1752, 1745,
	1747, 1087, 2588, 183, 183, 183, 935, 183, 2054, 1756,
	1714, 1753, 1718, 1719, 1720, 1253, 1004, 1763, 1740, 1377,
	2586, 939, 998, 710, 495, 995, 1765, 2496, 788, 783,
	783, 1812, 1196, 977, 1510, 1062, 183, 2600, 1885, 2090,
	1219, 1782, 2363, 172, 1723, 1168, 962, 1171, 1877, 1878,
	1870, 1871, 1872, 1873, 1875, 1876, 1199, 1165, 1164, 965,
	2602, 1491, 1494, 1027, 1772, 1254, 1256, 1088, 1392, 954,
	2056, 124, 1194, 1052, 1255, 1361, 1051, 1088, 1880, 1881,
	1882, 498, 2430, 1197, 455, 413, 787, 1879, 1877, 1878,
	1870, 1871, 1872, 1873, 1875, 1876, 1507, 972, 1490, 1799,
	1800, 1992, 1195, 2088, 978, 2429, 1229, 2412, 979, 939,
	1786, 2479, 1505, 1774, 458, 2128, 1550, 1935, 787, 2282,
	1790, 1788, 2173, 1794, 454, 1776, 601, 1793, 1962, 1958,
	1724, 2614, 1796, 173, 1028, 788, 658, 1879, 1877, 1878,
	1870, 1871, 1872, 1873, 1875, 1876, 2339, 1050, 1777, 1270,
	1249, 1368, 2522, 2338, 1407, 1787, 783, 1789, 1051, 777,
	1775, 1364, 1947, 1717, 1198, 1257, 1077, 1075, 1076, 1068,
	1069, 1070, 1071, 1073, 1074, 1052, 2609, 938, 1841, 1068,
	1069, 1070, 1071, 1073, 1074, 880, 882, 1281, 1806, 939,
	1029, 2627, 1813, 1811, 1215, 169, 1051, 1501, 2223, 1492,
	601, 1383, 1380, 1366, 1434, 1502, 2365, 1503, 1047, 2336,
	2413, 1508, 1827, 183, 786, 788, 988, 1367, 579, 183,
	183, 889, 1923, 183, 2129, 579, 1838, 1929, 183, 1050,
	2130, 183, 888, 1005, 2283, 170, 609, 1934, 1948, 183,
	176, 1196, 1968, 609, 977, 183, 183, 183, 2613, 447,
	2213, 183, 1930, 1967, 183, 414, 1805, 713, 1936, 1629,
	183, 183, 183, 183, 183, 1199, 977, 1050, 2337, 442,
	183, 787, 957, 183, 1715, 1716, 1928, 183, 961, 1220,
	1628, 1632, 508, 502, 977, 1435, 183, 1902, 1903, 1904,
	1943, 909, 1197, 598, 898, 1052, 183, 1938, 183, 2356,
	183, 1959, 580, 907, 2410, 614, 1963, 1991, 2294, 580,
	2150, 1553, 1924, 1342, 183, 978, 1026, 3, 183, 979,
	1900, 1942, 1504, 183, 2335, 183, 1999, 415, 2001, 1506,
	2392, 2281, 183, 1952, 1015, 510, 2411, 978, 730, 2209,
	712, 979, 1013, 1963, 601, 183, 937, 1526, 1954, 1899,
	1342, 2066, 788, 1978, 1021, 489, 1927, 937, 183, 1868,
	1869, 1985, 1931, 1932, 1994, 764, 1937, 1976, 1011, 484,
	34, 764, 764, 1198, 1307, 764, 483, 33, 1009, 1862,
	2023, 1822, 1767, 1693, 788, 1685, 2002, 1007, 1112, 1113,
	1114, 1115, 1116, 1678, 1001, 1378, 183, 1955, 1125, 1035,
	2005, 1034, 877, 2037, 905, 2003, 960, 492, 1133, 1047,
	1342, 1552, 2035, 878, 482, 30, 2014, 581, 874, 2020,
	2321, 1791, 1981, 2044, 581, 481, 80, 1405, 2028, 655,
	497, 1236, 480, 79, 477, 22, 493, 1396, 1995, 1141,
	478, 23, 2556, 939, 2034, 2519, 183, 1025, 476, 28,
	2310, 2069, 507, 501, 2046, 2047, 2048, 2045, 908, 2322,
	2029, 2030, 769, 2031, 2032, 1014, 2006, 2052, 494, 2194,
	906, 735, 737, 1012, 1342, 1245, 2192, 1874, 2057, 1307,
	1307, 2172, 1020, 443, 1245, 2059, 2084, 2085, 2086, 2007,
	475, 20, 496, 1727, 473, 19, 474, 18, 582, 1010,
	1709, 2079, 1290, 1448, 2103, 582, 787, 1289, 2075, 1008,
	1342, 1342, 1448, 2108, 34, 1287, 2078, 2073, 1006, 1342,
	1342, 33, 1284, 1187, 1187, 1000, 444, 183, 1282, 1234,
	614, 583, 2100, 183, 1227, 904, 2134, 788, 583, 2105,
	2102, 1221, 183, 183, 1884, 2138, 2009, 2321, 2060, 2107,
	2314, 2453, 1342, 2091, 2093, 2094, 445, 2590, 446, 30,
	2168, 2312, 1054, 468, 15, 2376, 2316, 469, 16, 2375,
	80, 1387, 2135, 2239, 2317, 1803, 2318, 79, 487, 22,
	2455, 2184, 2185, 1673, 2133, 23, 2322, 124, 2231, 183,
	2148, 183, 2161, 28, 1689, 2200, 2208, 2151, 183, 2200,
	2153, 937, 2154, 467, 14, 2200, 2320, 2489, 1681, 2315,
	495, 2219, 2169, 1677, 2199, 2323, 183, 183, 2204, 1792,
	1885, 2216, 472, 12, 2207, 2329, 2233, 2176, 466, 10,
	999, 2166, 471, 7, 183, 20, 470, 6, 938, 19,
	1055, 18, 1804, 754, 183, 786, 183, 183, 2467, 938,
	2197, 509, 786, 2236, 1683, 1657, 2214, 2224, 2227, 2225,
	465, 5, 2228, 755, 1672, 1657, 2441, 498, 2295, 2235,
	2157, 2226, 1058, 2229, 1670, 1418, 1419, 2234, 1675, 764,
	2183, 2518, 2240, 2361, 607, 2255, 579, 1734, 2193, 183,
	2195, 1064, 1065, 1722, 1708, 2260, 1618, 2319, 1359, 1299,
	2597, 2317, 2404, 2318, 609, 2612, 2268, 2250, 15, 1868,
	1869, 2300, 16, 2241, 2256, 1064, 1065, 2147, 1342, 1879,
	1877, 1878, 1870, 1871, 1872, 1873, 1875, 1876, 2087, 1779,
	1778, 1064, 1065, 2320, 2095, 2041, 1779, 1944, 608, 1066,
	1914, 756, 2323, 183, 2280, 1780, 183, 1615, 14, 1612,
	1611, 1542, 614, 614, 1067, 1128, 786, 183, 183, 2004,
	1927, 183, 183, 183, 2298, 1138, 1136, 12, 1740, 764,
	580, 1033, 788, 10, 1024, 1019, 2305, 7, 183, 1066,
	1016, 6, 1002, 183, 964, 183, 1362, 183, 183, 183,
	2297, 587, 2418, 490, 183, 2301, 2334, 183, 2299, 2252,
	937, 2184, 2185, 1395, 2333, 5, 1003, 1940, 183, 183,
	2330, 1637, 2512, 2309, 2274, 937, 2304, 1854, 2302, 2472,
	2388, 1431, 1551, 1436, 2319, 1139, 2359, 56, 2181, 1443,
	2184, 2185, 2351, 2357, 632, 2184, 2185, 2311, 2362, 1458,
	1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
	1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
	1489, 2366, 1495, 2367, 1497, 1498, 1499, 1500, 2373, 2175,
	2368, 2382, 2360, 1703, 1702, 581, 2296, 789, 1371, 654,
	1567, 1523, 1449, 938, 729, 764, 656, 1304, 1125, 657,
	2183, 183, 1305, 183, 939, 786, 183, 1169, 644, 1302,
	2372, 2387, 2394, 932, 183, 939, 1738, 1563, 1564, 1375,
	786, 1580, 1515, 1592, 1594, 1599, 1602, 1603, 1604, 2183,
	1532, 1837, 1132, 2401, 2183, 1342, 624, 787, 636, 2343,
	635, 2184, 2185, 1530, 787, 958, 2348, 1945, 2017, 2369,
	1433, 2406, 2422, 1795, 183, 2424, 1430, 937, 638, 1246,
	2421, 183, 2013, 2191, 606, 428, 582, 2408, 2200, 183,
	183, 937, 937, 2184, 2185, 1126, 2444, 1865, 930, 2454,
	1590, 2403, 2423, 1341, 2432, 1582, 1578, 2440, 2452, 183,
	1250, 1342, 1437, 1251, 183, 1038, 2456, 1190, 2462, 583,
	180, 183, 1118, 1739, 985, 417, 2024, 1760, 2461, 1182,
	1441, 753, 752, 2450, 434, 2451, 2625, 1365, 1773, 1111,
	2483, 2469, 1110, 459, 739, 2481, 183, 183, 503, 180,
	2466, 2478, 511, 183, 2477, 516, 976, 2463, 2464, 2447,
	2183, 937, 975, 535, 1342, 1260, 183, 2498, 787, 2500,
	937, 937, 2501, 2475, 2485, 1961, 2607, 2433, 2434, 2488,
	2188, 2528, 140, 1868, 1869, 2504, 2416, 137, 2486, 139,
	601, 138, 2183, 183, 1990, 183, 83, 1307, 183, 2492,
	786, 32, 2509, 2510, 1191, 31, 103, 102, 1341, 1341,
	101, 1584, 938, 2524, 746, 746, 1306, 100, 99, 2503,
	98, 2537, 417, 2538, 2539, 97, 2449, 938, 183, 2543,
	2525, 96, 95, 94, 1307, 2541, 93, 2184, 2185, 92,
	2540, 91, 90, 89, 88, 183, 183, 183, 417, 417,
	779, 417, 2555, 183, 2554, 2566, 180, 876, 2553, 87,
	86, 2573, 2530, 2570, 2571, 2572, 85, 183, 2578, 488,
	2576, 2577, 2575, 531, 528, 82, 81, 29, 25, 939,
	107, 24, 78, 77, 2587, 2585, 27, 2591, 17, 489,
	11, 21, 61, 62, 1307, 60, 59, 2596, 2595, 58,
	13, 1874, 54, 53, 52, 2497, 50, 49, 48, 2604,
	2603, 47, 9, 106, 45, 8, 2611, 787, 2610, 43,
	42, 1306, 1306, 788, 105, 119, 116, 786, 118, 786,
	788, 1192, 787, 115, 117, 121, 2183, 1344, 120, 2629,
	2630, 492, 113, 111, 112, 2637, 114, 110, 109, 122,
	2527, 2643, 39, 38, 37, 2646, 2644, 2645, 1307, 36,
	35, 2652, 2650, 2651, 497, 2654, 2, 1, 1884, 938,
	493, 0, 0, 1824, 1825, 0, 0, 0, 0, 0,
	0, 1808, 1809, 938, 938, 0, 0, 1814, 0, 2620,
	1196, 2622, 0, 0, 1307, 1307, 0, 0, 0, 1291,
	0, 0, 494, 1307, 1307, 1740, 0, 0, 0, 0,
	0, 0, 0, 0, 1199, 0, 0, 0, 0, 1833,
	1343, 0, 0, 0, 0, 1840, 496, 0, 1844, 0,
	1194, 0, 0, 0, 788, 1358, 1307, 0, 0, 0,
	0, 1197, 1344, 1344, 1885, 1858, 0, 0, 0, 1891,
	1892, 1893, 0, 938, 0, 0, 0, 0, 0, 0,
	1195, 0, 938, 938, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 939, 1125,
	0, 0, 0, 0, 0, 0, 1599, 1599, 1599, 0,
	0, 0, 787, 939, 0, 0, 0, 0, 0, 0,
	0, 0, 535, 0, 535, 894, 535, 0, 899, 1303,
	0, 0, 1187, 0, 902, 0, 0, 614, 0, 0,
	417, 0, 1198, 0, 0, 1343, 1343, 0, 0, 0,
	0, 0, 0, 535, 535, 417, 924, 876, 0, 0,
	0, 0, 0, 0, 495, 1878, 1870, 1871, 1872, 1873,
	1875, 1876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 535, 0, 0, 0, 0, 1584,
	1584, 0, 633, 75, 0, 0, 0, 0, 535, 0,
	0, 0, 0, 788, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 1126, 0, 0, 788, 0,
	0, 498, 1307, 1536, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1303, 1303, 1568, 1568, 1581, 787,
	2015, 787, 1601, 0, 0, 0, 1605, 1606, 1608, 0,
	0, 0, 0, 0, 0, 939, 0, 0, 75, 0,
	0, 0, 2033, 0, 0, 1584, 1584, 1584, 0, 939,
	939, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	614, 0, 0, 0, 0, 0, 417, 0, 0, 0,
	0, 0, 614, 0, 0, 2064, 2065, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2058, 0,
	0, 0, 1443, 0, 0, 0, 0, 594, 2062, 0,
	602, 2063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2068, 0, 0, 765, 75, 0, 939,
	0, 0, 2076, 0, 0, 0, 0, 0, 939, 939,
	2080, 0, 0, 2033, 2109, 2110, 2111, 2112, 2113, 2114,
	2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124,
	2125, 2126, 2127, 2104, 2131, 0, 0, 2106, 788, 0,
	0, 1200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	2136, 2137, 0, 0, 0, 0, 0, 0, 0, 2143,
	2144, 2145, 44, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1307,
	0, 516, 0, 746, 0, 0, 2156, 0, 51, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 0, 0, 417, 417, 0, 0,
	0, 0, 0, 0, 0, 0, 2177, 63, 0, 0,
	0, 0, 0, 0, 64, 0, 486, 65, 0, 0,
	0, 1584, 1584, 0, 0, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 788, 0, 788, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 1341, 0, 0, 0, 0, 0, 1187,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 1306,
	0, 0, 0, 0, 0, 0, 0, 0, 1307, 0,
	1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
	1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 0,
	1584, 0, 180, 0, 0, 0, 1306, 2259, 0, 0,
	0, 2262, 2263, 0, 417, 2265, 0, 1341, 0, 0,
	0, 0, 2267, 0, 2269, 0, 0, 1268, 0, 0,
	0, 0, 1826, 417, 0, 417, 0, 417, 68, 1829,
	2276, 1276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 1341, 0, 1845, 1846, 0, 0,
	0, 0, 1341, 1341, 128, 70, 1306, 71, 0, 0,
	0, 0, 0, 2285, 0, 0, 0, 0, 0, 0,
	0, 141, 535, 180, 0, 0, 602, 0, 0, 485,
	1344, 180, 104, 0, 535, 1341, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1894, 0, 0, 0,
	0, 143, 0, 1601, 1601, 1601, 0, 0, 1907, 0,
	0, 0, 0, 2331, 535, 0, 0, 1344, 0, 535,
	1306, 0, 0, 0, 180, 535, 0, 535, 0, 535,
	0, 535, 0, 535, 0, 0, 0, 0, 142, 0,
	0, 0, 0, 0, 1406, 0, 135, 0, 0, 0,
	535, 535, 0, 136, 0, 0, 1306, 1306, 0, 0,
	0, 0, 0, 1343, 0, 1306, 1306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 1344, 0, 0,
	0, 535, 0, 0, 0, 2391, 0, 0, 2383, 2384,
	0, 0, 0, 0, 0, 0, 0, 0, 1306, 0,
	1343, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 594, 0, 2396,
	0, 0, 0, 0, 0, 2399, 2415, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1121, 0,
	1124, 1344, 0, 0, 0, 0, 0, 1129, 0, 0,
	0, 1341, 1303, 0, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 0, 0, 2431,
	0, 0, 0, 0, 0, 0, 0, 1344, 1344, 0,
	0, 0, 0, 0, 0, 0, 1344, 1344, 0, 1303,
	0, 0, 0, 0, 0, 0, 2468, 516, 0, 746,
	0, 0, 876, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 417, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 1343, 1649, 0, 0, 0, 417,
	0, 0, 417, 0, 0, 0, 1662, 0, 0, 0,
	417, 0, 0, 0, 0, 2480, 417, 0, 0, 1303,
	0, 0, 0, 417, 0, 0, 0, 0, 1692, 0,
	1343, 1343, 0, 0, 1306, 0, 1699, 0, 0, 1343,
	1343, 0, 0, 0, 0, 75, 0, 0, 0, 0,
	1208, 1584, 0, 876, 0, 0, 0, 0, 0, 614,
	0, 0, 0, 0, 417, 0, 1742, 0, 535, 0,
	0, 535, 1343, 535, 0, 417, 417, 0, 1748, 876,
	0, 0, 0, 1303, 2142, 0, 0, 1662, 0, 0,
	0, 40, 1584, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2552, 2552, 44, 0, 0, 1303,
	1303, 0, 0, 0, 0, 0, 0, 0, 1303, 1303,
	2567, 0, 0, 0, 0, 0, 0, 0, 1341, 0,
	0, 0, 51, 0, 0, 0, 0, 0, 0, 0,
	2552, 0, 0, 0, 0, 1344, 0, 0, 2202, 0,
	0, 1303, 1584, 0, 2205, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 0, 0, 0, 0, 64, 0,
	486, 65, 0, 0, 0, 1784, 0, 0, 0, 0,
	0, 0, 0, 0, 1341, 0, 0, 0, 2552, 0,
	0, 417, 417, 417, 0, 417, 0, 0, 0, 0,
	0, 0, 0, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2633, 0, 0,
	0, 0, 0, 0, 417, 0, 0, 0, 1343, 2633,
	0, 0, 2633, 2633, 0, 0, 0, 1341, 0, 0,
	0, 1306, 0, 0, 0, 0, 1064, 1065, 0, 1094,
	1095, 1096, 1104, 1105, 1106, 0, 0, 0, 0, 0,
	0, 0, 1097, 0, 0, 0, 0, 0, 0, 1067,
	0, 0, 1108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 75, 1066, 0, 0, 1306, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1303, 128, 70,
	0, 71, 0, 0, 0, 0, 594, 0, 0, 594,
	594, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	1785, 0, 0, 485, 0, 0, 104, 0, 0, 0,
	1306, 0, 0, 0, 0, 1089, 1090, 1091, 1092, 0,
	0, 0, 1344, 0, 1072, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 1101, 1109, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 0, 0,
	1124, 417, 142, 0, 0, 0, 1107, 417, 417, 0,
	135, 417, 0, 0, 0, 0, 1649, 136, 1344, 1649,
	0, 0, 0, 0, 1099, 0, 0, 1950, 0, 0,
	0, 1087, 0, 417, 1956, 1957, 0, 0, 0, 1662,
	127, 0, 1964, 0, 0, 1343, 0, 0, 1969, 1970,
	1972, 1974, 1975, 0, 0, 0, 0, 0, 417, 0,
	0, 1984, 0, 2400, 0, 1987, 0, 765, 0, 0,
	0, 1344, 0, 0, 417, 0, 0, 0, 0, 0,
	0, 0, 0, 1208, 1268, 0, 1268, 0, 535, 0,
	0, 0, 1093, 0, 0, 0, 75, 0, 0, 0,
	2426, 1343, 417, 0, 75, 0, 2012, 1088, 0, 0,
	0, 417, 0, 2022, 2437, 0, 0, 0, 0, 0,
	417, 0, 0, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 0, 1784, 1303, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 1784, 75, 0, 0,
	0, 0, 0, 0, 1343, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 417, 0, 0, 0, 0, 0,
	1303, 0, 0, 0, 1100, 0, 0, 1078, 1079, 1085,
	1084, 1080, 1081, 1082, 1103, 0, 1077, 1075, 1076, 1068,
	1069, 1070, 1071, 1073, 1074, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2097, 2515, 0, 0, 0, 0,
	0, 0, 0, 1303, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2532, 2533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 1064,
	1065, 0, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 1108, 0, 0, 0, 1868,
	1869, 0, 1886, 1887, 1888, 417, 0, 0, 0, 0,
	0, 1649, 0, 0, 0, 2071, 0, 1066, 0, 0,
	876, 1649, 0, 1086, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 2180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2201, 0,
	0, 0, 2201, 1883, 0, 0, 0, 1513, 2201, 0,
	0, 0, 0, 0, 0, 0, 0, 1662, 0, 1268,
	0, 0, 0, 0, 0, 0, 2221, 1124, 1089, 1090,
	1091, 1092, 0, 0, 0, 0, 0, 1072, 0, 0,
	0, 0, 0, 0, 417, 417, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 1109, 2247, 0, 0, 0, 0, 1874, 0, 0,
	0, 0, 2249, 0, 2251, 417, 0, 0, 0, 1107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 1124, 0, 0, 1087, 0, 0, 0, 0, 1889,
	0, 0, 0, 0, 0, 0, 0, 2275, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 1884, 765, 0, 0, 0, 0,
	0, 765, 765, 0, 0, 765, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1093, 0, 0, 0, 0,
	0, 417, 0, 0, 876, 0, 40, 0, 0, 0,
	1088, 0, 0, 0, 0, 1649, 876, 41, 75, 2307,
	2308, 1662, 0, 0, 0, 0, 75, 0, 1102, 0,
	0, 44, 0, 0, 0, 2180, 876, 0, 0, 0,
	1885, 2341, 0, 2342, 0, 417, 2344, 2345, 0, 0,
	0, 75, 417, 0, 0, 2350, 0, 51, 0, 0,
	0, 0, 0, 0, 2180, 75, 876, 1699, 0, 2180,
	0, 0, 0, 0, 0, 602, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 0,
	0, 0, 0, 64, 0, 486, 65, 1100, 0, 0,
	1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 0, 1077,
	1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0,
	0, 0, 0, 0, 0, 0, 1910, 0, 0, 67,
	1880, 1881, 1882, 0, 0, 0, 0, 0, 0, 1879,
	1877, 1878, 1870, 1871, 1872, 1873, 1875, 1876, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1662,
	0, 2407, 0, 0, 2409, 0, 0, 0, 0, 0,
	0, 0, 417, 0, 0, 2180, 0, 1064, 1065, 0,
	1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	1067, 2201, 0, 1108, 0, 0, 0, 2180, 0, 0,
	0, 0, 417, 0, 0, 0, 0, 68, 0, 876,
	0, 0, 0, 0, 0, 1066, 0, 2247, 2247, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 128, 70, 0, 71, 2474, 0, 0,
	0, 0, 1649, 0, 0, 0, 0, 0, 0, 1268,
	141, 0, 0, 0, 75, 1403, 0, 0, 485, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 765,
	0, 0, 0, 0, 2490, 2491, 1089, 1090, 1091, 1092,
	143, 417, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 2508, 0, 1064, 1065, 0, 1094,
	1095, 1096, 1104, 1105, 1106, 0, 0, 0, 1101, 1109,
	0, 0, 1097, 0, 0, 0, 0, 142, 0, 1067,
	0, 2523, 1108, 876, 0, 135, 417, 1107, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 0, 0,
	462, 2180, 0, 0, 1066, 1099, 0, 0, 0, 0,
	1086, 0, 1087, 0, 0, 127, 2474, 1083, 0, 765,
	0, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 876, 876, 876, 0, 0, 0, 1098,
	0, 417, 0, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 2584, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1089, 1090, 1091, 1092, 0,
	0, 0, 51, 1093, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 1109, 0,
	0, 63, 0, 0, 0, 0, 1102, 0, 64, 0,
	486, 65, 0, 0, 0, 0, 1107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 1087, 0, 0, 67, 765, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1098, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 1078, 1079,
	1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075, 1076,
	1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0, 0,
	0, 0, 1093, 0, 1909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 70,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 485, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 143, 0, 1078, 1079, 1085,
	1084, 1080, 1081, 1082, 1103, 0, 1077, 1075, 1076, 1068,
	1069, 1070, 1071, 1073, 1074, 0, 0, 0, 0, 0,
	0, 0, 0, 1908, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 75, 0, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	463, 0, 0, 0, 785, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 791, 187, 792, 793, 794, 795, 352, 796,
	797, 798, 799, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 800, 192, 359, 360, 193, 194, 195,
	801, 802, 361, 362, 363, 803, 196, 364, 804, 790,
	805, 197, 198, 199, 0, 201, 202, 203, 200, 806,
	204, 1124, 205, 206, 807, 714, 207, 208, 209, 808,
	809, 811, 810, 812, 813, 814, 210, 211, 418, 212,
	365, 213, 366, 367, 815, 214, 816, 215, 817, 216,
	818, 819, 217, 218, 820, 219, 821, 0, 822, 368,
	220, 222, 221, 223, 369, 370, 823, 715, 824, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	825, 227, 826, 827, 716, 828, 228, 374, 829, 375,
	830, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 718, 831, 378, 237, 832, 234, 833, 717, 235,
	379, 236, 380, 381, 382, 383, 384, 834, 385, 835,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	836, 245, 244, 837, 388, 721, 246, 247, 722, 838,
	248, 249, 839, 840, 250, 0, 251, 253, 723, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 841,
	842, 843, 390, 261, 391, 262, 263, 844, 264, 845,
	846, 265, 847, 848, 266, 392, 725, 267, 726, 393,
	268, 269, 270, 271, 272, 849, 273, 394, 274, 395,
	275, 850, 276, 277, 278, 279, 280, 396, 281, 282,
	851, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 852, 295, 727, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 853, 308, 309,
	398, 307, 310, 311, 854, 312, 299, 300, 313, 728,
	314, 399, 400, 315, 855, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 856, 323, 857, 324, 325,
	326, 327, 328, 329, 330, 331, 858, 403, 404, 405,
	859, 860, 332, 333, 406, 407, 861, 334, 335, 336,
	337, 862, 863, 338, 339, 340, 341, 864, 342, 865,
	408, 343, 344, 345, 409, 410, 866, 867, 346, 868,
	869, 870, 871, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 785, 0, 0, 0, 0, 0,
	1642, 0, 0, 0, 0, 0, 0, 0, 0, 1643,
	185, 186, 791, 187, 792, 793, 794, 795, 352, 796,
	797, 798, 799, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 800, 192, 359, 360, 193, 194, 195,
	801, 802, 361, 362, 363, 803, 196, 364, 804, 790,
	805, 197, 198, 199, 0, 201, 202, 203, 200, 806,
	204, 0, 205, 206, 807, 714, 207, 208, 209, 808,
	809, 811, 810, 812, 813, 814, 210, 211, 418, 212,
	365, 213, 366, 367, 815, 214, 816, 215, 817, 216,
	818, 819, 217, 218, 820, 219, 821, 0, 822, 368,
	220, 222, 221, 223, 369, 370, 823, 715, 824, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	825, 227, 826, 827, 716, 828, 228, 374, 829, 375,
	830, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 718, 831, 378, 237, 832, 234, 833, 717, 235,
	379, 236, 380, 381, 382, 383, 384, 834, 385, 835,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	836, 245, 244, 837, 388, 721, 246, 247, 722, 838,
	248, 249, 839, 840, 250, 0, 251, 253, 723, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 841,
	842, 843, 390, 261, 391, 262, 263, 844, 264, 845,
	846, 265, 847, 848, 266, 392, 725, 267, 726, 393,
	268, 269, 270, 271, 272, 849, 273, 394, 274, 395,
	275, 850, 276, 277, 278, 279, 280, 396, 281, 282,
	851, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 852, 295, 727, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 853, 308, 309,
	398, 307, 310, 311, 854, 312, 299, 300, 313, 728,
	314, 399, 400, 315, 855, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 856, 323, 857, 324, 325,
	326, 327, 328, 329, 330, 331, 858, 403, 404, 405,
	859, 860, 332, 333, 406, 407, 861, 334, 335, 336,
	337, 862, 863, 338, 339, 340, 341, 864, 342, 865,
	408, 343, 344, 345, 409, 410, 866, 867, 346, 868,
	869, 870, 871, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 785, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2303, 185, 186, 791, 187, 792, 793, 794, 795, 352,
	796, 797, 798, 799, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 800, 192, 359, 360, 193, 194,
	195, 801, 802, 361, 362, 363, 803, 196, 364, 804,
	790, 805, 197, 198, 199, 0, 201, 202, 203, 200,
	806, 204, 0, 205, 206, 807, 714, 207, 208, 209,
	808, 809, 811, 810, 812, 813, 814, 210, 211, 418,
	212, 365, 213, 366, 367, 815, 214, 816, 215, 817,
	216, 818, 819, 217, 218, 820, 219, 821, 0, 822,
	368, 220, 222, 221, 223, 369, 370, 823, 715, 824,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 825, 227, 826, 827, 716, 828, 228, 374, 829,
	375, 830, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 718, 831, 378, 237, 832, 234, 833, 717,
	235, 379, 236, 380, 381, 382, 383, 384, 834, 385,
	835, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 836, 245, 244, 837, 388, 721, 246, 247, 722,
	838, 248, 249, 839, 840, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	841, 842, 843, 390, 261, 391, 262, 263, 844, 264,
	845, 846, 265, 847, 848, 266, 392, 725, 267, 726,
	393, 268, 269, 270, 271, 272, 849, 273, 394, 274,
	395, 275, 850, 276, 277, 278, 279, 280, 396, 281,
	282, 851, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 852, 295, 727, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 853, 308,
	309, 398, 307, 310, 311, 854, 312, 299, 300, 313,
	728, 314, 399, 400, 315, 855, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 856, 323, 857, 324,
	325, 326, 327, 328, 329, 330, 331, 858, 403, 404,
	405, 859, 860, 332, 333, 406, 407, 861, 334, 335,
	336, 337, 862, 863, 338, 339, 340, 341, 864, 342,
	865, 408, 343, 344, 345, 409, 410, 866, 867, 346,
	868, 869, 870, 871, 347, 348, 349, 350, 351, 0,
	0, 785, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1241, 185, 186, 791,
	187, 792, 793, 794, 795, 352, 796, 797, 798, 799,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	800, 192, 359, 360, 193, 194, 195, 801, 802, 361,
	362, 363, 803, 196, 364, 804, 790, 805, 197, 198,
	199, 0, 201, 202, 203, 200, 806, 204, 0, 205,
	206, 807, 714, 207, 208, 209, 808, 809, 811, 810,
	812, 813, 814, 210, 211, 418, 212, 365, 213, 366,
	367, 815, 214, 816, 215, 817, 216, 818, 819, 217,
	218, 820, 219, 821, 0, 822, 368, 220, 222, 221,
	223, 369, 370, 823, 715, 824, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 825, 227, 826,
	827, 716, 828, 228, 374, 829, 375, 830, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 718, 831,
	378, 237, 832, 234, 833, 717, 235, 379, 236, 380,
	381, 382, 383, 384, 834, 385, 835, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 836, 245, 244,
	837, 388, 721, 246, 247, 722, 838, 248, 249, 839,
	840, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 841, 842, 843, 390,
	261, 391, 262, 263, 844, 264, 845, 846, 265, 847,
	848, 266, 392, 725, 267, 726, 393, 268, 269, 270,
	271, 272, 849, 273, 394, 274, 395, 275, 850, 276,
	277, 278, 279, 280, 396, 281, 282, 851, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 852, 295, 727, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 853, 308, 309, 398, 307, 310,
	311, 854, 312, 299, 300, 313, 728, 314, 399, 400,
	315, 855, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 856, 323, 857, 324, 325, 326, 327, 328,
	329, 330, 331, 858, 403, 404, 405, 859, 860, 332,
	333, 406, 407, 861, 334, 335, 336, 337, 862, 863,
	338, 339, 340, 341, 864, 342, 865, 408, 343, 344,
	345, 409, 410, 866, 867, 346, 868, 869, 870, 871,
	347, 348, 349, 350, 351, 1541, 0, 652, 641, 642,
	639, 640, 631, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 1538, 187, 0, 0, 0,
	0, 669, 634, 0, 0, 0, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 213, 691, 692, 0, 214, 0,
	215, 0, 216, 1539, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 620, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 626, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 409, 708, 1537,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 621, 0, 652, 641, 642, 639, 640, 631, 0,
	0, 619, 0, 0, 0, 0, 617, 618, 1540, 185,
	186, 0, 187, 0, 0, 627, 1535, 669, 634, 0,
	0, 630, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 615, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 141, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 143, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 940, 708, 0, 0, 346, 0, 0,
	0, 135, 347, 348, 349, 350, 351, 621, 136, 603,
	0, 652, 641, 642, 639, 640, 631, 619, 0, 0,
	0, 0, 617, 618, 0, 0, 0, 185, 186, 0,
	187, 1127, 0, 0, 0, 669, 634, 630, 0, 0,
	188, 189, 190, 353, 684, 355, 685, 191, 686, 687,
	0, 192, 359, 360, 193, 194, 195, 637, 668, 688,
	689, 363, 0, 196, 680, 0, 660, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 661, 662, 664,
	0, 663, 665, 210, 211, 418, 212, 690, 213, 691,
	692, 0, 214, 0, 215, 0, 216, 0, 0, 683,
	218, 0, 219, 0, 0, 0, 625, 220, 222, 221,
	223, 670, 671, 648, 715, 0, 0, 0, 0, 0,
	224, 225, 693, 694, 695, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 681, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 677, 679, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 696, 236, 697,
	698, 699, 700, 701, 0, 659, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 682, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 620, 0, 649, 678,
	261, 702, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 672, 268, 269, 270,
	271, 272, 0, 273, 673, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 703, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 626, 298, 0, 302,
	303, 304, 305, 306, 141, 308, 309, 398, 307, 310,
	311, 666, 312, 299, 300, 313, 728, 314, 704, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 705, 319,
	320, 674, 0, 323, 143, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 706, 707, 0, 0, 332,
	333, 675, 676, 647, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 667, 342, 0, 408, 343, 344,
	345, 940, 708, 0, 0, 346, 0, 0, 0, 135,
	347, 348, 349, 350, 351, 621, 136, 652, 641, 642,
	639, 640, 631, 0, 0, 619, 0, 0, 0, 0,
	617, 618, 0, 185, 186, 0, 187, 0, 0, 1127,
	0, 669, 634, 0, 0, 630, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 213, 691, 692, 0, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 620, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 626, 298, 0, 302, 303, 304, 305, 306,
	141, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	143, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 940, 708, 0,
	0, 346, 0, 0, 0, 135, 347, 348, 349, 350,
	351, 621, 136, 652, 641, 642, 639, 640, 631, 0,
	0, 619, 0, 0, 0, 0, 617, 618, 0, 185,
	186, 0, 187, 0, 0, 1127, 0, 669, 634, 0,
	0, 630, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 1595, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 0, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 1600, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 1596, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	1597, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 621, 611, 0,
	652, 641, 642, 639, 640, 631, 0, 619, 0, 0,
	0, 0, 617, 618, 0, 0, 185, 186, 0, 187,
	0, 627, 0, 0, 669, 634, 0, 630, 0, 188,
	189, 190, 353, 684, 355, 685, 191, 686, 687, 0,
	192, 359, 360, 193, 194, 195, 637, 668, 688, 689,
	363, 0, 196, 680, 0, 660, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 661, 662, 664, 0,
	663, 665, 210, 211, 418, 212, 690, 213, 691, 692,
	615, 214, 0, 215, 0, 216, 0, 0, 683, 218,
	0, 219, 0, 0, 0, 625, 220, 222, 221, 223,
	670, 671, 648, 715, 0, 0, 0, 0, 0, 224,
	225, 693, 694, 695, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 681, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 677, 679, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 696, 236, 697, 698,
	699, 700, 701, 0, 659, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	682, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 620, 0, 649, 678, 261,
	702, 262, 263, 0, 264, 613, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 672, 268, 269, 270, 271,
	272, 0, 273, 673, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 703, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 626, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	666, 312, 299, 300, 313, 728, 314, 704, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 705, 319, 320,
	674, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 706, 707, 0, 0, 332, 333,
	675, 676, 647, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 667, 342, 0, 408, 343, 344, 345,
	409, 708, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 621, 0, 652, 641, 642, 639,
	640, 631, 0, 0, 619, 0, 0, 0, 0, 617,
	618, 0, 185, 186, 0, 187, 0, 0, 627, 0,
	669, 634, 0, 0, 630, 188, 189, 190, 353, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 213, 691, 692, 0, 214, 0, 215,
	0, 216, 0, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 620, 2230, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 626, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 409, 708, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	621, 0, 652, 641, 642, 639, 640, 631, 0, 0,
	619, 0, 0, 0, 0, 617, 618, 1188, 185, 186,
	0, 187, 0, 0, 627, 0, 669, 634, 0, 0,
	630, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 0, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 1445, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 620, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 1444,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 626, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 409, 708, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 621, 0, 652, 641,
	642, 639, 640, 631, 0, 0, 619, 0, 0, 0,
	0, 617, 618, 0, 185, 186, 0, 187, 0, 0,
	627, 0, 669, 634, 0, 0, 630, 188, 189, 190,
	353, 684, 355, 685, 191, 686, 687, 0, 192, 359,
	360, 193, 194, 195, 637, 668, 688, 689, 363, 0,
	196, 680, 0, 660, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 209, 0, 661, 662, 664, 0, 663, 665,
	210, 211, 418, 212, 690, 213, 691, 692, 615, 214,
	0, 215, 0, 216, 0, 0, 683, 218, 0, 219,
	0, 0, 0, 625, 220, 222, 221, 223, 670, 671,
	648, 715, 0, 0, 0, 0, 0, 224, 225, 693,
	694, 695, 0, 226, 0, 227, 0, 0, 716, 0,
	228, 681, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 677, 679, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 696, 236, 697, 698, 699, 700,
	701, 0, 659, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 682, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 620, 0, 649, 678, 261, 702, 262,
	263, 0, 264, 613, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 672, 268, 269, 270, 271, 272, 0,
	273, 673, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 703, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 626, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 666, 312,
	299, 300, 313, 728, 314, 704, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 705, 319, 320, 674, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 706, 707, 0, 0, 332, 333, 675, 676,
	647, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 667, 342, 0, 408, 343, 344, 345, 409, 708,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 621, 0, 652, 641, 642, 639, 640, 631,
	0, 0, 619, 0, 0, 0, 0, 617, 618, 0,
	185, 186, 0, 187, 0, 0, 627, 0, 669, 634,
	0, 0, 630, 188, 189, 190, 353, 684, 355, 685,
	191, 686, 687, 0, 192, 359, 360, 193, 194, 195,
	637, 668, 688, 689, 363, 0, 196, 680, 0, 660,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 714, 207, 208, 209, 0,
	661, 662, 664, 0, 663, 665, 210, 211, 418, 212,
	690, 213, 691, 692, 2634, 214, 0, 215, 0, 216,
	0, 0, 683, 218, 0, 219, 0, 0, 0, 625,
	220, 222, 221, 223, 670, 671, 648, 715, 0, 0,
	0, 0, 0, 224, 225, 693, 694, 695, 0, 226,
	0, 227, 0, 0, 716, 0, 228, 681, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 677,
	679, 718, 0, 378, 237, 0, 234, 0, 717, 235,
	696, 236, 697, 698, 699, 700, 701, 0, 659, 0,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 682, 721, 246, 247, 722, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 2635, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 620,
	0, 649, 678, 261, 702, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 725, 267, 726, 672,
	268, 269, 270, 271, 272, 0, 273, 673, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 703, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 727, 296, 297, 626,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 666, 312, 299, 300, 313, 728,
	314, 704, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 705, 319, 320, 674, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 706, 707,
	0, 0, 332, 333, 675, 676, 647, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 667, 342, 0,
	408, 343, 344, 345, 409, 708, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 621, 0,
	652, 641, 642, 639, 640, 631, 0, 0, 619, 0,
	0, 0, 0, 617, 618, 0, 185, 186, 0, 187,
	0, 0, 627, 0, 669, 634, 0, 0, 630, 188,
	189, 190, 353, 684, 355, 685, 191, 686, 687, 0,
	192, 359, 360, 193, 194, 195, 637, 668, 688, 689,
	363, 0, 196, 680, 0, 660, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 661, 662, 664, 0,
	663, 665, 210, 211, 418, 212, 690, 213, 691, 692,
	615, 214, 0, 215, 0, 216, 0, 0, 683, 218,
	0, 219, 0, 0, 0, 625, 220, 222, 221, 223,
	670, 671, 648, 715, 0, 0, 0, 0, 0, 224,
	225, 693, 694, 695, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 681, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 677, 679, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 696, 236, 697, 698,
	699, 700, 701, 0, 659, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	682, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 620, 0, 649, 678, 261,
	702, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 672, 268, 269, 270, 271,
	272, 0, 273, 673, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 703, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 626, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	666, 312, 299, 300, 313, 728, 314, 704, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 705, 319, 320,
	674, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 706, 707, 0, 0, 332, 333,
	675, 676, 647, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 667, 342, 0, 408, 343, 344, 345,
	409, 708, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 621, 0, 652, 641, 642, 639,
	640, 631, 0, 0, 619, 0, 0, 0, 0, 617,
	618, 0, 185, 186, 0, 187, 0, 0, 627, 0,
	669, 634, 0, 0, 630, 188, 189, 190, 353, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 213, 691, 692, 0, 214, 0, 215,
	0, 216, 0, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 620, 0, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 626, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 409, 708, 2083, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	621, 0, 652, 641, 642, 639, 640, 631, 0, 0,
	619, 0, 0, 0, 0, 617, 618, 0, 185, 186,
	0, 187, 0, 0, 627, 0, 669, 634, 0, 0,
	630, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 0, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 620, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 626, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 409, 708, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 621, 0, 652, 641,
	642, 639, 640, 631, 0, 0, 619, 0, 0, 0,
	0, 617, 618, 1188, 185, 186, 0, 187, 0, 0,
	627, 0, 669, 634, 0, 0, 630, 188, 189, 190,
	353, 684, 355, 685, 191, 686, 687, 0, 192, 359,
	360, 193, 194, 195, 637, 668, 688, 689, 363, 0,
	196, 680, 0, 660, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 209, 0, 661, 662, 664, 0, 663, 665,
	210, 211, 418, 212, 690, 213, 691, 692, 0, 214,
	0, 215, 0, 216, 0, 0, 683, 218, 0, 219,
	0, 0, 0, 625, 220, 222, 221, 223, 670, 671,
	648, 715, 0, 0, 0, 0, 0, 224, 225, 693,
	694, 695, 0, 226, 0, 227, 0, 1600, 716, 0,
	228, 681, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 677, 679, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 696, 236, 697, 698, 699, 700,
	701, 0, 659, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 682, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 620, 0, 649, 678, 261, 702, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 672, 268, 269, 270, 271, 272, 0,
	273, 673, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 703, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 626, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 666, 312,
	299, 300, 313, 728, 314, 704, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 705, 319, 320, 674, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 706, 707, 0, 0, 332, 333, 675, 676,
	647, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 667, 342, 0, 408, 343, 344, 345, 409, 708,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 621, 1645, 0, 652, 641, 642, 639, 640,
	631, 0, 619, 0, 0, 0, 0, 617, 618, 0,
	0, 185, 186, 0, 187, 0, 627, 0, 0, 669,
	634, 0, 630, 0, 188, 189, 190, 353, 684, 355,
	685, 191, 686, 687, 0, 192, 359, 360, 193, 194,
	195, 637, 668, 688, 689, 363, 0, 196, 680, 0,
	660, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 209,
	0, 661, 662, 664, 0, 663, 665, 210, 211, 418,
	212, 690, 213, 691, 692, 0, 214, 0, 215, 0,
	216, 0, 0, 683, 218, 0, 219, 0, 0, 0,
	625, 220, 222, 221, 223, 670, 671, 648, 715, 0,
	0, 0, 0, 0, 224, 225, 693, 694, 695, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 681, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	677, 679, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 696, 236, 697, 698, 699, 700, 701, 0, 659,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 682, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	620, 0, 649, 678, 261, 702, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	672, 268, 269, 270, 271, 272, 0, 273, 673, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 703, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	626, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 666, 312, 299, 300, 313,
	728, 314, 704, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 705, 319, 320, 674, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 706,
	707, 0, 0, 332, 333, 675, 676, 647, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 667, 342,
	0, 408, 343, 344, 345, 409, 708, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 621,
	1609, 0, 652, 641, 642, 639, 640, 631, 0, 619,
	0, 0, 0, 0, 617, 618, 0, 0, 185, 186,
	0, 187, 0, 627, 0, 0, 669, 634, 0, 630,
	0, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 0, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 620, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 626, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 409, 708, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 621, 1607, 0, 652,
	641, 642, 639, 640, 631, 0, 619, 0, 0, 0,
	0, 617, 618, 0, 0, 185, 186, 0, 187, 0,
	627, 0, 0, 669, 634, 0, 630, 0, 188, 189,
	190, 353, 684, 355, 685, 191, 686, 687, 0, 192,
	359, 360, 193, 194, 195, 637, 668, 688, 689, 363,
	0, 196, 680, 0, 660, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 209, 0, 661, 662, 664, 0, 663,
	665, 210, 211, 418, 212, 690, 213, 691, 692, 0,
	214, 0, 215, 0, 216, 0, 0, 683, 218, 0,
	219, 0, 0, 0, 625, 220, 222, 221, 223, 670,
	671, 648, 715, 0, 0, 0, 0, 0, 224, 225,
	693, 694, 695, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 681, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 677, 679, 718, 0, 378, 237,
	0, 234, 0, 717, 235, 696, 236, 697, 698, 699,
	700, 701, 0, 659, 0, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 682,
	721, 246, 247, 722, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 620, 0, 649, 678, 261, 702,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 672, 268, 269, 270, 271, 272,
	0, 273, 673, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 703, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 626, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 666,
	312, 299, 300, 313, 728, 314, 704, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 705, 319, 320, 674,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 706, 707, 0, 0, 332, 333, 675,
	676, 647, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 667, 342, 0, 408, 343, 344, 345, 409,
	708, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 621, 1591, 0, 652, 641, 642, 639,
	640, 631, 0, 619, 0, 0, 0, 0, 617, 618,
	0, 0, 185, 186, 0, 187, 0, 627, 0, 0,
	669, 634, 0, 630, 0, 188, 189, 190, 353, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 213, 691, 692, 0, 214, 0, 215,
	0, 216, 0, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 620, 0, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 626, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 409, 708, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	621, 1579, 0, 652, 641, 642, 639, 640, 631, 0,
	619, 0, 0, 0, 0, 617, 618, 0, 0, 185,
	186, 0, 187, 0, 627, 0, 0, 669, 634, 0,
	630, 0, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 0, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 621, 1577, 0,
	1569, 641, 642, 639, 640, 631, 0, 619, 0, 0,
	0, 0, 617, 618, 0, 0, 185, 186, 0, 187,
	0, 627, 0, 0, 669, 634, 0, 630, 0, 188,
	189, 190, 353, 684, 355, 685, 191, 686, 687, 0,
	192, 359, 360, 193, 194, 195, 637, 668, 688, 689,
	363, 0, 196, 680, 0, 660, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 661, 662, 664, 0,
	663, 665, 210, 211, 418, 212, 690, 1572, 691, 692,
	0, 214, 0, 215, 0, 216, 0, 0, 683, 218,
	0, 219, 0, 0, 0, 625, 220, 222, 221, 223,
	670, 671, 648, 715, 0, 0, 0, 0, 0, 224,
	225, 693, 694, 695, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 681, 0, 375, 0, 0, 229, 1573,
	0, 0, 231, 232, 233, 677, 679, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 696, 236, 697, 698,
	699, 700, 701, 0, 659, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	682, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 1574, 1571, 256, 389, 255,
	724, 257, 258, 260, 259, 620, 0, 649, 678, 261,
	702, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 672, 268, 269, 270, 271,
	272, 0, 273, 673, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 703, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 626, 298, 0, 302, 303,
	304, 305, 1575, 0, 308, 309, 398, 307, 310, 311,
	666, 312, 299, 300, 313, 728, 314, 704, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 705, 319, 320,
	674, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 706, 707, 0, 0, 332, 333,
	675, 676, 647, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 667, 342, 0, 408, 343, 344, 345,
	409, 708, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 1570, 351, 621, 1566, 0, 1569, 641, 642,
	639, 640, 631, 0, 619, 0, 0, 0, 0, 617,
	618, 0, 0, 185, 186, 0, 187, 0, 627, 0,
	0, 669, 634, 0, 630, 0, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 1572, 691, 692, 0, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 1573, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 1574, 1571, 256, 389, 255, 724, 257, 258,
	260, 259, 620, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 626, 298, 0, 302, 303, 304, 305, 1575,
	0, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 409, 708, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 1570,
	351, 621, 0, 652, 641, 642, 639, 640, 631, 0,
	0, 619, 0, 0, 0, 0, 617, 618, 0, 185,
	186, 0, 187, 0, 0, 627, 0, 669, 634, 0,
	0, 630, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 0, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 621, 0, 652,
	641, 642, 639, 640, 631, 0, 0, 619, 0, 0,
	0, 0, 617, 618, 0, 185, 186, 1432, 187, 1131,
	0, 627, 0, 669, 634, 0, 0, 630, 188, 189,
	190, 353, 684, 355, 685, 191, 686, 687, 0, 192,
	359, 360, 193, 194, 195, 637, 668, 688, 689, 363,
	0, 196, 680, 0, 660, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 209, 0, 661, 662, 664, 0, 663,
	665, 210, 211, 418, 212, 690, 213, 691, 692, 0,
	214, 0, 215, 0, 216, 0, 0, 683, 218, 0,
	219, 0, 0, 0, 625, 220, 222, 221, 223, 670,
	671, 648, 715, 0, 0, 0, 0, 0, 224, 225,
	693, 694, 695, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 681, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 677, 679, 718, 0, 378, 237,
	0, 234, 0, 717, 235, 696, 236, 697, 698, 699,
	700, 701, 0, 659, 0, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 682,
	721, 246, 247, 722, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 620, 0, 649, 678, 261, 702,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 672, 268, 269, 270, 271, 272,
	0, 273, 673, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 703, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 626, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 666,
	312, 299, 300, 313, 728, 314, 704, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 705, 319, 320, 674,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 706, 707, 0, 0, 332, 333, 675,
	676, 647, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 667, 342, 0, 408, 343, 344, 345, 409,
	708, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 621, 883, 0, 652, 641, 642, 639,
	640, 631, 0, 619, 0, 0, 0, 0, 617, 618,
	0, 0, 185, 186, 0, 187, 0, 627, 0, 0,
	669, 634, 0, 630, 0, 188, 189, 190, 353, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 213, 691, 692, 0, 214, 0, 215,
	0, 216, 0, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 620, 0, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 626, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 409, 708, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	621, 881, 0, 652, 641, 642, 639, 640, 631, 0,
	619, 0, 0, 0, 0, 617, 618, 0, 0, 185,
	186, 0, 187, 0, 627, 0, 0, 669, 634, 0,
	630, 0, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 0, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 621, 0, 652,
	641, 642, 639, 640, 631, 0, 0, 619, 0, 0,
	0, 0, 617, 618, 0, 185, 186, 0, 187, 0,
	0, 627, 0, 669, 634, 0, 0, 630, 188, 189,
	190, 353, 684, 355, 685, 191, 686, 687, 0, 192,
	359, 360, 193, 194, 195, 637, 668, 688, 689, 363,
	0, 196, 680, 0, 660, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 2551, 0, 661, 662, 664, 0, 663,
	665, 210, 211, 418, 212, 690, 213, 691, 692, 0,
	214, 0, 215, 0, 216, 0, 0, 683, 218, 0,
	219, 0, 0, 0, 625, 220, 222, 221, 223, 670,
	671, 648, 715, 0, 0, 0, 0, 0, 224, 225,
	693, 694, 695, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 681, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 677, 679, 718, 0, 378, 237,
	0, 234, 0, 717, 235, 696, 236, 697, 698, 699,
	700, 701, 0, 659, 0, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 682,
	721, 246, 247, 722, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 620, 0, 649, 678, 261, 702,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 672, 268, 269, 270, 271, 272,
	0, 273, 673, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 703, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 626, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 666,
	312, 299, 300, 313, 728, 314, 704, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 705, 319, 320, 674,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 706, 707, 0, 0, 332, 333, 675,
	676, 647, 334, 335, 2550, 337, 0, 0, 338, 339,
	340, 341, 667, 342, 0, 408, 343, 344, 345, 409,
	708, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 621, 0, 652, 641, 642, 639, 640,
	631, 0, 0, 619, 0, 0, 0, 0, 617, 618,
	0, 185, 186, 0, 187, 0, 0, 627, 0, 669,
	634, 0, 0, 630, 188, 189, 190, 353, 684, 355,
	685, 191, 686, 687, 0, 192, 359, 360, 193, 194,
	195, 637, 668, 688, 689, 363, 0, 196, 680, 0,
	660, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 209,
	0, 661, 662, 664, 0, 663, 665, 210, 211, 418,
	212, 690, 213, 691, 692, 0, 214, 0, 215, 0,
	216, 0, 0, 683, 218, 0, 219, 0, 0, 0,
	625, 220, 222, 221, 223, 670, 671, 648, 715, 0,
	0, 0, 0, 0, 224, 225, 693, 694, 695, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 681, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	677, 679, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 696, 236, 697, 698, 699, 700, 701, 0, 659,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 682, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	620, 0, 649, 678, 261, 702, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	672, 268, 269, 270, 271, 272, 0, 273, 673, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 703, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	626, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 666, 312, 299, 300, 313,
	728, 314, 704, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 705, 319, 320, 674, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 706,
	707, 0, 0, 332, 333, 675, 676, 647, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 667, 342,
	0, 408, 343, 344, 345, 409, 708, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 621,
	0, 652, 641, 642, 639, 640, 631, 0, 0, 619,
	0, 0, 0, 0, 617, 618, 0, 185, 186, 0,
	187, 0, 0, 627, 0, 669, 634, 0, 0, 630,
	188, 189, 190, 2549, 684, 355, 685, 191, 686, 687,
	0, 192, 359, 360, 193, 194, 195, 637, 668, 688,
	689, 363, 0, 196, 680, 0, 660, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 2551, 0, 661, 662, 664,
	0, 663, 665, 210, 211, 418, 212, 690, 213, 691,
	692, 0, 214, 0, 215, 0, 216, 0, 0, 683,
	218, 0, 219, 0, 0, 0, 625, 220, 222, 221,
	223, 670, 671, 648, 715, 0, 0, 0, 0, 0,
	224, 225, 693, 694, 695, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 681, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 677, 679, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 696, 236, 697,
	698, 699, 700, 701, 0, 659, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 682, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 620, 0, 649, 678,
	261, 702, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 672, 268, 269, 270,
	271, 272, 0, 273, 673, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 703, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 626, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 666, 312, 299, 300, 313, 728, 314, 704, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 705, 319,
	320, 674, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 706, 707, 0, 0, 332,
	333, 675, 676, 647, 334, 335, 2550, 337, 0, 0,
	338, 339, 340, 341, 667, 342, 0, 408, 343, 344,
	345, 409, 708, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 621, 0, 652, 641, 642,
	639, 640, 631, 0, 0, 619, 0, 0, 0, 0,
	617, 618, 0, 185, 186, 0, 187, 0, 0, 627,
	0, 669, 634, 0, 0, 630, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 213, 691, 692, 0, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 0, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 1589, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 409, 708, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 652, 641, 642, 639, 640, 631, 0,
	0, 1587, 0, 0, 0, 0, 1585, 1586, 0, 185,
	186, 0, 187, 0, 0, 1588, 0, 669, 634, 0,
	0, 630, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 0,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 0, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 0, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 1589, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 652,
	641, 642, 639, 640, 631, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 1588, 0, 669, 634, 0, 0, 630, 188, 189,
	190, 0, 684, 355, 685, 191, 686, 687, 0, 192,
	359, 360, 193, 194, 195, 637, 668, 688, 689, 363,
	0, 196, 680, 0, 660, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 2551, 0, 661, 662, 664, 0, 663,
	665, 210, 211, 418, 212, 690, 213, 691, 692, 0,
	214, 0, 215, 0, 216, 0, 0, 683, 218, 0,
	219, 0, 0, 0, 625, 220, 222, 221, 223, 670,
	671, 648, 715, 0, 0, 0, 0, 0, 224, 225,
	693, 694, 695, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 681, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 677, 679, 0, 0, 378, 237,
	0, 234, 0, 717, 235, 696, 236, 697, 698, 699,
	700, 701, 0, 659, 0, 0, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 682,
	721, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 620, 0, 649, 678, 261, 702,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 672, 268, 269, 270, 271, 272,
	0, 273, 673, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 703, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 626, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 666,
	312, 299, 300, 313, 0, 314, 704, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 705, 319, 320, 674,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 706, 707, 0, 0, 332, 333, 675,
	676, 647, 334, 335, 2550, 337, 0, 0, 338, 339,
	340, 341, 667, 342, 0, 408, 343, 344, 345, 409,
	708, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 652, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 617, 618,
	0, 185, 186, 0, 187, 0, 0, 627, 0, 669,
	0, 0, 0, 630, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 668, 361, 362, 363, 0, 196, 680, 0,
	660, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 209,
	0, 661, 662, 664, 0, 663, 665, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 670, 671, 0, 715, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 681, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	677, 679, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 682, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	0, 0, 0, 678, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	672, 268, 269, 270, 271, 272, 0, 273, 673, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 666, 312, 299, 300, 313,
	728, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 674, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 675, 676, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 667, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 933,
	0, 936, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 2182, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 790, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 715, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 141, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 728, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 143, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 940, 410, 0, 0, 346, 0, 0, 0, 135,
	347, 348, 349, 350, 351, 603, 136, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 127,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 768, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	141, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	143, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 940, 410, 0,
	0, 346, 0, 0, 0, 135, 347, 348, 349, 350,
	351, 0, 136, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 762, 0, 1210, 0, 352, 0, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 768,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 141, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 143, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 940, 410, 0, 0, 346, 0, 0,
	0, 135, 347, 348, 349, 350, 351, 603, 136, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 762,
	0, 1210, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 141, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 143, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 940,
	410, 0, 0, 346, 0, 0, 0, 135, 347, 348,
	349, 350, 351, 1926, 136, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 127, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 768, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 761,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 762, 0, 767, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 768, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 762, 0, 767,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 768, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 762, 0, 767, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	1243, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 1741, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 2098, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	652, 641, 642, 639, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 1213, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 684, 355, 685, 191, 686, 687, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 688, 689,
	363, 0, 196, 364, 0, 790, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 690, 213, 691, 692,
	0, 214, 0, 215, 0, 216, 0, 0, 683, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 648, 715, 0, 0, 0, 0, 0, 224,
	225, 693, 694, 695, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 696, 236, 697, 698,
	699, 700, 701, 0, 659, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 0, 0, 649, 390, 261,
	702, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 703, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 728, 314, 704, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 705, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 706, 707, 0, 0, 332, 333,
	406, 407, 647, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 708, 0, 506, 346, 182, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 178,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 177, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 175, 346,
	182, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 181, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 178, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 177, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 182, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 352, 0, 0,
	0, 181, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 178, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 177, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 182, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 181, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	990, 0, 936, 994, 0, 0, 0, 992, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 181, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 790, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 715, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 728, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 936, 994, 346, 0, 0, 992,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 790,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 714, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 715, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 716, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 718, 0, 378, 237, 0, 234, 0, 717, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 721, 246, 247, 722, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 723, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 725, 267, 726, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 727, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 728,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 936, 994, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 790, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 715,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 728, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 936, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 790, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 715, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 716, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 728, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	182, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 1665, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 1663, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 1707, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 1668, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 1705, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 1667, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 1706, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 182, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 1665, 196, 364, 0, 0, 1660, 197,
	198, 199, 0, 201, 202, 203, 200, 1663, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	1668, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 1659, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 1667,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	1666, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 911, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 768, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	774, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 776, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 768, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 770, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 772, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 768, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	437, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	436, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 435, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 182, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	1648, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 182, 2248, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 182, 2248,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 2245, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	182, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 768, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 1411, 346, 182, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 1409, 346,
	182, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 182, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 185, 186,
	1391, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 532, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 969, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 534, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	529, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	1267, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 1266, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 532, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 969, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 534, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	529, 404, 405, 0, 0, 332, 970, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	532, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 523, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 534, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	953, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 529, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 929, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 928, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	926, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 925, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 922, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 921, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	919, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 918, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 915, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 914, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 182,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 185, 186, 903, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 901, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 900,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 897, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 895, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 890, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 892, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 780, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 782,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 778, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 532, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 523, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 522, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 534, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 524,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 525, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 529, 404, 405,
	0, 0, 332, 527, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 514, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 515, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 512, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 504, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 460, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 182, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 182, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 1973, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	182, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 1971, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 182, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 1960, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 182, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 515, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 182, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 1277, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 0, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 182, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 744, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	182, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 0, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 0, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 0, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 1064, 1065, 0, 1094, 1095, 1096,
	1104, 1105, 1106, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 1066, 0, 0, 0, 0, 0, 1086, 1097,
	0, 0, 0, 0, 0, 1083, 1067, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 1089, 1090, 1091, 1092, 0, 0, 0,
	0, 0, 1072, 0, 0, 0, 0, 1868, 1869, 0,
	1886, 1887, 1888, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2070, 0, 1101, 1109, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 0, 0, 0,
	0, 1072, 0, 0, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1883, 1099, 0, 1101, 1109, 0, 0, 0, 1087,
	0, 0, 0, 1868, 1869, 0, 1886, 1887, 1888, 0,
	0, 0, 0, 1107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1098, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1874, 0, 1883, 0, 0,
	1093, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 1889, 0, 1093,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 1874, 1884, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 1064, 1065, 0, 1094, 1095,
	1096, 1104, 1105, 1106, 0, 1890, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 1108, 1100, 1889, 0, 1078, 1079, 1085, 1084, 1080,
	1081, 1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 1066, 0, 0, 0, 0, 1884, 1086,
	0, 1860, 0, 0, 0, 0, 1083, 0, 1885, 0,
	0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 0, 0, 0, 2520, 0, 0, 0,
	0, 0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097,
	0, 0, 0, 1072, 0, 0, 1067, 0, 0, 1108,
	0, 0, 0, 0, 1885, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1109, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 1086, 1880, 1881,
	1882, 0, 0, 0, 1083, 1107, 0, 1879, 1877, 1878,
	1870, 1871, 1872, 1873, 1875, 1876, 0, 0, 40, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 41,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0,
	0, 1072, 0, 0, 1880, 1881, 1882, 0, 0, 51,
	0, 0, 0, 1879, 1877, 1878, 1870, 1871, 1872, 1873,
	1875, 1876, 0, 0, 1101, 1109, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 0, 0, 1107, 0, 64, 1088, 486, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 1102, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084,
	1080, 1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 0, 0, 0, 0, 2471, 0,
	1064, 1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 68,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 70, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 141, 0, 1086, 0, 0, 0, 0, 0,
	485, 1083, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 143, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 0, 0, 0, 2425, 0, 1064, 1065,
	0, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089,
	1090, 1091, 1092, 0, 1097, 0, 0, 0, 1072, 142,
	0, 1067, 0, 0, 1108, 0, 0, 135, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	0, 1101, 1109, 0, 0, 0, 1066, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 127, 0, 1083,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 1090, 1091,
	1092, 0, 1098, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1109, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 1102,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 1100, 0,
	0, 1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088,
	1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0,
	0, 0, 0, 2395, 0, 1064, 1065, 1102, 1094, 1095,
	1096, 1104, 1105, 1106, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1078,
	1079, 1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0,
	0, 2390, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097,
	0, 0, 0, 1072, 0, 0, 1067, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1109, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1083, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1109, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 1102, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084,
	1080, 1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 0, 0, 0, 0, 2386, 0,
	1064, 1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 0, 0, 0, 2324, 0, 1064, 1065,
	0, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089,
	1090, 1091, 1092, 0, 1097, 0, 0, 0, 1072, 0,
	0, 1067, 0, 0, 1108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1109, 0, 0, 0, 1066, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 1083,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 1090, 1091,
	1092, 0, 1098, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1109, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 1102,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 1100, 0,
	0, 1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088,
	1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0,
	0, 0, 0, 2290, 0, 1064, 1065, 1102, 1094, 1095,
	1096, 1104, 1105, 1106, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1078,
	1079, 1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0,
	0, 2289, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097,
	0, 0, 0, 1072, 0, 0, 1067, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1109, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1083, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1109, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 1102, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084,
	1080, 1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 0, 0, 0, 0, 2254, 0,
	1064, 1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 0, 0, 0, 2101, 0, 1064, 1065,
	0, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089,
	1090, 1091, 1092, 0, 1097, 0, 0, 0, 1072, 0,
	0, 1067, 0, 0, 1108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1109, 0, 0, 0, 1066, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 1083,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 1090, 1091,
	1092, 0, 1098, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1109, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 1102,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 1100, 0,
	0, 1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088,
	1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0,
	0, 0, 0, 2077, 0, 1064, 1065, 1102, 1094, 1095,
	1096, 1104, 1105, 1106, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1078,
	1079, 1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0,
	0, 1527, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097,
	0, 0, 0, 1072, 0, 0, 1067, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1109, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1083, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0,
	0, 1072, 2583, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1109, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 1102, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2582, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084,
	1080, 1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 0, 0, 1830, 0, 0, 0,
	1064, 1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 0, 0, 0, 0, 0, 1064, 1065,
	0, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089,
	1090, 1091, 1092, 0, 1097, 0, 0, 0, 1072, 1803,
	1900, 1067, 0, 1899, 1108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1109, 0, 0, 0, 1066, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 1083,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1087, 1804, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 1090, 1091,
	1092, 0, 1098, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1109, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 1102,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 1100, 0,
	0, 1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088,
	1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 1624,
	0, 0, 0, 0, 0, 1064, 1065, 1102, 1094, 1095,
	1096, 1104, 1105, 1106, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 1623, 0, 0, 1067, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1078,
	1079, 1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0,
	0, 0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097,
	0, 0, 0, 1072, 0, 0, 1067, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1109, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1083, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1109, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 1102, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 600, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084,
	1080, 1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 0, 0, 0, 0, 0, 0,
	1064, 1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 0, 0, 0, 0, 0, 1064, 1065,
	0, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089,
	1090, 1091, 1092, 0, 1097, 0, 0, 0, 1072, 0,
	0, 1067, 0, 0, 1108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1109, 0, 0, 0, 1066, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 1083,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 1090, 1091,
	1092, 0, 1098, 0, 0, 0, 1072, 0, 0, 0,
	0, 1906, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1109, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 1102,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2081, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 1100, 0,
	0, 1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088,
	1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0,
	0, 0, 0, 0, 0, 1064, 1065, 1102, 1094, 1095,
	1096, 1104, 1105, 1106, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 1901, 0, 0, 1067, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1078,
	1079, 1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0,
	0, 0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097,
	0, 0, 0, 1072, 0, 0, 1067, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1109, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1083, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1109, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 1102, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1866, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084,
	1080, 1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 0, 0, 0, 0, 0, 0,
	1064, 1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	1859, 0, 0, 1067, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 0, 0, 0, 0, 0, 1064, 1065,
	0, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089,
	1090, 1091, 1092, 0, 1097, 0, 0, 0, 1072, 0,
	0, 1067, 0, 0, 1108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1109, 0, 0, 0, 1066, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 1083,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 1090, 1091,
	1092, 0, 1098, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1109, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 1088, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 0, 0, 1099, 0, 0, 1102,
	0, 0, 0, 1087, 0, 0, 1067, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 1066, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 1100, 0,
	0, 1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088,
	1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 1102, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 40, 0, 0, 0,
	0, 0, 0, 0, 1101, 1109, 0, 41, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 1107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 46, 1100, 51, 1087, 1078,
	1079, 1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 55, 0,
	0, 0, 57, 0, 0, 0, 63, 0, 0, 133,
	0, 0, 0, 64, 0, 123, 65, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 66, 1093,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 0, 1064, 1065, 0, 1094, 1095, 1096,
	1104, 1105, 1106, 0, 0, 1064, 1065, 0, 0, 0,
	0, 1104, 1105, 1106, 0, 0, 0, 1067, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 1066, 0, 1083, 0, 68, 0, 1086,
	0, 1100, 0, 69, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 76, 128, 70, 0, 71, 0, 72, 0,
	134, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	141, 0, 0, 1089, 1090, 1091, 1092, 0, 84, 0,
	0, 104, 1072, 0, 1089, 1090, 1091, 1092, 0, 0,
	131, 0, 0, 1072, 0, 0, 0, 0, 0, 0,
	143, 0, 0, 0, 0, 1101, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1109, 0, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 0, 1099, 0, 0, 135, 0, 0, 0, 1087,
	0, 0, 136, 1099, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 4, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 1319, 1349, 1308, 1340, 1339, 0, 0, 1310,
	1309, 0, 0, 0, 0, 0, 1351, 1350, 0, 0,
	0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080,
	1081, 1082, 1103, 1100, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 1103, 0, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 1345, 0, 1337, 1336, 0, 0,
	0, 0, 0, 0, 0, 1322, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1334,
	1332, 1333, 0, 0, 0, 0, 0, 0, 1330, 1319,
	1349, 1308, 1340, 1339, 0, 0, 1310, 1309, 0, 0,
	0, 0, 0, 1351, 1350, 0, 0, 1318, 0, 0,
	0, 0, 0, 0, 1323, 1321, 1324, 1325, 1326, 1327,
	1328, 0, 1348, 0, 0, 0, 0, 0, 0, 1312,
	1311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1345, 0, 1337, 1336, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 1314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 0, 1320, 0, 0, 0, 1334, 1332, 1333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 1318, 1452, 1450, 1451, 1454, 1453,
	0, 1323, 1321, 1324, 1325, 1326, 1327, 1328, 0, 1348,
	0, 0, 0, 0, 0, 0, 1312, 1311, 553, 0,
	579, 0, 0, 0, 1315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 1316, 0, 558, 0,
	0, 0, 0, 1314, 0, 1353, 0, 0, 0, 0,
	556, 0, 0, 0, 0, 1338, 0, 0, 1313, 1320,
	0, 0, 1346, 1347, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 0, 0, 0, 0, 559, 0, 0,
	0, 0, 0, 0, 1317, 565, 566, 0, 1331, 1352,
	575, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1315, 0, 0, 0, 0, 0, 578, 0, 0,
	0, 0, 1329, 1316, 0, 0, 0, 0, 0, 0,
	0, 0, 1353, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 1313, 0, 0, 0, 1346,
	1347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 1317, 0, 0, 0, 0, 1352, 0, 0, 569,
	0, 0, 0, 0, 564, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 567,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 572,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 573, 0, 0, 0, 577, 0,
	0, 0, 0, 583, 0, 0, 0, 0, 570, 574,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 576,
}
var sqlPact = [...]int{

	44383, -1000, -10, -1000, -1000, -1000, 160, -1000, -1000, -1000,
	-1000, 158, 157, 156, -1000, 153, 152, 151, 150, 149,
	147, 145, 143, 140, 139, 138, -1000, 135, -1000, -1000,
	-1000, -1000, 134, 123, 119, 118, 116, 112, 111, -1000,
	1298, 22696, 99, 98, 1493, -1000, 36812, 97, 95, 93,
	91, 989, 89, 88, 87, 26828, 1065, 1657, 86, 85,
	84, 83, 80, 1187, 36470, 4868, 2557, 1089, 1691, 36125,
	22351, 1690, 1743, 35780, -1000, -1000, 35435, 77, 68, 66,
	65, 64, -1000, -1000, 35090, 63, 62, 58, 55, 54,
	52, 50, 47, 44, 40, 37, 35, 33, 31, -1000,
	26, 25, 21, -1000, 45116, 20, 18, 17, 1088, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 895, 110, -1000, 950, 405, 2092, 8476,
	1022, 1017, 1008, 995, 997, 38864, 36812, 16, -85, 15,
	-1000, 2051, 632, 19877, 44383, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26483,
	26138, 34745, 34400, 6337, 746, -1000, -13, 23382, 36812, -1000,
	121, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15249, 14892, 554, 121, -1000, -1000,
	-1000, -1000, -1000, 34055, -1000, 36812, 33710, 33365, 1549, 33020,
	-1000, -1000, -1000, -1000, -1000, 32675, -1000, -1000, 1812, 1711,
	1699, 25793, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 32333, 31988, 31643, 31298, 30953, 528,
	-1000, -1000, -1000, 18097, -1000, -1000, -1000, -1000, 14, -1000,
	13, -1000, 12, 10, 8, 7, -1000, 5, 0, -1000,
	-2, -4, -1000, -5, -7, 30608, 846, 1260, -1000, -1000,
	-12, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36812,
	-1000, 15961, -1000, 526, -1000, 1683, -1000, 15961, -1000, 1237,
	-1000, -1000, -1000, -1000, -1000, 36812, -1000, -1000, -1000, -1000,
	-1000, -1000, 2192, 1183, 522, 30263, -1000, 1505, -1000, 610,
	804, -1000, -1000, -1000, 9544, 175, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1624, 23738, 1149, 1984, 1802,
	2190, 1424, 1795, 1786, 1776, 1750, 1742, 2188, 923, 2183,
	1762, 1015, 2182, 1724, 1302, 669, 2179, 1678, 1676, -1000,
	-1000, -1000, -1000, 951, -1000, -1000, -1000, 28196, -1000, -1000,
	796, 929, 950, -1000, -1000, -1000, 1488, 1950, 1950, 1950,
	2038, 303, 296, -1000, 110, -1000, 1631, -1000, 1159, -1000,
	-1000, -1000, -1000, -1000, 44098, -1000, -1000, 15961, 15961, 15961,
	15961, 15961, 1010, 553, -1000, 520, 519, 7763, -1000, -1000,
	2158, -1000, -1000, -1000, 317, -1000, -1000, 15961, 121, -1000,
	-1000, -1000, -1000, 516, 2171, -1000, 671, -1000, -1000, -1000,
	597, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1719, 515, 513, 512, -1000, 511, -1000, -1000, 506, 505,
	499, 497, 494, 493, 490, 489, 466, 465, 464, 463,
	458, 457, 453, 984, -1000, 630, -1000, -1000, 630, 630,
	-1000, 443, 443, 444, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 443, -1000, -1000, -1000, 593, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 452,
	1272, -1000, -1000, 1272, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 742, 38180, -17, 36812, -1000, 451, -17, -1000, -1000,
	450, -1000, 10968, 10968, -1000, -1000, -1000, -1000, -1000, 10256,
	2546, -1000, 3044, -172, 314, 590, -1000, 18809, 21651, -1000,
	-1000, 1347, 1842, 826, -1000, 953, 1835, 514, -1000, 1259,
	-1000, 835, 1830, -125, 1729, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 24080, 23382, -13, -28, -1000, -1000, -1000, 5981,
	44098, -1000, 44098, -1000, 823, 20587, 121, -1000, -1000, -1000,
	-1000, 449, 1351, 1278, 618, -1000, 331, -1000, 29918, 618,
	1350, -1000, -1000, -1000, 28196, -1000, 36812, -1000, 36812, -1000,
	878, -1000, 38522, 126, 1829, -1000, -1000, 126, 1823, -1000,
	120, 1816, -1000, -1000, 1335, 1808, -1000, -28, 1803, -1000,
	-1000, 15961, -33, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	632, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 29573, 23039, 1157, 435, 44098, 2079, 44941,
	24080, 44098, 23039, -1000, -1000, 36812, -1000, 15961, -1000, 2078,
	1483, -18, -1000, -1000, -1000, -1000, -1000, 1384, 1419, 745,
	1238, 9544, 9544, 1903, -1000, 170, 6337, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 29228, -1000, -1000, -1000, 1191,
	36812, -1000, -1000, 1717, -1000, 23039, 36812, -1000, 36812, -1000,
	36812, -1000, 36812, -1000, 36812, -1000, -1000, -1000, -1000, -1000,
	4503, -1000, 1707, -1000, -1000, 36812, -1000, 1377, -1000, -1000,
	-1000, 28886, 28541, -1000, 977, 795, -1000, -1000, 127, -1000,
	24080, 2020, 607, -1000, 1488, 1368, 1689, 659, 1266, 1450,
	14535, 1490, 15961, 110, -1000, -1000, 110, 110, 9188, -1000,
	-1000, -1000, 36812, -1000, 44844, 44941, 6337, 759, 15961, 15961,
	15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961,
	15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961,
	15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961,
	1320, 15961, 736, 15961, 15961, 15961, 15961, 1406, 1139, 441,
	1109, -1000, 2115, 2115, 2115, 44263, 44263, 421, 553, -1000,
	15961, -1000, 79, 15961, 296, 41848, -14, 7407, -1000, -1000,
	-1000, 14179, 628, 44098, 121, 6693, -1000, 2154, 894, 1698,
	1583, 448, 551, 548, 546, 508, 15961, 15961, 13823, 13466,
	13109, 16673, 12752, 15961, 8119, 15961, 15961, 15961, 15961, 12395,
	12038, -1000, 446, -1000, -1000, -1000, -1000, 2153, -1000, -1000,
	2152, -1000, 758, 755, 2150, -1000, -18, -1000, 38180, -1000,
	36812, -17, 2076, 36812, -1000, 125, -1000, 42875, -1000, 125,
	-34, -1000, 1516, 1495, 20232, 1517, 1141, 1141, 1141, -1000,
	445, 543, 590, 5250, 11681, -1000, 27170, 1153, 193, 295,
	18453, 2546, -1000, 36812, -46, 1035, -1000, 25448, 2015, 2005,
	1924, 28196, 2055, 79, 1956, 1670, 735, 28196, 1951, 734,
	2031, 79, 1662, 732, 36812, 6337, 1937, 588, -1000, 36812,
	-1000, -1000, -1000, 1660, -39, -1000, -1000, 25106, 2074, 1801,
	-1000, 1278, -1000, 933, 933, 1487, 933, 933, 933, -1000,
	-1000, 1000, -1000, 2073, 36812, 1235, 1331, -1000, -1000, 777,
	1794, 623, 485, 2067, 485, 20941, -1000, 36812, -1000, 36812,
	-1000, -1000, 36812, -1000, 36812, -1000, 36812, 36812, -1000, 36812,
	36812, -48, 44098, 40035, 24764, 731, -1000, 647, 25106, 329,
	-50, -1000, 893, -1000, -1000, -1000, -1000, 396, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 444, 984, 443, 443, 443, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 593, -1000, -1000, 630,
	630, 630, -1000, -1000, -66, -1000, 1659, 608, -53, 677,
	-18, -1000, 1272, -1000, 1277, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2170, -1000,
	2132, -1000, -1000, 2148, -19, -1000, -19, -1000, 6337, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 36812, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3648, -1000, -1000, -1000, -1000,
	-1000, -1000, 36812, 36812, 36812, -1000, 28196, -1000, 1701, -1000,
	1963, 1368, 1689, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 44098, -1000, 401, -1000, -1000, 44098, 1240, 1536, -1000,
	1536, -21, -1000, 42598, 1489, 36812, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 605, 507, 507,
	859, 859, 859, 859, 2131, 361, 1216, 488, 44555, 44555,
	44555, 44555, 44555, 44555, 44555, 44555, 1206, 351, 351, 1206,
	1206, 1206, 1206, 1206, 44555, 44555, 44555, 44263, 3826, 196,
	15961, 15961, 728, 1136, 441, 196, 15961, 196, 196, 196,
	196, -1000, 944, -1000, -1000, -1000, -1000, 1658, 440, 16673,
	16673, -1000, -1000, -1000, 7763, 17029, -1000, -1000, -1000, -1000,
	438, 15961, -1000, 42125, -224, 291, -88, -1000, 15961, 538,
	-108, -1000, 871, -1000, 15961, -1000, -20, 15961, 15961, 15961,
	279, -1000, 270, -1000, 727, -1000, 725, 722, 720, -1000,
	437, 1138, 434, 433, 15961, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 44000, 39554, 269, -1000, 1656, -88, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 265, -1000, 264, -1000,
	43723, -88, 263, 39743, -1000, 16673, 16673, 16673, 7763, 432,
	262, -1000, 42500, -1000, 43625, 11324, 11324, 11324, 260, 43348,
	15961, -88, 4816, 4687, 4259, -55, -56, -1000, -86, -1000,
	2143, -92, 259, 603, 602, 257, -1000, -1000, 431, -101,
	623, 10968, 19521, 6337, -1000, 623, 10256, -1000, 20232, 20232,
	1308, 1494, 20232, -1000, -1000, -1000, -1000, 27170, 540, 590,
	27170, -1000, 2140, 1441, 256, -1000, -1000, -1000, 36812, 430,
	-1000, 590, 250, 971, 36812, 36812, 36812, -1000, -1000, 1330,
	37838, 1329, 44941, 36812, -1000, 428, 427, 1486, 1475, 36812,
	36812, 37496, 37154, 36812, 1006, 79, -1000, 601, 426, 36812,
	948, 600, 36812, 79, -1000, 425, 36812, 946, -1000, 599,
	1569, 1296, -1000, 821, 1641, 36812, 248, -102, -27, 44941,
	-1000, -1000, -1000, -1000, -1000, 36812, 486, 36812, 79, 36812,
	-1000, -1000, -1000, 2139, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2164, 79, 36812, 1790, 1851, 572, 36812, 1450, 15961,
	1093, -1000, 19165, 638, 36812, 922, 124, -1000, -1000, -1000,
	583, 36812, -1000, -1000, 126, 126, -1000, 120, 1335, -28,
	-1000, 15961, -1000, -1000, 36812, 24080, -109, -1000, -1000, 44941,
	-1000, 552, 707, -1000, 2138, 617, 24080, 36812, 9544, 9544,
	-1000, 1523, -1000, -1000, 932, -1000, 983, -1000, -1000, -1000,
	-1000, 9544, -1000, -49, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1173, -1000, -1000, -1000, 1240, -1000, 15961, -1000, -1000,
	-1000, 9188, -1000, -1000, -1000, 36812, -170, 15961, 196, 196,
	15961, 16673, 16673, -1000, 196, -1000, -1000, -1000, -1000, -1000,
	1628, 422, 15961, 44941, 39677, 4289, -111, -1000, 15961, -32,
	-1000, 15961, -1000, 41750, -1000, -1000, 550, 1805, -1000, 15961,
	43250, 239, 10612, -1000, 42973, -22, -22, -1000, 2133, 1313,
	1250, 1048, 900, 2137, -1000, 21296, 624, 1156, 41473, 44844,
	44941, -1000, 15961, -1000, -1000, 1626, 15961, -1000, 44844, 44941,
	16673, 16673, 16673, 16673, 16673, 16673, 16673, 16673, 16673, 16673,
	16673, 16673, 16673, 16673, 16673, 16673, 16673, 16673, 16673, 1425,
	16673, 2109, 2109, 2109, -35, 15961, -1000, 1600, 1626, 15961,
	15961, 44941, 238, 237, 236, -1000, 15961, -88, 15961, 15961,
	15961, -1000, -1000, -1000, 235, -1000, 2120, -1000, -1000, -1000,
	-1000, 329, -1000, 1582, -1000, -110, -1000, 2546, -1000, 1582,
	-1000, -1000, 1308, -1000, 412, 15961, 20232, -1000, 537, -1000,
	-112, -1000, 27170, -1000, 535, -210, -1000, 582, -1000, 590,
	411, 36812, 27170, -1000, -1000, -1000, 719, 716, 1782, -1000,
	1323, -1000, 642, -1000, 1018, 15961, 17741, 409, 408, 1091,
	-1000, 1777, 1335, 1770, 1335, -1000, -46, 952, -1000, 22006,
	15961, -1000, 715, 22006, -1000, -1000, 15961, -1000, 711, 22006,
	617, 1616, 799, -1000, 817, -1000, 1506, -1000, 25106, 406,
	36812, 404, -1000, 403, -1000, -1000, 402, 36812, 1426, 572,
	24422, -1000, 618, 922, -1000, 44098, -1000, 922, 8832, 1930,
	-117, -1000, -1000, -1000, 623, 20941, 20232, 10256, -118, -1000,
	-1000, -1000, -1000, 44098, -49, 1907, 1907, -1000, 2116, -1000,
	534, 232, -1000, 27854, -1000, -49, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 36812, 6337, 36812, 36812, 1174, 41375, -1000,
	1954, 6337, 2091, 196, 480, 332, 15961, 44941, 44544, -119,
	15961, 15961, -1000, 230, 15961, 531, 44098, -1000, -1000, -1000,
	44098, 15961, 2111, 15961, 229, 228, 227, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 224, -1000, -1000, 39206, 15961,
	221, -1000, 219, 218, 44098, 1600, 44098, -1000, -1000, 627,
	627, 915, 915, 915, 915, 2109, 2463, 251, 1087, 1177,
	1177, 1177, 1759, 423, 423, 1177, 1177, 1177, 1608, 1429,
	399, 1127, 15961, 217, -1000, -1000, 44098, 44098, 216, -1000,
	-1000, -1000, -88, 293, 41098, 41000, -1000, 214, 210, 1578,
	2034, -1000, 20232, 1578, -1000, 36812, 44098, -1000, -172, -1000,
	2114, -1000, -1000, 1441, -1000, 5620, 27170, 36812, -128, -1000,
	36812, 36812, 36812, 1751, -1000, 1902, -1000, 40723, -131, -1000,
	346, 1977, 15961, -1000, -1000, 398, 17741, 36812, -1000, 1525,
	1469, 670, 36812, -1000, 36812, -1000, 36812, 36812, 36812, -1000,
	397, 121, -134, 36812, -1000, -136, 36812, -1000, -1000, 24080,
	751, -1000, 1119, 1557, -1000, 17741, 395, 36812, 25106, 2063,
	17741, 1233, 1435, 572, 24422, -1000, 777, -1000, -1000, -67,
	-1000, 379, 79, 922, -1000, -73, -1000, 581, 1892, -1000,
	1888, 530, -1000, -1000, -74, 394, -1000, 580, 578, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1954, 15961, 15961, 44544,
	-139, -1000, 196, 196, -1000, 40625, -1000, 44098, -1000, 42973,
	-1000, -1000, -1000, -1000, 1107, -1000, 40348, -1000, -1000, -1000,
	-1000, 16673, 1607, 391, 44941, 40250, -1000, -1000, 15961, -1000,
	-1000, -1000, -1000, 621, 15961, 15961, 2546, 621, -141, 590,
	-1000, -1000, -1000, 2105, -1000, -142, -1000, -1000, -1000, -1000,
	36812, -1000, 36812, -1000, 6337, 36812, 1597, 1306, -1000, -1000,
	1443, 388, 16673, 36812, -1000, 1050, 17741, 1954, 121, 6337,
	1954, 39973, 6693, -144, -147, 1304, -1000, 1281, 15961, -1000,
	44941, 1335, 1335, -1000, 710, 705, 15961, 703, -1000, 688,
	-1000, -75, 22006, -1000, -1000, 2032, 1124, -149, 17741, -150,
	204, 79, -152, 36812, -1000, 572, 24422, -1000, 1851, 1860,
	36812, 1921, -1000, -1000, 385, 381, 376, -1000, 27512, 27512,
	24080, 24080, -1000, 196, 196, -1000, -1000, 203, 1156, 2014,
	-1000, 708, 16673, 44941, -157, -1000, 39875, -1000, 36812, 44098,
	-88, -1000, -1000, 27170, 509, -1000, -1000, 1775, -1000, -1000,
	36812, 1312, -1000, -1000, 15961, 1127, 372, 1506, 371, -1000,
	-1000, -1000, -1000, -1000, -1000, 1977, -20, -1000, 940, -1000,
	-1000, 44098, 1959, -1000, -1000, 36812, 36812, -22, 366, 364,
	-1000, 1192, 36812, 1050, -159, -1000, 1506, -1000, 1050, 360,
	24422, -1000, 1426, 779, -160, 36812, -1000, -1000, 7049, 24080,
	24080, -1000, -166, -1000, -1000, -1000, 974, 15961, 708, -168,
	-1000, -1000, -82, -1000, 2061, -1000, -1000, -1000, -1000, 1746,
	39593, 1366, 36812, -1000, 36812, 1954, 201, 36812, 645, 6337,
	-1000, -1000, 200, 15961, 15961, 349, 335, 334, 1506, 1050,
	-1000, 1506, 17741, -1000, 1435, 858, -1000, 623, -1000, -173,
	-174, -1000, 195, 16317, 16317, -88, -1000, 36812, 333, 1735,
	-1000, 1186, 1040, 194, -175, -1000, -1000, 331, -1000, 15961,
	-1000, 2111, -183, -185, 36812, 36812, 36812, -1000, 1506, -1000,
	-191, -1000, 20941, -1000, 617, 617, -1000, -1000, -1000, 17385,
	1123, 913, 42223, -1000, -1000, -1000, 36812, -1000, 1211, 1193,
	891, -1000, -1000, -1000, -1000, -1000, 1366, 44098, -1000, -1000,
	-192, -193, -194, -1000, 1050, -182, -1000, -1000, 2084, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1870, -1000, 656, 1185,
	1185, 1186, 318, 316, 1324, 1506, -1000, 15605, -1000, 2095,
	-1000, -1000, 1447, -1000, -1000, 1037, 1024, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 192, 6337, 179, 6337, -1000,
	637, -1000, 636, 310, 1415, -47, 9900, 713, 359, -98,
	-1000, -199, -1000, 44098, -1000, -1000, 309, -1000, 9900, 1037,
	-1000, 9900, 9900, -200, -1000, -1000, -201, -1000, -51, 1024,
	-99, -1000, -1000, 1024, -1000,
}
var sqlPgo = [...]int{

	0, 2657, 2656, 1727, 2070, 2650, 2649, 2644, 2643, 2642,
	2639, 2638, 2637, 2636, 2634, 2633, 2632, 2628, 2625, 2624,
	2623, 2618, 2616, 2615, 2046, 2614, 2042, 2610, 2609, 2605,
	2604, 2603, 2602, 2038, 2601, 2598, 2597, 2596, 2594, 2593,
	2592, 2032, 2590, 2013, 2589, 2586, 2585, 2583, 2582, 1977,
	2581, 78, 114, 1973, 2580, 2578, 1906, 1904, 1900, 2576,
	1858, 2573, 2572, 1850, 1844, 2571, 87, 2570, 2568, 2567,
	1842, 1835, 2566, 2565, 2564, 158, 2563, 1824, 2556, 2550,
	2549, 2534, 2533, 2532, 2531, 2529, 2526, 2523, 2522, 2521,
	2515, 2510, 2508, 2507, 2500, 2497, 2496, 164, 2495, 2491,
	1786, 1779, 2486, 2484, 39, 28, 15, 55, 21, 155,
	2862, 142, 2481, 2479, 2477, 2472, 2471, 2470, 34, 104,
	102, 2469, 125, 2466, 2465, 63, 29, 22, 20, 2455,
	94, 2452, 2446, 2368, 30, 2435, 2434, 135, 2432, 25,
	38, 152, 160, 156, 117, 122, 2429, 2428, 2427, 73,
	120, 12, 4, 3, 6, 1, 2426, 2, 5, 2422,
	2421, 17, 84, 51, 2420, 27, 18, 2419, 2417, 133,
	2416, 52, 96, 1650, 105, 124, 1757, 98, 2414, 64,
	19, 61, 2413, 2412, 163, 40, 2407, 31, 80, 153,
	115, 2405, 54, 2403, 2400, 129, 165, 166, 130, 79,
	131, 139, 2396, 2395, 2390, 101, 2388, 119, 112, 2387,
	2375, 82, 2373, 97, 148, 2372, 147, 110, 2366, 2363,
	92, 2360, 127, 2359, 2358, 162, 157, 111, 13, 50,
	67, 11, 1642, 1631, 138, 86, 49, 41, 2357, 1180,
	1153, 1349, 44, 106, 83, 48, 107, 46, 89, 146,
	37, 2355, 2353, 140, 2350, 2348, 2346, 2342, 2341, 103,
	2340, 2332, 35, 2329, 69, 59, 91, 93, 43, 143,
	132, 113, 159, 100, 2326, 81, 126, 2323, 53, 2319,
	2318, 1839, 118, 2317, 2312, 2309, 1750, 1667, 1546, 824,
	2307, 2306, 1433, 60, 2304, 2302, 90, 2300, 116, 108,
	95, 150, 145, 62, 2299, 121, 58, 2298, 66, 32,
	0, 558, 292, 2297, 128, 72, 2294, 2293, 2289, 2247,
	36, 10, 7, 9, 16, 14, 123, 24, 2244, 2238,
	134, 75, 68, 2237, 161, 2235, 2232, 2230, 45, 2229,
	26, 2227, 23, 2224, 2222, 33, 8, 2221, 2217, 151,
	2216, 99, 2213, 1988, 2203, 154, 2202, 2201, 1748, 2196,
	57, 109,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 120, 120, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 117, 117, 122, 122, 122, 124, 124,
	121, 121, 116, 116, 24, 24, 64, 64, 107, 57,
	57, 57, 308, 308, 309, 309, 103, 103, 104, 104,
	104, 104, 105, 105, 106, 106, 106, 32, 32, 32,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 41, 41, 42, 42, 42,
	42, 42, 42, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 48, 48, 48, 46, 46, 46,
	45, 45, 45, 44, 44, 44, 47, 47, 47, 175,
	175, 174, 174, 178, 178, 49, 49, 49, 49, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 52, 52, 52, 52, 52,
	52, 52, 277, 277, 276, 50, 50, 251, 251, 53,
	53, 206, 206, 54, 54, 54, 54, 54, 55, 55,
	65, 65, 349, 349, 349, 353, 353, 354, 354, 355,
	355, 355, 355, 355, 355, 355, 351, 351, 60, 60,
	60, 60, 61, 61, 61, 62, 62, 102, 102, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 29, 30,
	71, 71, 71, 73, 70, 70, 70, 72, 72, 72,
	72, 74, 74, 75, 75, 75, 75, 75, 76, 76,
	302, 300, 300, 301, 301, 147, 147, 147, 147, 147,
	148, 148, 148, 307, 307, 307, 307, 307, 307, 306,
	306, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 89, 89,
	89, 97, 97, 97, 97, 97, 97, 97, 78, 78,
	83, 83, 83, 83, 83, 79, 79, 84, 84, 85,
	85, 86, 86, 86, 86, 86, 86, 80, 80, 80,
	80, 88, 88, 88, 88, 87, 87, 93, 93, 93,
	93, 93, 93, 90, 90, 90, 90, 91, 91, 91,
	94, 94, 94, 94, 81, 81, 82, 82, 95, 95,
	96, 96, 96, 96, 96, 92, 92, 92, 350, 350,
	352, 352, 58, 58, 36, 36, 37, 37, 149, 149,
	150, 150, 230, 230, 230, 230, 151, 151, 123, 123,
	123, 152, 152, 153, 153, 154, 154, 154, 156, 156,
	157, 157, 158, 158, 158, 155, 155, 155, 229, 318,
	318, 319, 319, 319, 319, 319, 319, 320, 320, 320,
	320, 320, 320, 320, 316, 316, 317, 314, 314, 315,
	315, 315, 315, 356, 356, 228, 228, 161, 161, 321,
	321, 321, 321, 322, 322, 322, 322, 322, 325, 324,
	323, 323, 323, 323, 323, 263, 263, 263, 40, 194,
	194, 193, 193, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 196, 99, 99, 38, 38, 129, 129, 39,
	39, 35, 35, 35, 210, 210, 165, 165, 268, 268,
	268, 140, 140, 118, 118, 118, 17, 13, 13, 13,
	13, 13, 13, 23, 23, 21, 21, 211, 211, 212,
	212, 59, 59, 63, 63, 68, 68, 98, 98, 98,
	98, 98, 98, 25, 25, 25, 25, 31, 31, 31,
	31, 67, 67, 358, 358, 136, 136, 136, 136, 137,
	137, 225, 225, 226, 226, 359, 359, 227, 227, 227,
	131, 130, 132, 132, 34, 34, 34, 125, 125, 126,
	126, 127, 127, 128, 128, 360, 360, 56, 56, 56,
	101, 101, 143, 143, 222, 222, 222, 224, 224, 223,
	223, 223, 192, 192, 192, 100, 100, 170, 170, 180,
	180, 181, 181, 274, 182, 182, 66, 66, 110, 110,
	108, 108, 108, 108, 108, 108, 108, 108, 109, 109,
	109, 111, 111, 111, 111, 111, 111, 111, 114, 114,
	114, 115, 115, 115, 113, 113, 331, 331, 331, 334,
	334, 330, 332, 332, 333, 333, 357, 357, 197, 197,
	197, 160, 159, 159, 163, 163, 162, 164, 164, 267,
	267, 267, 190, 190, 189, 189, 189, 189, 215, 215,
	213, 213, 214, 214, 218, 218, 219, 219, 219, 220,
	220, 221, 221, 188, 188, 247, 247, 217, 217, 216,
	112, 112, 112, 169, 169, 169, 171, 171, 237, 237,
	237, 238, 238, 236, 236, 236, 236, 269, 269, 269,
	269, 269, 269, 269, 269, 347, 347, 347, 348, 348,
	266, 266, 270, 270, 270, 270, 270, 270, 264, 264,
	264, 264, 265, 265, 275, 275, 200, 200, 200, 200,
	198, 198, 199, 199, 271, 271, 271, 271, 191, 191,
	272, 272, 272, 231, 231, 278, 278, 278, 296, 296,
	168, 168, 168, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 280, 280, 280, 280, 282, 282,
	282, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 295,
	295, 295, 295, 295, 283, 283, 290, 290, 291, 291,
	292, 293, 284, 284, 285, 285, 286, 287, 294, 294,
	294, 294, 298, 298, 288, 288, 288, 288, 288, 289,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 208, 208, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 241, 241,
	241, 241, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 326, 326, 326, 326, 326, 326, 326,
	326, 328, 328, 329, 329, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 335, 335, 336, 336, 338,
	338, 339, 339, 340, 341, 341, 341, 342, 343, 343,
	337, 337, 344, 344, 344, 345, 345, 346, 346, 346,
	346, 346, 253, 253, 254, 255, 261, 261, 261, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 138, 138, 138, 138, 138,
	177, 177, 176, 176, 250, 250, 248, 248, 252, 252,
	201, 201, 297, 297, 297, 297, 297, 297, 297, 202,
	202, 202, 209, 203, 203, 204, 204, 204, 204, 204,
	244, 245, 205, 205, 205, 246, 246, 256, 260, 260,
	259, 258, 258, 257, 257, 234, 234, 235, 235, 233,
	232, 185, 185, 184, 184, 183, 183, 361, 361, 262,
	262, 186, 186, 187, 179, 179, 273, 273, 273, 273,
	172, 172, 145, 145, 173, 173, 141, 141, 144, 144,
	142, 142, 142, 142, 166, 166, 167, 167, 139, 139,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 299, 299, 299, 249, 133, 133, 133, 134, 134,
	135, 135, 304, 304, 304, 305, 305, 305, 305, 303,
	303, 303, 303, 303, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 1, 2, 2, 7, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 1, 4,
	6, 6, 3, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 3, 1, 3, 3, 1, 1, 2, 1,
	1, 1, 1, 1, 3, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 1, 1, 1, 1, 1, 2, 2, 3, 3,
	4, 4, 3, 4, 4, 4, 3, 2, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 2, 3, 3, 3, 2, 3, 4, 3, 5,
	3, 4, 5, 2, 3, 3, 3, 4, 2, 3,
	4, 3, 3, 3, 4, 4, 4, 4, 2, 3,
	7, 7, 7, 4, 5, 5, 5, 5, 2, 0,
	2, 0, 3, 2, 8, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 1, 0, 9, 9, 6, 7, 5, 3, 5,
	1, 3, 1, 1, 1, 10, 11, 9, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 1,
	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 1, 4, 2, 4, 3, 3, 0, 6,
	3, 11, 14, 4, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 3, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 4, 4, 2, 3, 5, 5, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	2, 4, 4, 4, 2, 2, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	4, 5, 1, 0, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 1, 0, 2,
	2, 2, 3, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 6,
	3, 3, 1, 5, 5, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 3, 1, 1, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 3, 3, 1,
	3, 3, 1, 3, 3, 1, 1, 3, 3, 1,
	1, 6, 6, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 5, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 3, 1, 3, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 385, -4, -24, -26, -29, -32,
	-33, -54, -41, -42, -43, -53, -49, -55, -56, -57,
	-58, -50, -64, -63, -65, -68, -66, -59, -60, -69,
	-77, -98, -99, -100, -101, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 48, -30, 72, -34, -35, -36,
	-37, 74, -38, -39, -40, 95, -333, 99, -44, -45,
	-46, -48, -47, 103, 110, 113, 135, 146, 234, 240,
	261, 263, 265, 272, -108, -110, 259, -61, -62, -70,
	-71, -72, -73, -102, 285, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -88, -89, -90, -91, -92,
	-93, -94, -95, -96, 288, -25, -31, -67, 327, -11,
	-12, -15, -14, -16, -13, -20, -22, -19, -21, -23,
	-17, -18, -10, 112, -331, -111, -109, 382, 260, 336,
	35, 297, 62, 106, 267, 352, 359, -114, -112, -113,
	-115, 277, 344, 307, 386, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 2, 307,
	347, 88, 155, 245, -349, 2, -173, 307, 88, -142,
	-133, 375, 4, -310, -312, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 49, 56, 61, 62, 63,
	68, 65, 66, 67, 70, 72, 73, 76, 77, 78,
	86, 87, 89, 91, 95, 97, 99, 102, 103, 105,
	110, 112, 111, 113, 123, 124, 129, 131, 136, 142,
	143, 146, 147, 148, 156, 159, 161, 154, 171, 172,
	173, 177, 178, 179, 182, 181, 186, 187, 190, 191,
	194, 196, 199, 197, 200, 203, 201, 205, 206, 208,
	207, 213, 215, 216, 218, 221, 224, 227, 230, 231,
	232, 233, 234, 236, 238, 240, 242, 243, 244, 245,
	246, 248, 249, 251, 252, 253, 254, 255, 259, 257,
	258, 260, 261, 262, 263, 265, 267, 268, 270, 286,
	287, 298, 272, 273, 274, 275, 276, 281, 278, 279,
	282, 283, 285, 288, 290, 293, 296, 297, 299, 302,
	303, 300, 295, 306, 308, 309, 310, 311, 312, 313,
	314, 315, 322, 323, 327, 328, 329, 330, 333, 334,
	335, 336, 338, 341, 342, 343, 348, 353, 354, 355,
	356, 357, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 52, 53, 54, 57, 90, 92, 93, 109, 114,
	115, 125, 126, 127, 137, 139, 149, 150, 153, 160,
	162, 163, 164, 165, 166, 168, 175, 176, 184, 202,
	212, 214, 225, 229, 237, 239, 247, 269, 280, 291,
	292, 301, 304, 317, 318, 319, 324, 325, 340, 344,
	345, 385, 385, 2, 172, 244, -141, -133, 88, 385,
	385, 385, 385, 307, 2, 278, 337, 347, -210, 88,
	332, 385, 385, 385, -133, 240, 22, 2, 97, 159,
	335, 334, 22, 236, 279, 309, 311, 2, 385, 385,
	385, 385, 385, 2, 347, 307, 155, 88, 337, -133,
	2, -52, 2, 382, -51, -4, -33, -43, -53, -49,
	-24, -26, -41, -57, -56, -58, -60, -64, -63, -66,
	-70, -71, -77, -100, -101, 285, 112, -353, 2, 22,
	-354, -355, 74, 103, 135, 277, 159, 97, 334, 307,
	2, 172, 2, -133, 2, -349, 2, 172, 2, -353,
	2, -133, 2, -137, 2, 272, -133, 385, 385, 385,
	385, 385, 191, 56, 269, 282, -75, 323, -74, 317,
	-302, -76, 2, -174, 203, -133, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 2, -97, 282, 34, 56, 22, 61,
	89, 136, 155, 156, 178, 69, 70, 243, 191, 173,
	322, 179, 283, 308, 323, 74, 338, 312, 111, 4,
	88, 203, 284, 317, 385, 385, 385, -357, 2, 307,
	274, 288, -109, -111, -110, -162, -163, 331, 167, 108,
	223, -108, -110, 2, -331, -97, 282, 2, 56, 22,
	-300, 2, -262, 219, -239, 94, -241, 373, 374, 368,
	209, 358, -253, -243, -256, 109, 269, 382, -141, -242,
	388, 9, -328, -110, 29, -254, -255, 50, -133, 7,
	8, 5, 6, -139, -280, -249, -289, 326, 116, 211,
	-326, -327, 4, -310, -304, -281, -291, -285, -288, 168,
	59, 80, 81, 84, 82, 85, 284, 337, 51, 28,
	114, 115, 229, 237, 304, 324, 325, 149, 212, 150,
	57, 137, 184, 102, 37, 39, 41, 42, 52, 53,
	90, 92, 93, 125, 126, 127, 160, 162, 163, 164,
	165, 166, 214, 247, 291, 301, 318, 319, 345, -311,
	-292, -293, -286, -287, 75, 117, 134, 158, 151, 170,
	174, 185, 188, 198, 204, 226, 228, 266, 289, -294,
	-358, 2, 323, 323, 2, -358, 2, -358, 2, -136,
	2, 323, 320, -334, 248, -330, -133, -334, 385, 385,
	387, 385, -159, -160, 2, 22, 100, -187, 2, 382,
	-269, 2, 380, -271, -141, -110, -270, 382, 220, -3,
	2, -271, 149, -141, 2, -271, 149, -141, 2, -133,
	2, -144, 149, -141, -303, 4, -310, -312, -311, -313,
	59, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 50, 51, 55, 58, 60, 69, 74, 79, 80,
	82, 81, 83, 84, 85, 94, 96, 98, 100, 101,
	104, 106, 108, 116, 118, 130, 132, 133, 135, 138,
	140, 152, 155, 157, 167, 169, 180, 183, 189, 192,
	193, 209, 210, 211, 217, 219, 220, 222, 223, 235,
	241, 250, 264, 277, 284, 294, 305, 307, 316, 320,
	321, 326, 331, 332, 337, 339, 346, 347, 349, 350,
	351, 352, 320, 387, -173, -166, -133, -233, -232, 384,
	-239, 2, -239, 2, 133, 382, -184, -185, -232, -233,
	2, -174, 149, -174, -133, 2, -174, 2, 155, -133,
	149, 2, -133, 22, 133, 2, 169, 2, 169, 2,
	-272, 2, -271, -175, 149, 2, -174, -175, 149, 2,
	-145, 149, 2, -144, -133, 149, 2, -166, 149, 2,
	-206, 382, -277, 2, -276, -305, 4, -310, -312, -311,
	344, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 282, 219, 387, -174, -239, -251, 382,
	133, -239, 219, -133, 2, 286, 2, 382, -75, 54,
	323, -226, 2, -227, -130, -131, -132, 171, 242, 246,
	357, 320, 363, 133, -300, -178, 384, -97, 2, -308,
	2, -306, 9, -305, 5, 286, 2, 243, 283, 56,
	133, 2, 2, -350, 2, 219, 133, 2, 133, 2,
	133, 2, 133, 2, 133, 2, 2, 243, 283, 2,
	130, 2, 322, 2, 2, 133, 2, 171, 242, 298,
	2, 307, 347, 2, 133, 133, 357, 2, -191, -271,
	307, 357, 22, -162, -163, -216, -189, 130, -213, -214,
	189, 118, 217, -197, 22, 100, -197, -197, 44, 383,
	383, -97, 286, 2, 10, 11, 58, 33, 373, 374,
	375, 376, 128, 377, 378, 371, 372, 370, 361, 362,
	365, 366, 367, 71, 364, 363, 64, 195, 271, 119,
	120, 121, 122, 256, 13, 14, 15, 26, 222, 188,
	358, 151, 289, 368, 16, 17, 18, 170, 36, 152,
	-138, -146, -239, -239, -239, -239, -239, 228, -183, -234,
	380, -110, 382, 382, -110, -239, -176, 382, 7, -110,
	-248, 380, -257, -239, -184, 382, 5, 382, 5, -335,
	353, 130, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 239, -298, 348, -298, -298, -282, 382, -282, -283,
	382, -282, 354, 359, 382, -225, -226, -225, 320, -137,
	387, -334, -167, 382, -187, -179, -273, -239, 375, -179,
	-186, -262, 75, -200, 174, 204, 134, 185, 266, 158,
	7, -52, -236, 388, 382, 375, -266, 359, -110, -270,
	382, -269, -141, 382, -120, 257, -119, 21, 23, 103,
	342, 109, 295, 313, 112, 273, 257, 109, 112, 257,
	295, 313, 273, 257, 109, 388, 112, -308, -142, 387,
	-303, 375, 299, 383, -172, -141, -185, 382, -161, 209,
	-194, -193, -195, 147, 197, 206, 198, 297, 47, 86,
	-129, -332, 352, -161, 382, -134, 149, 2, -133, -332,
	209, -272, -143, -141, -143, 285, -133, 30, -122, 387,
	49, 262, 109, -122, 109, -122, 387, 109, -122, 109,
	109, -176, -239, 383, 387, -349, -355, 74, 382, 30,
	-250, -278, -279, -281, -290, -284, -288, -289, 40, 46,
	45, 176, 175, 314, 202, 280, 292, 340, 153, 38,
	218, 161, 4, 160, 162, 163, 164, 165, 166, 291,
	37, 247, 126, 127, 125, 102, 93, 92, 214, 42,
	41, -292, -293, -286, -287, 90, 318, 319, 168, 39,
	53, 52, 345, 301, -309, -308, -349, -302, -176, 30,
	-226, 2, -359, 387, 187, -148, 194, 208, 142, 220,
	355, -307, 5, 4, -249, -263, 94, 191, -289, 8,
	374, -299, 7, 373, -301, -300, -301, 78, 384, -303,
	-174, 22, 287, 2, -302, -352, 130, -349, -302, -302,
	-302, -302, -302, 282, -52, 130, -133, 187, -302, 2,
	-302, 2, 307, 155, 307, -122, 387, -308, 65, 66,
	357, -216, -189, -190, -189, -217, -216, 334, -214, -213,
	-218, -239, 22, -221, 124, 205, -239, -241, -109, -109,
	-109, -164, -267, -239, 241, 155, -302, -296, -278, -295,
	252, 253, 251, 255, 254, -278, -303, 317, -239, -239,
	-239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
	-239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
	-239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
	188, 151, 289, 36, 152, -239, 320, -239, -239, -239,
	-239, 201, 209, 211, 326, 116, 333, 100, 215, -361,
	305, 32, -246, -110, 382, -261, 27, 294, 22, -253,
	269, 382, -234, -239, -235, -177, -176, 383, 387, -177,
	-252, -248, -260, -259, 349, 383, -176, 346, 22, 100,
	375, 2, 7, -207, 356, 200, 91, 143, 199, -208,
	276, -336, 123, 138, 382, 383, 2, 383, 2, 383,
	2, 383, 2, -239, -239, -201, 2, -297, -176, 4,
	356, 200, 91, 143, 199, 276, -201, 2, -202, 2,
	-239, -176, -203, -240, -241, 373, 374, 368, 382, 269,
	-204, 2, -239, -177, -239, 43, 183, 321, -205, -239,
	133, -176, -239, -239, -239, -176, -176, 2, -176, 2,
	382, 7, 7, 317, 317, 7, -137, -330, 30, -166,
	-169, 387, 133, 30, 4, -169, 387, 383, 174, 174,
	-269, -200, 174, -198, 226, -198, -198, -347, 382, 381,
	-266, -303, 380, 389, -177, 2, -265, -264, 30, -133,
	224, 383, -141, 387, 320, -211, 69, 60, -229, 149,
	60, -314, -133, 69, -315, 55, 332, 241, 132, -211,
	69, -211, 69, 69, -271, 33, -66, 67, 133, 320,
	-271, 67, 320, 33, -66, 133, 320, -144, -303, 67,
	-275, 360, -133, 133, 383, 387, -149, -166, -150, -133,
	-230, -229, -316, -317, -314, 155, 332, 117, 30, 109,
	-195, -196, -299, 374, -196, 197, 198, 86, -196, -196,
	-196, 233, 30, 219, 209, -125, 310, 109, -231, 350,
	-222, -66, 382, 94, 30, -222, -180, -181, -274, -182,
	-141, 382, -133, -174, -175, -175, -144, -145, -133, -166,
	383, 387, -52, -276, 320, 339, -150, -51, 383, 387,
	-168, 29, 380, -207, 382, -275, 387, 133, 363, 320,
	383, 323, -227, -147, 246, 293, 258, 281, 8, 7,
	7, 387, -303, -351, -133, 282, -52, -141, -144, -141,
	-271, 130, 66, -190, -217, -219, -299, 382, -220, 269,
	270, 387, -118, 31, 98, 177, -141, 357, -239, -239,
	320, -361, 305, -246, -239, 201, 211, 326, 116, 333,
	100, 215, 133, 382, -240, -240, -176, -243, 382, -176,
	381, 391, 383, -239, 381, 381, 387, -258, -259, 104,
	-239, -163, 387, -162, -239, -176, -176, 383, 383, 320,
	320, 320, 320, 382, -341, 227, 382, 382, -239, 30,
	387, 383, 133, 383, 383, -209, 235, 383, 10, 11,
	373, 374, 375, 376, 128, 377, 378, 371, 372, 370,
	361, 362, 363, 64, 195, 271, 13, 14, 15, 170,
	152, -240, -240, -240, -176, 382, 383, -244, -245, 133,
	130, 30, -205, -205, -205, 383, 133, -176, 387, 387,
	387, 383, 383, 383, 7, 383, 387, 383, 357, 357,
	383, 382, 383, -231, -273, -171, 2, -269, -303, -231,
	-262, -269, -269, -199, 339, 219, 174, -269, -264, 383,
	-348, 7, -266, -265, 7, -238, -237, 131, 207, 383,
	-133, 382, -266, 383, -119, -141, -133, -133, 209, -229,
	149, -124, 209, -278, -133, 382, 382, 177, 177, -133,
	-133, 149, -133, 149, -133, -133, -120, 257, -66, 357,
	382, -141, 257, 357, -133, -66, 382, -133, 257, 357,
	-103, 148, 215, 299, 133, -141, 383, 383, 387, -134,
	155, -134, -66, -174, 5, -66, -141, 109, -126, 105,
	-360, 363, -133, -215, -213, -239, -192, -224, 264, 219,
	-172, 344, -133, -192, -170, 387, 133, 363, -172, -122,
	-122, -122, -122, -239, -351, -308, 383, -278, 380, 381,
	7, 7, -106, 352, -308, -351, -300, -300, -130, 330,
	63, 246, -300, 387, 245, 88, 307, -220, -239, -267,
	-141, 388, -239, -239, -240, -240, 133, 382, -239, -250,
	26, 26, 383, -177, 387, -235, -239, 383, -248, 106,
	-239, 316, 383, 346, -163, -163, -163, 5, 200, 143,
	199, -208, 199, -208, -208, 7, -342, -133, 382, 350,
	-162, 383, -296, -278, -239, -244, -239, -296, -278, -240,
	-240, -240, -240, -240, -240, -240, -240, -240, -240, -240,
	-240, -240, -240, -240, -240, -240, -240, -240, 100, 209,
	215, -240, 387, -177, -245, -244, -239, -239, -278, 383,
	383, 383, -176, -239, -239, -239, 383, 7, -51, -188,
	138, -275, 387, -188, -199, 382, -239, -269, 381, 383,
	387, -265, 381, 387, 390, 363, -266, 382, -166, -264,
	320, 320, 109, 209, 341, -318, -315, -239, -165, -268,
	-133, -329, 382, -326, -327, -139, 382, 382, -117, 103,
	285, -212, 109, -122, 109, -122, 320, -211, 69, -242,
	-139, -133, -176, 320, -242, -176, 320, -242, -106, 133,
	306, 299, -151, 154, -230, 382, -134, 382, 382, -161,
	382, -133, -127, 182, -360, -306, -332, -192, -192, -179,
	210, 68, 383, -231, -181, -171, -262, 383, -107, 76,
	-107, 7, 381, 383, -105, 221, -104, -133, 5, -133,
	-303, -133, -141, 220, 383, -118, -303, 26, 26, -239,
	-250, 383, -239, -239, 383, -239, 381, -239, 5, -239,
	383, 383, 383, 383, -343, -133, -239, 383, 383, 383,
	-245, 133, 100, 215, 382, -239, 383, 383, 387, 383,
	383, 383, 383, -247, 140, 44, -269, -247, -166, -236,
	7, -237, -303, 380, -265, -166, 383, -133, -133, -229,
	109, -319, 69, -320, 58, 117, 74, 209, 211, 332,
	241, 55, 94, 250, 383, 383, 387, -140, -184, 58,
	-140, -239, 382, -165, -166, 209, 94, 209, 94, 87,
	328, -133, -133, -141, -133, -133, 382, 383, -141, 383,
	-133, -309, 317, -152, -153, 232, 152, -165, 382, -166,
	-149, 30, -165, 219, -128, 181, -360, -306, -125, -223,
	382, 219, -66, -192, 363, 87, 87, 381, 387, 382,
	363, 363, -118, -239, -239, 383, 383, -163, -337, 232,
	383, -240, 133, 382, -250, 383, -239, -338, 351, -239,
	-176, -338, 383, -266, 7, 383, -229, -133, -303, -133,
	117, 149, 211, 177, 382, -240, -141, -228, -356, 73,
	303, -268, -118, -303, -118, 383, -176, 383, 383, 211,
	211, -239, -278, -122, -122, 320, 320, -176, 320, 320,
	-242, 44, 230, 383, -165, 383, 383, -66, 383, -141,
	-360, -306, -126, 101, -166, 69, -187, -110, 382, 382,
	382, -104, -105, -308, -308, 383, -163, 44, -240, -250,
	383, 383, -339, -340, -133, -265, 381, -320, -134, 209,
	-239, -135, 382, -151, 382, -140, -163, 250, -121, 58,
	-133, -133, -163, 382, 382, 190, 245, -141, -228, 383,
	-151, -228, 382, -306, -127, 334, 210, 383, -133, -309,
	-309, 383, -344, 245, 270, -176, 383, 387, 30, 109,
	383, -321, 196, -133, -166, -118, 383, -141, -116, 339,
	-303, 383, -176, -176, 382, 382, 382, -151, -228, -151,
	-165, -128, 285, -231, 383, 383, 383, -345, -346, 36,
	329, 78, -239, -345, -340, -342, 117, -322, -325, -324,
	219, 134, 231, 290, 383, 383, -161, -239, 383, 383,
	-166, -166, -166, -151, 383, -180, -106, -106, -346, 238,
	129, 269, 238, 129, -133, -324, 219, -325, 219, 334,
	97, -321, 383, 383, 383, -228, -231, 26, -323, 206,
	262, 49, 285, -323, -322, 382, 382, -123, 49, 262,
	-151, -346, 20, 211, 94, -154, 232, -155, 232, 383,
	-303, 383, -303, 344, 344, -156, 382, 186, 387, -153,
	-152, -157, -158, -239, 94, 198, 315, -154, 382, 387,
	383, 387, 382, -157, -154, -158, -157, 383, 383, 387,
	-153, -152, -155, 387, -155,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 308, 0, 159, 161, 163,
	165, -2, 168, 170, 172, 0, 0, 0, 183, 185,
	187, 189, 191, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 686, -2, 0, 288, 290, 299,
	301, 303, 305, 306, 0, 351, 353, 355, 357, 359,
	361, 363, 365, 367, 369, 371, 373, 375, 377, 379,
	380, 382, 384, 386, 0, 607, 609, 611, -2, 65,
	66, 67, 68, 69, 70, 78, 79, 80, 81, 72,
	74, 75, 77, 0, 724, -2, 735, 0, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 701, 703, 705,
	707, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	43, 49, 51, 53, 56, 58, 60, 62, 64, 0,
	0, 0, 0, 0, 0, 125, 272, 0, 1311, 1234,
	1240, 1241, 1265, 1266, 1267, 1284, 1285, 1286, 1287, 1288,
	1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
	1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339,
	1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349,
	1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
	1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
	1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
	1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
	1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
	1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
	1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
	1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
	1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
	1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 151, 153, 154, 0, 0, 0, 1236, 1311, 160,
	162, 164, 166, 0, 174, 0, 0, 0, 0, 0,
	574, 169, 171, 173, 263, 1375, 265, 267, 0, 0,
	0, 0, 177, 178, 179, 180, 181, 182, 184, 186,
	188, 190, 192, 193, 0, 0, 0, 0, 0, 262,
	260, 215, 216, 0, 245, 246, 247, 248, 249, 251,
	219, 221, 222, 224, 226, 228, 230, 231, 233, 235,
	236, 238, 240, 241, 243, 0, 0, 0, 269, 275,
	276, 277, 279, 280, 281, 282, 283, 284, 285, 0,
	131, 0, 463, 258, 256, 0, 127, 0, 604, 0,
	271, 605, 606, 601, 602, 1402, 630, 289, 291, 300,
	302, 304, -2, -2, 1497, -2, 315, -2, 323, 1503,
	0, 326, 327, 330, -2, 211, 352, 354, 356, 358,
	360, 362, 364, 366, 368, 370, 372, 374, 376, 378,
	381, 383, 385, 387, 388, 0, 0, 0, 392, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, 0, -2, -2, 0, 0, -2, 0, 0, 391,
	393, 394, 395, 0, 608, 610, 612, 0, 564, 726,
	0, 0, -2, 699, 700, -2, 0, 730, 730, 730,
	0, 0, 700, 698, 0, 292, 0, 294, 0, 392,
	297, 298, 331, 332, 1219, 1220, 936, 0, 0, 0,
	0, 0, 0, 1038, 1040, 1468, 1497, 0, 1042, 1043,
	0, 1045, 1047, 1048, 0, 1051, 1052, 1204, 1236, 1250,
	1251, 1252, 1253, 0, 0, 1256, 0, 1258, 1259, 1260,
	1106, 1062, -2, -2, 1248, 864, 865, 866, 867, -2,
	1511, 1066, 1069, 1072, 1075, 1076, 1079, 1080, 0, 1452,
	1469, 1470, 1493, 1494, 1502, 1506, 1507, 1476, 1490, 1477,
	1464, 1474, 1488, 1317, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1274,
	898, 899, 904, 905, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 907,
	632, 614, 623, 632, 616, 617, 618, 619, 620, 621,
	622, 625, 0, 716, 1381, 719, 1247, 717, 702, 704,
	0, 706, 0, 0, 710, 732, 731, 770, 771, 0,
	714, 715, 725, 786, 824, 801, 792, 0, 0, 2,
	71, 0, 1476, 824, 73, 0, 1476, 824, 76, 0,
	82, 0, 1476, 1239, 0, 1279, 1280, 1281, 1282, 1283,
	1511, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
	1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
	1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555,
	1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565,
	1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
	1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
	1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605,
	1606, 1607, 0, 0, 273, 274, 1244, 1242, 1243, 0,
	155, 156, 157, 158, 0, 0, 1237, 1213, 1211, 1212,
	167, 528, 1476, 550, -2, 566, 528, 570, -2, 723,
	1476, 646, 264, 266, 0, 176, 0, 659, 0, 661,
	0, 676, 830, 117, 1476, 196, 209, 117, 1476, 199,
	117, 1476, 202, 1232, 117, 1476, 205, 206, 1476, 208,
	259, 0, 0, -2, 252, 254, 1275, 1276, 1277, 1278,
	-2, 250, 220, 223, 225, 227, 229, 232, 234, 237,
	239, 242, 244, -2, 0, 0, 0, 462, 0, 0,
	0, 603, 0, 629, 307, 0, 312, 0, 314, 1463,
	-2, -2, 318, 633, 637, 638, 639, 0, 0, 0,
	0, 0, 0, 0, 328, 212, 0, 389, 390, 398,
	399, 132, 133, 349, 350, 0, 402, 423, 435, 0,
	0, 406, 408, 461, 410, 0, 0, 412, 0, 414,
	0, 416, 0, 418, 0, 420, 422, 424, 436, 426,
	725, 428, 0, 430, 434, 0, 439, 0, 441, 442,
	443, 0, 0, 449, 0, 0, 396, 397, 117, 828,
	0, 0, 0, -2, 0, 743, 768, 0, 746, 747,
	0, 0, 0, 0, 728, 729, 0, 0, 0, 688,
	689, 293, 0, 296, 0, 0, 0, 0, 1139, 1140,
	1141, 1142, 1143, 1144, 1147, 1148, 1145, 1146, 1149, 1150,
	0, 0, 0, 0, 0, 1151, 0, 0, 0, 0,
	0, 0, 0, 0, 1152, 1153, 1154, 0, 0, 1156,
	0, 1158, 0, 0, 0, 0, 0, 0, 1218, 0,
	0, 1155, 941, 942, 943, 975, 976, 0, 1039, 1215,
	1208, 1041, 0, 1161, -2, 1162, 0, 0, 1044, 1049,
	1050, 1161, 0, 1203, -2, 0, 1255, 0, 933, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1184, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 901, 912, 909, 908, 885, 0, 884, 882,
	0, 886, 0, 0, 0, 613, -2, 615, 0, 627,
	0, 718, 0, 0, 772, 775, 1224, 1228, 1229, 775,
	0, 1221, 0, 0, 0, 0, 821, 821, 821, 819,
	795, 0, 801, 0, -2, 825, 813, 0, -2, 792,
	0, 0, 826, 0, 83, 598, 96, 0, 598, 598,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 815, 1235, 0,
	1209, 1210, 147, 0, 0, 1230, 1214, 469, 0, 0,
	548, 549, 551, 0, 0, 0, 0, 0, 0, 560,
	565, 0, 722, 0, 0, 0, 1476, 573, 1268, 648,
	0, 834, 0, 662, 0, 0, 831, 0, 194, 0,
	115, 116, 0, 197, 0, 200, 0, 0, 203, 0,
	0, 0, 1162, 725, 0, 0, 278, 0, 0, 725,
	0, 1164, 842, 843, 844, 845, 846, 933, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 895, 0, 870, 870, 870, 887,
	888, 896, 897, 902, 903, 914, 915, 917, 919, 913,
	913, 913, 910, 911, 815, 134, 0, 0, 0, 0,
	-2, 320, 0, 635, 0, 640, 340, 341, 342, 642,
	643, 324, 343, 344, 345, 346, 347, 348, 0, 545,
	0, 547, 1261, 0, 321, 333, 322, 325, 0, 213,
	400, 401, 403, 404, 405, 409, 0, 458, 411, 413,
	415, 417, 419, 427, 431, 725, 437, 440, 444, 445,
	446, 447, 0, 0, 0, 563, 0, 309, 0, 453,
	0, 743, 768, 692, 742, 693, 767, 769, 744, 745,
	750, 754, 755, 758, 761, 762, 752, 936, 711, 712,
	713, 736, 737, 585, 0, 0, 295, 937, 838, 839,
	889, 890, 891, 892, 893, 938, 939, 0, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, -2, -2,
	-2, -2, -2, -2, -2, -2, 962, 963, 964, 965,
	966, 967, 968, 969, -2, -2, -2, 973, 974, -2,
	1157, 1159, 0, 1218, 0, -2, 0, -2, -2, -2,
	-2, 987, 0, 989, 992, 994, 996, 0, 0, 0,
	0, 1217, 1006, 1195, 0, 0, 1136, 1137, 1138, 991,
	0, 0, 1216, 1207, 0, 0, 1160, 1046, 0, 0,
	0, 1168, 1202, 1198, 0, 1053, 735, 0, 0, 0,
	0, 1060, 0, 1264, 920, 921, 922, 923, 924, 925,
	934, 1116, 0, 0, 0, 1067, 1068, 1070, 1071, 1073,
	1074, 1077, 1078, 0, 0, 0, 1084, 0, 1171, -2,
	-2, -2, -2, -2, -2, -2, 0, 1086, 0, 1088,
	1162, 1181, 0, 0, 1009, 0, 0, 0, 0, 1497,
	0, 1091, 1162, 1189, 0, 0, 0, 0, 0, 1162,
	0, 1194, 0, 0, 0, 0, 0, 1102, 0, 1104,
	0, 0, 0, 0, 0, 0, 626, 720, 0, 0,
	834, 0, 0, 0, 1227, 834, 0, 1223, 0, 0,
	0, 0, 0, 816, 820, 817, 818, 0, 0, 801,
	813, 783, 0, 0, 0, 790, 791, 812, 0, 811,
	800, -2, 0, 0, 0, 0, 0, 597, 98, 1476,
	0, 119, 0, 0, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 1238, 0,
	137, 0, 1245, 0, 0, 0, 0, 0, 468, 1244,
	470, 472, 473, 474, 475, 1269, 0, 1269, 0, 0,
	552, 553, 562, 0, 554, 555, 557, 561, 556, 558,
	559, 0, 0, 0, 0, 650, 656, 0, 749, 0,
	674, 664, 0, 0, 0, 674, 678, 679, 681, 682,
	0, 0, 832, 210, 117, 117, 1233, 117, 117, 207,
	261, 0, 217, 253, 0, 0, 0, 255, 257, 0,
	835, 837, 0, 847, 0, 146, 0, 0, 0, 0,
	313, 0, 634, 641, 0, 337, 0, 339, 546, 1263,
	1262, 0, 214, 460, 286, 429, 432, 455, 456, 457,
	829, 0, 454, 696, 697, 0, 756, 0, 753, 759,
	760, 0, 739, 583, 584, 0, 0, 0, -2, -2,
	0, 0, 0, 1007, -2, 988, 990, 993, 995, 997,
	0, 0, 0, 0, 0, 0, 0, 1008, 1161, 0,
	1205, 1208, -2, 1163, 1166, 1167, 0, 0, 1199, 0,
	0, 0, 0, 734, 735, 735, 735, 1059, 0, 0,
	0, 0, 0, 0, 1061, 0, 0, 0, 0, 0,
	0, 1083, 0, 1085, 1087, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1012, 1013, 1014, 0, 1161, 1090, 1187, 1188, 0,
	0, 0, 0, 0, 0, 1096, 0, 1193, 0, 0,
	0, 1100, 1101, 1103, 0, 868, 0, 894, 916, 918,
	906, 725, 1246, 764, 1225, 815, 774, 776, 1226, 764,
	1222, 803, 0, 805, 0, 0, 0, 807, 0, 796,
	0, 798, 813, 788, 0, 0, 781, 0, 780, 801,
	809, 0, 0, 827, 97, 587, 0, 0, 0, 100,
	1476, 108, 0, 500, 0, 0, 0, 0, 0, 600,
	109, 1476, 117, 1476, 117, 110, 84, 598, 85, 0,
	0, 593, 0, 0, 586, 86, 0, 595, 0, 0,
	146, 0, 0, 148, 0, 1231, 477, 527, 0, 0,
	1269, 0, 466, 528, 567, 569, 0, 0, 652, 656,
	0, 655, 723, 674, 748, 833, 657, 674, 0, 0,
	0, 666, 663, 660, 834, 0, 0, 0, 0, 195,
	198, 201, 204, 1163, 268, 0, 0, 1165, 0, 840,
	0, 0, 126, 0, 135, 270, 310, 311, 316, 335,
	336, 338, 334, 0, 0, 0, 0, 0, 0, 738,
	585, 0, 940, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 1196, 0, 0, 0, 1207, -2, 1169, 1197,
	1201, 0, 1054, 0, 0, 0, 0, 1257, 926, 927,
	928, 929, 930, 931, 932, 0, 1114, 1115, 1119, 0,
	0, 1065, 0, 0, 1170, 1180, 1182, 1010, 1011, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, -2,
	-2, -2, 1028, 1029, 1030, -2, -2, -2, 0, 0,
	0, 1183, 0, 0, 1185, 1186, 1190, 1191, 0, 1093,
	1094, 1095, 1192, 0, 0, 0, 900, 0, 0, 766,
	0, 773, 0, 766, 804, 0, 823, 806, 786, 797,
	0, 794, 784, 0, 785, 0, 813, 0, 0, 793,
	0, 0, 0, 0, 118, 498, 517, 0, 0, 576,
	582, 582, 0, 1063, 1064, 0, 0, 0, 102, 0,
	0, 0, 0, 106, 0, 112, 0, 0, 0, 91,
	0, 0, 0, 0, 90, 0, 0, 89, 124, 0,
	0, 149, 482, 0, 471, 0, 0, 0, 469, 0,
	0, 0, 654, 656, 0, 647, 648, 175, 658, 672,
	673, 671, 0, 674, 680, 677, 683, 0, 0, 128,
	0, 0, 841, 848, 144, 1365, 142, 139, 141, 287,
	450, 451, 452, 751, 757, 740, 585, 0, 0, -2,
	0, 1000, -2, -2, 1132, 1163, 1206, 1200, 1254, 735,
	1055, 1057, 1058, 935, 1121, 1118, 0, 1105, 1081, 1082,
	1179, 0, 0, 0, 0, 1163, 1134, 1092, 0, 1098,
	1099, 869, 721, 1110, 0, 0, 777, 1110, 0, 801,
	799, 782, 778, 0, 789, 0, 810, 589, 591, 99,
	0, 499, 0, 502, 0, 0, 0, 0, 508, 509,
	0, 0, 0, 0, 519, 526, 0, 585, 1249, 0,
	585, 0, 0, 0, 0, 0, 114, 0, 0, 599,
	0, 117, 117, 588, 0, 0, 0, 0, 594, 0,
	596, 136, 0, 464, 481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 644, 656, 0, 649, 650, 0,
	0, 0, 665, 675, 0, 0, 0, 836, 0, 0,
	0, 0, 741, -2, -2, 1001, 1133, 0, 735, 0,
	1107, -2, 0, 0, 0, 1135, 0, 708, 0, 765,
	763, 709, 822, 813, 0, 808, 101, 0, 503, 504,
	1269, 0, 507, 510, 0, 512, 1271, 477, 0, 523,
	524, 577, 578, 581, 579, 582, 735, 521, 0, 103,
	104, 113, 121, 105, 111, 0, 0, 735, 0, 0,
	814, 0, 0, 526, 0, 516, 477, 467, 526, 0,
	0, 651, 652, 0, 0, 0, 684, 685, 0, 0,
	0, 143, 0, 138, 140, 1056, 1124, 0, -2, 0,
	1036, 1097, 1109, 1111, 0, 787, 779, 501, 505, 0,
	0, 532, 0, 520, 0, 585, 0, 0, 123, 0,
	590, 592, 0, 0, 0, 0, 0, 0, 477, 526,
	465, 477, 0, 653, 654, 0, 668, 834, 670, 0,
	0, 145, 0, 0, 0, 1120, 1037, 0, 0, 0,
	511, 537, 0, 0, 0, 580, 1054, 528, 107, 0,
	120, 0, 0, 0, 0, 0, 0, 514, 477, 571,
	0, 645, 0, 669, 146, 146, 1117, 1122, 1125, -2,
	1436, 1308, 0, 1123, 1112, 1113, 0, 513, 533, 534,
	0, 529, 530, 531, 1270, 525, 532, 122, 93, 95,
	0, 0, 0, 515, 526, 834, 129, 130, 0, 1127,
	1128, 1129, 1130, 1131, 506, 535, 0, 536, 0, 0,
	0, 537, 0, 0, 480, 477, 667, 0, 538, 0,
	541, 542, 0, 539, 522, 0, 0, 476, 478, 479,
	572, 1126, 540, 543, 544, 0, 0, 0, 0, 483,
	0, 484, 0, 0, 0, 482, 0, 0, 0, 481,
	487, 0, 490, 492, 493, -2, 0, 485, 0, 0,
	488, 0, 0, 0, 486, 491, 0, 489, 482, 0,
	481, 497, 495, 0, 496,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 371, 3, 377, 372, 3,
	382, 383, 375, 373, 387, 374, 384, 376, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 391, 386,
	361, 363, 362, 365, 388, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 380, 3, 381, 378, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 389, 370, 390, 368,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 364, 57704, 366,
	57705, 367, 57706, 369, 57707, 379, 57708, 385, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:911
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:917
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:923
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:932
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:965
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:976
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:977
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:978
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:980
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1016
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1062
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1088
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1094
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1100
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1109
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1118
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1187
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1210
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1282
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1283
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1286
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1287
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1314
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1340
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1378
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1447
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1480
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1504
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1508
		{
			return helpWith(sqllex, "CREATE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1526
		{
			return helpWith(sqllex, "DELETE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1537
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			return helpWith(sqllex, "DROP")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1566
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1581
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1604
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1627
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1693
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1702
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			return helpWith(sqllex, "DELETE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			return helpWith(sqllex, "INSERT")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1722
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1729
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{ /* SKIP DOC */
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1817
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			return helpWith(sqllex, "GRANT")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			return helpWith(sqllex, "RESET")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1936
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1951
		{
			return helpWith(sqllex, "RESET")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1962
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1967
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1974
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1975
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1976
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{ /* SKIP DOC */
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1978
		{ /* SKIP DOC */
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1979
		{
			return unimplemented(sqllex, "set local")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.expr()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2005
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2055
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2060
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2077
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2080
		{
			return unimplemented(sqllex, "set from current")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2088
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = Low
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = Normal
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = High
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2193
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2197
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2198
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2199
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2200
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2201
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2202
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2204
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2206
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2207
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2208
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			return helpWith(sqllex, "SHOW")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2219
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.str = "client_encoding"
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2267
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2278
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2289
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2300
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2337
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2367
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2385
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2403
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2434
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2438
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2442
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2445
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2456
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2467
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2478
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2482
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2486
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2490
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2494
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2498
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2504
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2508
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2512
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2518
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2546
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2653
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2657
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = DropDefault
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 496:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2771
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2978
		{
			return unimplemented(sqllex, "match full")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2979
		{
			return unimplemented(sqllex, "match partial")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2980
		{
			return unimplemented(sqllex, "match simple")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2981
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = NoAction
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = Restrict
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = Cascade
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = SetNull
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = SetDefault
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3078
		{
			node := &CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = []SequenceOption{}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = []SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = IncrementOption{Increment: sqlDollar[2].union.intVal()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = MinValueOption{MinValue: sqlDollar[2].union.intVal()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = MinValueOption{MinValue: nil}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = MaxValueOption{MaxValue: sqlDollar[2].union.intVal()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = MaxValueOption{MaxValue: nil}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = StartOption{Start: sqlDollar[2].union.intVal()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = CacheOption{Cache: sqlDollar[2].union.intVal()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = CycleOption{Cycle: true}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = CycleOption{Cycle: false}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3107
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &val
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3160
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3200
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = true
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = false
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3230
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3231
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3234
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3235
		{
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = Ascending
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = Descending
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3275
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3277
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = true
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = false
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3310
		{
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3311
		{
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3322
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3333
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3344
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3348
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3350
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3368
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3373
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3386
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3391
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3399
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3406
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3409
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3410
		{
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.str = ""
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.str = ""
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3456
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3469
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3471
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = ReadOnly
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = ReadWrite
		}
	case 644:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3535
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.str = ""
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.str = ""
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.str = ""
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.str = ""
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3578
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3579
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3603
		{
			return helpWith(sqllex, "INSERT")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3620
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3662
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3666
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3674
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 675:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3697
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3701
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3702
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3839
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3874
		{
			return helpWith(sqllex, "SELECT")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3875
		{
			return helpWith(sqllex, "VALUES")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3876
		{
			return helpWith(sqllex, "TABLE")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3923
		{
			return helpWith(sqllex, "SELECT")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3967
		{
			return helpWith(sqllex, "TABLE")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3978
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3979
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3980
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3983
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3984
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3987
		{
			return unimplemented(sqllex, "cte")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3990
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3991
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3994
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3995
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3998
		{
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3999
		{
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = true
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = false
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = false
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = true
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4022
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4023
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4077
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4101
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4153
		{
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4154
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4157
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4158
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = false
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = true
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4229
		{
			return helpWith(sqllex, "VALUES")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4246
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &From{}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4268
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4286
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4313
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4350
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4375
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = nil
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4416
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4422
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = true
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = false
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.str = astFullJoin
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.str = astLeftJoin
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.str = astRightJoin
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.str = astInnerJoin
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4533
		{
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4534
		{
		}
	case 822:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4620
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4634
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4642
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4666
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4677
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = jsonbColType
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = jsonColType
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4735
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4766
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4775
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = nil
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4840
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4936
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4968
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5007
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5008
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 916:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 918:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = year
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = month
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = day
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = hour
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = minute
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = month
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = hour
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = minute
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = minute
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = nil
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = second
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5103
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5138
		{
			return unimplemented(sqllex, "at tz")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5346
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5412
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5476
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5561
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5569
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5585
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5631
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5638
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5639
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5641
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5645
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5652
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5663
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5679
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5680
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5684
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5693
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5702
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5711
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5712
		{
			return unimplemented(sqllex, "current role")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5714
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5721
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5731
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5742
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5747
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5749
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5752
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5761
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5762
		{
			return unimplemented(sqllex, "treat")
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5780
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5799
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5804
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5808
		{
			return unimplemented(sqllex, "within group")
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5809
		{
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5817
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5844
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5867
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.str = ""
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5906
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5907
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5908
		{
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5911
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5912
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5918
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5919
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5920
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5921
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5922
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5933
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5937
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5955
		{
			sqlVAL.union.val = Any
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = Some
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5963
		{
			sqlVAL.union.val = All
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5968
		{
			sqlVAL.union.val = Plus
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5969
		{
			sqlVAL.union.val = Minus
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5970
		{
			sqlVAL.union.val = Mult
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5971
		{
			sqlVAL.union.val = Div
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5973
		{
			sqlVAL.union.val = Mod
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = Bitand
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = Bitor
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5976
		{
			sqlVAL.union.val = Pow
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5977
		{
			sqlVAL.union.val = Bitxor
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = LT
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5979
		{
			sqlVAL.union.val = GT
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5980
		{
			sqlVAL.union.val = EQ
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5981
		{
			sqlVAL.union.val = LE
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = GE
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = NE
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = Like
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = NotLike
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5989
		{
			sqlVAL.union.val = ILike
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = NotILike
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6028
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6048
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6088
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6095
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6099
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6116
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6120
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6132
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6144
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6150
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6154
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6164
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6168
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6179
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6186
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6190
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6196
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6202
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6213
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6223
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6230
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6236
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6242
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6248
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6252
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6258
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6262
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6268
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6272
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6277
		{
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6278
		{
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6287
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6293
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6297
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6306
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6312
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6316
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6322
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6331
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6335
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6339
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6357
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6361
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6367
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6382
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6386
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6392
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6396
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6409
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6413
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6417
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6421
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6427
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6431
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6437
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6440
		{
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6450
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6454
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6461
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6465
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6469
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6473
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6476
		{
			return unimplemented(sqllex, "func const")
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6478
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6482
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6485
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6487
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6491
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6495
		{
			sqlVAL.union.val = DNull
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6502
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6506
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6512
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6547
		{
			sqlVAL.str = ""
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6553
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6557
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
