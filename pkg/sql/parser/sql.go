// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const CONTAINS = 57409
const COPY = 57410
const COVERING = 57411
const CREATE = 57412
const CROSS = 57413
const CSV = 57414
const CUBE = 57415
const CURRENT = 57416
const CURRENT_CATALOG = 57417
const CURRENT_DATE = 57418
const CURRENT_SCHEMA = 57419
const CURRENT_ROLE = 57420
const CURRENT_TIME = 57421
const CURRENT_TIMESTAMP = 57422
const CURRENT_USER = 57423
const CYCLE = 57424
const DATA = 57425
const DATABASE = 57426
const DATABASES = 57427
const DATE = 57428
const DAY = 57429
const DEC = 57430
const DECIMAL = 57431
const DEFAULT = 57432
const DEALLOCATE = 57433
const DEFERRABLE = 57434
const DELETE = 57435
const DESC = 57436
const DISCARD = 57437
const DISTINCT = 57438
const DO = 57439
const DOUBLE = 57440
const DROP = 57441
const ELSE = 57442
const ENCODING = 57443
const END = 57444
const ESCAPE = 57445
const EXCEPT = 57446
const EXISTS = 57447
const EXECUTE = 57448
const EXPERIMENTAL_FINGERPRINTS = 57449
const EXPLAIN = 57450
const EXTRACT = 57451
const EXTRACT_DURATION = 57452
const FALSE = 57453
const FAMILY = 57454
const FETCH = 57455
const FETCHVAL = 57456
const FETCHTEXT = 57457
const FETCHVAL_PATH = 57458
const FETCHTEXT_PATH = 57459
const FILTER = 57460
const FIRST = 57461
const FLOAT = 57462
const FLOAT4 = 57463
const FLOAT8 = 57464
const FLOORDIV = 57465
const FOLLOWING = 57466
const FOR = 57467
const FORCE_INDEX = 57468
const FOREIGN = 57469
const FROM = 57470
const FULL = 57471
const GRANT = 57472
const GRANTS = 57473
const GREATEST = 57474
const GROUP = 57475
const GROUPING = 57476
const HAVING = 57477
const HELP = 57478
const HIGH = 57479
const HOUR = 57480
const HAS_SOME = 57481
const HAS_ALL = 57482
const IMPORT = 57483
const INCREMENTAL = 57484
const IF = 57485
const IFNULL = 57486
const ILIKE = 57487
const IN = 57488
const INET = 57489
const INTERLEAVE = 57490
const INDEX = 57491
const INDEXES = 57492
const INITIALLY = 57493
const INNER = 57494
const INSERT = 57495
const INT = 57496
const INT2VECTOR = 57497
const INT2 = 57498
const INT4 = 57499
const INT8 = 57500
const INT64 = 57501
const INTEGER = 57502
const INTERSECT = 57503
const INTERVAL = 57504
const INTO = 57505
const IS = 57506
const ISOLATION = 57507
const JOB = 57508
const JOBS = 57509
const JOIN = 57510
const KEY = 57511
const KEYS = 57512
const KV = 57513
const LATERAL = 57514
const LC_CTYPE = 57515
const LC_COLLATE = 57516
const LEADING = 57517
const LEAST = 57518
const LEFT = 57519
const LEVEL = 57520
const LIKE = 57521
const LIMIT = 57522
const LOCAL = 57523
const LOCALTIME = 57524
const LOCALTIMESTAMP = 57525
const LOW = 57526
const LSHIFT = 57527
const MATCH = 57528
const MINUTE = 57529
const MONTH = 57530
const NAN = 57531
const NAME = 57532
const NAMES = 57533
const NATURAL = 57534
const NEXT = 57535
const NO = 57536
const NO_INDEX_JOIN = 57537
const NORMAL = 57538
const NOT = 57539
const NOTHING = 57540
const NULL = 57541
const NULLIF = 57542
const NULLS = 57543
const NUMERIC = 57544
const OF = 57545
const OFF = 57546
const OFFSET = 57547
const OID = 57548
const ON = 57549
const ONLY = 57550
const OPTIONS = 57551
const OR = 57552
const ORDER = 57553
const ORDINALITY = 57554
const OUT = 57555
const OUTER = 57556
const OVER = 57557
const OVERLAPS = 57558
const OVERLAY = 57559
const PARENT = 57560
const PARTIAL = 57561
const PARTITION = 57562
const PASSWORD = 57563
const PAUSE = 57564
const PLACING = 57565
const PLANS = 57566
const POSITION = 57567
const PRECEDING = 57568
const PRECISION = 57569
const PREPARE = 57570
const PRIMARY = 57571
const PRIORITY = 57572
const QUERIES = 57573
const QUERY = 57574
const RANGE = 57575
const READ = 57576
const REAL = 57577
const RECURSIVE = 57578
const REF = 57579
const REFERENCES = 57580
const REGCLASS = 57581
const REGPROC = 57582
const REGPROCEDURE = 57583
const REGNAMESPACE = 57584
const REGTYPE = 57585
const REMOVE_PATH = 57586
const RENAME = 57587
const REPEATABLE = 57588
const RELEASE = 57589
const RESET = 57590
const RESTORE = 57591
const RESTRICT = 57592
const RESUME = 57593
const RETURNING = 57594
const REVOKE = 57595
const RIGHT = 57596
const ROLLBACK = 57597
const ROLLUP = 57598
const ROW = 57599
const ROWS = 57600
const RSHIFT = 57601
const SAVEPOINT = 57602
const SCATTER = 57603
const SEARCH = 57604
const SECOND = 57605
const SELECT = 57606
const SEQUENCES = 57607
const SERIAL = 57608
const SERIALIZABLE = 57609
const SESSION = 57610
const SESSIONS = 57611
const SESSION_USER = 57612
const SET = 57613
const SETTING = 57614
const SETTINGS = 57615
const SHOW = 57616
const SIMILAR = 57617
const SIMPLE = 57618
const SMALLINT = 57619
const SMALLSERIAL = 57620
const SNAPSHOT = 57621
const SOME = 57622
const SPLIT = 57623
const SQL = 57624
const START = 57625
const STATUS = 57626
const STDIN = 57627
const STRICT = 57628
const STRING = 57629
const STORE = 57630
const STORING = 57631
const SUBSTRING = 57632
const SYMMETRIC = 57633
const SYSTEM = 57634
const TABLE = 57635
const TABLES = 57636
const TEMP = 57637
const TEMPLATE = 57638
const TEMPORARY = 57639
const TESTING_RANGES = 57640
const TESTING_RELOCATE = 57641
const TEXT = 57642
const THEN = 57643
const TIME = 57644
const TIMESTAMP = 57645
const TIMESTAMPTZ = 57646
const TO = 57647
const TRAILING = 57648
const TRACE = 57649
const TRANSACTION = 57650
const TREAT = 57651
const TRIM = 57652
const TRUE = 57653
const TRUNCATE = 57654
const TYPE = 57655
const UNBOUNDED = 57656
const UNCOMMITTED = 57657
const UNION = 57658
const UNIQUE = 57659
const UNKNOWN = 57660
const UPDATE = 57661
const UPSERT = 57662
const USE = 57663
const USER = 57664
const USERS = 57665
const USING = 57666
const UUID = 57667
const VALID = 57668
const VALIDATE = 57669
const VALUE = 57670
const VALUES = 57671
const VARCHAR = 57672
const VARIADIC = 57673
const VIEW = 57674
const VARYING = 57675
const WHEN = 57676
const WHERE = 57677
const WINDOW = 57678
const WITH = 57679
const WITHIN = 57680
const WITHOUT = 57681
const WRITE = 57682
const YEAR = 57683
const ZONE = 57684
const NOT_LA = 57685
const WITH_LA = 57686
const AS_LA = 57687
const CONTAINED_BY = 57688
const HAS_SOME_KEY = 57689
const HAS_ALL_KEYS = 57690
const POSTFIXOP = 57691
const UMINUS = 57692
const HELPTOKEN = 57693

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6581

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	371, 53,
	-2, 680,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	149, 532,
	-2, 0,
	-1, 54,
	93, 680,
	153, 680,
	319, 680,
	320, 680,
	-2, 0,
	-1, 64,
	104, 655,
	113, 655,
	161, 655,
	180, 655,
	205, 655,
	211, 655,
	316, 655,
	-2, 644,
	-1, 96,
	4, 682,
	20, 682,
	21, 682,
	23, 682,
	28, 682,
	33, 682,
	34, 682,
	35, 682,
	36, 682,
	37, 682,
	38, 682,
	39, 682,
	40, 682,
	41, 682,
	42, 682,
	44, 682,
	45, 682,
	46, 682,
	47, 682,
	48, 682,
	51, 682,
	52, 682,
	53, 682,
	55, 682,
	56, 682,
	60, 682,
	61, 682,
	62, 682,
	64, 682,
	66, 682,
	68, 682,
	69, 682,
	72, 682,
	73, 682,
	74, 682,
	82, 682,
	83, 682,
	84, 682,
	85, 682,
	86, 682,
	87, 682,
	88, 682,
	89, 682,
	91, 682,
	93, 682,
	95, 682,
	98, 682,
	99, 682,
	101, 682,
	105, 682,
	106, 682,
	107, 682,
	108, 682,
	109, 682,
	110, 682,
	118, 682,
	119, 682,
	120, 682,
	121, 682,
	122, 682,
	124, 682,
	126, 682,
	131, 682,
	132, 682,
	134, 682,
	137, 682,
	138, 682,
	141, 682,
	142, 682,
	143, 682,
	144, 682,
	147, 682,
	148, 682,
	150, 682,
	153, 682,
	154, 682,
	155, 682,
	156, 682,
	157, 682,
	158, 682,
	159, 682,
	160, 682,
	162, 682,
	165, 682,
	166, 682,
	167, 682,
	169, 682,
	170, 682,
	171, 682,
	173, 682,
	174, 682,
	176, 682,
	178, 682,
	181, 682,
	184, 682,
	186, 682,
	187, 682,
	188, 682,
	189, 682,
	190, 682,
	191, 682,
	193, 682,
	194, 682,
	195, 682,
	196, 682,
	200, 682,
	201, 682,
	202, 682,
	203, 682,
	204, 682,
	206, 682,
	208, 682,
	209, 682,
	212, 682,
	213, 682,
	215, 682,
	217, 682,
	218, 682,
	219, 682,
	220, 682,
	221, 682,
	222, 682,
	224, 682,
	225, 682,
	226, 682,
	227, 682,
	228, 682,
	230, 682,
	231, 682,
	232, 682,
	233, 682,
	234, 682,
	235, 682,
	236, 682,
	237, 682,
	239, 682,
	240, 682,
	241, 682,
	242, 682,
	243, 682,
	245, 682,
	246, 682,
	247, 682,
	248, 682,
	249, 682,
	250, 682,
	251, 682,
	253, 682,
	255, 682,
	256, 682,
	257, 682,
	258, 682,
	260, 682,
	261, 682,
	262, 682,
	263, 682,
	265, 682,
	266, 682,
	267, 682,
	268, 682,
	269, 682,
	271, 682,
	272, 682,
	273, 682,
	274, 682,
	276, 682,
	277, 682,
	278, 682,
	279, 682,
	281, 682,
	282, 682,
	283, 682,
	284, 682,
	285, 682,
	286, 682,
	287, 682,
	288, 682,
	289, 682,
	290, 682,
	292, 682,
	294, 682,
	295, 682,
	296, 682,
	297, 682,
	298, 682,
	299, 682,
	300, 682,
	302, 682,
	303, 682,
	304, 682,
	307, 682,
	308, 682,
	309, 682,
	310, 682,
	312, 682,
	313, 682,
	314, 682,
	315, 682,
	318, 682,
	319, 682,
	320, 682,
	321, 682,
	323, 682,
	325, 682,
	326, 682,
	327, 682,
	328, 682,
	329, 682,
	330, 682,
	333, 682,
	338, 682,
	339, 682,
	340, 682,
	341, 682,
	342, 682,
	-2, 0,
	-1, 118,
	104, 654,
	113, 654,
	161, 654,
	180, 654,
	205, 654,
	211, 654,
	316, 654,
	-2, 647,
	-1, 123,
	1, 581,
	165, 581,
	230, 581,
	234, 581,
	370, 581,
	371, 581,
	-2, 0,
	-1, 125,
	1, 581,
	370, 581,
	371, 581,
	-2, 0,
	-1, 126,
	1, 581,
	370, 581,
	371, 581,
	-2, 0,
	-1, 127,
	1, 585,
	370, 585,
	371, 585,
	-2, 0,
	-1, 134,
	4, 688,
	5, 688,
	6, 688,
	7, 688,
	8, 688,
	9, 688,
	20, 688,
	21, 688,
	23, 688,
	28, 688,
	29, 688,
	33, 688,
	34, 688,
	35, 688,
	36, 688,
	37, 688,
	38, 688,
	39, 688,
	40, 688,
	41, 688,
	42, 688,
	44, 688,
	45, 688,
	46, 688,
	47, 688,
	48, 688,
	49, 688,
	50, 688,
	51, 688,
	52, 688,
	53, 688,
	55, 688,
	56, 688,
	58, 688,
	60, 688,
	61, 688,
	62, 688,
	64, 688,
	66, 688,
	68, 688,
	69, 688,
	71, 688,
	72, 688,
	73, 688,
	74, 688,
	76, 688,
	77, 688,
	78, 688,
	80, 688,
	81, 688,
	82, 688,
	83, 688,
	84, 688,
	85, 688,
	86, 688,
	87, 688,
	88, 688,
	89, 688,
	91, 688,
	93, 688,
	95, 688,
	98, 688,
	99, 688,
	101, 688,
	105, 688,
	106, 688,
	107, 688,
	108, 688,
	109, 688,
	110, 688,
	111, 688,
	112, 688,
	118, 688,
	119, 688,
	120, 688,
	121, 688,
	122, 688,
	124, 688,
	126, 688,
	129, 688,
	131, 688,
	132, 688,
	134, 688,
	137, 688,
	138, 688,
	141, 688,
	142, 688,
	143, 688,
	144, 688,
	145, 688,
	147, 688,
	148, 688,
	150, 688,
	152, 688,
	153, 688,
	154, 688,
	155, 688,
	156, 688,
	157, 688,
	158, 688,
	159, 688,
	160, 688,
	162, 688,
	164, 688,
	165, 688,
	166, 688,
	167, 688,
	168, 688,
	169, 688,
	170, 688,
	171, 688,
	173, 688,
	174, 688,
	176, 688,
	177, 688,
	178, 688,
	179, 688,
	181, 688,
	184, 688,
	186, 688,
	187, 688,
	188, 688,
	189, 688,
	190, 688,
	191, 688,
	192, 688,
	193, 688,
	194, 688,
	195, 688,
	196, 688,
	197, 688,
	199, 688,
	200, 688,
	201, 688,
	202, 688,
	203, 688,
	204, 688,
	206, 688,
	209, 688,
	212, 688,
	213, 688,
	214, 688,
	215, 688,
	216, 688,
	217, 688,
	218, 688,
	219, 688,
	220, 688,
	221, 688,
	222, 688,
	224, 688,
	225, 688,
	226, 688,
	227, 688,
	228, 688,
	230, 688,
	231, 688,
	232, 688,
	233, 688,
	234, 688,
	235, 688,
	236, 688,
	237, 688,
	239, 688,
	240, 688,
	241, 688,
	242, 688,
	243, 688,
	245, 688,
	246, 688,
	247, 688,
	248, 688,
	249, 688,
	250, 688,
	251, 688,
	253, 688,
	254, 688,
	255, 688,
	256, 688,
	257, 688,
	258, 688,
	260, 688,
	261, 688,
	262, 688,
	263, 688,
	265, 688,
	266, 688,
	267, 688,
	268, 688,
	269, 688,
	270, 688,
	271, 688,
	272, 688,
	273, 688,
	274, 688,
	275, 688,
	276, 688,
	277, 688,
	278, 688,
	279, 688,
	281, 688,
	282, 688,
	283, 688,
	284, 688,
	285, 688,
	286, 688,
	287, 688,
	288, 688,
	289, 688,
	290, 688,
	292, 688,
	294, 688,
	295, 688,
	296, 688,
	297, 688,
	298, 688,
	299, 688,
	300, 688,
	302, 688,
	303, 688,
	304, 688,
	307, 688,
	308, 688,
	309, 688,
	310, 688,
	311, 688,
	312, 688,
	313, 688,
	314, 688,
	315, 688,
	318, 688,
	319, 688,
	320, 688,
	321, 688,
	322, 688,
	323, 688,
	325, 688,
	326, 688,
	327, 688,
	328, 688,
	329, 688,
	330, 688,
	333, 688,
	338, 688,
	339, 688,
	340, 688,
	341, 688,
	342, 688,
	343, 688,
	353, 688,
	358, 688,
	359, 688,
	360, 688,
	367, 688,
	373, 688,
	-2, 0,
	-1, 137,
	1, 53,
	371, 53,
	-2, 680,
	-1, 492,
	128, 1289,
	305, 1289,
	348, 1289,
	369, 1289,
	-2, 0,
	-1, 493,
	128, 1242,
	305, 1242,
	348, 1242,
	369, 1242,
	-2, 0,
	-1, 495,
	128, 1347,
	305, 1347,
	348, 1347,
	369, 1347,
	-2, 0,
	-1, 497,
	128, 1369,
	305, 1369,
	348, 1369,
	369, 1369,
	-2, 0,
	-1, 504,
	128, 1294,
	305, 1294,
	348, 1294,
	369, 1294,
	-2, 323,
	-1, 530,
	1, 400,
	366, 400,
	368, 400,
	370, 400,
	371, 400,
	-2, 0,
	-1, 531,
	1, 447,
	125, 447,
	366, 447,
	368, 447,
	370, 447,
	371, 447,
	-2, 0,
	-1, 537,
	1, 414,
	366, 414,
	368, 414,
	370, 414,
	371, 414,
	-2, 0,
	-1, 539,
	1, 418,
	366, 418,
	368, 418,
	370, 418,
	371, 418,
	-2, 0,
	-1, 542,
	1, 426,
	366, 426,
	368, 426,
	370, 426,
	371, 426,
	-2, 0,
	-1, 543,
	1, 431,
	366, 431,
	368, 431,
	370, 431,
	371, 431,
	-2, 0,
	-1, 546,
	1, 441,
	366, 441,
	368, 441,
	370, 441,
	371, 441,
	-2, 0,
	-1, 565,
	113, 690,
	180, 690,
	205, 690,
	-2, 650,
	-1, 572,
	113, 689,
	180, 689,
	205, 689,
	-2, 648,
	-1, 629,
	367, 1220,
	-2, 1213,
	-1, 630,
	367, 1221,
	-2, 1214,
	-1, 636,
	5, 867,
	367, 867,
	-2, 1421,
	-1, 661,
	5, 826,
	-2, 1390,
	-1, 662,
	5, 861,
	367, 861,
	-2, 1392,
	-1, 663,
	5, 836,
	-2, 1393,
	-1, 664,
	5, 835,
	-2, 1394,
	-1, 665,
	5, 861,
	367, 861,
	-2, 1397,
	-1, 666,
	5, 861,
	367, 861,
	-2, 1398,
	-1, 667,
	5, 862,
	-2, 1401,
	-1, 668,
	5, 818,
	-2, 1402,
	-1, 669,
	5, 818,
	-2, 1403,
	-1, 670,
	5, 843,
	-2, 1407,
	-1, 671,
	5, 828,
	-2, 1408,
	-1, 672,
	5, 829,
	-2, 1409,
	-1, 673,
	5, 819,
	-2, 1415,
	-1, 674,
	5, 820,
	-2, 1416,
	-1, 675,
	5, 821,
	-2, 1417,
	-1, 676,
	5, 822,
	-2, 1418,
	-1, 677,
	5, 823,
	-2, 1419,
	-1, 678,
	5, 824,
	-2, 1420,
	-1, 679,
	5, 818,
	-2, 1425,
	-1, 680,
	5, 827,
	-2, 1430,
	-1, 681,
	5, 825,
	-2, 1433,
	-1, 682,
	5, 859,
	367, 859,
	-2, 1435,
	-1, 683,
	5, 863,
	-2, 1438,
	-1, 684,
	5, 865,
	-2, 1439,
	-1, 685,
	5, 858,
	367, 858,
	-2, 1444,
	-1, 781,
	221, 678,
	-2, 525,
	-1, 795,
	207, 1217,
	-2, 0,
	-1, 831,
	1, 210,
	366, 210,
	368, 210,
	370, 210,
	371, 210,
	-2, 653,
	-1, 834,
	4, 1443,
	10, 1443,
	11, 1443,
	13, 1443,
	14, 1443,
	15, 1443,
	16, 1443,
	17, 1443,
	18, 1443,
	20, 1443,
	21, 1443,
	23, 1443,
	26, 1443,
	28, 1443,
	30, 1443,
	33, 1443,
	34, 1443,
	35, 1443,
	36, 1443,
	37, 1443,
	38, 1443,
	39, 1443,
	40, 1443,
	41, 1443,
	42, 1443,
	44, 1443,
	45, 1443,
	46, 1443,
	47, 1443,
	48, 1443,
	51, 1443,
	52, 1443,
	53, 1443,
	55, 1443,
	56, 1443,
	57, 1443,
	60, 1443,
	61, 1443,
	62, 1443,
	63, 1443,
	64, 1443,
	66, 1443,
	67, 1443,
	68, 1443,
	69, 1443,
	71, 1443,
	72, 1443,
	73, 1443,
	74, 1443,
	82, 1443,
	83, 1443,
	84, 1443,
	85, 1443,
	86, 1443,
	87, 1443,
	88, 1443,
	89, 1443,
	91, 1443,
	93, 1443,
	95, 1443,
	98, 1443,
	99, 1443,
	101, 1443,
	105, 1443,
	106, 1443,
	107, 1443,
	108, 1443,
	109, 1443,
	110, 1443,
	114, 1443,
	115, 1443,
	116, 1443,
	117, 1443,
	118, 1443,
	119, 1443,
	120, 1443,
	121, 1443,
	122, 1443,
	123, 1443,
	124, 1443,
	126, 1443,
	129, 1443,
	131, 1443,
	132, 1443,
	134, 1443,
	137, 1443,
	138, 1443,
	141, 1443,
	142, 1443,
	143, 1443,
	144, 1443,
	145, 1443,
	146, 1443,
	147, 1443,
	148, 1443,
	150, 1443,
	152, 1443,
	153, 1443,
	154, 1443,
	155, 1443,
	156, 1443,
	157, 1443,
	158, 1443,
	159, 1443,
	160, 1443,
	162, 1443,
	164, 1443,
	165, 1443,
	166, 1443,
	167, 1443,
	168, 1443,
	169, 1443,
	170, 1443,
	171, 1443,
	173, 1443,
	174, 1443,
	176, 1443,
	177, 1443,
	178, 1443,
	179, 1443,
	181, 1443,
	184, 1443,
	185, 1443,
	186, 1443,
	187, 1443,
	188, 1443,
	189, 1443,
	190, 1443,
	191, 1443,
	192, 1443,
	193, 1443,
	194, 1443,
	195, 1443,
	196, 1443,
	200, 1443,
	201, 1443,
	202, 1443,
	203, 1443,
	204, 1443,
	206, 1443,
	209, 1443,
	210, 1443,
	212, 1443,
	213, 1443,
	215, 1443,
	217, 1443,
	218, 1443,
	219, 1443,
	220, 1443,
	221, 1443,
	222, 1443,
	224, 1443,
	225, 1443,
	226, 1443,
	227, 1443,
	228, 1443,
	230, 1443,
	231, 1443,
	232, 1443,
	233, 1443,
	234, 1443,
	235, 1443,
	236, 1443,
	237, 1443,
	239, 1443,
	240, 1443,
	241, 1443,
	242, 1443,
	243, 1443,
	244, 1443,
	245, 1443,
	246, 1443,
	247, 1443,
	248, 1443,
	249, 1443,
	250, 1443,
	251, 1443,
	253, 1443,
	254, 1443,
	255, 1443,
	256, 1443,
	257, 1443,
	258, 1443,
	259, 1443,
	260, 1443,
	261, 1443,
	262, 1443,
	263, 1443,
	265, 1443,
	266, 1443,
	267, 1443,
	268, 1443,
	269, 1443,
	271, 1443,
	272, 1443,
	273, 1443,
	274, 1443,
	275, 1443,
	276, 1443,
	277, 1443,
	278, 1443,
	279, 1443,
	281, 1443,
	282, 1443,
	283, 1443,
	284, 1443,
	285, 1443,
	286, 1443,
	287, 1443,
	288, 1443,
	289, 1443,
	290, 1443,
	292, 1443,
	294, 1443,
	295, 1443,
	296, 1443,
	297, 1443,
	298, 1443,
	299, 1443,
	300, 1443,
	302, 1443,
	303, 1443,
	304, 1443,
	307, 1443,
	308, 1443,
	309, 1443,
	310, 1443,
	312, 1443,
	313, 1443,
	314, 1443,
	315, 1443,
	318, 1443,
	319, 1443,
	320, 1443,
	321, 1443,
	323, 1443,
	325, 1443,
	326, 1443,
	327, 1443,
	328, 1443,
	329, 1443,
	330, 1443,
	333, 1443,
	338, 1443,
	339, 1443,
	340, 1443,
	341, 1443,
	342, 1443,
	343, 1443,
	344, 1443,
	346, 1443,
	347, 1443,
	348, 1443,
	349, 1443,
	350, 1443,
	351, 1443,
	352, 1443,
	353, 1443,
	355, 1443,
	356, 1443,
	357, 1443,
	358, 1443,
	359, 1443,
	360, 1443,
	361, 1443,
	362, 1443,
	363, 1443,
	365, 1443,
	368, 1443,
	369, 1443,
	372, 1443,
	373, 1443,
	-2, 0,
	-1, 849,
	128, 1347,
	305, 1347,
	348, 1347,
	369, 1347,
	-2, 0,
	-1, 866,
	128, 1369,
	305, 1369,
	348, 1369,
	369, 1369,
	-2, 0,
	-1, 867,
	165, 593,
	230, 593,
	234, 593,
	-2, 311,
	-1, 932,
	113, 689,
	180, 689,
	205, 689,
	-2, 651,
	-1, 1011,
	104, 655,
	113, 655,
	161, 655,
	180, 655,
	205, 655,
	211, 655,
	316, 655,
	-2, 996,
	-1, 1021,
	367, 1197,
	-2, 1185,
	-1, 1039,
	368, 1109,
	-2, 0,
	-1, 1063,
	165, 593,
	230, 593,
	234, 593,
	-2, 588,
	-1, 1091,
	368, 1109,
	-2, 0,
	-1, 1095,
	104, 655,
	113, 655,
	161, 655,
	180, 655,
	205, 655,
	211, 655,
	316, 655,
	-2, 751,
	-1, 1319,
	165, 593,
	230, 593,
	234, 593,
	-2, 313,
	-1, 1417,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 902,
	-1, 1418,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 903,
	-1, 1419,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 904,
	-1, 1420,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 905,
	-1, 1421,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 906,
	-1, 1422,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 907,
	-1, 1423,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 908,
	-1, 1424,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 909,
	-1, 1433,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 918,
	-1, 1434,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 919,
	-1, 1435,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 920,
	-1, 1438,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 925,
	-1, 1444,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 927,
	-1, 1446,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 931,
	-1, 1447,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 932,
	-1, 1448,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 933,
	-1, 1449,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 934,
	-1, 1518,
	128, 1120,
	367, 1220,
	-2, 1213,
	-1, 1519,
	128, 1121,
	-2, 1386,
	-1, 1520,
	128, 1122,
	-2, 1293,
	-1, 1521,
	128, 1123,
	-2, 1257,
	-1, 1522,
	128, 1124,
	-2, 1273,
	-1, 1523,
	128, 1125,
	-2, 1292,
	-1, 1524,
	128, 1126,
	-2, 1344,
	-1, 1600,
	1, 752,
	71, 752,
	104, 752,
	113, 752,
	129, 752,
	133, 752,
	135, 752,
	152, 752,
	161, 752,
	168, 752,
	177, 752,
	180, 752,
	192, 752,
	205, 752,
	207, 752,
	211, 752,
	252, 752,
	254, 752,
	316, 752,
	324, 752,
	335, 752,
	336, 752,
	345, 752,
	366, 752,
	368, 752,
	370, 752,
	371, 752,
	372, 752,
	-2, 751,
	-1, 1743,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 926,
	-1, 1744,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 928,
	-1, 1749,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 929,
	-1, 1767,
	216, 1080,
	-2, 1082,
	-1, 1937,
	221, 678,
	-2, 525,
	-1, 1992,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 930,
	-1, 1997,
	164, 0,
	-2, 946,
	-1, 2006,
	216, 1081,
	-2, 1083,
	-1, 2048,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 973,
	-1, 2049,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 974,
	-1, 2050,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 975,
	-1, 2054,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 979,
	-1, 2055,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 980,
	-1, 2056,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 981,
	-1, 2181,
	164, 0,
	-2, 947,
	-1, 2184,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 950,
	-1, 2185,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 952,
	-1, 2301,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 951,
	-1, 2302,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 953,
	-1, 2309,
	164, 0,
	-2, 982,
	-1, 2386,
	164, 0,
	-2, 983,
	-1, 2463,
	36, 0,
	145, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 1389,
}

const sqlPrivate = 57344

const sqlLast = 42096

var sqlAct = [...]int{

	630, 2136, 2462, 2471, 2437, 1664, 2510, 2472, 573, 2473,
	2335, 1672, 2391, 1975, 1643, 2025, 2282, 2461, 1218, 620,
	63, 589, 2147, 2235, 1737, 1595, 827, 784, 733, 2249,
	628, 2171, 2169, 2107, 1226, 1943, 1647, 606, 1262, 2108,
	175, 627, 2315, 775, 175, 1949, 1642, 1661, 175, 1941,
	1093, 1881, 824, 1263, 175, 1860, 2215, 1089, 1833, 175,
	175, 2163, 1220, 175, 1673, 1613, 175, 1221, 1072, 1868,
	1646, 1604, 1124, 1832, 175, 2078, 1596, 1778, 1636, 1473,
	1396, 581, 113, 1474, 1391, 448, 25, 1017, 431, 1733,
	935, 1214, 503, 1498, 870, 1103, 1073, 1101, 600, 1482,
	1721, 1461, 1344, 1547, 1458, 1340, 739, 820, 428, 869,
	1049, 1053, 1492, 786, 1644, 810, 817, 1666, 1650, 742,
	832, 1582, 1569, 1098, 721, 1080, 1006, 1514, 599, 175,
	175, 118, 1343, 934, 483, 622, 113, 175, 500, 496,
	166, 578, 1063, 461, 936, 1233, 807, 719, 119, 171,
	1062, 2250, 524, 1766, 2092, 940, 1239, 2093, 38, 1241,
	1241, 1241, 1665, 175, 175, 175, 175, 577, 2506, 39,
	175, 175, 1123, 2487, 2483, 2482, 2479, 2248, 1688, 1688,
	1123, 577, 42, 2459, 2458, 763, 2432, 1251, 1251, 1959,
	1698, 2427, 2423, 623, 2415, 2296, 1123, 572, 2248, 1958,
	475, 1090, 2388, 1990, 2366, 454, 1698, 176, 2248, 2363,
	2361, 2346, 2345, 1123, 2248, 1123, 2248, 2323, 2320, 113,
	2303, 1123, 1123, 25, 1698, 587, 2270, 2268, 2247, 2228,
	1688, 1688, 2248, 1123, 455, 2183, 2162, 1637, 2157, 1698,
	1641, 53, 1641, 54, 2088, 566, 2001, 1969, 2089, 1475,
	1688, 1930, 1929, 1857, 1850, 1848, 1123, 1123, 1851, 1688,
	736, 1847, 565, 1846, 2081, 1688, 1770, 1688, 1637, 747,
	751, 1120, 1771, 757, 582, 38, 56, 723, 1708, 951,
	952, 1697, 1688, 1688, 1687, 1698, 39, 123, 1688, 1640,
	1576, 2433, 1571, 1641, 1575, 1251, 1255, 1495, 1251, 42,
	1256, 725, 954, 726, 2296, 2081, 1570, 1985, 134, 1602,
	2061, 2003, 1930, 125, 1736, 1719, 1322, 1067, 1477, 1123,
	43, 1669, 46, 761, 851, 137, 953, 2251, 1688, 848,
	847, 846, 845, 951, 952, 844, 843, 136, 842, 841,
	767, 1341, 1777, 47, 840, 134, 839, 49, 1496, 838,
	837, 52, 836, 835, 126, 39, 954, 57, 53, 727,
	54, 1242, 1242, 1242, 724, 571, 570, 569, 42, 568,
	564, 563, 562, 135, 136, 561, 560, 556, 555, 554,
	953, 128, 55, 121, 59, 522, 60, 521, 129, 520,
	519, 1695, 959, 56, 518, 517, 516, 1497, 1494, 134,
	175, 789, 175, 1723, 175, 515, 456, 175, 514, 92,
	135, 120, 513, 175, 580, 512, 511, 510, 509, 508,
	1696, 38, 175, 175, 175, 175, 789, 781, 136, 507,
	506, 789, 39, 1958, 491, 490, 489, 488, 487, 419,
	397, 390, 951, 952, 389, 42, 959, 160, 120, 159,
	158, 578, 157, 156, 974, 155, 154, 175, 153, 152,
	151, 150, 56, 149, 135, 954, 148, 147, 454, 146,
	175, 145, 128, 1499, 57, 144, 143, 1803, 1804, 129,
	58, 2289, 1876, 1247, 1240, 1375, 175, 951, 952, 953,
	142, 141, 779, 140, 793, 134, 175, 455, 139, 65,
	121, 59, 120, 60, 53, 61, 54, 127, 974, 138,
	954, 1511, 62, 1094, 813, 813, 134, 1347, 1509, 809,
	1507, 1505, 882, 73, 136, 2505, 92, 789, 975, 2478,
	1818, 2460, 1932, 2442, 953, 124, 1570, 947, 814, 56,
	2383, 2364, 2214, 57, 833, 136, 2213, 774, 2209, 2208,
	2201, 1493, 2200, 885, 2199, 959, 2195, 2194, 175, 2193,
	135, 2192, 852, 2186, 96, 2168, 2075, 2070, 128, 121,
	59, 2069, 60, 122, 933, 129, 2068, 1703, 1259, 2011,
	1928, 135, 975, 1803, 1804, 134, 1821, 1822, 1823, 128,
	1809, 1888, 456, 1803, 1804, 92, 129, 1884, 1668, 2180,
	959, 1855, 1852, 1840, 1831, 1802, 1799, 880, 790, 1798,
	1796, 1783, 1803, 1804, 136, 1782, 1767, 1600, 947, 120,
	57, 734, 4, 1469, 946, 578, 963, 955, 956, 957,
	958, 960, 961, 790, 1025, 864, 1818, 1092, 790, 767,
	867, 2288, 772, 932, 1091, 605, 121, 59, 1225, 60,
	135, 1018, 1819, 1009, 2027, 2450, 2418, 2412, 128, 2411,
	2410, 2402, 134, 2400, 931, 129, 1362, 1803, 1804, 456,
	2378, 2377, 92, 2376, 2332, 2311, 134, 686, 883, 962,
	963, 955, 956, 957, 958, 960, 961, 2297, 120, 394,
	2394, 136, 1342, 1732, 2276, 2254, 1809, 2206, 2145, 2142,
	2141, 1731, 2139, 2116, 2115, 136, 1809, 2096, 2084, 1996,
	1919, 1914, 1901, 566, 1900, 1973, 1886, 1856, 1830, 175,
	1792, 175, 1791, 1788, 1763, 1809, 1820, 135, 1758, 1463,
	565, 943, 944, 1470, 790, 128, 948, 1824, 1054, 1057,
	1587, 135, 129, 1559, 175, 175, 1503, 1217, 735, 128,
	1901, 1070, 1061, 1047, 1046, 1071, 129, 1078, 1819, 1045,
	1044, 789, 175, 1043, 578, 120, 1042, 1021, 1127, 1041,
	1040, 1039, 1038, 1037, 175, 1036, 1051, 1052, 1035, 120,
	1809, 1055, 740, 1034, 951, 952, 1033, 1121, 1032, 1031,
	1030, 1058, 957, 958, 960, 961, 175, 1029, 1076, 1092,
	1022, 1010, 175, 1009, 175, 863, 175, 954, 749, 753,
	175, 759, 1224, 855, 829, 2295, 2188, 2167, 1216, 2091,
	113, 2087, 1814, 1812, 1813, 1805, 1806, 1807, 1808, 1810,
	1811, 953, 1820, 1700, 1769, 955, 956, 957, 958, 960,
	961, 1018, 1819, 1874, 1588, 1803, 1804, 1088, 1971, 1007,
	175, 175, 1707, 1066, 1013, 1944, 1637, 789, 1111, 175,
	1064, 2299, 175, 1096, 1230, 2298, 1854, 1853, 1068, 2292,
	2094, 1960, 1495, 1094, 688, 1260, 879, 1510, 1109, 929,
	1059, 773, 1742, 1127, 1508, 1060, 1506, 1504, 175, 1027,
	876, 1328, 1976, 175, 1222, 1706, 1110, 2316, 175, 175,
	1665, 175, 2028, 175, 1483, 175, 403, 175, 809, 1314,
	420, 1122, 1050, 1774, 923, 1104, 1820, 1105, 175, 1815,
	1816, 1817, 1954, 1496, 175, 175, 2103, 2445, 1814, 1812,
	1813, 1805, 1806, 1807, 1808, 1810, 1811, 1692, 425, 400,
	398, 1805, 1806, 1807, 1808, 1810, 1811, 2503, 1232, 2502,
	175, 1235, 2262, 924, 1127, 1348, 1709, 1092, 1982, 1614,
	951, 952, 1807, 1808, 1810, 1811, 2356, 2355, 790, 714,
	716, 1244, 1497, 1494, 1246, 1128, 2422, 712, 1249, 915,
	1349, 2354, 710, 954, 707, 2353, 735, 2131, 2273, 864,
	2129, 1257, 424, 1106, 113, 1258, 1024, 2100, 2099, 1315,
	1316, 1787, 1786, 1785, 576, 1397, 1404, 953, 1104, 1319,
	1105, 1345, 1333, 1812, 1813, 1805, 1806, 1807, 1808, 1810,
	1811, 1363, 403, 1329, 1784, 1745, 1405, 1378, 1691, 1633,
	578, 1353, 1617, 1629, 1104, 578, 1105, 1357, 1356, 1358,
	409, 1359, 1627, 1360, 1445, 1361, 1065, 760, 1499, 1269,
	1373, 1563, 1562, 877, 424, 687, 1406, 423, 753, 1662,
	2134, 575, 1367, 1369, 790, 1216, 175, 1376, 175, 759,
	1337, 175, 566, 959, 1972, 566, 566, 161, 791, 1253,
	1377, 1372, 175, 2135, 1925, 1568, 1106, 1374, 1395, 1387,
	1128, 1127, 1388, 1389, 175, 1460, 878, 2421, 175, 1212,
	410, 175, 1478, 791, 2337, 175, 1480, 558, 791, 175,
	1460, 577, 1106, 1317, 175, 399, 1352, 922, 578, 423,
	175, 1127, 470, 1542, 175, 1606, 1493, 950, 2456, 2118,
	862, 2127, 1471, 1468, 1616, 974, 1236, 961, 2021, 404,
	1589, 1607, 909, 1712, 400, 1269, 1269, 1483, 1332, 1331,
	1606, 1341, 1338, 1499, 401, 1714, 1605, 2429, 1118, 164,
	1467, 1128, 888, 1590, 1525, 1465, 951, 952, 1951, 1701,
	1087, 1734, 1735, 2502, 1117, 1593, 1715, 1618, 1620, 2494,
	910, 1921, 2430, 1952, 1442, 1916, 38, 1114, 1713, 954,
	1112, 2405, 1566, 1635, 1115, 1983, 1625, 39, 1811, 1574,
	1565, 422, 1631, 753, 791, 1579, 1584, 1585, 1580, 975,
	42, 1981, 1116, 953, 1499, 1623, 574, 1096, 175, 928,
	1628, 1107, 1615, 1610, 165, 1371, 175, 1634, 1951, 1048,
	425, 399, 1912, 454, 1335, 1656, 884, 175, 549, 175,
	421, 175, 2307, 2360, 175, 1079, 175, 1004, 175, 175,
	2493, 175, 789, 789, 1532, 404, 586, 789, 1102, 2475,
	400, 175, 455, 422, 1013, 1790, 412, 411, 2518, 53,
	401, 54, 1485, 718, 1241, 708, 717, 1599, 1685, 959,
	919, 1583, 577, 708, 914, 1517, 1517, 1530, 709, 2175,
	708, 1550, 425, 1440, 1443, 1554, 1555, 1557, 1128, 1320,
	593, 2119, 421, 1083, 56, 1686, 1308, 391, 955, 956,
	957, 958, 960, 961, 1107, 2474, 896, 2501, 550, 1667,
	2513, 1667, 2243, 2499, 2338, 1336, 1086, 1439, 1128, 2281,
	2018, 1659, 2057, 1679, 462, 2204, 813, 113, 813, 858,
	1107, 974, 1081, 113, 1083, 920, 850, 1456, 1127, 2476,
	1694, 1084, 2492, 1671, 1747, 1682, 175, 467, 2244, 1680,
	868, 1681, 1454, 463, 1689, 1683, 1082, 1086, 162, 1459,
	833, 2125, 175, 175, 175, 1693, 175, 1690, 939, 2019,
	635, 1870, 1702, 1581, 1924, 57, 1755, 1351, 2348, 740,
	1099, 889, 1084, 1704, 464, 175, 1603, 949, 559, 921,
	861, 1753, 2347, 873, 2330, 2397, 2477, 163, 1055, 2102,
	1058, 121, 59, 469, 60, 975, 938, 466, 1466, 1215,
	1720, 1052, 1051, 1441, 2524, 551, 1897, 134, 1085, 890,
	1893, 1710, 887, 2058, 456, 2258, 1882, 92, 791, 2059,
	1450, 2243, 2205, 1079, 2236, 1129, 113, 753, 1451, 1234,
	1452, 1234, 2234, 1660, 1457, 1499, 136, 2238, 1231, 790,
	790, 1383, 873, 1223, 790, 2239, 2511, 2240, 874, 1085,
	2519, 392, 875, 1724, 1219, 2017, 1242, 2244, 2438, 1750,
	1726, 938, 1728, 937, 578, 1327, 1366, 1323, 1730, 1751,
	418, 2148, 135, 1756, 1776, 2283, 168, 2242, 1869, 2237,
	128, 1083, 1342, 1339, 552, 1883, 2245, 129, 939, 777,
	413, 964, 962, 963, 955, 956, 957, 958, 960, 961,
	549, 897, 2512, 873, 1086, 2331, 1903, 874, 465, 1902,
	120, 875, 1325, 2523, 791, 1384, 553, 393, 586, 2261,
	1081, 776, 2257, 2514, 1326, 1748, 2260, 1746, 937, 1084,
	1740, 1871, 1578, 1577, 478, 1128, 873, 575, 578, 795,
	1129, 472, 1453, 1762, 1082, 806, 2137, 1803, 1804, 1455,
	804, 2274, 175, 1127, 1923, 1858, 2328, 3, 175, 175,
	1864, 1773, 175, 468, 2239, 2241, 2240, 175, 874, 2216,
	175, 2079, 875, 1502, 453, 33, 918, 1865, 175, 2310,
	550, 1752, 907, 905, 175, 175, 175, 2329, 1754, 2203,
	175, 452, 32, 175, 2133, 1878, 2242, 1834, 1995, 175,
	175, 175, 175, 175, 903, 2245, 1085, 1926, 175, 1797,
	175, 1129, 451, 29, 175, 450, 69, 615, 901, 1877,
	449, 68, 175, 446, 21, 1863, 1894, 1757, 1837, 1838,
	1839, 1887, 175, 2259, 175, 1705, 175, 789, 789, 1639,
	175, 1632, 1626, 1873, 175, 1898, 762, 1859, 927, 175,
	926, 175, 856, 447, 22, 1835, 1364, 172, 175, 1355,
	1809, 395, 765, 1936, 1937, 405, 1931, 1028, 1933, 578,
	1501, 426, 175, 789, 899, 1862, 473, 172, 1889, 1898,
	481, 1866, 1867, 486, 2241, 1872, 175, 551, 893, 2470,
	1913, 505, 414, 1761, 766, 745, 1918, 1956, 477, 1968,
	1764, 1911, 917, 690, 802, 471, 805, 740, 906, 904,
	1302, 803, 33, 445, 27, 444, 19, 1780, 1781, 2435,
	1934, 175, 1819, 740, 1938, 2232, 1601, 2123, 1935, 32,
	902, 2121, 1970, 415, 753, 1947, 2101, 1940, 1663, 753,
	1953, 442, 18, 913, 900, 759, 722, 722, 1129, 1961,
	29, 443, 17, 69, 395, 435, 14, 1657, 68, 1655,
	1128, 21, 1252, 416, 1250, 417, 552, 1829, 2013, 2014,
	2015, 175, 1967, 1248, 1550, 1550, 1550, 1998, 1129, 1842,
	395, 395, 755, 395, 1980, 1269, 1977, 172, 764, 1978,
	1979, 22, 1245, 584, 1243, 549, 1820, 1119, 553, 1986,
	898, 1988, 1984, 436, 15, 1113, 1302, 1302, 441, 51,
	434, 50, 689, 586, 892, 632, 1108, 1962, 1963, 1269,
	1964, 1965, 440, 11, 2008, 1942, 2004, 2002, 1397, 2032,
	801, 2371, 439, 44, 941, 433, 45, 1397, 2037, 2007,
	1738, 1803, 1804, 730, 790, 790, 585, 438, 7, 2503,
	2029, 27, 175, 19, 2034, 2031, 2294, 706, 175, 2020,
	2022, 2023, 1676, 731, 2036, 2293, 912, 175, 175, 1346,
	2067, 2063, 1269, 759, 759, 550, 437, 6, 2164, 18,
	790, 2097, 1606, 2090, 432, 5, 1606, 2064, 1621, 17,
	2373, 1301, 1619, 14, 2062, 1805, 1806, 1807, 1808, 1810,
	1811, 2114, 1622, 1739, 2156, 457, 951, 952, 942, 791,
	791, 175, 2113, 175, 791, 2095, 2132, 2083, 113, 2080,
	2082, 175, 2407, 2112, 789, 2077, 2251, 951, 952, 954,
	891, 2385, 1269, 2217, 2143, 945, 1630, 732, 1624, 175,
	175, 15, 2434, 2158, 2098, 2105, 51, 2140, 50, 2279,
	1670, 2150, 1658, 953, 1809, 1654, 1567, 175, 2149, 1318,
	11, 1261, 2161, 2509, 2126, 2522, 175, 479, 1269, 1269,
	44, 1127, 2152, 45, 953, 2086, 2153, 1269, 1269, 2322,
	2144, 2138, 551, 711, 713, 7, 925, 1301, 1301, 1803,
	1804, 951, 952, 2151, 2177, 2160, 2222, 1725, 759, 1727,
	2154, 753, 2166, 2159, 2076, 1129, 1717, 1716, 175, 2024,
	1269, 2165, 1717, 1974, 6, 2182, 1819, 505, 1879, 505,
	1741, 796, 5, 1849, 799, 1718, 1564, 1561, 1560, 1491,
	395, 1015, 2190, 2016, 1025, 1023, 916, 911, 908, 505,
	505, 395, 821, 2178, 2122, 894, 2124, 860, 1321, 557,
	2336, 460, 1354, 895, 1875, 1586, 2428, 2196, 1789, 583,
	2390, 552, 175, 1862, 2306, 175, 1500, 1026, 48, 2110,
	609, 2071, 2233, 2202, 505, 1127, 175, 175, 2104, 2220,
	175, 175, 175, 1649, 1648, 1130, 1330, 505, 631, 1516,
	1820, 2227, 1398, 553, 705, 633, 1266, 175, 634, 1267,
	1056, 2226, 175, 859, 175, 621, 175, 175, 175, 1264,
	175, 2256, 175, 505, 789, 2114, 830, 1674, 2231, 2219,
	2252, 1334, 175, 175, 2223, 2221, 2113, 1464, 1481, 2255,
	789, 790, 1772, 1019, 601, 613, 2277, 2112, 612, 2114,
	1479, 854, 1880, 1950, 2128, 2114, 2287, 2224, 1382, 2130,
	2113, 1729, 1379, 2275, 1946, 2120, 2113, 2285, 402, 2280,
	1800, 2112, 828, 1539, 2284, 1531, 2272, 2112, 1527, 2278,
	1269, 930, 1077, 1005, 1675, 395, 881, 1957, 1128, 2286,
	2305, 1699, 1069, 2300, 2291, 2218, 1814, 1812, 1813, 1805,
	1806, 1807, 1808, 1810, 1811, 1390, 729, 740, 728, 1324,
	1711, 998, 997, 740, 740, 715, 2399, 740, 872, 871,
	1896, 2517, 2406, 175, 2117, 175, 1268, 1127, 175, 2444,
	1386, 133, 130, 2290, 132, 2312, 175, 131, 1922, 1890,
	1129, 72, 1127, 31, 30, 91, 90, 89, 88, 87,
	86, 85, 2319, 84, 83, 82, 81, 80, 2114, 2324,
	79, 78, 2321, 1915, 2340, 77, 76, 2342, 75, 2113,
	74, 501, 175, 498, 71, 789, 70, 1927, 2339, 175,
	2112, 28, 24, 2358, 1216, 95, 2114, 175, 175, 789,
	789, 23, 1128, 2372, 67, 1939, 66, 2113, 26, 2326,
	2362, 2357, 2369, 16, 1215, 2384, 2350, 175, 2112, 2368,
	10, 2374, 175, 1215, 2341, 2381, 2382, 20, 2379, 175,
	2380, 117, 1268, 1268, 791, 791, 2370, 2401, 116, 1533,
	115, 790, 114, 13, 12, 112, 111, 2393, 110, 2395,
	2387, 109, 108, 2404, 175, 175, 486, 790, 722, 9,
	8, 175, 94, 2396, 41, 2365, 2416, 40, 93, 789,
	791, 106, 2414, 2403, 175, 103, 105, 2417, 789, 789,
	102, 395, 395, 104, 107, 99, 1989, 100, 101, 98,
	97, 37, 36, 2420, 35, 34, 2419, 578, 1078, 172,
	1269, 175, 2, 175, 1, 0, 175, 0, 1127, 0,
	0, 395, 0, 0, 0, 0, 2451, 2440, 0, 2453,
	2351, 2352, 0, 0, 0, 1254, 2452, 0, 2441, 2457,
	2425, 2426, 0, 1229, 175, 0, 0, 2455, 2114, 395,
	0, 395, 0, 395, 1128, 0, 2468, 1237, 2467, 2113,
	2469, 175, 2454, 0, 2486, 0, 1269, 175, 2484, 1128,
	2112, 0, 2480, 0, 0, 2485, 2491, 2318, 2488, 0,
	0, 175, 2489, 2490, 0, 480, 0, 0, 0, 0,
	2446, 2500, 2498, 458, 0, 2504, 1302, 505, 172, 0,
	0, 0, 790, 0, 2508, 459, 172, 0, 2507, 505,
	0, 0, 0, 459, 2344, 1269, 790, 790, 2516, 2520,
	2515, 0, 2521, 0, 0, 0, 0, 740, 0, 0,
	1302, 0, 0, 0, 0, 505, 0, 0, 0, 0,
	505, 0, 0, 0, 0, 172, 505, 0, 505, 0,
	505, 0, 505, 462, 505, 0, 0, 0, 591, 0,
	0, 462, 0, 0, 0, 1365, 0, 0, 1803, 1804,
	0, 505, 505, 0, 0, 0, 467, 0, 0, 0,
	0, 0, 463, 1302, 467, 0, 790, 429, 0, 1304,
	463, 0, 0, 0, 0, 790, 790, 505, 610, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 38, 0,
	0, 0, 0, 464, 1676, 740, 0, 0, 0, 39,
	0, 464, 0, 0, 0, 1128, 0, 0, 0, 0,
	0, 791, 42, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 1302, 466, 2431, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2447, 2448, 2449, 0, 0, 0, 0, 1301, 1129, 1302,
	1302, 1809, 0, 0, 455, 1304, 1304, 0, 1302, 1302,
	0, 53, 0, 54, 0, 0, 0, 0, 1303, 0,
	0, 1265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1301, 567, 486, 0, 722, 0, 0, 764, 579,
	0, 1302, 0, 1759, 1760, 0, 56, 0, 0, 395,
	0, 0, 0, 0, 0, 741, 64, 740, 0, 0,
	0, 1598, 0, 1819, 0, 395, 0, 465, 395, 0,
	0, 0, 1611, 0, 0, 465, 395, 0, 0, 0,
	0, 395, 0, 0, 1301, 0, 0, 395, 0, 1533,
	1533, 1638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2265, 1129, 0, 0, 2269, 0, 0, 0, 0,
	0, 0, 0, 0, 1303, 1303, 0, 1265, 1265, 1826,
	1827, 1828, 468, 0, 0, 0, 0, 57, 0, 0,
	468, 0, 0, 0, 0, 0, 0, 1820, 0, 0,
	0, 791, 0, 0, 1301, 0, 0, 0, 768, 770,
	0, 0, 0, 121, 59, 0, 60, 791, 0, 0,
	0, 0, 0, 0, 0, 1533, 1533, 1533, 0, 134,
	0, 0, 0, 0, 0, 0, 456, 0, 0, 92,
	1301, 1301, 0, 0, 0, 1645, 0, 0, 0, 1301,
	1301, 0, 0, 764, 0, 0, 0, 0, 136, 0,
	0, 1302, 0, 0, 395, 0, 1678, 0, 505, 0,
	0, 505, 0, 505, 0, 395, 395, 0, 1684, 0,
	0, 2334, 1301, 0, 0, 0, 0, 853, 1611, 0,
	0, 0, 0, 857, 135, 1813, 1805, 1806, 1807, 1808,
	1810, 1811, 128, 0, 1129, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 2367, 0, 1129,
	591, 0, 38, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 430, 39, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 42, 0, 0, 0,
	0, 0, 791, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 791, 791, 0, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1268, 1722, 0, 0, 0, 0, 0, 0,
	0, 1993, 1994, 0, 0, 0, 2413, 0, 455, 395,
	395, 395, 0, 395, 0, 53, 0, 54, 0, 579,
	999, 1000, 1001, 1002, 1003, 0, 1268, 0, 0, 0,
	1012, 0, 395, 0, 0, 0, 0, 0, 0, 0,
	1020, 0, 0, 0, 0, 0, 791, 1533, 1533, 0,
	56, 2443, 1301, 0, 0, 791, 791, 0, 0, 0,
	2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047,
	2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 1268,
	2060, 1302, 0, 0, 0, 1129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1676, 0, 0, 0, 1533, 1533, 1533, 1533,
	1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
	1533, 1533, 1533, 1533, 1533, 0, 1533, 0, 0, 0,
	0, 57, 0, 0, 0, 0, 0, 1302, 0, 1268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1074, 1074, 0, 121, 59, 0,
	60, 591, 0, 0, 0, 0, 0, 0, 0, 0,
	567, 0, 0, 134, 0, 1268, 1268, 0, 0, 0,
	456, 0, 0, 92, 1268, 1268, 1302, 0, 0, 0,
	0, 1008, 0, 1011, 0, 0, 0, 0, 0, 0,
	1016, 0, 136, 0, 0, 0, 0, 0, 0, 395,
	0, 0, 0, 0, 0, 395, 395, 1268, 0, 395,
	0, 0, 0, 0, 1598, 0, 0, 1598, 0, 0,
	0, 0, 0, 0, 0, 1885, 0, 0, 135, 0,
	0, 395, 1891, 1892, 0, 0, 128, 1611, 0, 0,
	1899, 0, 0, 129, 0, 0, 1904, 1905, 1907, 1909,
	1910, 0, 1301, 0, 0, 395, 0, 1917, 0, 0,
	0, 1920, 0, 0, 0, 0, 120, 0, 0, 395,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1229,
	0, 1229, 0, 505, 0, 0, 0, 395, 0, 0,
	0, 1945, 0, 591, 591, 0, 395, 0, 1955, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 1301, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 1722,
	0, 0, 1095, 0, 0, 1304, 0, 0, 0, 0,
	0, 0, 0, 1722, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1380, 0, 1385, 0, 1301, 0, 1304,
	0, 1392, 0, 0, 0, 0, 0, 1268, 395, 0,
	0, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
	1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425,
	1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435,
	1436, 1437, 1438, 0, 1444, 0, 1446, 1447, 1448, 1449,
	0, 0, 1304, 0, 0, 0, 0, 0, 2026, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 0, 0,
	1012, 0, 0, 0, 1303, 0, 0, 1265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2309, 1512,
	1513, 0, 0, 1529, 0, 1541, 1543, 1548, 1551, 1552,
	1553, 0, 0, 0, 0, 0, 0, 0, 1303, 0,
	0, 1265, 1304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2333,
	0, 64, 0, 0, 1533, 0, 0, 0, 0, 395,
	0, 0, 0, 0, 0, 1598, 0, 0, 1304, 1304,
	0, 0, 0, 0, 764, 1598, 0, 1304, 1304, 567,
	0, 1303, 567, 567, 1265, 0, 0, 0, 0, 2109,
	0, 0, 0, 0, 0, 1533, 0, 0, 951, 952,
	0, 0, 0, 0, 991, 992, 993, 0, 0, 0,
	1304, 0, 0, 0, 0, 2386, 0, 0, 1611, 0,
	1229, 954, 0, 0, 995, 0, 0, 0, 2146, 0,
	0, 0, 0, 0, 0, 1462, 0, 1268, 0, 0,
	0, 1303, 0, 0, 1265, 953, 395, 395, 579, 0,
	0, 973, 0, 1011, 0, 0, 0, 0, 0, 0,
	0, 1533, 0, 0, 2172, 0, 0, 0, 0, 0,
	0, 0, 0, 2174, 0, 0, 0, 1303, 1303, 0,
	1265, 1265, 0, 0, 0, 0, 1303, 1303, 0, 1265,
	1265, 0, 0, 1268, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 977, 978, 979, 0, 0, 0, 0,
	0, 959, 0, 0, 0, 2197, 0, 0, 0, 1303,
	741, 0, 1265, 0, 0, 0, 1803, 1804, 0, 1821,
	1822, 1823, 0, 988, 996, 0, 1095, 0, 0, 0,
	0, 0, 1268, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 986, 0, 395,
	1304, 0, 764, 974, 0, 0, 0, 0, 0, 1818,
	0, 0, 0, 1598, 764, 0, 0, 2229, 2230, 1611,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2109, 764, 0, 0, 0, 0, 2263,
	0, 2264, 0, 395, 2266, 2267, 0, 395, 0, 2271,
	0, 0, 0, 0, 0, 0, 0, 2109, 0, 764,
	1645, 0, 980, 2109, 0, 0, 0, 0, 0, 1809,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1825, 989, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 64, 0, 0, 0, 0, 1303,
	1824, 0, 1265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	64, 1819, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1743, 1744, 0, 0, 0,
	1611, 1749, 2325, 0, 0, 2327, 0, 0, 0, 0,
	0, 987, 0, 395, 0, 0, 2109, 0, 0, 0,
	0, 990, 0, 964, 962, 963, 955, 956, 957, 958,
	960, 961, 0, 1768, 0, 0, 0, 0, 0, 1775,
	0, 2359, 1779, 0, 2109, 0, 0, 0, 0, 395,
	0, 0, 0, 0, 0, 1820, 764, 0, 0, 1793,
	1304, 0, 0, 0, 2172, 2172, 0, 0, 0, 0,
	0, 0, 951, 952, 0, 981, 982, 983, 991, 992,
	993, 0, 0, 64, 2392, 0, 0, 0, 984, 1598,
	0, 0, 0, 1012, 0, 954, 1229, 0, 995, 0,
	1548, 1548, 1548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1304, 0, 0, 953,
	0, 2408, 2409, 0, 0, 973, 1074, 0, 395, 970,
	0, 591, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2424, 1815, 1816, 1817, 0, 0, 0, 0, 0,
	0, 1814, 1812, 1813, 1805, 1806, 1807, 1808, 1810, 1811,
	0, 0, 1462, 0, 0, 1304, 0, 0, 2439, 1303,
	764, 0, 1265, 395, 0, 0, 976, 977, 978, 979,
	0, 0, 1011, 0, 0, 959, 2109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2392, 0, 0, 0, 0, 0, 988, 996, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 764, 0,
	0, 1948, 0, 0, 395, 1303, 994, 0, 1265, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2497, 0,
	0, 986, 0, 0, 1966, 0, 0, 974, 0, 0,
	0, 0, 0, 0, 0, 0, 1011, 0, 0, 0,
	0, 0, 591, 591, 0, 0, 0, 0, 0, 0,
	0, 0, 985, 0, 1303, 591, 0, 1265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1987, 0, 0,
	741, 0, 1392, 0, 0, 0, 741, 741, 1991, 0,
	741, 1992, 0, 0, 0, 0, 980, 0, 0, 0,
	0, 0, 0, 1997, 0, 0, 0, 0, 0, 0,
	0, 975, 2005, 0, 0, 0, 0, 0, 0, 0,
	2009, 0, 0, 1966, 0, 0, 0, 989, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 2033, 0, 0, 0, 2035, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 0, 0,
	2065, 2066, 0, 0, 0, 0, 0, 0, 0, 2072,
	2073, 2074, 0, 0, 0, 987, 0, 0, 965, 966,
	972, 971, 967, 968, 969, 990, 0, 964, 962, 963,
	955, 956, 957, 958, 960, 961, 2085, 0, 0, 0,
	0, 0, 0, 0, 2210, 0, 0, 951, 952, 0,
	981, 982, 983, 991, 992, 993, 0, 0, 0, 0,
	0, 0, 0, 984, 0, 0, 2106, 0, 0, 0,
	954, 0, 0, 995, 0, 0, 0, 0, 0, 0,
	0, 0, 951, 952, 0, 981, 982, 983, 991, 992,
	993, 0, 0, 0, 953, 0, 0, 0, 984, 0,
	973, 0, 0, 0, 970, 954, 0, 0, 995, 0,
	0, 1803, 1804, 0, 1821, 1822, 1823, 1074, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 2179, 0, 953,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 976, 977, 978, 979, 0, 0, 0, 0, 0,
	959, 2181, 0, 0, 1818, 2184, 2185, 1803, 1804, 2187,
	1821, 1822, 1823, 0, 0, 0, 2189, 0, 2191, 0,
	0, 0, 988, 996, 0, 64, 976, 977, 978, 979,
	0, 0, 0, 0, 2198, 959, 0, 0, 0, 0,
	741, 994, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 986, 988, 996, 0,
	1818, 0, 974, 0, 1809, 0, 0, 2207, 0, 0,
	0, 0, 0, 0, 0, 0, 994, 0, 1803, 1804,
	0, 1821, 1822, 1823, 0, 0, 0, 985, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 974, 0, 0,
	0, 0, 0, 0, 0, 1824, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2253, 0, 0,
	1809, 980, 985, 0, 0, 0, 1819, 0, 741, 0,
	0, 1818, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 951, 952, 0, 981, 982, 983, 991, 992, 993,
	0, 0, 989, 0, 0, 0, 980, 984, 0, 0,
	0, 1824, 0, 0, 954, 0, 0, 995, 0, 0,
	0, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1819, 0, 0, 2301, 2302, 989, 953, 0,
	0, 1809, 0, 0, 973, 0, 0, 0, 970, 0,
	1820, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2314, 0, 0, 0,
	987, 0, 2317, 965, 966, 972, 971, 967, 968, 969,
	990, 0, 964, 962, 963, 955, 956, 957, 958, 960,
	961, 0, 0, 0, 0, 976, 977, 978, 979, 1845,
	741, 0, 0, 1819, 959, 987, 1820, 0, 965, 966,
	972, 971, 967, 968, 969, 990, 2349, 964, 962, 963,
	955, 956, 957, 958, 960, 961, 988, 996, 0, 0,
	0, 0, 0, 0, 1844, 0, 0, 1815, 1816, 1817,
	0, 0, 0, 0, 0, 994, 1814, 1812, 1813, 1805,
	1806, 1807, 1808, 1810, 1811, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 1820, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2398, 0,
	0, 985, 0, 1815, 1816, 1817, 0, 0, 0, 0,
	0, 0, 1814, 1812, 1813, 1805, 1806, 1807, 1808, 1810,
	1811, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 980, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 0,
	0, 0, 0, 0, 1815, 1816, 1817, 0, 0, 0,
	0, 0, 0, 1814, 1812, 1813, 1805, 1806, 1807, 1808,
	1810, 1811, 0, 0, 0, 2466, 2466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 2481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2375, 0, 0, 0, 0, 0, 0, 0, 2466,
	0, 0, 0, 0, 987, 0, 0, 965, 966, 972,
	971, 967, 968, 969, 990, 0, 964, 962, 963, 955,
	956, 957, 958, 960, 961, 0, 0, 0, 0, 0,
	0, 0, 0, 1843, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1011, 177, 178, 1131, 179,
	1132, 1133, 1134, 1135, 332, 1136, 1137, 1138, 1139, 180,
	181, 182, 333, 334, 335, 336, 183, 337, 338, 1140,
	184, 339, 340, 185, 186, 1141, 1142, 341, 342, 343,
	1143, 187, 344, 1144, 792, 1145, 188, 189, 190, 0,
	191, 1146, 192, 0, 193, 194, 1147, 691, 195, 196,
	197, 1148, 1149, 1151, 1150, 1152, 1153, 1154, 198, 199,
	396, 200, 345, 201, 346, 347, 1155, 202, 1156, 203,
	1157, 204, 1158, 1159, 205, 206, 1160, 207, 1161, 0,
	1162, 348, 208, 209, 210, 349, 350, 1163, 692, 1164,
	0, 0, 0, 0, 211, 212, 351, 352, 353, 0,
	213, 1165, 214, 1166, 1167, 693, 1168, 215, 354, 1169,
	355, 1170, 0, 216, 217, 0, 0, 218, 219, 356,
	357, 695, 1171, 358, 223, 1172, 220, 1173, 694, 221,
	359, 222, 360, 361, 362, 363, 364, 1174, 365, 1175,
	696, 224, 225, 226, 697, 227, 228, 229, 1176, 231,
	230, 1177, 366, 698, 232, 699, 1178, 233, 1179, 1180,
	234, 0, 235, 236, 237, 239, 367, 238, 700, 240,
	241, 243, 242, 1181, 1182, 1183, 368, 244, 369, 245,
	246, 1184, 247, 1185, 1186, 248, 1187, 1188, 249, 370,
	701, 250, 702, 371, 251, 252, 253, 254, 255, 1189,
	256, 372, 257, 373, 258, 1190, 259, 260, 261, 262,
	263, 374, 264, 265, 1191, 266, 267, 268, 269, 270,
	0, 272, 273, 271, 274, 275, 276, 277, 1192, 278,
	703, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	1193, 290, 376, 289, 291, 292, 1194, 293, 282, 283,
	294, 704, 295, 377, 378, 296, 1195, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 1196, 304, 1197,
	305, 306, 307, 308, 309, 310, 311, 1198, 381, 382,
	383, 1199, 1200, 312, 313, 384, 385, 1201, 314, 315,
	316, 317, 1202, 1203, 318, 319, 320, 321, 1204, 322,
	1205, 386, 323, 324, 325, 387, 388, 1206, 1207, 326,
	1208, 1209, 1210, 1211, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1126, 0, 0, 0, 0,
	0, 1591, 0, 0, 0, 0, 0, 0, 0, 0,
	1592, 177, 178, 1131, 179, 1132, 1133, 1134, 1135, 332,
	1136, 1137, 1138, 1139, 180, 181, 182, 333, 334, 335,
	336, 183, 337, 338, 1140, 184, 339, 340, 185, 186,
	1141, 1142, 341, 342, 343, 1143, 187, 344, 1144, 792,
	1145, 188, 189, 190, 0, 191, 1146, 192, 0, 193,
	194, 1147, 691, 195, 196, 197, 1148, 1149, 1151, 1150,
	1152, 1153, 1154, 198, 199, 396, 200, 345, 201, 346,
	347, 1155, 202, 1156, 203, 1157, 204, 1158, 1159, 205,
	206, 1160, 207, 1161, 0, 1162, 348, 208, 209, 210,
	349, 350, 1163, 692, 1164, 0, 0, 0, 0, 211,
	212, 351, 352, 353, 0, 213, 1165, 214, 1166, 1167,
	693, 1168, 215, 354, 1169, 355, 1170, 0, 216, 217,
	0, 0, 218, 219, 356, 357, 695, 1171, 358, 223,
	1172, 220, 1173, 694, 221, 359, 222, 360, 361, 362,
	363, 364, 1174, 365, 1175, 696, 224, 225, 226, 697,
	227, 228, 229, 1176, 231, 230, 1177, 366, 698, 232,
	699, 1178, 233, 1179, 1180, 234, 0, 235, 236, 237,
	239, 367, 238, 700, 240, 241, 243, 242, 1181, 1182,
	1183, 368, 244, 369, 245, 246, 1184, 247, 1185, 1186,
	248, 1187, 1188, 249, 370, 701, 250, 702, 371, 251,
	252, 253, 254, 255, 1189, 256, 372, 257, 373, 258,
	1190, 259, 260, 261, 262, 263, 374, 264, 265, 1191,
	266, 267, 268, 269, 270, 0, 272, 273, 271, 274,
	275, 276, 277, 1192, 278, 703, 279, 280, 375, 281,
	0, 285, 286, 287, 288, 1193, 290, 376, 289, 291,
	292, 1194, 293, 282, 283, 294, 704, 295, 377, 378,
	296, 1195, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 380, 1196, 304, 1197, 305, 306, 307, 308, 309,
	310, 311, 1198, 381, 382, 383, 1199, 1200, 312, 313,
	384, 385, 1201, 314, 315, 316, 317, 1202, 1203, 318,
	319, 320, 321, 1204, 322, 1205, 386, 323, 324, 325,
	387, 388, 1206, 1207, 326, 1208, 1209, 1210, 1211, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 1126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2225, 177, 178, 1131,
	179, 1132, 1133, 1134, 1135, 332, 1136, 1137, 1138, 1139,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	1140, 184, 339, 340, 185, 186, 1141, 1142, 341, 342,
	343, 1143, 187, 344, 1144, 792, 1145, 188, 189, 190,
	0, 191, 1146, 192, 0, 193, 194, 1147, 691, 195,
	196, 197, 1148, 1149, 1151, 1150, 1152, 1153, 1154, 198,
	199, 396, 200, 345, 201, 346, 347, 1155, 202, 1156,
	203, 1157, 204, 1158, 1159, 205, 206, 1160, 207, 1161,
	0, 1162, 348, 208, 209, 210, 349, 350, 1163, 692,
	1164, 0, 0, 0, 0, 211, 212, 351, 352, 353,
	0, 213, 1165, 214, 1166, 1167, 693, 1168, 215, 354,
	1169, 355, 1170, 0, 216, 217, 0, 0, 218, 219,
	356, 357, 695, 1171, 358, 223, 1172, 220, 1173, 694,
	221, 359, 222, 360, 361, 362, 363, 364, 1174, 365,
	1175, 696, 224, 225, 226, 697, 227, 228, 229, 1176,
	231, 230, 1177, 366, 698, 232, 699, 1178, 233, 1179,
	1180, 234, 0, 235, 236, 237, 239, 367, 238, 700,
	240, 241, 243, 242, 1181, 1182, 1183, 368, 244, 369,
	245, 246, 1184, 247, 1185, 1186, 248, 1187, 1188, 249,
	370, 701, 250, 702, 371, 251, 252, 253, 254, 255,
	1189, 256, 372, 257, 373, 258, 1190, 259, 260, 261,
	262, 263, 374, 264, 265, 1191, 266, 267, 268, 269,
	270, 0, 272, 273, 271, 274, 275, 276, 277, 1192,
	278, 703, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 1193, 290, 376, 289, 291, 292, 1194, 293, 282,
	283, 294, 704, 295, 377, 378, 296, 1195, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 1196, 304,
	1197, 305, 306, 307, 308, 309, 310, 311, 1198, 381,
	382, 383, 1199, 1200, 312, 313, 384, 385, 1201, 314,
	315, 316, 317, 1202, 1203, 318, 319, 320, 321, 1204,
	322, 1205, 386, 323, 324, 325, 387, 388, 1206, 1207,
	326, 1208, 1209, 1210, 1211, 327, 328, 329, 330, 331,
	0, 0, 1126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1125, 177, 178,
	1131, 179, 1132, 1133, 1134, 1135, 332, 1136, 1137, 1138,
	1139, 180, 181, 182, 333, 334, 335, 336, 183, 337,
	338, 1140, 184, 339, 340, 185, 186, 1141, 1142, 341,
	342, 343, 1143, 187, 344, 1144, 792, 1145, 188, 189,
	190, 0, 191, 1146, 192, 0, 193, 194, 1147, 691,
	195, 196, 197, 1148, 1149, 1151, 1150, 1152, 1153, 1154,
	198, 199, 396, 200, 345, 201, 346, 347, 1155, 202,
	1156, 203, 1157, 204, 1158, 1159, 205, 206, 1160, 207,
	1161, 0, 1162, 348, 208, 209, 210, 349, 350, 1163,
	692, 1164, 0, 0, 0, 0, 211, 212, 351, 352,
	353, 0, 213, 1165, 214, 1166, 1167, 693, 1168, 215,
	354, 1169, 355, 1170, 0, 216, 217, 0, 0, 218,
	219, 356, 357, 695, 1171, 358, 223, 1172, 220, 1173,
	694, 221, 359, 222, 360, 361, 362, 363, 364, 1174,
	365, 1175, 696, 224, 225, 226, 697, 227, 228, 229,
	1176, 231, 230, 1177, 366, 698, 232, 699, 1178, 233,
	1179, 1180, 234, 0, 235, 236, 237, 239, 367, 238,
	700, 240, 241, 243, 242, 1181, 1182, 1183, 368, 244,
	369, 245, 246, 1184, 247, 1185, 1186, 248, 1187, 1188,
	249, 370, 701, 250, 702, 371, 251, 252, 253, 254,
	255, 1189, 256, 372, 257, 373, 258, 1190, 259, 260,
	261, 262, 263, 374, 264, 265, 1191, 266, 267, 268,
	269, 270, 0, 272, 273, 271, 274, 275, 276, 277,
	1192, 278, 703, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 1193, 290, 376, 289, 291, 292, 1194, 293,
	282, 283, 294, 704, 295, 377, 378, 296, 1195, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 1196,
	304, 1197, 305, 306, 307, 308, 309, 310, 311, 1198,
	381, 382, 383, 1199, 1200, 312, 313, 384, 385, 1201,
	314, 315, 316, 317, 1202, 1203, 318, 319, 320, 321,
	1204, 322, 1205, 386, 323, 324, 325, 387, 388, 1206,
	1207, 326, 1208, 1209, 1210, 1211, 327, 328, 329, 330,
	331, 1490, 0, 629, 618, 619, 616, 617, 608, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	178, 1487, 179, 0, 0, 0, 0, 646, 611, 0,
	0, 0, 180, 181, 182, 333, 661, 335, 662, 183,
	663, 664, 0, 184, 339, 340, 185, 186, 614, 645,
	665, 666, 343, 0, 187, 657, 0, 637, 0, 188,
	189, 190, 0, 191, 0, 192, 0, 193, 194, 0,
	691, 195, 196, 197, 0, 638, 639, 641, 0, 640,
	642, 198, 199, 396, 200, 667, 201, 668, 669, 0,
	202, 0, 203, 0, 204, 1488, 0, 660, 206, 0,
	207, 0, 0, 0, 602, 208, 209, 210, 647, 648,
	625, 692, 0, 0, 0, 0, 0, 211, 212, 670,
	671, 672, 0, 213, 0, 214, 0, 0, 693, 0,
	215, 658, 0, 355, 0, 0, 216, 217, 0, 0,
	218, 219, 654, 656, 695, 0, 358, 223, 0, 220,
	0, 694, 221, 673, 222, 674, 675, 676, 677, 678,
	0, 636, 0, 696, 224, 225, 226, 697, 227, 228,
	229, 0, 231, 230, 0, 659, 698, 232, 699, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 700, 240, 241, 243, 242, 597, 0, 626, 655,
	244, 679, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 701, 250, 702, 649, 251, 252, 253,
	254, 255, 0, 256, 650, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 680, 264, 265, 0, 266, 267,
	268, 269, 270, 0, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 703, 279, 280, 603, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 643,
	293, 282, 283, 294, 704, 295, 681, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 682, 300, 301, 651,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 381, 683, 684, 0, 0, 312, 313, 652, 653,
	624, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 644, 322, 0, 386, 323, 324, 325, 387, 685,
	1486, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 598, 0, 629, 618, 619, 616, 617, 608,
	0, 0, 596, 0, 0, 0, 0, 594, 595, 1489,
	177, 178, 0, 179, 0, 0, 604, 1484, 646, 611,
	0, 0, 607, 180, 181, 182, 333, 661, 335, 662,
	183, 663, 664, 0, 184, 339, 340, 185, 186, 614,
	645, 665, 666, 343, 0, 187, 657, 0, 637, 0,
	188, 189, 190, 0, 191, 0, 192, 0, 193, 194,
	0, 691, 195, 196, 197, 0, 638, 639, 641, 0,
	640, 642, 198, 199, 396, 200, 667, 201, 668, 669,
	592, 202, 0, 203, 0, 204, 0, 0, 660, 206,
	0, 207, 0, 0, 0, 602, 208, 209, 210, 647,
	648, 625, 692, 0, 0, 0, 0, 0, 211, 212,
	670, 671, 672, 0, 213, 0, 214, 0, 0, 693,
	0, 215, 658, 0, 355, 0, 0, 216, 217, 0,
	0, 218, 219, 654, 656, 695, 0, 358, 223, 0,
	220, 0, 694, 221, 673, 222, 674, 675, 676, 677,
	678, 0, 636, 0, 696, 224, 225, 226, 697, 227,
	228, 229, 0, 231, 230, 0, 659, 698, 232, 699,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 700, 240, 241, 243, 242, 597, 0, 626,
	655, 244, 679, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 701, 250, 702, 649, 251, 252,
	253, 254, 255, 0, 256, 650, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 680, 264, 265, 0, 266,
	267, 268, 269, 270, 0, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 703, 279, 280, 603, 281, 0,
	285, 286, 287, 288, 134, 290, 376, 289, 291, 292,
	643, 293, 282, 283, 294, 704, 295, 681, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 682, 300, 301,
	651, 0, 304, 136, 305, 306, 307, 308, 309, 310,
	311, 0, 381, 683, 684, 0, 0, 312, 313, 652,
	653, 624, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 644, 322, 0, 386, 323, 324, 325, 834,
	685, 0, 0, 326, 0, 0, 0, 128, 327, 328,
	329, 330, 331, 598, 129, 580, 0, 629, 618, 619,
	616, 617, 608, 596, 0, 0, 0, 0, 594, 595,
	0, 0, 0, 177, 178, 0, 179, 1014, 0, 0,
	0, 646, 611, 607, 0, 0, 180, 181, 182, 333,
	661, 335, 662, 183, 663, 664, 0, 184, 339, 340,
	185, 186, 614, 645, 665, 666, 343, 0, 187, 657,
	0, 637, 0, 188, 189, 190, 0, 191, 0, 192,
	0, 193, 194, 0, 691, 195, 196, 197, 0, 638,
	639, 641, 0, 640, 642, 198, 199, 396, 200, 667,
	201, 668, 669, 0, 202, 0, 203, 0, 204, 0,
	0, 660, 206, 0, 207, 0, 0, 0, 602, 208,
	209, 210, 647, 648, 625, 692, 0, 0, 0, 0,
	0, 211, 212, 670, 671, 672, 0, 213, 0, 214,
	0, 0, 693, 0, 215, 658, 0, 355, 0, 0,
	216, 217, 0, 0, 218, 219, 654, 656, 695, 0,
	358, 223, 0, 220, 0, 694, 221, 673, 222, 674,
	675, 676, 677, 678, 0, 636, 0, 696, 224, 225,
	226, 697, 227, 228, 229, 0, 231, 230, 0, 659,
	698, 232, 699, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 700, 240, 241, 243, 242,
	597, 0, 626, 655, 244, 679, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 701, 250, 702,
	649, 251, 252, 253, 254, 255, 0, 256, 650, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 680, 264,
	265, 0, 266, 267, 268, 269, 270, 0, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 703, 279, 280,
	603, 281, 0, 285, 286, 287, 288, 134, 290, 376,
	289, 291, 292, 643, 293, 282, 283, 294, 704, 295,
	681, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	682, 300, 301, 651, 0, 304, 136, 305, 306, 307,
	308, 309, 310, 311, 0, 381, 683, 684, 0, 0,
	312, 313, 652, 653, 624, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 644, 322, 0, 386, 323,
	324, 325, 834, 685, 0, 0, 326, 0, 0, 0,
	128, 327, 328, 329, 330, 331, 598, 129, 629, 618,
	619, 616, 617, 608, 0, 0, 596, 0, 0, 0,
	0, 594, 595, 0, 177, 178, 0, 179, 0, 0,
	1014, 0, 646, 611, 0, 0, 607, 180, 181, 182,
	333, 661, 335, 662, 183, 663, 664, 0, 184, 339,
	340, 185, 186, 614, 645, 665, 666, 343, 0, 187,
	657, 0, 637, 0, 188, 189, 190, 0, 191, 0,
	192, 0, 193, 194, 0, 691, 195, 196, 197, 0,
	638, 639, 641, 0, 640, 642, 198, 199, 396, 200,
	667, 201, 668, 669, 0, 202, 0, 203, 0, 204,
	0, 0, 660, 206, 0, 207, 0, 0, 0, 602,
	208, 209, 210, 647, 648, 625, 692, 0, 0, 0,
	0, 0, 211, 212, 670, 671, 672, 0, 213, 0,
	214, 0, 0, 693, 0, 215, 658, 0, 355, 0,
	0, 216, 217, 0, 0, 218, 219, 654, 656, 695,
	0, 358, 223, 0, 220, 0, 694, 221, 673, 222,
	674, 675, 676, 677, 678, 0, 636, 0, 696, 224,
	225, 226, 697, 227, 228, 229, 0, 231, 230, 0,
	659, 698, 232, 699, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 700, 240, 241, 243,
	242, 597, 0, 626, 655, 244, 679, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 701, 250,
	702, 649, 251, 252, 253, 254, 255, 0, 256, 650,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 680,
	264, 265, 0, 266, 267, 268, 269, 270, 0, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 703, 279,
	280, 603, 281, 0, 285, 286, 287, 288, 134, 290,
	376, 289, 291, 292, 643, 293, 282, 283, 294, 704,
	295, 681, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 682, 300, 301, 651, 0, 304, 136, 305, 306,
	307, 308, 309, 310, 311, 0, 381, 683, 684, 0,
	0, 312, 313, 652, 653, 624, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 644, 322, 0, 386,
	323, 324, 325, 834, 685, 0, 0, 326, 0, 0,
	0, 128, 327, 328, 329, 330, 331, 598, 129, 629,
	618, 619, 616, 617, 608, 0, 0, 596, 0, 0,
	0, 0, 594, 595, 0, 177, 178, 0, 179, 0,
	0, 1014, 0, 646, 611, 0, 0, 607, 180, 181,
	182, 333, 661, 335, 662, 183, 663, 664, 1544, 184,
	339, 340, 185, 186, 614, 645, 665, 666, 343, 0,
	187, 657, 0, 637, 0, 188, 189, 190, 0, 191,
	0, 192, 0, 193, 194, 0, 691, 195, 196, 197,
	0, 638, 639, 641, 0, 640, 642, 198, 199, 396,
	200, 667, 201, 668, 669, 0, 202, 0, 203, 0,
	204, 0, 0, 660, 206, 0, 207, 0, 0, 0,
	602, 208, 209, 210, 647, 648, 625, 692, 0, 0,
	0, 0, 0, 211, 212, 670, 671, 672, 0, 213,
	0, 214, 0, 1549, 693, 0, 215, 658, 0, 355,
	0, 0, 216, 217, 0, 0, 218, 219, 654, 656,
	695, 0, 358, 223, 0, 220, 0, 694, 221, 673,
	222, 674, 675, 676, 677, 678, 0, 636, 0, 696,
	224, 225, 226, 697, 227, 228, 229, 0, 231, 230,
	1545, 659, 698, 232, 699, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 700, 240, 241,
	243, 242, 597, 0, 626, 655, 244, 679, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 701,
	250, 702, 649, 251, 252, 253, 254, 255, 0, 256,
	650, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	680, 264, 265, 0, 266, 267, 268, 269, 270, 0,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 703,
	279, 280, 603, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 643, 293, 282, 283, 294,
	704, 295, 681, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 682, 300, 301, 651, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 381, 683, 684,
	0, 1546, 312, 313, 652, 653, 624, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 644, 322, 0,
	386, 323, 324, 325, 387, 685, 0, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 598, 588,
	0, 629, 618, 619, 616, 617, 608, 0, 596, 0,
	0, 0, 0, 594, 595, 0, 0, 177, 178, 0,
	179, 0, 604, 0, 0, 646, 611, 0, 607, 0,
	180, 181, 182, 333, 661, 335, 662, 183, 663, 664,
	0, 184, 339, 340, 185, 186, 614, 645, 665, 666,
	343, 0, 187, 657, 0, 637, 0, 188, 189, 190,
	0, 191, 0, 192, 0, 193, 194, 0, 691, 195,
	196, 197, 0, 638, 639, 641, 0, 640, 642, 198,
	199, 396, 200, 667, 201, 668, 669, 592, 202, 0,
	203, 0, 204, 0, 0, 660, 206, 0, 207, 0,
	0, 0, 602, 208, 209, 210, 647, 648, 625, 692,
	0, 0, 0, 0, 0, 211, 212, 670, 671, 672,
	0, 213, 0, 214, 0, 0, 693, 0, 215, 658,
	0, 355, 0, 0, 216, 217, 0, 0, 218, 219,
	654, 656, 695, 0, 358, 223, 0, 220, 0, 694,
	221, 673, 222, 674, 675, 676, 677, 678, 0, 636,
	0, 696, 224, 225, 226, 697, 227, 228, 229, 0,
	231, 230, 0, 659, 698, 232, 699, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 700,
	240, 241, 243, 242, 597, 0, 626, 655, 244, 679,
	245, 246, 0, 247, 590, 0, 248, 0, 0, 249,
	370, 701, 250, 702, 649, 251, 252, 253, 254, 255,
	0, 256, 650, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 680, 264, 265, 0, 266, 267, 268, 269,
	270, 0, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 703, 279, 280, 603, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 643, 293, 282,
	283, 294, 704, 295, 681, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 682, 300, 301, 651, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 381,
	683, 684, 0, 0, 312, 313, 652, 653, 624, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 644,
	322, 0, 386, 323, 324, 325, 387, 685, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	598, 0, 629, 618, 619, 616, 617, 608, 0, 0,
	596, 0, 0, 0, 0, 594, 595, 0, 177, 178,
	0, 179, 0, 0, 604, 0, 646, 611, 0, 0,
	607, 180, 181, 182, 333, 661, 335, 662, 183, 663,
	664, 0, 184, 339, 340, 185, 186, 614, 645, 665,
	666, 343, 0, 187, 657, 0, 637, 0, 188, 189,
	190, 0, 191, 0, 192, 0, 193, 194, 0, 691,
	195, 196, 197, 0, 638, 639, 641, 0, 640, 642,
	198, 199, 396, 200, 667, 201, 668, 669, 0, 202,
	0, 203, 0, 204, 0, 0, 660, 206, 0, 207,
	0, 0, 0, 602, 208, 209, 210, 647, 648, 625,
	692, 0, 0, 0, 0, 0, 211, 212, 670, 671,
	672, 0, 213, 0, 214, 0, 0, 693, 0, 215,
	658, 0, 355, 0, 0, 216, 217, 0, 0, 218,
	219, 654, 656, 695, 0, 358, 223, 0, 220, 0,
	694, 221, 673, 222, 674, 675, 676, 677, 678, 0,
	636, 0, 696, 224, 225, 226, 697, 227, 228, 229,
	0, 231, 230, 0, 659, 698, 232, 699, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	700, 240, 241, 243, 242, 597, 2155, 626, 655, 244,
	679, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 701, 250, 702, 649, 251, 252, 253, 254,
	255, 0, 256, 650, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 680, 264, 265, 0, 266, 267, 268,
	269, 270, 0, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 703, 279, 280, 603, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 643, 293,
	282, 283, 294, 704, 295, 681, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 682, 300, 301, 651, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	381, 683, 684, 0, 0, 312, 313, 652, 653, 624,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	644, 322, 0, 386, 323, 324, 325, 387, 685, 0,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 598, 0, 629, 618, 619, 616, 617, 608, 0,
	0, 596, 0, 0, 0, 0, 594, 595, 1075, 177,
	178, 0, 179, 0, 0, 604, 0, 646, 611, 0,
	0, 607, 180, 181, 182, 333, 661, 335, 662, 183,
	663, 664, 0, 184, 339, 340, 185, 186, 614, 645,
	665, 666, 343, 0, 187, 657, 0, 637, 0, 188,
	189, 190, 0, 191, 0, 192, 0, 193, 194, 0,
	691, 195, 196, 197, 0, 638, 639, 641, 0, 640,
	642, 198, 199, 396, 200, 667, 201, 668, 669, 0,
	202, 0, 203, 0, 204, 0, 0, 660, 206, 0,
	207, 0, 0, 0, 602, 208, 209, 210, 647, 648,
	625, 692, 0, 0, 0, 0, 0, 211, 212, 670,
	671, 672, 0, 213, 0, 214, 0, 0, 693, 0,
	215, 658, 0, 355, 0, 0, 216, 217, 0, 0,
	218, 219, 654, 656, 695, 0, 358, 223, 1394, 220,
	0, 694, 221, 673, 222, 674, 675, 676, 677, 678,
	0, 636, 0, 696, 224, 225, 226, 697, 227, 228,
	229, 0, 231, 230, 0, 659, 698, 232, 699, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 700, 240, 241, 243, 242, 597, 0, 626, 655,
	244, 679, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 701, 250, 702, 649, 251, 252, 253,
	254, 255, 0, 256, 650, 257, 373, 258, 1393, 259,
	260, 261, 262, 263, 680, 264, 265, 0, 266, 267,
	268, 269, 270, 0, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 703, 279, 280, 603, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 643,
	293, 282, 283, 294, 704, 295, 681, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 682, 300, 301, 651,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 381, 683, 684, 0, 0, 312, 313, 652, 653,
	624, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 644, 322, 0, 386, 323, 324, 325, 387, 685,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 598, 0, 629, 618, 619, 616, 617, 608,
	0, 0, 596, 0, 0, 0, 0, 594, 595, 0,
	177, 178, 0, 179, 0, 0, 604, 0, 646, 611,
	0, 0, 607, 180, 181, 182, 333, 661, 335, 662,
	183, 663, 664, 0, 184, 339, 340, 185, 186, 614,
	645, 665, 666, 343, 0, 187, 657, 0, 637, 0,
	188, 189, 190, 0, 191, 0, 192, 0, 193, 194,
	0, 691, 195, 196, 197, 0, 638, 639, 641, 0,
	640, 642, 198, 199, 396, 200, 667, 201, 668, 669,
	592, 202, 0, 203, 0, 204, 0, 0, 660, 206,
	0, 207, 0, 0, 0, 602, 208, 209, 210, 647,
	648, 625, 692, 0, 0, 0, 0, 0, 211, 212,
	670, 671, 672, 0, 213, 0, 214, 0, 0, 693,
	0, 215, 658, 0, 355, 0, 0, 216, 217, 0,
	0, 218, 219, 654, 656, 695, 0, 358, 223, 0,
	220, 0, 694, 221, 673, 222, 674, 675, 676, 677,
	678, 0, 636, 0, 696, 224, 225, 226, 697, 227,
	228, 229, 0, 231, 230, 0, 659, 698, 232, 699,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 700, 240, 241, 243, 242, 597, 0, 626,
	655, 244, 679, 245, 246, 0, 247, 590, 0, 248,
	0, 0, 249, 370, 701, 250, 702, 649, 251, 252,
	253, 254, 255, 0, 256, 650, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 680, 264, 265, 0, 266,
	267, 268, 269, 270, 0, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 703, 279, 280, 603, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	643, 293, 282, 283, 294, 704, 295, 681, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 682, 300, 301,
	651, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 381, 683, 684, 0, 0, 312, 313, 652,
	653, 624, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 644, 322, 0, 386, 323, 324, 325, 387,
	685, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 598, 0, 629, 618, 619, 616, 617,
	608, 0, 0, 596, 0, 0, 0, 0, 594, 595,
	0, 177, 178, 0, 179, 0, 0, 604, 0, 646,
	611, 0, 0, 607, 180, 181, 182, 333, 661, 335,
	662, 183, 663, 664, 0, 184, 339, 340, 185, 186,
	614, 645, 665, 666, 343, 0, 187, 657, 0, 637,
	0, 188, 189, 190, 0, 191, 0, 192, 0, 193,
	194, 0, 691, 195, 196, 197, 0, 638, 639, 641,
	0, 640, 642, 198, 199, 396, 200, 667, 201, 668,
	669, 592, 202, 0, 203, 0, 204, 0, 0, 660,
	206, 0, 207, 0, 0, 0, 602, 208, 209, 210,
	647, 648, 625, 692, 0, 0, 0, 0, 0, 211,
	212, 670, 671, 672, 0, 213, 0, 214, 0, 0,
	693, 0, 215, 658, 0, 355, 0, 0, 216, 217,
	0, 0, 218, 219, 654, 656, 695, 0, 358, 223,
	0, 220, 0, 694, 221, 673, 222, 674, 675, 676,
	677, 678, 0, 636, 0, 696, 224, 225, 226, 697,
	227, 228, 229, 0, 231, 230, 0, 659, 698, 232,
	699, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 700, 240, 241, 243, 242, 597, 0,
	626, 655, 244, 679, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 701, 250, 702, 649, 251,
	252, 253, 254, 255, 0, 256, 650, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 680, 264, 265, 0,
	266, 267, 268, 269, 270, 0, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 703, 279, 280, 603, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 643, 293, 282, 283, 294, 704, 295, 681, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 682, 300,
	301, 651, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 381, 683, 684, 0, 0, 312, 313,
	652, 653, 624, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 644, 322, 0, 386, 323, 324, 325,
	387, 685, 0, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 598, 0, 629, 618, 619, 616,
	617, 608, 0, 0, 596, 0, 0, 0, 0, 594,
	595, 0, 177, 178, 0, 179, 0, 0, 604, 0,
	646, 611, 0, 0, 607, 180, 181, 182, 333, 661,
	335, 662, 183, 663, 664, 0, 184, 339, 340, 185,
	186, 614, 645, 665, 666, 343, 0, 187, 657, 0,
	637, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 691, 195, 196, 197, 0, 638, 639,
	641, 0, 640, 642, 198, 199, 396, 200, 667, 201,
	668, 669, 0, 202, 0, 203, 0, 204, 0, 0,
	660, 206, 0, 207, 0, 0, 0, 602, 208, 209,
	210, 647, 648, 625, 692, 0, 0, 0, 0, 0,
	211, 212, 670, 671, 672, 0, 213, 0, 214, 0,
	0, 693, 0, 215, 658, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 654, 656, 695, 0, 358,
	223, 0, 220, 0, 694, 221, 673, 222, 674, 675,
	676, 677, 678, 0, 636, 0, 696, 224, 225, 226,
	697, 227, 228, 229, 0, 231, 230, 0, 659, 698,
	232, 699, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 700, 240, 241, 243, 242, 597,
	0, 626, 655, 244, 679, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 701, 250, 702, 649,
	251, 252, 253, 254, 255, 0, 256, 650, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 680, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 703, 279, 280, 603,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 643, 293, 282, 283, 294, 704, 295, 681,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 682,
	300, 301, 651, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 381, 683, 684, 0, 0, 312,
	313, 652, 653, 624, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 644, 322, 0, 386, 323, 324,
	325, 387, 685, 2012, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 598, 0, 629, 618, 619,
	616, 617, 608, 0, 0, 596, 0, 0, 0, 0,
	594, 595, 0, 177, 178, 0, 179, 0, 0, 604,
	0, 646, 611, 0, 0, 607, 180, 181, 182, 333,
	661, 335, 662, 183, 663, 664, 0, 184, 339, 340,
	185, 186, 614, 645, 665, 666, 343, 0, 187, 657,
	0, 637, 0, 188, 189, 190, 0, 191, 0, 192,
	0, 193, 194, 0, 691, 195, 196, 197, 0, 638,
	639, 641, 0, 640, 642, 198, 199, 396, 200, 667,
	201, 668, 669, 0, 202, 0, 203, 0, 204, 0,
	0, 660, 206, 0, 207, 0, 0, 0, 602, 208,
	209, 210, 647, 648, 625, 692, 0, 0, 0, 0,
	0, 211, 212, 670, 671, 672, 0, 213, 0, 214,
	0, 0, 693, 0, 215, 658, 0, 355, 0, 0,
	216, 217, 0, 0, 218, 219, 654, 656, 695, 0,
	358, 223, 0, 220, 0, 694, 221, 673, 222, 674,
	675, 676, 677, 678, 0, 636, 0, 696, 224, 225,
	226, 697, 227, 228, 229, 0, 231, 230, 0, 659,
	698, 232, 699, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 700, 240, 241, 243, 242,
	597, 0, 626, 655, 244, 679, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 701, 250, 702,
	649, 251, 252, 253, 254, 255, 0, 256, 650, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 680, 264,
	265, 0, 266, 267, 268, 269, 270, 0, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 703, 279, 280,
	603, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 643, 293, 282, 283, 294, 704, 295,
	681, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	682, 300, 301, 651, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 381, 683, 684, 0, 0,
	312, 313, 652, 653, 624, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 644, 322, 0, 386, 323,
	324, 325, 387, 685, 0, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 598, 0, 629, 618,
	619, 616, 617, 608, 0, 0, 596, 0, 0, 0,
	0, 594, 595, 1075, 177, 178, 0, 179, 0, 0,
	604, 0, 646, 611, 0, 0, 607, 180, 181, 182,
	333, 661, 335, 662, 183, 663, 664, 0, 184, 339,
	340, 185, 186, 614, 645, 665, 666, 343, 0, 187,
	657, 0, 637, 0, 188, 189, 190, 0, 191, 0,
	192, 0, 193, 194, 0, 691, 195, 196, 197, 0,
	638, 639, 641, 0, 640, 642, 198, 199, 396, 200,
	667, 201, 668, 669, 0, 202, 0, 203, 0, 204,
	0, 0, 660, 206, 0, 207, 0, 0, 0, 602,
	208, 209, 210, 647, 648, 625, 692, 0, 0, 0,
	0, 0, 211, 212, 670, 671, 672, 0, 213, 0,
	214, 0, 1549, 693, 0, 215, 658, 0, 355, 0,
	0, 216, 217, 0, 0, 218, 219, 654, 656, 695,
	0, 358, 223, 0, 220, 0, 694, 221, 673, 222,
	674, 675, 676, 677, 678, 0, 636, 0, 696, 224,
	225, 226, 697, 227, 228, 229, 0, 231, 230, 0,
	659, 698, 232, 699, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 700, 240, 241, 243,
	242, 597, 0, 626, 655, 244, 679, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 701, 250,
	702, 649, 251, 252, 253, 254, 255, 0, 256, 650,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 680,
	264, 265, 0, 266, 267, 268, 269, 270, 0, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 703, 279,
	280, 603, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 643, 293, 282, 283, 294, 704,
	295, 681, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 682, 300, 301, 651, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 381, 683, 684, 0,
	0, 312, 313, 652, 653, 624, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 644, 322, 0, 386,
	323, 324, 325, 387, 685, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 598, 1594, 0,
	629, 618, 619, 616, 617, 608, 0, 596, 0, 0,
	0, 0, 594, 595, 0, 0, 177, 178, 0, 179,
	0, 604, 0, 0, 646, 611, 0, 607, 0, 180,
	181, 182, 333, 661, 335, 662, 183, 663, 664, 0,
	184, 339, 340, 185, 186, 614, 645, 665, 666, 343,
	0, 187, 657, 0, 637, 0, 188, 189, 190, 0,
	191, 0, 192, 0, 193, 194, 0, 691, 195, 196,
	197, 0, 638, 639, 641, 0, 640, 642, 198, 199,
	396, 200, 667, 201, 668, 669, 0, 202, 0, 203,
	0, 204, 0, 0, 660, 206, 0, 207, 0, 0,
	0, 602, 208, 209, 210, 647, 648, 625, 692, 0,
	0, 0, 0, 0, 211, 212, 670, 671, 672, 0,
	213, 0, 214, 0, 0, 693, 0, 215, 658, 0,
	355, 0, 0, 216, 217, 0, 0, 218, 219, 654,
	656, 695, 0, 358, 223, 0, 220, 0, 694, 221,
	673, 222, 674, 675, 676, 677, 678, 0, 636, 0,
	696, 224, 225, 226, 697, 227, 228, 229, 0, 231,
	230, 0, 659, 698, 232, 699, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 700, 240,
	241, 243, 242, 597, 0, 626, 655, 244, 679, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	701, 250, 702, 649, 251, 252, 253, 254, 255, 0,
	256, 650, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 680, 264, 265, 0, 266, 267, 268, 269, 270,
	0, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	703, 279, 280, 603, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 643, 293, 282, 283,
	294, 704, 295, 681, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 682, 300, 301, 651, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 381, 683,
	684, 0, 0, 312, 313, 652, 653, 624, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 644, 322,
	0, 386, 323, 324, 325, 387, 685, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 598,
	1558, 0, 629, 618, 619, 616, 617, 608, 0, 596,
	0, 0, 0, 0, 594, 595, 0, 0, 177, 178,
	0, 179, 0, 604, 0, 0, 646, 611, 0, 607,
	0, 180, 181, 182, 333, 661, 335, 662, 183, 663,
	664, 0, 184, 339, 340, 185, 186, 614, 645, 665,
	666, 343, 0, 187, 657, 0, 637, 0, 188, 189,
	190, 0, 191, 0, 192, 0, 193, 194, 0, 691,
	195, 196, 197, 0, 638, 639, 641, 0, 640, 642,
	198, 199, 396, 200, 667, 201, 668, 669, 0, 202,
	0, 203, 0, 204, 0, 0, 660, 206, 0, 207,
	0, 0, 0, 602, 208, 209, 210, 647, 648, 625,
	692, 0, 0, 0, 0, 0, 211, 212, 670, 671,
	672, 0, 213, 0, 214, 0, 0, 693, 0, 215,
	658, 0, 355, 0, 0, 216, 217, 0, 0, 218,
	219, 654, 656, 695, 0, 358, 223, 0, 220, 0,
	694, 221, 673, 222, 674, 675, 676, 677, 678, 0,
	636, 0, 696, 224, 225, 226, 697, 227, 228, 229,
	0, 231, 230, 0, 659, 698, 232, 699, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	700, 240, 241, 243, 242, 597, 0, 626, 655, 244,
	679, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 701, 250, 702, 649, 251, 252, 253, 254,
	255, 0, 256, 650, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 680, 264, 265, 0, 266, 267, 268,
	269, 270, 0, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 703, 279, 280, 603, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 643, 293,
	282, 283, 294, 704, 295, 681, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 682, 300, 301, 651, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	381, 683, 684, 0, 0, 312, 313, 652, 653, 624,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	644, 322, 0, 386, 323, 324, 325, 387, 685, 0,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 598, 1556, 0, 629, 618, 619, 616, 617, 608,
	0, 596, 0, 0, 0, 0, 594, 595, 0, 0,
	177, 178, 0, 179, 0, 604, 0, 0, 646, 611,
	0, 607, 0, 180, 181, 182, 333, 661, 335, 662,
	183, 663, 664, 0, 184, 339, 340, 185, 186, 614,
	645, 665, 666, 343, 0, 187, 657, 0, 637, 0,
	188, 189, 190, 0, 191, 0, 192, 0, 193, 194,
	0, 691, 195, 196, 197, 0, 638, 639, 641, 0,
	640, 642, 198, 199, 396, 200, 667, 201, 668, 669,
	0, 202, 0, 203, 0, 204, 0, 0, 660, 206,
	0, 207, 0, 0, 0, 602, 208, 209, 210, 647,
	648, 625, 692, 0, 0, 0, 0, 0, 211, 212,
	670, 671, 672, 0, 213, 0, 214, 0, 0, 693,
	0, 215, 658, 0, 355, 0, 0, 216, 217, 0,
	0, 218, 219, 654, 656, 695, 0, 358, 223, 0,
	220, 0, 694, 221, 673, 222, 674, 675, 676, 677,
	678, 0, 636, 0, 696, 224, 225, 226, 697, 227,
	228, 229, 0, 231, 230, 0, 659, 698, 232, 699,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 700, 240, 241, 243, 242, 597, 0, 626,
	655, 244, 679, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 701, 250, 702, 649, 251, 252,
	253, 254, 255, 0, 256, 650, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 680, 264, 265, 0, 266,
	267, 268, 269, 270, 0, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 703, 279, 280, 603, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	643, 293, 282, 283, 294, 704, 295, 681, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 682, 300, 301,
	651, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 381, 683, 684, 0, 0, 312, 313, 652,
	653, 624, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 644, 322, 0, 386, 323, 324, 325, 387,
	685, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 598, 1540, 0, 629, 618, 619, 616,
	617, 608, 0, 596, 0, 0, 0, 0, 594, 595,
	0, 0, 177, 178, 0, 179, 0, 604, 0, 0,
	646, 611, 0, 607, 0, 180, 181, 182, 333, 661,
	335, 662, 183, 663, 664, 0, 184, 339, 340, 185,
	186, 614, 645, 665, 666, 343, 0, 187, 657, 0,
	637, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 691, 195, 196, 197, 0, 638, 639,
	641, 0, 640, 642, 198, 199, 396, 200, 667, 201,
	668, 669, 0, 202, 0, 203, 0, 204, 0, 0,
	660, 206, 0, 207, 0, 0, 0, 602, 208, 209,
	210, 647, 648, 625, 692, 0, 0, 0, 0, 0,
	211, 212, 670, 671, 672, 0, 213, 0, 214, 0,
	0, 693, 0, 215, 658, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 654, 656, 695, 0, 358,
	223, 0, 220, 0, 694, 221, 673, 222, 674, 675,
	676, 677, 678, 0, 636, 0, 696, 224, 225, 226,
	697, 227, 228, 229, 0, 231, 230, 0, 659, 698,
	232, 699, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 700, 240, 241, 243, 242, 597,
	0, 626, 655, 244, 679, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 701, 250, 702, 649,
	251, 252, 253, 254, 255, 0, 256, 650, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 680, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 703, 279, 280, 603,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 643, 293, 282, 283, 294, 704, 295, 681,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 682,
	300, 301, 651, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 381, 683, 684, 0, 0, 312,
	313, 652, 653, 624, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 644, 322, 0, 386, 323, 324,
	325, 387, 685, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 598, 1528, 0, 629, 618,
	619, 616, 617, 608, 0, 596, 0, 0, 0, 0,
	594, 595, 0, 0, 177, 178, 0, 179, 0, 604,
	0, 0, 646, 611, 0, 607, 0, 180, 181, 182,
	333, 661, 335, 662, 183, 663, 664, 0, 184, 339,
	340, 185, 186, 614, 645, 665, 666, 343, 0, 187,
	657, 0, 637, 0, 188, 189, 190, 0, 191, 0,
	192, 0, 193, 194, 0, 691, 195, 196, 197, 0,
	638, 639, 641, 0, 640, 642, 198, 199, 396, 200,
	667, 201, 668, 669, 0, 202, 0, 203, 0, 204,
	0, 0, 660, 206, 0, 207, 0, 0, 0, 602,
	208, 209, 210, 647, 648, 625, 692, 0, 0, 0,
	0, 0, 211, 212, 670, 671, 672, 0, 213, 0,
	214, 0, 0, 693, 0, 215, 658, 0, 355, 0,
	0, 216, 217, 0, 0, 218, 219, 654, 656, 695,
	0, 358, 223, 0, 220, 0, 694, 221, 673, 222,
	674, 675, 676, 677, 678, 0, 636, 0, 696, 224,
	225, 226, 697, 227, 228, 229, 0, 231, 230, 0,
	659, 698, 232, 699, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 700, 240, 241, 243,
	242, 597, 0, 626, 655, 244, 679, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 701, 250,
	702, 649, 251, 252, 253, 254, 255, 0, 256, 650,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 680,
	264, 265, 0, 266, 267, 268, 269, 270, 0, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 703, 279,
	280, 603, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 643, 293, 282, 283, 294, 704,
	295, 681, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 682, 300, 301, 651, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 381, 683, 684, 0,
	0, 312, 313, 652, 653, 624, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 644, 322, 0, 386,
	323, 324, 325, 387, 685, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 598, 1526, 0,
	1518, 618, 619, 616, 617, 608, 0, 596, 0, 0,
	0, 0, 594, 595, 0, 0, 177, 178, 0, 179,
	0, 604, 0, 0, 646, 611, 0, 607, 0, 180,
	181, 182, 333, 661, 335, 662, 183, 663, 664, 0,
	184, 339, 340, 185, 186, 614, 645, 665, 666, 343,
	0, 187, 657, 0, 637, 0, 188, 189, 190, 0,
	191, 0, 192, 0, 193, 194, 0, 691, 195, 196,
	197, 0, 638, 639, 641, 0, 640, 642, 198, 199,
	396, 200, 667, 1521, 668, 669, 0, 202, 0, 203,
	0, 204, 0, 0, 660, 206, 0, 207, 0, 0,
	0, 602, 208, 209, 210, 647, 648, 625, 692, 0,
	0, 0, 0, 0, 211, 212, 670, 671, 672, 0,
	213, 0, 214, 0, 0, 693, 0, 215, 658, 0,
	355, 0, 0, 216, 1522, 0, 0, 218, 219, 654,
	656, 695, 0, 358, 223, 0, 220, 0, 694, 221,
	673, 222, 674, 675, 676, 677, 678, 0, 636, 0,
	696, 224, 225, 226, 697, 227, 228, 229, 0, 231,
	230, 0, 659, 698, 232, 699, 0, 233, 0, 0,
	234, 0, 235, 1523, 1520, 239, 367, 238, 700, 240,
	241, 243, 242, 597, 0, 626, 655, 244, 679, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	701, 250, 702, 649, 251, 252, 253, 254, 255, 0,
	256, 650, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 680, 264, 265, 0, 266, 267, 268, 269, 270,
	0, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	703, 279, 280, 603, 281, 0, 285, 286, 287, 1524,
	0, 290, 376, 289, 291, 292, 643, 293, 282, 283,
	294, 704, 295, 681, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 682, 300, 301, 651, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 381, 683,
	684, 0, 0, 312, 313, 652, 653, 624, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 644, 322,
	0, 386, 323, 324, 325, 387, 685, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 1519, 331, 598,
	1515, 0, 1518, 618, 619, 616, 617, 608, 0, 596,
	0, 0, 0, 0, 594, 595, 0, 0, 177, 178,
	0, 179, 0, 604, 0, 0, 646, 611, 0, 607,
	0, 180, 181, 182, 333, 661, 335, 662, 183, 663,
	664, 0, 184, 339, 340, 185, 186, 614, 645, 665,
	666, 343, 0, 187, 657, 0, 637, 0, 188, 189,
	190, 0, 191, 0, 192, 0, 193, 194, 0, 691,
	195, 196, 197, 0, 638, 639, 641, 0, 640, 642,
	198, 199, 396, 200, 667, 1521, 668, 669, 0, 202,
	0, 203, 0, 204, 0, 0, 660, 206, 0, 207,
	0, 0, 0, 602, 208, 209, 210, 647, 648, 625,
	692, 0, 0, 0, 0, 0, 211, 212, 670, 671,
	672, 0, 213, 0, 214, 0, 0, 693, 0, 215,
	658, 0, 355, 0, 0, 216, 1522, 0, 0, 218,
	219, 654, 656, 695, 0, 358, 223, 0, 220, 0,
	694, 221, 673, 222, 674, 675, 676, 677, 678, 0,
	636, 0, 696, 224, 225, 226, 697, 227, 228, 229,
	0, 231, 230, 0, 659, 698, 232, 699, 0, 233,
	0, 0, 234, 0, 235, 1523, 1520, 239, 367, 238,
	700, 240, 241, 243, 242, 597, 0, 626, 655, 244,
	679, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 701, 250, 702, 649, 251, 252, 253, 254,
	255, 0, 256, 650, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 680, 264, 265, 0, 266, 267, 268,
	269, 270, 0, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 703, 279, 280, 603, 281, 0, 285, 286,
	287, 1524, 0, 290, 376, 289, 291, 292, 643, 293,
	282, 283, 294, 704, 295, 681, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 682, 300, 301, 651, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	381, 683, 684, 0, 0, 312, 313, 652, 653, 624,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	644, 322, 0, 386, 323, 324, 325, 387, 685, 0,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 1519,
	331, 598, 0, 629, 618, 619, 616, 617, 608, 0,
	0, 596, 0, 0, 0, 0, 594, 595, 0, 177,
	178, 0, 179, 0, 0, 604, 0, 646, 611, 0,
	0, 607, 180, 181, 182, 333, 661, 335, 662, 183,
	663, 664, 0, 184, 339, 340, 185, 186, 614, 645,
	665, 666, 343, 0, 187, 657, 0, 637, 0, 188,
	189, 190, 0, 191, 0, 192, 0, 193, 194, 0,
	691, 195, 196, 197, 0, 638, 639, 641, 0, 640,
	642, 198, 199, 396, 200, 667, 201, 668, 669, 0,
	202, 0, 203, 0, 204, 0, 0, 660, 206, 0,
	207, 0, 0, 0, 602, 208, 209, 210, 647, 648,
	625, 692, 0, 0, 0, 0, 0, 211, 212, 670,
	671, 672, 0, 213, 0, 214, 0, 0, 693, 0,
	215, 658, 0, 355, 0, 0, 216, 217, 0, 0,
	218, 219, 654, 656, 695, 0, 358, 223, 0, 220,
	0, 694, 221, 673, 222, 674, 675, 676, 677, 678,
	0, 636, 0, 696, 224, 225, 226, 697, 227, 228,
	229, 0, 231, 230, 0, 659, 698, 232, 699, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 700, 240, 241, 243, 242, 597, 0, 626, 655,
	244, 679, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 701, 250, 702, 649, 251, 252, 253,
	254, 255, 0, 256, 650, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 680, 264, 265, 0, 266, 267,
	268, 269, 270, 0, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 703, 279, 280, 603, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 643,
	293, 282, 283, 294, 704, 295, 681, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 682, 300, 301, 651,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 381, 683, 684, 0, 0, 312, 313, 652, 653,
	624, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 644, 322, 0, 386, 323, 324, 325, 387, 685,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 598, 0, 629, 618, 619, 616, 617, 608,
	0, 0, 596, 0, 0, 0, 0, 594, 595, 0,
	177, 178, 1381, 179, 1018, 0, 604, 0, 646, 611,
	0, 0, 607, 180, 181, 182, 333, 661, 335, 662,
	183, 663, 664, 0, 184, 339, 340, 185, 186, 614,
	645, 665, 666, 343, 0, 187, 657, 0, 637, 0,
	188, 189, 190, 0, 191, 0, 192, 0, 193, 194,
	0, 691, 195, 196, 197, 0, 638, 639, 641, 0,
	640, 642, 198, 199, 396, 200, 667, 201, 668, 669,
	0, 202, 0, 203, 0, 204, 0, 0, 660, 206,
	0, 207, 0, 0, 0, 602, 208, 209, 210, 647,
	648, 625, 692, 0, 0, 0, 0, 0, 211, 212,
	670, 671, 672, 0, 213, 0, 214, 0, 0, 693,
	0, 215, 658, 0, 355, 0, 0, 216, 217, 0,
	0, 218, 219, 654, 656, 695, 0, 358, 223, 0,
	220, 0, 694, 221, 673, 222, 674, 675, 676, 677,
	678, 0, 636, 0, 696, 224, 225, 226, 697, 227,
	228, 229, 0, 231, 230, 0, 659, 698, 232, 699,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 700, 240, 241, 243, 242, 597, 0, 626,
	655, 244, 679, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 701, 250, 702, 649, 251, 252,
	253, 254, 255, 0, 256, 650, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 680, 264, 265, 0, 266,
	267, 268, 269, 270, 0, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 703, 279, 280, 603, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	643, 293, 282, 283, 294, 704, 295, 681, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 682, 300, 301,
	651, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 381, 683, 684, 0, 0, 312, 313, 652,
	653, 624, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 644, 322, 0, 386, 323, 324, 325, 387,
	685, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 598, 771, 0, 629, 618, 619, 616,
	617, 608, 0, 596, 0, 0, 0, 0, 594, 595,
	0, 0, 177, 178, 0, 179, 0, 604, 0, 0,
	646, 611, 0, 607, 0, 180, 181, 182, 333, 661,
	335, 662, 183, 663, 664, 0, 184, 339, 340, 185,
	186, 614, 645, 665, 666, 343, 0, 187, 657, 0,
	637, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 691, 195, 196, 197, 0, 638, 639,
	641, 0, 640, 642, 198, 199, 396, 200, 667, 201,
	668, 669, 0, 202, 0, 203, 0, 204, 0, 0,
	660, 206, 0, 207, 0, 0, 0, 602, 208, 209,
	210, 647, 648, 625, 692, 0, 0, 0, 0, 0,
	211, 212, 670, 671, 672, 0, 213, 0, 214, 0,
	0, 693, 0, 215, 658, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 654, 656, 695, 0, 358,
	223, 0, 220, 0, 694, 221, 673, 222, 674, 675,
	676, 677, 678, 0, 636, 0, 696, 224, 225, 226,
	697, 227, 228, 229, 0, 231, 230, 0, 659, 698,
	232, 699, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 700, 240, 241, 243, 242, 597,
	0, 626, 655, 244, 679, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 701, 250, 702, 649,
	251, 252, 253, 254, 255, 0, 256, 650, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 680, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 703, 279, 280, 603,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 643, 293, 282, 283, 294, 704, 295, 681,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 682,
	300, 301, 651, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 381, 683, 684, 0, 0, 312,
	313, 652, 653, 624, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 644, 322, 0, 386, 323, 324,
	325, 387, 685, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 598, 769, 0, 629, 618,
	619, 616, 617, 608, 0, 596, 0, 0, 0, 0,
	594, 595, 0, 0, 177, 178, 0, 179, 0, 604,
	0, 0, 646, 611, 0, 607, 0, 180, 181, 182,
	333, 661, 335, 662, 183, 663, 664, 0, 184, 339,
	340, 185, 186, 614, 645, 665, 666, 343, 0, 187,
	657, 0, 637, 0, 188, 189, 190, 0, 191, 0,
	192, 0, 193, 194, 0, 691, 195, 196, 197, 0,
	638, 639, 641, 0, 640, 642, 198, 199, 396, 200,
	667, 201, 668, 669, 0, 202, 0, 203, 0, 204,
	0, 0, 660, 206, 0, 207, 0, 0, 0, 602,
	208, 209, 210, 647, 648, 625, 692, 0, 0, 0,
	0, 0, 211, 212, 670, 671, 672, 0, 213, 0,
	214, 0, 0, 693, 0, 215, 658, 0, 355, 0,
	0, 216, 217, 0, 0, 218, 219, 654, 656, 695,
	0, 358, 223, 0, 220, 0, 694, 221, 673, 222,
	674, 675, 676, 677, 678, 0, 636, 0, 696, 224,
	225, 226, 697, 227, 228, 229, 0, 231, 230, 0,
	659, 698, 232, 699, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 700, 240, 241, 243,
	242, 597, 0, 626, 655, 244, 679, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 701, 250,
	702, 649, 251, 252, 253, 254, 255, 0, 256, 650,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 680,
	264, 265, 0, 266, 267, 268, 269, 270, 0, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 703, 279,
	280, 603, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 643, 293, 282, 283, 294, 704,
	295, 681, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 682, 300, 301, 651, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 381, 683, 684, 0,
	0, 312, 313, 652, 653, 624, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 644, 322, 0, 386,
	323, 324, 325, 387, 685, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 598, 0, 629,
	618, 619, 616, 617, 608, 0, 0, 596, 0, 0,
	0, 0, 594, 595, 0, 177, 178, 0, 179, 0,
	0, 604, 0, 646, 611, 0, 0, 607, 180, 181,
	182, 333, 661, 335, 662, 183, 663, 664, 0, 184,
	339, 340, 185, 186, 614, 645, 665, 666, 343, 0,
	187, 657, 0, 637, 0, 188, 189, 190, 0, 191,
	0, 192, 0, 193, 194, 0, 691, 195, 196, 2465,
	0, 638, 639, 641, 0, 640, 642, 198, 199, 396,
	200, 667, 201, 668, 669, 0, 202, 0, 203, 0,
	204, 0, 0, 660, 206, 0, 207, 0, 0, 0,
	602, 208, 209, 210, 647, 648, 625, 692, 0, 0,
	0, 0, 0, 211, 212, 670, 671, 672, 0, 213,
	0, 214, 0, 0, 693, 0, 215, 658, 0, 355,
	0, 0, 216, 217, 0, 0, 218, 219, 654, 656,
	695, 0, 358, 223, 0, 220, 0, 694, 221, 673,
	222, 674, 675, 676, 677, 678, 0, 636, 0, 696,
	224, 225, 226, 697, 227, 228, 229, 0, 231, 230,
	0, 659, 698, 232, 699, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 700, 240, 241,
	243, 242, 597, 0, 626, 655, 244, 679, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 701,
	250, 702, 649, 251, 252, 253, 254, 255, 0, 256,
	650, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	680, 264, 265, 0, 266, 267, 268, 269, 270, 0,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 703,
	279, 280, 603, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 643, 293, 282, 283, 294,
	704, 295, 681, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 682, 300, 301, 651, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 381, 683, 684,
	0, 0, 312, 313, 652, 653, 624, 314, 315, 2464,
	317, 0, 0, 318, 319, 320, 321, 644, 322, 0,
	386, 323, 324, 325, 387, 685, 0, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 598, 0,
	629, 618, 619, 616, 617, 608, 0, 0, 596, 0,
	0, 0, 0, 594, 595, 0, 177, 178, 0, 179,
	0, 0, 604, 0, 646, 611, 0, 0, 607, 180,
	181, 182, 333, 661, 335, 662, 183, 663, 664, 0,
	184, 339, 340, 185, 186, 614, 645, 665, 666, 343,
	0, 187, 657, 0, 637, 0, 188, 189, 190, 0,
	191, 0, 192, 0, 193, 194, 0, 691, 195, 196,
	197, 0, 638, 639, 641, 0, 640, 642, 198, 199,
	396, 200, 667, 201, 668, 669, 0, 202, 0, 203,
	0, 204, 0, 0, 660, 206, 0, 207, 0, 0,
	0, 602, 208, 209, 210, 647, 648, 625, 692, 0,
	0, 0, 0, 0, 211, 212, 670, 671, 672, 0,
	213, 0, 214, 0, 0, 693, 0, 215, 658, 0,
	355, 0, 0, 216, 217, 0, 0, 218, 219, 654,
	656, 695, 0, 358, 223, 0, 220, 0, 694, 221,
	673, 222, 674, 675, 676, 677, 678, 0, 636, 0,
	696, 224, 225, 226, 697, 227, 228, 229, 0, 231,
	230, 0, 659, 698, 232, 699, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 700, 240,
	241, 243, 242, 597, 0, 626, 655, 244, 679, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	701, 250, 702, 649, 251, 252, 253, 254, 255, 0,
	256, 650, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 680, 264, 265, 0, 266, 267, 268, 269, 270,
	0, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	703, 279, 280, 603, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 643, 293, 282, 283,
	294, 704, 295, 681, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 682, 300, 301, 651, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 381, 683,
	684, 0, 0, 312, 313, 652, 653, 624, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 644, 322,
	0, 386, 323, 324, 325, 387, 685, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 598,
	0, 629, 618, 619, 616, 617, 608, 0, 0, 596,
	0, 0, 0, 0, 594, 595, 0, 177, 178, 0,
	179, 0, 0, 604, 0, 646, 611, 0, 0, 607,
	180, 181, 182, 2463, 661, 335, 662, 183, 663, 664,
	0, 184, 339, 340, 185, 186, 614, 645, 665, 666,
	343, 0, 187, 657, 0, 637, 0, 188, 189, 190,
	0, 191, 0, 192, 0, 193, 194, 0, 691, 195,
	196, 2465, 0, 638, 639, 641, 0, 640, 642, 198,
	199, 396, 200, 667, 201, 668, 669, 0, 202, 0,
	203, 0, 204, 0, 0, 660, 206, 0, 207, 0,
	0, 0, 602, 208, 209, 210, 647, 648, 625, 692,
	0, 0, 0, 0, 0, 211, 212, 670, 671, 672,
	0, 213, 0, 214, 0, 0, 693, 0, 215, 658,
	0, 355, 0, 0, 216, 217, 0, 0, 218, 219,
	654, 656, 695, 0, 358, 223, 0, 220, 0, 694,
	221, 673, 222, 674, 675, 676, 677, 678, 0, 636,
	0, 696, 224, 225, 226, 697, 227, 228, 229, 0,
	231, 230, 0, 659, 698, 232, 699, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 700,
	240, 241, 243, 242, 597, 0, 626, 655, 244, 679,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 701, 250, 702, 649, 251, 252, 253, 254, 255,
	0, 256, 650, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 680, 264, 265, 0, 266, 267, 268, 269,
	270, 0, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 703, 279, 280, 603, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 643, 293, 282,
	283, 294, 704, 295, 681, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 682, 300, 301, 651, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 381,
	683, 684, 0, 0, 312, 313, 652, 653, 624, 314,
	315, 2464, 317, 0, 0, 318, 319, 320, 321, 644,
	322, 0, 386, 323, 324, 325, 387, 685, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	598, 0, 629, 618, 619, 616, 617, 608, 0, 0,
	596, 0, 0, 0, 0, 594, 595, 0, 177, 178,
	0, 179, 0, 0, 604, 0, 646, 611, 0, 0,
	607, 180, 181, 182, 333, 661, 335, 662, 183, 663,
	664, 0, 184, 339, 340, 185, 186, 614, 645, 665,
	666, 343, 0, 187, 657, 0, 637, 0, 188, 189,
	190, 0, 191, 0, 192, 0, 193, 194, 0, 691,
	195, 196, 197, 0, 638, 639, 641, 0, 640, 642,
	198, 199, 396, 200, 667, 201, 668, 669, 0, 202,
	0, 203, 0, 204, 0, 0, 660, 206, 0, 207,
	0, 0, 0, 602, 208, 209, 210, 647, 648, 625,
	692, 0, 0, 0, 0, 0, 211, 212, 670, 671,
	672, 0, 213, 0, 214, 0, 0, 693, 0, 215,
	658, 0, 355, 0, 0, 216, 217, 0, 0, 218,
	219, 654, 656, 695, 0, 358, 223, 0, 220, 0,
	694, 221, 673, 222, 674, 675, 676, 677, 678, 0,
	636, 0, 696, 224, 225, 226, 697, 227, 228, 229,
	0, 231, 230, 0, 659, 698, 232, 699, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	700, 240, 241, 243, 242, 0, 0, 626, 655, 244,
	679, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 701, 250, 702, 649, 251, 252, 253, 254,
	255, 0, 256, 650, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 680, 264, 265, 0, 266, 267, 268,
	269, 270, 0, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 703, 279, 280, 1538, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 643, 293,
	282, 283, 294, 704, 295, 681, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 682, 300, 301, 651, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	381, 683, 684, 0, 0, 312, 313, 652, 653, 624,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	644, 322, 0, 386, 323, 324, 325, 387, 685, 0,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 629, 618, 619, 616, 617, 608, 0,
	0, 1536, 0, 0, 0, 0, 1534, 1535, 0, 177,
	178, 0, 179, 0, 0, 1537, 0, 646, 611, 0,
	0, 607, 180, 181, 182, 333, 661, 335, 662, 183,
	663, 664, 0, 184, 339, 340, 185, 186, 0, 645,
	665, 666, 343, 0, 187, 657, 0, 637, 0, 188,
	189, 190, 0, 191, 0, 192, 0, 193, 194, 0,
	691, 195, 196, 197, 0, 638, 639, 641, 0, 640,
	642, 198, 199, 396, 200, 667, 201, 668, 669, 0,
	202, 0, 203, 0, 204, 0, 0, 660, 206, 0,
	207, 0, 0, 0, 348, 208, 209, 210, 647, 648,
	625, 692, 0, 0, 0, 0, 0, 211, 212, 670,
	671, 672, 0, 213, 0, 214, 0, 0, 693, 0,
	215, 658, 0, 355, 0, 0, 216, 217, 0, 0,
	218, 219, 654, 656, 695, 0, 358, 223, 0, 220,
	0, 694, 221, 673, 222, 674, 675, 676, 677, 678,
	0, 636, 0, 696, 224, 225, 226, 697, 227, 228,
	229, 0, 231, 230, 0, 659, 698, 232, 699, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 700, 240, 241, 243, 242, 0, 0, 626, 655,
	244, 679, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 701, 250, 702, 649, 251, 252, 253,
	254, 255, 0, 256, 650, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 680, 264, 265, 0, 266, 267,
	268, 269, 270, 0, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 703, 279, 280, 1538, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 643,
	293, 282, 283, 294, 704, 295, 681, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 682, 300, 301, 651,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 381, 683, 684, 0, 0, 312, 313, 652, 653,
	624, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 644, 322, 0, 386, 323, 324, 325, 387, 685,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 629, 618, 619, 616, 617, 608,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 178, 0, 179, 0, 0, 1537, 0, 646, 611,
	0, 0, 607, 180, 181, 182, 0, 661, 335, 662,
	183, 663, 664, 0, 184, 339, 340, 185, 186, 614,
	645, 665, 666, 343, 0, 187, 657, 0, 637, 0,
	188, 189, 190, 0, 191, 0, 192, 0, 193, 194,
	0, 691, 195, 196, 2465, 0, 638, 639, 641, 0,
	640, 642, 198, 199, 396, 200, 667, 201, 668, 669,
	0, 202, 0, 203, 0, 204, 0, 0, 660, 206,
	0, 207, 0, 0, 0, 602, 208, 209, 210, 647,
	648, 625, 692, 0, 0, 0, 0, 0, 211, 212,
	670, 671, 672, 0, 213, 0, 214, 0, 0, 693,
	0, 215, 658, 0, 355, 0, 0, 216, 217, 0,
	0, 218, 219, 654, 656, 0, 0, 358, 223, 0,
	220, 0, 694, 221, 673, 222, 674, 675, 676, 677,
	678, 0, 636, 0, 0, 224, 225, 226, 697, 227,
	228, 229, 0, 231, 230, 0, 659, 698, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 700, 240, 241, 243, 242, 597, 0, 626,
	655, 244, 679, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 701, 250, 702, 649, 251, 252,
	253, 254, 255, 0, 256, 650, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 680, 264, 265, 0, 266,
	267, 268, 269, 270, 0, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 703, 279, 280, 603, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	643, 293, 282, 283, 294, 0, 295, 681, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 682, 300, 301,
	651, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 381, 683, 684, 0, 0, 312, 313, 652,
	653, 624, 314, 315, 2464, 317, 0, 0, 318, 319,
	320, 321, 644, 322, 0, 386, 323, 324, 325, 387,
	685, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 594, 595,
	0, 177, 178, 0, 179, 0, 0, 604, 0, 646,
	0, 0, 0, 607, 180, 181, 182, 333, 334, 335,
	336, 183, 337, 338, 0, 184, 339, 340, 185, 186,
	0, 645, 341, 342, 343, 0, 187, 657, 0, 637,
	0, 188, 189, 190, 0, 191, 0, 192, 0, 193,
	194, 0, 691, 195, 196, 197, 0, 638, 639, 641,
	0, 640, 642, 198, 199, 396, 200, 345, 201, 346,
	347, 0, 202, 0, 203, 0, 204, 0, 0, 205,
	206, 0, 207, 0, 0, 0, 348, 208, 209, 210,
	647, 648, 0, 692, 0, 0, 0, 0, 0, 211,
	212, 351, 352, 353, 0, 213, 0, 214, 0, 0,
	693, 0, 215, 658, 0, 355, 0, 0, 216, 217,
	0, 0, 218, 219, 654, 656, 695, 0, 358, 223,
	0, 220, 0, 694, 221, 359, 222, 360, 361, 362,
	363, 364, 0, 365, 0, 696, 224, 225, 226, 697,
	227, 228, 229, 0, 231, 230, 0, 659, 698, 232,
	699, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 700, 240, 241, 243, 242, 0, 0,
	0, 655, 244, 369, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 701, 250, 702, 649, 251,
	252, 253, 254, 255, 0, 256, 650, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 374, 264, 265, 0,
	266, 267, 268, 269, 270, 0, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 703, 279, 280, 375, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 643, 293, 282, 283, 294, 704, 295, 377, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 651, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 381, 382, 383, 0, 0, 312, 313,
	652, 653, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 644, 322, 0, 386, 323, 324, 325,
	387, 388, 0, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 831, 0, 788, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 2111, 0,
	332, 0, 0, 0, 0, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 343, 0, 187, 344, 0,
	792, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 691, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 396, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 692, 0, 0, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 693, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 356, 357, 695, 0, 358,
	223, 0, 220, 0, 694, 221, 359, 222, 360, 361,
	362, 363, 364, 0, 365, 0, 696, 224, 225, 226,
	697, 227, 228, 229, 0, 231, 230, 0, 366, 698,
	232, 699, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 700, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 701, 250, 702, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 703, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 134, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 704, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 136, 305, 306, 307, 308,
	309, 310, 311, 0, 381, 382, 383, 0, 0, 312,
	313, 384, 385, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 386, 323, 324,
	325, 834, 388, 0, 0, 326, 0, 0, 0, 128,
	327, 328, 329, 330, 331, 580, 129, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 120,
	0, 332, 0, 0, 0, 0, 180, 181, 182, 333,
	334, 335, 336, 183, 337, 338, 0, 184, 339, 340,
	185, 186, 0, 0, 341, 342, 343, 0, 187, 344,
	0, 0, 0, 188, 189, 190, 0, 191, 0, 192,
	0, 193, 194, 0, 0, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 198, 199, 396, 200, 345,
	201, 346, 347, 0, 202, 0, 203, 0, 204, 0,
	0, 205, 206, 0, 207, 0, 0, 0, 348, 208,
	209, 210, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 351, 352, 353, 0, 213, 0, 214,
	0, 0, 0, 0, 215, 354, 0, 355, 0, 0,
	216, 217, 0, 0, 218, 219, 356, 357, 0, 0,
	358, 223, 0, 220, 0, 0, 221, 359, 222, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 366,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 744, 248, 0, 0, 249, 370, 0, 250, 0,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 0, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 134, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 136, 305, 306, 307,
	308, 309, 310, 311, 0, 381, 382, 383, 0, 0,
	312, 313, 384, 385, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 386, 323,
	324, 325, 834, 388, 0, 0, 326, 0, 0, 0,
	128, 327, 328, 329, 330, 331, 0, 129, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 178, 0, 179, 738, 0,
	1097, 0, 332, 0, 0, 0, 0, 180, 181, 182,
	333, 334, 335, 336, 183, 337, 338, 0, 184, 339,
	340, 185, 186, 0, 0, 341, 342, 343, 0, 187,
	344, 0, 0, 0, 188, 189, 190, 0, 191, 0,
	192, 0, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 396, 200,
	345, 201, 346, 347, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 348,
	208, 209, 210, 349, 350, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 351, 352, 353, 0, 213, 0,
	214, 0, 0, 0, 0, 215, 354, 0, 355, 0,
	0, 216, 217, 0, 0, 218, 219, 356, 357, 0,
	0, 358, 223, 0, 220, 0, 0, 221, 359, 222,
	360, 361, 362, 363, 364, 0, 365, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	366, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 744, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 0, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 134, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 136, 305, 306,
	307, 308, 309, 310, 311, 0, 381, 382, 383, 0,
	0, 312, 313, 384, 385, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 386,
	323, 324, 325, 834, 388, 0, 0, 326, 0, 0,
	0, 128, 327, 328, 329, 330, 331, 580, 129, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 738,
	0, 1097, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	187, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 0, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 396,
	200, 345, 201, 346, 347, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	348, 208, 209, 210, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 351, 352, 353, 0, 213,
	0, 214, 0, 0, 0, 0, 215, 354, 0, 355,
	0, 0, 216, 217, 0, 0, 218, 219, 356, 357,
	0, 0, 358, 223, 0, 220, 0, 0, 221, 359,
	222, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 366, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 0,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 134,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 136, 305,
	306, 307, 308, 309, 310, 311, 0, 381, 382, 383,
	0, 0, 312, 313, 384, 385, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	386, 323, 324, 325, 834, 388, 0, 0, 326, 0,
	0, 0, 128, 327, 328, 329, 330, 331, 1861, 129,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 120, 0, 332, 0, 0, 0, 0, 180,
	181, 182, 333, 334, 335, 336, 183, 337, 338, 0,
	184, 339, 340, 185, 186, 0, 0, 341, 342, 343,
	0, 187, 344, 0, 0, 0, 188, 189, 190, 0,
	191, 0, 192, 0, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	396, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 351, 352, 353, 0,
	213, 0, 214, 0, 0, 0, 0, 215, 354, 0,
	355, 0, 0, 216, 217, 0, 0, 218, 219, 356,
	357, 0, 0, 358, 223, 0, 220, 0, 0, 221,
	359, 222, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 366, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 744, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	0, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 381, 382,
	383, 0, 0, 312, 313, 384, 385, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 386, 323, 324, 325, 387, 388, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 737,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 178, 0,
	179, 738, 0, 743, 0, 332, 0, 0, 0, 0,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	0, 184, 339, 340, 185, 186, 0, 0, 341, 342,
	343, 0, 187, 344, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 0, 193, 194, 0, 0, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 198,
	199, 396, 200, 345, 201, 346, 347, 0, 202, 0,
	203, 0, 204, 0, 0, 205, 206, 0, 207, 0,
	0, 0, 348, 208, 209, 210, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 351, 352, 353,
	0, 213, 0, 214, 0, 0, 0, 0, 215, 354,
	0, 355, 0, 0, 216, 217, 0, 0, 218, 219,
	356, 357, 0, 0, 358, 223, 0, 220, 0, 0,
	221, 359, 222, 360, 361, 362, 363, 364, 0, 365,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 366, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 368, 244, 369,
	245, 246, 0, 247, 0, 744, 248, 0, 0, 249,
	370, 0, 250, 0, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 374, 264, 265, 0, 266, 267, 268, 269,
	270, 0, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 377, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 381,
	382, 383, 0, 0, 312, 313, 384, 385, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 386, 323, 324, 325, 387, 388, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 738, 0, 743, 332, 0, 0, 0, 0,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	0, 184, 339, 340, 185, 186, 0, 0, 341, 342,
	343, 0, 187, 344, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 0, 193, 194, 0, 0, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 198,
	199, 396, 200, 345, 201, 346, 347, 0, 202, 0,
	203, 0, 204, 0, 0, 205, 206, 0, 207, 0,
	0, 0, 348, 208, 209, 210, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 351, 352, 353,
	0, 213, 0, 214, 0, 0, 0, 0, 215, 354,
	0, 355, 0, 0, 216, 217, 0, 0, 218, 219,
	356, 357, 0, 0, 358, 223, 0, 220, 0, 0,
	221, 359, 222, 360, 361, 362, 363, 364, 0, 365,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 366, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 368, 244, 369,
	245, 246, 0, 247, 0, 744, 248, 0, 0, 249,
	370, 0, 250, 0, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 374, 264, 265, 0, 266, 267, 268, 269,
	270, 0, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 377, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 381,
	382, 383, 0, 0, 312, 313, 384, 385, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 386, 323, 324, 325, 387, 388, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 738, 0, 743, 332, 0, 0, 0, 0,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	0, 184, 339, 340, 185, 186, 0, 0, 341, 342,
	343, 0, 187, 344, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 0, 193, 194, 0, 0, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 198,
	199, 396, 200, 345, 201, 346, 347, 0, 202, 0,
	203, 0, 204, 0, 0, 205, 206, 0, 207, 0,
	0, 0, 348, 208, 209, 210, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 351, 352, 353,
	0, 213, 0, 214, 0, 0, 0, 0, 215, 354,
	0, 355, 0, 0, 216, 217, 0, 0, 218, 219,
	356, 357, 0, 0, 358, 223, 0, 220, 0, 0,
	221, 359, 222, 360, 361, 362, 363, 364, 0, 365,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 366, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 368, 244, 369,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 0, 250, 0, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 374, 264, 265, 0, 266, 267, 268, 269,
	270, 0, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 377, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 381,
	382, 383, 0, 0, 312, 313, 384, 385, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 386, 323, 324, 325, 387, 388, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 332, 1213, 0, 0, 0, 180,
	181, 182, 333, 334, 335, 336, 183, 337, 338, 0,
	184, 339, 340, 185, 186, 0, 0, 341, 342, 343,
	0, 187, 344, 0, 0, 0, 188, 189, 190, 0,
	191, 0, 192, 0, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	396, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 351, 352, 353, 0,
	213, 0, 214, 0, 0, 0, 0, 215, 354, 0,
	355, 0, 0, 216, 217, 0, 0, 218, 219, 356,
	357, 0, 0, 358, 223, 0, 220, 0, 0, 221,
	359, 222, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 366, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	0, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 381, 382,
	383, 0, 0, 312, 313, 384, 385, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 386, 323, 324, 325, 387, 388, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 1677, 332, 0, 0, 0, 0, 180,
	181, 182, 333, 334, 335, 336, 183, 337, 338, 0,
	184, 339, 340, 185, 186, 0, 0, 341, 342, 343,
	0, 187, 344, 0, 0, 0, 188, 189, 190, 0,
	191, 0, 192, 0, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	396, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 351, 352, 353, 0,
	213, 0, 214, 0, 0, 0, 0, 215, 354, 0,
	355, 0, 0, 216, 217, 0, 0, 218, 219, 356,
	357, 0, 0, 358, 223, 0, 220, 0, 0, 221,
	359, 222, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 366, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	0, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 381, 382,
	383, 0, 0, 312, 313, 384, 385, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 386, 323, 324, 325, 387, 388, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 2027, 332, 0, 0, 0, 0, 180,
	181, 182, 333, 334, 335, 336, 183, 337, 338, 0,
	184, 339, 340, 185, 186, 0, 0, 341, 342, 343,
	0, 187, 344, 0, 0, 0, 188, 189, 190, 0,
	191, 0, 192, 0, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	396, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 351, 352, 353, 0,
	213, 0, 214, 0, 0, 0, 0, 215, 354, 0,
	355, 0, 0, 216, 217, 0, 0, 218, 219, 356,
	357, 0, 0, 358, 223, 0, 220, 0, 0, 221,
	359, 222, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 366, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	0, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 381, 382,
	383, 0, 0, 312, 313, 384, 385, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 386, 323, 324, 325, 387, 388, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	629, 618, 619, 616, 617, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 1100, 332, 0, 0, 0, 0, 180,
	181, 182, 333, 661, 335, 662, 183, 663, 664, 0,
	184, 339, 340, 185, 186, 0, 0, 665, 666, 343,
	0, 187, 344, 0, 792, 0, 188, 189, 190, 0,
	191, 0, 192, 0, 193, 194, 0, 691, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	396, 200, 667, 201, 668, 669, 0, 202, 0, 203,
	0, 204, 0, 0, 660, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 625, 692, 0,
	0, 0, 0, 0, 211, 212, 670, 671, 672, 0,
	213, 0, 214, 0, 0, 693, 0, 215, 354, 0,
	355, 0, 0, 216, 217, 0, 0, 218, 219, 356,
	357, 695, 0, 358, 223, 0, 220, 0, 694, 221,
	673, 222, 674, 675, 676, 677, 678, 0, 636, 0,
	696, 224, 225, 226, 697, 227, 228, 229, 0, 231,
	230, 0, 366, 698, 232, 699, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 700, 240,
	241, 243, 242, 0, 0, 626, 368, 244, 679, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	701, 250, 702, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 680, 264, 265, 0, 266, 267, 268, 269, 270,
	0, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	703, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 704, 295, 681, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 682, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 381, 683,
	684, 0, 0, 312, 313, 384, 385, 624, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 386, 323, 324, 325, 387, 685, 0, 476, 326,
	174, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 180,
	181, 182, 333, 334, 335, 336, 183, 337, 338, 0,
	184, 339, 340, 185, 186, 0, 0, 341, 342, 343,
	0, 187, 344, 0, 0, 0, 188, 189, 190, 0,
	191, 0, 192, 0, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	170, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 351, 352, 353, 0,
	213, 0, 214, 0, 0, 0, 0, 215, 354, 0,
	355, 0, 0, 216, 217, 0, 0, 218, 219, 356,
	357, 0, 0, 358, 223, 0, 220, 0, 0, 221,
	359, 222, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 366, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	0, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 169,
	305, 306, 307, 308, 309, 310, 311, 0, 381, 382,
	383, 0, 0, 312, 313, 384, 385, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 386, 323, 324, 325, 387, 388, 0, 167, 326,
	174, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 332, 0, 173, 0, 0, 180,
	181, 182, 333, 334, 335, 336, 183, 337, 338, 0,
	184, 339, 340, 185, 186, 0, 0, 341, 342, 343,
	0, 187, 344, 0, 0, 0, 188, 189, 190, 0,
	191, 0, 192, 0, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	170, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 351, 352, 353, 0,
	213, 0, 214, 0, 0, 0, 0, 215, 354, 0,
	355, 0, 0, 216, 217, 0, 0, 218, 219, 356,
	357, 0, 0, 358, 223, 0, 220, 0, 0, 221,
	359, 222, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 366, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	0, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 169,
	305, 306, 307, 308, 309, 310, 311, 0, 381, 382,
	383, 0, 0, 312, 313, 384, 385, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 386, 323, 324, 325, 387, 388, 0, 174, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 332, 0, 0, 0, 173, 180, 181, 182,
	333, 334, 335, 336, 183, 337, 338, 0, 184, 339,
	340, 185, 186, 0, 0, 341, 342, 343, 0, 187,
	344, 0, 0, 0, 188, 189, 190, 0, 191, 0,
	192, 0, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 170, 200,
	345, 201, 346, 347, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 348,
	208, 209, 210, 349, 350, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 351, 352, 353, 0, 213, 0,
	214, 0, 0, 0, 0, 215, 354, 0, 355, 0,
	0, 216, 217, 0, 0, 218, 219, 356, 357, 0,
	0, 358, 223, 0, 220, 0, 0, 221, 359, 222,
	360, 361, 362, 363, 364, 0, 365, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	366, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 0, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 169, 305, 306,
	307, 308, 309, 310, 311, 0, 381, 382, 383, 0,
	0, 312, 313, 384, 385, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 386,
	323, 324, 325, 387, 388, 0, 174, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	332, 0, 0, 0, 173, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 343, 0, 187, 344, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 396, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 356, 357, 0, 0, 358,
	223, 0, 220, 0, 0, 221, 359, 222, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 366, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 381, 382, 383, 0, 0, 312,
	313, 384, 385, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 386, 323, 324,
	325, 387, 388, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 886, 0, 788, 787, 0,
	0, 0, 785, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 173, 177, 178, 0, 179, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 180, 181, 182, 333,
	334, 335, 336, 183, 337, 338, 0, 184, 339, 340,
	185, 186, 0, 0, 341, 342, 343, 0, 187, 344,
	0, 792, 0, 188, 189, 190, 0, 191, 0, 192,
	0, 193, 194, 0, 691, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 198, 199, 396, 200, 345,
	201, 346, 347, 0, 202, 0, 203, 0, 204, 0,
	0, 205, 206, 0, 207, 0, 0, 0, 348, 208,
	209, 210, 349, 350, 0, 692, 0, 0, 0, 0,
	0, 211, 212, 351, 352, 353, 0, 213, 0, 214,
	0, 0, 693, 0, 215, 354, 0, 355, 0, 0,
	216, 217, 0, 0, 218, 219, 356, 357, 695, 0,
	358, 223, 0, 220, 0, 694, 221, 359, 222, 360,
	361, 362, 363, 364, 0, 365, 0, 696, 224, 225,
	226, 697, 227, 228, 229, 0, 231, 230, 0, 366,
	698, 232, 699, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 700, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 701, 250, 702,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 0, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 703, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 704, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 381, 382, 383, 0, 0,
	312, 313, 384, 385, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 386, 323,
	324, 325, 387, 388, 0, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 826, 0, 788, 787,
	0, 0, 0, 785, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 180, 181, 182,
	333, 334, 335, 336, 183, 337, 338, 0, 184, 339,
	340, 185, 186, 0, 0, 341, 342, 343, 0, 187,
	344, 0, 792, 0, 188, 189, 190, 0, 191, 0,
	192, 0, 193, 194, 0, 691, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 396, 200,
	345, 201, 346, 347, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 348,
	208, 209, 210, 349, 350, 0, 692, 0, 0, 0,
	0, 0, 211, 212, 351, 352, 353, 0, 213, 0,
	214, 0, 0, 693, 0, 215, 354, 0, 355, 0,
	0, 216, 217, 0, 0, 218, 219, 825, 357, 695,
	0, 358, 223, 0, 220, 0, 694, 221, 359, 222,
	360, 361, 362, 363, 364, 0, 365, 0, 696, 224,
	225, 226, 697, 227, 228, 229, 0, 231, 230, 0,
	366, 698, 232, 699, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 700, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 701, 250,
	702, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 0, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 703, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 704,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 381, 382, 383, 0,
	0, 312, 313, 384, 385, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 386,
	323, 324, 325, 387, 388, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 783, 0, 788,
	787, 0, 0, 0, 785, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	187, 344, 0, 792, 0, 188, 189, 190, 0, 191,
	0, 192, 0, 193, 194, 0, 691, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 396,
	200, 345, 201, 346, 347, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	348, 208, 209, 210, 349, 350, 0, 692, 0, 0,
	0, 0, 0, 211, 212, 351, 352, 353, 0, 213,
	0, 214, 0, 0, 693, 0, 215, 354, 0, 355,
	0, 0, 216, 217, 0, 0, 218, 219, 782, 357,
	695, 0, 358, 223, 0, 220, 0, 694, 221, 359,
	222, 360, 361, 362, 363, 364, 0, 365, 0, 696,
	224, 225, 226, 697, 227, 228, 229, 0, 231, 230,
	0, 366, 698, 232, 699, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 700, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 701,
	250, 702, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 0,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 703,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	704, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 381, 382, 383,
	0, 0, 312, 313, 384, 385, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	386, 323, 324, 325, 387, 388, 788, 787, 326, 0,
	0, 785, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 343, 0, 187, 344, 0,
	792, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 691, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 396, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 692, 0, 0, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 693, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 356, 357, 695, 0, 358,
	223, 0, 220, 0, 694, 221, 359, 222, 360, 361,
	362, 363, 364, 0, 365, 0, 696, 224, 225, 226,
	697, 227, 228, 229, 0, 231, 230, 0, 366, 698,
	232, 699, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 700, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 701, 250, 702, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 703, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 704, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 381, 382, 383, 0, 0, 312,
	313, 384, 385, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 386, 323, 324,
	325, 387, 388, 788, 787, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 180, 181, 182, 333, 334, 335, 336, 183,
	337, 338, 0, 184, 339, 340, 185, 186, 0, 0,
	341, 342, 343, 0, 187, 344, 0, 792, 0, 188,
	189, 190, 0, 191, 0, 192, 0, 193, 194, 0,
	691, 195, 196, 197, 0, 0, 0, 0, 0, 0,
	0, 198, 199, 396, 200, 345, 201, 346, 347, 0,
	202, 0, 203, 0, 204, 0, 0, 205, 206, 0,
	207, 0, 0, 0, 348, 208, 209, 210, 349, 350,
	0, 692, 0, 0, 0, 0, 0, 211, 212, 351,
	352, 353, 0, 213, 0, 214, 0, 0, 693, 0,
	215, 354, 0, 355, 0, 0, 216, 217, 0, 0,
	218, 219, 356, 357, 695, 0, 358, 223, 0, 220,
	0, 694, 221, 359, 222, 360, 361, 362, 363, 364,
	0, 365, 0, 696, 224, 225, 226, 697, 227, 228,
	229, 0, 231, 230, 0, 366, 698, 232, 699, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 700, 240, 241, 243, 242, 0, 0, 0, 368,
	244, 369, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 701, 250, 702, 371, 251, 252, 253,
	254, 255, 0, 256, 372, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 374, 264, 265, 0, 266, 267,
	268, 269, 270, 0, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 703, 279, 280, 375, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 0,
	293, 282, 283, 294, 704, 295, 377, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 379, 300, 301, 380,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 381, 382, 383, 0, 0, 312, 313, 384, 385,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 386, 323, 324, 325, 387, 388,
	788, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 180,
	181, 182, 333, 334, 335, 336, 183, 337, 338, 0,
	184, 339, 340, 185, 186, 0, 0, 341, 342, 343,
	0, 187, 344, 0, 792, 0, 188, 189, 190, 0,
	191, 0, 192, 0, 193, 194, 0, 691, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	396, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 692, 0,
	0, 0, 0, 0, 211, 212, 351, 352, 353, 0,
	213, 0, 214, 0, 0, 693, 0, 215, 354, 0,
	355, 0, 0, 216, 217, 0, 0, 218, 219, 356,
	357, 695, 0, 358, 223, 0, 220, 0, 694, 221,
	359, 222, 360, 361, 362, 363, 364, 0, 365, 0,
	696, 224, 225, 226, 697, 227, 228, 229, 0, 231,
	230, 0, 366, 698, 232, 699, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 700, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	701, 250, 702, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	0, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	703, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 704, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 381, 382,
	383, 0, 0, 312, 313, 384, 385, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 386, 323, 324, 325, 387, 388, 174, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 180, 181, 182, 333,
	334, 335, 336, 183, 337, 338, 0, 184, 339, 340,
	185, 186, 0, 0, 341, 342, 343, 1614, 187, 344,
	0, 0, 0, 188, 189, 190, 0, 191, 1612, 192,
	0, 193, 194, 0, 0, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 198, 199, 396, 200, 345,
	201, 346, 347, 0, 202, 0, 203, 0, 204, 0,
	0, 205, 206, 0, 207, 0, 0, 0, 348, 208,
	209, 210, 349, 350, 0, 1653, 0, 0, 0, 0,
	0, 211, 212, 351, 352, 353, 0, 213, 0, 214,
	1617, 0, 0, 0, 215, 354, 0, 355, 0, 0,
	216, 217, 0, 0, 218, 219, 356, 357, 0, 0,
	358, 223, 1651, 220, 0, 0, 221, 359, 222, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 366,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 0, 250, 0,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 258, 1616, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 0, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 381, 382, 383, 0, 0,
	312, 313, 384, 385, 0, 314, 315, 316, 317, 0,
	1652, 318, 319, 320, 321, 0, 322, 0, 386, 323,
	324, 325, 387, 388, 174, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 180, 181, 182, 333, 334, 335, 336,
	183, 337, 338, 0, 184, 339, 340, 185, 186, 0,
	0, 341, 342, 343, 1614, 187, 344, 0, 0, 1609,
	188, 189, 190, 0, 191, 1612, 192, 0, 193, 194,
	0, 0, 195, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 198, 199, 396, 200, 345, 201, 346, 347,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 348, 208, 209, 210, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	351, 352, 353, 0, 213, 0, 214, 1617, 0, 0,
	0, 215, 354, 0, 355, 0, 0, 216, 217, 0,
	0, 218, 219, 1608, 357, 0, 0, 358, 223, 0,
	220, 0, 0, 221, 359, 222, 360, 361, 362, 363,
	364, 0, 365, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 366, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	368, 244, 369, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 0, 250, 0, 371, 251, 252,
	253, 254, 255, 0, 256, 372, 257, 373, 258, 1616,
	259, 260, 261, 262, 263, 374, 264, 265, 0, 266,
	267, 268, 269, 270, 0, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 381, 382, 383, 0, 0, 312, 313, 384,
	385, 0, 314, 315, 316, 317, 0, 1615, 318, 319,
	320, 321, 0, 322, 0, 386, 323, 324, 325, 387,
	388, 0, 808, 326, 174, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 180, 181, 182, 333, 334, 335, 336,
	183, 337, 338, 0, 184, 339, 340, 185, 186, 0,
	0, 341, 342, 343, 0, 187, 344, 0, 0, 0,
	188, 189, 190, 0, 191, 0, 192, 0, 193, 194,
	0, 0, 195, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 198, 199, 396, 200, 345, 201, 346, 347,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 348, 208, 209, 210, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	351, 352, 353, 0, 213, 0, 214, 0, 0, 0,
	0, 215, 354, 0, 355, 0, 0, 216, 217, 0,
	0, 218, 219, 356, 357, 0, 0, 358, 223, 0,
	220, 0, 0, 221, 359, 222, 360, 361, 362, 363,
	364, 0, 365, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 366, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	368, 244, 369, 245, 246, 0, 247, 0, 744, 248,
	0, 0, 249, 370, 0, 250, 0, 371, 251, 252,
	253, 254, 255, 0, 256, 372, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 374, 264, 265, 0, 266,
	267, 268, 269, 270, 0, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 381, 382, 383, 0, 0, 312, 313, 384,
	385, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 386, 323, 324, 325, 387,
	388, 0, 750, 326, 174, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 180, 181, 182, 333, 334, 335, 336,
	183, 337, 338, 0, 184, 339, 340, 185, 186, 0,
	0, 341, 342, 343, 0, 187, 344, 0, 0, 0,
	188, 189, 190, 0, 191, 0, 192, 0, 193, 194,
	0, 0, 195, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 198, 199, 396, 200, 345, 201, 346, 347,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 348, 208, 209, 210, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	351, 352, 353, 0, 213, 0, 214, 0, 0, 0,
	0, 215, 354, 0, 355, 0, 0, 216, 217, 0,
	0, 218, 219, 752, 357, 0, 0, 358, 223, 0,
	220, 0, 0, 221, 359, 222, 360, 361, 362, 363,
	364, 0, 365, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 366, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	368, 244, 369, 245, 246, 0, 247, 0, 744, 248,
	0, 0, 249, 370, 0, 250, 0, 371, 251, 252,
	253, 254, 255, 0, 256, 372, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 374, 264, 265, 0, 266,
	267, 268, 269, 270, 0, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 381, 382, 383, 0, 0, 312, 313, 384,
	385, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 386, 323, 324, 325, 387,
	388, 0, 746, 326, 174, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 180, 181, 182, 333, 334, 335, 336,
	183, 337, 338, 0, 184, 339, 340, 185, 186, 0,
	0, 341, 342, 343, 0, 187, 344, 0, 0, 0,
	188, 189, 190, 0, 191, 0, 192, 0, 193, 194,
	0, 0, 195, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 198, 199, 396, 200, 345, 201, 346, 347,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 348, 208, 209, 210, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	351, 352, 353, 0, 213, 0, 214, 0, 0, 0,
	0, 215, 354, 0, 355, 0, 0, 216, 217, 0,
	0, 218, 219, 748, 357, 0, 0, 358, 223, 0,
	220, 0, 0, 221, 359, 222, 360, 361, 362, 363,
	364, 0, 365, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 366, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	368, 244, 369, 245, 246, 0, 247, 0, 744, 248,
	0, 0, 249, 370, 0, 250, 0, 371, 251, 252,
	253, 254, 255, 0, 256, 372, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 374, 264, 265, 0, 266,
	267, 268, 269, 270, 0, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 381, 382, 383, 0, 0, 312, 313, 384,
	385, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 386, 323, 324, 325, 387,
	388, 0, 408, 326, 174, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	177, 178, 407, 179, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 180, 181, 182, 333, 334, 335, 336,
	183, 337, 338, 0, 184, 339, 340, 185, 186, 0,
	0, 341, 342, 343, 0, 187, 344, 0, 0, 0,
	188, 189, 190, 0, 191, 0, 192, 0, 193, 194,
	0, 0, 195, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 198, 199, 396, 200, 345, 201, 346, 347,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 348, 208, 209, 210, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	351, 352, 353, 0, 213, 0, 214, 0, 0, 0,
	0, 215, 354, 0, 355, 0, 0, 216, 217, 0,
	0, 218, 219, 356, 357, 0, 0, 358, 223, 0,
	220, 0, 0, 221, 359, 222, 360, 361, 362, 363,
	364, 0, 365, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 366, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	368, 244, 369, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 0, 250, 0, 371, 251, 252,
	253, 254, 255, 0, 256, 372, 257, 373, 406, 0,
	259, 260, 261, 262, 263, 374, 264, 265, 0, 266,
	267, 268, 269, 270, 0, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 381, 382, 383, 0, 0, 312, 313, 384,
	385, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 386, 323, 324, 325, 387,
	388, 174, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 332, 0, 1597, 0, 0,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	0, 184, 339, 340, 185, 186, 0, 0, 341, 342,
	343, 0, 187, 344, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 0, 193, 194, 0, 0, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 198,
	199, 396, 200, 345, 201, 346, 347, 0, 202, 0,
	203, 0, 204, 0, 0, 205, 206, 0, 207, 0,
	0, 0, 348, 208, 209, 210, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 351, 352, 353,
	0, 213, 0, 214, 0, 0, 0, 0, 215, 354,
	0, 355, 0, 0, 216, 217, 0, 0, 218, 219,
	356, 357, 0, 0, 358, 223, 0, 220, 0, 0,
	221, 359, 222, 360, 361, 362, 363, 364, 0, 365,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 366, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 368, 244, 369,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 0, 250, 0, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 374, 264, 265, 0, 266, 267, 268, 269,
	270, 0, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 375, 281, 0, 285, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 377, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 381,
	382, 383, 0, 0, 312, 313, 384, 385, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 386, 323, 324, 325, 387, 388, 174, 2173,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 180, 181, 182,
	333, 334, 335, 336, 183, 337, 338, 0, 184, 339,
	340, 185, 186, 0, 0, 341, 342, 343, 0, 187,
	344, 0, 0, 0, 188, 189, 190, 0, 191, 0,
	192, 0, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 396, 200,
	345, 201, 346, 347, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 348,
	208, 209, 210, 349, 350, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 351, 352, 353, 0, 213, 0,
	214, 0, 0, 0, 0, 215, 354, 0, 355, 0,
	0, 216, 217, 0, 0, 218, 219, 356, 357, 0,
	0, 358, 223, 0, 220, 0, 0, 221, 359, 222,
	360, 361, 362, 363, 364, 0, 365, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	366, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 0, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 381, 382, 383, 0,
	0, 312, 313, 384, 385, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 386,
	323, 324, 325, 387, 388, 174, 2173, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 177, 178, 0, 179, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 180, 181, 182, 333, 334, 335,
	336, 183, 337, 338, 0, 184, 339, 340, 185, 186,
	0, 0, 341, 342, 343, 0, 187, 344, 0, 0,
	0, 188, 189, 190, 0, 191, 0, 192, 0, 193,
	194, 0, 0, 195, 196, 197, 0, 0, 0, 0,
	0, 0, 0, 198, 199, 396, 200, 345, 201, 346,
	347, 0, 202, 0, 203, 0, 204, 0, 0, 205,
	206, 0, 207, 0, 0, 0, 348, 208, 209, 210,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 351, 352, 353, 0, 213, 0, 214, 0, 0,
	0, 0, 215, 354, 0, 355, 0, 0, 216, 217,
	0, 0, 218, 219, 356, 357, 0, 0, 358, 223,
	0, 220, 0, 0, 221, 359, 222, 360, 361, 362,
	363, 364, 0, 365, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 366, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 368, 244, 369, 245, 246, 0, 247, 0, 0,
	2170, 0, 0, 249, 370, 0, 250, 0, 371, 251,
	252, 253, 254, 255, 0, 256, 372, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 374, 264, 265, 0,
	266, 267, 268, 269, 270, 0, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 375, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 377, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 380, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 381, 382, 383, 0, 0, 312, 313,
	384, 385, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 386, 323, 324, 325,
	387, 388, 174, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 180, 181, 182, 333, 334, 335, 336, 183, 337,
	338, 0, 184, 339, 340, 185, 186, 0, 0, 341,
	342, 343, 0, 187, 344, 0, 0, 0, 188, 189,
	190, 0, 191, 0, 192, 0, 193, 194, 0, 0,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	198, 199, 396, 200, 345, 201, 346, 347, 0, 202,
	0, 203, 0, 204, 0, 0, 205, 206, 0, 207,
	0, 0, 0, 348, 208, 209, 210, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 351, 352,
	353, 0, 213, 0, 214, 0, 0, 0, 0, 215,
	354, 0, 355, 0, 0, 216, 217, 0, 0, 218,
	219, 356, 357, 0, 0, 358, 223, 0, 220, 0,
	0, 221, 359, 222, 360, 361, 362, 363, 364, 0,
	365, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 366, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 368, 244,
	369, 245, 246, 0, 247, 0, 744, 248, 0, 0,
	249, 370, 0, 250, 0, 371, 251, 252, 253, 254,
	255, 0, 256, 372, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 374, 264, 265, 0, 266, 267, 268,
	269, 270, 0, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 377, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	381, 382, 383, 0, 0, 312, 313, 384, 385, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 386, 323, 324, 325, 387, 388, 0,
	1370, 326, 174, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 180, 181, 182, 333, 334, 335, 336, 183, 337,
	338, 0, 184, 339, 340, 185, 186, 0, 0, 341,
	342, 343, 0, 187, 344, 0, 0, 0, 188, 189,
	190, 0, 191, 0, 192, 0, 193, 194, 0, 0,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	198, 199, 396, 200, 345, 201, 346, 347, 0, 202,
	0, 203, 0, 204, 0, 0, 205, 206, 0, 207,
	0, 0, 0, 348, 208, 209, 210, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 351, 352,
	353, 0, 213, 0, 214, 0, 0, 0, 0, 215,
	354, 0, 355, 0, 0, 216, 217, 0, 0, 218,
	219, 356, 357, 0, 0, 358, 223, 0, 220, 0,
	0, 221, 359, 222, 360, 361, 362, 363, 364, 0,
	365, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 366, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 368, 244,
	369, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 0, 250, 0, 371, 251, 252, 253, 254,
	255, 0, 256, 372, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 374, 264, 265, 0, 266, 267, 268,
	269, 270, 0, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 377, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	381, 382, 383, 0, 0, 312, 313, 384, 385, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 386, 323, 324, 325, 387, 388, 0,
	1368, 326, 174, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 180, 181, 182, 333, 334, 335, 336, 183, 337,
	338, 0, 184, 339, 340, 185, 186, 0, 0, 341,
	342, 343, 0, 187, 344, 0, 0, 0, 188, 189,
	190, 0, 191, 0, 192, 0, 193, 194, 0, 0,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	198, 199, 396, 200, 345, 201, 346, 347, 0, 202,
	0, 203, 0, 204, 0, 0, 205, 206, 0, 207,
	0, 0, 0, 348, 208, 209, 210, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 351, 352,
	353, 0, 213, 0, 214, 0, 0, 0, 0, 215,
	354, 0, 355, 0, 0, 216, 217, 0, 0, 218,
	219, 356, 357, 0, 0, 358, 223, 0, 220, 0,
	0, 221, 359, 222, 360, 361, 362, 363, 364, 0,
	365, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 366, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 368, 244,
	369, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 0, 250, 0, 371, 251, 252, 253, 254,
	255, 0, 256, 372, 257, 373, 258, 0, 259, 260,
	261, 262, 263, 374, 264, 265, 0, 266, 267, 268,
	269, 270, 0, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 375, 281, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 377, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	381, 382, 383, 0, 0, 312, 313, 384, 385, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 386, 323, 324, 325, 387, 388, 174,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 177, 178, 1350, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	187, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 0, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 396,
	200, 345, 201, 346, 347, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	348, 208, 209, 210, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 351, 352, 353, 0, 213,
	0, 214, 0, 0, 0, 0, 215, 354, 0, 355,
	0, 0, 216, 217, 0, 0, 218, 219, 356, 357,
	0, 0, 358, 223, 0, 220, 0, 0, 221, 359,
	222, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 366, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 0,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 381, 382, 383,
	0, 0, 312, 313, 384, 385, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	386, 323, 324, 325, 387, 388, 0, 502, 326, 174,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 865, 0,
	187, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 0, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 396,
	200, 345, 201, 346, 347, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	348, 208, 209, 210, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 351, 352, 353, 0, 213,
	0, 214, 0, 0, 0, 0, 215, 354, 0, 355,
	0, 0, 216, 217, 0, 0, 218, 219, 356, 357,
	0, 0, 358, 223, 0, 220, 0, 0, 221, 359,
	222, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 366, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 504, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 0,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 499, 382, 383,
	0, 0, 312, 313, 384, 385, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	386, 323, 324, 325, 387, 388, 0, 1228, 326, 174,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	187, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 0, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 396,
	200, 345, 201, 346, 347, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	348, 208, 209, 210, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 351, 352, 353, 0, 213,
	0, 214, 0, 0, 0, 0, 215, 354, 0, 355,
	0, 0, 216, 217, 0, 0, 218, 219, 1227, 357,
	0, 0, 358, 223, 0, 220, 0, 0, 221, 359,
	222, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 366, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 0,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 381, 382, 383,
	0, 0, 312, 313, 384, 385, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	386, 323, 324, 325, 387, 388, 0, 502, 326, 174,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 865, 0,
	187, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 0, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 396,
	200, 345, 201, 346, 347, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	348, 208, 209, 210, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 351, 352, 353, 0, 213,
	0, 214, 0, 0, 0, 0, 215, 354, 0, 355,
	0, 0, 216, 217, 0, 0, 218, 219, 356, 357,
	0, 0, 358, 223, 0, 220, 0, 0, 221, 359,
	222, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 366, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 504, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 0,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 499, 382, 383,
	0, 0, 312, 866, 384, 385, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	386, 323, 324, 325, 387, 388, 0, 502, 326, 174,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	493, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 0, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 396,
	200, 345, 201, 346, 347, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	348, 208, 209, 210, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 351, 352, 353, 0, 213,
	0, 214, 0, 0, 0, 0, 215, 354, 0, 355,
	0, 0, 216, 217, 0, 0, 218, 219, 356, 357,
	0, 0, 358, 223, 0, 220, 0, 0, 221, 359,
	222, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 366, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 504, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 0,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 849, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 499, 382, 383,
	0, 0, 312, 313, 384, 385, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	386, 323, 324, 325, 387, 388, 0, 823, 326, 174,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	187, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 0, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 396,
	200, 345, 201, 346, 347, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	348, 208, 209, 210, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 351, 352, 353, 0, 213,
	0, 214, 0, 0, 0, 0, 215, 354, 0, 355,
	0, 0, 216, 217, 0, 0, 218, 219, 822, 357,
	0, 0, 358, 223, 0, 220, 0, 0, 221, 359,
	222, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 366, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 0,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 381, 382, 383,
	0, 0, 312, 313, 384, 385, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	386, 323, 324, 325, 387, 388, 0, 819, 326, 174,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	187, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 0, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 396,
	200, 345, 201, 346, 347, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	348, 208, 209, 210, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 351, 352, 353, 0, 213,
	0, 214, 0, 0, 0, 0, 215, 354, 0, 355,
	0, 0, 216, 217, 0, 0, 218, 219, 818, 357,
	0, 0, 358, 223, 0, 220, 0, 0, 221, 359,
	222, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 366, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 0,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 381, 382, 383,
	0, 0, 312, 313, 384, 385, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	386, 323, 324, 325, 387, 388, 0, 816, 326, 174,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	187, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 0, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 396,
	200, 345, 201, 346, 347, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	348, 208, 209, 210, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 351, 352, 353, 0, 213,
	0, 214, 0, 0, 0, 0, 215, 354, 0, 355,
	0, 0, 216, 217, 0, 0, 218, 219, 815, 357,
	0, 0, 358, 223, 0, 220, 0, 0, 221, 359,
	222, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 366, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 0,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 381, 382, 383,
	0, 0, 312, 313, 384, 385, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	386, 323, 324, 325, 387, 388, 0, 812, 326, 174,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	187, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 0, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 396,
	200, 345, 201, 346, 347, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	348, 208, 209, 210, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 351, 352, 353, 0, 213,
	0, 214, 0, 0, 0, 0, 215, 354, 0, 355,
	0, 0, 216, 217, 0, 0, 218, 219, 811, 357,
	0, 0, 358, 223, 0, 220, 0, 0, 221, 359,
	222, 360, 361, 362, 363, 364, 0, 365, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 366, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 367, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 368, 244, 369, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 370, 0,
	250, 0, 371, 251, 252, 253, 254, 255, 0, 256,
	372, 257, 373, 258, 0, 259, 260, 261, 262, 263,
	374, 264, 265, 0, 266, 267, 268, 269, 270, 0,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 375, 281, 0, 285, 286, 287, 288, 0,
	290, 376, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 377, 378, 296, 0, 303, 297, 298, 284,
	299, 302, 379, 300, 301, 380, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 381, 382, 383,
	0, 0, 312, 313, 384, 385, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	386, 323, 324, 325, 387, 388, 174, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 177, 178, 800, 179, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 343, 0, 187, 344, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 396, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 356, 357, 0, 0, 358,
	223, 0, 220, 0, 0, 221, 359, 222, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 366, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 381, 382, 383, 0, 0, 312,
	313, 384, 385, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 386, 323, 324,
	325, 387, 388, 0, 798, 326, 174, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 343, 0, 187, 344, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 396, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 797, 357, 0, 0, 358,
	223, 0, 220, 0, 0, 221, 359, 222, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 366, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 381, 382, 383, 0, 0, 312,
	313, 384, 385, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 386, 323, 324,
	325, 387, 388, 0, 794, 326, 174, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 343, 0, 187, 344, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 396, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 356, 357, 0, 0, 358,
	223, 0, 220, 0, 0, 221, 359, 222, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 366, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 381, 382, 383, 0, 0, 312,
	313, 384, 385, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 386, 323, 324,
	325, 387, 388, 0, 778, 326, 174, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 343, 0, 187, 344, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 396, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 780, 357, 0, 0, 358,
	223, 0, 220, 0, 0, 221, 359, 222, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 366, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 381, 382, 383, 0, 0, 312,
	313, 384, 385, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 386, 323, 324,
	325, 387, 388, 0, 756, 326, 174, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 343, 0, 187, 344, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 396, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 758, 357, 0, 0, 358,
	223, 0, 220, 0, 0, 221, 359, 222, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 366, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 381, 382, 383, 0, 0, 312,
	313, 384, 385, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 386, 323, 324,
	325, 387, 388, 0, 754, 326, 174, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 343, 0, 187, 344, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 396, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 356, 357, 0, 0, 358,
	223, 0, 220, 0, 0, 221, 359, 222, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 366, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 381, 382, 383, 0, 0, 312,
	313, 384, 385, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 386, 323, 324,
	325, 387, 388, 0, 502, 326, 174, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 343, 0, 493, 344, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 396, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 356, 357, 0, 0, 358,
	223, 0, 220, 0, 0, 221, 359, 222, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 366, 0,
	232, 0, 0, 492, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 504, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 494,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	495, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 499, 382, 383, 0, 0, 312,
	497, 384, 385, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 386, 323, 324,
	325, 387, 388, 0, 484, 326, 174, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 343, 0, 187, 344, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 396, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 356, 357, 0, 0, 358,
	223, 0, 220, 0, 0, 221, 359, 222, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 366, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 485, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 381, 382, 383, 0, 0, 312,
	313, 384, 385, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 386, 323, 324,
	325, 387, 388, 0, 482, 326, 174, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 343, 0, 187, 344, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 396, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 356, 357, 0, 0, 358,
	223, 0, 220, 0, 0, 221, 359, 222, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 366, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 381, 382, 383, 0, 0, 312,
	313, 384, 385, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 386, 323, 324,
	325, 387, 388, 0, 474, 326, 174, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 343, 0, 187, 344, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 396, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 356, 357, 0, 0, 358,
	223, 0, 220, 0, 0, 221, 359, 222, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 366, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 381, 382, 383, 0, 0, 312,
	313, 384, 385, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 386, 323, 324,
	325, 387, 388, 0, 427, 326, 174, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 343, 0, 187, 344, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 0,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 396, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 0, 0, 218, 219, 356, 357, 0, 0, 358,
	223, 0, 220, 0, 0, 221, 359, 222, 360, 361,
	362, 363, 364, 0, 365, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 366, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 367, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 368, 244, 369, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 370, 0, 250, 0, 371,
	251, 252, 253, 254, 255, 0, 256, 372, 257, 373,
	258, 0, 259, 260, 261, 262, 263, 374, 264, 265,
	0, 266, 267, 268, 269, 270, 0, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 375,
	281, 0, 285, 286, 287, 288, 0, 290, 376, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 377,
	378, 296, 0, 303, 297, 298, 284, 299, 302, 379,
	300, 301, 380, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 381, 382, 383, 0, 0, 312,
	313, 384, 385, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 386, 323, 324,
	325, 387, 388, 174, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 180, 181, 182, 333, 334, 335, 336, 183,
	337, 338, 0, 184, 339, 340, 185, 186, 0, 0,
	341, 342, 343, 0, 187, 344, 0, 0, 0, 188,
	189, 190, 0, 191, 0, 192, 0, 193, 194, 0,
	0, 195, 196, 197, 0, 0, 0, 0, 0, 0,
	0, 198, 199, 396, 200, 345, 201, 346, 347, 0,
	202, 0, 203, 0, 204, 0, 0, 205, 206, 0,
	207, 0, 0, 0, 348, 208, 209, 210, 349, 350,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 351,
	352, 353, 0, 213, 0, 214, 0, 0, 0, 0,
	215, 354, 0, 355, 0, 0, 216, 217, 0, 0,
	218, 219, 356, 357, 0, 0, 358, 223, 0, 220,
	0, 0, 221, 359, 222, 360, 361, 362, 363, 364,
	0, 365, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 366, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 367,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 368,
	244, 369, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 370, 0, 250, 0, 371, 251, 252, 253,
	254, 255, 0, 256, 372, 257, 373, 258, 0, 259,
	260, 261, 262, 263, 374, 264, 265, 0, 266, 267,
	268, 269, 270, 0, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 375, 281, 0, 285,
	286, 287, 288, 0, 290, 376, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 377, 378, 296, 0,
	303, 297, 298, 284, 299, 302, 379, 300, 301, 380,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 381, 382, 383, 0, 0, 312, 313, 384, 385,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 386, 323, 324, 325, 387, 388,
	174, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 180,
	181, 182, 333, 334, 335, 336, 183, 337, 338, 0,
	184, 339, 340, 185, 186, 0, 0, 341, 342, 343,
	0, 187, 344, 0, 0, 0, 188, 189, 190, 0,
	191, 0, 192, 0, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	396, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 351, 352, 353, 0,
	213, 0, 214, 0, 0, 0, 0, 215, 354, 0,
	355, 0, 0, 216, 217, 0, 0, 218, 219, 1908,
	357, 0, 0, 358, 223, 0, 220, 0, 0, 221,
	359, 222, 360, 361, 362, 363, 364, 0, 365, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 366, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 367, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 368, 244, 369, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 370,
	0, 250, 0, 371, 251, 252, 253, 254, 255, 0,
	256, 372, 257, 373, 258, 0, 259, 260, 261, 262,
	263, 374, 264, 265, 0, 266, 267, 268, 269, 270,
	0, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 375, 281, 0, 285, 286, 287, 288,
	0, 290, 376, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 377, 378, 296, 0, 303, 297, 298,
	284, 299, 302, 379, 300, 301, 380, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 381, 382,
	383, 0, 0, 312, 313, 384, 385, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 386, 323, 324, 325, 387, 388, 174, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 180, 181, 182, 333,
	334, 335, 336, 183, 337, 338, 0, 184, 339, 340,
	185, 186, 0, 0, 341, 342, 343, 0, 187, 344,
	0, 0, 0, 188, 189, 190, 0, 191, 0, 192,
	0, 193, 194, 0, 0, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 198, 199, 396, 200, 345,
	201, 346, 347, 0, 202, 0, 203, 0, 204, 0,
	0, 205, 206, 0, 207, 0, 0, 0, 348, 208,
	209, 210, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 351, 352, 353, 0, 213, 0, 214,
	0, 0, 0, 0, 215, 354, 0, 355, 0, 0,
	216, 217, 0, 0, 218, 219, 1906, 357, 0, 0,
	358, 223, 0, 220, 0, 0, 221, 359, 222, 360,
	361, 362, 363, 364, 0, 365, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 366,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 367, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 368, 244, 369, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 370, 0, 250, 0,
	371, 251, 252, 253, 254, 255, 0, 256, 372, 257,
	373, 258, 0, 259, 260, 261, 262, 263, 374, 264,
	265, 0, 266, 267, 268, 269, 270, 0, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	375, 281, 0, 285, 286, 287, 288, 0, 290, 376,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	377, 378, 296, 0, 303, 297, 298, 284, 299, 302,
	379, 300, 301, 380, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 381, 382, 383, 0, 0,
	312, 313, 384, 385, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 386, 323,
	324, 325, 387, 388, 174, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 180, 181, 182, 333, 334, 335, 336,
	183, 337, 338, 0, 184, 339, 340, 185, 186, 0,
	0, 341, 342, 343, 0, 187, 344, 0, 0, 0,
	188, 189, 190, 0, 191, 0, 192, 0, 193, 194,
	0, 0, 195, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 198, 199, 396, 200, 345, 201, 346, 347,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 348, 208, 209, 210, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	351, 352, 353, 0, 213, 0, 214, 0, 0, 0,
	0, 215, 354, 0, 355, 0, 0, 216, 217, 0,
	0, 218, 219, 1895, 357, 0, 0, 358, 223, 0,
	220, 0, 0, 221, 359, 222, 360, 361, 362, 363,
	364, 0, 365, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 366, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	367, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	368, 244, 369, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 370, 0, 250, 0, 371, 251, 252,
	253, 254, 255, 0, 256, 372, 257, 373, 258, 0,
	259, 260, 261, 262, 263, 374, 264, 265, 0, 266,
	267, 268, 269, 270, 0, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 375, 281, 0,
	285, 286, 287, 288, 0, 290, 376, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 377, 378, 296,
	0, 303, 297, 298, 284, 299, 302, 379, 300, 301,
	380, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 381, 382, 383, 0, 0, 312, 313, 384,
	385, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 386, 323, 324, 325, 387,
	388, 174, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	0, 184, 339, 340, 185, 186, 0, 0, 341, 342,
	343, 0, 187, 344, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 0, 193, 194, 0, 0, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 198,
	199, 396, 200, 345, 201, 346, 347, 0, 202, 0,
	203, 0, 204, 0, 0, 205, 206, 0, 207, 0,
	0, 0, 348, 208, 209, 210, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 351, 352, 353,
	0, 213, 0, 214, 0, 0, 0, 0, 215, 354,
	0, 355, 0, 0, 216, 217, 0, 0, 218, 219,
	356, 357, 0, 0, 358, 223, 0, 220, 0, 0,
	221, 359, 222, 360, 361, 362, 363, 364, 0, 365,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 366, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 367, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 368, 244, 369,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	370, 0, 250, 0, 371, 251, 252, 253, 254, 255,
	0, 256, 372, 257, 373, 258, 0, 259, 260, 261,
	262, 263, 374, 264, 265, 0, 266, 267, 268, 269,
	270, 0, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 375, 281, 0, 485, 286, 287,
	288, 0, 290, 376, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 377, 378, 296, 0, 303, 297,
	298, 284, 299, 302, 379, 300, 301, 380, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 381,
	382, 383, 0, 0, 312, 313, 384, 385, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 386, 323, 324, 325, 387, 388, 174, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 332, 0, 1238, 0, 0, 180, 181, 182,
	333, 334, 335, 336, 183, 337, 338, 0, 184, 339,
	340, 185, 186, 0, 0, 341, 342, 343, 0, 187,
	344, 0, 0, 0, 188, 189, 190, 0, 191, 0,
	192, 0, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 396, 200,
	345, 201, 346, 347, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 348,
	208, 209, 210, 349, 350, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 351, 352, 353, 0, 213, 0,
	214, 0, 0, 0, 0, 215, 354, 0, 355, 0,
	0, 216, 217, 0, 0, 218, 219, 356, 357, 0,
	0, 358, 223, 0, 220, 0, 0, 221, 359, 222,
	360, 361, 362, 363, 364, 0, 365, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	366, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 367, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 368, 244, 369, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 370, 0, 250,
	0, 371, 251, 252, 253, 254, 255, 0, 256, 372,
	257, 373, 258, 0, 259, 260, 261, 262, 263, 374,
	264, 265, 0, 266, 267, 268, 269, 270, 0, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 375, 281, 0, 285, 286, 287, 288, 0, 290,
	376, 289, 291, 292, 0, 0, 282, 283, 294, 0,
	295, 377, 378, 296, 0, 303, 297, 298, 284, 299,
	302, 379, 300, 301, 380, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 381, 382, 383, 0,
	0, 312, 313, 384, 385, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 386,
	323, 324, 325, 387, 388, 174, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 177, 178, 0, 179, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 180, 181, 182, 333, 334, 335,
	336, 183, 337, 338, 0, 184, 339, 340, 185, 186,
	0, 0, 341, 342, 343, 0, 187, 344, 0, 0,
	0, 188, 189, 190, 0, 191, 0, 192, 0, 193,
	194, 0, 0, 195, 196, 197, 0, 0, 0, 0,
	0, 0, 0, 198, 199, 396, 200, 345, 201, 346,
	347, 0, 202, 0, 203, 0, 204, 0, 0, 205,
	206, 0, 207, 0, 0, 0, 348, 208, 209, 210,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 351, 352, 353, 0, 213, 0, 214, 0, 0,
	0, 0, 215, 354, 0, 355, 0, 0, 216, 217,
	0, 0, 218, 219, 356, 357, 0, 0, 358, 223,
	0, 220, 0, 0, 221, 359, 222, 360, 361, 362,
	363, 364, 0, 365, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 366, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 367, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 368, 244, 369, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 370, 0, 250, 0, 371, 251,
	252, 253, 254, 255, 0, 256, 372, 257, 373, 258,
	0, 259, 260, 261, 262, 263, 374, 720, 265, 0,
	266, 267, 268, 269, 270, 0, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 375, 281,
	0, 285, 286, 287, 288, 0, 290, 376, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 377, 378,
	296, 0, 303, 297, 298, 284, 299, 302, 379, 300,
	301, 380, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 381, 382, 383, 0, 0, 312, 313,
	384, 385, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 386, 323, 324, 325,
	387, 388, 174, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 180, 181, 182, 333, 334, 335, 336, 183, 337,
	338, 0, 184, 339, 340, 185, 186, 0, 0, 341,
	342, 343, 0, 187, 344, 0, 0, 0, 188, 189,
	190, 0, 191, 0, 192, 0, 193, 194, 0, 0,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	198, 199, 396, 200, 345, 201, 346, 347, 0, 202,
	0, 203, 0, 204, 0, 0, 205, 206, 0, 207,
	0, 0, 0, 348, 208, 209, 210, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 351, 352,
	353, 0, 213, 0, 214, 0, 0, 0, 0, 215,
	354, 0, 355, 0, 0, 216, 217, 0, 0, 218,
	219, 356, 357, 0, 0, 358, 223, 0, 220, 0,
	0, 221, 359, 222, 360, 361, 362, 363, 364, 0,
	365, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 366, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 367, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 368, 244,
	369, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 370, 0, 250, 0, 371, 251, 252, 0, 254,
	255, 0, 256, 372, 257, 373, 258, 0, 259, 260,
	261, 0, 263, 374, 264, 265, 0, 266, 267, 268,
	269, 270, 0, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 375, 0, 0, 285, 286,
	287, 288, 0, 290, 376, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 377, 378, 296, 0, 303,
	297, 298, 284, 299, 302, 379, 300, 301, 380, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	381, 382, 383, 0, 0, 312, 313, 384, 385, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 386, 323, 324, 325, 387, 388, 0,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 951, 952, 0, 981, 982, 983, 991, 992, 993,
	0, 0, 0, 0, 0, 0, 0, 984, 0, 0,
	0, 0, 0, 0, 954, 0, 0, 995, 0, 0,
	0, 0, 0, 0, 0, 0, 951, 952, 0, 981,
	982, 983, 991, 992, 993, 0, 0, 0, 953, 0,
	0, 0, 984, 0, 973, 0, 951, 952, 970, 954,
	0, 0, 995, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 954,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 976, 977, 978, 979, 973,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 988, 996, 0, 0,
	976, 977, 978, 979, 0, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 994, 0, 0, 0, 0,
	976, 977, 978, 979, 0, 0, 0, 0, 0, 959,
	986, 988, 996, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	994, 951, 952, 0, 981, 982, 983, 991, 992, 993,
	0, 985, 0, 0, 0, 986, 0, 984, 0, 0,
	0, 974, 0, 0, 954, 0, 0, 995, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 974, 0, 0, 0, 980, 985, 0, 953, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 970, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 0,
	980, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 0, 0, 0, 0,
	980, 0, 0, 0, 0, 976, 977, 978, 979, 0,
	0, 989, 0, 0, 959, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 988, 996, 0, 0,
	0, 0, 0, 0, 987, 0, 0, 965, 966, 972,
	971, 967, 968, 969, 990, 994, 964, 962, 963, 955,
	956, 957, 958, 960, 961, 0, 0, 0, 0, 0,
	986, 0, 0, 1795, 0, 0, 974, 0, 0, 987,
	0, 0, 965, 966, 972, 971, 967, 968, 969, 990,
	0, 964, 962, 963, 955, 956, 957, 958, 960, 961,
	0, 985, 0, 0, 2436, 0, 0, 0, 0, 0,
	0, 964, 962, 963, 955, 956, 957, 958, 960, 961,
	951, 952, 0, 981, 982, 983, 991, 992, 993, 0,
	0, 0, 0, 0, 0, 980, 984, 0, 0, 0,
	0, 0, 0, 954, 0, 0, 995, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 951, 952, 0, 981,
	982, 983, 991, 992, 993, 0, 989, 953, 0, 0,
	0, 0, 984, 973, 0, 0, 0, 970, 0, 954,
	0, 0, 995, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 976, 977, 978, 979, 0, 0,
	0, 0, 0, 959, 987, 0, 0, 965, 966, 972,
	971, 967, 968, 969, 990, 0, 964, 962, 963, 955,
	956, 957, 958, 960, 961, 988, 996, 0, 0, 2389,
	976, 977, 978, 979, 0, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 994, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 986,
	0, 988, 996, 0, 0, 974, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	994, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	985, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 980, 0, 985, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 951, 952, 0, 981, 982,
	983, 991, 992, 993, 0, 989, 0, 0, 0, 0,
	980, 984, 0, 0, 0, 0, 0, 0, 954, 0,
	0, 995, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 989, 953, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 0, 0, 965, 966, 972, 971,
	967, 968, 969, 990, 0, 964, 962, 963, 955, 956,
	957, 958, 960, 961, 0, 0, 0, 0, 2343, 976,
	977, 978, 979, 0, 0, 0, 0, 0, 959, 987,
	0, 0, 965, 966, 972, 971, 967, 968, 969, 990,
	0, 964, 962, 963, 955, 956, 957, 958, 960, 961,
	988, 996, 0, 0, 2313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 994,
	951, 952, 0, 981, 982, 983, 991, 992, 993, 0,
	0, 0, 0, 0, 986, 0, 984, 0, 0, 0,
	974, 0, 0, 954, 0, 0, 995, 0, 0, 0,
	0, 0, 0, 0, 0, 951, 952, 0, 981, 982,
	983, 991, 992, 993, 0, 985, 0, 953, 0, 0,
	0, 984, 0, 973, 0, 0, 0, 970, 954, 0,
	0, 995, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 980,
	0, 0, 953, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 970, 0, 975, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 976, 977, 978, 979, 0, 0,
	989, 0, 0, 959, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 988, 996, 0, 0, 976,
	977, 978, 979, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 994, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 986,
	988, 996, 0, 0, 0, 974, 0, 0, 987, 0,
	0, 965, 966, 972, 971, 967, 968, 969, 990, 994,
	964, 962, 963, 955, 956, 957, 958, 960, 961, 0,
	985, 0, 0, 2308, 986, 0, 0, 0, 0, 0,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 980, 985, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 0, 951, 952, 0, 981,
	982, 983, 991, 992, 993, 989, 0, 0, 0, 980,
	0, 0, 984, 0, 0, 0, 0, 0, 0, 954,
	0, 0, 995, 0, 975, 0, 0, 0, 0, 0,
	0, 1803, 1804, 0, 1821, 1822, 1823, 0, 0, 0,
	989, 0, 0, 953, 0, 0, 0, 2000, 0, 973,
	0, 0, 0, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 0, 0, 965, 966, 972, 971,
	967, 968, 969, 990, 1818, 964, 962, 963, 955, 956,
	957, 958, 960, 961, 0, 0, 0, 0, 2304, 0,
	976, 977, 978, 979, 0, 0, 0, 0, 987, 959,
	0, 965, 966, 972, 971, 967, 968, 969, 990, 0,
	964, 962, 963, 955, 956, 957, 958, 960, 961, 0,
	0, 988, 996, 2246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1809, 0, 0, 0, 0, 0,
	994, 951, 952, 0, 981, 982, 983, 991, 992, 993,
	0, 0, 0, 0, 0, 986, 0, 984, 0, 0,
	0, 974, 0, 0, 954, 0, 0, 995, 0, 0,
	0, 0, 0, 0, 0, 1824, 951, 952, 0, 981,
	982, 983, 991, 992, 993, 0, 985, 0, 953, 0,
	0, 0, 984, 0, 973, 0, 1819, 0, 970, 954,
	0, 0, 995, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	980, 0, 0, 953, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 970, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 976, 977, 978, 979, 0,
	0, 989, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1820, 0, 0, 0, 0, 0, 988, 996, 0, 0,
	976, 977, 978, 979, 0, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 994, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	986, 988, 996, 0, 0, 0, 974, 0, 0, 987,
	0, 0, 965, 966, 972, 971, 967, 968, 969, 990,
	994, 964, 962, 963, 955, 956, 957, 958, 960, 961,
	0, 985, 0, 0, 2212, 986, 0, 0, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 1815, 1816, 1817,
	0, 0, 0, 0, 0, 0, 1814, 1812, 1813, 1805,
	1806, 1807, 1808, 1810, 1811, 980, 985, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 951, 952, 0,
	981, 982, 983, 991, 992, 993, 989, 0, 0, 0,
	980, 0, 0, 984, 0, 0, 0, 0, 0, 0,
	954, 0, 0, 995, 0, 975, 0, 0, 0, 0,
	0, 0, 1803, 1804, 0, 1821, 1822, 1823, 0, 0,
	0, 989, 0, 0, 953, 0, 0, 0, 1999, 0,
	973, 0, 0, 0, 970, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 987, 0, 0, 965, 966, 972,
	971, 967, 968, 969, 990, 1818, 964, 962, 963, 955,
	956, 957, 958, 960, 961, 0, 0, 0, 0, 2211,
	0, 976, 977, 978, 979, 0, 0, 0, 0, 987,
	959, 0, 965, 966, 972, 971, 967, 968, 969, 990,
	0, 964, 962, 963, 955, 956, 957, 958, 960, 961,
	0, 0, 988, 996, 2176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1809, 0, 0, 0, 0,
	0, 994, 951, 952, 0, 981, 982, 983, 991, 992,
	993, 0, 0, 0, 0, 0, 986, 0, 984, 0,
	0, 0, 974, 0, 0, 954, 0, 0, 995, 0,
	0, 0, 0, 0, 0, 0, 1824, 951, 952, 0,
	981, 982, 983, 991, 992, 993, 0, 985, 0, 953,
	0, 0, 0, 984, 0, 973, 0, 1819, 0, 970,
	954, 0, 0, 995, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 980, 0, 0, 953, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 970, 0, 975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 976, 977, 978, 979,
	0, 0, 989, 0, 0, 959, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1820, 0, 0, 0, 0, 0, 988, 996, 0,
	0, 976, 977, 978, 979, 0, 0, 0, 0, 0,
	959, 0, 0, 0, 0, 0, 994, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 986, 988, 996, 0, 0, 0, 974, 0, 0,
	987, 0, 0, 965, 966, 972, 971, 967, 968, 969,
	990, 994, 964, 962, 963, 955, 956, 957, 958, 960,
	961, 0, 985, 0, 0, 2030, 986, 0, 0, 0,
	0, 0, 974, 0, 0, 0, 0, 0, 1815, 1816,
	1817, 0, 0, 0, 0, 0, 0, 1814, 1812, 1813,
	1805, 1806, 1807, 1808, 1810, 1811, 980, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 975, 0, 0, 0, 0, 0, 0, 951, 952,
	0, 981, 982, 983, 991, 992, 993, 989, 0, 0,
	0, 980, 0, 0, 984, 0, 0, 0, 0, 0,
	0, 954, 0, 0, 995, 0, 975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 989, 0, 0, 953, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 987, 0, 0, 965, 966,
	972, 971, 967, 968, 969, 990, 0, 964, 962, 963,
	955, 956, 957, 958, 960, 961, 0, 0, 0, 0,
	2006, 0, 976, 977, 978, 979, 0, 0, 0, 0,
	987, 959, 0, 965, 966, 972, 971, 967, 968, 969,
	990, 0, 964, 962, 963, 955, 956, 957, 958, 960,
	961, 0, 0, 988, 996, 1476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 994, 951, 952, 0, 981, 982, 983, 991,
	992, 993, 0, 0, 0, 0, 0, 986, 0, 984,
	0, 0, 0, 974, 0, 0, 954, 0, 0, 995,
	0, 0, 0, 0, 0, 0, 0, 0, 951, 952,
	0, 981, 982, 983, 991, 992, 993, 0, 985, 0,
	953, 0, 0, 0, 984, 0, 973, 0, 0, 0,
	970, 954, 0, 0, 995, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 980, 0, 0, 953, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 970, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 977, 978,
	979, 0, 0, 989, 0, 0, 959, 2496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 988, 996,
	0, 0, 976, 977, 978, 979, 0, 0, 0, 0,
	0, 959, 0, 1835, 0, 0, 1834, 994, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 986, 988, 996, 0, 0, 0, 974, 0,
	0, 987, 0, 0, 965, 966, 972, 971, 967, 968,
	969, 990, 994, 964, 962, 963, 955, 956, 957, 958,
	960, 961, 0, 985, 1765, 0, 0, 986, 0, 0,
	0, 0, 0, 974, 0, 0, 0, 0, 0, 2495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 980, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 975, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 989, 0,
	0, 0, 980, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 989, 0, 0, 0, 0, 0, 0,
	0, 951, 952, 0, 981, 982, 983, 991, 992, 993,
	0, 0, 0, 0, 0, 0, 0, 984, 0, 0,
	0, 0, 1738, 0, 954, 0, 987, 995, 0, 965,
	966, 972, 971, 967, 968, 969, 990, 0, 964, 962,
	963, 955, 956, 957, 958, 960, 961, 0, 953, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 970, 0,
	0, 987, 0, 0, 965, 966, 972, 971, 967, 968,
	969, 990, 0, 964, 962, 963, 955, 956, 957, 958,
	960, 961, 0, 0, 0, 1739, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 976, 977, 978, 979, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 1573, 0,
	0, 0, 0, 0, 951, 952, 0, 981, 982, 983,
	991, 992, 993, 0, 0, 0, 988, 996, 0, 0,
	984, 0, 0, 0, 1572, 0, 0, 954, 0, 0,
	995, 0, 0, 0, 0, 994, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	986, 953, 0, 0, 0, 0, 974, 973, 0, 0,
	0, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 951, 952, 0, 981, 982, 983, 991, 992, 993,
	0, 985, 0, 0, 0, 0, 0, 984, 0, 0,
	0, 0, 0, 0, 954, 0, 0, 995, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 976, 977,
	978, 979, 0, 0, 0, 980, 0, 959, 953, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 970, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 988,
	996, 0, 0, 0, 0, 0, 989, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 994, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 986, 0, 976, 977, 978, 979, 974,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 985, 0, 988, 996, 0, 0,
	0, 0, 0, 0, 987, 0, 0, 965, 966, 972,
	971, 967, 968, 969, 990, 994, 964, 962, 963, 955,
	956, 957, 958, 960, 961, 0, 0, 0, 980, 0,
	986, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 989,
	0, 985, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 980, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 987, 0, 0,
	965, 966, 972, 971, 967, 968, 969, 990, 0, 964,
	962, 963, 955, 956, 957, 958, 960, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 951,
	952, 0, 981, 982, 983, 991, 992, 993, 0, 0,
	0, 0, 0, 0, 0, 984, 0, 0, 0, 0,
	0, 0, 954, 0, 987, 995, 0, 965, 966, 972,
	971, 967, 968, 969, 990, 0, 964, 962, 963, 955,
	956, 957, 958, 960, 961, 0, 953, 0, 0, 0,
	0, 0, 973, 0, 951, 952, 970, 981, 982, 983,
	991, 992, 993, 0, 0, 0, 0, 0, 0, 0,
	984, 0, 0, 0, 0, 0, 0, 954, 0, 0,
	995, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 976, 977, 978, 979, 973, 0, 0,
	0, 970, 959, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 988, 996, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 994, 0, 0, 0, 0, 976, 977,
	978, 979, 0, 0, 0, 0, 0, 959, 986, 0,
	0, 0, 1841, 0, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 988,
	996, 0, 0, 0, 0, 0, 0, 0, 0, 985,
	0, 0, 0, 0, 0, 0, 0, 0, 994, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 986, 0, 0, 0, 0, 0, 974,
	0, 0, 0, 980, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 975, 0,
	0, 0, 0, 0, 985, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 989, 0, 0, 0, 0, 0,
	0, 0, 0, 951, 952, 0, 981, 982, 983, 991,
	992, 993, 0, 0, 0, 0, 0, 0, 980, 984,
	2010, 0, 0, 1836, 0, 0, 954, 0, 0, 995,
	0, 0, 0, 975, 0, 0, 0, 0, 951, 952,
	0, 981, 982, 983, 991, 992, 993, 0, 0, 989,
	953, 0, 0, 0, 984, 0, 973, 0, 0, 0,
	970, 954, 987, 0, 995, 965, 966, 972, 971, 967,
	968, 969, 990, 0, 964, 962, 963, 955, 956, 957,
	958, 960, 961, 0, 0, 953, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 977, 978,
	979, 0, 0, 0, 0, 0, 959, 987, 0, 0,
	965, 966, 972, 971, 967, 968, 969, 990, 0, 964,
	962, 963, 955, 956, 957, 958, 960, 961, 988, 996,
	0, 0, 976, 977, 978, 979, 0, 0, 0, 0,
	0, 959, 0, 0, 0, 0, 0, 994, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 986, 988, 996, 0, 0, 0, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 994, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 985, 0, 0, 0, 986, 0, 0,
	0, 0, 0, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 980, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1801, 975, 0, 0, 0, 0, 951, 952, 0,
	981, 982, 983, 991, 992, 993, 0, 0, 989, 0,
	0, 0, 980, 984, 0, 0, 0, 1794, 0, 0,
	954, 0, 0, 995, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 989, 953, 0, 0, 0, 0, 0,
	973, 0, 951, 952, 970, 981, 982, 983, 991, 992,
	993, 0, 0, 0, 0, 0, 0, 0, 984, 0,
	0, 0, 0, 0, 0, 954, 987, 0, 995, 965,
	966, 972, 971, 967, 968, 969, 990, 0, 964, 962,
	963, 955, 956, 957, 958, 960, 961, 0, 0, 953,
	0, 976, 977, 978, 979, 973, 0, 0, 0, 970,
	959, 987, 0, 0, 965, 966, 972, 971, 967, 968,
	969, 990, 0, 964, 962, 963, 955, 956, 957, 958,
	960, 961, 988, 996, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 994, 0, 0, 0, 0, 976, 977, 978, 979,
	0, 0, 0, 0, 0, 959, 986, 0, 0, 0,
	0, 0, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 988, 996, 0,
	0, 0, 0, 0, 0, 0, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 994, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 974, 0, 0,
	0, 980, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 985, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 989, 0, 0, 0, 0, 0, 0, 0,
	0, 951, 952, 0, 981, 982, 983, 991, 992, 993,
	0, 0, 0, 0, 0, 0, 980, 984, 0, 0,
	0, 0, 0, 0, 954, 0, 0, 995, 0, 0,
	0, 975, 0, 0, 0, 0, 951, 952, 0, 981,
	982, 983, 991, 992, 993, 0, 0, 989, 953, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 970, 954,
	987, 0, 995, 965, 966, 972, 971, 967, 968, 969,
	990, 0, 964, 962, 963, 955, 956, 957, 958, 960,
	961, 0, 0, 953, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 976, 977, 978, 979, 0,
	0, 0, 0, 0, 959, 987, 0, 0, 965, 966,
	972, 971, 967, 968, 969, 990, 0, 964, 962, 963,
	955, 956, 957, 958, 960, 961, 988, 996, 0, 0,
	976, 977, 978, 979, 0, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 994, 951, 952, 0, 981,
	982, 983, 991, 992, 993, 0, 0, 0, 0, 0,
	986, 988, 996, 0, 0, 0, 974, 0, 0, 954,
	0, 0, 995, 0, 0, 0, 0, 0, 0, 0,
	994, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 986, 0, 0, 0, 973,
	0, 974, 0, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 980, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	976, 977, 978, 979, 0, 0, 989, 0, 0, 959,
	980, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 988, 996, 0, 0, 0, 0, 0, 0, 0,
	0, 989, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 974, 0, 0, 987, 0, 0, 965, 966, 972,
	971, 967, 968, 969, 990, 0, 964, 962, 963, 955,
	956, 957, 958, 960, 961, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 987,
	0, 0, 965, 966, 972, 971, 967, 968, 969, 990,
	0, 964, 962, 963, 955, 956, 957, 958, 960, 961,
	980, 0, 0, 0, 1282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 989, 0, 0, 0, 0, 0, 1290, 1279, 1309,
	1270, 1300, 1299, 0, 0, 1272, 1271, 0, 0, 0,
	0, 1311, 1310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1305, 0, 1297, 1296,
	0, 0, 0, 0, 0, 1282, 0, 0, 1295, 987,
	0, 0, 965, 966, 972, 971, 967, 968, 969, 990,
	0, 964, 962, 963, 955, 956, 957, 958, 960, 961,
	1294, 1292, 1293, 0, 0, 0, 0, 0, 1290, 1279,
	1309, 1270, 1300, 1299, 0, 0, 1272, 1271, 0, 0,
	0, 0, 1311, 1310, 0, 0, 0, 1278, 0, 0,
	0, 0, 0, 0, 1283, 1281, 1284, 1285, 1286, 1287,
	1288, 0, 1308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1305, 0, 1297,
	1296, 0, 0, 0, 0, 0, 0, 0, 0, 1295,
	1274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 1280, 0, 0, 0,
	0, 1294, 1292, 1293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1291, 0, 0, 1278, 1401,
	1399, 1400, 1403, 1402, 0, 1283, 1281, 1284, 1285, 1286,
	1287, 1288, 0, 1308, 523, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1275, 0, 0, 0,
	0, 0, 0, 0, 528, 0, 0, 1289, 1276, 0,
	0, 1274, 0, 0, 0, 0, 526, 1313, 0, 0,
	0, 0, 0, 1298, 0, 0, 0, 1280, 0, 0,
	1273, 0, 0, 1306, 1307, 0, 0, 527, 0, 0,
	0, 0, 529, 0, 0, 0, 0, 535, 536, 0,
	0, 0, 545, 0, 0, 1277, 1291, 0, 0, 0,
	1312, 0, 0, 0, 0, 0, 550, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1275, 0, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 1289, 1276,
	0, 0, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 0, 0, 531, 0, 0, 0, 0, 0, 0,
	0, 1273, 0, 0, 1306, 1307, 0, 0, 0, 0,
	0, 532, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1277, 0, 0, 539,
	0, 1312, 534, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 542, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 0, 0, 0,
	547, 0, 0, 0, 553, 0, 0, 0, 0, 540,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 546,
}
var sqlPact = [...]int{

	252, -1000, -46, -1000, -1000, -1000, 139, -1000, -1000, -1000,
	128, 123, 121, -1000, 120, 106, 105, 101, 99, 97,
	96, 93, 91, 90, 89, -1000, 88, -1000, -1000, -1000,
	-1000, 86, 85, 83, 82, 80, 79, 77, 1075, 21316,
	74, 71, 1305, 34839, 70, -1000, 938, 25950, 947, 1488,
	-1000, 69, 908, 34512, 2575, 2481, 1120, 1559, 34182, 20986,
	1552, 2473, 33852, -1000, -1000, 33522, 68, 67, 66, 65,
	64, -1000, -1000, 33192, 60, 59, 49, 48, 47, 46,
	45, 42, 38, 35, 26, 25, 24, 20, -1000, 19,
	17, 15, 41772, 9, 8, 7, 1105, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6, 5,
	2, 1, 0, 81, -1, -3, -4, -5, -1000, 900,
	412, 1811, 8037, 982, 980, 975, 967, 968, 36801, 34839,
	-6, -69, -11, -1000, 1861, 619, 18617, 252, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 25620, 25290, 32862, 32532, 742, -1000, -49, 21972,
	34839, -1000, -29, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14184, 13842, 514, -29, -1000, -1000, -1000, 32202,
	22995, 31872, 1410, 31542, -1000, -1000, 31212, -1000, -1000, 1722,
	1568, 1563, 24960, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 30885, 30555, 30225, 29895, 22654, 447, -1000, -1000, -1000,
	16912, -1000, -1000, -1000, -1000, -17, -1000, -18, -1000, -20,
	-21, -24, -26, -31, -32, -1000, -34, -35, -1000, -38,
	-39, -1000, -40, -41, 822, 970, 29565, 1139, -1000, -1000,
	-48, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 34839,
	-1000, 14866, -1000, 446, -1000, 1544, -1000, 14866, -1000, 1132,
	-1000, -1000, -1000, -1000, -1000, 34839, -1000, -1000, -1000, -1000,
	-1000, -1000, 2065, 1128, 438, 29235, -1000, 1358, -1000, 548,
	748, -1000, -1000, -1000, 9060, 153, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1234, 22313, 1160, 1895, 1706,
	2063, 1314, 1692, 1636, 1622, 1601, 1600, 2056, 911, 2055,
	1761, 977, 2054, 1594, 1115, 621, 2004, 1542, 1540, -1000,
	-1000, -1000, -1000, 877, -1000, -1000, -1000, 27258, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 900, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1303, 1832, 1832, 1832, 1911, 256, 250,
	-1000, 81, -1000, 1516, -1000, 1125, -1000, -1000, -1000, -1000,
	-1000, 40902, -1000, -1000, 14866, 14866, 14866, 14866, 14866, 1031,
	484, -1000, 436, 434, 7354, -1000, -1000, 2044, -1000, -1000,
	-1000, 286, -1000, -1000, 14866, -29, -1000, -1000, -1000, -1000,
	433, 2050, -1000, 629, -1000, -1000, -1000, 551, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1562, 430, 423,
	422, -1000, 421, -1000, -1000, 419, 416, 411, 408, 406,
	405, 404, 403, 402, 399, 396, 393, 392, 387, 386,
	1002, -1000, 579, -1000, -1000, 579, 579, -1000, 371, 371,
	372, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 371,
	-1000, -1000, -1000, 541, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 385, 1238, -1000, -1000, 1238,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 741, 36147, -55,
	34839, -1000, 384, -55, -1000, -1000, 381, -1000, 10083, 10083,
	-1000, -1000, -1000, -1000, -1000, 9401, 1372, -1000, 1163, -172,
	277, 529, -1000, 17594, 20316, -1000, -1000, 1013, 1731, 597,
	-1000, 945, 1720, 439, -1000, 942, -1000, 913, 1712, -102,
	23322, 21972, -49, -53, -1000, -1000, -1000, 5647, 40902, -1000,
	40902, -1000, 814, 19297, -29, -1000, -1000, -1000, -1000, 380,
	1277, 557, 1266, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 281, -1000, 28905, 557, 1261, -1000, -1000,
	-1000, 27258, -1000, 34839, -1000, 34839, -1000, 865, -1000, 36474,
	112, 1709, -1000, -1000, 112, 1707, -1000, 111, 1688, -1000,
	-1000, 1226, 1679, -1000, -74, 1677, -1000, -1000, -1000, 14866,
	-72, -1000, -1000, -1000, 619, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 28575,
	21644, 1264, 508, 40902, 1951, 41611, 23322, 40902, 21644, -1000,
	-1000, 34839, -1000, 14866, -1000, 1949, 1297, -56, -1000, -1000,
	-1000, -1000, -1000, 1309, 1348, 683, 1144, 9060, 9060, 1815,
	-1000, 148, 5988, -1000, -1000, -1000, -1000, 28245, -1000, -1000,
	-1000, 1114, 34839, -1000, -1000, 1554, -1000, 21644, 34839, -1000,
	34839, -1000, 34839, -1000, 34839, -1000, 34839, -1000, -1000, -1000,
	-1000, -1000, 398, -1000, 1551, -1000, -1000, 34839, -1000, 1308,
	-1000, -1000, -1000, 27918, 27588, -1000, 932, 757, -1000, -1000,
	113, -1000, -1000, 1303, -1000, 1173, 1368, 13500, 1342, 14866,
	81, -1000, -1000, 81, 81, 8719, -1000, -1000, -1000, 34839,
	-1000, 41520, 41611, 5988, 754, 14866, 14866, 14866, 14866, 14866,
	14866, 14866, 14866, 14866, 14866, 14866, 14866, 14866, 14866, 14866,
	14866, 14866, 14866, 14866, 14866, 14866, 14866, 14866, 14866, 14866,
	14866, 14866, 14866, 14866, 14866, 14866, 14866, 1148, 14866, 739,
	14866, 14866, 14866, 14866, 1251, 1078, 362, 1138, -1000, 2001,
	2001, 2001, 41156, 41156, 366, 484, -1000, 14866, -1000, 44,
	14866, 250, 39137, -54, 7013, -1000, -1000, -1000, 13159, 570,
	40902, -29, 6329, -1000, 2042, 785, 1572, 1460, 379, 519,
	518, 516, 509, 14866, 14866, 12818, 12476, 12134, 15548, 11792,
	14866, 7695, 14866, 14866, 14866, 14866, 11450, 11108, -1000, 376,
	-1000, -1000, -1000, -1000, 2041, -1000, -1000, 2040, -1000, 750,
	749, 2039, -1000, -56, -1000, 36147, -1000, 34839, -55, 1946,
	34839, -1000, 164, -1000, 39944, -1000, 164, -78, -1000, 1385,
	1384, 18957, 1215, 1067, 1067, 1067, -1000, 373, 478, 529,
	4946, 10766, -1000, 26277, 1065, 169, 249, 17253, 1372, -1000,
	34839, -63, 1091, -1000, 24630, 1847, 1843, 1857, 27258, 1925,
	44, 1534, 737, 27258, 728, 1923, 44, 1533, 724, 34839,
	5988, 511, -1000, 34839, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1531, -79, -1000, -1000, 24303, 1945, 1674,
	-1000, 1014, -1000, 1672, 1942, 34839, 1124, 1256, -1000, -1000,
	763, 1653, 565, 231, 1940, 231, 19636, -1000, 34839, -1000,
	34839, -1000, -1000, 34839, -1000, 34839, -1000, 34839, 34839, -1000,
	34839, 23322, 23322, -84, 40902, 2909, 23976, 723, -1000, 613,
	24303, 321, -87, -1000, 804, -1000, -1000, -1000, -1000, 210,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 372, 1002, 371, 371, 371, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 541, -1000, -1000, 579,
	579, 579, -1000, -1000, -77, 1527, 547, -90, 648, -56,
	-1000, 1238, -1000, 909, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2049, -1000, 2019,
	-1000, -1000, 2038, -57, -1000, -57, -1000, 5988, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 34839, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 135, -1000, -1000, -1000, -1000, -1000,
	-1000, 34839, 34839, 34839, -1000, 27258, -1000, -1000, -1000, -1000,
	40902, -1000, 334, -1000, -1000, 40902, 914, 1396, -1000, 1396,
	-58, -1000, 39821, 1381, 34839, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 540, 432, 432, 774,
	774, 774, 774, 1916, 269, 950, 323, 3538, 3538, 3538,
	3538, 3538, 3538, 3538, 3538, 1156, 477, 477, 1156, 1156,
	1156, 1156, 1156, 3538, 3538, 3538, 41156, 41121, 37516, 14866,
	14866, 720, 1063, 362, 37516, 14866, 37516, 37516, 37516, 37516,
	-1000, 1290, -1000, -1000, -1000, -1000, 1519, 361, 15548, 15548,
	-1000, -1000, -1000, 7354, 15889, -1000, -1000, -1000, -1000, 357,
	14866, -1000, 39358, -223, 248, -89, -1000, 14866, 468, -100,
	-1000, 813, -1000, 14866, -1000, -30, 14866, 14866, 14866, 247,
	-1000, 243, -1000, 719, -1000, 698, 697, 696, -1000, 356,
	1050, 355, 353, 14866, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 40847, 37461, 242, -1000, 1501, -89, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 241, -1000, 238, -1000, 40628,
	-89, 237, 3666, -1000, 15548, 15548, 15548, 7354, 351, 236,
	-1000, 39548, -1000, 40593, 10424, 10424, 10424, 235, 40374, 14866,
	-89, 4551, 4332, 4297, -105, -107, -1000, -113, -1000, 2036,
	-114, 234, 525, 524, 233, -1000, -1000, 350, -115, 565,
	10083, 18276, 5988, -1000, 565, 9401, -1000, 18957, 18957, 1174,
	1383, 18957, -1000, -1000, -1000, -1000, 26277, 475, 529, 26277,
	-1000, 2031, 1310, 229, -1000, -1000, -1000, 34839, 349, -1000,
	529, 223, 894, 34839, 34839, 34839, -1000, -1000, 1233, 35820,
	1229, 41611, 34839, -1000, 347, 345, 1360, 1357, 34839, 34839,
	35493, 35166, 34839, 987, 44, -1000, 344, 34839, 940, 34839,
	44, -1000, 343, 34839, 936, -1000, 1432, 1181, -1000, 799,
	1499, 34839, 212, -116, -60, 41611, -1000, -1000, -1000, -1000,
	-1000, 34839, 383, 34839, 44, 34839, 23322, 23322, 44, 34839,
	1652, 1744, 507, 34839, 1368, 14866, 976, -1000, 17935, 593,
	34839, 916, 61, -1000, -1000, -1000, 523, 34839, -1000, -1000,
	112, 112, -1000, 111, 1226, -1000, -74, -1000, 14866, -1000,
	-1000, 34839, 23322, -121, -1000, 617, 616, -1000, 41611, -1000,
	483, 708, -1000, 2026, 555, 34839, 9060, 9060, -1000, 1391,
	-1000, -1000, 896, -1000, 961, -1000, -1000, -1000, -1000, 9060,
	-1000, -65, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 914,
	-1000, 14866, 2025, -1000, -1000, -1000, 8719, -1000, -1000, -1000,
	34839, -170, 14866, 37516, 37516, 14866, 15548, 15548, -1000, 37516,
	-1000, -1000, -1000, -1000, -1000, 1490, 342, 14866, 41611, 38982,
	38571, -122, -1000, 14866, -61, -1000, 14866, -1000, 39102, -1000,
	-1000, 476, 1742, -1000, 14866, 40319, 211, 9742, -1000, 40011,
	-44, -44, -1000, 2048, 1287, 1192, 951, 890, 2022, -1000,
	19976, 567, 1071, 38947, 41520, 41611, -1000, 14866, -1000, -1000,
	1489, 14866, -1000, 41520, 41611, 15548, 15548, 15548, 15548, 15548,
	15548, 15548, 15548, 15548, 15548, 15548, 15548, 15548, 15548, 15548,
	15548, 15548, 15548, 15548, 1236, 15548, 1999, 1999, 1999, -62,
	14866, -1000, 1550, 1489, 14866, 14866, 41611, 208, 203, 199,
	-1000, 14866, -89, 14866, 14866, 14866, -1000, -1000, -1000, 198,
	-1000, 2017, -1000, -1000, -1000, -1000, 321, -1000, 1458, -1000,
	-108, -1000, 1372, -1000, 1458, -1000, -1000, 1174, -1000, 341,
	14866, 18957, -1000, 455, -1000, -124, -1000, 26277, -1000, 453,
	-218, -1000, 522, -1000, 529, 340, 34839, 26277, -1000, -1000,
	-1000, 693, 692, 1651, -1000, 1212, -1000, 600, -1000, 905,
	14866, 16571, 337, 336, 1030, -1000, 1646, 1226, 1642, 1226,
	-1000, -63, 1066, -1000, 14866, -1000, 685, -1000, -1000, 14866,
	-1000, 682, 555, 1486, 768, -1000, 798, -1000, 1418, -1000,
	24303, 335, 34839, 333, -1000, 332, -1000, 557, -1000, 331,
	34839, 1317, 507, 23649, -1000, 557, 916, -1000, 40902, -1000,
	916, 8378, 1860, -130, -1000, -1000, -1000, 565, 19636, 18957,
	9401, -132, -1000, -1000, -1000, -1000, 40902, -65, 1826, 1826,
	-1000, 2015, -1000, 451, 197, -1000, 26931, -65, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 34839, 1081, 38726, -1000, 1829,
	5988, 1937, 37516, 4361, 573, 14866, 41611, 41276, -133, 14866,
	14866, -1000, 195, 14866, 450, 40902, -1000, -1000, -1000, 40902,
	14866, 2047, 14866, 193, 191, 189, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 188, -1000, -1000, 37128, 14866, 186,
	-1000, 184, 182, 40902, 1550, 40902, -1000, -1000, 602, 602,
	835, 835, 835, 835, 1999, 2548, 1557, 657, 467, 467,
	467, 1851, 583, 583, 467, 467, 467, 1481, 1239, 330,
	4417, 14866, 181, -1000, -1000, 40902, 40902, 180, -1000, -1000,
	-1000, -89, 3932, 38691, 38536, -1000, 178, 174, 1454, 1909,
	-1000, 18957, 1454, -1000, 34839, 40902, -1000, -172, -1000, 2009,
	-1000, -1000, 1310, -1000, 5301, 26277, 34839, -139, -1000, 34839,
	34839, 34839, 1640, -1000, 1387, -1000, 38315, -140, -1000, 270,
	1889, 14866, -1000, -1000, 328, 16571, 34839, -1000, 1345, 1456,
	639, 34839, -1000, 34839, -1000, 34839, 34839, 34839, -141, 34839,
	-142, 34839, -1000, 23322, 686, -1000, -1000, 1425, -1000, 16571,
	327, 34839, 24303, 1939, -1000, 16571, 1122, 1322, 507, 23649,
	-1000, 763, -1000, -1000, -66, -1000, 274, 44, 916, -1000,
	-67, -1000, 521, 1802, -1000, 1793, 449, -1000, -1000, -68,
	320, -1000, 517, 513, -1000, -1000, -1000, -1000, 1829, 14866,
	14866, 41276, -148, -1000, 37516, 37516, -1000, 38280, -1000, 40902,
	-1000, 40011, -1000, -1000, -1000, -1000, 1022, -1000, 38125, -1000,
	-1000, -1000, -1000, 15548, 1471, 308, 41611, 37906, -1000, -1000,
	14866, -1000, -1000, -1000, -1000, 561, 14866, 14866, 1372, 561,
	-150, 529, -1000, -1000, -1000, 1992, -1000, -151, -1000, -1000,
	-1000, -1000, 34839, -1000, 34839, -1000, 5988, 34839, 1464, 1205,
	-1000, -1000, 1356, 307, 15548, 34839, -1000, 1035, 16571, 1829,
	-29, 5988, 1829, 37870, 6329, -156, -157, 1203, -1000, 1189,
	14866, -1000, 41611, 1226, 1226, -1000, 680, 676, 662, -1000,
	661, -1000, -74, 20656, 1025, -158, 16571, -159, 173, 44,
	-164, 34839, -1000, 507, 23649, -1000, 1744, 1754, 34839, 1845,
	-1000, -1000, 306, 304, 303, -1000, 26604, 26604, 23322, 23322,
	-1000, 37516, 37516, -1000, -1000, 172, 1071, 1907, -1000, 4488,
	15548, 41611, -166, -1000, 37651, -1000, 34839, 40902, -89, -1000,
	-1000, 26277, 324, -1000, -1000, 1268, -1000, -1000, 34839, 1208,
	-1000, -1000, 14866, 4417, 296, 1418, 294, -1000, -1000, -1000,
	-1000, -1000, -1000, 1889, -30, -1000, 953, -1000, -1000, 40902,
	1885, -1000, -1000, 34839, 34839, 293, 292, -1000, 290, -29,
	34839, 1035, -174, -1000, 1418, -1000, 1035, 289, 23649, -1000,
	1317, 778, -176, 34839, -1000, -1000, 6670, 23322, 23322, -1000,
	-177, -1000, -1000, -1000, 924, 14866, 4488, -182, -1000, -1000,
	-81, -1000, 1932, -1000, -1000, -1000, -1000, 1634, 37496, 1292,
	34839, -1000, 34839, 1829, 165, 34839, 603, 5988, -1000, -1000,
	14866, 14866, 14866, 288, 1418, 1035, -1000, 1418, 16571, -1000,
	1322, 857, -1000, 565, -1000, -184, -185, -1000, 163, 15207,
	15207, -89, -1000, 34839, 287, 1597, -1000, 1108, 1130, 161,
	-192, -1000, -1000, 281, -1000, 14866, -1000, -193, -194, -44,
	34839, -1000, 1418, -1000, -195, -1000, 19636, -1000, 555, 555,
	-1000, -1000, -1000, 16230, 1126, 922, 39513, -1000, -1000, -1000,
	34839, -1000, 1116, 1110, 854, -1000, -1000, -1000, -1000, -1000,
	1292, 40902, -1000, -1000, 157, -200, -1000, 1035, -173, -1000,
	-1000, 1957, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1776,
	-1000, 630, 1272, 1272, 1108, 2047, 1220, 1418, -1000, 14525,
	-1000, 1965, -1000, -1000, 1334, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2404, 2402, 1577, 1904, 2395, 2394, 2392, 2391, 2390,
	2389, 2388, 2387, 2385, 2384, 2383, 2380, 2376, 2375, 2371,
	1896, 2368, 1867, 2367, 2364, 2362, 2360, 2359, 1855, 2352,
	2351, 2348, 2346, 1852, 2345, 1842, 2344, 2343, 1830, 2342,
	2340, 2338, 1828, 2331, 1823, 2327, 88, 108, 1775, 2320,
	2313, 1771, 1761, 1735, 2308, 1733, 2306, 2304, 1673, 1643,
	2301, 85, 2295, 2292, 2291, 1640, 1635, 2286, 2284, 2283,
	139, 2281, 1632, 2280, 2278, 2276, 2275, 2271, 2270, 2267,
	2266, 2265, 2264, 2263, 2261, 2260, 2259, 2258, 2257, 2256,
	2255, 152, 2254, 2253, 1611, 1594, 2251, 2248, 31, 32,
	13, 61, 20, 148, 2588, 131, 2247, 2244, 2242, 2241,
	2239, 2234, 24, 95, 97, 2232, 156, 2231, 2230, 47,
	49, 22, 16, 62, 94, 2229, 2228, 1637, 34, 2226,
	2225, 134, 2222, 19, 29, 645, 149, 145, 107, 116,
	2221, 2220, 2219, 46, 114, 1, 2218, 2216, 18, 77,
	8, 2215, 33, 14, 2202, 2201, 122, 2197, 55, 91,
	1496, 92, 115, 249, 83, 2196, 68, 11, 64, 2194,
	2193, 151, 43, 2192, 28, 75, 133, 2191, 45, 155,
	121, 69, 125, 127, 2188, 2185, 2183, 103, 2182, 112,
	93, 2180, 2178, 71, 2175, 90, 144, 2174, 2172, 2171,
	89, 2168, 117, 2166, 2163, 150, 142, 109, 10, 36,
	70, 5, 1541, 1509, 126, 79, 57, 51, 2162, 2425,
	1254, 1300, 37, 98, 73, 58, 101, 56, 87, 135,
	38, 2161, 2160, 128, 2158, 2155, 2154, 2153, 2152, 99,
	2148, 2147, 21, 2141, 76, 25, 50, 84, 39, 123,
	119, 106, 146, 96, 2137, 78, 120, 2136, 53, 2129,
	2125, 1835, 111, 2120, 2119, 2118, 1832, 1723, 1380, 193,
	2116, 2115, 1055, 874, 2114, 2112, 80, 2109, 110, 105,
	102, 132, 138, 72, 2108, 113, 27, 2106, 26, 52,
	0, 677, 207, 2105, 118, 65, 2104, 2103, 2098, 2092,
	23, 3, 9, 4, 7, 6, 41, 30, 2090, 2089,
	124, 81, 67, 2088, 147, 2087, 2086, 2084, 42, 2080,
	12, 2078, 15, 2077, 2076, 17, 2, 2075, 2074, 140,
	2073, 100, 2072, 1925, 2071, 143, 2070, 2069, 1877, 2068,
	35, 104,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 114, 114,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 111, 111, 116, 116, 116,
	118, 118, 115, 115, 110, 110, 20, 20, 59, 59,
	101, 52, 52, 52, 288, 288, 289, 289, 97, 97,
	98, 98, 98, 98, 99, 99, 100, 100, 100, 26,
	26, 26, 22, 22, 22, 22, 22, 23, 23, 24,
	24, 27, 27, 27, 27, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 35, 35, 36, 36,
	36, 36, 36, 36, 37, 37, 37, 37, 38, 38,
	38, 38, 38, 38, 38, 38, 43, 43, 43, 41,
	41, 41, 40, 40, 40, 39, 39, 39, 42, 42,
	42, 162, 162, 161, 161, 165, 165, 44, 44, 44,
	44, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 47, 47, 47, 47, 47, 47, 47, 257, 257,
	256, 45, 45, 231, 231, 48, 48, 188, 188, 49,
	49, 49, 49, 49, 50, 50, 60, 60, 329, 329,
	329, 333, 333, 334, 334, 335, 335, 335, 335, 335,
	335, 335, 331, 331, 55, 55, 55, 55, 56, 56,
	56, 57, 57, 96, 96, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 66, 66, 66, 68, 65, 65,
	65, 67, 67, 67, 67, 69, 69, 70, 70, 70,
	70, 70, 71, 71, 282, 280, 280, 281, 281, 141,
	141, 141, 141, 141, 142, 142, 142, 287, 287, 287,
	287, 287, 287, 286, 286, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 84, 84, 84, 91, 91, 91, 91, 91, 91,
	91, 73, 73, 78, 78, 78, 78, 78, 74, 74,
	79, 79, 80, 80, 81, 81, 81, 81, 81, 81,
	75, 75, 75, 75, 83, 83, 83, 83, 82, 82,
	88, 88, 88, 88, 88, 88, 85, 85, 85, 85,
	86, 86, 86, 89, 89, 89, 89, 76, 76, 77,
	77, 90, 90, 87, 87, 87, 330, 330, 332, 332,
	53, 53, 31, 31, 32, 32, 143, 143, 144, 144,
	210, 210, 210, 210, 145, 145, 117, 117, 117, 209,
	298, 298, 299, 299, 299, 299, 299, 299, 300, 300,
	300, 300, 300, 300, 300, 296, 296, 297, 294, 294,
	295, 295, 295, 295, 336, 336, 208, 208, 148, 148,
	303, 303, 303, 303, 301, 301, 301, 301, 301, 304,
	302, 305, 305, 305, 305, 305, 243, 243, 243, 93,
	93, 33, 33, 33, 123, 123, 34, 34, 30, 30,
	30, 192, 192, 152, 152, 248, 248, 248, 134, 134,
	112, 112, 112, 14, 11, 11, 11, 11, 11, 11,
	19, 19, 17, 17, 193, 193, 194, 194, 54, 54,
	58, 58, 63, 63, 92, 92, 92, 92, 92, 92,
	21, 21, 21, 21, 25, 25, 25, 25, 62, 62,
	338, 338, 130, 130, 130, 130, 131, 131, 205, 205,
	206, 206, 339, 339, 207, 207, 207, 125, 124, 126,
	126, 29, 29, 29, 119, 119, 120, 120, 121, 121,
	122, 122, 340, 340, 51, 51, 51, 95, 95, 137,
	137, 202, 202, 202, 204, 204, 203, 203, 203, 178,
	178, 178, 94, 94, 157, 157, 167, 167, 168, 168,
	254, 169, 169, 61, 61, 104, 104, 102, 102, 102,
	102, 102, 102, 103, 103, 103, 105, 105, 105, 105,
	105, 105, 105, 108, 108, 108, 109, 109, 109, 107,
	107, 311, 311, 311, 314, 314, 310, 312, 312, 313,
	313, 337, 337, 179, 179, 179, 147, 146, 146, 150,
	150, 149, 151, 151, 247, 247, 247, 176, 176, 176,
	176, 197, 197, 195, 195, 196, 196, 198, 198, 199,
	199, 199, 200, 200, 201, 201, 175, 175, 227, 227,
	106, 106, 106, 156, 156, 156, 158, 158, 217, 217,
	217, 218, 218, 216, 216, 216, 216, 249, 249, 249,
	249, 249, 249, 249, 249, 327, 327, 327, 328, 328,
	246, 246, 250, 250, 250, 250, 250, 250, 244, 244,
	244, 244, 245, 245, 255, 255, 182, 182, 182, 182,
	180, 180, 181, 181, 251, 251, 251, 251, 177, 177,
	252, 252, 252, 211, 211, 258, 258, 258, 276, 276,
	155, 155, 155, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 260, 260, 260, 260, 262, 262, 262, 261,
	261, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 261, 275, 275, 275,
	275, 275, 263, 263, 270, 270, 271, 271, 272, 273,
	264, 264, 265, 265, 266, 267, 274, 274, 274, 274,
	278, 278, 268, 268, 268, 268, 268, 269, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 190, 190, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 221, 221, 221, 221,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 306, 306, 306, 306, 306, 306, 306, 306, 308,
	308, 309, 309, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 315, 315, 316, 316, 318, 318, 319,
	319, 320, 321, 321, 321, 322, 323, 323, 317, 317,
	324, 324, 324, 325, 325, 326, 326, 326, 326, 326,
	233, 233, 234, 235, 241, 241, 241, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 132, 132, 132, 132, 132, 164, 164,
	163, 163, 230, 230, 228, 228, 232, 232, 183, 183,
	277, 277, 277, 277, 277, 277, 277, 184, 184, 184,
	191, 185, 185, 186, 186, 186, 186, 186, 224, 225,
	187, 187, 187, 226, 226, 236, 240, 240, 239, 238,
	238, 237, 237, 214, 214, 215, 215, 213, 212, 172,
	172, 171, 171, 170, 170, 341, 341, 242, 242, 173,
	173, 174, 166, 166, 253, 253, 253, 253, 159, 159,
	139, 139, 160, 160, 135, 135, 138, 138, 136, 136,
	136, 136, 153, 153, 154, 154, 133, 133, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 279,
	279, 279, 229, 127, 127, 127, 128, 128, 129, 129,
	284, 284, 284, 285, 285, 285, 285, 283, 283, 283,
	283, 283, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 3, 1, 2, 7, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 3, 5,
	3, 1, 3, 1, 2, 2, 3, 2, 2, 5,
	3, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 2, 1, 1, 3,
	1, 5, 2, 3, 0, 3, 2, 3, 0, 2,
	3, 2, 3, 2, 6, 2, 6, 2, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 2, 1, 2, 2, 3,
	2, 4, 3, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 3, 6, 6, 3, 5, 3, 2,
	6, 3, 3, 4, 4, 3, 3, 1, 3, 3,
	1, 1, 2, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	2, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 3, 3, 4, 4, 3, 4, 4, 4, 3,
	2, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 2, 3, 3, 3, 2, 3,
	4, 3, 5, 3, 4, 5, 2, 3, 3, 3,
	4, 2, 3, 4, 3, 3, 3, 4, 4, 4,
	4, 2, 3, 5, 5, 5, 2, 0, 2, 0,
	3, 2, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	2, 4, 7, 3, 3, 0, 6, 3, 11, 14,
	4, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	2, 0, 8, 3, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 2, 3, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 6,
	3, 3, 1, 5, 5, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 3, 4,
	1, 1, 1, 5, 1, 3, 3, 1, 3, 3,
	1, 3, 3, 1, 1, 3, 3, 1, 1, 6,
	6, 4, 3, 4, 3, 4, 3, 4, 4, 3,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 5, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 370, -4, -20, -22, -26, -27,
	-49, -35, -36, -37, -48, -44, -50, -51, -52, -53,
	-45, -59, -58, -60, -63, -61, -54, -55, -64, -72,
	-92, -93, -94, -95, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 68, -33, -28, 70, 91, -313, 95,
	-38, -42, 99, 106, 108, 130, 141, 222, 228, 249,
	251, 253, 260, -102, -104, 247, -56, -57, -65, -66,
	-67, -68, -96, 271, -73, -74, -75, -76, -77, -78,
	-79, -80, -81, -82, -83, -84, -85, -86, -87, -88,
	-89, -90, 274, -21, -25, -62, 312, -9, -10, -13,
	-12, -11, -16, -18, -15, -17, -19, -14, -29, -30,
	-31, -32, -34, -311, -39, -40, -41, -43, -105, -103,
	367, 248, 321, 35, 283, 61, 102, 255, 337, 344,
	-108, -106, -107, -109, 264, 329, 293, 371, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 2, 293, 332, 84, 149, -329, 2, -160, 293,
	84, -136, -127, 360, 4, -290, -292, 20, 21, 23,
	33, 34, 35, 40, 44, 47, 48, 55, 60, 61,
	62, 64, 66, 68, 69, 72, 73, 74, 82, 83,
	85, 87, 91, 93, 95, 98, 99, 101, 106, 107,
	108, 118, 119, 124, 126, 131, 137, 138, 141, 142,
	150, 153, 155, 148, 165, 166, 167, 169, 170, 171,
	174, 173, 178, 181, 184, 186, 187, 188, 191, 189,
	193, 194, 196, 195, 201, 203, 204, 206, 209, 212,
	215, 218, 219, 220, 221, 222, 224, 226, 228, 230,
	231, 232, 233, 234, 236, 237, 239, 240, 241, 242,
	243, 247, 245, 246, 248, 249, 250, 251, 253, 255,
	256, 258, 272, 273, 284, 260, 261, 262, 263, 267,
	265, 268, 269, 271, 274, 276, 279, 282, 283, 285,
	288, 289, 286, 281, 292, 294, 295, 296, 297, 298,
	299, 300, 307, 308, 312, 313, 314, 315, 318, 319,
	320, 321, 323, 326, 327, 328, 333, 338, 339, 340,
	341, 342, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 51, 52, 53, 56, 86, 88, 89, 105, 109,
	110, 120, 121, 122, 132, 134, 143, 144, 147, 154,
	156, 157, 158, 159, 160, 162, 176, 190, 200, 202,
	213, 217, 225, 227, 235, 257, 266, 277, 278, 287,
	290, 302, 303, 304, 309, 310, 325, 329, 330, 370,
	370, 2, 166, 232, -135, -127, 84, 370, 2, 293,
	322, 332, -192, 84, 317, -127, 228, 22, 2, 93,
	153, 320, 319, 22, 224, 265, 295, 297, 2, 370,
	2, 332, 293, 149, 84, 322, -127, 2, -47, 2,
	367, -46, -4, -28, -38, -48, -44, -20, -22, -33,
	-35, -42, -52, -51, -53, -55, -59, -58, -61, -65,
	-66, -72, -94, -95, 70, 99, 271, -333, 2, 22,
	-334, -335, 70, 99, 130, 264, 153, 93, 319, 293,
	2, 166, 2, -127, 2, -329, 2, 166, 2, -333,
	2, -127, 2, -131, 2, 260, -127, 370, 370, 370,
	370, 370, 181, 55, 257, 268, -70, 308, -69, 302,
	-282, -71, 2, -161, 191, -127, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 2, -91, 268, 34, 55, 22, 60,
	85, 131, 149, 150, 170, 65, 66, 231, 181, 167,
	307, 171, 269, 294, 308, 70, 323, 298, 107, 4,
	84, 191, 270, 302, 370, 370, 370, -337, 2, 293,
	370, 370, 370, 370, 370, -103, -105, -104, 370, 370,
	370, 370, -149, -150, 316, 161, 104, 211, -102, -104,
	2, -311, -91, 268, 2, 55, 22, -280, 2, -242,
	207, -219, 90, -221, 358, 359, 353, 197, 343, -233,
	-223, -236, 105, 257, 367, -135, -222, 373, 9, -308,
	-104, 29, -234, -235, 49, -127, 7, 8, 5, 6,
	-133, -260, -229, -269, 311, 111, 199, -306, -307, 4,
	-290, -284, -261, -271, -265, -268, 162, 58, 76, 77,
	80, 78, 81, 270, 322, 50, 28, 109, 110, 217,
	225, 290, 309, 310, 143, 200, 144, 56, 132, 176,
	98, 37, 39, 41, 42, 51, 52, 86, 88, 89,
	120, 121, 122, 154, 156, 157, 158, 159, 160, 202,
	235, 277, 287, 303, 304, 330, -291, -272, -273, -266,
	-267, 71, 112, 129, 152, 145, 164, 168, 177, 179,
	192, 214, 216, 254, 275, -274, -338, 2, 308, 308,
	2, -338, 2, -338, 2, -130, 2, 308, 305, -314,
	236, -310, -127, -314, 370, 370, 372, 370, -146, -147,
	2, 22, 96, -174, 2, 367, -249, 2, 365, -251,
	-135, -104, -250, 367, 208, -3, 2, -251, 143, -135,
	2, -251, 143, -135, 2, -127, 2, -138, 143, -135,
	305, 372, -160, -153, -127, -213, -212, 369, -219, 2,
	-219, 2, 128, 367, -171, -172, -212, -213, 2, -161,
	143, -288, 143, 2, -286, 9, -285, 5, 4, -290,
	-292, -291, 58, -161, 2, 149, -127, 143, 2, -127,
	22, 128, 2, 163, 2, 163, 2, -252, 2, -251,
	-162, 143, 2, -161, -162, 143, 2, -139, 143, 2,
	-138, -127, 143, 2, -289, 143, 2, -288, -188, 367,
	-257, 2, -256, -285, 329, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 268,
	207, 372, -161, -219, -231, 367, 128, -219, 207, -127,
	2, 272, 2, 367, -70, 53, 308, -206, 2, -207,
	-124, -125, -126, 165, 230, 234, 342, 305, 348, 128,
	-280, -165, 369, -91, 2, -288, 2, 272, 2, 231,
	269, 55, 128, 2, 2, -330, 2, 207, 128, 2,
	128, 2, 128, 2, 128, 2, 128, 2, 2, 231,
	269, 2, 125, 2, 307, 2, 2, 128, 2, 165,
	230, 284, 2, 293, 332, 2, 128, 128, 342, 2,
	-177, -251, -149, -150, -176, -195, -196, 180, 113, 205,
	-179, 22, 96, -179, -179, 44, 368, 368, -91, 272,
	2, 10, 11, 57, 33, 358, 359, 360, 361, 123,
	362, 363, 356, 357, 355, 346, 347, 350, 351, 352,
	67, 349, 348, 63, 185, 259, 114, 115, 116, 117,
	244, 13, 14, 15, 26, 210, 179, 343, 145, 275,
	353, 16, 17, 18, 164, 36, 146, -132, -140, -219,
	-219, -219, -219, -219, 216, -170, -214, 365, -104, 367,
	367, -104, -219, -163, 367, 7, -104, -228, 365, -237,
	-219, -171, 367, 5, 367, 5, -315, 338, 125, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 227, -278,
	333, -278, -278, -262, 367, -262, -263, 367, -262, 339,
	344, 367, -205, -206, -205, 305, -131, 372, -314, -154,
	367, -174, -166, -253, -219, 360, -166, -173, -242, 71,
	-182, 168, 192, 129, 177, 254, 152, 7, -47, -216,
	373, 367, 360, -246, 344, -104, -250, 367, -249, -135,
	367, -114, 245, -113, 21, 23, 99, 327, 105, 281,
	299, 261, 245, 105, 245, 281, 299, 261, 245, 105,
	373, -288, -136, 372, -283, 360, 4, -290, -292, -291,
	-293, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 49, 50, 54, 57, 59, 65, 70, 75, 76,
	78, 77, 79, 80, 81, 90, 92, 94, 96, 97,
	100, 102, 104, 111, 113, 125, 127, 128, 130, 133,
	135, 146, 149, 151, 161, 163, 172, 175, 180, 182,
	183, 197, 198, 199, 205, 207, 208, 210, 211, 223,
	229, 238, 252, 264, 270, 280, 291, 293, 301, 305,
	306, 311, 316, 317, 322, 324, 331, 332, 334, 335,
	336, 337, 285, 368, -159, -135, -172, 367, -148, 197,
	-123, -312, 337, 197, -148, 367, -128, 143, 2, -127,
	-312, 197, -252, -137, -135, -137, 271, -127, 30, -116,
	372, 48, 250, 105, -116, 105, -116, 372, 105, -116,
	105, 372, 105, -163, -219, 368, 372, -329, -335, 70,
	367, 30, -230, -258, -259, -261, -270, -264, -268, -269,
	40, 46, 45, 300, 190, 266, 278, 325, 147, 38,
	206, 155, 4, 154, 156, 157, 158, 159, 160, 277,
	37, 235, 121, 122, 120, 98, 89, 88, 202, 42,
	41, -272, -273, -266, -267, 86, 303, 304, 162, 39,
	52, 51, 330, 287, -289, -329, -282, -163, 30, -206,
	2, -339, 372, 178, -142, 184, 196, 137, 208, 340,
	-287, 5, 4, -229, -243, 90, 181, -269, 8, 359,
	-279, 7, 358, -281, -280, -281, 74, 369, -283, -161,
	22, 273, 2, -282, -332, 125, -329, -282, -282, -282,
	-282, -282, 268, -47, 125, -127, 178, -282, 2, -282,
	2, 293, 149, 293, -116, 372, -176, -196, -195, -198,
	-219, 22, -201, 119, 193, -219, -221, -103, -103, -103,
	-151, -247, -219, 229, 149, -282, -276, -258, -275, 240,
	241, 239, 243, 242, -258, -283, 302, -219, -219, -219,
	-219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
	-219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
	-219, -219, -219, -219, -219, -219, -219, -219, -219, 179,
	145, 275, 36, 146, -219, 305, -219, -219, -219, -219,
	189, 197, 199, 311, 111, 318, 96, 203, -341, 291,
	32, -226, -104, 367, -241, 27, 280, 22, -233, 257,
	367, -214, -219, -215, -164, -163, 368, 372, -164, -232,
	-228, -240, -239, 334, 368, -163, 331, 22, 96, 360,
	2, 7, -189, 341, 188, 87, 138, 187, -190, 263,
	-316, 118, 133, 367, 368, 2, 368, 2, 368, 2,
	368, 2, -219, -219, -183, 2, -277, -163, 4, 341,
	188, 87, 138, 187, 263, -183, 2, -184, 2, -219,
	-163, -185, -220, -221, 358, 359, 353, 367, 257, -186,
	2, -219, -164, -219, 43, 175, 306, -187, -219, 128,
	-163, -219, -219, -219, -163, -163, 2, -163, 2, 367,
	7, 7, 302, 302, 7, -131, -310, 30, -153, -156,
	372, 128, 30, 4, -156, 372, 368, 168, 168, -249,
	-182, 168, -180, 214, -180, -180, -327, 367, 366, -246,
	-283, 365, 374, -164, 2, -245, -244, 30, -127, 212,
	368, -135, 372, 305, -193, 65, 59, -209, 143, 59,
	-294, -127, 65, -295, 54, 317, 229, 127, -193, 65,
	-193, 65, 65, -251, 33, -61, 128, 305, -251, 305,
	33, -61, 128, 305, -138, -283, -255, 345, -127, 128,
	368, 372, -143, -153, -144, -127, -210, -209, -296, -297,
	-294, 149, 317, 112, 30, 105, 221, 105, 30, 207,
	197, -119, 296, 105, -211, 335, -202, -61, 367, 90,
	30, -202, -167, -168, -254, -169, -135, 367, -127, -161,
	-162, -162, -138, -139, -127, -288, -289, 368, 372, -47,
	-256, 305, 324, -144, -46, 70, 99, 368, 372, -155,
	29, 365, -189, 367, -255, 128, 348, 305, 368, 308,
	-207, -141, 234, 279, 246, 267, 8, 7, 7, 372,
	-283, -331, -127, 268, -47, -135, -138, -135, -251, -199,
	-279, 367, 359, -200, 257, 258, 372, -112, 31, 94,
	169, -135, 342, -219, -219, 305, -341, 291, -226, -219,
	189, 199, 311, 111, 318, 96, 203, 128, 367, -220,
	-220, -163, -223, 367, -163, 366, 376, 368, -219, 366,
	366, 372, -238, -239, 100, -219, -150, 372, -149, -219,
	-163, -163, 368, 368, 305, 305, 305, 305, 367, -321,
	215, 367, 367, -219, 30, 372, 368, 128, 368, 368,
	-191, 223, 368, 10, 11, 358, 359, 360, 361, 123,
	362, 363, 356, 357, 355, 346, 347, 348, 63, 185,
	259, 13, 14, 15, 164, 146, -220, -220, -220, -163,
	367, 368, -224, -225, 128, 125, 30, -187, -187, -187,
	368, 128, -163, 372, 372, 372, 368, 368, 368, 7,
	368, 372, 368, 342, 342, 368, 367, 368, -211, -253,
	-158, 2, -249, -283, -211, -242, -249, -249, -181, 324,
	207, 168, -249, -244, 368, -328, 7, -246, -245, 7,
	-218, -217, 126, 195, 368, -127, 367, -246, 368, -113,
	-135, -127, -127, 197, -209, 143, -118, 197, -258, -127,
	367, 367, 169, 169, -127, -127, 143, -127, 143, -127,
	-127, -114, 245, -61, 367, -135, 245, -127, -61, 367,
	-127, 245, -97, 142, 203, 285, 128, -135, 368, 368,
	372, -128, 149, -128, -61, -161, -288, -288, -61, -135,
	105, -120, 101, -340, 348, -127, -197, -195, -219, -178,
	-204, 252, 207, -159, 329, -127, -178, -157, 372, 128,
	348, -159, -116, -116, -116, -116, -219, -331, -288, 368,
	-258, 365, 366, 7, 7, -100, 337, -331, -280, -280,
	-124, 315, 62, 234, -280, 372, -200, -219, -247, -135,
	373, -219, -219, -220, -220, 128, 367, -219, -230, 26,
	26, 368, -164, 372, -215, -219, 368, -228, 102, -219,
	301, 368, 331, -150, -150, -150, 5, 188, 138, 187,
	-190, 187, -190, -190, 7, -322, -127, 367, 335, -149,
	368, -276, -258, -219, -224, -219, -276, -258, -220, -220,
	-220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
	-220, -220, -220, -220, -220, -220, -220, 96, 197, 203,
	-220, 372, -164, -225, -224, -219, -219, -258, 368, 368,
	368, -163, -219, -219, -219, 368, 7, -46, -175, 133,
	-255, 372, -175, -181, 367, -219, -249, 366, 368, 372,
	-245, 366, 372, 375, 348, -246, 367, -153, -244, 305,
	305, 105, 197, 326, -298, -295, -219, -152, -248, -127,
	-309, 367, -306, -307, -133, 367, 367, -111, 99, 271,
	-194, 105, -116, 105, -116, 305, -193, 65, -163, 305,
	-163, 305, -100, 128, 292, 285, -145, 148, -210, 367,
	-128, 367, 367, -148, -123, 367, -127, -121, 174, -340,
	-286, -312, -178, -178, -166, 198, 64, 368, -211, -168,
	-158, -242, 368, -101, 72, -101, 7, 366, 368, -99,
	209, -98, -127, 5, -127, 208, 368, -112, -283, 26,
	26, -219, -230, 368, -219, -219, 368, -219, 366, -219,
	5, -219, 368, 368, 368, 368, -323, -127, -219, 368,
	368, 368, -225, 128, 96, 203, 367, -219, 368, 368,
	372, 368, 368, 368, 368, -227, 135, 44, -249, -227,
	-153, -216, 7, -217, -283, 365, -245, -153, 368, -127,
	-127, -209, 105, -299, 65, -300, 57, 112, 70, 197,
	199, 317, 229, 54, 90, 238, 368, 368, 372, -134,
	-171, 57, -134, -219, 367, -152, -153, 197, 90, 197,
	90, 83, 313, -127, -127, -135, -127, -127, 368, -135,
	368, -127, -289, 302, 146, -152, 367, -153, -143, 30,
	-152, 207, -122, 173, -340, -286, -119, -203, 367, 207,
	-61, -178, 348, 83, 83, 366, 372, 367, 348, 348,
	-112, -219, -219, 368, 368, -150, -317, 220, 368, -220,
	128, 367, -230, 368, -219, -318, 336, -219, -163, -318,
	368, -246, 7, 368, -209, -127, -283, -127, 112, 143,
	199, 169, 367, -220, -135, -208, -336, 69, 289, -248,
	-112, -283, -112, 368, -163, 368, 368, 199, 199, -219,
	-258, -116, -116, 305, 305, 305, 305, -222, -133, -127,
	218, 368, -152, 368, 368, -61, 368, -135, -340, -286,
	-120, 97, -153, 65, -174, -104, 367, 367, 367, -98,
	-99, -288, -288, 368, -150, 44, -220, -230, 368, 368,
	-319, -320, -127, -245, 366, -300, -128, 197, -219, -129,
	367, -145, 367, -134, -150, 238, -115, 57, -127, -127,
	367, 367, 367, -135, -208, 368, -145, -208, 367, -286,
	-121, 319, 198, 368, -127, -289, -289, 368, -324, 233,
	258, -163, 368, 372, 30, 105, 368, -303, 186, -127,
	-153, -112, 368, -135, -110, 324, -283, -163, -163, -163,
	367, -145, -208, -145, -152, -122, 271, -211, 368, 368,
	368, -325, -326, 36, 314, 74, -219, -325, -320, -322,
	112, -301, -304, -302, 207, 129, 219, 276, 368, 368,
	-148, -219, 368, 368, -150, -153, -145, 368, -167, -100,
	-100, -326, 226, 124, 257, 226, 124, -127, -302, 207,
	-304, 207, 319, 93, -303, 368, 368, -208, -211, 26,
	-305, 194, 250, 48, 271, -305, -301, -117, 48, 250,
	-145, -326, 20, 199, 90,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 0, 0, 151, 153, -2, 0, 0, 0,
	174, 175, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 643, -2, 0, 284, 286, 295, 297,
	299, 301, 302, 0, 345, 347, 349, 351, 353, 355,
	357, 359, 361, 363, 365, 367, 369, 371, 373, 374,
	376, 378, 0, 564, 566, 568, -2, 63, 64, 65,
	66, 67, 73, 74, 75, 76, 69, 71, 155, 157,
	159, 161, 164, 679, 178, 180, 182, 184, -2, 690,
	0, 0, 0, -2, 0, -2, -2, -2, 0, 0,
	656, 658, 660, 662, -2, 0, 0, -2, 7, 12,
	14, 16, 19, 21, 23, 25, 27, 29, 31, 33,
	35, 37, 39, 42, 48, 50, 52, 55, 57, 59,
	61, 62, 0, 0, 0, 0, 0, 117, 268, 0,
	1255, 1182, 1188, 1189, 1213, 1214, 1215, 1232, 1233, 1234,
	1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244,
	1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254,
	1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
	1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
	1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
	1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
	1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
	1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
	1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
	1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
	1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
	1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425,
	1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435,
	1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 143,
	145, 146, 0, 0, 0, 1184, 1255, 152, 154, 0,
	0, 0, 0, 0, 531, 259, 1314, 261, 263, 0,
	0, 0, 0, 168, 169, 170, 171, 172, 173, 176,
	177, 0, 0, 0, 0, 0, 258, 256, 207, 208,
	0, 241, 242, 243, 244, 245, 247, 211, 213, 214,
	216, 218, 220, 222, 224, 226, 227, 229, 231, 232,
	234, 236, 237, 239, 532, 0, 0, 0, 265, 271,
	272, 273, 275, 276, 277, 278, 279, 280, 281, 0,
	123, 0, 451, 254, 252, 0, 119, 0, 561, 0,
	267, 562, 563, 558, 559, 1341, 587, 285, 287, 296,
	298, 300, -2, -2, 1431, -2, 309, -2, 317, 1437,
	0, 320, 321, 324, -2, 203, 346, 348, 350, 352,
	354, 356, 358, 360, 362, 364, 366, 368, 370, 372,
	375, 377, 379, 380, 381, 0, 0, 0, 385, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, 0, -2, -2, 0, 0, -2, 0, 0, 384,
	386, 387, 388, 0, 565, 567, 569, 0, 520, 681,
	156, 158, 160, 162, 165, -2, 654, 655, 179, 181,
	183, 185, -2, 0, 685, 685, 685, 0, 0, 655,
	653, 0, 288, 0, 290, 0, 385, 293, 294, 325,
	326, 1167, 1168, 884, 0, 0, 0, 0, 0, 0,
	986, 988, 1404, 1431, 0, 990, 991, 0, 993, 995,
	996, 0, 999, 1000, 1152, 1184, 1198, 1199, 1200, 1201,
	0, 0, 1204, 0, 1206, 1207, 1208, 1054, 1010, -2,
	-2, 1196, 812, 813, 814, 815, -2, 1445, 1014, 1017,
	1020, 1023, 1024, 1027, 1028, 0, 1388, 1405, 1406, 1427,
	1428, 1436, 1440, 1441, 1412, 1424, 1413, 1400, 1410, 1422,
	1261, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1222, 846, 847, 852,
	853, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	1455, 1456, 1457, 1458, 1459, 855, 589, 571, 580, 589,
	573, 574, 575, 576, 577, 578, 579, 582, 0, 671,
	1320, 674, 1195, 672, 657, 659, 0, 661, 0, 0,
	665, 687, 686, 720, 721, 0, 669, 670, 680, 736,
	774, 751, 742, 0, 0, 2, 68, 0, 1412, 774,
	70, 0, 1412, 774, 72, 0, 77, 0, 1412, 1187,
	0, 0, 269, 270, 1192, 1190, 1191, 0, 147, 148,
	149, 150, 0, 0, 1185, 1161, 1159, 1160, 163, 499,
	1412, -2, 1412, 523, 124, 125, 343, 344, 1223, 1224,
	1225, 1226, 1445, 499, 527, -2, 678, 1412, 603, 260,
	262, 0, 167, 0, 616, 0, 618, 0, 633, 780,
	109, 1412, 188, 201, 109, 1412, 191, 109, 1412, 194,
	1180, 109, 1412, 197, 198, 1412, 200, 126, 255, 0,
	0, -2, 248, 250, -2, 246, 212, 215, 217, 219,
	221, 223, 225, 228, 230, 233, 235, 238, 240, -2,
	0, 0, 0, 450, 0, 0, 0, 560, 0, 586,
	303, 0, 306, 0, 308, 1399, -2, -2, 312, 590,
	594, 595, 596, 0, 0, 0, 0, 0, 0, 0,
	322, 204, 0, 382, 383, 391, 392, 0, 395, 416,
	428, 0, 0, 399, 401, 449, 403, 0, 0, 405,
	0, 407, 0, 409, 0, 411, 0, 413, 415, 417,
	429, 419, 680, 421, 0, 423, 427, 0, 432, 0,
	434, 435, 436, 0, 0, 442, 0, 0, 389, 390,
	109, 778, -2, 0, 649, 699, 700, 0, 0, 0,
	0, 683, 684, 0, 0, 0, 645, 646, 289, 0,
	292, 0, 0, 0, 0, 1087, 1088, 1089, 1090, 1091,
	1092, 1095, 1096, 1093, 1094, 1097, 1098, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 1101, 1102, 0, 0, 1104, 0, 1106, 0,
	0, 0, 0, 0, 0, 1166, 0, 0, 1103, 889,
	890, 891, 923, 924, 0, 987, 1163, 1156, 989, 0,
	1109, -2, 1110, 0, 0, 992, 997, 998, 1109, 0,
	1151, -2, 0, 1203, 0, 881, 1056, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1132, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 831, 849,
	860, 857, 856, 833, 0, 832, 830, 0, 834, 0,
	0, 0, 570, -2, 572, 0, 584, 0, 673, 0,
	0, 722, 725, 1172, 1176, 1177, 725, 0, 1169, 0,
	0, 0, 0, 771, 771, 771, 769, 745, 0, 751,
	0, -2, 775, 763, 0, -2, 742, 0, 0, 776,
	0, 78, 555, 88, 0, 555, 555, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 765, 1183, 0, 1157, 1158, 1227, 1228, 1229, 1230,
	1231, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
	1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498,
	1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
	1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
	1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
	1539, 1540, 139, 0, 0, 1178, 1162, 457, 0, 0,
	521, 0, 677, 0, 0, 0, 0, 1412, 530, 1216,
	605, 0, 784, 0, 619, 0, 0, 781, 0, 186,
	0, 107, 108, 0, 189, 0, 192, 0, 0, 195,
	0, 0, 0, 0, 1110, 680, 0, 0, 274, 0,
	0, 680, 0, 1112, 792, 793, 794, 795, 796, 881,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 843, 0, 818, 818, 818, 835,
	836, 844, 845, 850, 851, 862, 863, 865, 867, 861,
	861, 861, 858, 859, 765, 0, 0, 0, 0, -2,
	314, 0, 592, 0, 597, 334, 335, 336, 599, 600,
	318, 337, 338, 339, 340, 341, 342, 0, 516, 0,
	518, 1209, 0, 315, 327, 316, 319, 0, 205, 393,
	394, 396, 397, 398, 402, 0, 446, 404, 406, 408,
	410, 412, 420, 424, 680, 430, 433, 437, 438, 439,
	440, 0, 0, 0, 519, 0, 652, 697, 698, 703,
	707, 708, 711, 714, 715, 705, 884, 666, 667, 668,
	691, 692, 542, 0, 0, 291, 885, 788, 789, 837,
	838, 839, 840, 841, 886, 887, 0, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, -2, -2, -2,
	-2, -2, -2, -2, -2, 910, 911, 912, 913, 914,
	915, 916, 917, -2, -2, -2, 921, 922, -2, 1105,
	1107, 0, 1166, 0, -2, 0, -2, -2, -2, -2,
	935, 0, 937, 940, 942, 944, 0, 0, 0, 0,
	1165, 954, 1143, 0, 0, 1084, 1085, 1086, 939, 0,
	0, 1164, 1155, 0, 0, 1108, 994, 0, 0, 0,
	1116, 1150, 1146, 0, 1001, 690, 0, 0, 0, 0,
	1008, 0, 1212, 868, 869, 870, 871, 872, 873, 882,
	1064, 0, 0, 0, 1015, 1016, 1018, 1019, 1021, 1022,
	1025, 1026, 0, 0, 0, 1032, 0, 1119, -2, -2,
	-2, -2, -2, -2, -2, 0, 1034, 0, 1036, 1110,
	1129, 0, 0, 957, 0, 0, 0, 0, 1431, 0,
	1039, 1110, 1137, 0, 0, 0, 0, 0, 1110, 0,
	1142, 0, 0, 0, 0, 0, 1050, 0, 1052, 0,
	0, 0, 0, 0, 0, 583, 675, 0, 0, 784,
	0, 0, 0, 1175, 784, 0, 1171, 0, 0, 0,
	0, 0, 766, 770, 767, 768, 0, 0, 751, 763,
	733, 0, 0, 0, 740, 741, 762, 0, 761, 750,
	-2, 0, 0, 0, 0, 0, 554, 90, 1412, 0,
	111, 0, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 83, 0, 0, 0, 1186, 129, 0, 1193, 0,
	0, 0, 0, 0, 456, 1192, 458, 460, 461, 462,
	463, 1217, 0, 1217, 0, 0, 0, 0, 0, 0,
	0, 607, 613, 0, 702, 0, 631, 621, 0, 0,
	0, 631, 635, 636, 638, 639, 0, 0, 782, 202,
	109, 109, 1181, 109, 109, 127, 199, 257, 0, 209,
	249, 0, 0, 0, 251, 0, 0, 253, 0, 785,
	787, 0, 797, 0, 138, 0, 0, 0, 307, 0,
	591, 598, 0, 331, 0, 333, 517, 1211, 1210, 0,
	206, 448, 282, 422, 425, 443, 444, 445, 779, 0,
	709, 0, 0, 706, 712, 713, 0, 694, 540, 541,
	0, 0, 0, -2, -2, 0, 0, 0, 955, -2,
	936, 938, 941, 943, 945, 0, 0, 0, 0, 0,
	0, 0, 956, 1109, 0, 1153, 1156, -2, 1111, 1114,
	1115, 0, 0, 1147, 0, 0, 0, 0, 689, 690,
	690, 690, 1007, 0, 0, 0, 0, 0, 0, 1009,
	0, 0, 0, 0, 0, 0, 1031, 0, 1033, 1035,
	0, 0, 1037, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 960, 961, 962, 0,
	1109, 1038, 1135, 1136, 0, 0, 0, 0, 0, 0,
	1044, 0, 1141, 0, 0, 0, 1048, 1049, 1051, 0,
	816, 0, 842, 864, 866, 854, 680, 1194, 717, 1173,
	765, 724, 726, 1174, 717, 1170, 753, 0, 755, 0,
	0, 0, 757, 0, 746, 0, 748, 763, 738, 0,
	0, 731, 0, 730, 751, 759, 0, 0, 777, 89,
	544, 0, 0, 0, 92, 1412, 100, 0, 471, 0,
	0, 0, 0, 0, 557, 101, 1412, 109, 1412, 109,
	102, 79, 555, 80, 0, 550, 0, 543, 81, 0,
	552, 0, 138, 0, 0, 140, 0, 1179, 465, 498,
	0, 0, 1217, 0, 454, 499, 524, -2, 526, 0,
	0, 609, 613, 0, 612, 678, 631, 701, 783, 614,
	631, 0, 0, 0, 623, 620, 617, 784, 0, 0,
	0, 0, 187, 190, 193, 196, 1111, 264, 0, 0,
	1113, 0, 790, 0, 0, 118, 0, 266, 304, 305,
	310, 329, 330, 332, 328, 0, 0, 0, 693, 542,
	0, 888, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 1144, 0, 0, 0, 1155, -2, 1117, 1145, 1149,
	0, 1002, 0, 0, 0, 0, 1205, 874, 875, 876,
	877, 878, 879, 880, 0, 1062, 1063, 1067, 0, 0,
	1013, 0, 0, 1118, 1128, 1130, 958, 959, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, -2, -2,
	-2, 976, 977, 978, -2, -2, -2, 0, 0, 0,
	1131, 0, 0, 1133, 1134, 1138, 1139, 0, 1041, 1042,
	1043, 1140, 0, 0, 0, 848, 0, 0, 719, 0,
	723, 0, 719, 754, 0, 773, 756, 736, 747, 0,
	744, 734, 0, 735, 0, 763, 0, 0, 743, 0,
	0, 0, 0, 110, 469, 488, 0, 0, 533, 539,
	539, 0, 1011, 1012, 0, 0, 0, 94, 0, 0,
	0, 0, 98, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 141, 452, 0, 459, 0,
	0, 0, 457, 0, 522, 0, 0, 611, 613, 0,
	604, 605, 166, 615, 629, 630, 628, 0, 631, 637,
	634, 640, 0, 0, 120, 0, 0, 791, 798, 136,
	1304, 134, 131, 133, 283, 704, 710, 695, 542, 0,
	0, -2, 0, 948, -2, -2, 1080, 1111, 1154, 1148,
	1202, 690, 1003, 1005, 1006, 883, 1069, 1066, 0, 1053,
	1029, 1030, 1127, 0, 0, 0, 0, 1111, 1082, 1040,
	0, 1046, 1047, 817, 676, 1058, 0, 0, 727, 1058,
	0, 751, 749, 732, 728, 0, 739, 0, 760, 546,
	548, 91, 0, 470, 0, 473, 0, 0, 0, 0,
	479, 480, 0, 0, 0, 0, 490, 497, 0, 542,
	1197, 0, 542, 0, 0, 0, 0, 0, 106, 0,
	0, 556, 0, 109, 109, 545, 0, 0, 0, 551,
	0, 553, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 613, 0, 606, 607, 0, 0, 0,
	622, 632, 0, 0, 0, 786, 0, 0, 0, 0,
	696, -2, -2, 949, 1081, 0, 690, 0, 1055, -2,
	0, 0, 0, 1083, 0, 663, 0, 718, 716, 664,
	772, 763, 0, 758, 93, 0, 474, 475, 1217, 0,
	478, 481, 0, 483, 1219, 465, 0, 494, 495, 534,
	535, 538, 536, 539, 690, 492, 0, 95, 96, 105,
	113, 97, 103, 0, 0, 0, 0, 764, 0, 0,
	0, 497, 0, 487, 465, 455, 497, 0, 0, 608,
	609, 0, 0, 0, 641, 642, 0, 0, 0, 135,
	0, 130, 132, 1004, 1072, 0, -2, 0, 984, 1045,
	1057, 1059, 0, 737, 729, 472, 476, 0, 0, 503,
	0, 491, 0, 542, 0, 0, 115, 0, 547, 549,
	0, 0, 0, 0, 465, 497, 453, 465, 0, 610,
	611, 0, 625, 784, 627, 0, 0, 137, 0, 0,
	0, 1068, 985, 0, 0, 0, 482, 508, 0, 0,
	0, 537, 1002, 499, 99, 0, 112, 0, 0, 690,
	0, 485, 465, 528, 0, 602, 0, 626, 138, 138,
	1065, 1070, 1073, -2, 1372, 1252, 0, 1071, 1060, 1061,
	0, 484, 504, 505, 0, 500, 501, 502, 1218, 496,
	503, 114, 85, 87, 0, 0, 486, 497, 784, 121,
	122, 0, 1075, 1076, 1077, 1078, 1079, 477, 506, 0,
	507, 0, 0, 0, 508, 0, 468, 465, 624, 0,
	509, 0, 512, 513, 0, 510, 493, 464, 466, 467,
	529, 1074, 511, 514, 515,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 356, 3, 362, 357, 3,
	367, 368, 360, 358, 372, 359, 369, 361, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 376, 371,
	346, 348, 347, 350, 373, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 365, 3, 366, 363, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 374, 355, 375, 353,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 349, 57689, 351,
	57690, 352, 57691, 354, 57692, 364, 57693, 370, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:861
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:867
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:873
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:882
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:884
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:985
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1005
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1031
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1037
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1103
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1126
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1136
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1198
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1199
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1202
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1203
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1230
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1256
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1294
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1363
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1385
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1396
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			return helpWith(sqllex, "CREATE")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1425
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			return helpWith(sqllex, "DELETE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			return helpWith(sqllex, "DROP")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1470
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1471
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1472
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1526
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1549
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1564
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1624
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1627
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1629
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1630
		{
			return helpWith(sqllex, "DELETE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1633
		{
			return helpWith(sqllex, "INSERT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1643
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1646
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1653
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1654
		{ /* SKIP DOC */
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1761
		{
			return helpWith(sqllex, "GRANT")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1803
		{
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			return helpWith(sqllex, "RESET")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1860
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1875
		{
			return helpWith(sqllex, "RESET")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1886
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1891
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1894
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1898
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1900
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1901
		{ /* SKIP DOC */
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{ /* SKIP DOC */
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1903
		{
			return unimplemented(sqllex, "set local")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1919
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1969
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1974
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1991
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			return unimplemented(sqllex, "set from current")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1996
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2002
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2006
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = Low
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = Normal
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = High
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2120
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			return helpWith(sqllex, "SHOW")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2132
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.str = "client_encoding"
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2158
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2175
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2224
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2261
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2280
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2293
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2298
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2347
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2351
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2358
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2369
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2380
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2395
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2399
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2403
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2437
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2536
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2540
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = DropDefault
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2550
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2755
		{
			return unimplemented(sqllex, "match full")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
			return unimplemented(sqllex, "match partial")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2757
		{
			return unimplemented(sqllex, "match simple")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2758
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2764
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2768
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2771
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2777
		{
			return unimplemented(sqllex, "no action")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2781
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2782
		{
			return unimplemented(sqllex, "action set null")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2783
		{
			return unimplemented(sqllex, "action set default")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2808
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2823
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = nil
		}
	case 526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2848
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2888
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = true
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = false
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2918
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2919
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2922
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2923
		{
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = Ascending
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = Descending
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2963
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2965
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = true
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = false
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2998
		{
		}
	case 557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2999
		{
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3010
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3021
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3036
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3038
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3056
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3061
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3087
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3097
		{
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3098
		{
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.str = ""
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.str = ""
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3144
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3159
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = ReadOnly
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = ReadWrite
		}
	case 601:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.str = ""
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.str = ""
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.str = ""
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.str = ""
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3266
		{
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3267
		{
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			return helpWith(sqllex, "INSERT")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3350
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3354
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3362
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 632:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3389
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3390
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3519
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3554
		{
			return helpWith(sqllex, "SELECT")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3555
		{
			return helpWith(sqllex, "VALUES")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3556
		{
			return helpWith(sqllex, "TABLE")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3602
		{
			return helpWith(sqllex, "SELECT")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3646
		{
			return helpWith(sqllex, "TABLE")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3657
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3658
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3659
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3663
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3666
		{
			return unimplemented(sqllex, "cte")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3669
		{
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3670
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3673
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3674
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3678
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = true
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = false
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = false
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = true
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3701
		{
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3702
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3749
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3773
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3825
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3826
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3829
		{
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3830
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3888
		{
			return helpWith(sqllex, "VALUES")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3890
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3905
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &From{}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3927
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3945
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3972
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4009
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = nil
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4075
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = true
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = false
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.str = astFullJoin
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.str = astLeftJoin
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.str = astRightJoin
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.str = astInnerJoin
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4192
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4193
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4279
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4293
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4301
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4325
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4336
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4386
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4417
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4426
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = nil
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4491
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4587
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 854:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4619
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4659
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 864:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 866:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = year
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = month
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = day
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = hour
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = minute
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = month
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = hour
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = minute
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = minute
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = nil
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = second
		}
	case 883:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4754
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4789
		{
			return unimplemented(sqllex, "at tz")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4997
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5063
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5236
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5289
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5290
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5292
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5296
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5303
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5314
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5330
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5331
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5335
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5344
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5353
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5362
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5363
		{
			return unimplemented(sqllex, "current role")
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5372
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5393
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5398
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5403
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5412
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5413
		{
			return unimplemented(sqllex, "treat")
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5427
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5447
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5450
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5455
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5459
		{
			return unimplemented(sqllex, "within group")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5460
		{
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5475
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5479
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5485
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5489
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5495
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5537
		{
			sqlVAL.str = ""
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5557
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5558
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5559
		{
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5562
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5563
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5569
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5570
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5571
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5572
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5573
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5600
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = Any
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5610
		{
			sqlVAL.union.val = Some
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = All
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = Plus
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = Minus
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = Mult
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = Div
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = Mod
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = Bitand
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = Bitor
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = Pow
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = Bitxor
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = LT
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = GT
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5631
		{
			sqlVAL.union.val = EQ
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5632
		{
			sqlVAL.union.val = LE
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = GE
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = NE
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = Like
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = NotLike
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5640
		{
			sqlVAL.union.val = ILike
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5641
		{
			sqlVAL.union.val = NotILike
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5653
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5703
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5767
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5771
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5775
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5779
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5783
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5789
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5795
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5805
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5815
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5819
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5837
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5841
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5847
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5853
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5857
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5893
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5899
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5903
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5909
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5928
		{
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5929
		{
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5963
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5967
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5973
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6047
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6060
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6088
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6091
		{
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6101
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6105
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6112
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6116
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6120
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6127
		{
			return unimplemented(sqllex, "func const")
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6133
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6136
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = DNull
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6153
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6157
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6163
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6198
		{
			sqlVAL.str = ""
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6204
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6208
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
