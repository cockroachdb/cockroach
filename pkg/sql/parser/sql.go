// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOCAL = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const LOW = 57516
const LSHIFT = 57517
const MATCH = 57518
const MINUTE = 57519
const MONTH = 57520
const NAN = 57521
const NAME = 57522
const NAMES = 57523
const NATURAL = 57524
const NEXT = 57525
const NO = 57526
const NO_INDEX_JOIN = 57527
const NORMAL = 57528
const NOT = 57529
const NOTHING = 57530
const NULL = 57531
const NULLIF = 57532
const NULLS = 57533
const NUMERIC = 57534
const OF = 57535
const OFF = 57536
const OFFSET = 57537
const OID = 57538
const ON = 57539
const ONLY = 57540
const OPTIONS = 57541
const OR = 57542
const ORDER = 57543
const ORDINALITY = 57544
const OUT = 57545
const OUTER = 57546
const OVER = 57547
const OVERLAPS = 57548
const OVERLAY = 57549
const PARENT = 57550
const PARTIAL = 57551
const PARTITION = 57552
const PASSWORD = 57553
const PAUSE = 57554
const PLACING = 57555
const PLANS = 57556
const POSITION = 57557
const PRECEDING = 57558
const PRECISION = 57559
const PREPARE = 57560
const PRIMARY = 57561
const PRIORITY = 57562
const QUERIES = 57563
const QUERY = 57564
const RANGE = 57565
const READ = 57566
const REAL = 57567
const RECURSIVE = 57568
const REF = 57569
const REFERENCES = 57570
const REGCLASS = 57571
const REGPROC = 57572
const REGPROCEDURE = 57573
const REGNAMESPACE = 57574
const REGTYPE = 57575
const RENAME = 57576
const REPEATABLE = 57577
const RELEASE = 57578
const RESET = 57579
const RESTORE = 57580
const RESTRICT = 57581
const RESUME = 57582
const RETURNING = 57583
const REVOKE = 57584
const RIGHT = 57585
const ROLLBACK = 57586
const ROLLUP = 57587
const ROW = 57588
const ROWS = 57589
const RSHIFT = 57590
const SAVEPOINT = 57591
const SCATTER = 57592
const SEARCH = 57593
const SECOND = 57594
const SELECT = 57595
const SEQUENCES = 57596
const SERIAL = 57597
const SERIALIZABLE = 57598
const SESSION = 57599
const SESSIONS = 57600
const SESSION_USER = 57601
const SET = 57602
const SETTING = 57603
const SETTINGS = 57604
const SHOW = 57605
const SIMILAR = 57606
const SIMPLE = 57607
const SMALLINT = 57608
const SMALLSERIAL = 57609
const SNAPSHOT = 57610
const SOME = 57611
const SPLIT = 57612
const SQL = 57613
const START = 57614
const STATUS = 57615
const STDIN = 57616
const STRICT = 57617
const STRING = 57618
const STORING = 57619
const SUBSTRING = 57620
const SYMMETRIC = 57621
const SYSTEM = 57622
const TABLE = 57623
const TABLES = 57624
const TEMP = 57625
const TEMPLATE = 57626
const TEMPORARY = 57627
const TESTING_RANGES = 57628
const TESTING_RELOCATE = 57629
const TEXT = 57630
const THEN = 57631
const TIME = 57632
const TIMESTAMP = 57633
const TIMESTAMPTZ = 57634
const TO = 57635
const TRAILING = 57636
const TRACE = 57637
const TRANSACTION = 57638
const TREAT = 57639
const TRIM = 57640
const TRUE = 57641
const TRUNCATE = 57642
const TYPE = 57643
const UNBOUNDED = 57644
const UNCOMMITTED = 57645
const UNION = 57646
const UNIQUE = 57647
const UNKNOWN = 57648
const UPDATE = 57649
const UPSERT = 57650
const USE = 57651
const USER = 57652
const USERS = 57653
const USING = 57654
const UUID = 57655
const VALID = 57656
const VALIDATE = 57657
const VALUE = 57658
const VALUES = 57659
const VARCHAR = 57660
const VARIADIC = 57661
const VIEW = 57662
const VARYING = 57663
const WHEN = 57664
const WHERE = 57665
const WINDOW = 57666
const WITH = 57667
const WITHIN = 57668
const WITHOUT = 57669
const WRITE = 57670
const YEAR = 57671
const ZONE = 57672
const NOT_LA = 57673
const WITH_LA = 57674
const AS_LA = 57675
const POSTFIXOP = 57676
const UMINUS = 57677

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5843

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 32,
	354, 32,
	-2, 498,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 61,
	1, 471,
	197, 471,
	241, 471,
	350, 471,
	352, 471,
	354, 471,
	-2, 481,
	-1, 108,
	1, 474,
	197, 474,
	241, 474,
	350, 474,
	352, 474,
	354, 474,
	-2, 480,
	-1, 120,
	1, 32,
	354, 32,
	-2, 498,
	-1, 502,
	122, 1079,
	293, 1079,
	336, 1079,
	353, 1079,
	-2, 0,
	-1, 513,
	1, 211,
	354, 211,
	-2, 1084,
	-1, 533,
	111, 508,
	170, 508,
	195, 508,
	-2, 477,
	-1, 536,
	111, 507,
	170, 507,
	195, 507,
	-2, 475,
	-1, 694,
	351, 1011,
	-2, 1004,
	-1, 695,
	351, 1012,
	-2, 1005,
	-1, 701,
	5, 678,
	351, 678,
	-2, 1209,
	-1, 726,
	5, 637,
	-2, 1179,
	-1, 727,
	5, 672,
	351, 672,
	-2, 1181,
	-1, 728,
	5, 647,
	-2, 1182,
	-1, 729,
	5, 646,
	-2, 1183,
	-1, 730,
	5, 672,
	351, 672,
	-2, 1186,
	-1, 731,
	5, 672,
	351, 672,
	-2, 1187,
	-1, 732,
	5, 673,
	-2, 1190,
	-1, 733,
	5, 629,
	-2, 1191,
	-1, 734,
	5, 629,
	-2, 1192,
	-1, 735,
	5, 654,
	-2, 1196,
	-1, 736,
	5, 639,
	-2, 1197,
	-1, 737,
	5, 640,
	-2, 1198,
	-1, 738,
	5, 630,
	-2, 1203,
	-1, 739,
	5, 631,
	-2, 1204,
	-1, 740,
	5, 632,
	-2, 1205,
	-1, 741,
	5, 633,
	-2, 1206,
	-1, 742,
	5, 634,
	-2, 1207,
	-1, 743,
	5, 635,
	-2, 1208,
	-1, 744,
	5, 629,
	-2, 1213,
	-1, 745,
	5, 638,
	-2, 1218,
	-1, 746,
	5, 636,
	-2, 1221,
	-1, 747,
	5, 670,
	351, 670,
	-2, 1223,
	-1, 748,
	5, 674,
	-2, 1226,
	-1, 749,
	5, 676,
	-2, 1227,
	-1, 750,
	5, 669,
	351, 669,
	-2, 1232,
	-1, 801,
	111, 507,
	170, 507,
	195, 507,
	-2, 478,
	-1, 962,
	102, 481,
	111, 481,
	151, 481,
	170, 481,
	195, 481,
	201, 481,
	304, 481,
	-2, 797,
	-1, 971,
	351, 988,
	-2, 976,
	-1, 1236,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 713,
	-1, 1237,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 714,
	-1, 1238,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 715,
	-1, 1242,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 719,
	-1, 1243,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 720,
	-1, 1244,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 721,
	-1, 1247,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 726,
	-1, 1253,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 728,
	-1, 1255,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 732,
	-1, 1256,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 733,
	-1, 1257,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 734,
	-1, 1258,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 735,
	-1, 1284,
	206, 870,
	-2, 873,
	-1, 1321,
	122, 910,
	351, 1011,
	-2, 1004,
	-1, 1322,
	122, 911,
	-2, 1175,
	-1, 1323,
	122, 912,
	-2, 1083,
	-1, 1324,
	122, 913,
	-2, 1047,
	-1, 1325,
	122, 914,
	-2, 1064,
	-1, 1326,
	122, 915,
	-2, 1082,
	-1, 1327,
	122, 916,
	-2, 1134,
	-1, 1503,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 727,
	-1, 1504,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 729,
	-1, 1509,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 730,
	-1, 1527,
	206, 869,
	-2, 872,
	-1, 1703,
	102, 481,
	111, 481,
	151, 481,
	170, 481,
	195, 481,
	201, 481,
	304, 481,
	-2, 564,
	-1, 1723,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 731,
	-1, 1728,
	154, 0,
	-2, 747,
	-1, 1738,
	206, 871,
	-2, 874,
	-1, 1780,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 774,
	-1, 1781,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 775,
	-1, 1782,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 776,
	-1, 1786,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 780,
	-1, 1787,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 781,
	-1, 1788,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 782,
	-1, 1894,
	1, 565,
	70, 565,
	102, 565,
	111, 565,
	123, 565,
	127, 565,
	129, 565,
	142, 565,
	151, 565,
	158, 565,
	167, 565,
	170, 565,
	182, 565,
	195, 565,
	197, 565,
	201, 565,
	241, 565,
	243, 565,
	304, 565,
	312, 565,
	323, 565,
	324, 565,
	333, 565,
	350, 565,
	352, 565,
	354, 565,
	355, 565,
	-2, 564,
	-1, 1907,
	154, 0,
	-2, 748,
	-1, 1910,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 751,
	-1, 1911,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 753,
	-1, 2038,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 752,
	-1, 2039,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 754,
	-1, 2046,
	154, 0,
	-2, 783,
	-1, 2127,
	154, 0,
	-2, 784,
	-1, 2208,
	36, 0,
	136, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 1178,
}

const sqlPrivate = 57344

const sqlLast = 31355

var sqlAct = [...]int{

	695, 1814, 2253, 2207, 2065, 2216, 2215, 2180, 2217, 1187,
	1096, 1195, 537, 2206, 2030, 1757, 1890, 388, 1889, 1837,
	2097, 688, 1701, 1383, 1417, 1698, 2018, 1644, 1012, 1974,
	1945, 671, 1102, 611, 1387, 2005, 685, 129, 129, 693,
	1960, 129, 130, 1821, 880, 626, 552, 1350, 129, 1877,
	1999, 1646, 129, 1382, 1406, 390, 1482, 129, 895, 1820,
	129, 1098, 692, 129, 1593, 1386, 1462, 1689, 1868, 60,
	129, 1431, 1395, 1592, 372, 23, 967, 1307, 1538, 872,
	1282, 1215, 862, 1476, 1684, 751, 1461, 1179, 364, 1196,
	1467, 1148, 544, 107, 770, 1150, 1122, 391, 1413, 1422,
	362, 1347, 665, 1086, 1292, 1270, 884, 881, 1267, 640,
	863, 1301, 561, 1390, 1464, 129, 129, 555, 512, 129,
	769, 1002, 958, 998, 129, 129, 1318, 664, 556, 652,
	638, 1170, 1189, 600, 805, 121, 108, 494, 803, 804,
	392, 510, 642, 1084, 547, 107, 109, 687, 617, 508,
	1961, 786, 380, 888, 562, 125, 634, 598, 564, 785,
	506, 2108, 809, 1526, 2109, 2239, 1696, 1188, 877, 541,
	1699, 541, 897, 340, 897, 897, 2229, 1653, 2228, 1211,
	542, 1211, 113, 2226, 1192, 1494, 1959, 1304, 536, 2224,
	2202, 2199, 877, 877, 877, 23, 1172, 563, 2176, 1493,
	497, 1365, 2166, 2139, 900, 877, 1959, 1013, 2129, 2122,
	1211, 1365, 877, 107, 753, 545, 2117, 913, 914, 2116,
	2104, 2080, 2077, 2105, 1959, 877, 2076, 2075, 106, 1959,
	877, 113, 113, 608, 1305, 2063, 1180, 2156, 1959, 116,
	916, 1183, 36, 88, 534, 913, 914, 1687, 933, 934,
	935, 943, 944, 945, 533, 105, 50, 2040, 1687, 2021,
	1365, 936, 1211, 51, 915, 52, 1171, 118, 916, 90,
	1429, 947, 1654, 602, 1793, 40, 1735, 106, 106, 1306,
	1303, 1996, 1995, 1958, 1211, 1211, 1959, 1934, 1912, 54,
	1211, 1211, 915, 1909, 913, 914, 1365, 47, 930, 1732,
	1180, 49, 1211, 119, 1721, 50, 50, 1186, 91, 1628,
	877, 114, 51, 51, 52, 52, 1716, 916, 115, 1186,
	1416, 1379, 1183, 1211, 921, 1537, 1627, 1610, 1608, 877,
	1611, 1211, 53, 1607, 1068, 1286, 1211, 110, 54, 54,
	1606, 915, 1530, 1211, 858, 1529, 129, 1531, 615, 116,
	1211, 129, 921, 1527, 1308, 656, 1211, 129, 129, 129,
	129, 129, 607, 898, 561, 898, 898, 1458, 120, 621,
	877, 940, 948, 1371, 1962, 1364, 1211, 118, 1365, 558,
	1210, 2231, 931, 1211, 647, 1185, 2222, 1178, 1186, 946,
	1177, 909, 2013, 1090, 910, 784, 116, 1563, 1564, 1702,
	2205, 921, 2187, 2124, 938, 2078, 562, 1939, 1563, 1564,
	931, 1935, 116, 119, 1927, 1278, 1926, 1925, 1493, 816,
	55, 114, 112, 1921, 118, 1920, 56, 1919, 115, 1171,
	1918, 1302, 1894, 542, 1901, 937, 1867, 1813, 1563, 1564,
	118, 1808, 1803, 1802, 62, 63, 37, 1191, 57, 563,
	58, 1801, 92, 1369, 975, 932, 1743, 59, 1626, 1615,
	119, 116, 116, 868, 1631, 635, 1424, 1612, 69, 1600,
	1700, 112, 112, 1591, 1562, 1559, 119, 644, 644, 902,
	89, 896, 1094, 932, 114, 1558, 1556, 1543, 1542, 118,
	118, 115, 653, 625, 110, 1101, 129, 1471, 1315, 941,
	1314, 1313, 645, 816, 1569, 968, 129, 110, 93, 815,
	110, 1759, 2177, 2155, 561, 1569, 2154, 111, 623, 2147,
	1279, 2141, 2137, 129, 129, 119, 119, 2115, 129, 129,
	129, 2112, 129, 114, 114, 2100, 2060, 2048, 913, 914,
	115, 115, 2037, 2023, 1965, 1569, 802, 924, 925, 917,
	918, 919, 920, 922, 923, 1957, 562, 1932, 1180, 110,
	110, 916, 1579, 1898, 1882, 1835, 939, 561, 1833, 927,
	928, 929, 942, 1832, 926, 924, 925, 917, 918, 919,
	920, 922, 923, 1831, 1828, 915, 1811, 1818, 1900, 1727,
	1936, 1677, 1675, 1632, 1635, 129, 129, 129, 129, 563,
	129, 1590, 1552, 1551, 1548, 1523, 1518, 1272, 1457, 562,
	1003, 129, 801, 823, 1006, 561, 129, 780, 1357, 1312,
	913, 914, 390, 561, 1095, 129, 917, 918, 919, 920,
	922, 923, 129, 129, 129, 1580, 129, 1010, 791, 878,
	996, 867, 995, 916, 994, 921, 794, 993, 797, 992,
	991, 990, 563, 989, 988, 987, 129, 562, 986, 768,
	789, 823, 985, 984, 391, 562, 765, 915, 2230, 823,
	621, 886, 983, 982, 822, 981, 1632, 787, 980, 979,
	972, 534, 961, 110, 612, 861, 764, 866, 758, 650,
	2107, 533, 2010, 1941, 1940, 1914, 1883, 968, 907, 1618,
	563, 901, 812, 813, 904, 853, 1617, 392, 563, 850,
	1563, 1564, 856, 959, 559, 1412, 1158, 964, 868, 777,
	779, 1614, 875, 1411, 820, 2119, 1574, 1572, 1573, 1565,
	1566, 1567, 1568, 1570, 1571, 2110, 1156, 2011, 1647, 542,
	1565, 1566, 1567, 1568, 1570, 1571, 635, 624, 1904, 1495,
	1008, 752, 1702, 1157, 1613, 1009, 1074, 859, 977, 1502,
	849, 129, 778, 776, 129, 1099, 1477, 2000, 1188, 1760,
	1534, 876, 1567, 1568, 1570, 1571, 1293, 999, 561, 561,
	1019, 596, 1151, 845, 1152, 390, 1489, 890, 887, 129,
	531, 911, 1151, 1851, 1152, 2193, 2246, 1304, 1083, 129,
	974, 2245, 1091, 1078, 1077, 1989, 558, 553, 1100, 912,
	868, 1623, 1065, 658, 522, 1372, 516, 521, 2121, 517,
	562, 562, 846, 2095, 840, 2094, 129, 391, 2093, 2092,
	129, 971, 129, 129, 129, 129, 129, 129, 595, 1433,
	1866, 1151, 129, 1152, 1305, 1862, 129, 129, 1865, 1093,
	347, 356, 1848, 700, 1000, 1001, 1004, 1847, 1153, 129,
	1547, 1105, 129, 563, 563, 1546, 1007, 1545, 1153, 1544,
	392, 129, 919, 920, 922, 923, 1505, 1455, 129, 1454,
	1452, 1254, 1214, 788, 614, 1169, 1075, 1081, 1407, 1306,
	1303, 777, 129, 1897, 129, 129, 1062, 129, 1361, 1396,
	129, 390, 348, 129, 129, 1064, 129, 129, 357, 1360,
	1225, 561, 1147, 1063, 524, 1709, 390, 1153, 1205, 1067,
	1953, 1080, 1087, 1269, 1079, 1269, 1092, 1146, 1711, 1810,
	1209, 2067, 107, 1224, 778, 1019, 1019, 2120, 1479, 1108,
	1139, 1107, 882, 391, 1126, 1109, 534, 1128, 1333, 534,
	534, 1056, 763, 562, 1954, 2170, 1118, 923, 391, 1119,
	1120, 891, 1853, 1190, 1308, 1190, 1398, 1132, 1182, 1308,
	1082, 1129, 2236, 1050, 1133, 1134, 1135, 1136, 1137, 1483,
	594, 1414, 1415, 1753, 1682, 589, 392, 1143, 1144, 527,
	2251, 1487, 1167, 1433, 1293, 1673, 563, 842, 1175, 1432,
	1679, 392, 107, 821, 913, 914, 1203, 2173, 670, 1283,
	1212, 540, 2245, 532, 1750, 351, 1287, 886, 528, 597,
	1295, 1206, 644, 1194, 644, 1165, 1164, 916, 529, 2144,
	1204, 2174, 1320, 1320, 1331, 1483, 1342, 755, 1624, 653,
	1213, 1302, 1354, 1355, 1356, 1290, 1207, 1571, 1208, 341,
	358, 915, 1622, 1949, 1149, 1950, 1162, 930, 1308, 1751,
	539, 837, 843, 590, 1397, 381, 350, 349, 754, 1145,
	113, 997, 1161, 1860, 2044, 2219, 1154, 1276, 1402, 360,
	1280, 2052, 1274, 525, 1277, 1952, 1154, 386, 897, 359,
	2235, 390, 1159, 382, 1955, 129, 129, 498, 838, 1550,
	1363, 2256, 129, 1953, 107, 956, 1946, 1688, 1380, 1160,
	541, 921, 1328, 1893, 1944, 844, 106, 826, 1948, 1878,
	383, 1216, 1223, 541, 697, 1854, 129, 609, 1050, 1050,
	1710, 1368, 129, 391, 1308, 1154, 1842, 1954, 2218, 385,
	2068, 559, 554, 378, 50, 773, 129, 129, 129, 526,
	1439, 51, 129, 52, 827, 2244, 129, 825, 2242, 1947,
	1692, 2220, 591, 1515, 129, 1973, 1004, 129, 1007, 931,
	1507, 1951, 1268, 129, 390, 499, 392, 54, 1513, 1695,
	1459, 2252, 1001, 1000, 561, 1470, 1434, 129, 2234, 1373,
	381, 1469, 129, 808, 129, 1690, 1404, 831, 760, 655,
	1688, 129, 1789, 1930, 1693, 1475, 2087, 352, 2264, 1381,
	774, 1375, 386, 538, 775, 129, 391, 2221, 382, 1691,
	2086, 2058, 1377, 1985, 1440, 1442, 562, 1430, 2134, 1251,
	823, 1410, 1447, 107, 2007, 1450, 1949, 2254, 1950, 1850,
	592, 1425, 932, 1378, 1073, 383, 1485, 353, 1510, 384,
	1664, 1491, 1660, 1692, 1405, 1376, 1427, 1472, 1511, 392,
	807, 542, 1516, 1497, 385, 1437, 1498, 1499, 1952, 563,
	1445, 593, 1695, 1453, 501, 1106, 354, 1955, 355, 898,
	1694, 1456, 1460, 1988, 1097, 2019, 1114, 1071, 1690, 1749,
	1987, 1478, 2255, 2181, 807, 1790, 1142, 1693, 1488, 1072,
	116, 1791, 1931, 387, 1138, 1069, 1838, 1496, 1536, 2263,
	112, 1975, 1691, 2257, 1501, 2059, 1637, 1265, 1636, 806,
	1521, 1420, 1984, 633, 1275, 2008, 1873, 1524, 118, 1249,
	1252, 492, 1263, 926, 924, 925, 917, 918, 919, 920,
	922, 923, 542, 1872, 808, 1540, 1541, 490, 632, 2006,
	2020, 773, 500, 806, 1951, 539, 1115, 798, 1508, 609,
	1506, 1942, 1248, 1815, 119, 1474, 641, 2056, 1512, 1692,
	1869, 129, 114, 1694, 384, 1514, 1522, 1685, 1311, 115,
	561, 122, 628, 2047, 1929, 627, 1589, 1019, 1695, 1986,
	1594, 2057, 129, 1726, 129, 129, 1533, 1602, 110, 1708,
	1557, 129, 1259, 1517, 1876, 129, 1480, 1019, 542, 129,
	1260, 1451, 1261, 1693, 1448, 1370, 1266, 1184, 848, 847,
	841, 129, 562, 836, 1630, 835, 1633, 834, 387, 833,
	832, 129, 129, 129, 829, 631, 622, 129, 1595, 376,
	31, 129, 129, 129, 129, 129, 1597, 1598, 1599, 375,
	30, 370, 27, 129, 1140, 129, 129, 1250, 1131, 978,
	1019, 839, 1310, 680, 2214, 563, 2178, 1621, 3, 129,
	1620, 1661, 1983, 1858, 1638, 374, 17, 1856, 1641, 1849,
	368, 13, 1643, 1625, 369, 16, 1408, 1400, 1166, 1694,
	371, 14, 367, 12, 129, 129, 373, 10, 1163, 1155,
	126, 126, 1717, 906, 342, 616, 366, 8, 1649, 619,
	1049, 344, 620, 1651, 905, 361, 1655, 903, 899, 1639,
	491, 1674, 1262, 496, 1676, 1656, 496, 365, 4, 1264,
	894, 1740, 609, 514, 1645, 1705, 2032, 1672, 542, 2246,
	1019, 1418, 810, 1714, 605, 1089, 1683, 1729, 2034, 1686,
	107, 129, 1745, 1746, 1747, 1706, 107, 1707, 1444, 1704,
	31, 1715, 1433, 1433, 1697, 2151, 1712, 515, 1443, 1441,
	30, 1733, 27, 1616, 1962, 1720, 1019, 1019, 601, 601,
	1050, 1719, 342, 1718, 377, 1019, 1019, 126, 618, 613,
	913, 914, 828, 1629, 2126, 1870, 17, 814, 1449, 1446,
	1050, 13, 1419, 852, 641, 16, 609, 1736, 1739, 2157,
	1367, 14, 1018, 12, 811, 1971, 606, 10, 1019, 869,
	1403, 1399, 1117, 1752, 1754, 1755, 1193, 8, 1168, 129,
	1066, 1761, 129, 885, 1766, 1011, 1763, 915, 1794, 2249,
	609, 889, 889, 493, 129, 1768, 1629, 561, 4, 1804,
	1834, 913, 914, 1050, 390, 129, 2262, 1796, 518, 519,
	1563, 1564, 913, 914, 1819, 1049, 1049, 1797, 2201, 1827,
	2160, 1845, 1826, 2016, 916, 818, 817, 1844, 1812, 1809,
	1756, 818, 1619, 1609, 1362, 1359, 1358, 1300, 129, 562,
	965, 129, 819, 1840, 1816, 1825, 391, 1839, 915, 1916,
	390, 2169, 129, 2031, 1748, 1640, 975, 1829, 973, 561,
	1841, 762, 523, 2066, 379, 1130, 830, 1885, 2012, 1881,
	2172, 1884, 1922, 1863, 1549, 1864, 2096, 1857, 2043, 1859,
	1309, 976, 563, 1050, 48, 1823, 674, 1943, 1817, 392,
	1389, 1388, 391, 1879, 1880, 1861, 393, 1076, 1888, 1019,
	696, 562, 546, 1896, 1871, 823, 1908, 1874, 1319, 1875,
	129, 1217, 1216, 1764, 756, 698, 1016, 1018, 1018, 1050,
	1050, 1216, 1769, 699, 1903, 1895, 1017, 1005, 1050, 1050,
	686, 1014, 651, 1197, 1273, 392, 1291, 1532, 969, 666,
	678, 1902, 677, 1288, 563, 757, 1052, 2017, 1486, 1899,
	1113, 1334, 1409, 1110, 1800, 1855, 530, 1560, 649, 629,
	1340, 1050, 1332, 1329, 342, 790, 871, 957, 1198, 783,
	636, 342, 514, 514, 618, 1492, 1366, 1051, 860, 129,
	1121, 1928, 604, 129, 129, 603, 1384, 781, 1070, 1374,
	561, 950, 949, 520, 2136, 772, 771, 1401, 129, 129,
	129, 1663, 1966, 2250, 2150, 1827, 1969, 129, 1826, 129,
	1852, 129, 129, 129, 1963, 2192, 129, 129, 1827, 117,
	1979, 1826, 1827, 129, 129, 1826, 2118, 129, 1956, 1176,
	2029, 1825, 562, 1015, 1982, 129, 1977, 1970, 1473, 68,
	1976, 1968, 129, 29, 1825, 1972, 1978, 28, 1825, 87,
	1199, 129, 86, 2015, 85, 641, 2014, 84, 641, 83,
	82, 81, 80, 79, 78, 77, 76, 2024, 2002, 75,
	74, 73, 72, 71, 2033, 563, 70, 511, 67, 2026,
	2042, 66, 65, 64, 2027, 26, 22, 21, 2035, 2003,
	2004, 20, 1050, 2009, 25, 129, 2025, 390, 129, 24,
	18, 1052, 1052, 15, 1019, 9, 129, 19, 11, 761,
	46, 2049, 45, 390, 2054, 44, 43, 42, 41, 514,
	7, 39, 38, 6, 129, 5, 103, 561, 100, 102,
	2071, 99, 1051, 1051, 129, 2070, 496, 342, 2072, 391,
	101, 514, 796, 514, 1827, 799, 1827, 1826, 104, 1826,
	96, 129, 97, 2069, 98, 391, 2084, 886, 95, 129,
	94, 1019, 35, 2074, 34, 129, 33, 2064, 2085, 562,
	1825, 32, 1825, 2083, 129, 129, 2, 2082, 1, 0,
	0, 0, 392, 2106, 0, 129, 2103, 0, 1015, 1015,
	2099, 2114, 0, 0, 2111, 0, 2079, 2113, 392, 2090,
	2091, 0, 0, 129, 0, 0, 2125, 129, 342, 342,
	855, 342, 563, 601, 0, 0, 0, 2140, 2138, 0,
	1019, 0, 0, 0, 342, 2102, 0, 2128, 0, 126,
	2145, 1334, 1334, 561, 2132, 2146, 0, 2143, 342, 2133,
	0, 0, 0, 129, 129, 342, 342, 342, 0, 892,
	0, 129, 0, 609, 2149, 0, 0, 542, 0, 0,
	0, 390, 129, 129, 2142, 0, 0, 1049, 0, 126,
	0, 0, 0, 0, 2158, 562, 2159, 0, 2162, 2148,
	2164, 2168, 2171, 0, 1421, 2161, 2165, 1049, 129, 0,
	2183, 0, 129, 0, 2184, 129, 0, 1050, 2189, 1334,
	1334, 1334, 390, 391, 1426, 641, 1428, 129, 0, 0,
	129, 0, 0, 2167, 609, 2185, 0, 2186, 563, 2194,
	0, 129, 641, 2198, 2175, 609, 2200, 2197, 129, 2191,
	2203, 1465, 2204, 0, 1827, 0, 2223, 1826, 2212, 0,
	1049, 0, 0, 0, 391, 1481, 392, 2089, 0, 2225,
	885, 2213, 2195, 2196, 1050, 0, 0, 2190, 0, 885,
	1825, 0, 2233, 0, 2232, 129, 1519, 1520, 0, 1018,
	0, 0, 0, 2243, 126, 2241, 0, 514, 0, 0,
	0, 2248, 0, 2247, 0, 0, 0, 392, 0, 1018,
	1563, 1564, 0, 0, 0, 0, 0, 0, 0, 2258,
	2260, 0, 496, 2261, 2259, 113, 0, 0, 0, 0,
	0, 0, 1104, 1050, 0, 0, 0, 0, 0, 0,
	1049, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1586, 1587, 1588, 0, 0, 514,
	0, 0, 1018, 514, 0, 126, 514, 514, 514, 514,
	514, 106, 0, 0, 0, 1141, 1049, 1049, 0, 514,
	514, 0, 0, 0, 0, 1049, 1049, 0, 0, 0,
	1334, 1334, 601, 0, 0, 618, 0, 0, 0, 50,
	0, 0, 0, 0, 342, 0, 51, 0, 52, 0,
	0, 1181, 0, 0, 0, 0, 0, 1569, 1049, 0,
	0, 0, 0, 0, 113, 342, 0, 1201, 1202, 0,
	342, 0, 54, 342, 0, 0, 514, 514, 0, 514,
	618, 0, 1018, 0, 0, 913, 914, 0, 0, 1334,
	1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
	1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 916, 1334,
	106, 0, 0, 1052, 0, 1579, 0, 0, 1018, 1018,
	0, 0, 0, 1642, 0, 0, 0, 1018, 1018, 0,
	0, 0, 915, 1052, 0, 0, 0, 0, 50, 1652,
	0, 0, 0, 0, 1051, 51, 0, 52, 0, 1657,
	0, 0, 0, 1563, 1564, 0, 0, 0, 0, 908,
	1018, 0, 0, 0, 1051, 1724, 1725, 0, 0, 0,
	0, 54, 0, 0, 1681, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1052, 1465, 1580, 1049,
	0, 0, 921, 0, 0, 116, 0, 0, 0, 0,
	1015, 0, 0, 0, 0, 112, 1578, 0, 0, 0,
	0, 0, 1199, 1465, 0, 0, 0, 1051, 0, 0,
	1015, 0, 0, 118, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
	1786, 1787, 1788, 0, 1792, 0, 0, 0, 0, 0,
	931, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	1569, 0, 0, 0, 0, 0, 1052, 114, 342, 1385,
	0, 0, 0, 1015, 115, 618, 0, 0, 0, 0,
	1572, 1573, 1565, 1566, 1567, 1568, 1570, 1571, 0, 0,
	0, 1018, 0, 110, 116, 0, 0, 1051, 0, 342,
	1563, 1564, 1052, 1052, 112, 1423, 0, 0, 0, 0,
	0, 1052, 1052, 0, 0, 0, 0, 0, 1579, 342,
	342, 342, 118, 932, 0, 1438, 0, 675, 61, 342,
	0, 0, 0, 1051, 1051, 0, 0, 342, 0, 0,
	342, 0, 1051, 1051, 1052, 0, 342, 0, 0, 0,
	0, 0, 0, 1015, 0, 0, 0, 0, 119, 0,
	342, 0, 0, 1563, 1564, 342, 114, 1490, 0, 0,
	0, 0, 0, 115, 342, 1051, 0, 0, 0, 0,
	61, 0, 0, 0, 0, 913, 914, 0, 1423, 1015,
	1015, 1580, 363, 0, 1049, 0, 0, 0, 1015, 1015,
	0, 0, 0, 0, 0, 0, 1465, 1569, 916, 1465,
	0, 0, 0, 0, 926, 924, 925, 917, 918, 919,
	920, 922, 923, 0, 913, 914, 0, 0, 0, 0,
	0, 1015, 915, 0, 0, 535, 0, 0, 543, 0,
	0, 0, 0, 0, 0, 0, 0, 916, 61, 0,
	0, 1049, 0, 1334, 0, 0, 1563, 1564, 0, 1581,
	1582, 1583, 0, 0, 0, 1579, 0, 0, 0, 0,
	1569, 915, 1906, 0, 0, 1052, 0, 0, 1334, 0,
	0, 0, 1574, 1572, 1573, 1565, 1566, 1567, 1568, 1570,
	1571, 0, 921, 0, 0, 0, 1018, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1051, 0, 0, 1578,
	1049, 0, 0, 0, 0, 0, 0, 913, 914, 0,
	933, 934, 935, 943, 944, 945, 0, 0, 1579, 0,
	0, 921, 0, 936, 0, 0, 0, 0, 1580, 0,
	916, 0, 0, 947, 1423, 0, 0, 0, 0, 0,
	931, 0, 0, 1018, 0, 0, 0, 0, 0, 0,
	0, 0, 1015, 1569, 915, 1104, 0, 1104, 1634, 0,
	930, 1334, 0, 0, 514, 0, 0, 0, 342, 1992,
	0, 0, 1648, 0, 0, 1998, 0, 0, 2046, 931,
	0, 1465, 1465, 0, 342, 1465, 0, 0, 0, 0,
	1584, 1580, 0, 0, 342, 1658, 1659, 0, 0, 0,
	1438, 0, 1018, 2061, 1665, 1666, 1668, 1670, 1671, 0,
	0, 1579, 0, 932, 921, 0, 1678, 0, 1680, 342,
	0, 1573, 1565, 1566, 1567, 1568, 1570, 1571, 0, 0,
	0, 0, 342, 940, 948, 0, 0, 0, 0, 0,
	657, 0, 759, 0, 0, 0, 0, 0, 0, 0,
	0, 946, 932, 0, 0, 0, 0, 342, 342, 0,
	0, 0, 0, 0, 2062, 0, 938, 0, 0, 0,
	1052, 0, 931, 0, 0, 792, 793, 0, 0, 0,
	0, 543, 2081, 0, 1580, 1565, 1566, 1567, 1568, 1570,
	1571, 0, 0, 0, 0, 0, 2127, 937, 0, 0,
	0, 1051, 0, 0, 0, 0, 925, 917, 918, 919,
	920, 922, 923, 0, 1758, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 917, 918, 919, 920,
	922, 923, 0, 864, 864, 0, 0, 1015, 1051, 0,
	0, 941, 873, 0, 0, 0, 0, 0, 0, 0,
	1575, 1576, 1577, 0, 0, 1574, 1572, 1573, 1565, 1566,
	1567, 1568, 1570, 1571, 0, 0, 1052, 0, 0, 0,
	0, 0, 1438, 0, 0, 1104, 1822, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1836, 0, 951,
	952, 953, 954, 955, 1015, 0, 0, 1051, 1846, 963,
	0, 0, 0, 0, 0, 0, 0, 0, 939, 970,
	0, 927, 928, 929, 942, 0, 926, 924, 925, 917,
	918, 919, 920, 922, 923, 0, 0, 0, 0, 0,
	0, 342, 1605, 2188, 342, 0, 0, 0, 0, 0,
	0, 0, 535, 0, 0, 1892, 0, 0, 0, 0,
	0, 0, 0, 1015, 0, 0, 0, 0, 0, 1199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1923, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1111, 0, 1116, 0,
	0, 0, 0, 0, 1123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1822, 0, 0, 960, 0, 962, 0, 0,
	0, 0, 618, 0, 966, 1822, 618, 1385, 0, 1822,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1980, 1981, 1438, 0, 0, 0, 0, 0, 0,
	1990, 0, 1991, 0, 342, 1993, 1994, 0, 0, 1997,
	342, 0, 0, 0, 0, 0, 342, 342, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 1892, 0,
	0, 0, 0, 0, 0, 2022, 0, 0, 0, 0,
	0, 2028, 0, 0, 618, 0, 0, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238,
	1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 0,
	1253, 0, 1255, 1256, 1257, 1258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2053, 1281,
	0, 2055, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 1822, 0, 1822, 0, 0, 0, 535, 0, 0,
	535, 535, 1316, 1317, 0, 0, 1330, 342, 1341, 1343,
	1348, 1351, 1352, 1353, 0, 0, 0, 1438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 2098, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 0, 0, 0, 0, 1892, 0,
	0, 0, 0, 0, 0, 0, 0, 618, 1892, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2123, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 2131, 0, 913, 914,
	1104, 933, 934, 935, 943, 944, 945, 61, 0, 0,
	0, 0, 0, 0, 936, 0, 0, 0, 0, 0,
	0, 916, 0, 0, 947, 0, 0, 913, 914, 0,
	933, 934, 935, 943, 944, 945, 2152, 2153, 0, 0,
	0, 0, 0, 936, 618, 915, 1271, 0, 0, 0,
	916, 930, 0, 947, 0, 1892, 618, 0, 0, 0,
	0, 0, 0, 913, 914, 0, 933, 934, 935, 943,
	944, 945, 0, 0, 915, 0, 0, 0, 0, 936,
	930, 2182, 0, 0, 0, 618, 916, 0, 342, 947,
	0, 1822, 0, 0, 0, 0, 0, 0, 0, 0,
	2098, 864, 0, 1892, 0, 921, 0, 873, 0, 61,
	915, 0, 0, 0, 342, 0, 930, 0, 1484, 0,
	0, 618, 0, 0, 940, 948, 0, 0, 0, 0,
	0, 0, 0, 0, 921, 0, 0, 0, 0, 0,
	0, 1500, 946, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 948, 0, 0, 938, 2240, 0,
	0, 0, 0, 931, 0, 0, 0, 0, 0, 0,
	921, 946, 0, 0, 0, 0, 0, 0, 1503, 1504,
	0, 0, 0, 0, 1509, 0, 938, 0, 937, 940,
	948, 0, 931, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 1528, 937, 0, 0,
	0, 0, 938, 1535, 0, 0, 1539, 0, 931, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 61, 0,
	0, 0, 1553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 941, 937, 0, 61, 0, 0, 61, 0,
	0, 0, 0, 0, 0, 932, 0, 0, 963, 0,
	1466, 0, 0, 0, 1348, 1348, 1348, 0, 0, 0,
	0, 941, 0, 0, 0, 0, 0, 0, 0, 543,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 932, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 941, 0, 939,
	0, 0, 927, 928, 929, 942, 0, 926, 924, 925,
	917, 918, 919, 920, 922, 923, 0, 0, 0, 0,
	0, 1650, 0, 1604, 0, 0, 1123, 0, 939, 0,
	1271, 927, 928, 929, 942, 0, 926, 924, 925, 917,
	918, 919, 920, 922, 923, 0, 0, 0, 0, 0,
	962, 0, 1603, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 927, 928, 929,
	942, 0, 926, 924, 925, 917, 918, 919, 920, 922,
	923, 0, 0, 0, 0, 0, 0, 0, 1555, 0,
	0, 0, 0, 864, 0, 913, 914, 0, 933, 934,
	935, 943, 944, 945, 0, 873, 0, 0, 0, 0,
	0, 936, 1722, 0, 0, 1723, 962, 0, 916, 0,
	0, 947, 0, 0, 0, 1563, 1564, 1728, 1581, 1582,
	1583, 0, 0, 0, 0, 0, 1737, 0, 0, 0,
	0, 1905, 915, 0, 1741, 0, 0, 1500, 930, 0,
	0, 0, 0, 0, 0, 0, 913, 914, 0, 933,
	934, 935, 943, 944, 945, 0, 0, 1765, 0, 0,
	0, 1767, 936, 0, 0, 0, 0, 61, 1578, 916,
	0, 61, 947, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 915, 1798, 1799, 0, 0, 0, 930,
	0, 0, 0, 1805, 1806, 1807, 0, 0, 0, 0,
	0, 940, 948, 0, 61, 0, 0, 61, 0, 0,
	0, 0, 1569, 0, 0, 61, 0, 0, 0, 946,
	0, 61, 0, 0, 0, 1830, 1703, 0, 0, 0,
	0, 0, 0, 0, 938, 0, 0, 0, 913, 914,
	931, 0, 0, 921, 943, 944, 945, 0, 0, 1584,
	0, 0, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 916, 940, 948, 947, 937, 0, 0, 0, 0,
	1579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 915, 0, 0, 0, 0,
	0, 930, 0, 0, 0, 938, 0, 0, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 1907, 0, 0, 0,
	1910, 1911, 0, 0, 0, 1913, 937, 0, 0, 941,
	0, 0, 1915, 0, 1917, 0, 0, 0, 0, 0,
	0, 0, 0, 1580, 0, 921, 0, 0, 0, 0,
	1924, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 948, 0, 0, 0, 0,
	0, 0, 913, 914, 932, 933, 934, 935, 943, 944,
	945, 0, 0, 1933, 0, 0, 0, 0, 936, 0,
	941, 0, 0, 0, 0, 916, 939, 938, 947, 927,
	928, 929, 942, 931, 926, 924, 925, 917, 918, 919,
	920, 922, 923, 0, 1964, 0, 0, 2179, 0, 915,
	0, 0, 0, 0, 0, 930, 0, 0, 0, 1575,
	1576, 1577, 0, 0, 1574, 1572, 1573, 1565, 1566, 1567,
	1568, 1570, 1571, 0, 0, 1466, 0, 0, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 939, 0, 2001,
	927, 928, 929, 942, 0, 926, 924, 925, 917, 918,
	919, 920, 922, 923, 61, 0, 932, 0, 2130, 921,
	0, 913, 914, 0, 933, 934, 935, 943, 944, 945,
	0, 0, 941, 0, 0, 2038, 2039, 936, 940, 948,
	0, 0, 0, 0, 916, 0, 0, 947, 0, 0,
	0, 0, 0, 0, 0, 0, 946, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2051, 0, 915, 0,
	0, 938, 0, 0, 930, 0, 0, 931, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 939,
	0, 0, 937, 0, 0, 942, 0, 926, 924, 925,
	917, 918, 919, 920, 922, 923, 0, 2088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 0,
	0, 0, 0, 0, 0, 0, 0, 2101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 940, 948, 0,
	932, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 946, 941, 873, 0, 0,
	1466, 1466, 0, 0, 1466, 0, 0, 0, 0, 0,
	938, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	2135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2036, 0, 0, 0, 0, 0, 0, 0,
	0, 937, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 939, 0, 0, 927, 928, 929, 942,
	0, 926, 924, 925, 917, 918, 919, 920, 922, 923,
	0, 0, 0, 0, 2073, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 0, 0, 0, 941, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2211, 2211, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2227, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 0, 0, 2211, 0,
	0, 0, 939, 0, 0, 927, 928, 929, 942, 0,
	926, 924, 925, 917, 918, 919, 920, 922, 923, 0,
	0, 0, 0, 2050, 389, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2211,
	131, 132, 408, 133, 409, 410, 411, 412, 284, 413,
	414, 415, 416, 134, 135, 136, 285, 286, 287, 288,
	137, 289, 290, 417, 138, 291, 292, 139, 140, 418,
	419, 293, 294, 295, 420, 141, 296, 421, 394, 422,
	142, 143, 144, 0, 145, 423, 146, 147, 148, 424,
	395, 149, 150, 425, 426, 428, 427, 429, 430, 431,
	151, 152, 343, 153, 297, 154, 298, 299, 432, 155,
	433, 156, 434, 157, 435, 436, 158, 159, 437, 160,
	438, 0, 439, 300, 161, 162, 163, 301, 302, 440,
	441, 442, 164, 165, 303, 304, 305, 0, 166, 443,
	167, 444, 445, 396, 446, 168, 306, 447, 307, 448,
	169, 170, 171, 172, 308, 309, 398, 449, 176, 450,
	173, 451, 397, 174, 310, 175, 311, 312, 313, 314,
	315, 452, 316, 453, 399, 177, 178, 179, 400, 180,
	181, 182, 454, 184, 183, 455, 317, 401, 185, 402,
	456, 186, 457, 458, 187, 0, 188, 189, 190, 192,
	318, 191, 403, 193, 194, 196, 195, 459, 460, 461,
	319, 197, 320, 198, 199, 462, 200, 463, 464, 201,
	465, 466, 202, 321, 404, 203, 405, 322, 204, 205,
	206, 207, 208, 467, 209, 323, 210, 324, 211, 468,
	212, 213, 214, 215, 216, 325, 217, 218, 469, 219,
	220, 221, 222, 223, 225, 226, 224, 227, 228, 229,
	230, 470, 231, 406, 232, 233, 326, 234, 0, 238,
	239, 240, 241, 471, 243, 327, 242, 244, 245, 472,
	246, 235, 236, 247, 407, 248, 328, 329, 249, 473,
	255, 250, 251, 237, 252, 254, 330, 253, 331, 474,
	256, 475, 257, 258, 259, 260, 261, 262, 263, 476,
	332, 333, 334, 477, 478, 264, 265, 335, 336, 479,
	266, 267, 268, 269, 480, 481, 270, 271, 272, 273,
	482, 274, 483, 337, 275, 276, 277, 338, 339, 484,
	485, 278, 486, 487, 488, 489, 279, 280, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 389, 0, 0, 0, 0, 0, 0, 1886,
	0, 0, 0, 0, 0, 0, 0, 1887, 131, 132,
	408, 133, 409, 410, 411, 412, 284, 413, 414, 415,
	416, 134, 135, 136, 285, 286, 287, 288, 137, 289,
	290, 417, 138, 291, 292, 139, 140, 418, 419, 293,
	294, 295, 420, 141, 296, 421, 394, 422, 142, 143,
	144, 0, 145, 423, 146, 147, 148, 424, 395, 149,
	150, 425, 426, 428, 427, 429, 430, 431, 151, 152,
	343, 153, 297, 154, 298, 299, 432, 155, 433, 156,
	434, 157, 435, 436, 158, 159, 437, 160, 438, 0,
	439, 300, 161, 162, 163, 301, 302, 440, 441, 442,
	164, 165, 303, 304, 305, 0, 166, 443, 167, 444,
	445, 396, 446, 168, 306, 447, 307, 448, 169, 170,
	171, 172, 308, 309, 398, 449, 176, 450, 173, 451,
	397, 174, 310, 175, 311, 312, 313, 314, 315, 452,
	316, 453, 399, 177, 178, 179, 400, 180, 181, 182,
	454, 184, 183, 455, 317, 401, 185, 402, 456, 186,
	457, 458, 187, 0, 188, 189, 190, 192, 318, 191,
	403, 193, 194, 196, 195, 459, 460, 461, 319, 197,
	320, 198, 199, 462, 200, 463, 464, 201, 465, 466,
	202, 321, 404, 203, 405, 322, 204, 205, 206, 207,
	208, 467, 209, 323, 210, 324, 211, 468, 212, 213,
	214, 215, 216, 325, 217, 218, 469, 219, 220, 221,
	222, 223, 225, 226, 224, 227, 228, 229, 230, 470,
	231, 406, 232, 233, 326, 234, 0, 238, 239, 240,
	241, 471, 243, 327, 242, 244, 245, 472, 246, 235,
	236, 247, 407, 248, 328, 329, 249, 473, 255, 250,
	251, 237, 252, 254, 330, 253, 331, 474, 256, 475,
	257, 258, 259, 260, 261, 262, 263, 476, 332, 333,
	334, 477, 478, 264, 265, 335, 336, 479, 266, 267,
	268, 269, 480, 481, 270, 271, 272, 273, 482, 274,
	483, 337, 275, 276, 277, 338, 339, 484, 485, 278,
	486, 487, 488, 489, 279, 280, 281, 282, 283, 0,
	0, 0, 389, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2163, 131, 132,
	408, 133, 409, 410, 411, 412, 284, 413, 414, 415,
	416, 134, 135, 136, 285, 286, 287, 288, 137, 289,
	290, 417, 138, 291, 292, 139, 140, 418, 419, 293,
	294, 295, 420, 141, 296, 421, 394, 422, 142, 143,
	144, 0, 145, 423, 146, 147, 148, 424, 395, 149,
	150, 425, 426, 428, 427, 429, 430, 431, 151, 152,
	343, 153, 297, 154, 298, 299, 432, 155, 433, 156,
	434, 157, 435, 436, 158, 159, 437, 160, 438, 0,
	439, 300, 161, 162, 163, 301, 302, 440, 441, 442,
	164, 165, 303, 304, 305, 0, 166, 443, 167, 444,
	445, 396, 446, 168, 306, 447, 307, 448, 169, 170,
	171, 172, 308, 309, 398, 449, 176, 450, 173, 451,
	397, 174, 310, 175, 311, 312, 313, 314, 315, 452,
	316, 453, 399, 177, 178, 179, 400, 180, 181, 182,
	454, 184, 183, 455, 317, 401, 185, 402, 456, 186,
	457, 458, 187, 0, 188, 189, 190, 192, 318, 191,
	403, 193, 194, 196, 195, 459, 460, 461, 319, 197,
	320, 198, 199, 462, 200, 463, 464, 201, 465, 466,
	202, 321, 404, 203, 405, 322, 204, 205, 206, 207,
	208, 467, 209, 323, 210, 324, 211, 468, 212, 213,
	214, 215, 216, 325, 217, 218, 469, 219, 220, 221,
	222, 223, 225, 226, 224, 227, 228, 229, 230, 470,
	231, 406, 232, 233, 326, 234, 0, 238, 239, 240,
	241, 471, 243, 327, 242, 244, 245, 472, 246, 235,
	236, 247, 407, 248, 328, 329, 249, 473, 255, 250,
	251, 237, 252, 254, 330, 253, 331, 474, 256, 475,
	257, 258, 259, 260, 261, 262, 263, 476, 332, 333,
	334, 477, 478, 264, 265, 335, 336, 479, 266, 267,
	268, 269, 480, 481, 270, 271, 272, 273, 482, 274,
	483, 337, 275, 276, 277, 338, 339, 484, 485, 278,
	486, 487, 488, 489, 279, 280, 281, 282, 283, 389,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 0, 0, 131, 132, 408, 133, 409,
	410, 411, 412, 284, 413, 414, 415, 416, 134, 135,
	136, 285, 286, 287, 288, 137, 289, 290, 417, 138,
	291, 292, 139, 140, 418, 419, 293, 294, 295, 420,
	141, 296, 421, 394, 422, 142, 143, 144, 0, 145,
	423, 146, 147, 148, 424, 395, 149, 150, 425, 426,
	428, 427, 429, 430, 431, 151, 152, 343, 153, 297,
	154, 298, 299, 432, 155, 433, 156, 434, 157, 435,
	436, 158, 159, 437, 160, 438, 0, 439, 300, 161,
	162, 163, 301, 302, 440, 441, 442, 164, 165, 303,
	304, 305, 0, 166, 443, 167, 444, 445, 396, 446,
	168, 306, 447, 307, 448, 169, 170, 171, 172, 308,
	309, 398, 449, 176, 450, 173, 451, 397, 174, 310,
	175, 311, 312, 313, 314, 315, 452, 316, 453, 399,
	177, 178, 179, 400, 180, 181, 182, 454, 184, 183,
	455, 317, 401, 185, 402, 456, 186, 457, 458, 187,
	0, 188, 189, 190, 192, 318, 191, 403, 193, 194,
	196, 195, 459, 460, 461, 319, 197, 320, 198, 199,
	462, 200, 463, 464, 201, 465, 466, 202, 321, 404,
	203, 405, 322, 204, 205, 206, 207, 208, 467, 209,
	323, 210, 324, 211, 468, 212, 213, 214, 215, 216,
	325, 217, 218, 469, 219, 220, 221, 222, 223, 225,
	226, 224, 227, 228, 229, 230, 470, 231, 406, 232,
	233, 326, 234, 0, 238, 239, 240, 241, 471, 243,
	327, 242, 244, 245, 472, 246, 235, 236, 247, 407,
	248, 328, 329, 249, 473, 255, 250, 251, 237, 252,
	254, 330, 253, 331, 474, 256, 475, 257, 258, 259,
	260, 261, 262, 263, 476, 332, 333, 334, 477, 478,
	264, 265, 335, 336, 479, 266, 267, 268, 269, 480,
	481, 270, 271, 272, 273, 482, 274, 483, 337, 275,
	276, 277, 338, 339, 484, 485, 278, 486, 487, 488,
	489, 279, 280, 281, 282, 283, 694, 683, 684, 681,
	682, 673, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 132, 0, 133, 0, 0, 0, 0,
	711, 676, 0, 0, 0, 134, 135, 136, 285, 726,
	287, 727, 137, 728, 729, 0, 138, 291, 292, 139,
	140, 679, 710, 730, 731, 295, 0, 141, 722, 0,
	702, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	148, 0, 395, 149, 150, 0, 703, 704, 706, 0,
	705, 707, 151, 152, 343, 153, 732, 154, 733, 734,
	874, 155, 0, 156, 0, 157, 0, 0, 725, 159,
	0, 160, 0, 0, 0, 667, 161, 162, 163, 712,
	713, 690, 0, 0, 164, 165, 735, 736, 737, 0,
	166, 0, 167, 0, 0, 396, 0, 168, 723, 0,
	307, 0, 169, 170, 171, 172, 719, 721, 398, 0,
	176, 0, 173, 0, 397, 174, 738, 175, 739, 740,
	741, 742, 743, 0, 701, 0, 399, 177, 178, 179,
	400, 180, 181, 182, 0, 184, 183, 0, 724, 401,
	185, 402, 0, 186, 0, 0, 187, 0, 188, 189,
	190, 192, 318, 191, 403, 193, 194, 196, 195, 662,
	0, 691, 720, 197, 744, 198, 199, 0, 200, 0,
	0, 201, 0, 0, 202, 321, 404, 203, 405, 714,
	204, 205, 206, 207, 208, 0, 209, 715, 210, 324,
	211, 0, 212, 213, 214, 215, 216, 745, 217, 218,
	0, 219, 220, 221, 222, 223, 225, 226, 224, 227,
	228, 229, 230, 0, 231, 406, 232, 233, 668, 234,
	0, 238, 239, 240, 241, 116, 243, 327, 242, 244,
	245, 708, 246, 235, 236, 247, 407, 248, 746, 329,
	249, 0, 255, 250, 251, 237, 252, 254, 747, 253,
	716, 0, 256, 118, 257, 258, 259, 260, 261, 262,
	263, 0, 332, 748, 749, 0, 0, 264, 265, 717,
	718, 689, 266, 267, 268, 269, 0, 0, 270, 271,
	272, 273, 709, 274, 0, 337, 275, 276, 277, 654,
	750, 0, 0, 278, 0, 0, 0, 114, 279, 280,
	281, 282, 283, 663, 115, 0, 0, 0, 0, 661,
	0, 0, 0, 0, 659, 660, 694, 683, 684, 681,
	682, 673, 0, 669, 0, 0, 0, 0, 672, 0,
	0, 0, 131, 132, 1297, 133, 0, 0, 0, 0,
	711, 676, 0, 0, 0, 134, 135, 136, 285, 726,
	287, 727, 137, 728, 729, 0, 138, 291, 292, 139,
	140, 679, 710, 730, 731, 295, 0, 141, 722, 0,
	702, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	148, 0, 395, 149, 150, 0, 703, 704, 706, 0,
	705, 707, 151, 152, 343, 153, 732, 154, 733, 734,
	0, 155, 0, 156, 0, 157, 1298, 0, 725, 159,
	0, 160, 0, 0, 0, 667, 161, 162, 163, 712,
	713, 690, 0, 0, 164, 165, 735, 736, 737, 0,
	166, 0, 167, 0, 0, 396, 0, 168, 723, 0,
	307, 0, 169, 170, 171, 172, 719, 721, 398, 0,
	176, 0, 173, 0, 397, 174, 738, 175, 739, 740,
	741, 742, 743, 0, 701, 0, 399, 177, 178, 179,
	400, 180, 181, 182, 0, 184, 183, 0, 724, 401,
	185, 402, 0, 186, 0, 0, 187, 0, 188, 189,
	190, 192, 318, 191, 403, 193, 194, 196, 195, 662,
	0, 691, 720, 197, 744, 198, 199, 0, 200, 0,
	0, 201, 0, 0, 202, 321, 404, 203, 405, 714,
	204, 205, 206, 207, 208, 0, 209, 715, 210, 324,
	211, 0, 212, 213, 214, 215, 216, 745, 217, 218,
	0, 219, 220, 221, 222, 223, 225, 226, 224, 227,
	228, 229, 230, 0, 231, 406, 232, 233, 668, 234,
	0, 238, 239, 240, 241, 0, 243, 327, 242, 244,
	245, 708, 246, 235, 236, 247, 407, 248, 746, 329,
	249, 0, 255, 250, 251, 237, 252, 254, 747, 253,
	716, 0, 256, 0, 257, 258, 259, 260, 261, 262,
	263, 0, 332, 748, 749, 0, 0, 264, 265, 717,
	718, 689, 266, 267, 268, 269, 0, 0, 270, 271,
	272, 273, 709, 274, 0, 337, 275, 276, 277, 338,
	750, 1296, 0, 278, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 663, 0, 0, 0, 0, 0, 661,
	0, 0, 0, 0, 659, 660, 1299, 694, 683, 684,
	681, 682, 673, 669, 1294, 0, 0, 0, 672, 0,
	0, 0, 0, 131, 132, 0, 133, 0, 0, 0,
	0, 711, 676, 0, 0, 0, 134, 135, 136, 285,
	726, 287, 727, 137, 728, 729, 0, 138, 291, 292,
	139, 140, 679, 710, 730, 731, 295, 0, 141, 722,
	0, 702, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 148, 0, 395, 149, 150, 0, 703, 704, 706,
	0, 705, 707, 151, 152, 343, 153, 732, 154, 733,
	734, 0, 155, 0, 156, 0, 157, 0, 0, 725,
	159, 0, 160, 0, 0, 0, 667, 161, 162, 163,
	712, 713, 690, 0, 0, 164, 165, 735, 736, 737,
	0, 166, 0, 167, 0, 0, 396, 0, 168, 723,
	0, 307, 0, 169, 170, 171, 172, 719, 721, 398,
	0, 176, 0, 173, 0, 397, 174, 738, 175, 739,
	740, 741, 742, 743, 0, 701, 0, 399, 177, 178,
	179, 400, 180, 181, 182, 0, 184, 183, 0, 724,
	401, 185, 402, 0, 186, 0, 0, 187, 0, 188,
	189, 190, 192, 318, 191, 403, 193, 194, 196, 195,
	662, 0, 691, 720, 197, 744, 198, 199, 0, 200,
	0, 0, 201, 0, 0, 202, 321, 404, 203, 405,
	714, 204, 205, 206, 207, 208, 0, 209, 715, 210,
	324, 211, 0, 212, 213, 214, 215, 216, 745, 217,
	218, 0, 219, 220, 221, 222, 223, 225, 226, 224,
	227, 228, 229, 230, 0, 231, 406, 232, 233, 668,
	234, 0, 238, 239, 240, 241, 116, 243, 327, 242,
	244, 245, 708, 246, 235, 236, 247, 407, 248, 746,
	329, 249, 0, 255, 250, 251, 237, 252, 254, 747,
	253, 716, 0, 256, 118, 257, 258, 259, 260, 261,
	262, 263, 0, 332, 748, 749, 0, 0, 264, 265,
	717, 718, 689, 266, 267, 268, 269, 0, 0, 270,
	271, 272, 273, 709, 274, 0, 337, 275, 276, 277,
	654, 750, 0, 0, 278, 0, 0, 0, 114, 279,
	280, 281, 282, 283, 663, 115, 0, 0, 0, 0,
	661, 0, 0, 0, 0, 659, 660, 694, 683, 684,
	681, 682, 673, 0, 669, 0, 0, 0, 0, 672,
	0, 0, 0, 131, 132, 0, 133, 0, 0, 0,
	0, 711, 676, 0, 0, 0, 134, 135, 136, 285,
	726, 287, 727, 137, 728, 729, 1344, 138, 291, 292,
	139, 140, 679, 710, 730, 731, 295, 0, 141, 722,
	0, 702, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 148, 0, 395, 149, 150, 0, 703, 704, 706,
	0, 705, 707, 151, 152, 343, 153, 732, 154, 733,
	734, 0, 155, 0, 156, 0, 157, 0, 0, 725,
	159, 0, 160, 0, 0, 0, 667, 161, 162, 163,
	712, 713, 690, 0, 0, 164, 165, 735, 736, 737,
	0, 166, 0, 167, 0, 1349, 396, 0, 168, 723,
	0, 307, 0, 169, 170, 171, 172, 719, 721, 398,
	0, 176, 0, 173, 0, 397, 174, 738, 175, 739,
	740, 741, 742, 743, 0, 701, 0, 399, 177, 178,
	179, 400, 180, 181, 182, 0, 184, 183, 1345, 724,
	401, 185, 402, 0, 186, 0, 0, 187, 0, 188,
	189, 190, 192, 318, 191, 403, 193, 194, 196, 195,
	662, 0, 691, 720, 197, 744, 198, 199, 0, 200,
	0, 0, 201, 0, 0, 202, 321, 404, 203, 405,
	714, 204, 205, 206, 207, 208, 0, 209, 715, 210,
	324, 211, 0, 212, 213, 214, 215, 216, 745, 217,
	218, 0, 219, 220, 221, 222, 223, 225, 226, 224,
	227, 228, 229, 230, 0, 231, 406, 232, 233, 668,
	234, 0, 238, 239, 240, 241, 0, 243, 327, 242,
	244, 245, 708, 246, 235, 236, 247, 407, 248, 746,
	329, 249, 0, 255, 250, 251, 237, 252, 254, 747,
	253, 716, 0, 256, 0, 257, 258, 259, 260, 261,
	262, 263, 0, 332, 748, 749, 0, 1346, 264, 265,
	717, 718, 689, 266, 267, 268, 269, 0, 0, 270,
	271, 272, 273, 709, 274, 0, 337, 275, 276, 277,
	338, 750, 0, 0, 278, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 663, 0, 0, 0, 0, 0,
	661, 0, 0, 0, 0, 659, 660, 694, 683, 684,
	681, 682, 673, 0, 669, 0, 0, 0, 0, 672,
	0, 0, 0, 131, 132, 0, 133, 0, 0, 0,
	0, 711, 676, 0, 0, 0, 134, 135, 136, 285,
	726, 287, 727, 137, 728, 729, 0, 138, 291, 292,
	139, 140, 679, 710, 730, 731, 295, 0, 141, 722,
	0, 702, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 148, 0, 395, 149, 150, 0, 703, 704, 706,
	0, 705, 707, 151, 152, 343, 153, 732, 154, 733,
	734, 0, 155, 0, 156, 0, 157, 0, 0, 725,
	159, 0, 160, 0, 0, 0, 667, 161, 162, 163,
	712, 713, 690, 0, 0, 164, 165, 735, 736, 737,
	0, 166, 0, 167, 0, 0, 396, 0, 168, 723,
	0, 307, 0, 169, 170, 171, 172, 719, 721, 398,
	0, 176, 0, 173, 0, 397, 174, 738, 175, 739,
	740, 741, 742, 743, 0, 701, 0, 399, 177, 178,
	179, 400, 180, 181, 182, 0, 184, 183, 0, 724,
	401, 185, 402, 0, 186, 0, 0, 187, 0, 188,
	189, 190, 192, 318, 191, 403, 193, 194, 196, 195,
	662, 1713, 691, 720, 197, 744, 198, 199, 0, 200,
	0, 0, 201, 0, 0, 202, 321, 404, 203, 405,
	714, 204, 205, 206, 207, 208, 0, 209, 715, 210,
	324, 211, 0, 212, 213, 214, 215, 216, 745, 217,
	218, 0, 219, 220, 221, 222, 223, 225, 226, 224,
	227, 228, 229, 230, 0, 231, 406, 232, 233, 668,
	234, 0, 238, 239, 240, 241, 0, 243, 327, 242,
	244, 245, 708, 246, 235, 236, 247, 407, 248, 746,
	329, 249, 0, 255, 250, 251, 237, 252, 254, 747,
	253, 716, 0, 256, 0, 257, 258, 259, 260, 261,
	262, 263, 0, 332, 748, 749, 0, 0, 264, 265,
	717, 718, 689, 266, 267, 268, 269, 0, 0, 270,
	271, 272, 273, 709, 274, 0, 337, 275, 276, 277,
	338, 750, 0, 0, 278, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 663, 0, 0, 0, 0, 0,
	661, 0, 0, 0, 0, 659, 660, 865, 694, 683,
	684, 681, 682, 673, 669, 0, 0, 0, 0, 672,
	0, 0, 0, 0, 131, 132, 0, 133, 0, 0,
	0, 0, 711, 676, 0, 0, 0, 134, 135, 136,
	285, 726, 287, 727, 137, 728, 729, 0, 138, 291,
	292, 139, 140, 679, 710, 730, 731, 295, 0, 141,
	722, 0, 702, 0, 142, 143, 144, 0, 145, 0,
	146, 147, 148, 0, 395, 149, 150, 0, 703, 704,
	706, 0, 705, 707, 151, 152, 343, 153, 732, 154,
	733, 734, 0, 155, 0, 156, 0, 157, 0, 0,
	725, 159, 0, 160, 0, 0, 0, 667, 161, 162,
	163, 712, 713, 690, 0, 0, 164, 165, 735, 736,
	737, 0, 166, 0, 167, 0, 0, 396, 0, 168,
	723, 0, 307, 0, 169, 170, 171, 172, 719, 721,
	398, 0, 176, 1125, 173, 0, 397, 174, 738, 175,
	739, 740, 741, 742, 743, 0, 701, 0, 399, 177,
	178, 179, 400, 180, 181, 182, 0, 184, 183, 0,
	724, 401, 185, 402, 0, 186, 0, 0, 187, 0,
	188, 189, 190, 192, 318, 191, 403, 193, 194, 196,
	195, 662, 0, 691, 720, 197, 744, 198, 199, 0,
	200, 0, 0, 201, 0, 0, 202, 321, 404, 203,
	405, 714, 204, 205, 206, 207, 208, 0, 209, 715,
	210, 324, 211, 1124, 212, 213, 214, 215, 216, 745,
	217, 218, 0, 219, 220, 221, 222, 223, 225, 226,
	224, 227, 228, 229, 230, 0, 231, 406, 232, 233,
	668, 234, 0, 238, 239, 240, 241, 0, 243, 327,
	242, 244, 245, 708, 246, 235, 236, 247, 407, 248,
	746, 329, 249, 0, 255, 250, 251, 237, 252, 254,
	747, 253, 716, 0, 256, 0, 257, 258, 259, 260,
	261, 262, 263, 0, 332, 748, 749, 0, 0, 264,
	265, 717, 718, 689, 266, 267, 268, 269, 0, 0,
	270, 271, 272, 273, 709, 274, 0, 337, 275, 276,
	277, 338, 750, 0, 0, 278, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 663, 0, 0, 0, 0,
	0, 661, 0, 0, 0, 0, 659, 660, 694, 683,
	684, 681, 682, 673, 0, 669, 0, 0, 0, 0,
	672, 0, 0, 0, 131, 132, 0, 133, 0, 0,
	0, 0, 711, 676, 0, 0, 0, 134, 135, 136,
	285, 726, 287, 727, 137, 728, 729, 0, 138, 291,
	292, 139, 140, 679, 710, 730, 731, 295, 0, 141,
	722, 0, 702, 0, 142, 143, 144, 0, 145, 0,
	146, 147, 148, 0, 395, 149, 150, 0, 703, 704,
	706, 0, 705, 707, 151, 152, 343, 153, 732, 154,
	733, 734, 0, 155, 0, 156, 0, 157, 0, 0,
	725, 159, 0, 160, 0, 0, 0, 667, 161, 162,
	163, 712, 713, 690, 0, 0, 164, 165, 735, 736,
	737, 0, 166, 0, 167, 0, 0, 396, 0, 168,
	723, 0, 307, 0, 169, 170, 171, 172, 719, 721,
	398, 0, 176, 0, 173, 0, 397, 174, 738, 175,
	739, 740, 741, 742, 743, 0, 701, 0, 399, 177,
	178, 179, 400, 180, 181, 182, 0, 184, 183, 0,
	724, 401, 185, 402, 0, 186, 0, 0, 187, 0,
	188, 189, 190, 192, 318, 191, 403, 193, 194, 196,
	195, 662, 0, 691, 720, 197, 744, 198, 199, 0,
	200, 0, 0, 201, 0, 0, 202, 321, 404, 203,
	405, 714, 204, 205, 206, 207, 208, 0, 209, 715,
	210, 324, 211, 0, 212, 213, 214, 215, 216, 745,
	217, 218, 0, 219, 220, 221, 222, 223, 225, 226,
	224, 227, 228, 229, 230, 0, 231, 406, 232, 233,
	668, 234, 0, 238, 239, 240, 241, 0, 243, 327,
	242, 244, 245, 708, 246, 235, 236, 247, 407, 248,
	746, 329, 249, 0, 255, 250, 251, 237, 252, 254,
	747, 253, 716, 0, 256, 0, 257, 258, 259, 260,
	261, 262, 263, 0, 332, 748, 749, 0, 0, 264,
	265, 717, 718, 689, 266, 267, 268, 269, 0, 0,
	270, 271, 272, 273, 709, 274, 0, 337, 275, 276,
	277, 338, 750, 0, 0, 278, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 663, 0, 0, 0, 0,
	0, 661, 0, 0, 0, 0, 659, 660, 0, 0,
	0, 0, 0, 968, 1289, 669, 0, 0, 0, 0,
	672, 694, 683, 684, 681, 682, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 132, 0,
	133, 0, 0, 0, 0, 711, 676, 0, 0, 0,
	134, 135, 136, 285, 726, 287, 727, 137, 728, 729,
	0, 138, 291, 292, 139, 140, 679, 710, 730, 731,
	295, 0, 141, 722, 0, 702, 0, 142, 143, 144,
	0, 145, 0, 146, 147, 148, 0, 395, 149, 150,
	0, 703, 704, 706, 0, 705, 707, 151, 152, 343,
	153, 732, 154, 733, 734, 0, 155, 0, 156, 0,
	157, 0, 0, 725, 159, 0, 160, 0, 0, 0,
	667, 161, 162, 163, 712, 713, 690, 0, 0, 164,
	165, 735, 736, 737, 0, 166, 0, 167, 0, 0,
	396, 0, 168, 723, 0, 307, 0, 169, 170, 171,
	172, 719, 721, 398, 0, 176, 0, 173, 0, 397,
	174, 738, 175, 739, 740, 741, 742, 743, 0, 701,
	0, 399, 177, 178, 179, 400, 180, 181, 182, 0,
	184, 183, 0, 724, 401, 185, 402, 0, 186, 0,
	0, 187, 0, 188, 189, 190, 192, 318, 191, 403,
	193, 194, 196, 195, 662, 0, 691, 720, 197, 744,
	198, 199, 0, 200, 0, 0, 201, 0, 0, 202,
	321, 404, 203, 405, 714, 204, 205, 206, 207, 208,
	0, 209, 715, 210, 324, 211, 0, 212, 213, 214,
	215, 216, 745, 217, 218, 0, 219, 220, 221, 222,
	223, 225, 226, 224, 227, 228, 229, 230, 0, 231,
	406, 232, 233, 668, 234, 0, 238, 239, 240, 241,
	0, 243, 327, 242, 244, 245, 708, 246, 235, 236,
	247, 407, 248, 746, 329, 249, 0, 255, 250, 251,
	237, 252, 254, 747, 253, 716, 0, 256, 0, 257,
	258, 259, 260, 261, 262, 263, 0, 332, 748, 749,
	0, 0, 264, 265, 717, 718, 689, 266, 267, 268,
	269, 0, 0, 270, 271, 272, 273, 709, 274, 0,
	337, 275, 276, 277, 338, 750, 0, 0, 278, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 663, 0,
	0, 0, 0, 0, 661, 0, 0, 0, 0, 659,
	660, 694, 683, 684, 681, 682, 673, 0, 669, 1795,
	0, 0, 0, 672, 0, 0, 0, 131, 132, 0,
	133, 0, 0, 0, 0, 711, 676, 0, 0, 0,
	134, 135, 136, 285, 726, 287, 727, 137, 728, 729,
	0, 138, 291, 292, 139, 140, 679, 710, 730, 731,
	295, 0, 141, 722, 0, 702, 0, 142, 143, 144,
	0, 145, 0, 146, 147, 148, 0, 395, 149, 150,
	0, 703, 704, 706, 0, 705, 707, 151, 152, 343,
	153, 732, 154, 733, 734, 0, 155, 0, 156, 0,
	157, 0, 0, 725, 159, 0, 160, 0, 0, 0,
	667, 161, 162, 163, 712, 713, 690, 0, 0, 164,
	165, 735, 736, 737, 0, 166, 0, 167, 0, 0,
	396, 0, 168, 723, 0, 307, 0, 169, 170, 171,
	172, 719, 721, 398, 0, 176, 0, 173, 0, 397,
	174, 738, 175, 739, 740, 741, 742, 743, 0, 701,
	0, 399, 177, 178, 179, 400, 180, 181, 182, 0,
	184, 183, 0, 724, 401, 185, 402, 0, 186, 0,
	0, 187, 0, 188, 189, 190, 192, 318, 191, 403,
	193, 194, 196, 195, 662, 0, 691, 720, 197, 744,
	198, 199, 0, 200, 0, 0, 201, 0, 0, 202,
	321, 404, 203, 405, 714, 204, 205, 206, 207, 208,
	0, 209, 715, 210, 324, 211, 0, 212, 213, 214,
	215, 216, 745, 217, 218, 0, 219, 220, 221, 222,
	223, 225, 226, 224, 227, 228, 229, 230, 0, 231,
	406, 232, 233, 668, 234, 0, 238, 239, 240, 241,
	0, 243, 327, 242, 244, 245, 708, 246, 235, 236,
	247, 407, 248, 746, 329, 249, 0, 255, 250, 251,
	237, 252, 254, 747, 253, 716, 0, 256, 0, 257,
	258, 259, 260, 261, 262, 263, 0, 332, 748, 749,
	0, 0, 264, 265, 717, 718, 689, 266, 267, 268,
	269, 0, 0, 270, 271, 272, 273, 709, 274, 0,
	337, 275, 276, 277, 338, 750, 1744, 0, 278, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 663, 0,
	0, 0, 0, 0, 661, 0, 0, 0, 0, 659,
	660, 694, 683, 684, 681, 682, 673, 0, 669, 0,
	0, 0, 0, 672, 0, 0, 0, 131, 132, 0,
	133, 0, 0, 0, 0, 711, 676, 0, 0, 0,
	134, 135, 136, 285, 726, 287, 727, 137, 728, 729,
	0, 138, 291, 292, 139, 140, 679, 710, 730, 731,
	295, 0, 141, 722, 0, 702, 0, 142, 143, 144,
	0, 145, 0, 146, 147, 148, 0, 395, 149, 150,
	0, 703, 704, 706, 0, 705, 707, 151, 152, 343,
	153, 732, 154, 733, 734, 0, 155, 0, 156, 0,
	157, 0, 0, 725, 159, 0, 160, 0, 0, 0,
	667, 161, 162, 163, 712, 713, 690, 0, 0, 164,
	165, 735, 736, 737, 0, 166, 0, 167, 0, 0,
	396, 0, 168, 723, 0, 307, 0, 169, 170, 171,
	172, 719, 721, 398, 0, 176, 0, 173, 0, 397,
	174, 738, 175, 739, 740, 741, 742, 743, 0, 701,
	0, 399, 177, 178, 179, 400, 180, 181, 182, 0,
	184, 183, 0, 724, 401, 185, 402, 0, 186, 0,
	0, 187, 0, 188, 189, 190, 192, 318, 191, 403,
	193, 194, 196, 195, 662, 0, 691, 720, 197, 744,
	198, 199, 0, 200, 0, 0, 201, 0, 0, 202,
	321, 404, 203, 405, 714, 204, 205, 206, 207, 208,
	0, 209, 715, 210, 324, 211, 0, 212, 213, 214,
	215, 216, 745, 217, 218, 0, 219, 220, 221, 222,
	223, 225, 226, 224, 227, 228, 229, 230, 0, 231,
	406, 232, 233, 668, 234, 0, 238, 239, 240, 241,
	0, 243, 327, 242, 244, 245, 708, 246, 235, 236,
	247, 407, 248, 746, 329, 249, 0, 255, 250, 251,
	237, 252, 254, 747, 253, 716, 0, 256, 0, 257,
	258, 259, 260, 261, 262, 263, 0, 332, 748, 749,
	0, 0, 264, 265, 717, 718, 689, 266, 267, 268,
	269, 0, 0, 270, 271, 272, 273, 709, 274, 0,
	337, 275, 276, 277, 338, 750, 0, 0, 278, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 663, 0,
	0, 0, 0, 0, 661, 0, 0, 0, 0, 659,
	660, 694, 683, 684, 681, 682, 673, 0, 669, 1734,
	0, 0, 0, 672, 0, 0, 0, 131, 132, 0,
	133, 0, 0, 0, 0, 711, 676, 0, 0, 0,
	134, 135, 136, 285, 726, 287, 727, 137, 728, 729,
	0, 138, 291, 292, 139, 140, 679, 710, 730, 731,
	295, 0, 141, 722, 0, 702, 0, 142, 143, 144,
	0, 145, 0, 146, 147, 148, 0, 395, 149, 150,
	0, 703, 704, 706, 0, 705, 707, 151, 152, 343,
	153, 732, 154, 733, 734, 874, 155, 0, 156, 0,
	157, 0, 0, 725, 159, 0, 160, 0, 0, 0,
	667, 161, 162, 163, 712, 713, 690, 0, 0, 164,
	165, 735, 736, 737, 0, 166, 0, 167, 0, 0,
	396, 0, 168, 723, 0, 307, 0, 169, 170, 171,
	172, 719, 721, 398, 0, 176, 0, 173, 0, 397,
	174, 738, 175, 739, 740, 741, 742, 743, 0, 701,
	0, 399, 177, 178, 179, 400, 180, 181, 182, 0,
	184, 183, 0, 724, 401, 185, 402, 0, 186, 0,
	0, 187, 0, 188, 189, 190, 192, 318, 191, 403,
	193, 194, 196, 195, 662, 0, 691, 720, 197, 744,
	198, 199, 0, 200, 0, 0, 201, 0, 0, 202,
	321, 404, 203, 405, 714, 204, 205, 206, 207, 208,
	0, 209, 715, 210, 324, 211, 0, 212, 213, 214,
	215, 216, 745, 217, 218, 0, 219, 220, 221, 222,
	223, 225, 226, 224, 227, 228, 229, 230, 0, 231,
	406, 232, 233, 668, 234, 0, 238, 239, 240, 241,
	0, 243, 327, 242, 244, 245, 708, 246, 235, 236,
	247, 407, 248, 746, 329, 249, 0, 255, 250, 251,
	237, 252, 254, 747, 253, 716, 0, 256, 0, 257,
	258, 259, 260, 261, 262, 263, 0, 332, 748, 749,
	0, 0, 264, 265, 717, 718, 689, 266, 267, 268,
	269, 0, 0, 270, 271, 272, 273, 709, 274, 0,
	337, 275, 276, 277, 338, 750, 0, 0, 278, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 663, 0,
	0, 0, 0, 0, 661, 0, 0, 0, 0, 659,
	660, 694, 683, 684, 681, 682, 673, 0, 669, 0,
	0, 0, 0, 672, 0, 0, 0, 131, 132, 0,
	133, 0, 0, 0, 0, 711, 676, 0, 0, 0,
	134, 135, 136, 285, 726, 287, 727, 137, 728, 729,
	0, 138, 291, 292, 139, 140, 679, 710, 730, 731,
	295, 0, 141, 722, 0, 702, 0, 142, 143, 144,
	0, 145, 0, 146, 147, 148, 0, 395, 149, 150,
	0, 703, 704, 706, 0, 705, 707, 151, 152, 343,
	153, 732, 154, 733, 734, 0, 155, 0, 156, 0,
	157, 0, 0, 725, 159, 0, 160, 0, 0, 0,
	667, 161, 162, 163, 712, 713, 690, 0, 0, 164,
	165, 735, 736, 737, 0, 166, 0, 167, 0, 1349,
	396, 0, 168, 723, 0, 307, 0, 169, 170, 171,
	172, 719, 721, 398, 0, 176, 0, 173, 0, 397,
	174, 738, 175, 739, 740, 741, 742, 743, 0, 701,
	0, 399, 177, 178, 179, 400, 180, 181, 182, 0,
	184, 183, 0, 724, 401, 185, 402, 0, 186, 0,
	0, 187, 0, 188, 189, 190, 192, 318, 191, 403,
	193, 194, 196, 195, 662, 0, 691, 720, 197, 744,
	198, 199, 0, 200, 0, 0, 201, 0, 0, 202,
	321, 404, 203, 405, 714, 204, 205, 206, 207, 208,
	0, 209, 715, 210, 324, 211, 0, 212, 213, 214,
	215, 216, 745, 217, 218, 0, 219, 220, 221, 222,
	223, 225, 226, 224, 227, 228, 229, 230, 0, 231,
	406, 232, 233, 668, 234, 0, 238, 239, 240, 241,
	0, 243, 327, 242, 244, 245, 708, 246, 235, 236,
	247, 407, 248, 746, 329, 249, 0, 255, 250, 251,
	237, 252, 254, 747, 253, 716, 0, 256, 0, 257,
	258, 259, 260, 261, 262, 263, 0, 332, 748, 749,
	0, 0, 264, 265, 717, 718, 689, 266, 267, 268,
	269, 0, 0, 270, 271, 272, 273, 709, 274, 0,
	337, 275, 276, 277, 338, 750, 0, 0, 278, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 663, 0,
	0, 0, 0, 0, 661, 0, 0, 0, 0, 659,
	660, 694, 683, 684, 681, 682, 673, 0, 669, 0,
	0, 0, 0, 672, 0, 0, 0, 131, 132, 0,
	133, 0, 0, 0, 0, 711, 676, 0, 0, 0,
	134, 135, 136, 285, 726, 287, 727, 137, 728, 729,
	0, 138, 291, 292, 139, 140, 679, 710, 730, 731,
	295, 0, 141, 722, 0, 702, 0, 142, 143, 144,
	0, 145, 0, 146, 147, 148, 0, 395, 149, 150,
	0, 703, 704, 706, 0, 705, 707, 151, 152, 343,
	153, 732, 154, 733, 734, 0, 155, 0, 156, 0,
	157, 0, 0, 725, 159, 0, 160, 0, 0, 0,
	667, 161, 162, 163, 712, 713, 690, 0, 0, 164,
	165, 735, 736, 737, 0, 166, 0, 167, 0, 0,
	396, 0, 168, 723, 0, 307, 0, 169, 170, 171,
	172, 719, 721, 398, 0, 176, 0, 173, 0, 397,
	174, 738, 175, 739, 740, 741, 742, 743, 0, 701,
	0, 399, 177, 178, 179, 400, 180, 181, 182, 0,
	184, 183, 0, 724, 401, 185, 402, 0, 186, 0,
	0, 187, 0, 188, 189, 190, 192, 318, 191, 403,
	193, 194, 196, 195, 662, 0, 691, 720, 197, 744,
	198, 199, 0, 200, 0, 0, 201, 0, 0, 202,
	321, 404, 203, 405, 714, 204, 205, 206, 207, 208,
	0, 209, 715, 210, 324, 211, 0, 212, 213, 214,
	215, 216, 745, 217, 218, 0, 219, 220, 221, 222,
	223, 225, 226, 224, 227, 228, 229, 230, 0, 231,
	406, 232, 233, 668, 234, 0, 238, 239, 240, 241,
	0, 243, 327, 242, 244, 245, 708, 246, 235, 236,
	247, 407, 248, 746, 329, 249, 0, 255, 250, 251,
	237, 252, 254, 747, 253, 716, 0, 256, 0, 257,
	258, 259, 260, 261, 262, 263, 0, 332, 748, 749,
	0, 0, 264, 265, 717, 718, 689, 266, 267, 268,
	269, 0, 0, 270, 271, 272, 273, 709, 274, 0,
	337, 275, 276, 277, 338, 750, 0, 0, 278, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 663, 0,
	0, 0, 0, 0, 661, 0, 0, 0, 0, 659,
	660, 865, 694, 683, 684, 681, 682, 673, 669, 0,
	0, 0, 0, 672, 0, 0, 0, 0, 131, 132,
	0, 133, 0, 0, 0, 0, 711, 676, 0, 0,
	0, 134, 135, 136, 285, 726, 287, 727, 137, 728,
	729, 0, 138, 291, 292, 139, 140, 679, 710, 730,
	731, 295, 0, 141, 722, 0, 702, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 148, 0, 395, 149,
	150, 0, 703, 704, 706, 0, 705, 707, 151, 152,
	343, 153, 732, 154, 733, 734, 0, 155, 0, 156,
	0, 157, 0, 0, 725, 159, 0, 160, 0, 0,
	0, 667, 161, 162, 163, 712, 713, 690, 0, 0,
	164, 165, 735, 736, 737, 0, 166, 0, 167, 0,
	0, 396, 0, 168, 723, 0, 307, 0, 169, 170,
	171, 172, 719, 721, 398, 0, 176, 0, 173, 0,
	397, 174, 738, 175, 739, 740, 741, 742, 743, 0,
	701, 0, 399, 177, 178, 179, 400, 180, 181, 182,
	0, 184, 183, 0, 724, 401, 185, 402, 0, 186,
	0, 0, 187, 0, 188, 189, 190, 192, 318, 191,
	403, 193, 194, 196, 195, 662, 0, 691, 720, 197,
	744, 198, 199, 0, 200, 0, 0, 201, 0, 0,
	202, 321, 404, 203, 405, 714, 204, 205, 206, 207,
	208, 0, 209, 715, 210, 324, 211, 0, 212, 213,
	214, 215, 216, 745, 217, 218, 0, 219, 220, 221,
	222, 223, 225, 226, 224, 227, 228, 229, 230, 0,
	231, 406, 232, 233, 668, 234, 0, 238, 239, 240,
	241, 0, 243, 327, 242, 244, 245, 708, 246, 235,
	236, 247, 407, 248, 746, 329, 249, 0, 255, 250,
	251, 237, 252, 254, 747, 253, 716, 0, 256, 0,
	257, 258, 259, 260, 261, 262, 263, 0, 332, 748,
	749, 0, 0, 264, 265, 717, 718, 689, 266, 267,
	268, 269, 0, 0, 270, 271, 272, 273, 709, 274,
	0, 337, 275, 276, 277, 338, 750, 0, 0, 278,
	0, 0, 0, 0, 279, 280, 281, 282, 283, 663,
	0, 0, 0, 0, 0, 661, 0, 0, 0, 0,
	659, 660, 694, 683, 684, 681, 682, 673, 0, 669,
	1284, 0, 0, 0, 672, 0, 0, 0, 131, 132,
	1112, 133, 0, 0, 0, 0, 711, 676, 0, 0,
	0, 134, 135, 136, 285, 726, 287, 727, 137, 728,
	729, 0, 138, 291, 292, 139, 140, 679, 710, 730,
	731, 295, 0, 141, 722, 0, 702, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 148, 0, 395, 149,
	150, 0, 703, 704, 706, 0, 705, 707, 151, 152,
	343, 153, 732, 154, 733, 734, 0, 155, 0, 156,
	0, 157, 0, 0, 725, 159, 0, 160, 0, 0,
	0, 667, 161, 162, 163, 712, 713, 690, 0, 0,
	164, 165, 735, 736, 737, 0, 166, 0, 167, 0,
	0, 396, 0, 168, 723, 0, 307, 0, 169, 170,
	171, 172, 719, 721, 398, 0, 176, 0, 173, 0,
	397, 174, 738, 175, 739, 740, 741, 742, 743, 0,
	701, 0, 399, 177, 178, 179, 400, 180, 181, 182,
	0, 184, 183, 0, 724, 401, 185, 402, 0, 186,
	0, 0, 187, 0, 188, 189, 190, 192, 318, 191,
	403, 193, 194, 196, 195, 662, 0, 691, 720, 197,
	744, 198, 199, 0, 200, 0, 0, 201, 0, 0,
	202, 321, 404, 203, 405, 714, 204, 205, 206, 207,
	208, 0, 209, 715, 210, 324, 211, 0, 212, 213,
	214, 215, 216, 745, 217, 218, 0, 219, 220, 221,
	222, 223, 225, 226, 224, 227, 228, 229, 230, 0,
	231, 406, 232, 233, 668, 234, 0, 238, 239, 240,
	241, 0, 243, 327, 242, 244, 245, 708, 246, 235,
	236, 247, 407, 248, 746, 329, 249, 0, 255, 250,
	251, 237, 252, 254, 747, 253, 716, 0, 256, 0,
	257, 258, 259, 260, 261, 262, 263, 0, 332, 748,
	749, 0, 0, 264, 265, 717, 718, 689, 266, 267,
	268, 269, 0, 0, 270, 271, 272, 273, 709, 274,
	0, 337, 275, 276, 277, 338, 750, 0, 0, 278,
	0, 0, 0, 0, 279, 280, 281, 282, 283, 663,
	0, 0, 0, 0, 0, 661, 0, 0, 0, 0,
	659, 660, 694, 683, 684, 681, 682, 673, 0, 669,
	0, 0, 0, 0, 672, 0, 0, 0, 131, 132,
	0, 133, 0, 0, 0, 0, 711, 676, 0, 0,
	0, 134, 135, 136, 285, 726, 287, 727, 137, 728,
	729, 0, 138, 291, 292, 139, 140, 679, 710, 730,
	731, 295, 0, 141, 722, 0, 702, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 148, 0, 395, 149,
	2210, 0, 703, 704, 706, 0, 705, 707, 151, 152,
	343, 153, 732, 154, 733, 734, 0, 155, 0, 156,
	0, 157, 0, 0, 725, 159, 0, 160, 0, 0,
	0, 667, 161, 162, 163, 712, 713, 690, 0, 0,
	164, 165, 735, 736, 737, 0, 166, 0, 167, 0,
	0, 396, 0, 168, 723, 0, 307, 0, 169, 170,
	171, 172, 719, 721, 398, 0, 176, 0, 173, 0,
	397, 174, 738, 175, 739, 740, 741, 742, 743, 0,
	701, 0, 399, 177, 178, 179, 400, 180, 181, 182,
	0, 184, 183, 0, 724, 401, 185, 402, 0, 186,
	0, 0, 187, 0, 188, 189, 190, 192, 318, 191,
	403, 193, 194, 196, 195, 662, 0, 691, 720, 197,
	744, 198, 199, 0, 200, 0, 0, 201, 0, 0,
	202, 321, 404, 203, 405, 714, 204, 205, 206, 207,
	208, 0, 209, 715, 210, 324, 211, 0, 212, 213,
	214, 215, 216, 745, 217, 218, 0, 219, 220, 221,
	222, 223, 225, 226, 224, 227, 228, 229, 230, 0,
	231, 406, 232, 233, 668, 234, 0, 238, 239, 240,
	241, 0, 243, 327, 242, 244, 245, 708, 246, 235,
	236, 247, 407, 248, 746, 329, 249, 0, 255, 250,
	251, 237, 252, 254, 747, 253, 716, 0, 256, 0,
	257, 258, 259, 260, 261, 262, 263, 0, 332, 748,
	749, 0, 0, 264, 265, 717, 718, 689, 266, 267,
	2209, 269, 0, 0, 270, 271, 272, 273, 709, 274,
	0, 337, 275, 276, 277, 338, 750, 0, 0, 278,
	0, 0, 0, 0, 279, 280, 281, 282, 283, 663,
	0, 0, 0, 0, 0, 661, 0, 0, 0, 0,
	659, 660, 694, 683, 684, 681, 682, 673, 0, 669,
	0, 0, 0, 0, 672, 0, 0, 0, 131, 132,
	0, 133, 0, 0, 0, 0, 711, 676, 0, 0,
	0, 134, 135, 136, 285, 726, 287, 727, 137, 728,
	729, 0, 138, 291, 292, 139, 140, 679, 710, 730,
	731, 295, 0, 141, 722, 0, 702, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 148, 0, 395, 149,
	150, 0, 703, 704, 706, 0, 705, 707, 151, 152,
	343, 153, 732, 154, 733, 734, 0, 155, 0, 156,
	0, 157, 0, 0, 725, 159, 0, 160, 0, 0,
	0, 667, 161, 162, 163, 712, 713, 690, 0, 0,
	164, 165, 735, 736, 737, 0, 166, 0, 167, 0,
	0, 396, 0, 168, 723, 0, 307, 0, 169, 170,
	171, 172, 719, 721, 398, 0, 176, 0, 173, 0,
	397, 174, 738, 175, 739, 740, 741, 742, 743, 0,
	701, 0, 399, 177, 178, 179, 400, 180, 181, 182,
	0, 184, 183, 0, 724, 401, 185, 402, 0, 186,
	0, 0, 187, 0, 188, 189, 190, 192, 318, 191,
	403, 193, 194, 196, 195, 662, 0, 691, 720, 197,
	744, 198, 199, 0, 200, 0, 0, 201, 0, 0,
	202, 321, 404, 203, 405, 714, 204, 205, 206, 207,
	208, 0, 209, 715, 210, 324, 211, 0, 212, 213,
	214, 215, 216, 745, 217, 218, 0, 219, 220, 221,
	222, 223, 225, 226, 224, 227, 228, 229, 230, 0,
	231, 406, 232, 233, 668, 234, 0, 238, 239, 240,
	241, 0, 243, 327, 242, 244, 245, 708, 246, 235,
	236, 247, 407, 248, 746, 329, 249, 0, 255, 250,
	251, 237, 252, 254, 747, 253, 716, 0, 256, 0,
	257, 258, 259, 260, 261, 262, 263, 0, 332, 748,
	749, 0, 0, 264, 265, 717, 718, 689, 266, 267,
	268, 269, 0, 0, 270, 271, 272, 273, 709, 274,
	0, 337, 275, 276, 277, 338, 750, 0, 0, 278,
	0, 0, 0, 0, 279, 280, 281, 282, 283, 663,
	0, 0, 0, 0, 0, 661, 0, 0, 0, 0,
	659, 660, 694, 683, 684, 681, 682, 673, 0, 669,
	0, 0, 0, 0, 672, 0, 0, 0, 131, 132,
	0, 133, 0, 0, 0, 0, 711, 676, 0, 0,
	0, 134, 135, 136, 2208, 726, 287, 727, 137, 728,
	729, 0, 138, 291, 292, 139, 140, 679, 710, 730,
	731, 295, 0, 141, 722, 0, 702, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 148, 0, 395, 149,
	2210, 0, 703, 704, 706, 0, 705, 707, 151, 152,
	343, 153, 732, 154, 733, 734, 0, 155, 0, 156,
	0, 157, 0, 0, 725, 159, 0, 160, 0, 0,
	0, 667, 161, 162, 163, 712, 713, 690, 0, 0,
	164, 165, 735, 736, 737, 0, 166, 0, 167, 0,
	0, 396, 0, 168, 723, 0, 307, 0, 169, 170,
	171, 172, 719, 721, 398, 0, 176, 0, 173, 0,
	397, 174, 738, 175, 739, 740, 741, 742, 743, 0,
	701, 0, 399, 177, 178, 179, 400, 180, 181, 182,
	0, 184, 183, 0, 724, 401, 185, 402, 0, 186,
	0, 0, 187, 0, 188, 189, 190, 192, 318, 191,
	403, 193, 194, 196, 195, 662, 0, 691, 720, 197,
	744, 198, 199, 0, 200, 0, 0, 201, 0, 0,
	202, 321, 404, 203, 405, 714, 204, 205, 206, 207,
	208, 0, 209, 715, 210, 324, 211, 0, 212, 213,
	214, 215, 216, 745, 217, 218, 0, 219, 220, 221,
	222, 223, 225, 226, 224, 227, 228, 229, 230, 0,
	231, 406, 232, 233, 668, 234, 0, 238, 239, 240,
	241, 0, 243, 327, 242, 244, 245, 708, 246, 235,
	236, 247, 407, 248, 746, 329, 249, 0, 255, 250,
	251, 237, 252, 254, 747, 253, 716, 0, 256, 0,
	257, 258, 259, 260, 261, 262, 263, 0, 332, 748,
	749, 0, 0, 264, 265, 717, 718, 689, 266, 267,
	2209, 269, 0, 0, 270, 271, 272, 273, 709, 274,
	0, 337, 275, 276, 277, 338, 750, 0, 0, 278,
	0, 0, 0, 0, 279, 280, 281, 282, 283, 663,
	0, 0, 0, 0, 0, 661, 0, 0, 0, 0,
	659, 660, 1321, 683, 684, 681, 682, 673, 0, 669,
	0, 0, 0, 0, 672, 0, 0, 0, 131, 132,
	0, 133, 0, 0, 0, 0, 711, 676, 0, 0,
	0, 134, 135, 136, 285, 726, 287, 727, 137, 728,
	729, 0, 138, 291, 292, 139, 140, 679, 710, 730,
	731, 295, 0, 141, 722, 0, 702, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 148, 0, 395, 149,
	150, 0, 703, 704, 706, 0, 705, 707, 151, 152,
	343, 153, 732, 1324, 733, 734, 0, 155, 0, 156,
	0, 157, 0, 0, 725, 159, 0, 160, 0, 0,
	0, 667, 161, 162, 163, 712, 713, 690, 0, 0,
	164, 165, 735, 736, 737, 0, 166, 0, 167, 0,
	0, 396, 0, 168, 723, 0, 307, 0, 169, 170,
	1325, 172, 719, 721, 398, 0, 176, 0, 173, 0,
	397, 174, 738, 175, 739, 740, 741, 742, 743, 0,
	701, 0, 399, 177, 178, 179, 400, 180, 181, 182,
	0, 184, 183, 0, 724, 401, 185, 402, 0, 186,
	0, 0, 187, 0, 188, 1326, 1323, 192, 318, 191,
	403, 193, 194, 196, 195, 662, 0, 691, 720, 197,
	744, 198, 199, 0, 200, 0, 0, 201, 0, 0,
	202, 321, 404, 203, 405, 714, 204, 205, 206, 207,
	208, 0, 209, 715, 210, 324, 211, 0, 212, 213,
	214, 215, 216, 745, 217, 218, 0, 219, 220, 221,
	222, 223, 225, 226, 224, 227, 228, 229, 230, 0,
	231, 406, 232, 233, 668, 234, 0, 238, 239, 240,
	1327, 0, 243, 327, 242, 244, 245, 708, 246, 235,
	236, 247, 407, 248, 746, 329, 249, 0, 255, 250,
	251, 237, 252, 254, 747, 253, 716, 0, 256, 0,
	257, 258, 259, 260, 261, 262, 263, 0, 332, 748,
	749, 0, 0, 264, 265, 717, 718, 689, 266, 267,
	268, 269, 0, 0, 270, 271, 272, 273, 709, 274,
	0, 337, 275, 276, 277, 338, 750, 0, 0, 278,
	0, 0, 0, 0, 279, 280, 281, 1322, 283, 663,
	0, 0, 0, 0, 0, 661, 0, 0, 0, 0,
	659, 660, 694, 683, 684, 681, 682, 673, 0, 669,
	0, 0, 0, 0, 672, 0, 0, 0, 131, 132,
	0, 133, 0, 0, 0, 0, 711, 676, 0, 0,
	0, 134, 135, 136, 285, 726, 287, 727, 137, 728,
	729, 0, 138, 291, 292, 139, 140, 679, 710, 730,
	731, 295, 0, 141, 722, 0, 702, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 148, 0, 395, 149,
	150, 0, 703, 704, 706, 0, 705, 707, 151, 152,
	343, 153, 732, 154, 733, 734, 0, 155, 0, 156,
	0, 157, 0, 0, 725, 159, 0, 160, 0, 0,
	0, 667, 161, 162, 163, 712, 713, 690, 0, 0,
	164, 165, 735, 736, 737, 0, 166, 0, 167, 0,
	0, 396, 0, 168, 723, 0, 307, 0, 169, 170,
	171, 172, 719, 721, 398, 0, 176, 0, 173, 0,
	397, 174, 738, 175, 739, 740, 741, 742, 743, 0,
	701, 0, 399, 177, 178, 179, 400, 180, 181, 182,
	0, 184, 183, 0, 724, 401, 185, 402, 0, 186,
	0, 0, 187, 0, 188, 189, 190, 192, 318, 191,
	403, 193, 194, 196, 195, 0, 0, 691, 720, 197,
	744, 198, 199, 0, 200, 0, 0, 201, 0, 0,
	202, 321, 404, 203, 405, 714, 204, 205, 206, 207,
	208, 0, 209, 715, 210, 324, 211, 0, 212, 213,
	214, 215, 216, 745, 217, 218, 0, 219, 220, 221,
	222, 223, 225, 226, 224, 227, 228, 229, 230, 0,
	231, 406, 232, 233, 1339, 234, 0, 238, 239, 240,
	241, 0, 243, 327, 242, 244, 245, 708, 246, 235,
	236, 247, 407, 248, 746, 329, 249, 0, 255, 250,
	251, 237, 252, 254, 747, 253, 716, 0, 256, 0,
	257, 258, 259, 260, 261, 262, 263, 0, 332, 748,
	749, 0, 0, 264, 265, 717, 718, 689, 266, 267,
	268, 269, 0, 0, 270, 271, 272, 273, 709, 274,
	0, 337, 275, 276, 277, 338, 750, 0, 0, 278,
	0, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	1335, 1336, 694, 683, 684, 681, 682, 673, 0, 1338,
	0, 0, 0, 0, 672, 0, 0, 0, 131, 132,
	0, 133, 0, 0, 0, 0, 711, 676, 0, 0,
	0, 134, 135, 136, 285, 726, 287, 727, 137, 728,
	729, 0, 138, 291, 292, 139, 140, 0, 710, 730,
	731, 295, 0, 141, 722, 0, 702, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 148, 0, 395, 149,
	150, 0, 703, 704, 706, 0, 705, 707, 151, 152,
	343, 153, 732, 154, 733, 734, 0, 155, 0, 156,
	0, 157, 0, 0, 725, 159, 0, 160, 0, 0,
	0, 300, 161, 162, 163, 712, 713, 690, 0, 0,
	164, 165, 735, 736, 737, 0, 166, 0, 167, 0,
	0, 396, 0, 168, 723, 0, 307, 0, 169, 170,
	171, 172, 719, 721, 398, 0, 176, 0, 173, 0,
	397, 174, 738, 175, 739, 740, 741, 742, 743, 0,
	701, 0, 399, 177, 178, 179, 400, 180, 181, 182,
	0, 184, 183, 0, 724, 401, 185, 402, 0, 186,
	0, 0, 187, 0, 188, 189, 190, 192, 318, 191,
	403, 193, 194, 196, 195, 0, 0, 691, 720, 197,
	744, 198, 199, 0, 200, 0, 0, 201, 0, 0,
	202, 321, 404, 203, 405, 714, 204, 205, 206, 207,
	208, 0, 209, 715, 210, 324, 211, 0, 212, 213,
	214, 215, 216, 745, 217, 218, 0, 219, 220, 221,
	222, 223, 225, 226, 224, 227, 228, 229, 230, 0,
	231, 406, 232, 233, 1339, 234, 0, 238, 239, 240,
	241, 0, 243, 327, 242, 244, 245, 708, 246, 235,
	236, 247, 407, 248, 746, 329, 249, 0, 255, 250,
	251, 237, 252, 254, 747, 253, 716, 0, 256, 0,
	257, 258, 259, 260, 261, 262, 263, 0, 332, 748,
	749, 0, 0, 264, 265, 717, 718, 689, 266, 267,
	268, 269, 0, 0, 270, 271, 272, 273, 709, 274,
	0, 337, 275, 276, 277, 338, 750, 0, 0, 278,
	0, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	0, 694, 683, 684, 681, 682, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 132, 1338,
	133, 0, 0, 0, 672, 711, 676, 0, 0, 0,
	134, 135, 136, 0, 726, 287, 727, 137, 728, 729,
	0, 138, 291, 292, 139, 140, 679, 710, 730, 731,
	295, 0, 141, 722, 0, 702, 0, 142, 143, 144,
	0, 145, 0, 146, 147, 148, 0, 395, 149, 2210,
	0, 703, 704, 706, 0, 705, 707, 151, 152, 343,
	153, 732, 154, 733, 734, 0, 155, 0, 156, 0,
	157, 0, 0, 725, 159, 0, 160, 0, 0, 0,
	667, 161, 162, 163, 712, 713, 690, 0, 0, 164,
	165, 735, 736, 737, 0, 166, 0, 167, 0, 0,
	396, 0, 168, 723, 0, 307, 0, 169, 170, 171,
	172, 719, 721, 0, 0, 176, 0, 173, 0, 397,
	174, 738, 175, 739, 740, 741, 742, 743, 0, 701,
	0, 0, 177, 178, 179, 400, 180, 181, 182, 0,
	184, 183, 0, 724, 401, 185, 0, 0, 186, 0,
	0, 187, 0, 188, 189, 190, 192, 318, 191, 403,
	193, 194, 196, 195, 662, 0, 691, 720, 197, 744,
	198, 199, 0, 200, 0, 0, 201, 0, 0, 202,
	321, 404, 203, 405, 714, 204, 205, 206, 207, 208,
	0, 209, 715, 210, 324, 211, 0, 212, 213, 214,
	215, 216, 745, 217, 218, 0, 219, 220, 221, 222,
	223, 225, 226, 224, 227, 228, 229, 230, 0, 231,
	406, 232, 233, 668, 234, 0, 238, 239, 240, 241,
	0, 243, 327, 242, 244, 245, 708, 246, 235, 236,
	247, 0, 248, 746, 329, 249, 0, 255, 250, 251,
	237, 252, 254, 747, 253, 716, 0, 256, 0, 257,
	258, 259, 260, 261, 262, 263, 0, 332, 748, 749,
	0, 0, 264, 265, 717, 718, 689, 266, 267, 2209,
	269, 0, 0, 270, 271, 272, 273, 709, 274, 0,
	337, 275, 276, 277, 338, 750, 0, 0, 278, 0,
	0, 0, 0, 279, 280, 281, 282, 283, 694, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 659,
	660, 0, 0, 0, 131, 132, 0, 133, 669, 0,
	0, 0, 711, 672, 0, 0, 0, 134, 135, 136,
	285, 286, 287, 288, 137, 289, 290, 0, 138, 291,
	292, 139, 140, 0, 710, 293, 294, 295, 0, 141,
	722, 0, 702, 0, 142, 143, 144, 0, 145, 0,
	146, 147, 148, 0, 395, 149, 150, 0, 703, 704,
	706, 0, 705, 707, 151, 152, 343, 153, 297, 154,
	298, 299, 0, 155, 0, 156, 0, 157, 0, 0,
	158, 159, 0, 160, 0, 0, 0, 300, 161, 162,
	163, 712, 713, 0, 0, 0, 164, 165, 303, 304,
	305, 0, 166, 0, 167, 0, 0, 396, 0, 168,
	723, 0, 307, 0, 169, 170, 171, 172, 719, 721,
	398, 0, 176, 0, 173, 0, 397, 174, 310, 175,
	311, 312, 313, 314, 315, 0, 316, 0, 399, 177,
	178, 179, 400, 180, 181, 182, 0, 184, 183, 0,
	724, 401, 185, 402, 0, 186, 0, 0, 187, 0,
	188, 189, 190, 192, 318, 191, 403, 193, 194, 196,
	195, 0, 0, 0, 720, 197, 320, 198, 199, 0,
	200, 0, 0, 201, 0, 0, 202, 321, 404, 203,
	405, 714, 204, 205, 206, 207, 208, 0, 209, 715,
	210, 324, 211, 0, 212, 213, 214, 215, 216, 325,
	217, 218, 0, 219, 220, 221, 222, 223, 225, 226,
	224, 227, 228, 229, 230, 0, 231, 406, 232, 233,
	326, 234, 0, 238, 239, 240, 241, 0, 243, 327,
	242, 244, 245, 708, 246, 235, 236, 247, 407, 248,
	328, 329, 249, 0, 255, 250, 251, 237, 252, 254,
	330, 253, 716, 0, 256, 0, 257, 258, 259, 260,
	261, 262, 263, 0, 332, 333, 334, 0, 0, 264,
	265, 717, 718, 0, 266, 267, 268, 269, 0, 0,
	270, 271, 272, 273, 709, 274, 0, 337, 275, 276,
	277, 338, 339, 0, 0, 278, 0, 560, 0, 0,
	279, 280, 281, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 132, 0, 133, 0, 0, 0,
	0, 284, 0, 0, 0, 1824, 134, 135, 136, 285,
	286, 287, 288, 137, 289, 290, 0, 138, 291, 292,
	139, 140, 0, 0, 293, 294, 295, 0, 141, 296,
	0, 394, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 148, 0, 395, 149, 150, 0, 0, 0, 0,
	0, 0, 0, 151, 152, 343, 153, 297, 154, 298,
	299, 0, 155, 0, 156, 0, 157, 0, 0, 158,
	159, 0, 160, 0, 0, 0, 300, 161, 162, 163,
	301, 302, 0, 0, 0, 164, 165, 303, 304, 305,
	0, 166, 0, 167, 0, 0, 396, 0, 168, 306,
	0, 307, 0, 169, 170, 171, 172, 308, 309, 398,
	0, 176, 0, 173, 0, 397, 174, 310, 175, 311,
	312, 313, 314, 315, 0, 316, 0, 399, 177, 178,
	179, 400, 180, 181, 182, 0, 184, 183, 0, 317,
	401, 185, 402, 0, 186, 0, 0, 187, 0, 188,
	189, 190, 192, 318, 191, 403, 193, 194, 196, 195,
	0, 0, 0, 319, 197, 320, 198, 199, 0, 200,
	0, 0, 201, 0, 0, 202, 321, 404, 203, 405,
	322, 204, 205, 206, 207, 208, 0, 209, 323, 210,
	324, 211, 0, 212, 213, 214, 215, 216, 325, 217,
	218, 0, 219, 220, 221, 222, 223, 225, 226, 224,
	227, 228, 229, 230, 0, 231, 406, 232, 233, 326,
	234, 0, 238, 239, 240, 241, 116, 243, 327, 242,
	244, 245, 0, 246, 235, 236, 247, 407, 248, 328,
	329, 249, 0, 255, 250, 251, 237, 252, 254, 330,
	253, 331, 0, 256, 118, 257, 258, 259, 260, 261,
	262, 263, 0, 332, 333, 334, 0, 0, 264, 265,
	335, 336, 0, 266, 267, 268, 269, 0, 0, 270,
	271, 272, 273, 0, 274, 0, 337, 275, 276, 277,
	654, 339, 0, 0, 278, 0, 0, 0, 114, 279,
	280, 281, 282, 283, 0, 115, 560, 557, 0, 558,
	553, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 132, 110, 133, 0, 0, 0, 0,
	284, 0, 0, 0, 0, 134, 135, 136, 285, 286,
	287, 288, 137, 289, 290, 0, 138, 291, 292, 139,
	140, 0, 0, 293, 294, 295, 0, 141, 296, 0,
	394, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	148, 0, 395, 149, 150, 0, 0, 0, 0, 0,
	0, 0, 151, 152, 343, 153, 297, 154, 298, 299,
	1088, 155, 0, 156, 0, 157, 0, 0, 158, 159,
	0, 160, 0, 0, 0, 300, 161, 162, 163, 301,
	302, 550, 0, 0, 164, 165, 303, 304, 305, 0,
	166, 0, 167, 0, 0, 396, 0, 168, 306, 0,
	307, 0, 169, 170, 171, 172, 308, 309, 398, 0,
	176, 0, 173, 0, 397, 174, 310, 175, 311, 312,
	313, 314, 315, 0, 316, 0, 399, 177, 178, 179,
	400, 180, 181, 182, 0, 184, 183, 0, 317, 401,
	185, 402, 0, 186, 0, 0, 187, 0, 188, 189,
	190, 192, 318, 191, 403, 193, 194, 196, 195, 0,
	0, 0, 319, 197, 320, 198, 199, 0, 200, 551,
	0, 201, 0, 0, 202, 321, 404, 203, 405, 322,
	204, 205, 206, 207, 208, 0, 209, 323, 210, 324,
	211, 0, 212, 213, 214, 215, 216, 325, 217, 218,
	0, 219, 220, 221, 222, 223, 225, 226, 224, 227,
	228, 229, 230, 0, 231, 406, 232, 233, 326, 234,
	0, 238, 239, 240, 241, 0, 243, 327, 242, 244,
	245, 0, 246, 235, 236, 247, 407, 248, 328, 329,
	249, 0, 255, 250, 251, 237, 252, 254, 330, 253,
	331, 0, 256, 0, 257, 258, 259, 260, 261, 262,
	263, 0, 332, 333, 334, 0, 0, 264, 265, 335,
	336, 549, 266, 267, 268, 269, 0, 0, 270, 271,
	272, 273, 0, 274, 0, 337, 275, 276, 277, 338,
	339, 0, 0, 278, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 560, 557, 0, 558, 553, 548, 0,
	0, 0, 0, 0, 559, 554, 0, 0, 0, 131,
	132, 0, 133, 0, 0, 0, 0, 284, 0, 0,
	0, 0, 134, 135, 136, 285, 286, 287, 288, 137,
	289, 290, 0, 138, 291, 292, 139, 140, 0, 0,
	293, 294, 295, 0, 141, 296, 0, 394, 0, 142,
	143, 144, 0, 145, 0, 146, 147, 148, 0, 395,
	149, 150, 0, 0, 0, 0, 0, 0, 0, 151,
	152, 343, 153, 297, 154, 298, 299, 1085, 155, 0,
	156, 0, 157, 0, 0, 158, 159, 0, 160, 0,
	0, 0, 300, 161, 162, 163, 301, 302, 550, 0,
	0, 164, 165, 303, 304, 305, 0, 166, 0, 167,
	0, 0, 396, 0, 168, 306, 0, 307, 0, 169,
	170, 171, 172, 308, 309, 398, 0, 176, 0, 173,
	0, 397, 174, 310, 175, 311, 312, 313, 314, 315,
	0, 316, 0, 399, 177, 178, 179, 400, 180, 181,
	182, 0, 184, 183, 0, 317, 401, 185, 402, 0,
	186, 0, 0, 187, 0, 188, 189, 190, 192, 318,
	191, 403, 193, 194, 196, 195, 0, 0, 0, 319,
	197, 320, 198, 199, 0, 200, 551, 0, 201, 0,
	0, 202, 321, 404, 203, 405, 322, 204, 205, 206,
	207, 208, 0, 209, 323, 210, 324, 211, 0, 212,
	213, 214, 215, 216, 325, 217, 218, 0, 219, 220,
	221, 222, 223, 225, 226, 224, 227, 228, 229, 230,
	0, 231, 406, 232, 233, 326, 234, 0, 238, 239,
	240, 241, 0, 243, 327, 242, 244, 245, 0, 246,
	235, 236, 247, 407, 248, 328, 329, 249, 0, 255,
	250, 251, 237, 252, 254, 330, 253, 331, 0, 256,
	0, 257, 258, 259, 260, 261, 262, 263, 0, 332,
	333, 334, 0, 0, 264, 265, 335, 336, 549, 266,
	267, 268, 269, 0, 0, 270, 271, 272, 273, 0,
	274, 0, 337, 275, 276, 277, 338, 339, 0, 0,
	278, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	560, 557, 0, 558, 553, 548, 0, 0, 0, 0,
	0, 559, 554, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 394, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 395, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 782, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 550, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 396,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 398, 0, 176, 0, 173, 0, 397, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	399, 177, 178, 179, 400, 180, 181, 182, 0, 184,
	183, 0, 317, 401, 185, 402, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 403, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 551, 0, 201, 0, 0, 202, 321,
	404, 203, 405, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 406,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	407, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 549, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 0, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 560, 557, 0,
	558, 553, 548, 0, 0, 0, 0, 0, 559, 554,
	0, 0, 0, 131, 132, 0, 133, 0, 0, 0,
	0, 284, 0, 0, 0, 0, 134, 135, 136, 285,
	286, 287, 288, 137, 289, 290, 0, 138, 291, 292,
	139, 140, 0, 0, 293, 294, 295, 0, 141, 296,
	0, 394, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 148, 0, 395, 149, 150, 0, 0, 0, 0,
	0, 0, 0, 151, 152, 343, 153, 297, 154, 298,
	299, 0, 155, 0, 156, 0, 157, 0, 0, 158,
	159, 0, 160, 0, 0, 0, 300, 161, 162, 163,
	301, 302, 550, 0, 0, 164, 165, 303, 304, 305,
	0, 166, 0, 167, 0, 0, 396, 0, 168, 306,
	0, 307, 0, 169, 170, 171, 172, 308, 309, 398,
	0, 176, 0, 173, 0, 397, 174, 310, 175, 311,
	312, 313, 314, 315, 0, 316, 0, 399, 177, 178,
	179, 400, 180, 181, 182, 0, 184, 183, 0, 317,
	401, 185, 402, 0, 186, 0, 0, 187, 0, 188,
	189, 190, 192, 318, 191, 403, 193, 194, 196, 195,
	0, 0, 0, 319, 197, 320, 198, 199, 0, 200,
	551, 0, 201, 0, 0, 202, 321, 404, 203, 405,
	322, 204, 205, 206, 207, 208, 0, 209, 323, 210,
	324, 211, 0, 212, 213, 214, 215, 216, 325, 217,
	218, 0, 219, 220, 221, 222, 223, 225, 226, 224,
	227, 228, 229, 230, 0, 231, 406, 232, 233, 326,
	234, 0, 238, 239, 240, 241, 0, 243, 327, 242,
	244, 245, 0, 246, 235, 236, 247, 407, 248, 328,
	329, 249, 0, 255, 250, 251, 237, 252, 254, 330,
	253, 331, 0, 256, 0, 257, 258, 259, 260, 261,
	262, 263, 0, 332, 333, 334, 0, 0, 264, 265,
	335, 336, 549, 266, 267, 268, 269, 0, 0, 270,
	271, 272, 273, 0, 274, 0, 337, 275, 276, 277,
	338, 339, 0, 128, 278, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 0, 0, 0, 0, 131,
	132, 0, 133, 0, 0, 559, 554, 284, 0, 0,
	0, 0, 134, 135, 136, 285, 286, 287, 288, 137,
	289, 290, 0, 138, 291, 292, 139, 140, 0, 0,
	293, 294, 295, 0, 141, 296, 0, 0, 0, 142,
	143, 144, 0, 145, 0, 146, 147, 148, 0, 0,
	149, 150, 0, 0, 0, 0, 0, 0, 0, 151,
	152, 343, 153, 297, 154, 298, 299, 0, 155, 0,
	156, 0, 157, 0, 0, 158, 159, 0, 160, 0,
	0, 0, 300, 161, 162, 163, 301, 302, 0, 0,
	0, 164, 165, 303, 304, 305, 0, 166, 0, 167,
	0, 0, 0, 0, 168, 306, 0, 307, 0, 169,
	170, 171, 172, 308, 309, 0, 0, 176, 0, 173,
	0, 0, 174, 310, 175, 311, 312, 313, 314, 315,
	0, 316, 0, 0, 177, 178, 179, 0, 180, 181,
	182, 0, 184, 183, 0, 317, 0, 185, 0, 0,
	186, 0, 0, 187, 0, 188, 189, 190, 192, 318,
	191, 0, 193, 194, 196, 195, 0, 0, 0, 319,
	197, 320, 198, 199, 0, 200, 0, 610, 201, 0,
	0, 202, 321, 0, 203, 0, 322, 204, 205, 206,
	207, 208, 0, 209, 323, 210, 324, 211, 0, 212,
	213, 214, 215, 216, 325, 217, 218, 0, 219, 220,
	221, 222, 223, 225, 226, 224, 227, 228, 229, 230,
	0, 231, 0, 232, 233, 326, 234, 0, 238, 239,
	240, 241, 116, 243, 327, 242, 244, 245, 0, 246,
	235, 236, 247, 0, 248, 328, 329, 249, 0, 255,
	250, 251, 237, 252, 254, 330, 253, 331, 0, 256,
	118, 257, 258, 259, 260, 261, 262, 263, 0, 332,
	333, 334, 0, 0, 264, 265, 335, 336, 0, 266,
	267, 268, 269, 0, 0, 270, 271, 272, 273, 0,
	274, 0, 337, 275, 276, 277, 654, 339, 0, 0,
	278, 0, 128, 0, 114, 279, 280, 281, 282, 283,
	0, 115, 0, 0, 0, 0, 0, 0, 131, 132,
	0, 133, 0, 0, 0, 0, 284, 0, 1463, 0,
	1468, 134, 135, 136, 285, 286, 287, 288, 137, 289,
	290, 0, 138, 291, 292, 139, 140, 0, 0, 293,
	294, 295, 0, 141, 296, 0, 0, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 148, 0, 0, 149,
	150, 0, 0, 0, 0, 0, 0, 0, 151, 152,
	343, 153, 297, 154, 298, 299, 0, 155, 0, 156,
	0, 157, 0, 0, 158, 159, 0, 160, 0, 0,
	0, 300, 161, 162, 163, 301, 302, 0, 0, 0,
	164, 165, 303, 304, 305, 0, 166, 0, 167, 0,
	0, 0, 0, 168, 306, 0, 307, 0, 169, 170,
	171, 172, 308, 309, 0, 0, 176, 0, 173, 0,
	0, 174, 310, 175, 311, 312, 313, 314, 315, 0,
	316, 0, 0, 177, 178, 179, 0, 180, 181, 182,
	0, 184, 183, 0, 317, 0, 185, 0, 0, 186,
	0, 0, 187, 0, 188, 189, 190, 192, 318, 191,
	0, 193, 194, 196, 195, 0, 0, 0, 319, 197,
	320, 198, 199, 0, 200, 0, 0, 201, 0, 0,
	202, 321, 0, 203, 0, 322, 204, 205, 206, 207,
	208, 0, 209, 323, 210, 324, 211, 0, 212, 213,
	214, 215, 216, 325, 217, 218, 0, 219, 220, 221,
	222, 223, 225, 226, 224, 227, 228, 229, 230, 0,
	231, 0, 232, 233, 326, 234, 0, 238, 239, 240,
	241, 116, 243, 327, 242, 244, 245, 0, 246, 235,
	236, 247, 0, 248, 328, 329, 249, 0, 255, 250,
	251, 237, 252, 254, 330, 253, 331, 0, 256, 118,
	257, 258, 259, 260, 261, 262, 263, 0, 332, 333,
	334, 0, 0, 264, 265, 335, 336, 0, 266, 267,
	268, 269, 0, 0, 270, 271, 272, 273, 0, 274,
	0, 337, 275, 276, 277, 654, 339, 0, 0, 278,
	0, 128, 0, 114, 279, 280, 281, 282, 283, 0,
	115, 0, 0, 0, 0, 0, 0, 131, 132, 0,
	133, 0, 0, 0, 0, 284, 0, 0, 0, 110,
	134, 135, 136, 285, 286, 287, 288, 137, 289, 290,
	0, 138, 291, 292, 139, 140, 0, 0, 293, 294,
	295, 0, 141, 296, 0, 0, 0, 142, 143, 144,
	0, 145, 0, 146, 147, 148, 0, 0, 149, 150,
	0, 0, 0, 0, 0, 0, 0, 151, 152, 343,
	153, 297, 154, 298, 299, 0, 155, 0, 156, 0,
	157, 0, 0, 158, 159, 0, 160, 0, 0, 0,
	300, 161, 162, 163, 301, 302, 0, 0, 0, 164,
	165, 303, 304, 305, 0, 166, 0, 167, 0, 0,
	0, 0, 168, 306, 0, 307, 0, 169, 170, 171,
	172, 308, 309, 0, 0, 176, 0, 173, 0, 0,
	174, 310, 175, 311, 312, 313, 314, 315, 0, 316,
	0, 0, 177, 178, 179, 0, 180, 181, 182, 0,
	184, 183, 0, 317, 0, 185, 0, 0, 186, 0,
	0, 187, 0, 188, 189, 190, 192, 318, 191, 0,
	193, 194, 196, 195, 0, 0, 0, 319, 197, 320,
	198, 199, 0, 200, 0, 610, 201, 0, 0, 202,
	321, 0, 203, 0, 322, 204, 205, 206, 207, 208,
	0, 209, 323, 210, 324, 211, 0, 212, 213, 214,
	215, 216, 325, 217, 218, 0, 219, 220, 221, 222,
	223, 225, 226, 224, 227, 228, 229, 230, 0, 231,
	0, 232, 233, 326, 234, 0, 238, 239, 240, 241,
	0, 243, 327, 242, 244, 245, 0, 246, 235, 236,
	247, 0, 248, 328, 329, 249, 0, 255, 250, 251,
	237, 252, 254, 330, 253, 331, 0, 256, 0, 257,
	258, 259, 260, 261, 262, 263, 0, 332, 333, 334,
	0, 0, 264, 265, 335, 336, 0, 266, 267, 268,
	269, 0, 0, 270, 271, 272, 273, 0, 274, 0,
	337, 275, 276, 277, 338, 339, 0, 0, 278, 0,
	128, 0, 0, 279, 280, 281, 282, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 1463, 0, 1468, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 0, 0, 278, 0, 0,
	128, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 883, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 0, 0, 278, 0, 128,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 132, 0, 133, 0,
	0, 0, 0, 284, 0, 0, 0, 1200, 134, 135,
	136, 285, 286, 287, 288, 137, 289, 290, 0, 138,
	291, 292, 139, 140, 0, 0, 293, 294, 295, 0,
	141, 296, 0, 0, 0, 142, 143, 144, 0, 145,
	0, 146, 147, 148, 0, 0, 149, 150, 0, 0,
	0, 0, 0, 0, 0, 151, 152, 343, 153, 297,
	154, 298, 299, 0, 155, 0, 156, 0, 157, 0,
	0, 158, 159, 0, 160, 0, 0, 0, 300, 161,
	162, 163, 301, 302, 0, 0, 0, 164, 165, 303,
	304, 305, 0, 166, 0, 167, 0, 0, 0, 0,
	168, 306, 0, 307, 0, 169, 170, 171, 172, 308,
	309, 0, 0, 176, 0, 173, 0, 0, 174, 310,
	175, 311, 312, 313, 314, 315, 0, 316, 0, 0,
	177, 178, 179, 0, 180, 181, 182, 0, 184, 183,
	0, 317, 0, 185, 0, 0, 186, 0, 0, 187,
	0, 188, 189, 190, 192, 318, 191, 0, 193, 194,
	196, 195, 0, 0, 0, 319, 197, 320, 198, 199,
	0, 200, 0, 0, 201, 0, 0, 202, 321, 0,
	203, 0, 322, 204, 205, 206, 207, 208, 0, 209,
	323, 210, 324, 211, 0, 212, 213, 214, 215, 216,
	325, 217, 218, 0, 219, 220, 221, 222, 223, 225,
	226, 224, 227, 228, 229, 230, 0, 231, 0, 232,
	233, 326, 234, 0, 238, 239, 240, 241, 0, 243,
	327, 242, 244, 245, 0, 246, 235, 236, 247, 0,
	248, 328, 329, 249, 0, 255, 250, 251, 237, 252,
	254, 330, 253, 331, 0, 256, 0, 257, 258, 259,
	260, 261, 262, 263, 0, 332, 333, 334, 0, 0,
	264, 265, 335, 336, 0, 266, 267, 268, 269, 0,
	0, 270, 271, 272, 273, 0, 274, 0, 337, 275,
	276, 277, 338, 339, 0, 0, 278, 0, 128, 0,
	0, 279, 280, 281, 282, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 132, 0, 133, 0, 0,
	0, 0, 284, 0, 0, 0, 1759, 134, 135, 136,
	285, 286, 287, 288, 137, 289, 290, 0, 138, 291,
	292, 139, 140, 0, 0, 293, 294, 295, 0, 141,
	296, 0, 0, 0, 142, 143, 144, 0, 145, 0,
	146, 147, 148, 0, 0, 149, 150, 0, 0, 0,
	0, 0, 0, 0, 151, 152, 343, 153, 297, 154,
	298, 299, 0, 155, 0, 156, 0, 157, 0, 0,
	158, 159, 0, 160, 0, 0, 0, 300, 161, 162,
	163, 301, 302, 0, 0, 0, 164, 165, 303, 304,
	305, 0, 166, 0, 167, 0, 0, 0, 0, 168,
	306, 0, 307, 0, 169, 170, 171, 172, 308, 309,
	0, 0, 176, 0, 173, 0, 0, 174, 310, 175,
	311, 312, 313, 314, 315, 0, 316, 0, 0, 177,
	178, 179, 0, 180, 181, 182, 0, 184, 183, 0,
	317, 0, 185, 0, 0, 186, 0, 0, 187, 0,
	188, 189, 190, 192, 318, 191, 0, 193, 194, 196,
	195, 0, 0, 0, 319, 197, 320, 198, 199, 0,
	200, 0, 0, 201, 0, 0, 202, 321, 0, 203,
	0, 322, 204, 205, 206, 207, 208, 0, 209, 323,
	210, 324, 211, 0, 212, 213, 214, 215, 216, 325,
	217, 218, 0, 219, 220, 221, 222, 223, 225, 226,
	224, 227, 228, 229, 230, 0, 231, 0, 232, 233,
	326, 234, 0, 238, 239, 240, 241, 0, 243, 327,
	242, 244, 245, 0, 246, 235, 236, 247, 0, 248,
	328, 329, 249, 0, 255, 250, 251, 237, 252, 254,
	330, 253, 331, 0, 256, 0, 257, 258, 259, 260,
	261, 262, 263, 0, 332, 333, 334, 0, 0, 264,
	265, 335, 336, 0, 266, 267, 268, 269, 0, 0,
	270, 271, 272, 273, 0, 274, 0, 337, 275, 276,
	277, 338, 339, 0, 0, 278, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 694, 683, 684, 681, 682,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 132, 0, 133, 870, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 726, 287,
	727, 137, 728, 729, 0, 138, 291, 292, 139, 140,
	0, 0, 730, 731, 295, 0, 141, 296, 0, 394,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 395, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 732, 154, 733, 734, 0,
	155, 0, 156, 0, 157, 0, 0, 725, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	690, 0, 0, 164, 165, 735, 736, 737, 0, 166,
	0, 167, 0, 0, 396, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 398, 0, 176,
	0, 173, 0, 397, 174, 738, 175, 739, 740, 741,
	742, 743, 0, 701, 0, 399, 177, 178, 179, 400,
	180, 181, 182, 0, 184, 183, 0, 317, 401, 185,
	402, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 403, 193, 194, 196, 195, 0, 0,
	691, 319, 197, 744, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 404, 203, 405, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 745, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 406, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 407, 248, 746, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 747, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 748, 749, 0, 0, 264, 265, 335, 336,
	689, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 750,
	560, 557, 278, 0, 0, 824, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 394, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 395, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 396,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 398, 0, 176, 0, 173, 0, 397, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	399, 177, 178, 179, 400, 180, 181, 182, 0, 184,
	183, 0, 317, 401, 185, 402, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 403, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	404, 203, 405, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 406,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	407, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 124, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 123, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	560, 557, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 127, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 394, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 395, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 396,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 398, 0, 176, 0, 173, 0, 397, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	399, 177, 178, 179, 400, 180, 181, 182, 0, 184,
	183, 0, 317, 401, 185, 402, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 403, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	404, 203, 405, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 406,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	407, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	560, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 127, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 394, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 395, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 396,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 398, 0, 176, 0, 173, 0, 397, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	399, 177, 178, 179, 400, 180, 181, 182, 0, 184,
	183, 0, 317, 401, 185, 402, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 403, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	404, 203, 405, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 406,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	407, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 1396, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 1394, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 1393, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 1398, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	1391, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	1397, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 1392, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	1396, 141, 296, 0, 0, 1436, 142, 143, 144, 0,
	145, 1394, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 1398, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	1435, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 1397, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 1439, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 1891, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 610, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 1127, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	857, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 610, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 851, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 610,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 630, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 346, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 345,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 1669, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	1667, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 1662, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	1103, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	495, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 893, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 0, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 854, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	800, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 795, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 766,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 513, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 509, 333, 334, 0,
	0, 264, 767, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 648, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	646, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 643, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	639, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 141, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 637, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 186, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 191, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 326, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 244, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 332, 333, 334, 0, 0, 264, 265, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 206, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 215,
	216, 325, 599, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 234, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 128, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 0, 0,
	0, 131, 132, 0, 133, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 134, 135, 136, 285, 286, 287,
	288, 137, 289, 290, 0, 138, 291, 292, 139, 140,
	0, 0, 293, 294, 295, 0, 503, 296, 0, 0,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 148,
	0, 0, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 151, 152, 343, 153, 297, 154, 298, 299, 0,
	155, 0, 156, 0, 157, 0, 0, 158, 159, 0,
	160, 0, 0, 0, 300, 161, 162, 163, 301, 302,
	0, 0, 0, 164, 165, 303, 304, 305, 0, 166,
	0, 167, 0, 0, 0, 0, 168, 306, 0, 307,
	0, 169, 170, 171, 172, 308, 309, 0, 0, 176,
	0, 173, 0, 0, 174, 310, 175, 311, 312, 313,
	314, 315, 0, 316, 0, 0, 177, 178, 179, 0,
	180, 181, 182, 0, 184, 183, 0, 317, 0, 185,
	0, 0, 502, 0, 0, 187, 0, 188, 189, 190,
	192, 318, 513, 0, 193, 194, 196, 195, 0, 0,
	0, 319, 197, 320, 198, 199, 0, 200, 0, 0,
	201, 0, 0, 202, 321, 0, 203, 0, 322, 204,
	205, 206, 207, 208, 0, 209, 323, 210, 324, 211,
	0, 212, 213, 214, 215, 216, 325, 217, 218, 0,
	219, 220, 221, 222, 223, 225, 226, 224, 227, 228,
	229, 230, 0, 231, 0, 232, 233, 504, 234, 0,
	238, 239, 240, 241, 0, 243, 327, 242, 505, 245,
	0, 246, 235, 236, 247, 0, 248, 328, 329, 249,
	0, 255, 250, 251, 237, 252, 254, 330, 253, 331,
	0, 256, 0, 257, 258, 259, 260, 261, 262, 263,
	0, 509, 333, 334, 0, 0, 264, 507, 335, 336,
	0, 266, 267, 268, 269, 0, 0, 270, 271, 272,
	273, 0, 274, 0, 337, 275, 276, 277, 338, 339,
	128, 0, 278, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 0, 0, 0, 131, 132, 0, 133,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 134,
	135, 136, 285, 286, 287, 288, 137, 289, 290, 0,
	138, 291, 292, 139, 140, 0, 0, 293, 294, 295,
	0, 141, 296, 0, 0, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 148, 0, 0, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 151, 152, 343, 153,
	297, 154, 298, 299, 0, 155, 0, 156, 0, 157,
	0, 0, 158, 159, 0, 160, 0, 0, 0, 300,
	161, 162, 163, 301, 302, 0, 0, 0, 164, 165,
	303, 304, 305, 0, 166, 0, 167, 0, 0, 0,
	0, 168, 306, 0, 307, 0, 169, 170, 171, 172,
	308, 309, 0, 0, 176, 0, 173, 0, 0, 174,
	310, 175, 311, 312, 313, 314, 315, 0, 316, 0,
	0, 177, 178, 179, 0, 180, 181, 182, 0, 184,
	183, 0, 317, 0, 185, 0, 0, 186, 0, 0,
	187, 0, 188, 189, 190, 192, 318, 191, 0, 193,
	194, 196, 195, 0, 0, 0, 319, 197, 320, 198,
	199, 0, 200, 0, 0, 201, 0, 0, 202, 321,
	0, 203, 0, 322, 204, 205, 0, 207, 208, 0,
	209, 323, 210, 324, 211, 0, 212, 213, 214, 0,
	216, 325, 217, 218, 0, 219, 220, 221, 222, 223,
	225, 226, 224, 227, 228, 229, 230, 0, 231, 0,
	232, 233, 326, 0, 0, 238, 239, 240, 241, 0,
	243, 327, 242, 244, 245, 0, 246, 235, 236, 247,
	0, 248, 328, 329, 249, 0, 255, 250, 251, 237,
	252, 254, 330, 253, 331, 0, 256, 0, 257, 258,
	259, 260, 261, 262, 263, 0, 332, 333, 334, 0,
	0, 264, 265, 335, 336, 0, 266, 267, 268, 269,
	0, 0, 270, 271, 272, 273, 0, 274, 0, 337,
	275, 276, 277, 338, 339, 0, 0, 278, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 913, 914, 0,
	933, 934, 935, 943, 944, 945, 0, 0, 0, 0,
	0, 0, 0, 936, 0, 0, 0, 0, 0, 0,
	916, 0, 0, 947, 0, 913, 914, 0, 933, 934,
	935, 943, 944, 945, 0, 0, 0, 0, 0, 0,
	0, 936, 0, 0, 915, 0, 0, 0, 916, 0,
	930, 947, 0, 913, 914, 0, 933, 934, 935, 943,
	944, 945, 0, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 915, 0, 0, 0, 916, 0, 930, 947,
	0, 0, 913, 914, 0, 933, 934, 935, 943, 944,
	945, 0, 0, 0, 0, 0, 0, 0, 936, 0,
	915, 0, 0, 0, 921, 916, 930, 0, 947, 0,
	913, 914, 0, 933, 934, 935, 943, 944, 945, 0,
	0, 0, 0, 940, 948, 0, 936, 0, 0, 915,
	0, 0, 921, 916, 0, 930, 947, 0, 0, 0,
	0, 946, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 948, 0, 0, 0, 938, 915, 0, 0,
	921, 0, 931, 930, 0, 0, 0, 0, 0, 946,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	948, 0, 0, 0, 938, 0, 0, 937, 0, 921,
	931, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 940, 948,
	0, 0, 938, 0, 0, 937, 0, 921, 931, 0,
	0, 0, 0, 0, 0, 0, 946, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 940, 948, 0, 0,
	0, 938, 0, 937, 0, 0, 0, 931, 0, 0,
	0, 941, 0, 0, 946, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 938,
	0, 0, 937, 0, 0, 931, 0, 0, 0, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 932, 0, 0, 0, 0, 0, 0, 0, 0,
	937, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 939, 0,
	932, 927, 928, 929, 942, 0, 926, 924, 925, 917,
	918, 919, 920, 922, 923, 0, 941, 0, 0, 2045,
	0, 0, 0, 0, 0, 0, 939, 0, 932, 927,
	928, 929, 942, 0, 926, 924, 925, 917, 918, 919,
	920, 922, 923, 0, 941, 0, 0, 2041, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 927, 928, 929,
	942, 0, 926, 924, 925, 917, 918, 919, 920, 922,
	923, 0, 0, 0, 0, 1967, 0, 0, 0, 0,
	0, 0, 0, 939, 0, 0, 927, 928, 929, 942,
	0, 926, 924, 925, 917, 918, 919, 920, 922, 923,
	0, 0, 0, 0, 1938, 0, 0, 0, 0, 0,
	0, 939, 0, 0, 927, 928, 929, 942, 0, 926,
	924, 925, 917, 918, 919, 920, 922, 923, 0, 0,
	913, 914, 1937, 933, 934, 935, 943, 944, 945, 0,
	0, 0, 0, 0, 0, 0, 936, 0, 0, 0,
	0, 0, 0, 916, 0, 0, 947, 0, 913, 914,
	0, 933, 934, 935, 943, 944, 945, 0, 0, 0,
	0, 0, 0, 0, 936, 0, 0, 915, 0, 0,
	0, 916, 0, 930, 947, 0, 913, 914, 0, 933,
	934, 935, 943, 944, 945, 0, 0, 0, 0, 0,
	0, 0, 936, 0, 0, 915, 0, 0, 0, 916,
	0, 930, 947, 0, 0, 913, 914, 0, 933, 934,
	935, 943, 944, 945, 0, 0, 0, 0, 0, 0,
	0, 936, 0, 915, 0, 0, 0, 921, 916, 930,
	0, 947, 0, 913, 914, 0, 933, 934, 935, 943,
	944, 945, 0, 0, 0, 0, 940, 948, 0, 936,
	0, 0, 915, 0, 0, 921, 916, 0, 930, 947,
	0, 0, 0, 0, 946, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 948, 0, 0, 0, 938,
	915, 0, 0, 921, 0, 931, 930, 0, 0, 0,
	0, 0, 946, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 948, 0, 0, 0, 938, 0, 0,
	937, 0, 921, 931, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 948, 0, 0, 938, 0, 0, 937, 0,
	921, 931, 0, 0, 0, 0, 0, 0, 0, 946,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 940,
	948, 0, 0, 0, 938, 0, 937, 0, 0, 0,
	931, 0, 0, 0, 941, 0, 0, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	0, 0, 938, 0, 0, 937, 0, 0, 931, 0,
	0, 0, 941, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 932, 0, 0, 0, 0, 0,
	0, 0, 0, 937, 0, 0, 0, 0, 0, 0,
	941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 0, 932, 927, 928, 929, 942, 0, 926,
	924, 925, 917, 918, 919, 920, 922, 923, 0, 941,
	0, 0, 1843, 0, 0, 0, 0, 0, 0, 939,
	0, 932, 927, 928, 929, 942, 0, 926, 924, 925,
	917, 918, 919, 920, 922, 923, 0, 941, 0, 0,
	1762, 0, 0, 0, 0, 0, 0, 939, 0, 0,
	927, 928, 929, 942, 0, 926, 924, 925, 917, 918,
	919, 920, 922, 923, 0, 0, 0, 0, 1738, 0,
	0, 0, 0, 0, 0, 0, 939, 0, 0, 927,
	928, 929, 942, 0, 926, 924, 925, 917, 918, 919,
	920, 922, 923, 0, 0, 0, 0, 1285, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 927, 928, 929,
	942, 0, 926, 924, 925, 917, 918, 919, 920, 922,
	923, 913, 914, 1525, 933, 934, 935, 943, 944, 945,
	0, 0, 0, 0, 0, 0, 0, 936, 0, 0,
	0, 0, 0, 0, 916, 0, 0, 947, 0, 913,
	914, 0, 933, 934, 935, 943, 944, 945, 0, 0,
	0, 0, 0, 0, 0, 936, 0, 0, 915, 0,
	0, 0, 916, 0, 930, 947, 0, 913, 914, 0,
	933, 934, 935, 943, 944, 945, 0, 0, 0, 0,
	0, 0, 0, 936, 0, 0, 915, 0, 1418, 0,
	916, 0, 930, 947, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 915, 0, 0, 0, 921, 2238,
	930, 0, 0, 0, 1563, 1564, 0, 1581, 1582, 1583,
	0, 0, 0, 0, 0, 0, 0, 940, 948, 0,
	1731, 0, 0, 0, 0, 0, 921, 0, 1595, 1419,
	0, 1594, 0, 0, 0, 946, 0, 1563, 1564, 0,
	1581, 1582, 1583, 0, 0, 940, 948, 0, 0, 0,
	938, 0, 0, 1730, 921, 0, 931, 1578, 0, 0,
	0, 0, 0, 946, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 948, 0, 0, 0, 938, 0,
	0, 937, 0, 0, 931, 0, 0, 0, 0, 0,
	1578, 946, 0, 0, 0, 0, 0, 2237, 0, 0,
	0, 0, 0, 0, 0, 0, 938, 0, 0, 937,
	0, 1569, 931, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	0, 0, 0, 0, 1569, 941, 0, 0, 1584, 0,
	0, 0, 0, 0, 1174, 0, 0, 932, 0, 0,
	913, 914, 0, 933, 934, 935, 943, 944, 945, 1579,
	0, 0, 0, 941, 0, 0, 936, 0, 0, 0,
	1173, 1584, 0, 916, 0, 932, 947, 0, 913, 914,
	0, 933, 934, 935, 943, 944, 945, 0, 0, 0,
	0, 941, 1579, 0, 936, 0, 0, 915, 0, 0,
	0, 916, 939, 930, 947, 927, 928, 929, 942, 0,
	926, 924, 925, 917, 918, 919, 920, 922, 923, 0,
	0, 0, 0, 0, 0, 915, 0, 0, 0, 0,
	939, 930, 1580, 927, 928, 929, 942, 0, 926, 924,
	925, 917, 918, 919, 920, 922, 923, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 921, 939, 0,
	0, 927, 928, 929, 942, 1580, 926, 924, 925, 917,
	918, 919, 920, 922, 923, 0, 940, 948, 0, 0,
	0, 0, 0, 0, 0, 921, 0, 0, 0, 0,
	0, 0, 0, 0, 946, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 948, 0, 0, 0, 938,
	0, 0, 0, 0, 0, 931, 0, 0, 1575, 1576,
	1577, 0, 946, 1574, 1572, 1573, 1565, 1566, 1567, 1568,
	1570, 1571, 0, 0, 0, 0, 0, 938, 0, 0,
	937, 0, 0, 931, 0, 0, 0, 0, 0, 0,
	0, 1575, 1576, 1577, 0, 0, 1574, 1572, 1573, 1565,
	1566, 1567, 1568, 1570, 1571, 0, 0, 0, 937, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 0,
	0, 913, 914, 0, 933, 934, 935, 943, 944, 945,
	0, 0, 0, 0, 941, 0, 0, 936, 0, 0,
	0, 0, 0, 0, 916, 0, 932, 947, 0, 913,
	914, 0, 933, 934, 935, 943, 944, 945, 0, 0,
	0, 0, 941, 0, 0, 936, 0, 0, 915, 0,
	0, 0, 916, 0, 930, 947, 0, 913, 914, 0,
	933, 934, 935, 943, 944, 945, 0, 0, 0, 0,
	0, 0, 0, 936, 0, 0, 915, 1596, 0, 0,
	916, 939, 930, 947, 927, 928, 929, 942, 0, 926,
	924, 925, 917, 918, 919, 920, 922, 923, 0, 0,
	0, 0, 0, 0, 915, 0, 0, 0, 921, 939,
	930, 0, 927, 928, 929, 942, 0, 926, 924, 925,
	917, 918, 919, 920, 922, 923, 0, 940, 948, 0,
	0, 0, 0, 0, 0, 0, 921, 0, 0, 0,
	0, 1601, 0, 0, 0, 946, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 948, 0, 0, 0,
	938, 0, 0, 0, 921, 0, 931, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 948, 0, 0, 0, 938, 0,
	0, 937, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 946, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 938, 0, 0, 937,
	0, 0, 931, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	913, 914, 0, 933, 934, 935, 943, 944, 945, 0,
	1742, 0, 0, 941, 0, 0, 936, 0, 0, 0,
	0, 0, 0, 916, 0, 932, 947, 0, 913, 914,
	0, 933, 934, 935, 943, 944, 945, 0, 0, 0,
	0, 941, 0, 0, 936, 0, 0, 915, 1554, 0,
	0, 916, 939, 930, 947, 927, 928, 929, 942, 0,
	926, 924, 925, 917, 918, 919, 920, 922, 923, 0,
	0, 0, 0, 0, 0, 915, 0, 0, 0, 0,
	939, 930, 0, 927, 928, 929, 942, 0, 926, 924,
	925, 917, 918, 919, 920, 922, 923, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 921, 939, 0,
	0, 927, 928, 929, 942, 0, 926, 924, 925, 917,
	918, 919, 920, 922, 923, 0, 940, 948, 0, 0,
	0, 0, 0, 0, 0, 921, 0, 0, 0, 0,
	0, 0, 0, 0, 946, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 948, 0, 0, 0, 938,
	0, 0, 0, 0, 0, 931, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 938, 0, 0,
	937, 0, 0, 931, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 937, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 0,
	0, 913, 914, 0, 933, 934, 935, 943, 944, 945,
	0, 0, 0, 0, 941, 0, 0, 936, 0, 0,
	0, 0, 0, 0, 916, 0, 932, 947, 0, 913,
	914, 0, 933, 934, 935, 943, 944, 945, 0, 0,
	0, 0, 941, 0, 0, 936, 0, 0, 915, 0,
	0, 0, 916, 0, 930, 947, 0, 913, 914, 0,
	933, 934, 935, 943, 944, 945, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 915, 0, 0, 0,
	916, 939, 930, 947, 927, 928, 929, 942, 0, 926,
	924, 925, 917, 918, 919, 920, 922, 923, 0, 0,
	0, 0, 0, 0, 915, 0, 0, 0, 921, 939,
	930, 0, 927, 928, 929, 942, 0, 926, 924, 925,
	917, 918, 919, 920, 922, 923, 0, 940, 948, 1563,
	1564, 0, 1581, 1582, 1583, 0, 921, 0, 0, 0,
	0, 0, 0, 0, 0, 946, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 948, 0, 0, 0,
	938, 0, 0, 0, 921, 0, 931, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 0, 0, 0, 0,
	0, 0, 1578, 940, 948, 0, 0, 0, 938, 0,
	0, 937, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 946, 0, 0, 0, 1563, 1564, 0, 1581, 1582,
	1583, 0, 0, 0, 0, 0, 938, 0, 0, 0,
	0, 0, 931, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1569, 0, 0, 932,
	0, 0, 0, 0, 0, 913, 914, 0, 933, 934,
	935, 943, 944, 945, 0, 941, 1585, 0, 1578, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 916, 0,
	0, 947, 0, 1584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 0, 0, 0, 0,
	0, 0, 915, 0, 1579, 932, 0, 0, 930, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 1569, 0, 0, 1563, 1564, 0, 1581, 1582,
	1583, 0, 939, 0, 0, 927, 928, 929, 942, 0,
	926, 924, 925, 917, 918, 919, 920, 922, 923, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1584,
	939, 0, 921, 927, 928, 929, 942, 0, 926, 924,
	925, 917, 918, 919, 920, 922, 923, 1580, 1578, 0,
	1579, 940, 948, 0, 0, 0, 0, 0, 939, 0,
	0, 927, 928, 929, 942, 0, 926, 924, 925, 917,
	918, 919, 920, 922, 923, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 938, 0, 0, 0, 0, 0,
	931, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1569, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1575, 1576, 1577, 0, 0, 1574, 1572,
	1573, 1565, 1566, 1567, 1568, 1570, 1571, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1579, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1575,
	1576, 1577, 0, 0, 1574, 1572, 1573, 1565, 1566, 1567,
	1568, 1570, 1571, 0, 0, 0, 1038, 1028, 1057, 1020,
	1048, 1047, 0, 1580, 1022, 1021, 0, 0, 0, 0,
	1059, 1058, 0, 0, 0, 0, 939, 0, 0, 927,
	928, 929, 942, 0, 926, 924, 925, 917, 918, 919,
	920, 922, 923, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1053, 0, 1045, 1044, 0, 0, 0,
	0, 0, 0, 0, 0, 1043, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1042, 1040, 1041, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1575,
	1576, 1577, 0, 0, 1574, 1572, 1573, 1565, 1566, 1567,
	1568, 1570, 1571, 1031, 1030, 1032, 1033, 1034, 1035, 1036,
	0, 1056, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1038, 1028, 1057, 1020, 1048, 1047, 0, 0, 1022,
	1021, 0, 0, 0, 0, 1059, 1058, 0, 0, 1024,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1046, 0, 0, 0, 1029, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1053, 0,
	1045, 1044, 0, 0, 0, 0, 0, 0, 0, 0,
	1043, 0, 0, 0, 1039, 0, 0, 589, 1220, 1218,
	1219, 1222, 1221, 0, 0, 0, 0, 0, 1042, 1040,
	1041, 0, 0, 0, 0, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 1025, 0, 0, 566, 0, 0,
	0, 0, 0, 0, 0, 1037, 1026, 0, 1031, 1030,
	1032, 1033, 1034, 1035, 1036, 1061, 1056, 0, 567, 0,
	0, 0, 0, 569, 0, 0, 0, 1023, 575, 576,
	1054, 1055, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1024, 590, 570, 0, 0, 0,
	0, 0, 1027, 0, 0, 0, 1046, 1060, 0, 0,
	1029, 0, 0, 0, 0, 0, 0, 0, 588, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 571, 1039,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 572, 573, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1025,
	579, 0, 0, 574, 581, 0, 0, 0, 0, 0,
	1037, 1026, 0, 0, 578, 0, 0, 0, 0, 0,
	1061, 0, 0, 0, 591, 0, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 1054, 1055, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1027, 0, 0,
	0, 0, 1060, 0, 577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 582, 592, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 0, 0, 0, 587,
	0, 0, 0, 593, 0, 0, 0, 0, 580, 584,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586,
}
var sqlPact = [...]int{

	208, -1000, 14, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 18291, 18291, -1000, -1000,
	22386, -1000, -1000, -1000, -1000, -1000, -1000, 22071, 759, 993,
	769, 22386, 2331, 1121, 5675, 1191, 22386, 1175, 1121, 23961,
	-1000, -1000, 23961, 1093, -1000, -1000, -1000, -1000, -1000, 27741,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 520, 523,
	520, 520, 521, 633, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 927, 708, 143, -1000, 909,
	-14, 15103, 31043, 699, 27426, 22386, 1522, 7, 20496, 333,
	208, 591, -7, 18921, 22386, -1000, 16, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1314, 396, 16, -1000, -1000, 21756, -1000, 1313, 1195, 1170,
	20496, -1000, -1000, -1000, -1000, -1000, 27111, 26796, 26481, 26166,
	25851, 338, -1000, 13793, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1002, -1000, 0,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11458, 337, 11458, 1001, -1000, 22386, -1000, -1000, -1000, -1000,
	-1000, -1000, 1709, 691, 335, 25536, -1000, 990, -1000, 433,
	598, -1000, -1000, 14776, 42, 990, -1000, 990, -1000, -1000,
	-1000, 590, 23961, 20496, -1000, 11458, 11458, 25221, 22386, 22386,
	1218, 24906, -1000, 909, -1000, -1000, -1000, 1149, 1520, 1520,
	1520, 1553, 157, 151, 143, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1668, -1000, -1000, -1000, -1000, 1685,
	-1000, -1000, -1000, -1000, -1000, 981, 17976, 896, 1537, 1312,
	-1000, 1000, 1308, 1307, 1305, 1303, 1301, -1000, 840, -1000,
	1342, 529, -1000, 1298, 842, 502, -1000, 1297, 1296, -1000,
	-1000, -1000, -1000, 430, 21441, 24591, 22386, 21126, -11, 22386,
	-1000, 334, -11, 10097, 10097, -1000, -1000, 333, -1000, 374,
	17334, -1000, 9417, -1000, 17976, 18921, -7, -45, -1000, -1000,
	-1000, 5348, 17976, 668, 16376, 16, -1000, -1000, -1000, -1000,
	-1000, 20496, 22386, 22386, 701, 24276, -1000, 1427, 126, 1415,
	-1000, -152, 124, 1414, -1000, 124, 1411, -45, 1400, -1000,
	11458, 39, -1000, -1000, 333, 18291, 996, 30301, -1000, 11458,
	11458, 11458, 11458, 11458, 899, 364, -1000, 332, 331, 6683,
	-1000, -1000, 1683, -1000, -1000, -1000, 156, -1000, -1000, 11458,
	16, -1000, -1000, -1000, -1000, 329, 1703, -1000, 449, -1000,
	-1000, -1000, 432, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1340, 328, 327, 324, -1000, -1000, -1000, -1000,
	322, 321, 312, 311, 307, 304, 303, 302, 300, 299,
	298, 296, 293, 291, 289, 854, -1000, 456, -1000, -1000,
	456, 456, -1000, 259, 259, 263, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 259, -1000, -1000, -1000, 423, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 286, 1605, 30944, 30301,
	18291, -1000, -1000, 22386, 11458, -1000, 1600, 990, -21, -1000,
	-1000, -1000, -1000, 1137, 1113, 558, 799, 14449, 14122, 1473,
	-1000, -1000, -1000, 40, 5675, -1000, -21, -1000, 23961, -1000,
	127, -1000, 30301, 30301, 273, 1097, 440, 144, 23646, 440,
	1088, -1000, 1149, -1000, 998, 1183, 10778, 1173, 11458, 143,
	-1000, -1000, 143, 143, 7704, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 20811, -1000, -1000, 685, 22386,
	1339, 18291, 22386, 22386, 22386, 22386, 22386, -1000, -1000, 1047,
	1335, 22386, 1128, -1000, -1000, 22386, 22386, 788, 631, -1000,
	820, 1396, 466, 822, 1395, 792, 791, 1385, 22386, -11,
	1598, 22386, 74, -1000, 29550, -1000, 74, -1000, -1000, -1000,
	22386, 35, -1000, 30301, -1000, 225, -1000, 22386, -1000, -1000,
	-33, -1000, -1000, 1295, 33, -1000, -1000, 445, 96, 1596,
	96, 16696, -1000, 22386, 22386, -1000, 22386, -1000, -1000, 22386,
	5675, -1000, 22386, 22386, -1000, 22386, 22386, 28, 30301, 2232,
	19236, 589, -1000, 30819, 30944, 5675, 620, 11458, 11458, 11458,
	11458, 11458, 11458, 11458, 11458, 11458, 11458, 11458, 11458, 11458,
	11458, 11458, 11458, 11458, 11458, 11458, 11458, 11458, 11458, 1193,
	11458, 588, 11458, 11458, 11458, 11458, 1223, 893, 256, 1055,
	-1000, 1652, 1652, 1652, 30357, 30357, 169, 364, -1000, 11458,
	-1000, 10438, 151, 28915, -20, -1000, -1000, -1000, 8044, 454,
	30301, 16, 6342, -1000, 1680, 712, 1350, 1251, 268, 149,
	148, 146, 11458, 11458, 12138, 12138, 11458, 12478, 11458, 11458,
	7023, 11458, 11458, 11458, 11458, 11458, 11458, -1000, 267, -1000,
	-1000, -1000, -1000, 1679, -1000, -1000, 1678, -1000, 619, 608,
	1677, -14, 23, -1000, 1581, -1000, -1000, -1000, -1000, 102,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 263, 854, 259, 259, 259, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 423, -1000, -1000, 456, 456, 456,
	-1000, -1000, 1293, -1000, 426, 21, 519, -21, 990, 987,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1701, -34, -1000, -1000, -34, -1000, -1000,
	5675, -1000, -1000, -1000, 20496, 19551, 1591, 1384, 867, -1000,
	1590, 22386, 999, 1067, -1000, 604, 1383, -1000, -1000, -1000,
	-1000, 30301, -1000, 372, -1000, -1000, 30301, 735, 1204, -1000,
	1204, -35, -1000, 29337, 1162, 22386, -1000, -1000, -1000, -1000,
	-1000, 22386, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	209, -1000, -1000, -1000, -1000, 22386, 22386, 22386, -85, 934,
	-1000, 19866, 1504, 1503, 1493, 20496, 1566, -14, 1292, 1565,
	-14, 1289, 587, 22386, 586, 584, 20496, -1000, 257, 15,
	445, 10097, 16057, 5675, -1000, 445, 145, 9417, -1000, 1232,
	1012, -1000, 441, 17976, 664, 1284, 22386, 738, 11458, 794,
	-1000, 15738, 469, 22386, 738, 63, -1000, -1000, -1000, 413,
	22386, -1000, -1000, -1000, 126, -1000, -1000, 124, 124, -45,
	-1000, 11458, -1000, -1000, 22386, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 429, 528, 528, 610, 610,
	610, 610, 1641, 2665, 2704, 207, 4088, 4088, 4088, 2365,
	284, 284, 4088, 4088, 4088, 30357, 30329, 994, 11458, 11458,
	583, 891, 256, 994, 11458, 994, 994, 994, 994, -1000,
	1069, -1000, -1000, -1000, -1000, 1281, 255, 12478, 12478, -1000,
	-1000, -1000, 6683, 12818, -1000, -1000, -1000, -1000, 254, 11458,
	-1000, 28943, -196, 1, -1000, -1000, 11458, -5, -8, -1000,
	-1000, 672, -1000, 11458, -1000, -30, 11458, 11458, 11458, 136,
	135, -1000, 576, -1000, 574, 572, 567, -1000, 253, 894,
	252, 251, 11458, -1000, -1000, -1000, 30088, 3573, 134, 1278,
	-145, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 133, 123,
	30060, -145, 122, 30429, -1000, 12478, 12478, 12478, 6683, 250,
	121, 29309, -145, 29847, 9757, 9757, 9757, 117, 29819, 11458,
	-145, 3537, 3508, 2797, -12, -19, -24, 1676, -25, 115,
	424, 391, 107, -1000, -1000, 30944, 357, 350, -1000, 1675,
	22386, -1000, 1196, -1000, -1000, 749, -1000, 814, -1000, 15103,
	-1000, -1000, 106, -26, -46, 30944, -1000, -1000, -1000, -1000,
	-1000, 22386, 325, 22386, 22386, -1000, 243, 1159, 1157, -14,
	22386, -1000, 1700, -14, 22386, 1379, 1435, 402, 22386, 735,
	-1000, 11458, 1674, -1000, -1000, -1000, 7704, -1000, -1000, -1000,
	22386, -179, -83, -1000, -1000, -1000, -1000, -1000, 225, 771,
	22386, 22386, 22386, -1000, -1000, 1065, 23331, 1063, 30944, 242,
	22386, 22386, 23016, 22701, 22386, 761, -14, -1000, 241, -14,
	-1000, 240, 22386, 766, 22386, 22386, 750, -14, -1000, 1250,
	-1000, -97, 1130, 159, -186, 119, 420, -1000, 15419, -1000,
	1250, -1000, -1000, 441, 1277, 635, -1000, 931, -1000, -1000,
	654, -1000, -1000, 7363, 30301, -1000, 738, 1497, -36, -1000,
	-1000, -1000, 445, 16696, 16057, 9417, -48, -1000, -1000, -1000,
	30301, -83, 11458, 994, 994, 11458, 12478, 12478, -1000, 994,
	-1000, -1000, -1000, -1000, -1000, 1271, 238, 11458, 30944, 29427,
	29394, -53, -1000, 9077, -79, -1000, 11458, -1000, 28886, -1000,
	-1000, 348, 1431, -1000, 11458, 29791, 104, 8737, -1000, 29578,
	-32, -32, -1000, 1699, 1111, 882, 806, 717, 1673, -1000,
	17015, 446, 922, 28858, 30819, 30944, -1000, 11458, -1000, -1000,
	1268, 11458, -1000, 30819, 30944, 12478, 12478, 12478, 12478, 12478,
	12478, 12478, 12478, 12478, 12478, 12478, 12478, 12478, 12478, 12478,
	12478, 12478, 12478, 12478, 1108, 12478, 1650, 1650, 1650, -81,
	8397, -1000, 1319, 1268, 11458, 11458, 30944, 99, 91, 90,
	-1000, 11458, -145, 11458, 11458, 11458, -1000, -1000, -1000, 89,
	-1000, 1672, -1000, -1000, -1000, -1000, -1000, 579, 1671, 85,
	-83, -1000, -1000, -1000, -1000, -1000, 1225, -1000, 19551, -1000,
	236, 22386, 13474, 233, 845, 11458, 232, 222, -1000, 217,
	-1000, -1000, 214, 22386, 1142, 402, 18606, -1000, 440, 938,
	28830, -1000, 1510, 5675, 22386, -1000, -1000, -1000, 564, 559,
	1376, -1000, 1052, -1000, 479, 865, -1000, 1374, 1040, 1370,
	1040, -1000, -85, 780, -1000, 11458, -1000, 11458, -1000, 555,
	-1000, -1000, 547, 84, 1241, 1551, -1000, 16057, 1185, 1168,
	16057, 1246, 915, 915, 915, -1000, 213, 346, 420, 4680,
	11458, 20181, 911, 67, 80, 1130, 1241, -1000, 17976, 603,
	212, -1000, -89, -1000, -1000, 237, -14, 738, -1000, -108,
	-1000, 412, 1580, 994, 3955, 2736, 11458, 30944, 30545, -59,
	11458, 11458, -1000, -64, -1000, 11458, 345, 30301, -1000, -1000,
	-1000, 30301, 11458, 1694, 11458, 78, 75, 73, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 71, -1000, -1000, 28056,
	11458, 65, -1000, 64, 62, 30301, 1319, 30301, -1000, -1000,
	428, 428, 700, 700, 700, 700, 1650, 2580, 2643, 2230,
	2433, 2433, 2433, 387, 398, 398, 2433, 2433, 2433, 1262,
	1109, 206, 30505, 11458, -65, -1000, -1000, -1000, 30301, 30301,
	59, -1000, -1000, -1000, -145, 235, 28490, 28462, -1000, 55,
	-1000, 344, 343, -1000, -1000, 1224, -1000, 1049, 13474, 204,
	-69, -1000, 317, 1517, 11458, -1000, -1000, 193, 22386, -1000,
	28433, 13474, 22386, 19551, 1585, 13474, 968, 1148, 402, 18606,
	-1000, 604, -1000, -1000, -1000, 1510, -1000, 22386, 22386, 22386,
	1369, -1000, -1000, 1135, 1202, 504, 22386, -1000, 22386, -1000,
	22386, 22386, 22386, -70, -71, 22386, 22386, -1000, 443, 11458,
	11458, 1130, 16057, 16057, 1037, 1167, 16057, -1000, -1000, -1000,
	-1000, 342, 385, 420, 20181, -1000, 1666, 1165, -93, -1000,
	-1000, 22386, 192, -1000, 420, 443, -114, 17661, 1698, 1441,
	22386, 1483, -1000, -1000, 191, 11458, 11458, 30545, -95, -1000,
	994, 994, -1000, 28405, -1000, 30301, -1000, 29578, -1000, -1000,
	-1000, -1000, 864, -1000, 28377, -1000, -1000, -1000, -1000, 12478,
	1261, 186, 30944, 4331, -1000, -1000, 11458, -1000, -1000, -1000,
	-1000, -1000, 873, -1000, 22386, -1000, 5675, 22386, 1257, 1032,
	-1000, -1000, 1156, 185, 12478, 22386, -117, 13474, 863, 13474,
	1510, 16, 5675, 1510, 4222, 6342, -125, -1000, -126, -130,
	53, -14, -131, 22386, -1000, 402, 18606, -1000, 1435, -1000,
	-1000, -1000, -1000, 22386, 1031, -1000, 1017, 11458, -1000, 30944,
	1040, 1040, -1000, 536, 535, 532, 530, -1000, -1000, -1000,
	22386, 30301, -145, -1000, 1037, -1000, 184, 11458, 16057, -1000,
	-186, -1000, -132, -1000, 20181, -1000, 340, -194, -1000, 399,
	-1000, 420, 180, 22386, 20181, -1000, -1000, 176, 16, -136,
	-1000, 389, 630, -143, 22386, -1000, -1000, 6002, 994, 994,
	-1000, -1000, 51, 922, 1550, -1000, 30615, 12478, 30944, -144,
	-1000, 3986, 22386, 866, -1000, -1000, 22386, 1041, -1000, -1000,
	11458, 30505, 171, 863, -149, 1225, 170, -1000, -1000, -1000,
	-1000, -1000, -1000, 1517, -30, -1000, -1000, 801, 1225, -1000,
	863, 168, 18606, -1000, 1142, -1000, -1000, -1000, 30301, 1508,
	-1000, -1000, 22386, 22386, 165, 162, -118, -1000, 1579, -1000,
	22386, 30301, -1000, 420, -1000, 1663, -1000, -1000, 1165, -1000,
	5018, 20181, 22386, -150, -1000, 11458, 1698, -1000, -1000, 1696,
	695, -1000, 445, -1000, -1000, 784, 11458, 30615, -154, -1000,
	-1000, 161, -1000, -1000, 1363, 3925, 1117, 22386, 1225, 863,
	-1000, 22386, 1510, 50, 22386, -1000, 1225, 13474, -1000, 1148,
	483, 5675, -1000, -1000, 11458, 11458, 22386, 160, -161, 20181,
	-1000, -1000, -1000, 1661, -1000, -162, -1000, -32, -1000, -1000,
	16696, -1000, 48, 11798, 11798, -145, -1000, 22386, 1354, -1000,
	941, 952, 34, -1000, 1225, -163, -1000, -1000, 144, -1000,
	-169, -1000, -1000, 11458, -1000, -174, -176, -1000, -1000, -1000,
	-1000, 318, -1000, 29, -156, -1000, -1000, -1000, 13147, 972,
	726, 29281, -1000, -187, 22386, -1000, 961, 958, 705, -1000,
	-1000, -1000, -1000, -1000, -1000, 1117, 863, 30301, -1000, -1000,
	-1000, 1694, -1000, 1613, -1000, -1000, -1000, -1000, -1000, 942,
	-1000, -1000, 1448, -1000, 494, 1053, 1053, 941, 1225, 11118,
	-1000, -1000, -1000, -1000, 1636, -1000, -1000, 1120, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2028, 2026, 1468, 1527, 2021, 2016, 2014, 2012, 2010,
	2008, 2004, 2002, 2000, 1998, 1990, 1981, 1979, 1978, 1976,
	1975, 1973, 1972, 1971, 1970, 1506, 1968, 1967, 1966, 1965,
	1962, 1960, 1496, 1958, 1492, 1490, 1484, 1957, 88, 100,
	1480, 1955, 1953, 1475, 1950, 1949, 1944, 1941, 1937, 74,
	1936, 1935, 1933, 1932, 1931, 1928, 149, 160, 1927, 1451,
	1926, 1923, 1922, 1921, 1920, 1919, 1916, 1915, 1914, 1913,
	1912, 1911, 1910, 1909, 1907, 1904, 1902, 1899, 158, 1897,
	1893, 1449, 1439, 1889, 1888, 14, 1880, 83, 1876, 69,
	146, 2617, 136, 1869, 1865, 1860, 24, 95, 91, 1854,
	58, 1853, 1851, 54, 27, 19, 29, 1847, 94, 1846,
	1845, 1463, 32, 1844, 1843, 137, 1842, 36, 40, 1008,
	155, 153, 109, 130, 1841, 1839, 1838, 1837, 53, 1836,
	1, 1835, 1832, 10, 78, 12, 1830, 59, 23, 1828,
	1826, 131, 1825, 86, 106, 1381, 118, 142, 47, 1819,
	82, 11, 89, 1818, 1817, 150, 45, 1816, 33, 84,
	138, 1815, 56, 162, 49, 35, 67, 126, 1813, 1812,
	1810, 101, 1808, 111, 77, 1807, 1806, 71, 1805, 139,
	134, 1803, 1802, 98, 1800, 132, 1799, 1798, 159, 151,
	120, 4, 34, 65, 9, 1385, 1382, 122, 80, 25,
	26, 1797, 2449, 948, 813, 31, 102, 73, 64, 105,
	68, 76, 147, 28, 1795, 1793, 127, 1792, 1790, 1789,
	1788, 1787, 104, 1786, 1784, 79, 144, 16, 18, 22,
	96, 43, 66, 90, 114, 156, 110, 1783, 87, 129,
	1782, 207, 1781, 1780, 1124, 121, 1777, 1776, 1773, 1068,
	1037, 853, 21, 1766, 1765, 751, 214, 1764, 1761, 81,
	1758, 123, 117, 1752, 143, 141, 17, 1750, 128, 46,
	103, 1747, 107, 44, 0, 85, 42, 1746, 113, 72,
	1741, 1740, 1738, 1737, 30, 6, 8, 7, 5, 2,
	62, 39, 1736, 1735, 133, 92, 61, 1734, 157, 1731,
	1730, 1728, 50, 1726, 20, 1724, 15, 1722, 1720, 13,
	3, 1719, 1718, 135, 1716, 99, 1715, 1584, 1714, 152,
	1713, 1712, 1567, 51, 108,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 4, 4, 5, 5, 5,
	5, 5, 7, 8, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 98, 98,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 95, 95, 100, 100, 100,
	102, 102, 99, 99, 94, 94, 20, 20, 272, 272,
	273, 273, 84, 84, 88, 88, 85, 86, 86, 87,
	87, 24, 24, 24, 21, 21, 22, 23, 25, 25,
	25, 25, 25, 25, 32, 33, 33, 33, 33, 33,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	147, 147, 146, 146, 149, 149, 35, 35, 38, 38,
	38, 38, 38, 39, 39, 39, 39, 39, 39, 39,
	39, 240, 240, 239, 37, 214, 214, 40, 172, 172,
	41, 41, 41, 41, 42, 48, 313, 313, 313, 317,
	317, 318, 318, 319, 319, 319, 319, 319, 319, 319,
	315, 315, 46, 46, 46, 46, 83, 51, 51, 51,
	51, 51, 51, 53, 55, 52, 52, 52, 54, 54,
	56, 56, 56, 56, 57, 57, 57, 57, 58, 58,
	127, 127, 265, 264, 264, 270, 270, 270, 125, 125,
	125, 125, 125, 126, 126, 126, 263, 263, 263, 263,
	271, 271, 271, 271, 271, 271, 269, 269, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 71, 71, 78, 78,
	78, 78, 78, 78, 60, 65, 65, 65, 61, 66,
	67, 68, 68, 68, 62, 62, 70, 70, 70, 69,
	75, 75, 75, 75, 72, 72, 72, 73, 73, 76,
	76, 76, 63, 64, 77, 74, 74, 74, 36, 314,
	314, 316, 316, 44, 28, 28, 29, 29, 128, 128,
	129, 129, 193, 193, 193, 193, 130, 130, 101, 101,
	101, 192, 282, 282, 283, 283, 283, 283, 283, 283,
	284, 284, 284, 284, 284, 284, 284, 280, 280, 281,
	278, 278, 279, 279, 279, 279, 320, 320, 191, 191,
	133, 133, 287, 287, 287, 287, 285, 285, 285, 285,
	285, 288, 286, 289, 289, 289, 289, 289, 226, 226,
	226, 80, 30, 107, 107, 31, 27, 27, 176, 176,
	137, 137, 231, 231, 231, 118, 118, 96, 96, 96,
	14, 11, 11, 11, 11, 11, 11, 19, 19, 17,
	17, 177, 177, 178, 178, 45, 47, 50, 79, 79,
	79, 79, 79, 322, 322, 114, 114, 114, 114, 115,
	115, 188, 188, 189, 189, 190, 190, 190, 109, 108,
	110, 110, 26, 26, 103, 103, 104, 104, 105, 105,
	106, 106, 323, 323, 43, 43, 82, 121, 121, 185,
	185, 185, 187, 187, 186, 186, 186, 162, 162, 162,
	81, 142, 142, 151, 151, 152, 152, 237, 153, 153,
	49, 49, 91, 91, 89, 89, 89, 89, 89, 89,
	90, 90, 92, 92, 92, 92, 92, 92, 92, 295,
	295, 295, 298, 298, 294, 296, 296, 297, 297, 321,
	321, 163, 163, 163, 132, 131, 131, 135, 135, 134,
	136, 136, 230, 230, 230, 160, 160, 160, 160, 179,
	179, 180, 180, 181, 181, 182, 182, 182, 183, 183,
	184, 184, 159, 159, 210, 210, 93, 93, 141, 141,
	143, 143, 200, 200, 200, 201, 201, 199, 199, 199,
	199, 232, 232, 232, 232, 232, 232, 232, 311, 311,
	311, 312, 312, 229, 229, 233, 233, 233, 233, 233,
	233, 227, 227, 227, 227, 228, 228, 238, 238, 166,
	166, 166, 166, 164, 164, 165, 165, 234, 234, 234,
	234, 161, 161, 235, 235, 235, 194, 194, 241, 241,
	241, 259, 259, 140, 140, 140, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 243, 243, 243, 243, 245, 245, 245,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 258, 258,
	258, 258, 258, 246, 246, 253, 253, 254, 254, 255,
	256, 247, 247, 248, 248, 249, 250, 257, 257, 257,
	257, 261, 261, 251, 251, 251, 251, 251, 252, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 174, 174, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 204, 204, 204,
	204, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 290, 290, 290, 290, 290, 290, 290, 292,
	292, 293, 293, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 299, 299, 300, 300, 302, 302, 303, 303,
	304, 305, 305, 305, 306, 307, 307, 301, 301, 308,
	308, 308, 309, 309, 310, 310, 310, 310, 310, 216,
	216, 216, 217, 217, 218, 224, 224, 224, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 116, 116, 116, 116, 116, 148,
	148, 213, 213, 211, 211, 211, 215, 215, 167, 167,
	260, 260, 260, 260, 260, 260, 260, 168, 168, 168,
	175, 169, 169, 170, 170, 170, 170, 170, 170, 207,
	208, 171, 171, 171, 209, 209, 219, 223, 223, 222,
	221, 221, 220, 220, 197, 197, 198, 198, 196, 195,
	156, 156, 155, 155, 154, 154, 324, 324, 225, 225,
	157, 157, 158, 150, 150, 236, 236, 236, 236, 144,
	144, 123, 123, 145, 145, 119, 119, 122, 122, 120,
	120, 120, 120, 138, 138, 139, 139, 117, 117, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	262, 262, 262, 212, 111, 111, 111, 112, 112, 113,
	113, 267, 267, 267, 268, 268, 268, 268, 266, 266,
	266, 266, 266, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 6, 1, 1,
	1, 3, 3, 0, 2, 0, 2, 1, 3, 5,
	0, 4, 6, 7, 1, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 6, 2, 2, 2, 2, 2,
	3, 5, 4, 6, 4, 6, 4, 6, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 3, 3, 0,
	2, 3, 2, 3, 6, 6, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 3, 4, 5, 3, 2, 6, 3, 4,
	3, 3, 3, 3, 1, 3, 3, 1, 2, 2,
	1, 0, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 1, 1,
	1, 1, 1, 2, 3, 4, 4, 4, 4, 2,
	4, 4, 4, 4, 4, 4, 2, 3, 3, 2,
	4, 5, 4, 5, 2, 3, 3, 4, 2, 4,
	3, 3, 4, 4, 2, 5, 5, 6, 2, 2,
	0, 2, 0, 3, 7, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 5, 2, 0, 6, 11, 14, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 3, 2, 3, 3,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 6, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 2, 0,
	8, 2, 0, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 2, 2, 1, 1, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 7, 4, 6, 3, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 3,
	1, 1, 1, 1, 6, 6, 4, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -21, -24, -25, -41,
	-32, -33, -34, -40, -35, -42, -36, -43, -44, -37,
	-47, -48, -50, -49, -45, -46, -51, -59, -79, -80,
	-81, -82, -5, -6, -7, -8, 34, 238, -22, -23,
	67, -26, -27, -28, -29, -30, -31, 89, -297, 93,
	97, 104, 106, 124, 130, 212, 218, 240, 242, 249,
	-89, -91, 236, 237, -52, -53, -54, -55, -83, 260,
	-60, -61, -62, -63, -64, -65, -66, -67, -68, -69,
	-70, -71, -72, -73, -74, -75, -76, -77, 35, 272,
	61, 100, 244, 300, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, 47, 69, -295, -92, -90,
	351, 309, 263, 23, 325, 332, 253, -93, 281, 317,
	354, -313, -145, 281, 82, -120, -111, 344, 4, -274,
	-276, 20, 21, 23, 33, 34, 35, 40, 44, 47,
	48, 55, 60, 61, 62, 64, 66, 67, 68, 71,
	72, 80, 81, 83, 85, 89, 91, 93, 96, 97,
	99, 104, 105, 106, 112, 113, 118, 120, 125, 130,
	131, 132, 133, 140, 143, 145, 138, 155, 156, 157,
	159, 160, 161, 164, 163, 168, 171, 174, 176, 177,
	178, 181, 179, 183, 184, 186, 185, 191, 193, 194,
	196, 199, 202, 205, 208, 209, 210, 211, 212, 214,
	216, 218, 220, 221, 222, 223, 224, 226, 227, 229,
	230, 231, 232, 233, 236, 234, 235, 237, 238, 239,
	240, 242, 244, 245, 247, 261, 262, 273, 249, 250,
	251, 252, 256, 254, 257, 258, 260, 263, 265, 268,
	271, 272, 274, 277, 275, 270, 280, 282, 283, 284,
	285, 286, 287, 288, 295, 296, 300, 301, 302, 303,
	306, 307, 308, 309, 311, 314, 315, 316, 321, 326,
	327, 328, 329, 330, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 51, 52, 53, 56, 84, 86, 87,
	103, 107, 108, 114, 115, 116, 126, 128, 134, 135,
	144, 146, 147, 148, 149, 150, 152, 166, 180, 190,
	192, 203, 207, 215, 217, 225, 246, 255, 266, 267,
	276, 278, 290, 291, 292, 297, 298, 313, 317, 318,
	-313, -119, -111, 82, -111, 218, 22, 91, 143, 308,
	307, 22, 214, 254, 283, 285, 82, 139, 281, 320,
	310, -111, -39, 351, -38, -4, -25, -34, -40, -36,
	-59, -35, -49, -32, -43, -81, -82, -317, 22, -318,
	-319, 69, 97, 124, 253, 143, 91, 307, -266, 4,
	-274, -276, -275, -277, 58, 70, 123, 142, 136, 154,
	158, 167, 169, 182, 204, 206, 243, 264, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 43, 49, 50,
	54, 57, 59, 65, 69, 73, 74, 76, 75, 77,
	78, 79, 88, 90, 92, 94, 95, 98, 100, 102,
	109, 110, 111, 119, 121, 122, 124, 127, 129, 137,
	139, 141, 151, 153, 162, 165, 170, 172, 173, 187,
	188, 189, 195, 197, 198, 200, 201, 213, 219, 228,
	241, 253, 259, 269, 279, 281, 289, 293, 294, 299,
	304, 305, 310, 312, 319, 320, 322, 323, 324, 325,
	156, -111, 156, -317, -115, 249, -111, -115, 4, 82,
	259, 181, 171, 55, 246, 257, -57, 296, -56, 290,
	-265, -58, -146, 181, -111, -322, 296, 296, -322, -322,
	-114, 296, 293, -321, 281, 156, 222, 281, 310, 320,
	-176, 82, 305, -90, -92, -91, -134, -135, 304, 151,
	102, 201, -89, -91, -295, -270, -263, -226, 9, 299,
	109, 197, -269, 8, 343, -262, -268, 5, 7, 342,
	4, -274, -276, -275, -78, 257, 34, 55, 22, 60,
	83, 125, 139, 140, 160, 65, 66, 221, 171, 157,
	295, 161, 258, 282, 296, 69, 311, 286, 105, 4,
	82, 181, 259, 290, 281, 139, 82, 320, -298, 226,
	-294, -111, -298, -131, -132, 22, 94, 355, -234, -119,
	198, -158, 351, -3, 293, 355, -145, -138, -111, -196,
	-195, 353, 122, 122, 351, -155, -156, -195, -196, -111,
	22, 122, 153, 153, -235, -234, -111, 134, -123, 134,
	-122, -119, -147, 134, -146, -147, 134, -138, 134, -172,
	351, -240, -239, -268, 317, 197, 355, -202, -204, 342,
	343, 337, 187, 331, -216, -206, -219, 103, 246, 351,
	-119, -205, 356, 9, -292, -91, 29, -217, -218, 49,
	-111, 7, 8, 5, 6, -117, -243, -212, -252, 299,
	109, 189, -290, -291, 4, -274, -267, -244, -254, -248,
	-251, 152, 58, 74, 75, 78, 76, 79, 259, 310,
	50, 28, 107, 108, 207, 215, 278, 297, 298, 134,
	190, 135, 56, 126, 166, 96, 37, 39, 41, 42,
	51, 52, 84, 86, 87, 114, 115, 116, 144, 146,
	147, 148, 149, 150, 192, 225, 266, 276, 291, 292,
	318, -275, -255, -256, -249, -250, -257, -214, 351, -202,
	197, -111, 2, 261, 351, -57, 53, 296, -189, -190,
	-108, -109, -110, 155, 220, 224, 330, 293, 336, 122,
	-270, -127, 88, -149, 353, -188, -189, -188, 293, -115,
	-161, -234, -202, -202, -146, 134, -111, -146, 139, -111,
	134, -134, -135, -160, -179, -180, 170, 111, 195, -163,
	22, 94, -163, -163, 44, 352, 352, 8, 7, 7,
	-78, 22, -272, -269, 9, 261, 221, 258, 55, 122,
	-314, 197, 122, 122, 122, 122, 122, 221, 258, 119,
	295, 122, 155, 220, 273, 281, 320, 122, 122, 330,
	-234, 134, -119, -122, 134, -111, -234, 134, 355, -298,
	-139, 351, -150, -236, -202, 344, -150, -158, 344, -119,
	351, -157, -225, -202, 88, -272, -120, 355, -266, 344,
	-273, -272, 274, 352, -144, -119, -156, -235, -121, -119,
	-121, 260, -111, 30, 103, -100, 355, 48, 239, 103,
	356, -100, 355, 103, -100, 103, 103, -148, -202, 352,
	355, -313, -319, 10, 11, 57, 33, 342, 343, 344,
	345, 117, 346, 347, 340, 341, 339, 334, 335, 336,
	63, 175, 248, 13, 14, 15, 26, 200, 169, 331,
	136, 264, 337, 16, 17, 18, 154, 36, 137, -116,
	-124, -202, -202, -202, -202, -202, 206, -154, -197, 349,
	-91, 351, -91, -202, -148, 7, -91, -211, 349, -220,
	-202, -155, 351, 5, 351, 5, -299, 326, 119, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 217, -261, 321,
	-261, -261, -245, 351, -245, -246, 351, -245, 327, 332,
	351, 30, -213, -241, -242, -244, -253, -247, -251, -252,
	40, 46, 45, 288, 180, 255, 267, 313, 38, 196,
	145, 144, 146, 147, 148, 149, 150, 266, 37, 225,
	115, 116, 114, 96, 87, 86, 192, 42, 41, -255,
	-256, -249, -250, 84, 291, 292, 152, 39, 52, 51,
	318, 276, -313, -56, -265, -148, 30, -189, 355, 168,
	-126, 174, 186, 131, 198, 328, -271, 5, 4, -212,
	-226, 88, 171, -252, -264, 88, -270, -264, 88, 72,
	353, -266, -115, -100, 355, 351, -133, 187, -296, 325,
	-133, 351, -112, 134, -111, -296, 187, -160, -180, -179,
	-181, -202, 22, -184, 113, 183, -202, -204, -90, -90,
	-90, -136, -230, -202, 219, 139, -146, 22, 262, -265,
	-316, 119, -313, -265, -265, -265, -265, -265, 257, -39,
	119, -111, 168, -265, -265, 281, 139, 281, -98, 234,
	-97, 21, 23, 97, 315, 103, 270, 287, 250, 270,
	287, 250, 234, 103, 234, 234, 103, -294, 30, -138,
	-141, 355, 122, 30, 4, -141, -119, 355, 352, -238,
	333, -111, -238, 355, 122, 352, 355, -194, 323, -185,
	-49, 351, 88, 30, -185, -151, -152, -237, -153, -119,
	351, -111, -111, -122, -123, -266, -146, -147, -147, -138,
	352, 355, -39, -239, 293, -259, -241, -258, 230, 231,
	229, 233, 232, -241, -266, 290, -202, -202, -202, -202,
	-202, -202, -202, -202, -202, -202, -202, -202, -202, -202,
	-202, -202, -202, -202, -202, -202, -202, -202, 169, 136,
	264, 36, 137, -202, 293, -202, -202, -202, -202, 179,
	187, 189, 299, 109, 306, 94, 193, -324, 279, 32,
	-209, -91, 351, -224, 27, 269, 22, -216, 246, 351,
	-197, -202, -198, -148, 352, 352, 355, -148, -215, 350,
	-211, -223, -222, 322, 352, -148, 319, 22, 94, 344,
	7, -173, 329, 178, 85, 132, 177, -174, 252, -300,
	112, 127, 351, 352, 352, 352, -202, -202, -167, -260,
	-148, 4, 329, 178, 85, 132, 177, 252, -167, -168,
	-202, -148, -169, -203, -204, 342, 343, 337, 351, 246,
	-170, -202, -148, -202, 43, 165, 294, -171, -202, 122,
	-148, -202, -202, -202, -148, -148, -148, 351, 7, 7,
	290, 290, 7, -38, 352, 355, -140, 29, -173, 351,
	122, 352, 296, -190, -125, 224, 268, 235, 256, 355,
	-266, -234, -128, -138, -129, -111, -193, -192, -280, -281,
	-278, 139, 305, 110, 65, -279, 54, 219, 121, 30,
	103, -107, 211, 30, 197, 187, -103, 284, 103, -182,
	-262, 351, 343, -183, 246, 247, 355, -96, 31, 92,
	159, -119, -315, -111, 257, -39, -119, -122, -119, 355,
	293, -177, 65, 59, -192, 134, 59, -278, -111, 305,
	-177, 65, -177, 65, 65, -234, 33, -49, 122, 33,
	-49, 122, 293, -122, 293, 293, -234, 351, 352, -194,
	-236, -143, -232, 349, -234, -119, -91, -233, 351, -266,
	-194, 352, -225, -84, 133, 193, -87, 325, -272, 274,
	122, -119, -162, 241, -202, -162, -187, 197, -144, 317,
	-111, -162, -142, 355, 122, 336, -144, -100, -100, -100,
	-202, -315, 330, -202, -202, 293, -324, 279, -209, -202,
	179, 189, 299, 109, 306, 94, 193, 122, 351, -203,
	-203, -148, -206, 351, -148, 350, 359, 352, -202, 350,
	350, 355, -221, -222, 98, -202, -135, 355, -134, -202,
	-148, -148, 352, 352, 293, 293, 293, 293, 351, -305,
	205, 351, 351, -202, 30, 355, 352, 122, 352, 352,
	-175, 213, 352, 10, 11, 342, 343, 344, 345, 117,
	346, 347, 340, 341, 339, 334, 335, 336, 63, 175,
	248, 13, 14, 15, 154, 137, -203, -203, -203, -148,
	351, 352, -207, -208, 122, 119, 30, -171, -171, -171,
	352, 122, -148, 355, 355, 355, 352, 352, 352, 7,
	352, 355, 352, 330, 330, 352, -241, 349, 349, 7,
	-315, -108, 303, 62, 224, -270, 352, 352, 355, -241,
	-112, 139, 351, -112, -111, 351, 159, 159, -49, -146,
	5, -49, -119, 103, -104, 99, -323, 336, -111, -183,
	-202, -230, -119, 356, 355, -238, -97, -119, -111, -111,
	187, -192, 134, -102, 187, -111, -111, 134, -111, 134,
	-111, -111, -98, 234, -49, 351, -49, 351, -111, 234,
	-111, -119, 234, -38, -159, 127, -238, 355, 70, -166,
	158, 182, 123, 167, 243, 142, 7, -39, -199, 356,
	351, -229, 332, -91, -233, -232, -159, -87, 122, 280,
	199, 274, -150, 188, -162, 64, 352, -194, -152, -143,
	-225, 352, -202, -202, -203, -203, 122, 351, -202, -213,
	26, 26, 352, -148, 352, 355, -198, -202, 352, -211,
	100, -202, 289, 352, 319, -135, -135, -135, 5, 178,
	132, 177, -174, 177, -174, -174, 7, -306, -111, 351,
	323, -134, 352, -259, -241, -202, -207, -202, -259, -241,
	-203, -203, -203, -203, -203, -203, -203, -203, -203, -203,
	-203, -203, -203, -203, -203, -203, -203, -203, -203, 94,
	187, 193, -203, 355, -148, 352, -208, -207, -202, -202,
	-241, 352, 352, 352, -148, -202, -202, -202, 352, 7,
	350, 7, 7, 352, -130, 138, -193, -282, 351, -112,
	-137, -231, -111, -293, 351, -290, -291, -117, 351, -279,
	-202, 351, 351, 351, -133, 351, -111, -105, 164, -323,
	-269, -296, 198, 352, -96, -266, -111, 293, 293, 103,
	187, 314, -95, 97, 260, -178, 103, -100, 103, -100,
	293, -177, 65, -148, -148, 293, 293, 352, -210, 129,
	44, -232, 158, 158, -232, -166, 158, -164, 204, -164,
	-164, -311, 351, 350, -229, -266, 349, 357, -148, -228,
	-227, 30, -111, 202, 352, -210, -273, 290, 351, -186,
	351, 197, -49, -162, 336, 26, 26, -202, -213, 352,
	-202, -202, 352, -202, 350, -202, 5, -202, 352, 352,
	352, 352, -307, -111, -202, 352, 352, 352, -208, 122,
	94, 193, 351, -202, 352, 352, 355, 352, 352, 352,
	350, 350, 137, -283, 65, -284, 57, 110, 69, 187,
	189, 305, 219, 54, 88, 228, -137, 351, 352, 355,
	-118, -155, 57, -118, -202, 351, -138, 352, -137, -138,
	-128, 30, -137, 197, -106, 163, -323, -269, -103, -96,
	-111, -111, -192, 103, 187, 88, 187, 88, 81, 301,
	-111, -111, -119, -111, -111, 352, 352, -111, -119, -302,
	324, -202, -148, -232, -232, -165, 312, 197, 158, -232,
	350, 352, -312, 7, -229, -228, 7, -201, -200, 120,
	185, 352, -111, 351, -229, -302, -205, -117, -111, -86,
	-85, 5, 95, -138, 65, -158, -91, 351, -202, -202,
	352, 352, -135, -301, 210, 352, -203, 122, 351, -213,
	352, -202, 208, -111, -266, -111, 110, 134, 189, 159,
	351, -203, -119, 352, -137, -191, -320, 68, 277, -231,
	-96, -266, -96, 352, -148, 352, 352, 352, 352, -49,
	352, -119, -323, -269, -104, -192, 189, 189, -202, -241,
	-100, -100, 293, 293, 293, 293, -303, -304, -111, -165,
	351, -202, -232, -199, 352, 355, -228, 350, 355, 358,
	336, -229, 351, -138, -227, 351, 355, 352, -88, 336,
	307, 188, 352, -111, 352, -135, 44, -203, -213, 352,
	352, -111, -284, -112, 187, -202, -113, 351, -191, 352,
	-130, 351, -118, -135, 228, -130, -191, 351, -269, -105,
	-99, 57, -111, -111, 351, 351, 355, 30, -138, -229,
	7, -200, -266, 349, -228, -138, 352, -148, -85, 5,
	260, -194, -308, 223, 247, -148, 352, 351, 103, 352,
	-287, 176, -111, -130, -191, -138, -96, 352, -119, -130,
	-137, -106, -94, 312, -266, -148, -148, -304, -306, 352,
	-227, 7, 352, -135, -151, 352, -309, -310, 36, 302,
	72, -202, -309, -138, 110, -285, -288, -286, 197, 123,
	209, 265, 352, -130, 352, -133, 352, -202, 352, 352,
	350, 352, -194, -310, 216, 118, 246, 216, 118, 352,
	-111, -286, 197, -288, 197, 307, 91, -287, -191, 26,
	-101, 48, 239, -289, 184, 239, 48, 260, -289, -285,
	-130, -310, 20, 189, 88,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 33, 34, 35, 36, 0, 0, 104, 105,
	0, 108, 109, 110, 111, 112, 113, 0, 0, 0,
	0, 0, 498, 0, 0, 0, 0, 0, 0, 0,
	470, -2, 0, 0, 187, 188, 189, 190, 191, 0,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 414, 0,
	414, 414, 418, 500, 37, 38, 39, 40, 41, 44,
	45, 46, 47, 42, 43, 0, 379, 497, -2, 508,
	0, 0, 0, 0, 0, 0, 506, 484, 0, 0,
	-2, 0, 166, 0, 1045, 973, 979, 980, 1004, 1005,
	1006, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
	1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
	0, 0, 975, 1045, 160, 1104, 162, 0, 0, 0,
	0, 115, 116, 117, 118, 119, 0, 0, 0, 0,
	0, 159, 136, 0, 143, 144, 145, 146, 147, 148,
	149, 150, 138, 139, 140, 141, 142, 0, 169, 170,
	171, 173, 174, 175, 176, 177, 178, 179, 298, 1018,
	1019, 1020, 1021, 1022, 1233, 1234, 1235, 1236, 1237, 1238,
	1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
	1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	0, 156, 0, 0, 407, 1131, 420, 405, 182, 183,
	184, 185, -2, 1033, 1219, 1137, 196, 1158, 204, 1225,
	0, 207, 212, -2, 132, 422, 413, 422, 410, 411,
	412, 415, 0, 0, 499, 0, 0, 0, 0, 0,
	0, 0, 378, -2, 480, 481, -2, 0, 503, 503,
	503, 0, 0, 481, 0, 186, 215, 216, 217, 226,
	227, 228, 229, 368, 0, 370, 236, 237, 1000, 0,
	1014, 1015, 1016, 1017, 256, 0, 0, 0, 259, 0,
	269, 300, 0, 0, 0, 0, 0, 276, 0, 279,
	0, 0, 284, 288, 0, 0, 294, 0, 0, 258,
	260, 261, 262, 0, 0, 0, 0, 0, 489, 1110,
	492, 986, 490, 0, 0, 505, 504, 0, 485, 587,
	0, 536, 0, 2, 0, 0, 167, 168, 983, 981,
	982, 0, 0, 0, 0, 976, 952, 950, 951, 161,
	163, 0, 0, 0, 0, 593, 120, 1201, 79, 1201,
	971, 978, 79, 1201, 130, 79, 1201, 128, 1201, 157,
	0, 0, 151, 153, 1231, 0, 0, 303, 695, 0,
	0, 0, 0, 0, 0, 787, 789, 1193, 1219, 0,
	791, 792, 0, 794, 796, 797, 0, 800, 801, 943,
	975, 989, 990, 991, 992, 0, 0, 995, 0, 997,
	998, 999, 843, 810, -2, -2, 987, 623, 624, 625,
	626, -2, 1233, 814, 816, 818, 820, 821, 822, 823,
	0, 1177, 1194, 1195, 1215, 1216, 1224, 1228, 1229, 1201,
	1212, 1202, 1189, 1199, 1210, 1051, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1013, 657, 658, 663, 664, 666, 0, 0, 406,
	0, 419, 192, 0, 0, 195, 1188, 1158, 198, 423,
	425, 426, 427, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 210, 133, 0, 408, 421, 409, 0, 417,
	79, 591, 106, 107, 351, 1201, 496, 351, 1008, 496,
	1201, -2, 0, 476, 517, 518, 0, 0, 0, 0,
	501, 502, 0, 0, 0, 472, 473, 369, 1002, 1001,
	257, 259, 264, 88, 89, 0, 277, 285, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 278, 286, 498,
	0, 0, 0, 290, 291, 0, 0, 0, 0, 263,
	0, 1201, 587, 0, 1201, 0, 0, 1201, 0, 491,
	0, 0, 539, 963, 967, 968, 539, 537, 588, 589,
	0, 0, 960, 958, 959, 578, 974, 0, 948, 949,
	578, 90, 101, 0, 0, 969, 953, 597, 0, 447,
	0, 0, 594, 0, 0, 122, 0, 77, 78, 0,
	0, 124, 0, 0, 126, 0, 0, 0, 899, 498,
	0, 0, 172, 0, 0, 0, 0, 878, 879, 880,
	881, 882, 883, 886, 887, 884, 885, 888, 889, 890,
	0, 0, 0, 891, 892, 893, 0, 0, 895, 0,
	897, 0, 0, 0, 0, 0, 0, 957, 0, 0,
	894, 700, 701, 702, 724, 725, 0, 788, 954, 947,
	790, 0, -2, 899, 0, 793, 798, 799, 0, 0,
	942, -2, 0, 994, 0, 692, 845, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 922, 928, 0,
	0, 0, 0, 0, 0, 0, 0, 642, 660, 671,
	668, 667, 644, 0, 643, 641, 0, 645, 0, 0,
	0, 498, 0, 901, 605, 606, 607, 608, 609, 692,
	612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 630, 631, 632, 633, 634, 635, 636, 637, 638,
	639, 640, 654, 0, 629, 629, 629, 646, 647, 655,
	656, 661, 662, 673, 674, 676, 678, 672, 672, 672,
	669, 670, 0, 193, 0, 0, 0, 199, 0, 0,
	428, 223, 224, 225, 430, 431, 205, 230, 231, 232,
	233, 234, 235, 0, 200, 202, 213, 201, 203, 206,
	0, 134, 416, 371, 0, 309, 0, 0, 374, 495,
	0, 0, 0, 1201, 1007, 435, 0, 479, 515, 516,
	519, 523, 524, 527, 530, 531, 521, 695, 486, 487,
	488, 509, 510, 389, 0, 0, 265, 266, 267, 268,
	270, 0, 299, 271, 272, 273, 274, 275, 280, 282,
	498, 287, 289, 292, 293, 0, 0, 0, 48, 402,
	58, 0, 402, 402, 0, 0, 0, 0, 54, 0,
	0, 56, 0, 0, 0, 0, 0, 493, 0, 0,
	597, 0, 0, 0, 966, 597, 0, 0, 962, 93,
	0, 984, 100, 0, 0, 0, 0, 459, 0, 459,
	449, 0, 0, 0, 459, 462, 463, 465, 466, 0,
	0, 595, 121, 972, 79, 977, 131, 79, 79, 129,
	158, 0, 137, 152, 0, 696, 601, 602, 648, 649,
	650, 651, 652, 697, 698, 0, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, -2, -2, -2, 716,
	717, 718, -2, -2, -2, 722, 723, -2, 896, 898,
	0, 957, 0, -2, 0, -2, -2, -2, -2, 736,
	0, 738, 741, 743, 745, 0, 0, 0, 0, 956,
	755, 934, 0, 0, 875, 876, 877, 740, 0, 0,
	955, 946, 0, 0, -2, 795, 0, 0, 0, 905,
	906, 941, 937, 0, 802, 508, 0, 0, 0, 0,
	0, 1003, 679, 680, 681, 682, 683, 684, 693, 853,
	0, 0, 0, 815, 817, 819, 0, 0, 0, 0,
	909, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	899, 919, 0, 0, 758, 0, 0, 0, 0, 1219,
	0, 899, 927, 0, 0, 0, 0, 0, 899, 0,
	933, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 155, 0, 598, 600, 610, 0,
	0, 194, 0, 424, 429, 0, 220, 0, 222, 0,
	135, 592, 0, 0, 308, 983, 310, 312, 313, 314,
	315, 1008, 0, 1008, 0, 341, 0, 0, 0, 0,
	0, 372, 0, 0, 0, 0, 437, 443, 0, 0,
	525, 0, 0, 522, 528, 529, 0, 512, 387, 388,
	0, 0, 301, 180, 281, 283, 295, 296, 578, 0,
	0, 0, 0, 401, 60, 1201, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	53, 0, 0, 0, 0, 0, 0, 498, 985, 533,
	964, 578, 540, 498, 550, 587, 564, 555, 0, 965,
	533, 590, 961, 100, 0, 0, 87, 0, 91, 102,
	0, 970, 114, 0, 596, 444, 459, 0, 0, 451,
	448, 446, 597, 0, 0, 0, 0, 123, 125, 127,
	900, 164, 0, -2, -2, 0, 0, 0, 756, -2,
	737, 739, 742, 744, 746, 0, 0, 0, 0, 0,
	0, 0, 757, 0, 0, 944, 947, -2, 900, 903,
	904, 0, 0, 938, 0, 0, 0, 0, 507, 508,
	508, 508, 808, 0, 0, 0, 0, 0, 0, 809,
	0, 0, 0, 0, 0, 0, 826, 0, 827, 828,
	0, 0, 829, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 761, 762, 763, 0,
	0, 830, 925, 926, 0, 0, 0, 0, 0, 0,
	835, 0, 932, 0, 0, 0, 839, 840, 841, 0,
	627, 0, 653, 675, 677, 665, 902, 0, 0, 0,
	165, 197, 218, 219, 221, 214, 317, 350, 0, 323,
	0, 1008, 0, 0, 0, 0, 0, 0, 306, 351,
	373, 375, 0, 0, 439, 443, 0, 442, 496, 0,
	0, 511, 389, 0, 0, 297, 59, 391, 0, 0,
	0, 62, 1201, 70, 0, 404, 71, 1201, 79, 1201,
	79, 72, 49, 402, 50, 0, 51, 0, 399, 0,
	390, 397, 0, 0, 535, 0, 538, 0, 0, 0,
	0, 0, 584, 584, 584, 582, 558, 0, 564, 0,
	0, 576, 0, -2, 555, 0, 535, 86, 0, 0,
	0, 103, 457, 458, 445, 456, 0, 459, 464, 461,
	467, 0, 699, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 935, 0, 870, 0, 0, 946, -2, 907,
	936, 940, 0, 803, 0, 0, 0, 0, 996, 685,
	686, 687, 688, 689, 690, 691, 0, 851, 852, 856,
	0, 0, 813, 0, 0, 908, 918, 920, 759, 760,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	-2, -2, -2, 777, 778, 779, -2, -2, -2, 0,
	0, 0, 921, 0, 0, 873, 923, 924, 929, 930,
	0, 832, 833, 834, 931, 0, 0, 0, 659, 0,
	603, 0, 0, 611, 304, 0, 311, 321, 0, 0,
	0, 380, 386, 386, 0, 811, 812, 0, 0, 340,
	0, 0, 0, 309, 0, 0, 0, 441, 443, 0,
	434, 435, 520, 526, 513, 389, 181, 0, 0, 0,
	0, 80, 64, 0, 0, 0, 0, 68, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 494, 847, 0,
	0, 541, 0, 0, 0, 0, 0, 579, 583, 580,
	581, 0, 0, 564, 576, 547, 0, 0, 0, 554,
	575, 0, 574, 563, -2, 847, 92, 0, 0, 0,
	0, 0, 450, 460, 0, 0, 0, -2, 0, 749,
	-2, -2, 869, 900, 945, 939, 993, 508, 804, 806,
	807, 694, 858, 855, 0, 842, 824, 825, 917, 0,
	0, 0, 0, 900, 872, 831, 0, 837, 838, 628,
	604, 599, 0, 322, 0, 325, 0, 0, 0, 0,
	331, 332, 0, 0, 0, 0, 0, 0, 349, 0,
	389, 988, 0, 389, 0, 0, 0, 342, 0, 0,
	0, 0, 0, 0, 432, 443, 0, 436, 437, 514,
	393, 395, 61, 0, 0, 76, 0, 0, 403, 0,
	79, 79, 392, 0, 0, 0, 0, 400, 398, 482,
	0, 534, 532, 566, 0, 568, 0, 0, 0, 570,
	550, 559, 0, 561, 576, 552, 0, 0, 545, 0,
	544, 564, 572, 0, 0, 483, 577, 0, 0, 0,
	97, 95, 0, 0, 0, 468, 469, 0, -2, -2,
	750, 871, 0, 508, 0, 844, -2, 0, 0, 0,
	874, 0, 0, 0, 326, 327, 1008, 0, 330, 333,
	0, 335, 1010, 349, 0, 317, 0, 346, 347, 381,
	382, 385, 383, 386, 508, 339, 344, 0, 317, 307,
	349, 0, 0, 438, 439, 63, 65, 66, 75, 83,
	67, 73, 0, 0, 0, 0, 846, 848, 0, 567,
	0, 586, 569, 564, 560, 0, 557, 548, 0, 549,
	0, 576, 0, 0, 556, 0, 0, 99, 96, 0,
	0, 453, 597, 455, 805, 861, 0, -2, 0, 785,
	836, 0, 324, 328, 0, 0, 355, 0, 317, 349,
	343, 0, 389, 0, 0, 305, 317, 0, 440, 441,
	85, 0, 394, 396, 0, 0, 0, 0, 0, 0,
	562, 546, 542, 0, 553, 0, 573, 508, 98, 94,
	0, 454, 0, 0, 0, 857, 786, 0, 0, 334,
	360, 0, 0, 337, 317, 0, 384, 803, 351, 376,
	0, 433, 69, 0, 82, 0, 0, 849, 850, 585,
	551, 0, 571, 0, 597, 854, 859, 862, -2, 1161,
	1042, 0, 860, 0, 0, 336, 356, 357, 0, 352,
	353, 354, 1009, 338, 348, 355, 349, 84, 55, 57,
	543, 0, 452, 0, 864, 865, 866, 867, 868, 320,
	329, 358, 0, 359, 0, 0, 0, 360, 317, 0,
	316, 318, 319, 361, 0, 364, 365, 0, 362, 345,
	377, 863, 363, 366, 367,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 340, 3, 346, 341, 3,
	351, 352, 344, 342, 355, 343, 353, 345, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 359, 354,
	334, 336, 335, 3, 356, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 349, 3, 350, 347, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 357, 339, 358, 337,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 338, 57677, 348, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:849
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:855
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:861
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:943
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:949
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:955
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:961
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:967
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:971
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:977
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:981
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1027
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1050
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = nil
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = DropCascade
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = DropRestrict
		}
	case 79:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = DropDefault
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 81:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1122
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 83:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1123
		{
		}
	case 84:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1126
		{
			return unimplemented(sqllex, "alter using")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1127
		{
		}
	case 86:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 95:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.str = ""
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1200
		{
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1223
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1229
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1255
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1256
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1257
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{ /* SKIP DOC */
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1552
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1565
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1576
		{ /* SKIP DOC */
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{ /* SKIP DOC */
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1578
		{
			return unimplemented(sqllex, "set local")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 194:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1643
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			return unimplemented(sqllex, "set from current")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1653
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1657
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1663
		{
		}
	case 211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1665
		{
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = Low
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = Normal
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = High
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.str = "client_encoding"
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1941
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1945
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1973
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1977
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1981
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1993
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2015
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2086
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2090
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = DropDefault
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2100
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2305
		{
			return unimplemented(sqllex, "match full")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2306
		{
			return unimplemented(sqllex, "match partial")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
			return unimplemented(sqllex, "match simple")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2308
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2314
		{
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2315
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2316
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2318
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2324
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2327
		{
			return unimplemented(sqllex, "no action")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2330
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2331
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2332
		{
			return unimplemented(sqllex, "action set null")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2333
		{
			return unimplemented(sqllex, "action set default")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2365
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 375:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = true
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = false
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2440
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2441
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2444
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2445
		{
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = Ascending
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = Descending
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2485
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2487
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = true
		}
	case 402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = false
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2520
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2521
		{
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2532
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2561
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2570
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2571
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.str = ""
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.str = ""
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2617
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = ReadOnly
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = ReadWrite
		}
	case 432:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.str = ""
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.str = ""
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.str = ""
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.str = ""
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2725
		{
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2726
		{
		}
	case 444:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2792
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2796
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 460:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2827
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3054
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3055
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3056
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3059
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3060
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3063
		{
			return unimplemented(sqllex, "cte")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3066
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3067
		{
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3070
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3071
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3074
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3075
		{
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = true
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = false
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = false
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = true
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3099
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3146
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3166
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3218
		{
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3219
		{
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3222
		{
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3223
		{
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &From{}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3313
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3358
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3375
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = nil
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3433
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3439
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = true
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = false
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.str = astFullJoin
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.str = astLeftJoin
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.str = astRightJoin
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.str = astInnerJoin
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3550
		{
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3551
		{
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3637
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3650
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3665
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3674
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3737
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3746
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = nil
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3811
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3907
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3939
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3978
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3979
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = year
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = month
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = day
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = hour
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = minute
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = month
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = hour
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = minute
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = minute
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = nil
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = second
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4074
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4109
		{
			return unimplemented(sqllex, "at tz")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4277
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4343
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4516
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4569
		{
			return unimplemented(sqllex, "variadic")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4570
		{
			return unimplemented(sqllex, "variadic")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4593
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4609
		{
			return unimplemented(sqllex, "func_application")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4610
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4614
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4616
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4639
		{
			return unimplemented(sqllex, "current role")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4640
		{
			return unimplemented(sqllex, "current user")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4641
		{
			return unimplemented(sqllex, "session user")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4642
		{
			return unimplemented(sqllex, "user")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4671
		{
			return unimplemented(sqllex, "treat")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4715
		{
			return unimplemented(sqllex, "within group")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4716
		{
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = Window(nil)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4751
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 854:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.str = ""
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4813
		{
			return unimplemented(sqllex, "frame range")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4814
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4815
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4818
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4819
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4825
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4826
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4827
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4828
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4829
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = Any
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = Some
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = All
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = Plus
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = Minus
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = Mult
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = Div
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = FloorDiv
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = Mod
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = Bitand
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = Bitor
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = Pow
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = Bitxor
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = LT
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = GT
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = EQ
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = LE
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = GE
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = NE
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = Like
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = NotLike
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = ILike
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = NotILike
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 939:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5188
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5193
		{
		}
	case 957:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5194
		{
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5308
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5312
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 986:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5356
		{
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5392
		{
			return unimplemented(sqllex, "func const")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5401
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5411
		{
			sqlVAL.union.val = DNull
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5428
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5463
		{
			sqlVAL.str = ""
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5473
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
