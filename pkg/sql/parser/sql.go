// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_ROLE = 57417
const CURRENT_TIME = 57418
const CURRENT_TIMESTAMP = 57419
const CURRENT_USER = 57420
const CYCLE = 57421
const DATA = 57422
const DATABASE = 57423
const DATABASES = 57424
const DATE = 57425
const DAY = 57426
const DEC = 57427
const DECIMAL = 57428
const DEFAULT = 57429
const DEALLOCATE = 57430
const DEFERRABLE = 57431
const DELETE = 57432
const DESC = 57433
const DISCARD = 57434
const DISTINCT = 57435
const DO = 57436
const DOUBLE = 57437
const DROP = 57438
const ELSE = 57439
const ENCODING = 57440
const END = 57441
const ESCAPE = 57442
const EXCEPT = 57443
const EXISTS = 57444
const EXECUTE = 57445
const EXPERIMENTAL_FINGERPRINTS = 57446
const EXPLAIN = 57447
const EXTRACT = 57448
const EXTRACT_DURATION = 57449
const FALSE = 57450
const FAMILY = 57451
const FETCH = 57452
const FILTER = 57453
const FIRST = 57454
const FLOAT = 57455
const FLOAT4 = 57456
const FLOAT8 = 57457
const FLOORDIV = 57458
const FOLLOWING = 57459
const FOR = 57460
const FORCE_INDEX = 57461
const FOREIGN = 57462
const FROM = 57463
const FULL = 57464
const GRANT = 57465
const GRANTS = 57466
const GREATEST = 57467
const GROUP = 57468
const GROUPING = 57469
const HAVING = 57470
const HELP = 57471
const HIGH = 57472
const HOUR = 57473
const INCREMENTAL = 57474
const IF = 57475
const IFNULL = 57476
const ILIKE = 57477
const IN = 57478
const INTERLEAVE = 57479
const INDEX = 57480
const INDEXES = 57481
const INITIALLY = 57482
const INNER = 57483
const INSERT = 57484
const INT = 57485
const INT2VECTOR = 57486
const INT2 = 57487
const INT4 = 57488
const INT8 = 57489
const INT64 = 57490
const INTEGER = 57491
const INTERSECT = 57492
const INTERVAL = 57493
const INTO = 57494
const IS = 57495
const ISOLATION = 57496
const JOB = 57497
const JOBS = 57498
const JOIN = 57499
const KEY = 57500
const KEYS = 57501
const KV = 57502
const LATERAL = 57503
const LC_CTYPE = 57504
const LC_COLLATE = 57505
const LEADING = 57506
const LEAST = 57507
const LEFT = 57508
const LEVEL = 57509
const LIKE = 57510
const LIMIT = 57511
const LOCAL = 57512
const LOCALTIME = 57513
const LOCALTIMESTAMP = 57514
const LOW = 57515
const LSHIFT = 57516
const MATCH = 57517
const MINUTE = 57518
const MONTH = 57519
const NAN = 57520
const NAME = 57521
const NAMES = 57522
const NATURAL = 57523
const NEXT = 57524
const NO = 57525
const NO_INDEX_JOIN = 57526
const NORMAL = 57527
const NOT = 57528
const NOTHING = 57529
const NULL = 57530
const NULLIF = 57531
const NULLS = 57532
const NUMERIC = 57533
const OF = 57534
const OFF = 57535
const OFFSET = 57536
const OID = 57537
const ON = 57538
const ONLY = 57539
const OPTIONS = 57540
const OR = 57541
const ORDER = 57542
const ORDINALITY = 57543
const OUT = 57544
const OUTER = 57545
const OVER = 57546
const OVERLAPS = 57547
const OVERLAY = 57548
const PARENT = 57549
const PARTIAL = 57550
const PARTITION = 57551
const PASSWORD = 57552
const PAUSE = 57553
const PLACING = 57554
const PLANS = 57555
const POSITION = 57556
const PRECEDING = 57557
const PRECISION = 57558
const PREPARE = 57559
const PRIMARY = 57560
const PRIORITY = 57561
const QUERIES = 57562
const QUERY = 57563
const RANGE = 57564
const READ = 57565
const REAL = 57566
const RECURSIVE = 57567
const REF = 57568
const REFERENCES = 57569
const REGCLASS = 57570
const REGPROC = 57571
const REGPROCEDURE = 57572
const REGNAMESPACE = 57573
const REGTYPE = 57574
const RENAME = 57575
const REPEATABLE = 57576
const RELEASE = 57577
const RESET = 57578
const RESTORE = 57579
const RESTRICT = 57580
const RESUME = 57581
const RETURNING = 57582
const REVOKE = 57583
const RIGHT = 57584
const ROLLBACK = 57585
const ROLLUP = 57586
const ROW = 57587
const ROWS = 57588
const RSHIFT = 57589
const SAVEPOINT = 57590
const SCATTER = 57591
const SEARCH = 57592
const SECOND = 57593
const SELECT = 57594
const SEQUENCES = 57595
const SERIAL = 57596
const SERIALIZABLE = 57597
const SESSION = 57598
const SESSIONS = 57599
const SESSION_USER = 57600
const SET = 57601
const SETTING = 57602
const SETTINGS = 57603
const SHOW = 57604
const SIMILAR = 57605
const SIMPLE = 57606
const SMALLINT = 57607
const SMALLSERIAL = 57608
const SNAPSHOT = 57609
const SOME = 57610
const SPLIT = 57611
const SQL = 57612
const START = 57613
const STATUS = 57614
const STDIN = 57615
const STRICT = 57616
const STRING = 57617
const STORING = 57618
const SUBSTRING = 57619
const SYMMETRIC = 57620
const SYSTEM = 57621
const TABLE = 57622
const TABLES = 57623
const TEMP = 57624
const TEMPLATE = 57625
const TEMPORARY = 57626
const TESTING_RANGES = 57627
const TESTING_RELOCATE = 57628
const TEXT = 57629
const THEN = 57630
const TIME = 57631
const TIMESTAMP = 57632
const TIMESTAMPTZ = 57633
const TO = 57634
const TRAILING = 57635
const TRACE = 57636
const TRANSACTION = 57637
const TREAT = 57638
const TRIM = 57639
const TRUE = 57640
const TRUNCATE = 57641
const TYPE = 57642
const UNBOUNDED = 57643
const UNCOMMITTED = 57644
const UNION = 57645
const UNIQUE = 57646
const UNKNOWN = 57647
const UPDATE = 57648
const UPSERT = 57649
const USE = 57650
const USER = 57651
const USERS = 57652
const USING = 57653
const UUID = 57654
const VALID = 57655
const VALIDATE = 57656
const VALUE = 57657
const VALUES = 57658
const VARCHAR = 57659
const VARIADIC = 57660
const VIEW = 57661
const VARYING = 57662
const WHEN = 57663
const WHERE = 57664
const WINDOW = 57665
const WITH = 57666
const WITHIN = 57667
const WITHOUT = 57668
const WRITE = 57669
const YEAR = 57670
const ZONE = 57671
const NOT_LA = 57672
const WITH_LA = 57673
const AS_LA = 57674
const POSTFIXOP = 57675
const UMINUS = 57676

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5670

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 36,
	353, 36,
	-2, 462,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 61,
	1, 435,
	196, 435,
	240, 435,
	349, 435,
	351, 435,
	353, 435,
	-2, 445,
	-1, 76,
	1, 438,
	196, 438,
	240, 438,
	349, 438,
	351, 438,
	353, 438,
	-2, 444,
	-1, 85,
	1, 36,
	353, 36,
	-2, 462,
	-1, 480,
	1, 186,
	353, 186,
	-2, 1044,
	-1, 551,
	110, 472,
	169, 472,
	194, 472,
	-2, 441,
	-1, 554,
	110, 471,
	169, 471,
	194, 471,
	-2, 439,
	-1, 634,
	350, 971,
	-2, 964,
	-1, 635,
	350, 972,
	-2, 965,
	-1, 641,
	5, 640,
	350, 640,
	-2, 1169,
	-1, 665,
	5, 599,
	-2, 1139,
	-1, 666,
	5, 634,
	350, 634,
	-2, 1141,
	-1, 667,
	5, 609,
	-2, 1142,
	-1, 668,
	5, 608,
	-2, 1143,
	-1, 669,
	5, 634,
	350, 634,
	-2, 1146,
	-1, 670,
	5, 634,
	350, 634,
	-2, 1147,
	-1, 671,
	5, 635,
	-2, 1150,
	-1, 672,
	5, 591,
	-2, 1151,
	-1, 673,
	5, 591,
	-2, 1152,
	-1, 674,
	5, 616,
	-2, 1156,
	-1, 675,
	5, 601,
	-2, 1157,
	-1, 676,
	5, 602,
	-2, 1158,
	-1, 677,
	5, 592,
	-2, 1163,
	-1, 678,
	5, 593,
	-2, 1164,
	-1, 679,
	5, 594,
	-2, 1165,
	-1, 680,
	5, 595,
	-2, 1166,
	-1, 681,
	5, 596,
	-2, 1167,
	-1, 682,
	5, 597,
	-2, 1168,
	-1, 683,
	5, 591,
	-2, 1173,
	-1, 684,
	5, 600,
	-2, 1178,
	-1, 685,
	5, 598,
	-2, 1181,
	-1, 686,
	5, 632,
	350, 632,
	-2, 1183,
	-1, 687,
	5, 636,
	-2, 1186,
	-1, 688,
	5, 638,
	-2, 1187,
	-1, 689,
	5, 631,
	350, 631,
	-2, 1192,
	-1, 807,
	110, 471,
	169, 471,
	194, 471,
	-2, 442,
	-1, 916,
	101, 445,
	110, 445,
	150, 445,
	169, 445,
	194, 445,
	200, 445,
	303, 445,
	-2, 759,
	-1, 925,
	350, 948,
	-2, 936,
	-1, 1203,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 675,
	-1, 1204,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 676,
	-1, 1205,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 677,
	-1, 1209,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 681,
	-1, 1210,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 682,
	-1, 1211,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 683,
	-1, 1214,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 688,
	-1, 1220,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 690,
	-1, 1222,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 694,
	-1, 1223,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 695,
	-1, 1224,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 696,
	-1, 1225,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 697,
	-1, 1251,
	205, 830,
	-2, 833,
	-1, 1287,
	121, 870,
	350, 971,
	-2, 964,
	-1, 1288,
	121, 871,
	-2, 1135,
	-1, 1289,
	121, 872,
	-2, 1043,
	-1, 1290,
	121, 873,
	-2, 1007,
	-1, 1291,
	121, 874,
	-2, 1024,
	-1, 1292,
	121, 875,
	-2, 1042,
	-1, 1293,
	121, 876,
	-2, 1094,
	-1, 1474,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 689,
	-1, 1475,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 691,
	-1, 1480,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 692,
	-1, 1498,
	205, 829,
	-2, 832,
	-1, 1663,
	101, 445,
	110, 445,
	150, 445,
	169, 445,
	194, 445,
	200, 445,
	303, 445,
	-2, 526,
	-1, 1705,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 693,
	-1, 1710,
	153, 0,
	-2, 709,
	-1, 1720,
	205, 831,
	-2, 834,
	-1, 1762,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 736,
	-1, 1763,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 737,
	-1, 1764,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 738,
	-1, 1768,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 742,
	-1, 1769,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 743,
	-1, 1770,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 744,
	-1, 1852,
	1, 527,
	70, 527,
	101, 527,
	110, 527,
	122, 527,
	126, 527,
	128, 527,
	141, 527,
	150, 527,
	157, 527,
	166, 527,
	169, 527,
	181, 527,
	194, 527,
	196, 527,
	200, 527,
	240, 527,
	242, 527,
	303, 527,
	311, 527,
	322, 527,
	323, 527,
	332, 527,
	349, 527,
	351, 527,
	353, 527,
	354, 527,
	-2, 526,
	-1, 1902,
	153, 0,
	-2, 710,
	-1, 1905,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 713,
	-1, 1906,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 715,
	-1, 2022,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 714,
	-1, 2023,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 716,
	-1, 2030,
	153, 0,
	-2, 745,
	-1, 2097,
	153, 0,
	-2, 746,
	-1, 2178,
	36, 0,
	135, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 1138,
}

const sqlPrivate = 57344

const sqlLast = 31717

var sqlAct = [...]int{

	635, 2177, 1808, 2206, 2161, 1340, 1386, 2162, 1994, 2163,
	2176, 1103, 2126, 1848, 1739, 1951, 2020, 1332, 555, 1818,
	2054, 625, 633, 1415, 1975, 1860, 1847, 1109, 1675, 994,
	1874, 1962, 576, 1658, 1635, 611, 1676, 60, 98, 98,
	995, 98, 865, 1956, 1385, 700, 533, 1404, 1590, 1661,
	345, 1389, 347, 98, 98, 98, 1390, 1564, 1826, 1649,
	98, 628, 632, 98, 840, 1341, 827, 1637, 837, 1563,
	1509, 98, 1422, 1835, 542, 1105, 921, 1428, 1470, 1154,
	98, 98, 1249, 1644, 98, 1129, 977, 98, 98, 98,
	98, 562, 75, 98, 98, 1274, 1145, 1182, 1313, 1063,
	591, 745, 1177, 1411, 1378, 479, 966, 329, 605, 1237,
	331, 24, 1259, 866, 1234, 1423, 560, 842, 828, 536,
	744, 1268, 537, 721, 1284, 951, 604, 712, 710, 912,
	713, 1334, 1134, 565, 1393, 76, 810, 809, 811, 465,
	90, 528, 75, 627, 955, 475, 77, 706, 554, 1061,
	454, 94, 476, 970, 563, 815, 790, 791, 1875, 468,
	1497, 2065, 2204, 1425, 2066, 862, 559, 344, 979, 1333,
	979, 1271, 2186, 526, 979, 1873, 1337, 75, 1659, 309,
	2173, 867, 868, 1365, 887, 888, 889, 897, 898, 899,
	2172, 2169, 2159, 1365, 862, 862, 24, 890, 867, 868,
	2156, 1601, 2145, 862, 870, 1359, 2123, 901, 856, 862,
	519, 552, 559, 74, 2107, 582, 2103, 1873, 1272, 862,
	2099, 870, 551, 1359, 1534, 1535, 2091, 2061, 869, 2090,
	2062, 1602, 1501, 2048, 884, 567, 1873, 1502, 2045, 81,
	49, 862, 1365, 2043, 1136, 869, 1873, 573, 1178, 50,
	579, 884, 2024, 586, 2005, 1359, 2004, 862, 1978, 1873,
	2113, 1365, 1929, 1273, 1270, 1365, 1907, 83, 1904, 1365,
	1647, 1359, 1894, 51, 1181, 1365, 1893, 1549, 1872, 1365,
	1802, 1873, 1797, 1331, 1647, 1331, 1714, 875, 1624, 1365,
	1581, 862, 1135, 1582, 1656, 1316, 1579, 1578, 1577, 1365,
	1365, 1365, 1498, 84, 875, 1365, 894, 902, 1500, 1419,
	344, 79, 862, 1365, 1369, 1621, 1775, 1365, 80, 98,
	1365, 1717, 1143, 1625, 900, 98, 98, 98, 98, 98,
	1540, 542, 867, 868, 862, 718, 1414, 78, 1275, 892,
	1364, 81, 1376, 1365, 1358, 885, 1253, 1359, 1330, 344,
	1178, 1331, 823, 1053, 1142, 870, 74, 1141, 980, 589,
	980, 610, 885, 733, 980, 572, 1508, 85, 560, 83,
	891, 988, 1181, 595, 989, 1075, 759, 539, 1876, 869,
	81, 1662, 2196, 49, 1970, 2175, 2168, 2131, 1550, 2094,
	2046, 1937, 50, 1934, 1930, 74, 81, 1922, 1921, 1920,
	1916, 822, 312, 1915, 1914, 84, 64, 1913, 83, 1852,
	1825, 1806, 1790, 79, 1785, 1269, 51, 1784, 886, 1783,
	80, 1725, 49, 833, 83, 1623, 1627, 1586, 1583, 1571,
	1660, 50, 715, 715, 895, 886, 1562, 1363, 875, 1336,
	929, 1533, 1530, 1529, 84, 574, 1527, 1514, 581, 584,
	98, 574, 1513, 722, 1432, 51, 1281, 1280, 716, 822,
	84, 1551, 821, 1245, 1601, 1108, 697, 98, 79, 1741,
	98, 98, 699, 2187, 983, 80, 978, 1135, 78, 2148,
	1101, 542, 707, 922, 2110, 78, 2089, 2088, 2087, 542,
	2079, 2077, 2069, 2057, 78, 2041, 885, 2032, 1991, 1980,
	1945, 893, 1927, 1899, 881, 882, 883, 896, 1879, 880,
	878, 879, 871, 872, 873, 874, 876, 877, 1840, 98,
	1816, 2064, 2125, 1814, 1813, 98, 880, 878, 879, 871,
	872, 873, 874, 876, 877, 763, 1811, 1709, 1804, 81,
	1684, 1683, 1561, 1523, 1522, 1936, 98, 98, 98, 64,
	98, 1519, 1545, 1543, 1544, 1536, 1537, 1538, 1539, 1541,
	1542, 1494, 1489, 1239, 1967, 98, 1461, 83, 1246, 886,
	808, 1459, 1446, 1445, 1418, 956, 98, 959, 81, 1323,
	755, 1279, 1102, 1534, 1535, 577, 963, 949, 64, 542,
	98, 948, 947, 946, 945, 944, 347, 542, 867, 868,
	943, 942, 762, 84, 941, 832, 83, 940, 939, 938,
	937, 79, 936, 935, 934, 933, 926, 915, 80, 78,
	826, 870, 807, 742, 729, 727, 1942, 99, 1941, 738,
	740, 743, 1909, 1841, 922, 763, 831, 78, 1446, 1534,
	1535, 1611, 84, 763, 1610, 869, 863, 560, 913, 833,
	79, 800, 2093, 803, 850, 2067, 1662, 80, 794, 1638,
	880, 878, 879, 871, 872, 873, 874, 876, 877, 753,
	792, 867, 868, 595, 848, 1940, 330, 1603, 751, 348,
	574, 1178, 1585, 1584, 1473, 1534, 1535, 584, 796, 1540,
	782, 849, 961, 754, 870, 698, 1059, 962, 552, 98,
	931, 543, 860, 1106, 98, 98, 98, 1471, 98, 551,
	1957, 540, 1410, 818, 819, 867, 868, 1333, 869, 824,
	1409, 752, 1742, 1534, 1535, 98, 98, 1260, 1968, 1505,
	952, 1069, 1068, 98, 539, 534, 692, 98, 870, 1534,
	1535, 861, 98, 1597, 1671, 968, 2102, 1550, 833, 2134,
	2193, 1887, 542, 542, 786, 1618, 315, 1368, 779, 843,
	347, 844, 869, 512, 2194, 518, 98, 513, 517, 98,
	549, 98, 98, 98, 98, 98, 98, 875, 1090, 925,
	780, 2015, 98, 1271, 2014, 928, 2013, 98, 98, 1001,
	88, 1540, 2012, 787, 98, 953, 954, 1534, 1535, 1699,
	982, 324, 1698, 985, 1668, 98, 1667, 1147, 316, 1518,
	1076, 1517, 1516, 1695, 1072, 1107, 1074, 690, 957, 1515,
	1551, 875, 1476, 1898, 98, 1366, 1060, 98, 960, 1540,
	1272, 1147, 1221, 1133, 845, 1175, 98, 1146, 1174, 1171,
	751, 793, 588, 1327, 98, 1540, 1326, 87, 98, 1550,
	1192, 969, 75, 992, 1405, 1097, 98, 98, 325, 972,
	98, 1098, 525, 98, 691, 2101, 1702, 707, 1077, 349,
	347, 1079, 1155, 1046, 1236, 1273, 1270, 1048, 1038, 885,
	1803, 1112, 1100, 752, 1047, 1792, 574, 1050, 990, 1236,
	725, 544, 778, 1587, 1051, 964, 1071, 1073, 1070, 1996,
	1148, 1078, 1064, 1540, 741, 918, 2146, 766, 1183, 1190,
	973, 1084, 1543, 1544, 1536, 1537, 1538, 1539, 1541, 1542,
	1191, 1081, 1551, 1275, 1085, 1086, 1087, 1088, 1089, 1001,
	1001, 640, 1591, 1099, 877, 520, 2165, 834, 1158, 1094,
	1095, 1159, 1161, 2142, 767, 2200, 1114, 765, 1116, 1115,
	1275, 552, 886, 1260, 552, 552, 1686, 1131, 543, 2215,
	1166, 1550, 1125, 1169, 1139, 1126, 1127, 2143, 1180, 545,
	783, 968, 318, 317, 98, 1542, 98, 98, 1151, 98,
	2193, 2082, 98, 1172, 98, 98, 1466, 98, 98, 86,
	542, 1412, 1413, 550, 1353, 1617, 319, 1096, 546, 1257,
	326, 1463, 871, 872, 873, 874, 876, 877, 547, 858,
	979, 1164, 521, 1545, 1543, 1544, 1536, 1537, 1538, 1539,
	1541, 1542, 2166, 1176, 776, 1044, 854, 1269, 89, 328,
	867, 868, 724, 857, 1551, 784, 1157, 1244, 1052, 327,
	1693, 1247, 853, 1735, 878, 879, 871, 872, 873, 874,
	876, 877, 846, 870, 1536, 1537, 1538, 1539, 1541, 1542,
	967, 777, 851, 1294, 1144, 574, 971, 971, 540, 535,
	1595, 1619, 1538, 1539, 1541, 1542, 347, 869, 2167, 852,
	75, 1335, 950, 1335, 98, 75, 581, 584, 785, 1350,
	715, 558, 715, 843, 1400, 844, 1354, 98, 98, 98,
	748, 1357, 98, 98, 1339, 853, 1348, 1997, 543, 98,
	1349, 523, 722, 1355, 1591, 1351, 543, 1352, 1275, 1687,
	1478, 2028, 1156, 1362, 2042, 851, 1377, 1544, 1536, 1537,
	1538, 1539, 1541, 1542, 910, 1235, 875, 98, 347, 1243,
	557, 2199, 852, 1521, 1241, 98, 98, 98, 544, 2216,
	1732, 98, 1420, 310, 98, 1836, 1851, 1431, 559, 1372,
	98, 98, 98, 98, 98, 749, 954, 953, 845, 750,
	1374, 957, 98, 960, 1370, 98, 98, 1703, 1823, 2164,
	2209, 2192, 542, 75, 2190, 1950, 1648, 320, 1430, 522,
	559, 1375, 1218, 1443, 885, 1733, 843, 1140, 844, 1380,
	980, 452, 1402, 1373, 813, 770, 736, 1439, 732, 574,
	1433, 1250, 1648, 2220, 1001, 814, 543, 584, 1254, 311,
	1469, 574, 1262, 348, 543, 1382, 2007, 321, 763, 1456,
	2006, 1925, 1232, 1286, 1286, 1297, 1989, 1308, 1652, 2198,
	1408, 2074, 1883, 1320, 1321, 1322, 1886, 1230, 455, 867,
	868, 1771, 1670, 1885, 1421, 1442, 322, 1655, 323, 1438,
	1403, 1434, 1113, 812, 1652, 1384, 1104, 886, 1731, 460,
	1275, 845, 870, 1650, 2127, 456, 1458, 560, 1093, 1460,
	1054, 1507, 1653, 1655, 1652, 1819, 1976, 1952, 814, 1990,
	1965, 1216, 1219, 556, 813, 1472, 869, 1651, 544, 1650,
	463, 1448, 457, 1655, 1058, 1457, 544, 1447, 1653, 1831,
	1830, 1121, 1964, 748, 2219, 2207, 462, 1226, 804, 1834,
	705, 459, 694, 1651, 1215, 1227, 557, 1228, 1653, 1479,
	1926, 1233, 98, 1477, 704, 1344, 1943, 98, 1809, 98,
	584, 1882, 560, 584, 1772, 693, 98, 1056, 1468, 1493,
	1773, 1977, 1884, 812, 1987, 875, 1827, 98, 1654, 1057,
	879, 871, 872, 873, 874, 876, 877, 98, 98, 455,
	2208, 1504, 1645, 1278, 560, 2031, 1924, 542, 1988, 543,
	543, 1122, 1565, 1593, 1654, 1242, 846, 348, 1599, 1708,
	460, 2210, 1701, 1588, 620, 98, 456, 98, 637, 98,
	1609, 1528, 1488, 98, 1654, 1367, 544, 98, 841, 1568,
	1569, 1570, 1329, 349, 544, 1170, 1167, 789, 788, 1217,
	781, 1001, 1626, 457, 1628, 775, 774, 1963, 773, 1443,
	98, 458, 95, 95, 772, 313, 1605, 1229, 1606, 1607,
	771, 768, 459, 1596, 1231, 703, 596, 446, 447, 448,
	1001, 1566, 1604, 1091, 467, 1083, 932, 481, 1381, 584,
	1383, 760, 1277, 574, 1032, 467, 2160, 560, 1682, 1681,
	1616, 1614, 1615, 2124, 566, 566, 1620, 1857, 313, 1691,
	1689, 313, 313, 585, 313, 461, 1622, 95, 592, 846,
	1669, 1634, 1534, 1535, 1406, 1398, 1356, 348, 1426, 987,
	1642, 986, 984, 981, 1630, 976, 1435, 1664, 1629, 1680,
	75, 1640, 1632, 859, 855, 1666, 75, 847, 1722, 1711,
	1608, 1636, 98, 702, 1673, 1646, 1643, 2036, 701, 1727,
	1728, 1729, 1657, 1416, 91, 1492, 816, 1465, 570, 1690,
	2194, 1692, 1495, 1066, 2038, 1665, 1700, 336, 34, 1163,
	3, 1001, 458, 1796, 1694, 342, 29, 1147, 341, 28,
	1511, 1512, 1147, 1162, 340, 27, 1183, 1746, 1160, 544,
	544, 338, 26, 867, 868, 1183, 1751, 349, 451, 1721,
	1718, 2084, 873, 874, 876, 877, 1876, 1001, 1001, 761,
	335, 18, 1031, 1417, 1743, 2096, 1001, 1001, 1540, 1828,
	1560, 1748, 98, 98, 1032, 1032, 461, 817, 1782, 571,
	511, 1573, 1734, 1736, 1737, 339, 13, 543, 1798, 593,
	869, 1778, 98, 1745, 594, 820, 98, 590, 98, 1001,
	343, 12, 1750, 34, 1779, 98, 578, 464, 542, 1168,
	1165, 29, 1815, 1795, 28, 333, 11, 2114, 98, 1868,
	27, 98, 337, 9, 1948, 1812, 1550, 26, 1793, 1000,
	347, 1401, 98, 332, 8, 334, 4, 1799, 98, 98,
	98, 1397, 1801, 1456, 1338, 1800, 18, 1810, 514, 515,
	1132, 1049, 1869, 993, 1821, 98, 1361, 349, 2213, 2218,
	98, 1881, 98, 1589, 98, 98, 98, 2158, 967, 98,
	98, 13, 542, 348, 1820, 1682, 1681, 967, 1842, 1877,
	1843, 1833, 1880, 313, 1045, 1822, 12, 2117, 574, 708,
	313, 481, 481, 592, 1973, 1853, 1856, 1837, 1838, 1551,
	1805, 11, 1031, 1031, 1791, 867, 868, 1911, 9, 1903,
	1534, 1535, 98, 1738, 1897, 798, 1680, 1612, 763, 8,
	1580, 4, 867, 868, 1328, 1696, 1325, 1697, 870, 798,
	797, 1324, 1267, 1829, 1633, 348, 1832, 919, 799, 2140,
	2021, 1001, 1730, 1631, 929, 927, 524, 1995, 453, 1082,
	769, 1864, 869, 1865, 1969, 1839, 2141, 1917, 1520, 2053,
	1715, 1426, 2027, 1276, 930, 47, 1678, 614, 1858, 1000,
	1000, 1672, 1392, 1391, 350, 1067, 1923, 544, 636, 543,
	527, 1285, 1184, 1867, 98, 98, 695, 638, 998, 639,
	1946, 542, 1870, 1536, 1537, 1538, 1539, 1541, 1542, 999,
	958, 98, 98, 1682, 1681, 98, 626, 996, 1682, 1681,
	1944, 720, 1342, 98, 730, 1949, 1240, 1939, 1258, 1503,
	98, 923, 606, 618, 617, 1255, 726, 1776, 98, 1947,
	98, 737, 347, 98, 481, 481, 1974, 1954, 1786, 1972,
	1955, 98, 478, 63, 1680, 474, 1594, 347, 1935, 1680,
	1120, 1407, 1117, 1688, 548, 1531, 728, 1953, 1306, 1032,
	1298, 1971, 1295, 349, 795, 1682, 1681, 1982, 1999, 1866,
	836, 2001, 1981, 911, 1343, 758, 1600, 1360, 1938, 825,
	1998, 1128, 1985, 467, 1983, 569, 568, 1387, 756, 313,
	2017, 968, 1055, 1371, 904, 903, 516, 2000, 2009, 2076,
	747, 2026, 746, 1399, 2016, 1441, 1680, 98, 2214, 2083,
	481, 802, 481, 2037, 805, 1685, 1960, 1961, 2133, 1001,
	1966, 98, 82, 2092, 542, 349, 1846, 2033, 98, 566,
	2019, 1467, 35, 1344, 1426, 33, 98, 1682, 1681, 30,
	313, 25, 98, 2039, 2044, 2010, 2011, 23, 22, 21,
	598, 98, 98, 32, 95, 20, 31, 2070, 98, 1001,
	2052, 19, 1486, 2056, 17, 2071, 16, 2078, 2063, 544,
	2051, 2060, 15, 14, 543, 10, 46, 1484, 1680, 1426,
	2072, 45, 1426, 98, 98, 2073, 44, 1031, 43, 42,
	2050, 41, 2081, 7, 6, 597, 696, 5, 2068, 2,
	1, 0, 0, 2080, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 98, 0, 0, 2095, 0, 0, 2108,
	1034, 542, 2106, 0, 0, 1890, 0, 2109, 98, 2047,
	0, 1896, 2098, 0, 2115, 0, 0, 0, 347, 98,
	98, 0, 2112, 1033, 0, 0, 2122, 1481, 98, 560,
	98, 2059, 0, 98, 1000, 347, 2129, 1482, 1299, 0,
	2118, 1487, 0, 313, 1001, 2121, 1032, 2111, 313, 313,
	313, 0, 974, 0, 2130, 0, 0, 2139, 0, 2149,
	2116, 0, 2151, 0, 98, 0, 2150, 98, 2119, 313,
	313, 2147, 0, 0, 1959, 1032, 997, 95, 2153, 2155,
	2157, 95, 1682, 1681, 2154, 2135, 481, 0, 0, 2152,
	0, 0, 0, 0, 2170, 0, 0, 98, 0, 98,
	0, 0, 2183, 2185, 2182, 2184, 0, 2174, 0, 0,
	481, 98, 0, 481, 0, 95, 481, 481, 481, 481,
	481, 2191, 2189, 1680, 0, 2003, 1092, 734, 735, 0,
	2197, 481, 481, 2195, 0, 0, 0, 0, 467, 0,
	1034, 1034, 1426, 1426, 544, 2205, 1426, 1483, 2211, 1111,
	2212, 2203, 0, 0, 1485, 0, 0, 0, 2217, 0,
	0, 0, 0, 1033, 1033, 2221, 0, 0, 566, 0,
	0, 592, 0, 0, 1031, 0, 1032, 0, 0, 0,
	313, 0, 1993, 0, 0, 0, 0, 0, 1152, 0,
	0, 0, 313, 0, 0, 0, 0, 0, 0, 0,
	313, 1173, 0, 1031, 313, 0, 0, 1179, 0, 0,
	0, 0, 1032, 1032, 0, 543, 997, 997, 0, 0,
	1868, 1032, 1032, 1861, 0, 0, 0, 0, 0, 0,
	0, 1859, 0, 829, 829, 1863, 0, 348, 0, 0,
	0, 1000, 838, 0, 0, 0, 0, 0, 0, 867,
	868, 0, 0, 1869, 1032, 0, 0, 0, 0, 0,
	0, 0, 2049, 0, 905, 906, 907, 908, 909, 0,
	1000, 0, 870, 0, 917, 1862, 0, 1426, 0, 543,
	0, 0, 0, 0, 924, 0, 0, 0, 0, 0,
	0, 0, 0, 615, 61, 0, 869, 0, 0, 0,
	0, 0, 0, 0, 1031, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 313, 0,
	1346, 1347, 0, 313, 0, 0, 313, 0, 481, 481,
	0, 481, 592, 2136, 2137, 2138, 0, 0, 0, 0,
	1031, 1031, 2144, 0, 61, 0, 0, 0, 0, 1031,
	1031, 0, 1864, 0, 1865, 875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	0, 1000, 561, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 1031, 0, 1867, 0, 0, 0, 0, 0,
	0, 0, 0, 1870, 2132, 0, 1032, 0, 543, 0,
	0, 0, 0, 0, 0, 544, 0, 1000, 1000, 0,
	0, 0, 0, 885, 0, 0, 1000, 1000, 0, 0,
	0, 0, 0, 0, 0, 1034, 0, 349, 1379, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	0, 313, 313, 313, 0, 0, 313, 1388, 1033, 1000,
	0, 0, 0, 592, 348, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 544,
	1866, 0, 0, 0, 0, 0, 0, 1118, 0, 1123,
	0, 313, 0, 0, 0, 1130, 886, 0, 0, 313,
	1436, 1437, 0, 0, 0, 1152, 0, 0, 1444, 0,
	0, 997, 0, 0, 1449, 1450, 1452, 1454, 1455, 0,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 1464,
	313, 0, 0, 0, 1031, 0, 0, 0, 0, 0,
	0, 543, 0, 0, 0, 0, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 0, 1220,
	0, 1222, 1223, 1224, 1225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1032, 0, 0, 0, 1248, 0,
	871, 872, 873, 874, 876, 877, 0, 0, 544, 0,
	0, 1000, 0, 0, 0, 0, 0, 0, 0, 0,
	1282, 1283, 0, 0, 1296, 0, 1307, 1309, 1314, 1317,
	1318, 1319, 0, 0, 1032, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 561, 0, 0, 0, 543, 349,
	0, 0, 1034, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 349, 348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1033, 0, 0, 0, 0,
	0, 1034, 348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 313, 0, 0, 0,
	0, 313, 0, 1598, 1033, 0, 0, 0, 0, 0,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 313, 1031, 0, 0, 0, 0, 0, 997, 0,
	0, 1379, 1379, 0, 0, 0, 0, 0, 0, 1032,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 997, 0, 1111,
	0, 1111, 1031, 481, 0, 1124, 0, 313, 0, 0,
	0, 1639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1034, 0, 0, 0, 0, 0, 0, 1000,
	0, 0, 1534, 1535, 313, 1552, 1553, 1554, 0, 0,
	0, 0, 0, 0, 0, 1033, 0, 0, 1901, 0,
	0, 1677, 0, 0, 0, 0, 0, 0, 1034, 1034,
	829, 0, 0, 0, 0, 0, 838, 1034, 1034, 1000,
	0, 0, 0, 0, 0, 0, 0, 0, 544, 0,
	0, 1033, 1033, 0, 0, 1549, 0, 0, 0, 0,
	1033, 1033, 0, 0, 0, 349, 0, 0, 997, 0,
	1034, 0, 0, 0, 0, 0, 0, 1031, 0, 0,
	0, 0, 349, 0, 0, 0, 553, 0, 0, 0,
	0, 0, 0, 1033, 0, 0, 1740, 0, 0, 0,
	0, 1300, 0, 0, 997, 997, 0, 0, 1540, 0,
	1474, 1475, 0, 997, 997, 0, 1480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 914, 0, 916, 0, 0, 0, 0, 0, 0,
	920, 0, 0, 0, 1000, 1555, 997, 0, 1499, 0,
	0, 0, 0, 0, 0, 1506, 0, 0, 1510, 0,
	0, 0, 0, 0, 0, 0, 1550, 0, 0, 0,
	0, 0, 0, 0, 1524, 0, 313, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1807, 0, 0, 917,
	1152, 0, 1111, 0, 0, 1314, 1314, 1314, 0, 1817,
	0, 0, 1034, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 313, 0, 0, 313, 0, 0, 1592, 0,
	0, 0, 0, 0, 0, 1033, 1850, 0, 0, 1551,
	0, 0, 1854, 1855, 1152, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1677, 592,
	1613, 0, 0, 0, 1888, 0, 1889, 0, 313, 1891,
	1892, 0, 0, 1895, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 0, 997, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1641, 0, 0, 0, 0, 1130,
	0, 0, 0, 0, 0, 0, 1918, 0, 0, 0,
	0, 0, 0, 0, 0, 1546, 1547, 1548, 0, 0,
	1545, 1543, 1544, 1536, 1537, 1538, 1539, 1541, 1542, 553,
	1674, 0, 553, 553, 1534, 1535, 0, 1552, 1553, 1554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1900, 0, 0, 0, 0, 0, 0, 0, 1704, 0,
	0, 1705, 0, 61, 0, 0, 61, 0, 0, 0,
	0, 0, 0, 1710, 0, 0, 1677, 0, 592, 1388,
	1034, 1677, 1719, 0, 0, 1300, 1300, 1549, 0, 0,
	1723, 0, 0, 1613, 0, 313, 313, 0, 0, 313,
	0, 0, 0, 1033, 0, 0, 0, 1850, 0, 0,
	0, 0, 0, 1747, 1979, 0, 1238, 1749, 0, 0,
	1034, 0, 1152, 0, 1984, 0, 0, 1986, 0, 0,
	0, 0, 0, 0, 0, 313, 0, 0, 1677, 0,
	1540, 0, 0, 1033, 0, 0, 0, 0, 0, 0,
	1780, 1781, 1300, 1300, 1300, 0, 997, 0, 0, 1787,
	1788, 1789, 0, 2018, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 829, 1555, 0, 0,
	0, 0, 0, 0, 61, 0, 61, 0, 838, 0,
	0, 0, 0, 1490, 1491, 0, 997, 0, 1550, 0,
	0, 592, 61, 0, 0, 0, 0, 61, 0, 0,
	1677, 0, 0, 0, 0, 313, 0, 0, 0, 0,
	0, 0, 2055, 0, 0, 1034, 0, 0, 0, 0,
	313, 0, 0, 0, 0, 0, 1850, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 1850, 0, 1033, 0,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 0,
	1557, 1558, 1559, 0, 1878, 0, 0, 0, 0, 0,
	0, 1551, 0, 0, 0, 0, 0, 2085, 2086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1902, 0, 0, 0, 1905, 1906, 0,
	0, 997, 1908, 2104, 0, 61, 0, 2105, 0, 1910,
	0, 1912, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 0, 0, 0, 0, 1919, 1300, 1300,
	0, 0, 0, 1850, 592, 0, 0, 0, 0, 0,
	0, 0, 2128, 0, 592, 0, 0, 313, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 1546, 1547, 1548,
	1928, 0, 1545, 1543, 1544, 1536, 1537, 1538, 1539, 1541,
	1542, 0, 0, 0, 0, 1677, 0, 0, 2055, 61,
	0, 1850, 61, 0, 0, 0, 0, 1300, 1300, 1300,
	1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
	1300, 1300, 1300, 1300, 1300, 1300, 0, 1300, 0, 0,
	0, 313, 1958, 592, 0, 867, 868, 0, 887, 888,
	889, 897, 898, 899, 0, 2188, 0, 0, 0, 0,
	0, 890, 0, 1238, 0, 0, 1706, 1707, 870, 0,
	0, 901, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 916, 0, 0, 0, 0, 0, 0,
	0, 0, 869, 0, 0, 0, 0, 0, 884, 0,
	2008, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2022, 2023, 0, 0, 0,
	0, 0, 0, 0, 0, 1752, 1753, 1754, 1755, 1756,
	1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
	1767, 1768, 1769, 1770, 0, 1774, 2035, 0, 916, 867,
	868, 875, 887, 888, 889, 897, 898, 899, 0, 0,
	0, 0, 0, 0, 0, 890, 0, 0, 0, 0,
	894, 902, 870, 0, 0, 901, 0, 0, 0, 2058,
	561, 0, 0, 0, 0, 0, 0, 0, 900, 0,
	0, 0, 0, 0, 0, 0, 869, 0, 0, 0,
	0, 0, 884, 892, 0, 0, 2075, 0, 0, 885,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 891, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 875, 838, 0, 867, 868,
	0, 0, 61, 0, 897, 898, 899, 0, 61, 0,
	0, 0, 0, 1663, 894, 902, 0, 0, 0, 0,
	0, 870, 886, 0, 901, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 0, 0, 0, 0, 895, 0,
	0, 0, 0, 0, 0, 869, 0, 892, 0, 0,
	0, 884, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 891, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2171,
	1300, 0, 0, 0, 0, 0, 0, 2181, 2181, 0,
	0, 0, 0, 0, 875, 893, 0, 0, 881, 882,
	883, 896, 0, 880, 878, 879, 871, 872, 873, 874,
	876, 877, 0, 894, 902, 0, 886, 0, 0, 1931,
	0, 867, 868, 2181, 887, 888, 889, 897, 898, 899,
	0, 0, 895, 0, 0, 1300, 0, 890, 0, 0,
	0, 0, 0, 0, 870, 0, 892, 901, 0, 0,
	0, 0, 885, 0, 0, 0, 0, 0, 2181, 0,
	0, 0, 0, 0, 0, 0, 1534, 1535, 869, 1552,
	1553, 1554, 0, 0, 884, 0, 1427, 0, 0, 0,
	0, 0, 1713, 0, 0, 0, 0, 0, 1992, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 893,
	0, 0, 881, 882, 883, 896, 0, 880, 878, 879,
	871, 872, 873, 874, 876, 877, 0, 0, 0, 1549,
	0, 1427, 0, 1576, 1427, 886, 0, 875, 0, 867,
	868, 0, 887, 888, 889, 897, 898, 899, 0, 0,
	0, 895, 1300, 2030, 0, 890, 894, 902, 0, 0,
	0, 0, 870, 0, 0, 901, 0, 0, 0, 0,
	0, 0, 0, 0, 900, 0, 0, 0, 0, 0,
	0, 0, 1540, 0, 0, 0, 869, 0, 0, 892,
	0, 0, 884, 0, 0, 885, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 893, 1555,
	891, 0, 0, 0, 896, 0, 880, 878, 879, 871,
	872, 873, 874, 876, 877, 0, 0, 0, 0, 0,
	1550, 0, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2097, 0, 0, 0, 894, 902, 0, 0, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 900, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 892, 0, 0,
	0, 0, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1551, 1427, 1427, 0, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 891, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 893, 0, 0, 881, 882, 883, 896, 0, 880,
	878, 879, 871, 872, 873, 874, 876, 877, 0, 0,
	0, 0, 0, 0, 0, 1575, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 895, 0, 0, 0, 0, 0, 0, 1546,
	1547, 1548, 0, 0, 1545, 1543, 1544, 1536, 1537, 1538,
	1539, 1541, 1542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2040, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 893,
	0, 0, 881, 882, 883, 896, 346, 880, 878, 879,
	871, 872, 873, 874, 876, 877, 0, 0, 0, 0,
	2100, 0, 100, 101, 365, 102, 366, 367, 368, 369,
	253, 370, 371, 372, 373, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 374, 107, 260, 261, 108,
	109, 375, 376, 262, 263, 264, 377, 110, 265, 378,
	351, 379, 111, 112, 113, 916, 114, 380, 115, 116,
	117, 381, 352, 118, 119, 382, 383, 384, 385, 386,
	387, 120, 121, 314, 122, 266, 123, 267, 268, 388,
	124, 389, 125, 390, 126, 391, 392, 127, 128, 393,
	129, 394, 0, 395, 269, 130, 131, 132, 270, 271,
	396, 397, 398, 133, 134, 272, 273, 274, 0, 135,
	399, 136, 400, 401, 353, 402, 137, 275, 403, 276,
	404, 138, 139, 140, 141, 277, 278, 355, 405, 145,
	406, 142, 407, 354, 143, 279, 144, 280, 281, 282,
	283, 284, 408, 285, 409, 356, 146, 147, 148, 357,
	149, 150, 151, 410, 153, 152, 411, 286, 358, 154,
	359, 412, 155, 413, 414, 156, 0, 157, 158, 159,
	161, 287, 160, 360, 162, 163, 165, 164, 415, 416,
	417, 288, 166, 289, 167, 168, 418, 169, 419, 420,
	170, 421, 422, 171, 290, 361, 172, 362, 291, 173,
	174, 175, 176, 177, 423, 178, 292, 179, 293, 180,
	424, 181, 182, 183, 184, 185, 294, 186, 187, 425,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 426, 200, 363, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 427, 212, 296, 211, 213, 214,
	428, 215, 204, 205, 216, 364, 217, 297, 298, 218,
	429, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	430, 225, 431, 226, 227, 228, 229, 230, 231, 232,
	432, 301, 302, 303, 433, 434, 233, 234, 304, 305,
	435, 235, 236, 237, 238, 436, 437, 239, 240, 241,
	242, 438, 243, 439, 306, 244, 245, 246, 307, 308,
	440, 441, 247, 442, 443, 444, 445, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	1844, 0, 0, 0, 0, 0, 0, 0, 1845, 100,
	101, 365, 102, 366, 367, 368, 369, 253, 370, 371,
	372, 373, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 374, 107, 260, 261, 108, 109, 375, 376,
	262, 263, 264, 377, 110, 265, 378, 351, 379, 111,
	112, 113, 0, 114, 380, 115, 116, 117, 381, 352,
	118, 119, 382, 383, 384, 385, 386, 387, 120, 121,
	314, 122, 266, 123, 267, 268, 388, 124, 389, 125,
	390, 126, 391, 392, 127, 128, 393, 129, 394, 0,
	395, 269, 130, 131, 132, 270, 271, 396, 397, 398,
	133, 134, 272, 273, 274, 0, 135, 399, 136, 400,
	401, 353, 402, 137, 275, 403, 276, 404, 138, 139,
	140, 141, 277, 278, 355, 405, 145, 406, 142, 407,
	354, 143, 279, 144, 280, 281, 282, 283, 284, 408,
	285, 409, 356, 146, 147, 148, 357, 149, 150, 151,
	410, 153, 152, 411, 286, 358, 154, 359, 412, 155,
	413, 414, 156, 0, 157, 158, 159, 161, 287, 160,
	360, 162, 163, 165, 164, 415, 416, 417, 288, 166,
	289, 167, 168, 418, 169, 419, 420, 170, 421, 422,
	171, 290, 361, 172, 362, 291, 173, 174, 175, 176,
	177, 423, 178, 292, 179, 293, 180, 424, 181, 182,
	183, 184, 185, 294, 186, 187, 425, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 426,
	200, 363, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 427, 212, 296, 211, 213, 214, 428, 215, 204,
	205, 216, 364, 217, 297, 298, 218, 429, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 430, 225, 431,
	226, 227, 228, 229, 230, 231, 232, 432, 301, 302,
	303, 433, 434, 233, 234, 304, 305, 435, 235, 236,
	237, 238, 436, 437, 239, 240, 241, 242, 438, 243,
	439, 306, 244, 245, 246, 307, 308, 440, 441, 247,
	442, 443, 444, 445, 248, 249, 250, 251, 252, 0,
	0, 0, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2120, 100, 101,
	365, 102, 366, 367, 368, 369, 253, 370, 371, 372,
	373, 103, 104, 105, 254, 255, 256, 257, 106, 258,
	259, 374, 107, 260, 261, 108, 109, 375, 376, 262,
	263, 264, 377, 110, 265, 378, 351, 379, 111, 112,
	113, 0, 114, 380, 115, 116, 117, 381, 352, 118,
	119, 382, 383, 384, 385, 386, 387, 120, 121, 314,
	122, 266, 123, 267, 268, 388, 124, 389, 125, 390,
	126, 391, 392, 127, 128, 393, 129, 394, 0, 395,
	269, 130, 131, 132, 270, 271, 396, 397, 398, 133,
	134, 272, 273, 274, 0, 135, 399, 136, 400, 401,
	353, 402, 137, 275, 403, 276, 404, 138, 139, 140,
	141, 277, 278, 355, 405, 145, 406, 142, 407, 354,
	143, 279, 144, 280, 281, 282, 283, 284, 408, 285,
	409, 356, 146, 147, 148, 357, 149, 150, 151, 410,
	153, 152, 411, 286, 358, 154, 359, 412, 155, 413,
	414, 156, 0, 157, 158, 159, 161, 287, 160, 360,
	162, 163, 165, 164, 415, 416, 417, 288, 166, 289,
	167, 168, 418, 169, 419, 420, 170, 421, 422, 171,
	290, 361, 172, 362, 291, 173, 174, 175, 176, 177,
	423, 178, 292, 179, 293, 180, 424, 181, 182, 183,
	184, 185, 294, 186, 187, 425, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 426, 200,
	363, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	427, 212, 296, 211, 213, 214, 428, 215, 204, 205,
	216, 364, 217, 297, 298, 218, 429, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 430, 225, 431, 226,
	227, 228, 229, 230, 231, 232, 432, 301, 302, 303,
	433, 434, 233, 234, 304, 305, 435, 235, 236, 237,
	238, 436, 437, 239, 240, 241, 242, 438, 243, 439,
	306, 244, 245, 246, 307, 308, 440, 441, 247, 442,
	443, 444, 445, 248, 249, 250, 251, 252, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 864, 0, 0, 100, 101, 365, 102, 366, 367,
	368, 369, 253, 370, 371, 372, 373, 103, 104, 105,
	254, 255, 256, 257, 106, 258, 259, 374, 107, 260,
	261, 108, 109, 375, 376, 262, 263, 264, 377, 110,
	265, 378, 351, 379, 111, 112, 113, 0, 114, 380,
	115, 116, 117, 381, 352, 118, 119, 382, 383, 384,
	385, 386, 387, 120, 121, 314, 122, 266, 123, 267,
	268, 388, 124, 389, 125, 390, 126, 391, 392, 127,
	128, 393, 129, 394, 0, 395, 269, 130, 131, 132,
	270, 271, 396, 397, 398, 133, 134, 272, 273, 274,
	0, 135, 399, 136, 400, 401, 353, 402, 137, 275,
	403, 276, 404, 138, 139, 140, 141, 277, 278, 355,
	405, 145, 406, 142, 407, 354, 143, 279, 144, 280,
	281, 282, 283, 284, 408, 285, 409, 356, 146, 147,
	148, 357, 149, 150, 151, 410, 153, 152, 411, 286,
	358, 154, 359, 412, 155, 413, 414, 156, 0, 157,
	158, 159, 161, 287, 160, 360, 162, 163, 165, 164,
	415, 416, 417, 288, 166, 289, 167, 168, 418, 169,
	419, 420, 170, 421, 422, 171, 290, 361, 172, 362,
	291, 173, 174, 175, 176, 177, 423, 178, 292, 179,
	293, 180, 424, 181, 182, 183, 184, 185, 294, 186,
	187, 425, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 426, 200, 363, 201, 202, 295,
	203, 0, 207, 208, 209, 210, 427, 212, 296, 211,
	213, 214, 428, 215, 204, 205, 216, 364, 217, 297,
	298, 218, 429, 224, 219, 220, 206, 221, 223, 299,
	222, 300, 430, 225, 431, 226, 227, 228, 229, 230,
	231, 232, 432, 301, 302, 303, 433, 434, 233, 234,
	304, 305, 435, 235, 236, 237, 238, 436, 437, 239,
	240, 241, 242, 438, 243, 439, 306, 244, 245, 246,
	307, 308, 440, 441, 247, 442, 443, 444, 445, 248,
	249, 250, 251, 252, 634, 623, 624, 621, 622, 613,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 0, 650, 616,
	0, 0, 0, 103, 104, 105, 254, 665, 256, 666,
	106, 667, 668, 0, 107, 260, 261, 108, 109, 619,
	649, 669, 670, 264, 0, 110, 661, 0, 642, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	352, 118, 119, 0, 643, 645, 0, 644, 646, 120,
	121, 314, 122, 671, 123, 672, 673, 839, 124, 0,
	125, 0, 126, 0, 0, 664, 128, 0, 129, 0,
	0, 0, 607, 130, 131, 132, 651, 652, 630, 0,
	0, 133, 134, 674, 675, 676, 0, 135, 0, 136,
	0, 0, 353, 0, 137, 662, 0, 276, 0, 138,
	139, 140, 141, 658, 660, 355, 0, 145, 0, 142,
	0, 354, 143, 677, 144, 678, 679, 680, 681, 682,
	0, 641, 0, 356, 146, 147, 148, 357, 149, 150,
	151, 0, 153, 152, 0, 663, 358, 154, 359, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 287,
	160, 360, 162, 163, 165, 164, 602, 0, 631, 659,
	166, 683, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 290, 361, 172, 362, 653, 173, 174, 175,
	176, 177, 0, 178, 654, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 684, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 363, 201, 202, 608, 203, 0, 207, 208,
	209, 210, 81, 212, 296, 211, 213, 214, 647, 215,
	204, 205, 216, 364, 217, 685, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 686, 222, 655, 0, 225,
	83, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	687, 688, 0, 0, 233, 234, 656, 657, 629, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 648,
	243, 0, 306, 244, 245, 246, 723, 689, 0, 0,
	247, 0, 0, 0, 79, 248, 249, 250, 251, 252,
	603, 80, 0, 0, 0, 0, 601, 0, 0, 0,
	0, 599, 600, 634, 623, 624, 621, 622, 613, 0,
	609, 0, 0, 0, 0, 612, 0, 0, 0, 100,
	101, 1264, 102, 0, 0, 0, 0, 650, 616, 0,
	0, 0, 103, 104, 105, 254, 665, 256, 666, 106,
	667, 668, 0, 107, 260, 261, 108, 109, 619, 649,
	669, 670, 264, 0, 110, 661, 0, 642, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 352,
	118, 119, 0, 643, 645, 0, 644, 646, 120, 121,
	314, 122, 671, 123, 672, 673, 0, 124, 0, 125,
	0, 126, 1265, 0, 664, 128, 0, 129, 0, 0,
	0, 607, 130, 131, 132, 651, 652, 630, 0, 0,
	133, 134, 674, 675, 676, 0, 135, 0, 136, 0,
	0, 353, 0, 137, 662, 0, 276, 0, 138, 139,
	140, 141, 658, 660, 355, 0, 145, 0, 142, 0,
	354, 143, 677, 144, 678, 679, 680, 681, 682, 0,
	641, 0, 356, 146, 147, 148, 357, 149, 150, 151,
	0, 153, 152, 0, 663, 358, 154, 359, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	360, 162, 163, 165, 164, 602, 0, 631, 659, 166,
	683, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 361, 172, 362, 653, 173, 174, 175, 176,
	177, 0, 178, 654, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 684, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 363, 201, 202, 608, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 647, 215, 204,
	205, 216, 364, 217, 685, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 686, 222, 655, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 687,
	688, 0, 0, 233, 234, 656, 657, 629, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 648, 243,
	0, 306, 244, 245, 246, 307, 689, 1263, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 603,
	0, 0, 0, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 1266, 634, 623, 624, 621, 622, 613, 609,
	1261, 0, 0, 0, 612, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 650, 616, 0,
	0, 0, 103, 104, 105, 254, 665, 256, 666, 106,
	667, 668, 0, 107, 260, 261, 108, 109, 619, 649,
	669, 670, 264, 0, 110, 661, 0, 642, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 352,
	118, 119, 0, 643, 645, 0, 644, 646, 120, 121,
	314, 122, 671, 123, 672, 673, 0, 124, 0, 125,
	0, 126, 0, 0, 664, 128, 0, 129, 0, 0,
	0, 607, 130, 131, 132, 651, 652, 630, 0, 0,
	133, 134, 674, 675, 676, 0, 135, 0, 136, 0,
	0, 353, 0, 137, 662, 0, 276, 0, 138, 139,
	140, 141, 658, 660, 355, 0, 145, 0, 142, 0,
	354, 143, 677, 144, 678, 679, 680, 681, 682, 0,
	641, 0, 356, 146, 147, 148, 357, 149, 150, 151,
	0, 153, 152, 0, 663, 358, 154, 359, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	360, 162, 163, 165, 164, 602, 0, 631, 659, 166,
	683, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 361, 172, 362, 653, 173, 174, 175, 176,
	177, 0, 178, 654, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 684, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 363, 201, 202, 608, 203, 0, 207, 208, 209,
	210, 81, 212, 296, 211, 213, 214, 647, 215, 204,
	205, 216, 364, 217, 685, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 686, 222, 655, 0, 225, 83,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 687,
	688, 0, 0, 233, 234, 656, 657, 629, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 648, 243,
	0, 306, 244, 245, 246, 723, 689, 0, 0, 247,
	0, 0, 0, 79, 248, 249, 250, 251, 252, 603,
	80, 0, 0, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 634, 623, 624, 621, 622, 613, 0, 609,
	0, 0, 0, 0, 612, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 650, 616, 0, 0,
	0, 103, 104, 105, 254, 665, 256, 666, 106, 667,
	668, 1310, 107, 260, 261, 108, 109, 619, 649, 669,
	670, 264, 0, 110, 661, 0, 642, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 352, 118,
	119, 0, 643, 645, 0, 644, 646, 120, 121, 314,
	122, 671, 123, 672, 673, 0, 124, 0, 125, 0,
	126, 0, 0, 664, 128, 0, 129, 0, 0, 0,
	607, 130, 131, 132, 651, 652, 630, 0, 0, 133,
	134, 674, 675, 676, 0, 135, 0, 136, 0, 1315,
	353, 0, 137, 662, 0, 276, 0, 138, 139, 140,
	141, 658, 660, 355, 0, 145, 0, 142, 0, 354,
	143, 677, 144, 678, 679, 680, 681, 682, 0, 641,
	0, 356, 146, 147, 148, 357, 149, 150, 151, 0,
	153, 152, 1311, 663, 358, 154, 359, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 360,
	162, 163, 165, 164, 602, 0, 631, 659, 166, 683,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 361, 172, 362, 653, 173, 174, 175, 176, 177,
	0, 178, 654, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 684, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	363, 201, 202, 608, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 647, 215, 204, 205,
	216, 364, 217, 685, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 686, 222, 655, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 687, 688,
	0, 1312, 233, 234, 656, 657, 629, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 648, 243, 0,
	306, 244, 245, 246, 307, 689, 0, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 603, 0,
	0, 0, 0, 0, 601, 0, 0, 0, 0, 599,
	600, 634, 623, 624, 621, 622, 613, 0, 609, 0,
	0, 0, 0, 612, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 650, 616, 0, 0, 0,
	103, 104, 105, 254, 665, 256, 666, 106, 667, 668,
	0, 107, 260, 261, 108, 109, 619, 649, 669, 670,
	264, 0, 110, 661, 0, 642, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 352, 118, 119,
	0, 643, 645, 0, 644, 646, 120, 121, 314, 122,
	671, 123, 672, 673, 0, 124, 0, 125, 0, 126,
	0, 0, 664, 128, 0, 129, 0, 0, 0, 607,
	130, 131, 132, 651, 652, 630, 0, 0, 133, 134,
	674, 675, 676, 0, 135, 0, 136, 0, 0, 353,
	0, 137, 662, 0, 276, 0, 138, 139, 140, 141,
	658, 660, 355, 0, 145, 0, 142, 0, 354, 143,
	677, 144, 678, 679, 680, 681, 682, 0, 641, 0,
	356, 146, 147, 148, 357, 149, 150, 151, 0, 153,
	152, 0, 663, 358, 154, 359, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 360, 162,
	163, 165, 164, 602, 1794, 631, 659, 166, 683, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	361, 172, 362, 653, 173, 174, 175, 176, 177, 0,
	178, 654, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 684, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 363,
	201, 202, 608, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 647, 215, 204, 205, 216,
	364, 217, 685, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 686, 222, 655, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 687, 688, 0,
	0, 233, 234, 656, 657, 629, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 648, 243, 0, 306,
	244, 245, 246, 307, 689, 0, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 603, 0, 0,
	0, 0, 0, 601, 0, 0, 0, 0, 599, 600,
	830, 634, 623, 624, 621, 622, 613, 609, 0, 0,
	0, 0, 612, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 650, 616, 0, 0, 0,
	103, 104, 105, 254, 665, 256, 666, 106, 667, 668,
	0, 107, 260, 261, 108, 109, 619, 649, 669, 670,
	264, 0, 110, 661, 0, 642, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 352, 118, 119,
	0, 643, 645, 0, 644, 646, 120, 121, 314, 122,
	671, 123, 672, 673, 0, 124, 0, 125, 0, 126,
	0, 0, 664, 128, 0, 129, 0, 0, 0, 607,
	130, 131, 132, 651, 652, 630, 0, 0, 133, 134,
	674, 675, 676, 0, 135, 0, 136, 0, 0, 353,
	0, 137, 662, 0, 276, 0, 138, 139, 140, 141,
	658, 660, 355, 0, 145, 0, 142, 0, 354, 143,
	677, 144, 678, 679, 680, 681, 682, 0, 641, 0,
	356, 146, 147, 148, 357, 149, 150, 151, 0, 153,
	152, 0, 663, 358, 154, 359, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 360, 162,
	163, 165, 164, 602, 0, 631, 659, 166, 683, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	361, 172, 362, 653, 173, 174, 175, 176, 177, 0,
	178, 654, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 684, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 363,
	201, 202, 608, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 647, 215, 204, 205, 216,
	364, 217, 685, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 686, 222, 655, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 687, 688, 0,
	0, 233, 234, 656, 657, 629, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 648, 243, 0, 306,
	244, 245, 246, 307, 689, 0, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 603, 0, 0,
	0, 0, 0, 601, 0, 0, 0, 0, 599, 600,
	0, 0, 0, 0, 0, 922, 1256, 609, 0, 0,
	0, 0, 612, 634, 623, 624, 621, 622, 613, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 650, 616, 0,
	0, 0, 103, 104, 105, 254, 665, 256, 666, 106,
	667, 668, 0, 107, 260, 261, 108, 109, 619, 649,
	669, 670, 264, 0, 110, 661, 0, 642, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 352,
	118, 119, 0, 643, 645, 0, 644, 646, 120, 121,
	314, 122, 671, 123, 672, 673, 839, 124, 0, 125,
	0, 126, 0, 0, 664, 128, 0, 129, 0, 0,
	0, 607, 130, 131, 132, 651, 652, 630, 0, 0,
	133, 134, 674, 675, 676, 0, 135, 0, 136, 0,
	0, 353, 0, 137, 662, 0, 276, 0, 138, 139,
	140, 141, 658, 660, 355, 0, 145, 0, 142, 0,
	354, 143, 677, 144, 678, 679, 680, 681, 682, 0,
	641, 0, 356, 146, 147, 148, 357, 149, 150, 151,
	0, 153, 152, 0, 663, 358, 154, 359, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	360, 162, 163, 165, 164, 602, 0, 631, 659, 166,
	683, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 361, 172, 362, 653, 173, 174, 175, 176,
	177, 0, 178, 654, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 684, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 363, 201, 202, 608, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 647, 215, 204,
	205, 216, 364, 217, 685, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 686, 222, 655, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 687,
	688, 0, 0, 233, 234, 656, 657, 629, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 648, 243,
	0, 306, 244, 245, 246, 307, 689, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 603,
	0, 0, 0, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 634, 623, 624, 621, 622, 613, 0, 609,
	0, 0, 0, 0, 612, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 650, 616, 0, 0,
	0, 103, 104, 105, 254, 665, 256, 666, 106, 667,
	668, 0, 107, 260, 261, 108, 109, 619, 649, 669,
	670, 264, 0, 110, 661, 0, 642, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 352, 118,
	119, 0, 643, 645, 0, 644, 646, 120, 121, 314,
	122, 671, 123, 672, 673, 0, 124, 0, 125, 0,
	126, 0, 0, 664, 128, 0, 129, 0, 0, 0,
	607, 130, 131, 132, 651, 652, 630, 0, 0, 133,
	134, 674, 675, 676, 0, 135, 0, 136, 0, 0,
	353, 0, 137, 662, 0, 276, 0, 138, 139, 140,
	141, 658, 660, 355, 0, 145, 0, 142, 0, 354,
	143, 677, 144, 678, 679, 680, 681, 682, 0, 641,
	0, 356, 146, 147, 148, 357, 149, 150, 151, 0,
	153, 152, 0, 663, 358, 154, 359, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 360,
	162, 163, 165, 164, 602, 0, 631, 659, 166, 683,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 361, 172, 362, 653, 173, 174, 175, 176, 177,
	0, 178, 654, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 684, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	363, 201, 202, 608, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 647, 215, 204, 205,
	216, 364, 217, 685, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 686, 222, 655, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 687, 688,
	0, 0, 233, 234, 656, 657, 629, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 648, 243, 0,
	306, 244, 245, 246, 307, 689, 0, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 603, 0,
	0, 0, 0, 0, 601, 0, 0, 0, 0, 599,
	600, 634, 623, 624, 621, 622, 613, 0, 609, 1777,
	0, 0, 0, 612, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 650, 616, 0, 0, 0,
	103, 104, 105, 254, 665, 256, 666, 106, 667, 668,
	0, 107, 260, 261, 108, 109, 619, 649, 669, 670,
	264, 0, 110, 661, 0, 642, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 352, 118, 119,
	0, 643, 645, 0, 644, 646, 120, 121, 314, 122,
	671, 123, 672, 673, 0, 124, 0, 125, 0, 126,
	0, 0, 664, 128, 0, 129, 0, 0, 0, 607,
	130, 131, 132, 651, 652, 630, 0, 0, 133, 134,
	674, 675, 676, 0, 135, 0, 136, 0, 0, 353,
	0, 137, 662, 0, 276, 0, 138, 139, 140, 141,
	658, 660, 355, 0, 145, 0, 142, 0, 354, 143,
	677, 144, 678, 679, 680, 681, 682, 0, 641, 0,
	356, 146, 147, 148, 357, 149, 150, 151, 0, 153,
	152, 0, 663, 358, 154, 359, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 360, 162,
	163, 165, 164, 602, 0, 631, 659, 166, 683, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	361, 172, 362, 653, 173, 174, 175, 176, 177, 0,
	178, 654, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 684, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 363,
	201, 202, 608, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 647, 215, 204, 205, 216,
	364, 217, 685, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 686, 222, 655, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 687, 688, 0,
	0, 233, 234, 656, 657, 629, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 648, 243, 0, 306,
	244, 245, 246, 307, 689, 1726, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 603, 0, 0,
	0, 0, 0, 601, 0, 0, 0, 0, 599, 600,
	634, 623, 624, 621, 622, 613, 0, 609, 0, 0,
	0, 0, 612, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 650, 616, 0, 0, 0, 103,
	104, 105, 254, 665, 256, 666, 106, 667, 668, 0,
	107, 260, 261, 108, 109, 619, 649, 669, 670, 264,
	0, 110, 661, 0, 642, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 352, 118, 119, 0,
	643, 645, 0, 644, 646, 120, 121, 314, 122, 671,
	123, 672, 673, 0, 124, 0, 125, 0, 126, 0,
	0, 664, 128, 0, 129, 0, 0, 0, 607, 130,
	131, 132, 651, 652, 630, 0, 0, 133, 134, 674,
	675, 676, 0, 135, 0, 136, 0, 0, 353, 0,
	137, 662, 0, 276, 0, 138, 139, 140, 141, 658,
	660, 355, 0, 145, 0, 142, 0, 354, 143, 677,
	144, 678, 679, 680, 681, 682, 0, 641, 0, 356,
	146, 147, 148, 357, 149, 150, 151, 0, 153, 152,
	0, 663, 358, 154, 359, 0, 155, 0, 0, 156,
	0, 157, 158, 159, 161, 287, 160, 360, 162, 163,
	165, 164, 602, 0, 631, 659, 166, 683, 167, 168,
	0, 169, 0, 0, 170, 0, 0, 171, 290, 361,
	172, 362, 653, 173, 174, 175, 176, 177, 0, 178,
	654, 179, 293, 180, 0, 181, 182, 183, 184, 185,
	684, 186, 187, 0, 188, 189, 190, 191, 192, 194,
	195, 193, 196, 197, 198, 199, 0, 200, 363, 201,
	202, 608, 203, 0, 207, 208, 209, 210, 0, 212,
	296, 211, 213, 214, 647, 215, 204, 205, 216, 364,
	217, 685, 298, 218, 0, 224, 219, 220, 206, 221,
	223, 686, 222, 655, 0, 225, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 301, 687, 688, 0, 0,
	233, 234, 656, 657, 629, 235, 236, 237, 238, 0,
	0, 239, 240, 241, 242, 648, 243, 0, 306, 244,
	245, 246, 307, 689, 0, 0, 247, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 603, 0, 0, 0,
	0, 0, 601, 0, 0, 0, 0, 599, 600, 634,
	623, 624, 621, 622, 613, 0, 609, 1716, 0, 0,
	0, 612, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 650, 616, 0, 0, 0, 103, 104,
	105, 254, 665, 256, 666, 106, 667, 668, 0, 107,
	260, 261, 108, 109, 619, 649, 669, 670, 264, 0,
	110, 661, 0, 642, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 352, 118, 119, 0, 643,
	645, 0, 644, 646, 120, 121, 314, 122, 671, 123,
	672, 673, 0, 124, 0, 125, 0, 126, 0, 0,
	664, 128, 0, 129, 0, 0, 0, 607, 130, 131,
	132, 651, 652, 630, 0, 0, 133, 134, 674, 675,
	676, 0, 135, 0, 136, 0, 1315, 353, 0, 137,
	662, 0, 276, 0, 138, 139, 140, 141, 658, 660,
	355, 0, 145, 0, 142, 0, 354, 143, 677, 144,
	678, 679, 680, 681, 682, 0, 641, 0, 356, 146,
	147, 148, 357, 149, 150, 151, 0, 153, 152, 0,
	663, 358, 154, 359, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 360, 162, 163, 165,
	164, 602, 0, 631, 659, 166, 683, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 361, 172,
	362, 653, 173, 174, 175, 176, 177, 0, 178, 654,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 684,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 363, 201, 202,
	608, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 647, 215, 204, 205, 216, 364, 217,
	685, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	686, 222, 655, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 687, 688, 0, 0, 233,
	234, 656, 657, 629, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 648, 243, 0, 306, 244, 245,
	246, 307, 689, 0, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 603, 0, 0, 0, 0,
	0, 601, 0, 0, 0, 0, 599, 600, 634, 623,
	624, 621, 622, 613, 0, 609, 0, 0, 0, 0,
	612, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 650, 616, 0, 0, 0, 103, 104, 105,
	254, 665, 256, 666, 106, 667, 668, 0, 107, 260,
	261, 108, 109, 619, 649, 669, 670, 264, 0, 110,
	661, 0, 642, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 352, 118, 119, 0, 643, 645,
	0, 644, 646, 120, 121, 314, 122, 671, 123, 672,
	673, 0, 124, 0, 125, 0, 126, 0, 0, 664,
	128, 0, 129, 0, 0, 0, 607, 130, 131, 132,
	651, 652, 630, 0, 0, 133, 134, 674, 675, 676,
	0, 135, 0, 136, 0, 0, 353, 0, 137, 662,
	0, 276, 0, 138, 139, 140, 141, 658, 660, 355,
	0, 145, 0, 142, 0, 354, 143, 677, 144, 678,
	679, 680, 681, 682, 0, 641, 0, 356, 146, 147,
	148, 357, 149, 150, 151, 0, 153, 152, 0, 663,
	358, 154, 359, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 287, 160, 360, 162, 163, 165, 164,
	602, 0, 631, 659, 166, 683, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 290, 361, 172, 362,
	653, 173, 174, 175, 176, 177, 0, 178, 654, 179,
	293, 180, 0, 181, 182, 183, 184, 185, 684, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 363, 201, 202, 608,
	203, 0, 207, 208, 209, 210, 0, 212, 296, 211,
	213, 214, 647, 215, 204, 205, 216, 364, 217, 685,
	298, 218, 0, 224, 219, 220, 206, 221, 223, 686,
	222, 655, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 301, 687, 688, 0, 0, 233, 234,
	656, 657, 629, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 648, 243, 0, 306, 244, 245, 246,
	307, 689, 0, 0, 247, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 603, 0, 0, 0, 0, 0,
	601, 0, 0, 0, 0, 599, 600, 830, 634, 623,
	624, 621, 622, 613, 609, 0, 0, 0, 0, 612,
	0, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 650, 616, 0, 0, 0, 103, 104, 105,
	254, 665, 256, 666, 106, 667, 668, 0, 107, 260,
	261, 108, 109, 619, 649, 669, 670, 264, 0, 110,
	661, 0, 642, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 352, 118, 119, 0, 643, 645,
	0, 644, 646, 120, 121, 314, 122, 671, 123, 672,
	673, 0, 124, 0, 125, 0, 126, 0, 0, 664,
	128, 0, 129, 0, 0, 0, 607, 130, 131, 132,
	651, 652, 630, 0, 0, 133, 134, 674, 675, 676,
	0, 135, 0, 136, 0, 0, 353, 0, 137, 662,
	0, 276, 0, 138, 139, 140, 141, 658, 660, 355,
	0, 145, 0, 142, 0, 354, 143, 677, 144, 678,
	679, 680, 681, 682, 0, 641, 0, 356, 146, 147,
	148, 357, 149, 150, 151, 0, 153, 152, 0, 663,
	358, 154, 359, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 287, 160, 360, 162, 163, 165, 164,
	602, 0, 631, 659, 166, 683, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 290, 361, 172, 362,
	653, 173, 174, 175, 176, 177, 0, 178, 654, 179,
	293, 180, 0, 181, 182, 183, 184, 185, 684, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 363, 201, 202, 608,
	203, 0, 207, 208, 209, 210, 0, 212, 296, 211,
	213, 214, 647, 215, 204, 205, 216, 364, 217, 685,
	298, 218, 0, 224, 219, 220, 206, 221, 223, 686,
	222, 655, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 301, 687, 688, 0, 0, 233, 234,
	656, 657, 629, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 648, 243, 0, 306, 244, 245, 246,
	307, 689, 0, 0, 247, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 603, 0, 0, 0, 0, 0,
	601, 0, 0, 0, 0, 599, 600, 634, 623, 624,
	621, 622, 613, 0, 609, 1251, 0, 0, 0, 612,
	0, 0, 0, 100, 101, 1119, 102, 0, 0, 0,
	0, 650, 616, 0, 0, 0, 103, 104, 105, 254,
	665, 256, 666, 106, 667, 668, 0, 107, 260, 261,
	108, 109, 619, 649, 669, 670, 264, 0, 110, 661,
	0, 642, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 352, 118, 119, 0, 643, 645, 0,
	644, 646, 120, 121, 314, 122, 671, 123, 672, 673,
	0, 124, 0, 125, 0, 126, 0, 0, 664, 128,
	0, 129, 0, 0, 0, 607, 130, 131, 132, 651,
	652, 630, 0, 0, 133, 134, 674, 675, 676, 0,
	135, 0, 136, 0, 0, 353, 0, 137, 662, 0,
	276, 0, 138, 139, 140, 141, 658, 660, 355, 0,
	145, 0, 142, 0, 354, 143, 677, 144, 678, 679,
	680, 681, 682, 0, 641, 0, 356, 146, 147, 148,
	357, 149, 150, 151, 0, 153, 152, 0, 663, 358,
	154, 359, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 360, 162, 163, 165, 164, 602,
	0, 631, 659, 166, 683, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 361, 172, 362, 653,
	173, 174, 175, 176, 177, 0, 178, 654, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 684, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 363, 201, 202, 608, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 647, 215, 204, 205, 216, 364, 217, 685, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 686, 222,
	655, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 687, 688, 0, 0, 233, 234, 656,
	657, 629, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 648, 243, 0, 306, 244, 245, 246, 307,
	689, 0, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 603, 0, 0, 0, 0, 0, 601,
	0, 0, 0, 0, 599, 600, 634, 623, 624, 621,
	622, 613, 0, 609, 0, 0, 0, 0, 612, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	650, 616, 0, 0, 0, 103, 104, 105, 254, 665,
	256, 666, 106, 667, 668, 0, 107, 260, 261, 108,
	109, 619, 649, 669, 670, 264, 0, 110, 661, 0,
	642, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 352, 118, 2180, 0, 643, 645, 0, 644,
	646, 120, 121, 314, 122, 671, 123, 672, 673, 0,
	124, 0, 125, 0, 126, 0, 0, 664, 128, 0,
	129, 0, 0, 0, 607, 130, 131, 132, 651, 652,
	630, 0, 0, 133, 134, 674, 675, 676, 0, 135,
	0, 136, 0, 0, 353, 0, 137, 662, 0, 276,
	0, 138, 139, 140, 141, 658, 660, 355, 0, 145,
	0, 142, 0, 354, 143, 677, 144, 678, 679, 680,
	681, 682, 0, 641, 0, 356, 146, 147, 148, 357,
	149, 150, 151, 0, 153, 152, 0, 663, 358, 154,
	359, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 360, 162, 163, 165, 164, 602, 0,
	631, 659, 166, 683, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 361, 172, 362, 653, 173,
	174, 175, 176, 177, 0, 178, 654, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 684, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 363, 201, 202, 608, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	647, 215, 204, 205, 216, 364, 217, 685, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 686, 222, 655,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 687, 688, 0, 0, 233, 234, 656, 657,
	629, 235, 236, 2179, 238, 0, 0, 239, 240, 241,
	242, 648, 243, 0, 306, 244, 245, 246, 307, 689,
	0, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 603, 0, 0, 0, 0, 0, 601, 0,
	0, 0, 0, 599, 600, 634, 623, 624, 621, 622,
	613, 0, 609, 0, 0, 0, 0, 612, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 650,
	616, 0, 0, 0, 103, 104, 105, 2178, 665, 256,
	666, 106, 667, 668, 0, 107, 260, 261, 108, 109,
	619, 649, 669, 670, 264, 0, 110, 661, 0, 642,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 352, 118, 2180, 0, 643, 645, 0, 644, 646,
	120, 121, 314, 122, 671, 123, 672, 673, 0, 124,
	0, 125, 0, 126, 0, 0, 664, 128, 0, 129,
	0, 0, 0, 607, 130, 131, 132, 651, 652, 630,
	0, 0, 133, 134, 674, 675, 676, 0, 135, 0,
	136, 0, 0, 353, 0, 137, 662, 0, 276, 0,
	138, 139, 140, 141, 658, 660, 355, 0, 145, 0,
	142, 0, 354, 143, 677, 144, 678, 679, 680, 681,
	682, 0, 641, 0, 356, 146, 147, 148, 357, 149,
	150, 151, 0, 153, 152, 0, 663, 358, 154, 359,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 360, 162, 163, 165, 164, 602, 0, 631,
	659, 166, 683, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 361, 172, 362, 653, 173, 174,
	175, 176, 177, 0, 178, 654, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 684, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 363, 201, 202, 608, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 647,
	215, 204, 205, 216, 364, 217, 685, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 686, 222, 655, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 687, 688, 0, 0, 233, 234, 656, 657, 629,
	235, 236, 2179, 238, 0, 0, 239, 240, 241, 242,
	648, 243, 0, 306, 244, 245, 246, 307, 689, 0,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 603, 0, 0, 0, 0, 0, 601, 0, 0,
	0, 0, 599, 600, 634, 623, 624, 621, 622, 613,
	0, 609, 0, 0, 0, 0, 612, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 0, 650, 616,
	0, 0, 0, 103, 104, 105, 254, 665, 256, 666,
	106, 667, 668, 0, 107, 260, 261, 108, 109, 619,
	649, 669, 670, 264, 0, 110, 661, 0, 642, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	352, 118, 119, 0, 643, 645, 0, 644, 646, 120,
	121, 314, 122, 671, 123, 672, 673, 0, 124, 0,
	125, 0, 126, 0, 0, 664, 128, 0, 129, 0,
	0, 0, 607, 130, 131, 132, 651, 652, 630, 0,
	0, 133, 134, 674, 675, 676, 0, 135, 0, 136,
	0, 0, 353, 0, 137, 662, 0, 276, 0, 138,
	139, 140, 141, 658, 660, 355, 0, 145, 0, 142,
	0, 354, 143, 677, 144, 678, 679, 680, 681, 682,
	0, 641, 0, 356, 146, 147, 148, 357, 149, 150,
	151, 0, 153, 152, 0, 663, 358, 154, 359, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 287,
	160, 360, 162, 163, 165, 164, 602, 0, 631, 659,
	166, 683, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 290, 361, 172, 362, 653, 173, 174, 175,
	176, 177, 0, 178, 654, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 684, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 363, 201, 202, 608, 203, 0, 207, 208,
	209, 210, 0, 212, 296, 211, 213, 214, 647, 215,
	204, 205, 216, 364, 217, 685, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 686, 222, 655, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	687, 688, 0, 0, 233, 234, 656, 657, 629, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 648,
	243, 0, 306, 244, 245, 246, 307, 689, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	603, 0, 0, 0, 0, 0, 601, 0, 0, 0,
	0, 599, 600, 1287, 623, 624, 621, 622, 613, 0,
	609, 0, 0, 0, 0, 612, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 650, 616, 0,
	0, 0, 103, 104, 105, 254, 665, 256, 666, 106,
	667, 668, 0, 107, 260, 261, 108, 109, 619, 649,
	669, 670, 264, 0, 110, 661, 0, 642, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 352,
	118, 119, 0, 643, 645, 0, 644, 646, 120, 121,
	314, 122, 671, 1290, 672, 673, 0, 124, 0, 125,
	0, 126, 0, 0, 664, 128, 0, 129, 0, 0,
	0, 607, 130, 131, 132, 651, 652, 630, 0, 0,
	133, 134, 674, 675, 676, 0, 135, 0, 136, 0,
	0, 353, 0, 137, 662, 0, 276, 0, 138, 139,
	1291, 141, 658, 660, 355, 0, 145, 0, 142, 0,
	354, 143, 677, 144, 678, 679, 680, 681, 682, 0,
	641, 0, 356, 146, 147, 148, 357, 149, 150, 151,
	0, 153, 152, 0, 663, 358, 154, 359, 0, 155,
	0, 0, 156, 0, 157, 1292, 1289, 161, 287, 160,
	360, 162, 163, 165, 164, 602, 0, 631, 659, 166,
	683, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 361, 172, 362, 653, 173, 174, 175, 176,
	177, 0, 178, 654, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 684, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 363, 201, 202, 608, 203, 0, 207, 208, 209,
	1293, 0, 212, 296, 211, 213, 214, 647, 215, 204,
	205, 216, 364, 217, 685, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 686, 222, 655, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 687,
	688, 0, 0, 233, 234, 656, 657, 629, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 648, 243,
	0, 306, 244, 245, 246, 307, 689, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 1288, 252, 603,
	0, 0, 0, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 634, 623, 624, 621, 622, 613, 0, 609,
	0, 0, 0, 0, 612, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 650, 616, 0, 0,
	0, 103, 104, 105, 254, 665, 256, 666, 106, 667,
	668, 0, 107, 260, 261, 108, 109, 619, 649, 669,
	670, 264, 0, 110, 661, 0, 642, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 352, 118,
	119, 0, 643, 645, 0, 644, 646, 120, 121, 314,
	122, 671, 123, 672, 673, 0, 124, 0, 125, 0,
	126, 0, 0, 664, 128, 0, 129, 0, 0, 0,
	607, 130, 131, 132, 651, 652, 630, 0, 0, 133,
	134, 674, 675, 676, 0, 135, 0, 136, 0, 0,
	353, 0, 137, 662, 0, 276, 0, 138, 139, 140,
	141, 658, 660, 355, 0, 145, 0, 142, 0, 354,
	143, 677, 144, 678, 679, 680, 681, 682, 0, 641,
	0, 356, 146, 147, 148, 357, 149, 150, 151, 0,
	153, 152, 0, 663, 358, 154, 359, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 360,
	162, 163, 165, 164, 0, 0, 631, 659, 166, 683,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 361, 172, 362, 653, 173, 174, 175, 176, 177,
	0, 178, 654, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 684, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	363, 201, 202, 1305, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 647, 215, 204, 205,
	216, 364, 217, 685, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 686, 222, 655, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 687, 688,
	0, 0, 233, 234, 656, 657, 629, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 648, 243, 0,
	306, 244, 245, 246, 307, 689, 0, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 0, 0, 1303, 0, 0, 0, 0, 1301,
	1302, 634, 623, 624, 621, 622, 613, 0, 1304, 0,
	0, 0, 0, 612, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 650, 616, 0, 0, 0,
	103, 104, 105, 254, 665, 256, 666, 106, 667, 668,
	0, 107, 260, 261, 108, 109, 0, 649, 669, 670,
	264, 0, 110, 661, 0, 642, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 352, 118, 119,
	0, 643, 645, 0, 644, 646, 120, 121, 314, 122,
	671, 123, 672, 673, 0, 124, 0, 125, 0, 126,
	0, 0, 664, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 651, 652, 630, 0, 0, 133, 134,
	674, 675, 676, 0, 135, 0, 136, 0, 0, 353,
	0, 137, 662, 0, 276, 0, 138, 139, 140, 141,
	658, 660, 355, 0, 145, 0, 142, 0, 354, 143,
	677, 144, 678, 679, 680, 681, 682, 0, 641, 0,
	356, 146, 147, 148, 357, 149, 150, 151, 0, 153,
	152, 0, 663, 358, 154, 359, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 360, 162,
	163, 165, 164, 0, 0, 631, 659, 166, 683, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	361, 172, 362, 653, 173, 174, 175, 176, 177, 0,
	178, 654, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 684, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 363,
	201, 202, 1305, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 647, 215, 204, 205, 216,
	364, 217, 685, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 686, 222, 655, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 687, 688, 0,
	0, 233, 234, 656, 657, 629, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 648, 243, 0, 306,
	244, 245, 246, 307, 689, 0, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 634,
	623, 624, 621, 622, 613, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 1304, 102, 0,
	0, 0, 612, 650, 616, 0, 0, 0, 103, 104,
	105, 0, 665, 256, 666, 106, 667, 668, 0, 107,
	260, 261, 108, 109, 619, 649, 669, 670, 264, 0,
	110, 661, 0, 642, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 352, 118, 2180, 0, 643,
	645, 0, 644, 646, 120, 121, 314, 122, 671, 123,
	672, 673, 0, 124, 0, 125, 0, 126, 0, 0,
	664, 128, 0, 129, 0, 0, 0, 607, 130, 131,
	132, 651, 652, 630, 0, 0, 133, 134, 674, 675,
	676, 0, 135, 0, 136, 0, 0, 353, 0, 137,
	662, 0, 276, 0, 138, 139, 140, 141, 658, 660,
	0, 0, 145, 0, 142, 0, 354, 143, 677, 144,
	678, 679, 680, 681, 682, 0, 641, 0, 0, 146,
	147, 148, 357, 149, 150, 151, 0, 153, 152, 0,
	663, 358, 154, 0, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 360, 162, 163, 165,
	164, 602, 0, 631, 659, 166, 683, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 361, 172,
	362, 653, 173, 174, 175, 176, 177, 0, 178, 654,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 684,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 363, 201, 202,
	608, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 647, 215, 204, 205, 216, 0, 217,
	685, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	686, 222, 655, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 687, 688, 0, 0, 233,
	234, 656, 657, 629, 235, 236, 2179, 238, 0, 0,
	239, 240, 241, 242, 648, 243, 0, 306, 244, 245,
	246, 307, 689, 0, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 634, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 599, 600, 0, 0,
	0, 100, 101, 0, 102, 609, 0, 0, 0, 650,
	612, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 649, 262, 263, 264, 0, 110, 661, 0, 642,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 352, 118, 119, 0, 643, 645, 0, 644, 646,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 651, 652, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 353, 0, 137, 662, 0, 276, 0,
	138, 139, 140, 141, 658, 660, 355, 0, 145, 0,
	142, 0, 354, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 356, 146, 147, 148, 357, 149,
	150, 151, 0, 153, 152, 0, 663, 358, 154, 359,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 360, 162, 163, 165, 164, 0, 0, 0,
	659, 166, 289, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 361, 172, 362, 653, 173, 174,
	175, 176, 177, 0, 178, 654, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 363, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 647,
	215, 204, 205, 216, 364, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 655, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 656, 657, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	648, 243, 0, 306, 244, 245, 246, 307, 308, 0,
	0, 247, 0, 541, 0, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 1679, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 351, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 352,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 353, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 277, 278, 355, 0, 145, 0, 142, 0,
	354, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 356, 146, 147, 148, 357, 149, 150, 151,
	0, 153, 152, 0, 286, 358, 154, 359, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	360, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 361, 172, 362, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 363, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 81, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 364, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 83,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 723, 308, 0, 0, 247,
	0, 0, 0, 79, 248, 249, 250, 251, 252, 0,
	80, 541, 538, 0, 539, 534, 529, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 101, 78,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 351, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 352, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 1065, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 531, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 353,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 355, 0, 145, 0, 142, 0, 354, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	356, 146, 147, 148, 357, 149, 150, 151, 0, 153,
	152, 0, 286, 358, 154, 359, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 360, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 532, 0, 170, 0, 0, 171, 290,
	361, 172, 362, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 363,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	364, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 530, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 0, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 541, 538, 0,
	539, 534, 529, 0, 0, 0, 0, 0, 540, 535,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 351, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 352, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	1062, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 531, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 353, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 355, 0,
	145, 0, 142, 0, 354, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 356, 146, 147, 148,
	357, 149, 150, 151, 0, 153, 152, 0, 286, 358,
	154, 359, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 360, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 532,
	0, 170, 0, 0, 171, 290, 361, 172, 362, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 363, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 364, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 530, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 0, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 541, 538, 0, 539, 534, 529, 0,
	0, 0, 0, 0, 540, 535, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 351, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 352,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 757, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 531, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 353, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 277, 278, 355, 0, 145, 0, 142, 0,
	354, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 356, 146, 147, 148, 357, 149, 150, 151,
	0, 153, 152, 0, 286, 358, 154, 359, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	360, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 532, 0, 170, 0, 0,
	171, 290, 361, 172, 362, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 363, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 364, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 530, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 541,
	538, 0, 539, 534, 529, 0, 0, 0, 0, 0,
	540, 535, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 351, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 352, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 531, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 353, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	355, 0, 145, 0, 142, 0, 354, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 356, 146,
	147, 148, 357, 149, 150, 151, 0, 153, 152, 0,
	286, 358, 154, 359, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 360, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 532, 0, 170, 0, 0, 171, 290, 361, 172,
	362, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 363, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 364, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 530, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 0, 97, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 540, 535, 253, 0,
	0, 0, 0, 103, 104, 105, 254, 255, 256, 257,
	106, 258, 259, 0, 107, 260, 261, 108, 109, 0,
	0, 262, 263, 264, 0, 110, 265, 0, 0, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	0, 118, 119, 0, 0, 0, 0, 0, 0, 120,
	121, 314, 122, 266, 123, 267, 268, 0, 124, 0,
	125, 0, 126, 0, 0, 127, 128, 0, 129, 0,
	0, 0, 269, 130, 131, 132, 270, 271, 0, 0,
	0, 133, 134, 272, 273, 274, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 275, 0, 276, 0, 138,
	139, 140, 141, 277, 278, 0, 0, 145, 0, 142,
	0, 0, 143, 279, 144, 280, 281, 282, 283, 284,
	0, 285, 0, 0, 146, 147, 148, 0, 149, 150,
	151, 0, 153, 152, 0, 286, 0, 154, 0, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 287,
	160, 0, 162, 163, 165, 164, 0, 0, 0, 288,
	166, 289, 167, 168, 0, 169, 0, 575, 170, 0,
	0, 171, 290, 0, 172, 0, 291, 173, 174, 175,
	176, 177, 0, 178, 292, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 294, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 0, 201, 202, 295, 203, 0, 207, 208,
	209, 210, 81, 212, 296, 211, 213, 214, 0, 215,
	204, 205, 216, 0, 217, 297, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 299, 222, 300, 0, 225,
	83, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	302, 303, 0, 0, 233, 234, 304, 305, 0, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 0,
	243, 0, 306, 244, 245, 246, 723, 308, 0, 0,
	247, 0, 97, 0, 79, 248, 249, 250, 251, 252,
	0, 80, 0, 0, 0, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 253, 0, 1424, 0,
	1429, 103, 104, 105, 254, 255, 256, 257, 106, 258,
	259, 0, 107, 260, 261, 108, 109, 0, 0, 262,
	263, 264, 0, 110, 265, 0, 0, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 0, 118,
	119, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 277, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	81, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 83, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 723, 308, 0, 0, 247, 0,
	97, 0, 79, 248, 249, 250, 251, 252, 0, 80,
	0, 0, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 78, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 120, 121, 314, 122, 266,
	123, 267, 268, 0, 124, 0, 125, 0, 126, 0,
	0, 127, 128, 0, 129, 0, 0, 0, 269, 130,
	131, 132, 270, 271, 0, 0, 0, 133, 134, 272,
	273, 274, 0, 135, 0, 136, 0, 0, 0, 0,
	137, 275, 0, 276, 0, 138, 139, 140, 141, 277,
	278, 0, 0, 145, 0, 142, 0, 0, 143, 279,
	144, 280, 281, 282, 283, 284, 0, 285, 0, 0,
	146, 147, 148, 0, 149, 150, 151, 0, 153, 152,
	0, 286, 0, 154, 0, 0, 155, 0, 0, 156,
	0, 157, 158, 159, 161, 287, 160, 0, 162, 163,
	165, 164, 0, 0, 0, 288, 166, 289, 167, 168,
	0, 169, 0, 575, 170, 0, 0, 171, 290, 0,
	172, 0, 291, 173, 174, 175, 176, 177, 0, 178,
	292, 179, 293, 180, 0, 181, 182, 183, 184, 185,
	294, 186, 187, 0, 188, 189, 190, 191, 192, 194,
	195, 193, 196, 197, 198, 199, 0, 200, 0, 201,
	202, 295, 203, 0, 207, 208, 209, 210, 0, 212,
	296, 211, 213, 214, 0, 215, 204, 205, 216, 0,
	217, 297, 298, 218, 0, 224, 219, 220, 206, 221,
	223, 299, 222, 300, 0, 225, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 301, 302, 303, 0, 0,
	233, 234, 304, 305, 0, 235, 236, 237, 238, 0,
	0, 239, 240, 241, 242, 0, 243, 0, 306, 244,
	245, 246, 307, 308, 0, 0, 247, 0, 97, 0,
	0, 248, 249, 250, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 253, 0, 1424, 0, 1429, 103, 104, 105,
	254, 255, 256, 257, 106, 258, 259, 0, 107, 260,
	261, 108, 109, 0, 0, 262, 263, 264, 0, 110,
	265, 0, 0, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 0, 118, 119, 0, 0, 0,
	0, 0, 0, 120, 121, 314, 122, 266, 123, 267,
	268, 0, 124, 0, 125, 0, 126, 0, 0, 127,
	128, 0, 129, 0, 0, 0, 269, 130, 131, 132,
	270, 271, 0, 0, 0, 133, 134, 272, 273, 274,
	0, 135, 0, 136, 0, 0, 0, 0, 137, 275,
	0, 276, 0, 138, 139, 140, 141, 277, 278, 0,
	0, 145, 0, 142, 0, 0, 143, 279, 144, 280,
	281, 282, 283, 284, 0, 285, 0, 0, 146, 147,
	148, 0, 149, 150, 151, 0, 153, 152, 0, 286,
	0, 154, 0, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 287, 160, 0, 162, 163, 165, 164,
	0, 0, 0, 288, 166, 289, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 290, 0, 172, 0,
	291, 173, 174, 175, 176, 177, 0, 178, 292, 179,
	293, 180, 0, 181, 182, 183, 184, 185, 294, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 0, 201, 202, 295,
	203, 0, 207, 208, 209, 210, 0, 212, 296, 211,
	213, 214, 0, 215, 204, 205, 216, 0, 217, 297,
	298, 218, 0, 224, 219, 220, 206, 221, 223, 299,
	222, 300, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 301, 302, 303, 0, 0, 233, 234,
	304, 305, 0, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 0, 243, 0, 306, 244, 245, 246,
	307, 308, 0, 0, 247, 0, 0, 97, 0, 248,
	249, 250, 251, 252, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 965, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 0, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 0, 0, 247, 0, 97, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 1345, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 277, 278, 0, 0, 145, 0,
	142, 0, 0, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 0, 146, 147, 148, 0, 149,
	150, 151, 0, 153, 152, 0, 286, 0, 154, 0,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 0, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 0, 172, 0, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 0, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 0, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 304, 305, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 0,
	0, 247, 0, 97, 0, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 1741, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 277, 278, 0, 0, 145, 0, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 634,
	623, 624, 621, 622, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 0, 102, 835,
	0, 0, 0, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 665, 256, 666, 106, 667, 668, 0, 107,
	260, 261, 108, 109, 0, 0, 669, 670, 264, 0,
	110, 265, 0, 351, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 352, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 671, 123,
	672, 673, 0, 124, 0, 125, 0, 126, 0, 0,
	664, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 630, 0, 0, 133, 134, 674, 675,
	676, 0, 135, 0, 136, 0, 0, 353, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	355, 0, 145, 0, 142, 0, 354, 143, 677, 144,
	678, 679, 680, 681, 682, 0, 641, 0, 356, 146,
	147, 148, 357, 149, 150, 151, 0, 153, 152, 0,
	286, 358, 154, 359, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 360, 162, 163, 165,
	164, 0, 0, 631, 288, 166, 683, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 361, 172,
	362, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 684,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 363, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 364, 217,
	685, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	686, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 687, 688, 0, 0, 233,
	234, 304, 305, 629, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 689, 541, 538, 247, 0, 0, 764, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 351, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 352,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 353, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 277, 278, 355, 0, 145, 0, 142, 0,
	354, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 356, 146, 147, 148, 357, 149, 150, 151,
	0, 153, 152, 0, 286, 358, 154, 359, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	360, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 361, 172, 362, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 363, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 364, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 97, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 0, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 93, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 92, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 541, 538, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 96, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 351, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 352, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 353,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 355, 0, 145, 0, 142, 0, 354, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	356, 146, 147, 148, 357, 149, 150, 151, 0, 153,
	152, 0, 286, 358, 154, 359, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 360, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	361, 172, 362, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 363,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	364, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 277, 278, 0, 0, 145, 0,
	142, 0, 0, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 0, 146, 147, 148, 0, 149,
	150, 151, 0, 153, 152, 0, 286, 0, 154, 0,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 0, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 0, 172, 0, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 0, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 0, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 304, 305, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 541,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 96, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 351, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 352, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 353, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	355, 0, 145, 0, 142, 0, 354, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 356, 146,
	147, 148, 357, 149, 150, 151, 0, 153, 152, 0,
	286, 358, 154, 359, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 360, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 361, 172,
	362, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 363, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 364, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 97, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 1155, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 1153, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 1396, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 1158,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 277, 278, 0, 0, 145, 1394, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 1157, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 1395, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 97, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 1155, 110, 265,
	0, 0, 1150, 111, 112, 113, 0, 114, 1153, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 1158, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 1149, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 1157, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 1156, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 1849, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 277, 278, 0, 0, 145, 0,
	142, 0, 0, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 0, 146, 147, 148, 0, 149,
	150, 151, 0, 153, 152, 0, 286, 0, 154, 0,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 0, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 0, 575, 170,
	0, 0, 171, 290, 0, 172, 0, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 0, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 0, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 304, 305, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 97,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 100, 101, 1080, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	0, 0, 145, 0, 142, 0, 0, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 0, 146,
	147, 148, 0, 149, 150, 151, 0, 153, 152, 0,
	286, 0, 154, 0, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 0, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 0, 172,
	0, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 0, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 0, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 97, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 991, 278, 0, 0, 145, 0, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 575, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 97, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 100, 101, 731, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 0, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	587, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 575, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 580, 278, 0, 0, 145, 0,
	142, 0, 0, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 0, 146, 147, 148, 0, 149,
	150, 151, 0, 153, 152, 0, 286, 0, 154, 0,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 0, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 0, 575, 170,
	0, 0, 171, 290, 0, 172, 0, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 0, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 0, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 304, 305, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 97,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 100, 101, 450, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	0, 0, 145, 0, 142, 0, 0, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 0, 146,
	147, 148, 0, 149, 150, 151, 0, 153, 152, 0,
	286, 0, 154, 0, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 0, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 0, 172,
	0, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 449, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 0, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 0, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 97, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 277, 278, 0, 0, 145, 0, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 97, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 0, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 1453, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	1451, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 1440, 278, 0, 0, 145, 0,
	142, 0, 0, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 0, 146, 147, 148, 0, 149,
	150, 151, 0, 153, 152, 0, 286, 0, 154, 0,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 0, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 0, 172, 0, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 0, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 0, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 304, 305, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 97,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 1110, 278,
	0, 0, 145, 0, 142, 0, 0, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 0, 146,
	147, 148, 0, 149, 150, 151, 0, 153, 152, 0,
	286, 0, 154, 0, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 0, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 0, 172,
	0, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 0, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 0, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 97, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 277, 278, 0, 0, 145, 0, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 466, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 97, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 975, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 0, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 0, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	806, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 801, 278, 0, 0, 145, 0,
	142, 0, 0, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 0, 146, 147, 148, 0, 149,
	150, 151, 0, 153, 152, 0, 286, 0, 154, 0,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 0, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 0, 172, 0, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 0, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 0, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 304, 305, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 97,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 739, 0,
	110, 265, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	0, 0, 145, 0, 142, 0, 0, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 0, 146,
	147, 148, 0, 149, 150, 151, 0, 153, 152, 0,
	286, 0, 154, 0, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 480, 0, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 0, 172,
	0, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 0, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 0, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 477, 302, 303, 0, 0, 233,
	473, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 97, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 277, 278, 0, 0, 145, 0, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 480,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 477, 302,
	303, 0, 0, 233, 473, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 97, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 0, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 719, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	717, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 714, 278, 0, 0, 145, 0,
	142, 0, 0, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 0, 146, 147, 148, 0, 149,
	150, 151, 0, 153, 152, 0, 286, 0, 154, 0,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 0, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 0, 172, 0, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 0, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 0, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 304, 305, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 97,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 711, 278,
	0, 0, 145, 0, 142, 0, 0, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 0, 146,
	147, 148, 0, 149, 150, 151, 0, 153, 152, 0,
	286, 0, 154, 0, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 0, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 0, 172,
	0, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 0, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 0, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 97, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 709, 278, 0, 0, 145, 0, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 97, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 0, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 583, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 564, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 471, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 277, 278, 0, 0, 145, 0,
	142, 0, 0, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 0, 146, 147, 148, 0, 149,
	150, 151, 0, 153, 152, 0, 286, 0, 154, 0,
	0, 469, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 480, 0, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 0, 172, 0, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 0, 201, 202, 472, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 470, 214, 0,
	215, 204, 205, 216, 0, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	477, 302, 303, 0, 0, 233, 473, 304, 305, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 97,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	0, 0, 145, 0, 142, 0, 0, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 0, 146,
	147, 148, 0, 149, 150, 151, 0, 153, 152, 0,
	286, 0, 154, 0, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 0, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 0, 172,
	0, 291, 173, 174, 0, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 0, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 0, 201, 202,
	295, 0, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 0, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 0, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 867, 868, 0, 887, 888,
	889, 897, 898, 899, 0, 0, 0, 0, 0, 0,
	0, 890, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 901, 0, 867, 868, 0, 887, 888, 889, 897,
	898, 899, 0, 0, 0, 0, 0, 0, 0, 890,
	0, 0, 869, 0, 0, 0, 870, 0, 884, 901,
	0, 867, 868, 0, 887, 888, 889, 897, 898, 899,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	869, 0, 0, 0, 870, 0, 884, 901, 0, 867,
	868, 0, 887, 888, 889, 897, 898, 899, 0, 0,
	0, 0, 0, 0, 0, 890, 0, 0, 869, 0,
	0, 875, 870, 0, 884, 901, 0, 0, 867, 868,
	0, 887, 888, 889, 897, 898, 899, 0, 0, 0,
	894, 902, 0, 0, 890, 0, 869, 0, 0, 875,
	0, 870, 884, 0, 901, 0, 0, 0, 900, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 894, 902,
	0, 0, 0, 892, 0, 869, 0, 875, 0, 885,
	0, 884, 0, 0, 0, 0, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 894, 902, 0, 0,
	0, 892, 0, 0, 891, 875, 0, 885, 0, 0,
	0, 0, 0, 0, 900, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 894, 902, 0, 0, 0, 892,
	0, 0, 891, 0, 875, 885, 0, 0, 0, 0,
	0, 0, 900, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 886, 894, 902, 0, 0, 892, 0, 0,
	891, 0, 0, 885, 0, 0, 0, 0, 895, 0,
	0, 900, 0, 0, 0, 0, 0, 0, 0, 0,
	886, 0, 0, 0, 0, 0, 892, 0, 891, 0,
	0, 0, 885, 0, 0, 0, 895, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 891, 0, 0,
	0, 0, 0, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 893, 886, 0, 881, 882,
	883, 896, 0, 880, 878, 879, 871, 872, 873, 874,
	876, 877, 895, 0, 0, 0, 0, 0, 0, 1574,
	0, 0, 0, 893, 0, 886, 881, 882, 883, 896,
	0, 880, 878, 879, 871, 872, 873, 874, 876, 877,
	0, 895, 0, 0, 0, 0, 0, 1526, 0, 0,
	0, 893, 0, 0, 881, 882, 883, 896, 0, 880,
	878, 879, 871, 872, 873, 874, 876, 877, 0, 0,
	0, 0, 2034, 0, 0, 0, 0, 0, 0, 893,
	0, 0, 881, 882, 883, 896, 0, 880, 878, 879,
	871, 872, 873, 874, 876, 877, 0, 0, 0, 0,
	2029, 0, 0, 0, 0, 0, 0, 0, 893, 0,
	0, 881, 882, 883, 896, 0, 880, 878, 879, 871,
	872, 873, 874, 876, 877, 0, 0, 867, 868, 2025,
	887, 888, 889, 897, 898, 899, 0, 0, 0, 0,
	0, 0, 0, 890, 0, 0, 0, 0, 0, 0,
	870, 0, 0, 901, 0, 867, 868, 0, 887, 888,
	889, 897, 898, 899, 0, 0, 0, 0, 0, 0,
	0, 890, 0, 0, 869, 0, 0, 0, 870, 0,
	884, 901, 0, 867, 868, 0, 887, 888, 889, 897,
	898, 899, 0, 0, 0, 0, 0, 0, 0, 890,
	0, 0, 869, 0, 0, 0, 870, 0, 884, 901,
	0, 867, 868, 0, 887, 888, 889, 897, 898, 899,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	869, 0, 0, 875, 870, 0, 884, 901, 0, 0,
	867, 868, 0, 887, 888, 889, 897, 898, 899, 0,
	0, 0, 894, 902, 0, 0, 890, 0, 869, 0,
	0, 875, 0, 870, 884, 0, 901, 0, 0, 0,
	900, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	894, 902, 0, 0, 0, 892, 0, 869, 0, 875,
	0, 885, 0, 884, 0, 0, 0, 0, 900, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 894, 902,
	0, 0, 0, 892, 0, 0, 891, 875, 0, 885,
	0, 0, 0, 0, 0, 0, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 894, 902, 0, 0,
	0, 892, 0, 0, 891, 0, 875, 885, 0, 0,
	0, 0, 0, 0, 900, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 886, 894, 902, 0, 0, 892,
	0, 0, 891, 0, 0, 885, 0, 0, 0, 0,
	895, 0, 0, 900, 0, 0, 0, 0, 0, 0,
	0, 0, 886, 0, 0, 0, 0, 0, 892, 0,
	891, 0, 0, 0, 885, 0, 0, 0, 895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 891,
	0, 0, 0, 0, 0, 0, 895, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 893, 886, 0,
	881, 882, 883, 896, 0, 880, 878, 879, 871, 872,
	873, 874, 876, 877, 895, 0, 0, 0, 2002, 0,
	0, 0, 0, 0, 0, 893, 0, 886, 881, 882,
	883, 896, 0, 880, 878, 879, 871, 872, 873, 874,
	876, 877, 0, 895, 0, 0, 1933, 0, 0, 0,
	0, 0, 0, 893, 0, 0, 881, 882, 883, 896,
	0, 880, 878, 879, 871, 872, 873, 874, 876, 877,
	0, 0, 0, 0, 1932, 0, 0, 0, 0, 0,
	0, 893, 0, 0, 881, 882, 883, 896, 0, 880,
	878, 879, 871, 872, 873, 874, 876, 877, 0, 0,
	1534, 1535, 1871, 1552, 1553, 1554, 0, 0, 0, 0,
	893, 0, 0, 881, 882, 883, 896, 0, 880, 878,
	879, 871, 872, 873, 874, 876, 877, 0, 0, 867,
	868, 1824, 887, 888, 889, 897, 898, 899, 0, 0,
	0, 0, 0, 0, 0, 890, 0, 0, 0, 0,
	0, 0, 870, 1549, 0, 901, 0, 867, 868, 0,
	887, 888, 889, 897, 898, 899, 0, 0, 0, 0,
	0, 0, 0, 890, 0, 0, 869, 0, 0, 0,
	870, 0, 884, 901, 0, 867, 868, 0, 887, 888,
	889, 897, 898, 899, 0, 0, 0, 0, 0, 0,
	0, 890, 0, 0, 869, 0, 1540, 0, 870, 0,
	884, 901, 0, 867, 868, 0, 887, 888, 889, 897,
	898, 899, 0, 0, 0, 0, 1556, 0, 0, 890,
	0, 0, 869, 0, 0, 875, 870, 0, 884, 901,
	0, 0, 0, 1555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 894, 902, 0, 0, 0, 0,
	869, 0, 0, 875, 1550, 0, 884, 0, 0, 0,
	0, 0, 900, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 894, 902, 0, 0, 0, 892, 0, 0,
	0, 875, 0, 885, 0, 0, 0, 0, 0, 0,
	900, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	894, 902, 0, 0, 0, 892, 0, 0, 891, 875,
	0, 885, 0, 0, 0, 0, 0, 0, 900, 0,
	0, 0, 0, 0, 0, 0, 0, 1551, 894, 902,
	0, 0, 0, 892, 0, 0, 891, 0, 0, 885,
	0, 0, 0, 0, 0, 0, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 886, 0, 0, 0,
	0, 892, 0, 0, 891, 0, 0, 885, 0, 0,
	0, 0, 895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 886, 0, 0, 0, 0, 0,
	0, 0, 891, 0, 0, 0, 0, 0, 0, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 886, 1546, 1547, 1548, 0, 0, 1545, 1543,
	1544, 1536, 1537, 1538, 1539, 1541, 1542, 0, 895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 893,
	886, 0, 881, 882, 883, 896, 0, 880, 878, 879,
	871, 872, 873, 874, 876, 877, 895, 0, 0, 0,
	1744, 0, 0, 0, 0, 0, 0, 893, 0, 0,
	881, 882, 883, 896, 0, 880, 878, 879, 871, 872,
	873, 874, 876, 877, 0, 0, 0, 0, 1720, 0,
	0, 0, 0, 0, 0, 893, 0, 0, 881, 882,
	883, 896, 0, 880, 878, 879, 871, 872, 873, 874,
	876, 877, 0, 0, 0, 0, 1252, 0, 0, 0,
	0, 0, 0, 893, 0, 0, 881, 882, 883, 896,
	0, 880, 878, 879, 871, 872, 873, 874, 876, 877,
	36, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 65, 0, 867, 868, 0, 887, 888, 889,
	897, 898, 899, 0, 39, 0, 0, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 0, 870, 67, 0,
	901, 0, 0, 0, 40, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 54, 0, 884, 0, 48,
	0, 0, 0, 49, 0, 0, 68, 0, 0, 0,
	53, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 0, 0, 0, 51, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 2202, 0, 0, 0, 0, 0, 0, 867, 868,
	0, 887, 888, 889, 897, 898, 899, 0, 0, 894,
	902, 0, 0, 0, 890, 0, 0, 0, 0, 1416,
	0, 870, 0, 0, 901, 0, 0, 900, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 869, 0, 0, 885, 0,
	0, 884, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 0, 0, 0, 52, 0, 0, 0, 0, 0,
	0, 0, 0, 891, 0, 0, 0, 0, 0, 1417,
	0, 0, 70, 71, 38, 0, 57, 0, 58, 2201,
	69, 0, 0, 0, 0, 59, 0, 0, 0, 81,
	0, 0, 0, 0, 875, 0, 62, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 66, 0,
	0, 886, 0, 894, 902, 0, 0, 83, 867, 868,
	0, 887, 888, 889, 897, 898, 899, 895, 0, 0,
	0, 900, 0, 0, 890, 0, 72, 0, 0, 0,
	0, 870, 0, 0, 901, 73, 892, 0, 0, 0,
	0, 0, 885, 84, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 869, 0, 0, 80, 0,
	0, 884, 0, 0, 0, 0, 0, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 893, 0, 0, 881, 882, 883,
	896, 0, 880, 878, 879, 871, 872, 873, 874, 876,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 875, 886, 1566, 0, 0, 1565,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 895, 1138, 894, 902, 0, 0, 0, 867, 868,
	0, 887, 888, 889, 897, 898, 899, 0, 0, 0,
	0, 900, 0, 0, 890, 0, 0, 0, 1137, 0,
	0, 870, 0, 0, 901, 0, 892, 0, 0, 0,
	0, 0, 885, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 869, 0, 0, 0, 0,
	0, 884, 0, 0, 0, 0, 0, 891, 893, 0,
	0, 881, 882, 883, 896, 0, 880, 878, 879, 871,
	872, 873, 874, 876, 877, 0, 0, 0, 0, 0,
	0, 0, 0, 867, 868, 0, 887, 888, 889, 897,
	898, 899, 0, 0, 0, 0, 0, 0, 0, 890,
	0, 0, 0, 0, 875, 886, 870, 0, 0, 901,
	0, 867, 868, 0, 887, 888, 889, 897, 898, 899,
	0, 895, 0, 894, 902, 0, 0, 890, 0, 0,
	869, 0, 0, 0, 870, 0, 884, 901, 0, 0,
	0, 900, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 892, 0, 869, 0,
	0, 0, 885, 0, 884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 891, 893, 875,
	0, 881, 882, 883, 896, 0, 880, 878, 879, 871,
	872, 873, 874, 876, 877, 0, 0, 0, 894, 902,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	0, 0, 0, 0, 0, 0, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 886, 894, 902, 0, 0,
	0, 892, 0, 0, 0, 0, 0, 885, 0, 0,
	0, 895, 0, 0, 900, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 892,
	0, 0, 891, 559, 0, 885, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	891, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 893, 0,
	886, 881, 882, 883, 896, 0, 880, 878, 879, 871,
	872, 873, 874, 876, 877, 0, 895, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 868, 886, 887,
	888, 889, 897, 898, 899, 0, 0, 0, 0, 0,
	0, 0, 890, 0, 895, 0, 0, 0, 0, 870,
	0, 0, 901, 0, 867, 868, 0, 887, 888, 889,
	897, 898, 899, 0, 0, 0, 0, 0, 0, 1724,
	890, 0, 0, 869, 1567, 0, 0, 870, 0, 884,
	901, 0, 0, 893, 0, 0, 881, 882, 883, 896,
	0, 880, 878, 879, 871, 872, 873, 874, 876, 877,
	0, 869, 0, 0, 0, 0, 0, 884, 0, 0,
	0, 893, 0, 0, 881, 882, 883, 896, 0, 880,
	878, 879, 871, 872, 873, 874, 876, 877, 0, 0,
	0, 0, 875, 0, 0, 0, 0, 1572, 0, 867,
	868, 0, 887, 888, 889, 897, 898, 899, 0, 0,
	0, 894, 902, 0, 0, 890, 0, 0, 0, 0,
	875, 0, 870, 0, 0, 901, 0, 0, 0, 900,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 894,
	902, 0, 0, 0, 892, 0, 869, 0, 0, 0,
	885, 0, 884, 0, 0, 0, 0, 900, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 891, 0, 0, 885, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 891, 0, 875, 0, 1534, 1535, 0,
	1552, 1553, 1554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 886, 894, 902, 0, 0, 0, 867,
	868, 0, 887, 888, 889, 897, 898, 899, 0, 895,
	0, 0, 900, 0, 0, 890, 0, 0, 0, 1525,
	0, 886, 870, 0, 0, 901, 0, 892, 0, 0,
	1549, 0, 0, 885, 0, 0, 0, 895, 0, 0,
	0, 0, 0, 0, 0, 0, 869, 0, 0, 0,
	0, 0, 884, 0, 0, 0, 0, 0, 891, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1532, 0, 0, 0, 0, 893, 0, 0, 881,
	882, 883, 896, 1540, 880, 878, 879, 871, 872, 873,
	874, 876, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 893, 875, 886, 881, 882, 883,
	896, 0, 880, 878, 879, 871, 872, 873, 874, 876,
	877, 0, 895, 0, 894, 902, 0, 0, 867, 868,
	0, 887, 888, 889, 897, 898, 899, 0, 0, 0,
	0, 1550, 900, 0, 890, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 901, 0, 0, 892, 0, 0,
	0, 0, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 869, 0, 0, 0, 0,
	0, 884, 0, 0, 0, 0, 0, 0, 891, 893,
	0, 0, 881, 882, 883, 896, 0, 880, 878, 879,
	871, 872, 873, 874, 876, 877, 0, 0, 0, 0,
	0, 0, 867, 868, 1551, 887, 888, 889, 897, 898,
	899, 0, 0, 0, 0, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 875, 870, 886, 0, 901, 0,
	0, 867, 868, 0, 887, 888, 889, 897, 898, 899,
	0, 0, 895, 894, 902, 0, 0, 0, 0, 869,
	0, 0, 0, 0, 870, 884, 0, 901, 0, 0,
	0, 900, 0, 1534, 1535, 0, 1552, 1553, 1554, 0,
	0, 0, 0, 0, 0, 0, 892, 0, 869, 1712,
	0, 0, 885, 0, 884, 0, 0, 0, 0, 0,
	1546, 1547, 1548, 0, 0, 1545, 1543, 1544, 1536, 1537,
	1538, 1539, 1541, 1542, 0, 0, 0, 891, 875, 893,
	0, 0, 881, 882, 883, 896, 1549, 880, 878, 879,
	871, 872, 873, 874, 876, 877, 0, 894, 902, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	0, 0, 0, 0, 0, 900, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 886, 894, 902, 0, 0,
	892, 0, 0, 0, 0, 0, 885, 0, 0, 1540,
	0, 895, 0, 0, 900, 0, 0, 0, 0, 0,
	1534, 1535, 0, 1552, 1553, 1554, 0, 0, 0, 892,
	0, 0, 0, 0, 0, 885, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1555, 0, 0, 0,
	0, 0, 0, 0, 867, 868, 0, 887, 888, 889,
	897, 898, 899, 0, 0, 0, 0, 1550, 0, 0,
	0, 0, 0, 1549, 0, 0, 0, 870, 893, 886,
	901, 881, 882, 883, 896, 0, 880, 878, 879, 871,
	872, 873, 874, 876, 877, 895, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 884, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 895, 0, 1540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1551, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 893, 1555, 0, 881, 882, 883, 896, 0,
	880, 878, 879, 871, 872, 873, 874, 876, 877, 894,
	902, 0, 0, 0, 1550, 0, 0, 0, 0, 0,
	0, 893, 0, 0, 881, 882, 883, 896, 0, 880,
	878, 879, 871, 872, 873, 874, 876, 877, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 885, 0,
	0, 0, 0, 0, 0, 0, 1546, 1547, 1548, 0,
	0, 1545, 1543, 1544, 1536, 1537, 1538, 1539, 1541, 1542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1020, 1010, 1039, 1002, 1030, 1029, 1551, 0, 1004,
	1003, 0, 0, 0, 0, 1041, 1040, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 886, 0, 0, 0, 0, 0, 1035, 0, 1027,
	1026, 0, 0, 0, 0, 0, 0, 895, 0, 1025,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1024, 1022, 1023,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1546, 1547, 1548, 0, 0, 1545, 1543,
	1544, 1536, 1537, 1538, 1539, 1541, 1542, 1013, 1012, 1014,
	1015, 1016, 1017, 1018, 0, 1038, 0, 0, 0, 0,
	0, 0, 0, 0, 893, 0, 0, 881, 882, 883,
	896, 0, 880, 878, 879, 871, 872, 873, 874, 876,
	877, 0, 0, 1006, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1028, 0, 0, 0, 1011,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1021, 0,
	0, 0, 1187, 1185, 1186, 1189, 1188, 0, 0, 0,
	0, 1020, 1010, 1039, 1002, 1030, 1029, 0, 0, 1004,
	1003, 0, 0, 0, 0, 1041, 1040, 0, 1007, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1019,
	1008, 0, 0, 0, 0, 0, 0, 0, 0, 1043,
	482, 0, 0, 0, 0, 0, 0, 1035, 0, 1027,
	1026, 1005, 0, 0, 1036, 1037, 0, 0, 487, 1025,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	488, 0, 0, 0, 0, 0, 1009, 1024, 1022, 1023,
	0, 1042, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 489, 0, 0, 0, 0, 490, 0, 0, 0,
	0, 495, 496, 0, 0, 507, 0, 1013, 1012, 1014,
	1015, 1016, 1017, 1018, 0, 1038, 0, 485, 491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	510, 0, 0, 1006, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1028, 0, 0, 0, 1011,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 493, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1021, 0,
	0, 0, 500, 0, 0, 497, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 0, 1007, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1019,
	1008, 0, 0, 0, 0, 0, 0, 0, 0, 1043,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1005, 0, 0, 1036, 1037, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1009, 0, 0, 0,
	0, 1042, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 501, 503, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 504, 0, 0,
	0, 509, 0, 0, 0, 505, 0, 0, 0, 0,
	486, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 508,
}
var sqlPact = [...]int{

	29547, -1000, 14, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 709, 17553, 17553, 998,
	21949, -1000, -1000, -1000, -1000, -1000, -1000, 666, 974, 720,
	326, 5314, 21949, 21949, 21635, 1179, 1161, 1145, 1179, 23519,
	-1000, -1000, 27601, -1000, 31406, 468, 472, 468, 468, 473,
	23519, 931, 582, 14375, 689, 128, -1000, 990, -13, 27287,
	21949, 1516, 11, 19751, 235, 29547, 21321, 26973, 21949, 21007,
	550, 5, 18181, 21949, -1000, 21, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1325,
	11080, 11080, 345, 21, -1000, 1324, 1182, 1168, 19751, -1000,
	-1000, -1000, -1000, -1000, 26659, 26345, 26031, 25717, 25403, -1000,
	13069, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 752, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 275, 274, -1000, 20693,
	-1000, 1012, -1000, 9, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11080, 11080, 1010, -1000, 21949, -1000, -1000, 25089,
	24775, 644, 273, 946, -1000, -1000, 548, 364, -1000, -1000,
	14049, 24, -1000, -1000, -1000, -1000, 1343, 1534, 17239, 687,
	1320, -1000, 1009, 1319, 1313, 1307, 1305, 1304, -1000, 804,
	-1000, 598, 486, -1000, 1299, 361, 816, 474, -1000, 1297,
	1296, 946, -1000, 946, -1000, -1000, -1000, 549, 23519, -1000,
	-1000, -1000, -1000, -1000, 19751, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1752, -1000, -1000, -1000, -1000,
	1761, -1000, -1000, -1000, -1000, 24461, 21949, 21949, 1180, 24147,
	-1000, 990, -1000, -1000, -1000, 1094, 1514, 1514, 1514, 1581,
	111, 108, 128, -2, 21949, -1000, 270, -2, 9384, 9384,
	-1000, -1000, 235, -1000, 306, 16599, -1000, 7689, -1000, 1175,
	1415, 405, 793, 1412, -147, 800, 776, 1411, 17239, 18181,
	5, -20, -1000, -1000, -1000, 4988, 17239, 30668, -1000, 11080,
	11080, 11080, 11080, 11080, 929, 300, -1000, 269, 267, 6319,
	-1000, -1000, 1760, -1000, -1000, -1000, 135, -1000, -1000, 11080,
	21, -1000, -1000, -1000, -1000, 266, 1770, -1000, 435, -1000,
	-1000, -1000, 375, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1338, 265, 264, -1000, -1000, -1000, -1000, 263,
	262, 260, 259, 258, 257, 254, 251, 250, 245, 244,
	243, 242, 241, 237, 866, -1000, 410, -1000, -1000, 410,
	410, -1000, 225, 225, 227, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 225, -1000, -1000, -1000, 366, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 236, 30668, 622, 15644, 21,
	-1000, -1000, -1000, 19751, 21949, 21949, 651, 23833, -1000, 1403,
	122, 1401, -1000, 120, 1400, -1000, 120, 1399, -20, 1397,
	20, -1000, -1000, 235, 20379, 21949, 1653, 31334, -1000, 11080,
	-1000, -1000, 17553, 1300, 30668, 30668, 17553, -1000, -1000, 1651,
	-1000, 21949, 11080, -1, -1000, -1000, -1000, -1000, 1113, 1174,
	499, 13723, 13397, 1471, 727, -1000, -1000, -1000, 23, 5314,
	144, 640, -1000, -1000, -1000, 20065, -1000, -1000, 21949, 1337,
	17553, 21949, 21949, 21949, 21949, 21949, -1000, -1000, -1000, 484,
	1335, 21949, -1000, 1111, -1000, -1000, 21949, 21949, 717, 581,
	-1000, -1, -1000, 23519, -1000, 126, -1000, -1000, -1000, -1000,
	232, 1080, 379, 115, 23205, 379, 1076, -1000, 1094, -1000,
	1021, 1184, 10063, 1199, 11080, 128, -1000, -1000, 128, 128,
	11080, -1000, -1000, 21949, -2, 1650, 21949, 123, -1000, 29948,
	-1000, 123, -1000, -1000, -1000, 21949, 3, -1000, 30668, -1000,
	-32, 772, -1000, 19123, 1503, 1498, 1484, 19751, 1607, -13,
	1295, 1606, -13, 1294, 547, 21949, 21949, 546, 543, 19751,
	349, -1000, 21949, -1000, -1000, 18, -1000, 31134, 31334, 5314,
	561, 11080, 11080, 11080, 11080, 11080, 11080, 11080, 11080, 11080,
	11080, 11080, 11080, 11080, 11080, 11080, 11080, 11080, 11080, 11080,
	11080, 11080, 11080, 1156, 11080, 540, 11080, 11080, 11080, 11080,
	1139, 857, 213, 1117, -1000, 1742, 1742, 1742, 30781, 30781,
	218, 300, -1000, 11080, -1000, 9724, 108, 29195, -8, -1000,
	-1000, -1000, 7337, 406, 30668, 21, 5979, -1000, 1755, 699,
	1351, 1247, 231, 106, 105, 11080, 11080, 11419, 11419, 11080,
	11758, 11080, 11080, 6658, 11080, 11080, 11080, 11080, 11080, 11080,
	-1000, 229, -1000, -1000, -1000, -1000, 1754, -1000, -1000, 1749,
	-1000, 557, 554, 1747, -1000, 1291, -3, -1000, -1000, 395,
	89, 1644, 89, 15963, -1000, 21949, 21949, -1000, 21949, -1000,
	-1000, 21949, -1000, 21949, 21949, -1000, 21949, 21949, 144, 18495,
	738, 1394, 856, 144, -7, -1000, 1657, -1000, -1000, -1000,
	-1000, 87, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 227, 866, 225, 225, 225, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 366, -1000, -1000, 410,
	410, 410, -1000, -1000, -11, 30668, 533, -1000, 1284, 462,
	-1000, 386, -37, 946, 936, -1000, -1000, -1000, -1000, -1000,
	-1000, -12, -1000, -1000, -12, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1769, 5314, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 21949, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 144, -1000, -1000, -1000, -1000, 21949, 21949, 21949, -1000,
	-1000, 19751, 18809, 1641, 1393, 884, -1000, 1631, 21949, 1006,
	1074, -1000, 571, 1392, -1000, -1000, -1000, -1000, 30668, -1000,
	370, -1000, -1000, 30668, 746, 1176, -1000, 1176, -18, -1000,
	29688, -1000, 224, -42, 395, 9384, 15326, 5314, -1000, 395,
	103, 7689, -1000, 738, 21949, 21949, 21949, -1000, -1000, 1073,
	22891, 1069, 31334, 21949, -1000, 223, 222, 1149, 1143, 21949,
	21949, 22577, 22263, 21949, 1072, -13, -1000, 221, -13, -1000,
	216, 21949, 768, -1000, 21949, 21949, 753, 1216, 1028, -1000,
	383, 17239, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 355, 1239, 1239, 588, 588, 588, 588, 1725,
	1020, 2289, 705, 3748, 3748, 3748, 322, 661, 661, 3748,
	3748, 3748, 30781, 30752, 188, 11080, 11080, 530, 842, 213,
	188, 11080, 188, 188, 188, 188, -1000, 1899, -1000, -1000,
	-1000, -1000, 1281, 212, 11758, 11758, -1000, -1000, -1000, 6319,
	12097, -1000, -1000, -1000, -1000, 211, 11080, -1000, 29223, -198,
	-49, -1000, -1000, 11080, -41, -117, -1000, -1000, 632, -1000,
	11080, -1000, 12, 11080, 11080, 11080, 101, 96, -1000, 527,
	-1000, 520, 519, 517, -1000, 201, 939, 194, 193, 11080,
	-1000, -1000, 30539, 28263, 95, 1280, -112, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 92, 91, 30409, -112, 90, 29110,
	-1000, 11758, 11758, 11758, 6319, 192, 85, 29818, -112, 30324,
	9045, 9045, 9045, 78, 30296, 11080, -112, 28235, 3881, 3639,
	-53, -54, -55, 1743, -61, 77, 354, 353, 76, 620,
	1272, 21949, 692, 11080, 874, -1000, 15008, 427, 21949, 692,
	110, -1000, -1000, -1000, 342, 21949, -1000, -1000, -1000, 122,
	-1000, 120, 120, -20, -1000, -1000, 19751, -1000, -1000, 31334,
	296, 293, -1000, 1740, -1000, 11080, 21949, 21949, 1159, -1000,
	-1000, -1000, 693, -1000, 848, -1000, 14375, -1000, -39, -1000,
	-1000, -1000, -1000, 349, -1000, 74, -63, -31, 31334, -1000,
	-1000, -1000, -1000, -1000, 21949, 288, 21949, -13, 21949, -1000,
	1768, -13, 21949, 1389, 1423, 324, 21949, 746, -1000, 11080,
	1738, -1000, -1000, -1000, 11080, -1000, -1000, -1000, 144, -1000,
	1246, -1000, -84, 1142, 287, -177, 80, 325, -1000, 14690,
	-1000, 1246, -1000, -1000, -1000, -1000, 514, 512, 1388, -1000,
	1066, -1000, 431, -1000, 818, 11080, 12751, 191, 190, 860,
	-1000, 1378, 962, 1377, 962, -1000, -32, 748, -1000, 11080,
	-1000, 11080, -1000, 510, -1000, -1000, 507, 383, 1271, 587,
	-1000, 979, -1000, 11080, 188, 188, 11080, 11758, 11758, -1000,
	188, -1000, -1000, -1000, -1000, -1000, 1268, 187, 11080, 31334,
	30813, 3926, -65, -1000, 8706, -33, -1000, 11080, -1000, 29167,
	-1000, -1000, 286, 1419, -1000, 11080, 30061, 70, 8367, -1000,
	30033, -34, -34, -1000, 1767, 1091, 1019, 867, 672, 1736,
	-1000, 16281, 400, 958, 29139, 31134, 31334, -1000, 11080, -1000,
	-1000, 1261, 11080, -1000, 31134, 31334, 11758, 11758, 11758, 11758,
	11758, 11758, 11758, 11758, 11758, 11758, 11758, 11758, 11758, 11758,
	11758, 11758, 11758, 11758, 11758, 1158, 11758, 1730, 1730, 1730,
	-38, 8028, -1000, 1333, 1261, 11080, 11080, 31334, 68, 66,
	63, -1000, 11080, -112, 11080, 11080, 11080, -1000, -1000, -1000,
	61, -1000, 1727, -1000, -1000, -1000, -1000, -1000, 612, -1000,
	-1000, 6997, 30668, -1000, 692, 1489, -69, -1000, -1000, -1000,
	395, 15963, 15326, 7689, -71, -1000, -1000, -1000, 738, -1000,
	531, 1723, 60, 30668, -39, -39, -1000, -1000, -1000, -1000,
	-1000, 21949, -1000, 1201, -1000, 18809, 186, 21949, 174, -1000,
	173, -1000, -1000, 170, 21949, 1122, 324, 17867, -1000, 379,
	981, 28800, -1000, 59, 1228, 1555, -1000, 15326, 1153, 1152,
	15326, 1162, 952, 952, 952, -1000, 168, 284, 325, 4322,
	11080, 19437, 955, 50, 58, 1142, 1228, 21949, 21949, 21949,
	1375, -1000, 2216, -1000, 28771, -73, -1000, 321, 1529, 11080,
	-1000, -1000, 158, 12751, 21949, -1000, 1155, 1166, 451, 21949,
	-1000, 21949, -1000, 21949, 21949, 21949, -75, -79, 21949, 21949,
	-1000, 17239, 534, 153, 1563, 188, 3154, 2812, 11080, 31334,
	30964, -83, 11080, 11080, -1000, -85, -1000, 11080, 283, 30668,
	-1000, -1000, -1000, 30668, 11080, 1732, 11080, 56, 53, 52,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49, -1000,
	-1000, 27915, 11080, 48, -1000, 47, 46, 30668, 1333, 30668,
	-1000, -1000, 729, 729, 629, 629, 629, 629, 1730, 787,
	1482, 573, 214, 214, 214, 675, 713, 713, 214, 214,
	214, 1255, 1138, 152, 30930, 11080, -89, -1000, -1000, -1000,
	30668, 30668, 43, -1000, -1000, -1000, -112, 3535, 28743, 28715,
	-1000, 42, -1000, -62, -1000, -1000, 195, -13, 692, -1000,
	-70, -1000, 340, -1000, 279, 277, -1000, -1000, -1000, 1200,
	-1000, 12751, 150, 21949, 18809, 1624, 12751, 989, 1125, 324,
	17867, -1000, 571, -1000, -1000, -1000, 387, 11080, 11080, 1142,
	15326, 15326, 1116, 1133, 15326, -1000, -1000, -1000, -1000, 215,
	377, 325, 19437, -1000, 1717, 1167, -93, -1000, -1000, 21949,
	149, -1000, 325, 387, -1000, -1000, -1000, 21949, -1000, 21949,
	-1000, 5314, 21949, 1245, 1048, -1000, -1000, 1131, 148, 11758,
	21949, -1000, 831, 12751, 1502, 21, 5314, 1502, 28687, 5979,
	-95, -97, 1042, -1000, 1038, 11080, -1000, 31334, 962, 962,
	-1000, 500, 494, 492, 489, -1000, -1000, -80, 16925, 1765,
	11080, 11080, 30964, -99, -1000, 188, 188, -1000, 28348, -1000,
	30668, -1000, 30033, -1000, -1000, -1000, -1000, 912, -1000, 28319,
	-1000, -1000, -1000, -1000, 11758, 1254, 147, 31334, 28291, -1000,
	-1000, 11080, -1000, -1000, -1000, 1433, 21949, 1479, -1000, -1000,
	145, -1000, -1000, 917, -108, 12751, -113, 39, -13, -118,
	21949, -1000, 324, 17867, -1000, 1423, -1000, 21949, 30668, -112,
	-1000, 1116, -1000, 143, 11080, 15326, -1000, -177, -1000, -124,
	-1000, 19437, -1000, 172, -193, -1000, 320, -1000, 325, 142,
	21949, 19437, -1000, -1000, 1595, -1000, -1000, 21949, 1055, -1000,
	-1000, 11080, 30930, 141, 1201, 140, -1000, -1000, -1000, -1000,
	-1000, -1000, 1529, 12, -1000, 754, -1000, -1000, 30668, 1524,
	-1000, -1000, 21949, 21949, 138, 137, -1000, 136, 21, -125,
	-1000, 317, 188, 188, -1000, -1000, 38, 958, 1551, -1000,
	30517, 11758, 31334, -131, -1000, 3989, 559, -135, 21949, -1000,
	-1000, 5640, 21949, 831, -137, -1000, 1201, -1000, 831, 134,
	17867, -1000, 1122, -94, -1000, 1617, -1000, 21949, 30668, -1000,
	325, -1000, 1710, -1000, -1000, 1167, -1000, 4659, 19437, 21949,
	-145, -1000, -1000, -1000, 1371, 171, 1099, 21949, -1000, 21949,
	1502, 36, 21949, 438, 5314, -1000, -1000, 11080, 11080, 11080,
	1765, -1000, -1000, 1764, -1000, 721, 11080, 30517, -149, -1000,
	-1000, 647, -1000, 395, -1000, 129, 1201, 831, -1000, 1201,
	12751, -1000, 1125, 21949, 119, -151, 19437, -1000, -1000, -1000,
	1690, -1000, -159, -1000, 1357, -1000, 983, 814, 35, -160,
	-1000, -1000, 115, -1000, 11080, -1000, -161, -171, -34, -1000,
	-1000, 34, 10741, 10741, -112, -1000, 15963, -1000, 21949, -1000,
	1201, -1000, -179, -1000, -1000, -1000, -1000, -1000, 124, -1000,
	21949, -1000, 988, 985, 674, -1000, -1000, -1000, -1000, -1000,
	1099, 30668, -1000, -1000, 31, -1000, -1000, -1000, 12425, 1024,
	700, 29574, -1000, -153, -189, -1000, 831, -1000, -1000, -1000,
	1450, -1000, 444, 1132, 1132, 983, 1732, 1662, -1000, -1000,
	-1000, -1000, -1000, -1000, 911, 1201, -1000, 1669, -1000, -1000,
	1126, -1000, -1000, 10402, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 2030, 2029, 1550, 1665, 2027, 2024, 2023, 1663, 2021,
	2019, 2018, 2016, 2011, 2006, 1652, 2005, 1645, 1630, 1615,
	2003, 107, 2002, 1996, 1994, 1590, 1991, 1986, 1985, 1983,
	1979, 1978, 110, 1977, 1971, 1571, 1564, 1558, 1555, 1969,
	1965, 1547, 1962, 1961, 16, 1960, 78, 1953, 37, 146,
	2343, 135, 1952, 1948, 1945, 23, 117, 64, 1939, 86,
	1938, 1935, 47, 34, 19, 15, 1933, 101, 1932, 1930,
	1394, 27, 1929, 1926, 139, 1925, 21, 30, 361, 151,
	153, 127, 128, 1924, 1923, 1922, 1918, 44, 1917, 2,
	1916, 1915, 11, 70, 18, 1911, 28, 6, 1909, 1907,
	132, 1906, 72, 106, 1534, 105, 130, 295, 1905, 66,
	5, 65, 1904, 1903, 158, 45, 1900, 32, 83, 137,
	1894, 48, 155, 73, 31, 59, 124, 1892, 1890, 1888,
	98, 1886, 121, 95, 1885, 1884, 96, 1883, 136, 138,
	1882, 1881, 103, 1880, 131, 1878, 1876, 145, 159, 1875,
	156, 1873, 1872, 157, 120, 8, 56, 51, 17, 1528,
	1523, 129, 82, 33, 24, 1866, 1714, 2088, 1980, 35,
	108, 69, 57, 109, 58, 76, 143, 29, 1856, 1855,
	126, 1854, 1853, 1852, 1851, 1849, 112, 1848, 1846, 68,
	141, 13, 26, 49, 85, 36, 115, 77, 163, 147,
	118, 1842, 102, 123, 1841, 40, 1837, 1836, 1398, 144,
	1830, 1829, 1819, 1345, 1322, 931, 61, 1818, 1817, 864,
	736, 1816, 1812, 97, 1811, 125, 119, 1810, 149, 152,
	50, 1808, 122, 46, 99, 1805, 113, 42, 0, 817,
	627, 1804, 134, 79, 1803, 1802, 1801, 1798, 25, 4,
	9, 12, 7, 3, 62, 22, 1797, 1796, 133, 91,
	75, 1795, 154, 1794, 1793, 1792, 43, 1789, 20, 1788,
	14, 1787, 1786, 10, 1, 1785, 1784, 140, 1780, 104,
	1779, 1578, 1778, 150, 1777, 1776, 1610, 67, 114,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 57,
	57, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 54, 54, 59, 59,
	59, 61, 61, 58, 58, 53, 53, 5, 5, 236,
	236, 237, 237, 43, 43, 47, 47, 44, 45, 45,
	46, 46, 7, 7, 7, 6, 6, 8, 8, 8,
	8, 8, 8, 15, 16, 16, 16, 16, 16, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 106,
	106, 105, 105, 108, 108, 18, 18, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	204, 204, 203, 20, 178, 178, 22, 131, 131, 23,
	23, 23, 23, 24, 31, 277, 277, 277, 281, 281,
	282, 282, 283, 283, 283, 283, 283, 283, 283, 279,
	279, 29, 29, 29, 29, 42, 34, 34, 34, 34,
	34, 34, 151, 148, 148, 147, 147, 147, 147, 149,
	149, 149, 149, 152, 152, 86, 86, 229, 228, 228,
	234, 234, 234, 84, 84, 84, 84, 84, 85, 85,
	85, 227, 227, 227, 227, 235, 235, 235, 235, 235,
	235, 233, 233, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 19, 278, 278, 280, 280, 26,
	36, 36, 37, 37, 38, 38, 38, 38, 11, 11,
	12, 12, 87, 87, 88, 88, 157, 157, 157, 157,
	89, 89, 60, 60, 60, 156, 246, 246, 247, 247,
	247, 247, 247, 247, 248, 248, 248, 248, 248, 248,
	248, 244, 244, 245, 242, 242, 243, 243, 243, 243,
	284, 284, 155, 155, 92, 92, 251, 251, 251, 251,
	249, 249, 249, 249, 249, 252, 250, 253, 253, 253,
	253, 253, 190, 190, 190, 40, 13, 66, 66, 14,
	10, 10, 135, 135, 96, 96, 195, 195, 195, 77,
	77, 55, 55, 55, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 136, 136, 137, 137, 27,
	30, 33, 39, 39, 39, 39, 39, 286, 286, 73,
	73, 73, 73, 74, 74, 150, 150, 153, 153, 154,
	154, 154, 68, 67, 69, 69, 9, 9, 62, 62,
	63, 63, 64, 64, 65, 65, 287, 287, 25, 25,
	25, 80, 80, 144, 144, 144, 146, 146, 145, 145,
	145, 121, 121, 121, 41, 101, 101, 110, 110, 111,
	111, 201, 112, 112, 32, 32, 50, 50, 48, 48,
	48, 48, 48, 48, 49, 49, 51, 51, 51, 51,
	51, 51, 51, 259, 259, 259, 262, 262, 258, 260,
	260, 261, 261, 285, 285, 122, 122, 122, 91, 90,
	90, 94, 94, 93, 95, 95, 194, 119, 119, 119,
	119, 138, 138, 139, 139, 140, 140, 141, 141, 141,
	142, 142, 143, 143, 118, 118, 174, 174, 52, 52,
	100, 100, 102, 102, 164, 164, 164, 165, 165, 163,
	163, 163, 163, 196, 196, 196, 196, 196, 196, 196,
	275, 275, 275, 276, 276, 193, 193, 197, 197, 197,
	197, 197, 197, 191, 191, 191, 191, 192, 192, 202,
	202, 125, 125, 125, 125, 123, 123, 124, 124, 198,
	198, 198, 198, 120, 120, 199, 199, 199, 158, 158,
	205, 205, 205, 223, 223, 99, 99, 99, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 207, 207, 207, 207, 209,
	209, 209, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	222, 222, 222, 222, 222, 210, 210, 217, 217, 218,
	218, 219, 220, 211, 211, 212, 212, 213, 214, 221,
	221, 221, 221, 225, 225, 215, 215, 215, 215, 215,
	216, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 133, 133, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 168,
	168, 168, 168, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 254, 254, 254, 254, 254, 254,
	254, 256, 256, 257, 257, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 263, 263, 264, 264, 266, 266, 267, 267,
	268, 269, 269, 269, 270, 271, 271, 265, 265, 272,
	272, 272, 273, 273, 274, 274, 274, 274, 274, 180,
	180, 180, 181, 181, 182, 188, 188, 188, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 75, 75, 75, 75, 75, 107,
	107, 177, 177, 175, 175, 175, 179, 179, 126, 126,
	224, 224, 224, 224, 224, 224, 224, 127, 127, 127,
	134, 128, 128, 129, 129, 129, 129, 129, 129, 171,
	172, 130, 130, 130, 173, 173, 183, 187, 187, 186,
	185, 185, 184, 184, 161, 161, 162, 162, 160, 159,
	115, 115, 114, 114, 113, 113, 288, 288, 189, 189,
	116, 116, 117, 109, 109, 200, 200, 200, 200, 103,
	103, 82, 82, 104, 104, 78, 78, 81, 81, 79,
	79, 79, 79, 97, 97, 98, 98, 76, 76, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	226, 226, 226, 176, 70, 70, 70, 71, 71, 72,
	72, 231, 231, 231, 232, 232, 232, 232, 230, 230,
	230, 230, 230, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 6, 1,
	1, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 3, 3, 1, 1, 1,
	1, 1, 1, 6, 2, 2, 2, 2, 2, 3,
	5, 4, 6, 4, 6, 4, 6, 3, 5, 1,
	3, 1, 2, 2, 3, 2, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 5, 3, 0, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 2, 2, 2, 2, 3, 6, 3,
	4, 1, 5, 2, 1, 3, 3, 3, 3, 1,
	3, 3, 1, 2, 2, 1, 0, 1, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 2, 3,
	4, 4, 4, 4, 2, 4, 4, 4, 4, 4,
	4, 2, 3, 3, 2, 3, 4, 4, 5, 2,
	3, 3, 4, 2, 3, 4, 3, 3, 4, 4,
	2, 5, 5, 6, 2, 2, 0, 2, 0, 3,
	6, 6, 5, 5, 4, 12, 4, 12, 7, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 3, 2, 0, 3, 1,
	2, 2, 3, 6, 2, 1, 1, 2, 4, 2,
	5, 7, 8, 5, 3, 1, 4, 6, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 5, 2, 0, 6,
	11, 14, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 6,
	8, 8, 10, 8, 10, 1, 0, 2, 0, 2,
	3, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	6, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 2, 0, 8, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 1, 1, 8, 8, 1, 2,
	4, 4, 4, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 2, 2, 1,
	1, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	3, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 7, 4, 6, 3, 1, 5, 5,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 1, 1, 3, 4, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 3, 1, 1,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 4, 1, 1, 1, 5, 1, 3, 1, 3,
	1, 1, 1, 1, 6, 6, 4, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -15,
	-16, -17, -18, -19, -20, -22, -23, -24, -25, -26,
	-28, -30, -31, -33, -32, -34, -35, -36, -37, -38,
	-39, -27, -29, -40, -41, -42, 23, 34, 237, 47,
	67, -9, -10, -11, -12, -13, -14, -261, 92, 96,
	105, 129, 217, 103, 88, 123, 211, 239, 241, 248,
	-48, -50, 259, -151, 262, 35, 271, 61, 99, 243,
	235, 236, 299, 308, 69, -259, -51, -49, 350, 324,
	331, 252, -52, 280, 316, 353, 280, 138, 81, 319,
	-277, -104, 280, 81, -79, -70, 343, 4, -238, -240,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 48,
	55, 60, 61, 62, 64, 66, 67, 68, 71, 72,
	79, 80, 82, 84, 88, 90, 92, 95, 96, 98,
	103, 104, 105, 111, 112, 117, 119, 124, 129, 130,
	131, 132, 139, 142, 144, 137, 154, 155, 156, 158,
	159, 160, 163, 162, 167, 170, 173, 175, 176, 177,
	180, 178, 182, 183, 185, 184, 190, 192, 193, 195,
	198, 201, 204, 207, 208, 209, 210, 211, 213, 215,
	217, 219, 220, 221, 222, 223, 225, 226, 228, 229,
	230, 231, 232, 235, 233, 234, 236, 237, 238, 239,
	241, 243, 244, 246, 260, 261, 272, 248, 249, 250,
	251, 255, 253, 256, 257, 259, 262, 264, 267, 270,
	271, 273, 276, 274, 269, 279, 281, 282, 283, 284,
	285, 286, 287, 294, 295, 299, 300, 301, 302, 305,
	306, 307, 308, 310, 313, 314, 315, 320, 325, 326,
	327, 328, 329, 28, 36, 37, 38, 39, 41, 42,
	45, 46, 51, 52, 53, 56, 83, 85, 86, 102,
	106, 107, 113, 114, 115, 125, 127, 133, 134, 143,
	145, 146, 147, 148, 149, 151, 165, 179, 189, 191,
	202, 206, 214, 216, 224, 245, 254, 265, 266, 275,
	277, 289, 290, 291, 296, 297, 312, 316, 317, -277,
	155, 221, -78, -70, 81, 90, 142, 307, 306, 22,
	213, 253, 282, 284, 81, 138, 280, 319, 309, -21,
	350, -32, -8, -17, -4, -25, -41, -15, -35, -19,
	-36, -37, -38, -18, 23, -230, 4, -238, -240, -239,
	-241, 58, 70, 122, 141, 135, 153, 157, 166, 168,
	181, 203, 205, 242, 263, 22, 24, 25, 26, 27,
	29, 30, 31, 32, 43, 49, 50, 54, 57, 59,
	65, 69, 73, 74, 75, 76, 77, 78, 87, 89,
	91, 93, 94, 97, 99, 101, 108, 109, 110, 118,
	120, 121, 123, 126, 128, 136, 138, 140, 150, 152,
	161, 164, 169, 171, 172, 186, 187, 188, 194, 196,
	197, 199, 200, 212, 218, 227, 240, 252, 258, 268,
	278, 280, 288, 292, 293, 298, 303, 304, 309, 311,
	318, 319, 321, 322, 323, 324, -70, -70, -70, 217,
	22, -281, 22, -282, -283, 69, 96, 123, 252, 142,
	90, 306, 155, 155, -281, -74, 248, -70, -148, 170,
	256, 55, 245, 295, -149, -147, -229, 289, -152, -105,
	180, -70, 4, 180, 258, 81, 294, 22, 34, 55,
	60, 82, 124, 138, 139, 65, 66, 159, 220, 170,
	156, 256, 160, 257, 281, 289, 295, 69, 310, 285,
	104, -286, 295, 295, -286, -286, -73, 295, 292, -74,
	4, 81, 258, 180, -285, 280, -234, -227, -190, 9,
	298, 108, 196, -233, 8, 342, -226, -232, 5, 7,
	341, 4, -238, -240, -239, 280, 309, 319, -135, 81,
	304, -49, -51, -50, -93, -94, 303, 150, 101, 200,
	-48, -50, -259, -262, 225, -258, -70, -262, -90, -91,
	22, 93, 354, -198, -78, 197, -117, 350, -3, -198,
	133, -78, -81, 133, -78, -70, -198, 133, 292, 354,
	-104, -97, -70, -160, -159, 352, 121, -166, -168, 341,
	342, 336, 186, 330, -180, -170, -183, 102, 245, 350,
	-78, -169, 355, 9, -256, -50, 29, -181, -182, 49,
	-70, 7, 8, 5, 6, -76, -207, -176, -216, 298,
	108, 188, -254, -255, 4, -238, -231, -208, -218, -212,
	-215, 151, 58, 74, 77, 75, 78, 258, 309, 50,
	28, 106, 107, 206, 214, 277, 296, 297, 133, 189,
	134, 56, 125, 165, 95, 37, 39, 41, 42, 51,
	52, 83, 85, 86, 113, 114, 115, 143, 145, 146,
	147, 148, 149, 191, 224, 265, 275, 290, 291, 317,
	-239, -219, -220, -213, -214, -221, -166, 121, 350, -114,
	-115, -159, -160, 121, 152, 152, -199, -198, -70, 133,
	-82, 133, -81, -106, 133, -105, -106, 133, -97, 133,
	-204, -203, -232, 316, 280, 138, -178, 350, -131, 350,
	-70, 22, 196, 354, -166, -166, 196, -70, -148, 53,
	-148, 260, 350, -153, -154, -67, -68, -69, 154, 219,
	223, 292, 335, 121, 329, -234, -86, 87, -108, 352,
	118, 55, -236, -233, 9, 260, 220, 257, 121, -278,
	196, 121, 121, 121, 121, 121, 220, 257, 294, 160,
	294, 121, 329, 154, 219, 272, 280, 319, 121, 121,
	-150, -153, -150, 292, -74, -120, -198, 8, 7, 7,
	-105, 133, -70, -105, 138, -70, 133, -93, -94, -119,
	-138, -139, 169, 110, 194, -122, 22, 93, -122, -122,
	44, 351, 351, 354, -262, -98, 350, -109, -200, -166,
	343, -109, -117, 343, -78, 350, -116, -189, -166, 87,
	-57, 233, -56, 21, 23, 96, 314, 102, 269, 286,
	249, 269, 286, 249, 233, 102, 355, 233, 233, 102,
	-236, -79, 354, -230, 343, -237, -236, 10, 11, 57,
	33, 341, 342, 343, 344, 116, 345, 346, 339, 340,
	338, 333, 334, 335, 63, 174, 247, 13, 14, 15,
	26, 199, 168, 330, 135, 263, 336, 16, 17, 18,
	153, 36, 136, -75, -83, -166, -166, -166, -166, -166,
	205, -113, -161, 348, -50, 350, -50, -166, -107, 7,
	-50, -175, 348, -184, -166, -114, 350, 5, 350, 5,
	-263, 325, 118, 350, 350, 350, 350, 350, 350, 350,
	350, 350, 350, 350, 350, 350, 350, 350, 350, 350,
	216, -225, 320, -225, -225, -209, 350, -209, -210, 350,
	-209, 326, 331, 350, 273, 351, -103, -78, -115, -199,
	-80, -78, -80, 259, -70, 30, 102, -59, 354, 48,
	238, 102, -59, 354, 102, -59, 102, 102, 351, 354,
	-198, 133, -81, 30, -177, -205, -206, -208, -217, -211,
	-215, -216, 40, 46, 45, 287, 179, 254, 266, 312,
	38, 195, 144, 143, 145, 146, 147, 148, 149, 265,
	37, 224, 114, 115, 113, 95, 86, 85, 191, 42,
	41, -219, -220, -213, -214, 83, 290, 291, 151, 39,
	52, 51, 317, 275, -107, -166, -277, -283, -277, 30,
	-147, -229, -107, 354, 167, -85, 173, 185, 130, 197,
	327, -228, 87, -234, -228, 87, 72, -235, 5, 4,
	-176, -190, 87, 170, -216, 352, -230, -21, 261, -105,
	22, -229, -280, 118, -277, -229, -229, -229, -229, -229,
	294, 118, -70, 167, -229, -229, 280, 138, 280, -74,
	-59, 354, 350, -92, 186, -260, 324, -92, 350, -71,
	133, -70, -260, 186, -119, -139, -138, -140, -166, 22,
	-143, 112, 182, -166, -168, -49, -49, -49, -95, -194,
	-166, -258, 30, -97, -100, 354, 121, 30, 4, -100,
	-78, 354, 351, 354, 292, -136, 65, 59, -156, 133,
	59, -242, -70, 65, -243, 54, 304, 218, 120, -136,
	65, -136, 65, 65, -198, 33, -32, 121, 33, -32,
	121, 292, -81, -70, 292, 292, -198, -202, 332, -70,
	-202, 354, -223, -205, -222, 229, 230, 228, 232, 231,
	-205, -230, 289, -166, -166, -166, -166, -166, -166, -166,
	-166, -166, -166, -166, -166, -166, -166, -166, -166, -166,
	-166, -166, -166, -166, -166, 168, 135, 263, 36, 136,
	-166, 292, -166, -166, -166, -166, 178, 186, 188, 298,
	108, 305, 93, 192, -288, 278, 32, -173, -50, 350,
	-188, 27, 268, 22, -180, 245, 350, -161, -166, -162,
	-107, 351, 351, 354, -107, -179, 349, -175, -187, -186,
	321, 351, -107, 318, 22, 93, 343, 7, -132, 328,
	177, 84, 131, 176, -133, 251, -264, 111, 126, 350,
	351, 351, -166, -166, -126, -224, -107, 4, 328, 177,
	84, 131, 176, 251, -126, -127, -166, -107, -128, -167,
	-168, 341, 342, 336, 350, 245, -129, -166, -107, -166,
	43, 164, 293, -130, -166, 121, -107, -166, -166, -166,
	-107, -107, -107, 350, 7, 7, 289, 289, 7, 121,
	351, 354, -158, 322, -144, -32, 350, 87, 30, -144,
	-110, -111, -201, -112, -78, 350, -70, -70, -81, -82,
	-105, -106, -106, -97, -21, -203, 102, -21, 351, 354,
	-99, 29, -132, 350, 351, 354, 292, 121, 295, 351,
	-154, -84, 223, 267, 234, 255, 354, -230, -279, -70,
	-21, -78, -81, -78, -198, -87, -97, -88, -70, -157,
	-156, -244, -245, -242, 138, 304, 109, 30, 102, -66,
	210, 30, 196, 186, -62, 283, 102, -141, -226, 350,
	342, -142, 245, 246, 354, -55, 31, 91, 350, 351,
	-158, -200, -102, -196, 348, -198, -78, -50, -197, 350,
	-230, -158, 351, -189, -56, -78, -70, -70, 186, -156,
	133, -61, 186, -205, -70, 350, 350, 158, 158, -70,
	-70, 133, -70, 133, -70, -70, -57, 233, -32, 350,
	-32, 350, -70, 233, -70, -78, 233, -43, 132, 192,
	-46, 324, -236, 329, -166, -166, 292, -288, 278, -173,
	-166, 178, 188, 298, 108, 305, 93, 192, 121, 350,
	-167, -167, -107, -170, 350, -107, 349, 358, 351, -166,
	349, 349, 354, -185, -186, 97, -166, -94, 354, -93,
	-166, -107, -107, 351, 351, 292, 292, 292, 292, 350,
	-269, 204, 350, 350, -166, 30, 354, 351, 121, 351,
	351, -134, 212, 351, 10, 11, 341, 342, 343, 344,
	116, 345, 346, 339, 340, 338, 333, 334, 335, 63,
	174, 247, 13, 14, 15, 153, 136, -167, -167, -167,
	-107, 350, 351, -171, -172, 121, 118, 30, -130, -130,
	-130, 351, 121, -107, 354, 354, 354, 351, 351, 351,
	7, 351, 354, 351, 329, 329, 351, 273, 121, -78,
	-121, 240, -166, -121, -146, 196, -103, 316, -70, -121,
	-101, 354, 121, 335, -103, -59, -59, -59, -198, -205,
	348, 348, 7, -166, -279, -279, -67, 302, 62, 223,
	-234, 354, -202, 351, 351, 354, -71, 138, -71, -32,
	-105, 5, -32, -78, 102, -63, 98, -287, 335, -70,
	-142, -166, -194, -21, -118, 126, -202, 354, 70, -125,
	157, 181, 122, 166, 242, 141, 7, -21, -163, 355,
	350, -193, 331, -50, -197, -196, -118, 292, 292, 102,
	186, 313, -246, -243, -166, -96, -195, -70, -257, 350,
	-254, -255, -76, 350, 350, -54, 96, 259, -137, 102,
	-59, 102, -59, 292, -136, 65, -107, -107, 292, 292,
	-46, 121, 279, 198, -166, -166, -167, -167, 121, 350,
	-166, -177, 26, 26, 351, -107, 351, 354, -162, -166,
	351, -175, 99, -166, 288, 351, 318, -94, -94, -94,
	5, 177, 131, 176, -133, 176, -133, -133, 7, -270,
	-70, 350, 322, -93, 351, -223, -205, -166, -171, -166,
	-223, -205, -167, -167, -167, -167, -167, -167, -167, -167,
	-167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
	-167, 93, 186, 192, -167, 354, -107, 351, -172, -171,
	-166, -166, -205, 351, 351, 351, -107, -166, -166, -166,
	351, 7, 273, -109, 187, -121, 64, 351, -158, -111,
	-102, -189, 351, 349, 7, 7, 351, -70, -89, 137,
	-157, 350, -71, 350, 350, -92, 350, -70, -64, 163,
	-287, -233, -260, 197, 351, 351, -174, 128, 44, -196,
	157, 157, -196, -125, 157, -123, 203, -123, -123, -275,
	350, 349, -193, -230, 348, 356, -107, -192, -191, 30,
	-70, 201, 351, -174, -70, -70, -156, 102, -247, 65,
	-248, 57, 109, 69, 186, 188, 304, 218, 54, 87,
	227, 351, 351, 354, -77, -114, 57, -77, -166, 350,
	-96, -97, 186, 87, 186, 87, 80, 300, -70, -70,
	-78, -70, -70, 351, 351, -70, -78, -237, 289, 350,
	26, 26, -166, -177, 351, -166, -166, 351, -166, 349,
	-166, 5, -166, 351, 351, 351, 351, -271, -70, -166,
	351, 351, 351, -172, 121, 93, 192, 350, -166, 351,
	351, 354, 351, 351, 351, -145, 350, 196, -32, -121,
	335, 349, 349, 136, -96, 350, -97, -87, 30, -96,
	196, -65, 162, -287, -233, -62, -266, 323, -166, -107,
	-196, -196, -124, 311, 196, 157, -196, 349, 351, -276,
	7, -193, -192, 7, -165, -164, 119, 184, 351, -70,
	350, -193, -266, -156, -70, -230, -70, 109, 133, 188,
	158, 350, -167, -78, -155, -284, 68, 276, -195, -55,
	-230, -55, 351, -107, 351, 351, 188, 188, -166, -205,
	-59, -59, 292, 292, 292, 292, -169, -76, -70, -45,
	-44, 5, -166, -166, 351, 351, -94, -265, 209, 351,
	-167, 121, 350, -177, 351, -166, 94, -97, 65, -117,
	-50, 350, 207, 351, -96, 351, 351, -32, 351, -78,
	-287, -233, -63, -267, -268, -70, -124, 350, -166, -196,
	-163, 351, 354, -192, 349, 354, 357, 335, -193, 350,
	-97, -191, -248, -71, 186, -166, -72, 350, -89, 350,
	-77, -94, 227, -58, 57, -70, -70, 350, 350, 350,
	354, 351, -47, 335, 351, -94, 44, -167, -177, 351,
	351, 306, 187, 351, -70, -70, -155, 351, -89, -155,
	350, -233, -64, 354, 30, -97, -193, 7, -164, -230,
	348, -192, -97, 351, 102, 351, -251, 175, -70, -97,
	-55, 351, -78, -53, 311, -230, -107, -107, -107, -44,
	5, -272, 222, 246, -107, 351, 259, -158, 350, -89,
	-155, -89, -96, -65, -268, -270, 351, -191, 7, 351,
	109, -249, -252, -250, 196, 122, 208, 264, 351, 351,
	-92, -166, 351, 351, -94, 351, -273, -274, 36, 301,
	72, -166, -273, -110, -97, -89, 351, 349, -70, -250,
	196, -252, 196, 306, 90, -251, 351, -274, 215, 117,
	245, 215, 117, -158, 351, -155, -253, 183, 238, 48,
	259, -253, -249, 26, -60, 48, 238, -89, 20, 188,
	87, -274,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 0, 0, 0, 0,
	0, 87, 88, 89, 90, 91, 92, 0, 0, 0,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	434, -2, 0, 171, 0, 378, 0, 378, 378, 382,
	0, 0, 464, 0, 343, 461, -2, 472, 0, 0,
	0, 470, 448, 0, 0, -2, 0, 0, 0, 0,
	0, 145, 0, 1005, 933, 939, 940, 964, 965, 966,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
	1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
	1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
	1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
	1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
	1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
	1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163,
	1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173,
	1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183,
	1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 0,
	0, 0, 0, 935, 1005, 0, 0, 0, 0, 94,
	95, 96, 97, 98, 0, 0, 0, 0, 0, 115,
	0, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 0, 254, 978, 979, 980, 981,
	982, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
	1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 135, 138, 139, 1064,
	141, 0, 148, 149, 150, 152, 153, 154, 155, 156,
	157, 158, 0, 0, 0, 371, 1091, 384, 166, 1039,
	1097, 993, 1179, 1118, 174, 179, 0, 1185, 182, 187,
	-2, 111, 213, 214, 215, 216, 217, 218, 0, 0,
	0, 224, 256, 0, 0, 0, 0, 0, 231, 0,
	234, 0, 0, 239, 243, 0, 0, 0, 250, 0,
	0, 386, 377, 386, 374, 375, 376, 379, 0, 369,
	161, 162, 163, 164, 0, 463, 165, 190, 191, 192,
	201, 202, 203, 204, 332, 0, 334, 211, 212, 960,
	0, 974, 975, 976, 977, 0, 0, 0, 0, 0,
	342, -2, 444, 445, -2, 0, 467, 467, 467, 0,
	0, 445, 0, 453, 1070, 456, 946, 454, 0, 0,
	469, 468, 0, 449, 549, 0, 498, 0, 2, 0,
	1161, 549, 0, 1161, 938, 0, 0, 1161, 0, 0,
	146, 147, 943, 941, 942, 0, 0, 85, 657, 0,
	0, 0, 0, 0, 0, 749, 751, 1153, 1179, 0,
	753, 754, 0, 756, 758, 759, 0, 762, 763, 903,
	935, 949, 950, 951, 952, 0, 0, 955, 0, 957,
	958, 959, 803, 772, -2, -2, 947, 585, 586, 587,
	588, -2, 1193, 776, 778, 780, 781, 782, 783, 0,
	1137, 1154, 1155, 1175, 1176, 1184, 1188, 1189, 1161, 1172,
	1162, 1149, 1159, 1170, 1011, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	973, 619, 620, 625, 626, 628, 86, 0, 0, 936,
	912, 910, 911, 0, 0, 0, 0, 555, 99, 1161,
	60, 1161, 931, 60, 1161, 109, 60, 1161, 107, 1161,
	0, 130, 132, 1191, 0, 0, 0, 0, 136, 0,
	140, 142, 0, 0, 259, 370, 0, 383, 167, 1148,
	169, 0, 0, 173, 387, 389, 390, 391, 0, 0,
	0, 0, 0, 0, 0, 183, 184, 185, 112, 0,
	462, 0, 219, 69, 70, 0, 232, 240, 0, 258,
	0, 0, 0, 0, 0, 0, 233, 241, 235, 0,
	0, 0, 244, 0, 246, 247, 0, 0, 0, 0,
	372, 385, 373, 0, 381, 60, 553, 333, 962, 961,
	315, 1161, 460, 315, 968, 460, 1161, -2, 0, 440,
	479, 480, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 436, 437, 0, 455, 0, 0, 501, 923, 927,
	928, 501, 499, 550, 551, 0, 0, 920, 918, 919,
	37, 366, 39, 0, 366, 366, 0, 0, 0, 0,
	264, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	540, 934, 0, 908, 909, 540, 71, 0, 0, 0,
	0, 838, 839, 840, 841, 842, 843, 846, 847, 844,
	845, 848, 849, 850, 0, 0, 0, 851, 852, 853,
	0, 0, 855, 0, 857, 0, 0, 0, 0, 0,
	0, 917, 0, 0, 854, 662, 663, 664, 686, 687,
	0, 750, 914, 907, 752, 0, -2, 859, 0, 755,
	760, 761, 0, 0, 902, -2, 0, 954, 0, 654,
	805, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	882, 888, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 622, 633, 630, 629, 606, 0, 605, 603, 0,
	607, 0, 0, 0, 82, 0, 0, 929, 913, 559,
	0, 411, 0, 0, 556, 0, 0, 101, 0, 58,
	59, 0, 103, 0, 0, 105, 0, 0, 462, 0,
	0, 1161, 0, 462, 0, 861, 567, 568, 569, 570,
	571, 654, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 592, 593, 594, 595, 596, 597, 598,
	599, 600, 601, 602, 616, 0, 591, 591, 591, 608,
	609, 617, 618, 623, 624, 635, 636, 638, 640, 634,
	634, 634, 631, 632, 0, 859, 0, 151, 0, 0,
	170, 0, 0, 0, 0, 392, 198, 199, 200, 394,
	395, 175, 177, 188, 176, 178, 180, 181, 205, 206,
	207, 208, 209, 210, 0, 0, 113, 237, 222, 220,
	221, 223, 225, 0, 255, 226, 227, 228, 229, 230,
	236, 462, 242, 245, 248, 249, 0, 0, 0, 380,
	335, 0, 273, 0, 0, 338, 459, 0, 0, 0,
	1161, 967, 399, 0, 443, 477, 478, 481, 485, 486,
	489, 492, 493, 483, 657, 450, 451, 452, 473, 474,
	353, 457, 0, 0, 559, 0, 0, 0, 926, 559,
	0, 0, 922, 0, 0, 0, 0, 365, 41, 1161,
	0, 62, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 262, 0, 0, 263,
	0, 0, 0, 937, 0, 0, 0, 74, 0, 944,
	81, 0, 658, 563, 564, 610, 611, 612, 613, 614,
	659, 660, 0, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, -2, -2, -2, 678, 679, 680, -2,
	-2, -2, 684, 685, -2, 856, 858, 0, 917, 0,
	-2, 0, -2, -2, -2, -2, 698, 0, 700, 703,
	705, 707, 0, 0, 0, 0, 916, 717, 894, 0,
	0, 835, 836, 837, 702, 0, 0, 915, 906, 0,
	0, -2, 757, 0, 0, 0, 865, 866, 901, 897,
	0, 764, 472, 0, 0, 0, 0, 0, 963, 641,
	642, 643, 644, 645, 646, 655, 813, 0, 0, 0,
	777, 779, 0, 0, 0, 0, 869, -2, -2, -2,
	-2, -2, -2, -2, 0, 0, 859, 879, 0, 0,
	720, 0, 0, 0, 0, 1179, 0, 859, 887, 0,
	0, 0, 0, 0, 859, 0, 893, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 423, 0, 423, 413, 0, 0, 0, 423,
	426, 427, 429, 430, 0, 0, 557, 100, 932, 60,
	110, 60, 60, 108, 116, 131, 0, 133, 134, 0,
	560, 562, 572, 0, 137, 0, 0, 0, 0, 172,
	388, 393, 0, 195, 0, 197, 0, 114, 257, 159,
	238, 251, 252, 540, 554, 0, 0, 272, 943, 274,
	276, 277, 278, 279, 968, 0, 968, 0, 0, 336,
	0, 0, 0, 0, 401, 407, 0, 0, 487, 0,
	0, 484, 490, 491, 0, 476, 351, 352, 462, 945,
	495, 924, 540, 502, 462, 512, 549, 526, 517, 0,
	925, 495, 552, 921, 40, 355, 0, 0, 0, 43,
	1161, 51, 0, 287, 0, 0, 0, 0, 0, 368,
	52, 1161, 60, 1161, 60, 53, 38, 366, 260, 0,
	261, 0, 359, 0, 354, 357, 0, 81, 0, 0,
	68, 0, 72, 0, -2, -2, 0, 0, 0, 718,
	-2, 699, 701, 704, 706, 708, 0, 0, 0, 0,
	0, 0, 0, 719, 0, 0, 904, 907, -2, 860,
	863, 864, 0, 0, 898, 0, 0, 0, 0, 471,
	472, 472, 472, 770, 0, 0, 0, 0, 0, 0,
	771, 0, 0, 0, 0, 0, 0, 786, 0, 787,
	788, 0, 0, 789, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 723, 724, 725,
	0, 0, 790, 885, 886, 0, 0, 0, 0, 0,
	0, 795, 0, 892, 0, 0, 0, 799, 800, 801,
	0, 589, 0, 615, 637, 639, 627, 83, 0, 930,
	93, 0, 558, 408, 423, 0, 0, 415, 412, 410,
	559, 0, 0, 0, 0, 102, 104, 106, 0, 862,
	0, 0, 0, 860, 143, 144, 168, 193, 194, 196,
	189, 0, 253, 281, 314, 0, 0, 968, 0, 270,
	315, 337, 339, 0, 0, 403, 407, 0, 406, 460,
	0, 0, 475, 0, 497, 0, 500, 0, 0, 0,
	0, 0, 546, 546, 546, 544, 520, 0, 526, 0,
	0, 538, 0, -2, 517, 0, 497, 0, 0, 0,
	0, 61, 285, 304, 0, 0, 344, 350, 350, 0,
	773, 774, 0, 0, 0, 45, 0, 0, 0, 0,
	49, 0, 55, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 661, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 895, 0, 830, 0, 0, 906,
	-2, 867, 896, 900, 0, 765, 0, 0, 0, 0,
	956, 647, 648, 649, 650, 651, 652, 653, 0, 811,
	812, 816, 0, 0, 775, 0, 0, 868, 878, 880,
	721, 722, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, -2, -2, -2, 739, 740, 741, -2, -2,
	-2, 0, 0, 0, 881, 0, 0, 833, 883, 884,
	889, 890, 0, 792, 793, 794, 891, 0, 0, 0,
	621, 0, 84, 421, 422, 409, 420, 0, 423, 428,
	425, 431, 0, 565, 0, 0, 573, 160, 268, 0,
	275, 0, 0, 0, 273, 0, 0, 0, 405, 407,
	0, 398, 399, 482, 488, 458, 807, 0, 0, 503,
	0, 0, 0, 0, 0, 541, 545, 542, 543, 0,
	0, 526, 538, 509, 0, 0, 0, 516, 537, 0,
	536, 525, -2, 807, 361, 363, 42, 0, 286, 0,
	289, 0, 0, 0, 0, 295, 296, 0, 0, 0,
	0, 306, 313, 0, 353, 948, 0, 353, 0, 0,
	0, 0, 0, 57, 0, 0, 367, 0, 60, 60,
	356, 0, 0, 0, 0, 360, 358, 73, 0, 0,
	0, 0, -2, 0, 711, -2, -2, 829, 860, 905,
	899, 953, 472, 766, 768, 769, 656, 818, 815, 0,
	802, 784, 785, 877, 0, 0, 0, 0, 860, 832,
	791, 0, 797, 798, 590, 0, 0, 0, 414, 424,
	0, 566, 561, 0, 0, 0, 0, 0, 0, 0,
	0, 396, 407, 0, 400, 401, 446, 0, 496, 494,
	528, 0, 530, 0, 0, 0, 532, 512, 521, 0,
	523, 538, 514, 0, 0, 507, 0, 506, 526, 534,
	0, 0, 447, 44, 0, 290, 291, 968, 0, 294,
	297, 0, 299, 970, 281, 0, 310, 311, 345, 346,
	349, 347, 350, 472, 308, 0, 46, 47, 56, 64,
	48, 54, 0, 0, 0, 0, 539, 0, 0, 0,
	78, 76, -2, -2, 712, 831, 0, 472, 0, 804,
	-2, 0, 0, 0, 834, 0, 0, 0, 0, 432,
	433, 0, 0, 313, 0, 303, 281, 271, 313, 0,
	0, 402, 403, 806, 808, 0, 529, 0, 548, 531,
	526, 522, 0, 519, 510, 0, 511, 0, 538, 0,
	0, 518, 288, 292, 0, 0, 319, 0, 307, 0,
	353, 0, 0, 66, 0, 362, 364, 0, 0, 0,
	0, 80, 77, 0, 767, 821, 0, -2, 0, 747,
	796, 0, 417, 559, 419, 0, 281, 313, 269, 281,
	0, 404, 405, 0, 0, 0, 0, 524, 508, 504,
	0, 515, 0, 535, 0, 298, 324, 0, 0, 0,
	348, 765, 315, 50, 0, 63, 0, 0, 472, 79,
	75, 0, 0, 0, 817, 748, 0, 418, 0, 301,
	281, 340, 0, 397, 809, 810, 547, 513, 0, 533,
	0, 300, 320, 321, 0, 316, 317, 318, 969, 312,
	319, 65, 265, 267, 0, 814, 819, 822, -2, 1121,
	1002, 0, 820, 559, 0, 302, 313, 505, 293, 322,
	0, 323, 0, 0, 0, 324, 0, 0, 824, 825,
	826, 827, 828, 416, 284, 281, 325, 0, 328, 329,
	0, 326, 309, 0, 280, 282, 283, 341, 327, 330,
	331, 823,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 339, 3, 345, 340, 3,
	350, 351, 343, 341, 354, 342, 352, 344, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 358, 353,
	333, 335, 334, 3, 355, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 348, 3, 349, 346, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 356, 338, 357, 336,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 337, 57676, 347, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:794
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:806
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:907
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:930
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:940
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = nil
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = DropCascade
		}
	case 59:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = DropRestrict
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = DropDefault
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1002
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 64:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1003
		{
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1006
		{
			return unimplemented(sqllex, "alter using")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1007
		{
		}
	case 67:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 74:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.str = ""
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 80:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 81:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1080
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1099
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1103
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1129
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1130
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1131
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1132
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1242
		{ /* SKIP DOC */
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1430
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1437
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1449
		{
			return unimplemented(sqllex, "set local")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1463
		{ /* SKIP DOC */
		}
	case 172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1501
		{
			return unimplemented(sqllex, "set from current")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1504
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1513
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1521
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1521
		{
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = Low
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = Normal
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = High
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1641
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1649
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1653
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1761
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1765
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1769
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1773
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1789
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1793
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1797
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1809
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1831
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1847
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1851
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1857
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1861
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1865
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1869
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1940
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1944
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = DropDefault
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1954
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2159
		{
			return unimplemented(sqllex, "match full")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2160
		{
			return unimplemented(sqllex, "match partial")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2161
		{
			return unimplemented(sqllex, "match simple")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2162
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2168
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2169
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2170
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2171
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2172
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2175
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2178
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			return unimplemented(sqllex, "no action")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2184
		{
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2185
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2186
		{
			return unimplemented(sqllex, "action set null")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			return unimplemented(sqllex, "action set default")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = true
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = false
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2294
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2295
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2298
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2299
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = Ascending
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = Descending
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2353
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2354
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = true
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = false
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2367
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2368
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2408
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2417
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2418
		{
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.str = ""
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.str = ""
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = ReadOnly
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = ReadWrite
		}
	case 396:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.str = ""
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.str = ""
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.str = ""
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.str = ""
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2572
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2573
		{
		}
	case 408:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2637
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2641
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2649
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 424:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2671
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2672
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2899
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2900
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2901
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2905
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2908
		{
			return unimplemented(sqllex, "cte")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2911
		{
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2912
		{
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2916
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2919
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2920
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = true
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = false
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = false
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = true
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2944
		{
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2982
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3002
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3054
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3058
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3059
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3113
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &From{}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3149
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3167
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3194
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3211
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = nil
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3269
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = true
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = false
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.str = astFullJoin
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.str = astLeftJoin
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.str = astRightJoin
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.str = astInnerJoin
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3386
		{
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3387
		{
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3473
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3486
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3487
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3501
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3510
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3573
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3582
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = nil
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3647
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3743
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3775
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3815
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = year
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = month
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = day
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = hour
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = minute
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = month
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = hour
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = minute
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = minute
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = nil
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = second
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3910
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3945
		{
			return unimplemented(sqllex, "at tz")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4113
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4179
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4352
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4405
		{
			return unimplemented(sqllex, "variadic")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4406
		{
			return unimplemented(sqllex, "variadic")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4429
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			return unimplemented(sqllex, "func_application")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4446
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4450
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4467
		{
			return unimplemented(sqllex, "current role")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			return unimplemented(sqllex, "current user")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			return unimplemented(sqllex, "session user")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4470
		{
			return unimplemented(sqllex, "user")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4499
		{
			return unimplemented(sqllex, "treat")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4543
		{
			return unimplemented(sqllex, "within group")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4544
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = Window(nil)
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4579
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.str = ""
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4641
		{
			return unimplemented(sqllex, "frame range")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4642
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4643
		{
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4646
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4647
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4653
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4654
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4655
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4656
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4657
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = Any
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = Some
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = All
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = Plus
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = Minus
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = Mult
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = Div
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = FloorDiv
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = Mod
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = Bitand
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = Bitor
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = Pow
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = Bitxor
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = LT
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = GT
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = EQ
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = LE
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = GE
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = NE
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = Like
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = NotLike
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = ILike
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = NotILike
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 899:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5021
		{
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5022
		{
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5140
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5184
		{
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5220
		{
			return unimplemented(sqllex, "func const")
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5229
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = DNull
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5256
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 968:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.str = ""
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
