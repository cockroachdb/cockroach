// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:464
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const CONTAINS = 57409
const COPY = 57410
const COVERING = 57411
const CREATE = 57412
const CROSS = 57413
const CSV = 57414
const CUBE = 57415
const CURRENT = 57416
const CURRENT_CATALOG = 57417
const CURRENT_DATE = 57418
const CURRENT_SCHEMA = 57419
const CURRENT_ROLE = 57420
const CURRENT_TIME = 57421
const CURRENT_TIMESTAMP = 57422
const CURRENT_USER = 57423
const CYCLE = 57424
const DATA = 57425
const DATABASE = 57426
const DATABASES = 57427
const DATE = 57428
const DAY = 57429
const DEC = 57430
const DECIMAL = 57431
const DEFAULT = 57432
const DEALLOCATE = 57433
const DEFERRABLE = 57434
const DELETE = 57435
const DESC = 57436
const DISCARD = 57437
const DISTINCT = 57438
const DO = 57439
const DOUBLE = 57440
const DROP = 57441
const ELSE = 57442
const ENCODING = 57443
const END = 57444
const ESCAPE = 57445
const EXCEPT = 57446
const EXISTS = 57447
const EXECUTE = 57448
const EXPERIMENTAL_FINGERPRINTS = 57449
const EXPERIMENTAL = 57450
const EXPLAIN = 57451
const EXTRACT = 57452
const EXTRACT_DURATION = 57453
const FALSE = 57454
const FAMILY = 57455
const FETCH = 57456
const FETCHVAL = 57457
const FETCHTEXT = 57458
const FETCHVAL_PATH = 57459
const FETCHTEXT_PATH = 57460
const FILTER = 57461
const FIRST = 57462
const FLOAT = 57463
const FLOAT4 = 57464
const FLOAT8 = 57465
const FLOORDIV = 57466
const FOLLOWING = 57467
const FOR = 57468
const FORCE_INDEX = 57469
const FOREIGN = 57470
const FROM = 57471
const FULL = 57472
const GRANT = 57473
const GRANTS = 57474
const GREATEST = 57475
const GROUP = 57476
const GROUPING = 57477
const HAVING = 57478
const HELP = 57479
const HIGH = 57480
const HOUR = 57481
const HAS_SOME = 57482
const HAS_ALL = 57483
const IMPORT = 57484
const INCREMENTAL = 57485
const IF = 57486
const IFNULL = 57487
const ILIKE = 57488
const IN = 57489
const INET = 57490
const INTERLEAVE = 57491
const INDEX = 57492
const INDEXES = 57493
const INITIALLY = 57494
const INNER = 57495
const INSERT = 57496
const INT = 57497
const INT2VECTOR = 57498
const INT2 = 57499
const INT4 = 57500
const INT8 = 57501
const INT64 = 57502
const INTEGER = 57503
const INTERSECT = 57504
const INTERVAL = 57505
const INTO = 57506
const IS = 57507
const ISOLATION = 57508
const JOB = 57509
const JOBS = 57510
const JOIN = 57511
const KEY = 57512
const KEYS = 57513
const KV = 57514
const LATERAL = 57515
const LC_CTYPE = 57516
const LC_COLLATE = 57517
const LEADING = 57518
const LEAST = 57519
const LEFT = 57520
const LEVEL = 57521
const LIKE = 57522
const LIMIT = 57523
const LOCAL = 57524
const LOCALTIME = 57525
const LOCALTIMESTAMP = 57526
const LOW = 57527
const LSHIFT = 57528
const MATCH = 57529
const MINUTE = 57530
const MONTH = 57531
const NAN = 57532
const NAME = 57533
const NAMES = 57534
const NATURAL = 57535
const NEXT = 57536
const NO = 57537
const NO_INDEX_JOIN = 57538
const NORMAL = 57539
const NOT = 57540
const NOTHING = 57541
const NULL = 57542
const NULLIF = 57543
const NULLS = 57544
const NUMERIC = 57545
const OF = 57546
const OFF = 57547
const OFFSET = 57548
const OID = 57549
const ON = 57550
const ONLY = 57551
const OPTIONS = 57552
const OR = 57553
const ORDER = 57554
const ORDINALITY = 57555
const OUT = 57556
const OUTER = 57557
const OVER = 57558
const OVERLAPS = 57559
const OVERLAY = 57560
const PARENT = 57561
const PARTIAL = 57562
const PARTITION = 57563
const PASSWORD = 57564
const PAUSE = 57565
const PLACING = 57566
const PLANS = 57567
const POSITION = 57568
const PRECEDING = 57569
const PRECISION = 57570
const PREPARE = 57571
const PRIMARY = 57572
const PRIORITY = 57573
const QUERIES = 57574
const QUERY = 57575
const RANGE = 57576
const READ = 57577
const REAL = 57578
const RECURSIVE = 57579
const REF = 57580
const REFERENCES = 57581
const REGCLASS = 57582
const REGPROC = 57583
const REGPROCEDURE = 57584
const REGNAMESPACE = 57585
const REGTYPE = 57586
const REMOVE_PATH = 57587
const RENAME = 57588
const REPEATABLE = 57589
const RELEASE = 57590
const RESET = 57591
const RESTORE = 57592
const RESTRICT = 57593
const RESUME = 57594
const RETURNING = 57595
const REVOKE = 57596
const RIGHT = 57597
const ROLLBACK = 57598
const ROLLUP = 57599
const ROW = 57600
const ROWS = 57601
const RSHIFT = 57602
const SAVEPOINT = 57603
const SCATTER = 57604
const SCRUB = 57605
const SEARCH = 57606
const SECOND = 57607
const SELECT = 57608
const SEQUENCES = 57609
const SERIAL = 57610
const SERIALIZABLE = 57611
const SESSION = 57612
const SESSIONS = 57613
const SESSION_USER = 57614
const SET = 57615
const SETTING = 57616
const SETTINGS = 57617
const SHOW = 57618
const SIMILAR = 57619
const SIMPLE = 57620
const SMALLINT = 57621
const SMALLSERIAL = 57622
const SNAPSHOT = 57623
const SOME = 57624
const SPLIT = 57625
const SQL = 57626
const START = 57627
const STATUS = 57628
const STDIN = 57629
const STRICT = 57630
const STRING = 57631
const STORE = 57632
const STORING = 57633
const SUBSTRING = 57634
const SYMMETRIC = 57635
const SYSTEM = 57636
const TABLE = 57637
const TABLES = 57638
const TEMP = 57639
const TEMPLATE = 57640
const TEMPORARY = 57641
const TESTING_RANGES = 57642
const TESTING_RELOCATE = 57643
const TEXT = 57644
const THEN = 57645
const TIME = 57646
const TIMESTAMP = 57647
const TIMESTAMPTZ = 57648
const TO = 57649
const TRAILING = 57650
const TRACE = 57651
const TRANSACTION = 57652
const TREAT = 57653
const TRIM = 57654
const TRUE = 57655
const TRUNCATE = 57656
const TYPE = 57657
const UNBOUNDED = 57658
const UNCOMMITTED = 57659
const UNION = 57660
const UNIQUE = 57661
const UNKNOWN = 57662
const UPDATE = 57663
const UPSERT = 57664
const USE = 57665
const USER = 57666
const USERS = 57667
const USING = 57668
const UUID = 57669
const VALID = 57670
const VALIDATE = 57671
const VALUE = 57672
const VALUES = 57673
const VARCHAR = 57674
const VARIADIC = 57675
const VIEW = 57676
const VARYING = 57677
const WHEN = 57678
const WHERE = 57679
const WINDOW = 57680
const WITH = 57681
const WITHIN = 57682
const WITHOUT = 57683
const WRITE = 57684
const YEAR = 57685
const ZONE = 57686
const NOT_LA = 57687
const WITH_LA = 57688
const AS_LA = 57689
const CONTAINED_BY = 57690
const HAS_SOME_KEY = 57691
const HAS_ALL_KEYS = 57692
const POSTFIXOP = 57693
const UMINUS = 57694
const HELPTOKEN = 57695

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6583

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	373, 54,
	-2, 676,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 50,
	150, 528,
	-2, 0,
	-1, 63,
	93, 676,
	154, 676,
	321, 676,
	322, 676,
	-2, 0,
	-1, 73,
	104, 651,
	114, 651,
	162, 651,
	181, 651,
	206, 651,
	212, 651,
	318, 651,
	-2, 640,
	-1, 105,
	4, 678,
	20, 678,
	21, 678,
	23, 678,
	28, 678,
	33, 678,
	34, 678,
	35, 678,
	36, 678,
	37, 678,
	38, 678,
	39, 678,
	40, 678,
	41, 678,
	42, 678,
	44, 678,
	45, 678,
	46, 678,
	47, 678,
	48, 678,
	51, 678,
	52, 678,
	53, 678,
	55, 678,
	56, 678,
	60, 678,
	61, 678,
	62, 678,
	64, 678,
	66, 678,
	68, 678,
	69, 678,
	72, 678,
	73, 678,
	74, 678,
	82, 678,
	83, 678,
	84, 678,
	85, 678,
	86, 678,
	87, 678,
	88, 678,
	89, 678,
	91, 678,
	93, 678,
	95, 678,
	98, 678,
	99, 678,
	101, 678,
	105, 678,
	106, 678,
	107, 678,
	108, 678,
	109, 678,
	110, 678,
	111, 678,
	119, 678,
	120, 678,
	121, 678,
	122, 678,
	123, 678,
	125, 678,
	127, 678,
	132, 678,
	133, 678,
	135, 678,
	138, 678,
	139, 678,
	142, 678,
	143, 678,
	144, 678,
	145, 678,
	148, 678,
	149, 678,
	151, 678,
	154, 678,
	155, 678,
	156, 678,
	157, 678,
	158, 678,
	159, 678,
	160, 678,
	161, 678,
	163, 678,
	166, 678,
	167, 678,
	168, 678,
	170, 678,
	171, 678,
	172, 678,
	174, 678,
	175, 678,
	177, 678,
	179, 678,
	182, 678,
	185, 678,
	187, 678,
	188, 678,
	189, 678,
	190, 678,
	191, 678,
	192, 678,
	194, 678,
	195, 678,
	196, 678,
	197, 678,
	201, 678,
	202, 678,
	203, 678,
	204, 678,
	205, 678,
	207, 678,
	209, 678,
	210, 678,
	213, 678,
	214, 678,
	216, 678,
	218, 678,
	219, 678,
	220, 678,
	221, 678,
	222, 678,
	223, 678,
	225, 678,
	226, 678,
	227, 678,
	228, 678,
	229, 678,
	231, 678,
	232, 678,
	233, 678,
	234, 678,
	235, 678,
	236, 678,
	237, 678,
	238, 678,
	240, 678,
	241, 678,
	242, 678,
	243, 678,
	244, 678,
	246, 678,
	247, 678,
	248, 678,
	249, 678,
	250, 678,
	251, 678,
	252, 678,
	254, 678,
	256, 678,
	257, 678,
	258, 678,
	259, 678,
	261, 678,
	262, 678,
	263, 678,
	264, 678,
	265, 678,
	267, 678,
	268, 678,
	269, 678,
	270, 678,
	271, 678,
	273, 678,
	274, 678,
	275, 678,
	276, 678,
	278, 678,
	279, 678,
	280, 678,
	281, 678,
	283, 678,
	284, 678,
	285, 678,
	286, 678,
	287, 678,
	288, 678,
	289, 678,
	290, 678,
	291, 678,
	292, 678,
	294, 678,
	296, 678,
	297, 678,
	298, 678,
	299, 678,
	300, 678,
	301, 678,
	302, 678,
	304, 678,
	305, 678,
	306, 678,
	309, 678,
	310, 678,
	311, 678,
	312, 678,
	314, 678,
	315, 678,
	316, 678,
	317, 678,
	320, 678,
	321, 678,
	322, 678,
	323, 678,
	325, 678,
	327, 678,
	328, 678,
	329, 678,
	330, 678,
	331, 678,
	332, 678,
	335, 678,
	340, 678,
	341, 678,
	342, 678,
	343, 678,
	344, 678,
	-2, 0,
	-1, 119,
	104, 650,
	114, 650,
	162, 650,
	181, 650,
	206, 650,
	212, 650,
	318, 650,
	-2, 643,
	-1, 124,
	1, 577,
	166, 577,
	231, 577,
	235, 577,
	372, 577,
	373, 577,
	-2, 0,
	-1, 126,
	1, 577,
	372, 577,
	373, 577,
	-2, 0,
	-1, 127,
	1, 577,
	372, 577,
	373, 577,
	-2, 0,
	-1, 128,
	1, 581,
	372, 581,
	373, 581,
	-2, 0,
	-1, 135,
	4, 684,
	5, 684,
	6, 684,
	7, 684,
	8, 684,
	9, 684,
	20, 684,
	21, 684,
	23, 684,
	28, 684,
	29, 684,
	33, 684,
	34, 684,
	35, 684,
	36, 684,
	37, 684,
	38, 684,
	39, 684,
	40, 684,
	41, 684,
	42, 684,
	44, 684,
	45, 684,
	46, 684,
	47, 684,
	48, 684,
	49, 684,
	50, 684,
	51, 684,
	52, 684,
	53, 684,
	55, 684,
	56, 684,
	58, 684,
	60, 684,
	61, 684,
	62, 684,
	64, 684,
	66, 684,
	68, 684,
	69, 684,
	71, 684,
	72, 684,
	73, 684,
	74, 684,
	76, 684,
	77, 684,
	78, 684,
	80, 684,
	81, 684,
	82, 684,
	83, 684,
	84, 684,
	85, 684,
	86, 684,
	87, 684,
	88, 684,
	89, 684,
	91, 684,
	93, 684,
	95, 684,
	98, 684,
	99, 684,
	101, 684,
	105, 684,
	106, 684,
	107, 684,
	108, 684,
	109, 684,
	110, 684,
	111, 684,
	112, 684,
	113, 684,
	119, 684,
	120, 684,
	121, 684,
	122, 684,
	123, 684,
	125, 684,
	127, 684,
	130, 684,
	132, 684,
	133, 684,
	135, 684,
	138, 684,
	139, 684,
	142, 684,
	143, 684,
	144, 684,
	145, 684,
	146, 684,
	148, 684,
	149, 684,
	151, 684,
	153, 684,
	154, 684,
	155, 684,
	156, 684,
	157, 684,
	158, 684,
	159, 684,
	160, 684,
	161, 684,
	163, 684,
	165, 684,
	166, 684,
	167, 684,
	168, 684,
	169, 684,
	170, 684,
	171, 684,
	172, 684,
	174, 684,
	175, 684,
	177, 684,
	178, 684,
	179, 684,
	180, 684,
	182, 684,
	185, 684,
	187, 684,
	188, 684,
	189, 684,
	190, 684,
	191, 684,
	192, 684,
	193, 684,
	194, 684,
	195, 684,
	196, 684,
	197, 684,
	198, 684,
	200, 684,
	201, 684,
	202, 684,
	203, 684,
	204, 684,
	205, 684,
	207, 684,
	210, 684,
	213, 684,
	214, 684,
	215, 684,
	216, 684,
	217, 684,
	218, 684,
	219, 684,
	220, 684,
	221, 684,
	222, 684,
	223, 684,
	225, 684,
	226, 684,
	227, 684,
	228, 684,
	229, 684,
	231, 684,
	232, 684,
	233, 684,
	234, 684,
	235, 684,
	236, 684,
	237, 684,
	238, 684,
	240, 684,
	241, 684,
	242, 684,
	243, 684,
	244, 684,
	246, 684,
	247, 684,
	248, 684,
	249, 684,
	250, 684,
	251, 684,
	252, 684,
	254, 684,
	255, 684,
	256, 684,
	257, 684,
	258, 684,
	259, 684,
	261, 684,
	262, 684,
	263, 684,
	264, 684,
	265, 684,
	267, 684,
	268, 684,
	269, 684,
	270, 684,
	271, 684,
	272, 684,
	273, 684,
	274, 684,
	275, 684,
	276, 684,
	277, 684,
	278, 684,
	279, 684,
	280, 684,
	281, 684,
	283, 684,
	284, 684,
	285, 684,
	286, 684,
	287, 684,
	288, 684,
	289, 684,
	290, 684,
	291, 684,
	292, 684,
	294, 684,
	296, 684,
	297, 684,
	298, 684,
	299, 684,
	300, 684,
	301, 684,
	302, 684,
	304, 684,
	305, 684,
	306, 684,
	309, 684,
	310, 684,
	311, 684,
	312, 684,
	313, 684,
	314, 684,
	315, 684,
	316, 684,
	317, 684,
	320, 684,
	321, 684,
	322, 684,
	323, 684,
	324, 684,
	325, 684,
	327, 684,
	328, 684,
	329, 684,
	330, 684,
	331, 684,
	332, 684,
	335, 684,
	340, 684,
	341, 684,
	342, 684,
	343, 684,
	344, 684,
	345, 684,
	355, 684,
	360, 684,
	361, 684,
	362, 684,
	369, 684,
	375, 684,
	-2, 0,
	-1, 138,
	1, 54,
	373, 54,
	-2, 676,
	-1, 500,
	129, 1286,
	307, 1286,
	350, 1286,
	371, 1286,
	-2, 0,
	-1, 501,
	129, 1238,
	307, 1238,
	350, 1238,
	371, 1238,
	-2, 0,
	-1, 503,
	129, 1345,
	307, 1345,
	350, 1345,
	371, 1345,
	-2, 0,
	-1, 505,
	129, 1367,
	307, 1367,
	350, 1367,
	371, 1367,
	-2, 0,
	-1, 512,
	129, 1291,
	307, 1291,
	350, 1291,
	371, 1291,
	-2, 320,
	-1, 538,
	1, 397,
	368, 397,
	370, 397,
	372, 397,
	373, 397,
	-2, 0,
	-1, 539,
	1, 444,
	126, 444,
	368, 444,
	370, 444,
	372, 444,
	373, 444,
	-2, 0,
	-1, 545,
	1, 411,
	368, 411,
	370, 411,
	372, 411,
	373, 411,
	-2, 0,
	-1, 547,
	1, 415,
	368, 415,
	370, 415,
	372, 415,
	373, 415,
	-2, 0,
	-1, 550,
	1, 423,
	368, 423,
	370, 423,
	372, 423,
	373, 423,
	-2, 0,
	-1, 551,
	1, 428,
	368, 428,
	370, 428,
	372, 428,
	373, 428,
	-2, 0,
	-1, 554,
	1, 438,
	368, 438,
	370, 438,
	372, 438,
	373, 438,
	-2, 0,
	-1, 569,
	114, 686,
	181, 686,
	206, 686,
	-2, 646,
	-1, 572,
	114, 685,
	181, 685,
	206, 685,
	-2, 644,
	-1, 629,
	369, 1216,
	-2, 1209,
	-1, 630,
	369, 1217,
	-2, 1210,
	-1, 636,
	5, 863,
	369, 863,
	-2, 1419,
	-1, 661,
	5, 822,
	-2, 1388,
	-1, 662,
	5, 857,
	369, 857,
	-2, 1390,
	-1, 663,
	5, 832,
	-2, 1391,
	-1, 664,
	5, 831,
	-2, 1392,
	-1, 665,
	5, 857,
	369, 857,
	-2, 1395,
	-1, 666,
	5, 857,
	369, 857,
	-2, 1396,
	-1, 667,
	5, 858,
	-2, 1399,
	-1, 668,
	5, 814,
	-2, 1400,
	-1, 669,
	5, 814,
	-2, 1401,
	-1, 670,
	5, 839,
	-2, 1405,
	-1, 671,
	5, 824,
	-2, 1406,
	-1, 672,
	5, 825,
	-2, 1407,
	-1, 673,
	5, 815,
	-2, 1413,
	-1, 674,
	5, 816,
	-2, 1414,
	-1, 675,
	5, 817,
	-2, 1415,
	-1, 676,
	5, 818,
	-2, 1416,
	-1, 677,
	5, 819,
	-2, 1417,
	-1, 678,
	5, 820,
	-2, 1418,
	-1, 679,
	5, 814,
	-2, 1423,
	-1, 680,
	5, 823,
	-2, 1428,
	-1, 681,
	5, 821,
	-2, 1431,
	-1, 682,
	5, 855,
	369, 855,
	-2, 1433,
	-1, 683,
	5, 859,
	-2, 1436,
	-1, 684,
	5, 861,
	-2, 1437,
	-1, 685,
	5, 854,
	369, 854,
	-2, 1442,
	-1, 781,
	222, 674,
	-2, 521,
	-1, 785,
	208, 1213,
	-2, 0,
	-1, 820,
	1, 209,
	368, 209,
	370, 209,
	372, 209,
	373, 209,
	-2, 649,
	-1, 827,
	4, 1441,
	10, 1441,
	11, 1441,
	13, 1441,
	14, 1441,
	15, 1441,
	16, 1441,
	17, 1441,
	18, 1441,
	20, 1441,
	21, 1441,
	23, 1441,
	26, 1441,
	28, 1441,
	30, 1441,
	33, 1441,
	34, 1441,
	35, 1441,
	36, 1441,
	37, 1441,
	38, 1441,
	39, 1441,
	40, 1441,
	41, 1441,
	42, 1441,
	44, 1441,
	45, 1441,
	46, 1441,
	47, 1441,
	48, 1441,
	51, 1441,
	52, 1441,
	53, 1441,
	55, 1441,
	56, 1441,
	57, 1441,
	60, 1441,
	61, 1441,
	62, 1441,
	63, 1441,
	64, 1441,
	66, 1441,
	67, 1441,
	68, 1441,
	69, 1441,
	71, 1441,
	72, 1441,
	73, 1441,
	74, 1441,
	82, 1441,
	83, 1441,
	84, 1441,
	85, 1441,
	86, 1441,
	87, 1441,
	88, 1441,
	89, 1441,
	91, 1441,
	93, 1441,
	95, 1441,
	98, 1441,
	99, 1441,
	101, 1441,
	105, 1441,
	106, 1441,
	107, 1441,
	108, 1441,
	109, 1441,
	110, 1441,
	111, 1441,
	115, 1441,
	116, 1441,
	117, 1441,
	118, 1441,
	119, 1441,
	120, 1441,
	121, 1441,
	122, 1441,
	123, 1441,
	124, 1441,
	125, 1441,
	127, 1441,
	130, 1441,
	132, 1441,
	133, 1441,
	135, 1441,
	138, 1441,
	139, 1441,
	142, 1441,
	143, 1441,
	144, 1441,
	145, 1441,
	146, 1441,
	147, 1441,
	148, 1441,
	149, 1441,
	151, 1441,
	153, 1441,
	154, 1441,
	155, 1441,
	156, 1441,
	157, 1441,
	158, 1441,
	159, 1441,
	160, 1441,
	161, 1441,
	163, 1441,
	165, 1441,
	166, 1441,
	167, 1441,
	168, 1441,
	169, 1441,
	170, 1441,
	171, 1441,
	172, 1441,
	174, 1441,
	175, 1441,
	177, 1441,
	178, 1441,
	179, 1441,
	180, 1441,
	182, 1441,
	185, 1441,
	186, 1441,
	187, 1441,
	188, 1441,
	189, 1441,
	190, 1441,
	191, 1441,
	192, 1441,
	193, 1441,
	194, 1441,
	195, 1441,
	196, 1441,
	197, 1441,
	201, 1441,
	202, 1441,
	203, 1441,
	204, 1441,
	205, 1441,
	207, 1441,
	210, 1441,
	211, 1441,
	213, 1441,
	214, 1441,
	216, 1441,
	218, 1441,
	219, 1441,
	220, 1441,
	221, 1441,
	222, 1441,
	223, 1441,
	225, 1441,
	226, 1441,
	227, 1441,
	228, 1441,
	229, 1441,
	231, 1441,
	232, 1441,
	233, 1441,
	234, 1441,
	235, 1441,
	236, 1441,
	237, 1441,
	238, 1441,
	240, 1441,
	241, 1441,
	242, 1441,
	243, 1441,
	244, 1441,
	245, 1441,
	246, 1441,
	247, 1441,
	248, 1441,
	249, 1441,
	250, 1441,
	251, 1441,
	252, 1441,
	254, 1441,
	255, 1441,
	256, 1441,
	257, 1441,
	258, 1441,
	259, 1441,
	260, 1441,
	261, 1441,
	262, 1441,
	263, 1441,
	264, 1441,
	265, 1441,
	267, 1441,
	268, 1441,
	269, 1441,
	270, 1441,
	271, 1441,
	273, 1441,
	274, 1441,
	275, 1441,
	276, 1441,
	277, 1441,
	278, 1441,
	279, 1441,
	280, 1441,
	281, 1441,
	283, 1441,
	284, 1441,
	285, 1441,
	286, 1441,
	287, 1441,
	288, 1441,
	289, 1441,
	290, 1441,
	291, 1441,
	292, 1441,
	294, 1441,
	296, 1441,
	297, 1441,
	298, 1441,
	299, 1441,
	300, 1441,
	301, 1441,
	302, 1441,
	304, 1441,
	305, 1441,
	306, 1441,
	309, 1441,
	310, 1441,
	311, 1441,
	312, 1441,
	314, 1441,
	315, 1441,
	316, 1441,
	317, 1441,
	320, 1441,
	321, 1441,
	322, 1441,
	323, 1441,
	325, 1441,
	327, 1441,
	328, 1441,
	329, 1441,
	330, 1441,
	331, 1441,
	332, 1441,
	335, 1441,
	340, 1441,
	341, 1441,
	342, 1441,
	343, 1441,
	344, 1441,
	345, 1441,
	346, 1441,
	348, 1441,
	349, 1441,
	350, 1441,
	351, 1441,
	352, 1441,
	353, 1441,
	354, 1441,
	355, 1441,
	357, 1441,
	358, 1441,
	359, 1441,
	360, 1441,
	361, 1441,
	362, 1441,
	363, 1441,
	364, 1441,
	365, 1441,
	367, 1441,
	370, 1441,
	371, 1441,
	374, 1441,
	375, 1441,
	-2, 0,
	-1, 841,
	129, 1345,
	307, 1345,
	350, 1345,
	371, 1345,
	-2, 0,
	-1, 858,
	129, 1367,
	307, 1367,
	350, 1367,
	371, 1367,
	-2, 0,
	-1, 859,
	166, 589,
	231, 589,
	235, 589,
	-2, 308,
	-1, 929,
	114, 685,
	181, 685,
	206, 685,
	-2, 647,
	-1, 1008,
	104, 651,
	114, 651,
	162, 651,
	181, 651,
	206, 651,
	212, 651,
	318, 651,
	-2, 992,
	-1, 1018,
	369, 1193,
	-2, 1181,
	-1, 1036,
	370, 1105,
	-2, 0,
	-1, 1060,
	166, 589,
	231, 589,
	235, 589,
	-2, 584,
	-1, 1088,
	370, 1105,
	-2, 0,
	-1, 1092,
	104, 651,
	114, 651,
	162, 651,
	181, 651,
	206, 651,
	212, 651,
	318, 651,
	-2, 747,
	-1, 1315,
	166, 589,
	231, 589,
	235, 589,
	-2, 310,
	-1, 1414,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 898,
	-1, 1415,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 899,
	-1, 1416,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 900,
	-1, 1417,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 901,
	-1, 1418,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 902,
	-1, 1419,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 903,
	-1, 1420,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 904,
	-1, 1421,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 905,
	-1, 1430,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 914,
	-1, 1431,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 915,
	-1, 1432,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	-2, 916,
	-1, 1435,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 921,
	-1, 1441,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 923,
	-1, 1443,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 927,
	-1, 1444,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 928,
	-1, 1445,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 929,
	-1, 1446,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 930,
	-1, 1515,
	129, 1116,
	369, 1216,
	-2, 1209,
	-1, 1516,
	129, 1117,
	-2, 1384,
	-1, 1517,
	129, 1118,
	-2, 1290,
	-1, 1518,
	129, 1119,
	-2, 1253,
	-1, 1519,
	129, 1120,
	-2, 1270,
	-1, 1520,
	129, 1121,
	-2, 1289,
	-1, 1521,
	129, 1122,
	-2, 1342,
	-1, 1597,
	1, 748,
	71, 748,
	104, 748,
	114, 748,
	130, 748,
	134, 748,
	136, 748,
	153, 748,
	162, 748,
	169, 748,
	178, 748,
	181, 748,
	193, 748,
	206, 748,
	208, 748,
	212, 748,
	253, 748,
	255, 748,
	318, 748,
	326, 748,
	337, 748,
	338, 748,
	347, 748,
	368, 748,
	370, 748,
	372, 748,
	373, 748,
	374, 748,
	-2, 747,
	-1, 1737,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 922,
	-1, 1738,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 924,
	-1, 1743,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 925,
	-1, 1761,
	217, 1076,
	-2, 1078,
	-1, 1986,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 926,
	-1, 1991,
	165, 0,
	-2, 942,
	-1, 2000,
	217, 1077,
	-2, 1079,
	-1, 2042,
	13, 0,
	14, 0,
	15, 0,
	348, 0,
	349, 0,
	350, 0,
	-2, 969,
	-1, 2043,
	13, 0,
	14, 0,
	15, 0,
	348, 0,
	349, 0,
	350, 0,
	-2, 970,
	-1, 2044,
	13, 0,
	14, 0,
	15, 0,
	348, 0,
	349, 0,
	350, 0,
	-2, 971,
	-1, 2048,
	13, 0,
	14, 0,
	15, 0,
	348, 0,
	349, 0,
	350, 0,
	-2, 975,
	-1, 2049,
	13, 0,
	14, 0,
	15, 0,
	348, 0,
	349, 0,
	350, 0,
	-2, 976,
	-1, 2050,
	13, 0,
	14, 0,
	15, 0,
	348, 0,
	349, 0,
	350, 0,
	-2, 977,
	-1, 2174,
	165, 0,
	-2, 943,
	-1, 2177,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 946,
	-1, 2178,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 948,
	-1, 2294,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 947,
	-1, 2295,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 949,
	-1, 2302,
	165, 0,
	-2, 978,
	-1, 2379,
	165, 0,
	-2, 979,
	-1, 2456,
	36, 0,
	146, 0,
	180, 0,
	277, 0,
	345, 0,
	355, 0,
	-2, 1387,
}

const sqlPrivate = 57344

const sqlLast = 41936

var sqlAct = [...]int{

	630, 2130, 2455, 2464, 2430, 1660, 2503, 2465, 2328, 2466,
	1668, 2019, 2454, 1968, 573, 1215, 2384, 589, 879, 2275,
	72, 1731, 2140, 1257, 2242, 2228, 1309, 1222, 1310, 775,
	1936, 1934, 2162, 606, 2164, 1592, 2308, 1644, 2102, 620,
	733, 176, 628, 1639, 1827, 1657, 176, 1875, 1086, 2101,
	1090, 1854, 2156, 1069, 176, 627, 1669, 1601, 2208, 1862,
	1640, 1218, 1593, 176, 1610, 1643, 443, 1633, 176, 176,
	1826, 1121, 176, 1942, 2072, 176, 1471, 1772, 1014, 1495,
	1235, 1388, 1470, 176, 458, 26, 1727, 1098, 862, 1393,
	1100, 581, 118, 1095, 1340, 623, 1070, 1715, 600, 1479,
	1211, 1458, 1336, 1455, 861, 932, 440, 810, 1050, 1489,
	1046, 881, 821, 1662, 1647, 1544, 742, 739, 511, 1641,
	807, 1579, 1077, 1566, 1511, 721, 1003, 933, 599, 119,
	176, 176, 167, 491, 508, 120, 622, 1339, 176, 1060,
	469, 931, 578, 1229, 800, 172, 719, 1059, 504, 797,
	2243, 937, 532, 2086, 1760, 118, 2087, 1661, 577, 1237,
	1237, 577, 1237, 1087, 176, 176, 176, 176, 1984, 2499,
	2480, 176, 176, 1120, 2241, 2476, 2475, 2472, 2452, 1683,
	1683, 1120, 1698, 2451, 2425, 2420, 2416, 1698, 1691, 2289,
	1120, 2408, 2381, 605, 1951, 2241, 1691, 1258, 572, 2359,
	2356, 483, 2354, 2241, 1120, 2339, 2241, 2338, 2316, 1120,
	2313, 2241, 1120, 2296, 1120, 2263, 2261, 1691, 587, 1683,
	1683, 2240, 2221, 26, 2176, 2241, 1120, 1683, 1691, 2155,
	118, 736, 763, 1638, 2150, 1634, 1952, 1568, 1638, 397,
	948, 949, 2082, 1995, 1764, 1962, 2083, 1683, 570, 1924,
	1765, 1923, 1851, 1844, 569, 1120, 1120, 1845, 1634, 1117,
	1842, 1841, 2075, 951, 1683, 1683, 1840, 2426, 1702, 1492,
	1683, 688, 1683, 1698, 757, 582, 1690, 723, 2289, 135,
	1691, 747, 751, 948, 949, 1698, 2075, 950, 1682, 988,
	989, 990, 1683, 39, 1637, 1472, 1573, 1250, 1638, 1567,
	1572, 1251, 1979, 725, 40, 726, 951, 1599, 137, 992,
	2055, 1797, 1798, 1997, 1815, 1816, 1817, 43, 1120, 1924,
	1683, 1493, 1730, 1771, 1713, 948, 949, 2173, 1318, 1665,
	950, 740, 1064, 1474, 761, 843, 970, 138, 840, 2244,
	50, 839, 177, 838, 136, 1337, 135, 837, 951, 836,
	1797, 1798, 129, 580, 956, 835, 834, 749, 753, 130,
	759, 833, 1238, 1238, 1812, 1238, 832, 831, 830, 61,
	1494, 1491, 950, 829, 727, 137, 62, 724, 970, 63,
	564, 563, 121, 562, 530, 1926, 529, 528, 973, 974,
	975, 976, 527, 526, 948, 949, 525, 956, 524, 523,
	522, 521, 520, 519, 518, 176, 517, 176, 176, 516,
	176, 136, 65, 515, 514, 176, 971, 951, 499, 985,
	993, 176, 498, 497, 496, 1803, 495, 431, 430, 429,
	973, 974, 975, 976, 176, 176, 176, 176, 176, 956,
	428, 950, 427, 824, 412, 411, 403, 1496, 402, 121,
	401, 400, 767, 983, 393, 392, 161, 160, 159, 971,
	158, 157, 156, 578, 1803, 176, 1818, 155, 1797, 1798,
	154, 1815, 1816, 1817, 153, 152, 151, 150, 176, 1508,
	1343, 1951, 1567, 1091, 2172, 1243, 1236, 1813, 1371, 149,
	972, 148, 147, 66, 176, 146, 145, 144, 814, 143,
	142, 971, 141, 140, 176, 135, 139, 944, 956, 1870,
	1797, 1798, 686, 874, 1506, 1504, 2498, 2471, 977, 122,
	68, 1812, 69, 779, 2453, 1490, 783, 2435, 1502, 2376,
	2357, 2282, 2207, 972, 137, 824, 135, 2206, 799, 2202,
	1717, 2201, 2194, 464, 2193, 2192, 101, 2188, 2187, 774,
	986, 1696, 803, 803, 822, 2186, 2185, 2179, 2161, 2069,
	977, 1814, 2064, 877, 2063, 137, 176, 2062, 2005, 1922,
	136, 1882, 1878, 1849, 1846, 972, 687, 1834, 129, 804,
	1825, 1796, 1803, 1793, 930, 130, 1792, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 844, 1790, 1777, 1776,
	772, 136, 1761, 1597, 1895, 1466, 944, 872, 1664, 129,
	1022, 1254, 943, 1089, 753, 1221, 130, 135, 984, 734,
	1088, 2021, 2443, 1818, 1803, 578, 1797, 1798, 987, 759,
	961, 959, 960, 952, 953, 954, 955, 957, 958, 121,
	2411, 1015, 1966, 1006, 1813, 859, 137, 929, 2405, 1809,
	1810, 1811, 856, 767, 2404, 2403, 2395, 2393, 1808, 1806,
	1807, 1799, 1800, 1801, 1802, 1804, 1805, 2371, 2370, 2369,
	1015, 2325, 961, 959, 960, 952, 953, 954, 955, 957,
	958, 2304, 136, 927, 1964, 2290, 875, 2269, 2247, 2199,
	129, 2138, 2281, 635, 2136, 2135, 2133, 130, 1338, 1726,
	1799, 1800, 1801, 1802, 1804, 1805, 2110, 1725, 2109, 1004,
	2090, 570, 2078, 1990, 1913, 1908, 1467, 569, 1814, 176,
	121, 176, 1895, 1894, 1880, 1850, 1824, 940, 941, 1786,
	1785, 1782, 948, 949, 1757, 1752, 945, 1460, 1051, 1054,
	1803, 1584, 1556, 1500, 176, 176, 954, 955, 957, 958,
	948, 949, 1214, 1075, 735, 951, 1067, 1058, 1044, 753,
	1043, 824, 176, 1042, 578, 1041, 1018, 1068, 1124, 1040,
	1039, 1038, 1037, 951, 176, 1036, 1048, 1049, 1052, 950,
	1035, 1034, 1033, 1073, 1032, 825, 176, 1031, 1055, 1118,
	1030, 1029, 176, 1028, 176, 1027, 176, 950, 1026, 1220,
	176, 1019, 1813, 1007, 1213, 1006, 1809, 1810, 1811, 855,
	847, 818, 2387, 2288, 2181, 1808, 1806, 1807, 1799, 1800,
	1801, 1802, 1804, 1805, 2160, 2085, 1089, 2081, 1797, 1798,
	118, 1815, 1816, 1817, 1763, 1693, 1585, 1937, 1797, 1798,
	773, 871, 176, 176, 1701, 1085, 956, 1507, 1226, 824,
	1091, 176, 1063, 2292, 176, 948, 949, 1061, 2291, 1108,
	1093, 2285, 1801, 1802, 1804, 1805, 2088, 1065, 1953, 1056,
	1634, 1492, 1868, 1848, 1057, 1124, 1814, 825, 951, 1847,
	1106, 1812, 1505, 1503, 176, 1240, 1736, 1700, 1242, 176,
	868, 1324, 1245, 1024, 176, 176, 1501, 176, 1107, 176,
	1010, 176, 950, 176, 925, 1969, 1219, 1119, 971, 799,
	1255, 2309, 1661, 2022, 176, 1480, 1768, 1047, 1947, 405,
	176, 176, 919, 1493, 2097, 2438, 1687, 690, 2495, 824,
	1328, 1327, 432, 1337, 1334, 2496, 2415, 740, 1096, 1231,
	2255, 1228, 1803, 1264, 1976, 716, 1344, 176, 1703, 714,
	689, 1124, 1101, 2349, 1102, 826, 2348, 1372, 2347, 1089,
	1101, 920, 1102, 911, 1333, 2346, 712, 1212, 162, 956,
	710, 707, 1494, 1491, 1021, 1252, 1799, 1800, 1801, 1802,
	1804, 1805, 972, 1311, 1253, 753, 735, 1230, 1312, 1230,
	856, 1603, 2125, 2123, 2094, 2093, 1781, 2121, 1315, 1780,
	118, 409, 1345, 1965, 1813, 1329, 1779, 1370, 1341, 1778,
	2236, 1739, 1686, 1630, 436, 1359, 1331, 576, 1101, 869,
	1102, 1626, 1402, 1349, 1325, 1611, 1352, 578, 1624, 1353,
	1103, 1354, 578, 1355, 1603, 1356, 1442, 1357, 1103, 1375,
	1602, 1062, 760, 2266, 1264, 1264, 2237, 826, 1213, 1496,
	165, 1560, 593, 1559, 1363, 1365, 1797, 1798, 2414, 1403,
	1374, 1658, 870, 176, 1369, 176, 928, 570, 176, 1368,
	570, 570, 1373, 1384, 417, 575, 1385, 1386, 1814, 176,
	435, 1392, 952, 953, 954, 955, 957, 958, 1124, 1303,
	566, 176, 1475, 2128, 1477, 176, 1103, 478, 176, 1614,
	2330, 1457, 176, 825, 2129, 958, 176, 1115, 1332, 1812,
	1125, 176, 1457, 1539, 1248, 578, 166, 176, 1124, 1297,
	1919, 176, 1209, 1114, 2112, 577, 2449, 1490, 1565, 1468,
	1465, 1232, 905, 1464, 1496, 418, 2468, 1586, 1462, 1604,
	1348, 948, 949, 568, 1112, 2487, 1394, 1401, 1439, 1797,
	1798, 1313, 1480, 947, 2232, 854, 2233, 1944, 1522, 1587,
	1615, 1617, 1113, 2495, 951, 1590, 1809, 1810, 1811, 918,
	1803, 906, 1576, 1694, 426, 1808, 1806, 1807, 1799, 1800,
	1801, 1802, 1804, 1805, 1945, 1906, 2235, 1915, 950, 1632,
	1563, 825, 1622, 1805, 421, 2238, 1562, 1571, 1628, 1975,
	2015, 1613, 1577, 1581, 1582, 952, 953, 954, 955, 957,
	958, 1093, 404, 1910, 1367, 176, 1607, 1125, 1728, 1729,
	1297, 1297, 176, 1620, 1631, 434, 2469, 1977, 1625, 1944,
	2511, 574, 1813, 176, 1111, 176, 410, 176, 884, 2119,
	176, 406, 176, 1099, 176, 176, 924, 176, 176, 1109,
	718, 407, 824, 717, 437, 956, 176, 708, 1437, 1440,
	1104, 163, 1237, 1803, 433, 584, 470, 557, 1104, 2422,
	910, 825, 740, 826, 708, 2234, 2398, 1496, 709, 708,
	1126, 1045, 1600, 1316, 2470, 586, 1338, 1335, 740, 475,
	1612, 1598, 1436, 1125, 2423, 471, 1653, 1706, 2113, 753,
	164, 2353, 420, 419, 753, 2300, 1814, 1010, 1681, 1708,
	759, 1001, 1784, 615, 1663, 1482, 1663, 971, 585, 2506,
	1580, 394, 2331, 1689, 2168, 1813, 1104, 472, 1514, 1514,
	1527, 1709, 1596, 915, 1547, 577, 2467, 2494, 1551, 1552,
	1554, 892, 118, 1707, 1124, 1667, 2012, 558, 118, 865,
	474, 1678, 176, 1529, 173, 1675, 2486, 1684, 803, 398,
	803, 826, 1741, 822, 1685, 1679, 2492, 413, 176, 176,
	176, 2274, 176, 1456, 1695, 1688, 438, 1697, 1655, 850,
	936, 481, 173, 567, 1676, 489, 1677, 1126, 494, 1438,
	477, 972, 176, 1463, 842, 2013, 513, 422, 916, 1814,
	1052, 1918, 1055, 1808, 1806, 1807, 1799, 1800, 1801, 1802,
	1804, 1805, 2051, 1347, 866, 1714, 1049, 1048, 867, 2517,
	2197, 2341, 1704, 2340, 1296, 946, 1672, 853, 2323, 1076,
	1125, 2251, 2390, 2512, 1380, 2096, 1891, 759, 759, 423,
	1887, 826, 935, 722, 722, 1656, 1227, 865, 1216, 2254,
	1876, 398, 118, 917, 2011, 559, 2253, 2431, 2485, 1323,
	1125, 1362, 473, 1126, 1319, 1238, 2504, 1718, 885, 424,
	2141, 425, 1496, 2276, 1797, 1798, 1720, 398, 398, 755,
	398, 578, 1724, 935, 173, 764, 395, 777, 1080, 1722,
	960, 952, 953, 954, 955, 957, 958, 1770, 1807, 1799,
	1800, 1801, 1802, 1804, 1805, 776, 1321, 886, 1381, 934,
	883, 1083, 866, 2324, 2052, 1897, 867, 476, 1322, 1877,
	2053, 169, 2505, 1896, 1734, 1296, 1296, 1078, 2198, 2516,
	1076, 632, 1865, 583, 936, 560, 1081, 2236, 486, 2250,
	2229, 1263, 1742, 1740, 2507, 1575, 1574, 893, 2227, 865,
	934, 1079, 396, 2231, 480, 578, 575, 785, 2131, 2267,
	1756, 1719, 759, 1721, 2252, 753, 1864, 561, 796, 176,
	1124, 794, 1852, 2237, 2321, 176, 176, 1858, 1767, 176,
	860, 1917, 2209, 2073, 176, 1735, 1499, 176, 1803, 1080,
	1859, 2303, 463, 34, 825, 176, 2230, 2196, 462, 33,
	1126, 176, 176, 176, 2127, 2322, 3, 176, 1828, 1989,
	176, 1920, 1083, 1082, 461, 30, 176, 176, 176, 176,
	176, 1791, 1872, 1751, 1699, 176, 1636, 176, 1078, 1629,
	1126, 176, 914, 1623, 460, 78, 1871, 1081, 1453, 176,
	903, 1857, 1263, 1263, 1888, 923, 1867, 922, 1881, 176,
	1813, 176, 1079, 176, 1451, 901, 176, 1831, 1832, 1833,
	176, 765, 1856, 848, 1853, 176, 899, 176, 1860, 1861,
	1829, 1360, 1866, 876, 176, 557, 1925, 897, 1927, 766,
	1351, 2232, 1025, 2233, 1863, 578, 1125, 176, 824, 1498,
	1883, 909, 762, 586, 459, 77, 456, 22, 2463, 824,
	176, 2428, 2225, 485, 1264, 2117, 1907, 2115, 1905, 895,
	2095, 1933, 1912, 2235, 1082, 1659, 1961, 1652, 513, 479,
	781, 513, 2238, 786, 1814, 557, 1247, 1970, 789, 1246,
	795, 34, 1447, 793, 398, 176, 1928, 33, 1264, 1931,
	1448, 1949, 1449, 586, 865, 745, 1454, 513, 513, 398,
	811, 764, 1244, 30, 1241, 558, 1755, 1955, 1956, 913,
	1957, 1958, 740, 1758, 826, 1946, 1940, 902, 740, 740,
	889, 1929, 740, 78, 1954, 1299, 1992, 1239, 513, 792,
	1774, 1775, 900, 1116, 1960, 176, 1110, 1264, 2007, 2008,
	2009, 513, 1974, 898, 1884, 1972, 1973, 1971, 1298, 1105,
	457, 23, 2234, 40, 896, 558, 1892, 851, 1978, 866,
	1980, 2002, 1982, 867, 1935, 908, 43, 513, 1909, 2364,
	706, 1808, 1806, 1807, 1799, 1800, 1801, 1802, 1804, 1805,
	1823, 2496, 1921, 77, 1996, 22, 894, 1547, 1547, 1547,
	1892, 938, 1836, 1998, 2001, 2287, 2286, 1080, 1264, 1932,
	1342, 2157, 455, 28, 2366, 1450, 1126, 1732, 1212, 2014,
	2016, 2017, 1452, 559, 2023, 2028, 176, 1212, 454, 20,
	1083, 2057, 176, 452, 19, 1619, 1299, 1299, 2025, 398,
	1297, 176, 176, 730, 1264, 1264, 1578, 2030, 2149, 1963,
	453, 18, 2400, 1264, 1264, 1081, 1603, 888, 2058, 1298,
	1298, 2056, 1618, 731, 447, 15, 791, 2084, 448, 16,
	465, 65, 1125, 559, 1297, 939, 2244, 2071, 948, 949,
	1733, 2077, 2074, 446, 14, 176, 1264, 176, 1983, 2089,
	2126, 887, 2378, 2076, 176, 2108, 2210, 824, 2107, 23,
	942, 2091, 118, 560, 2092, 2137, 1749, 711, 713, 1627,
	1621, 2106, 176, 176, 2134, 2143, 2151, 2427, 2099, 2080,
	2272, 1666, 1747, 1297, 2120, 950, 2142, 451, 12, 1654,
	176, 2154, 1082, 445, 10, 561, 1651, 732, 450, 7,
	176, 487, 2116, 1564, 2118, 1124, 1394, 2026, 1603, 1383,
	2132, 28, 66, 560, 1616, 1394, 2031, 1314, 2147, 1256,
	2144, 449, 6, 2502, 2153, 2170, 2515, 20, 2152, 444,
	5, 2315, 19, 2145, 2175, 2158, 2215, 2146, 122, 68,
	2159, 69, 176, 2183, 1297, 561, 1797, 1798, 2061, 18,
	825, 2070, 494, 2010, 722, 135, 948, 949, 1711, 1710,
	1744, 825, 464, 15, 2018, 101, 1856, 16, 1930, 1711,
	1745, 948, 949, 1967, 1750, 1873, 2171, 398, 398, 740,
	1297, 1297, 14, 1843, 137, 1712, 1561, 1558, 1557, 1297,
	1297, 1488, 1012, 2195, 951, 173, 176, 1022, 1020, 176,
	921, 912, 1126, 907, 904, 890, 1264, 398, 1530, 1124,
	176, 176, 852, 1317, 176, 176, 176, 1249, 950, 1225,
	136, 565, 1297, 2329, 468, 398, 12, 398, 129, 398,
	1350, 176, 10, 1233, 891, 130, 176, 7, 176, 1869,
	176, 176, 176, 1583, 176, 2219, 176, 2421, 824, 2245,
	2214, 2065, 2189, 2224, 2216, 2212, 176, 176, 121, 2213,
	6, 1783, 2383, 824, 2299, 1672, 740, 1497, 5, 2108,
	1023, 2220, 2107, 54, 2265, 513, 173, 2104, 609, 2248,
	2217, 2278, 2226, 1746, 173, 2106, 2098, 513, 1646, 2211,
	1748, 2249, 2277, 2108, 1645, 1127, 2107, 1326, 2108, 631,
	2271, 2107, 1513, 2268, 1395, 1296, 705, 633, 2273, 2106,
	2279, 1261, 634, 2293, 2106, 1262, 2270, 513, 1053, 2298,
	826, 621, 513, 1259, 2122, 819, 1670, 173, 513, 2124,
	513, 826, 513, 1330, 513, 1461, 513, 1478, 1766, 1296,
	1016, 591, 601, 2305, 613, 2284, 176, 1361, 176, 612,
	1124, 176, 1476, 513, 513, 2283, 846, 1874, 1943, 176,
	2280, 1379, 1723, 1376, 1939, 1124, 2114, 408, 1794, 2312,
	817, 1536, 1528, 1524, 926, 1074, 1002, 1671, 873, 1950,
	513, 1692, 1297, 2317, 2333, 2314, 1066, 2335, 1296, 740,
	1387, 729, 728, 1213, 1320, 176, 1705, 995, 824, 825,
	2332, 2108, 176, 994, 2107, 715, 2392, 864, 863, 1217,
	176, 176, 824, 824, 1890, 1264, 2362, 2106, 2510, 2399,
	2350, 2319, 1263, 2111, 2437, 134, 2351, 2361, 131, 2108,
	176, 2363, 2107, 2258, 2377, 176, 2334, 2262, 133, 2355,
	2374, 2375, 176, 2373, 2372, 2106, 2367, 1125, 2380, 1296,
	2394, 132, 1916, 81, 32, 31, 1263, 2344, 2345, 100,
	99, 98, 2365, 97, 2388, 96, 95, 176, 176, 2389,
	2386, 1264, 2397, 94, 176, 93, 92, 2358, 91, 2409,
	90, 2396, 824, 2407, 89, 1296, 1296, 176, 2410, 88,
	87, 824, 824, 86, 1296, 1296, 494, 85, 722, 1260,
	2412, 764, 84, 83, 509, 1263, 2413, 1075, 506, 80,
	578, 79, 398, 29, 176, 25, 176, 2418, 2419, 176,
	1264, 1124, 104, 24, 1595, 76, 75, 1296, 398, 2444,
	27, 398, 2446, 17, 11, 1608, 21, 2445, 2434, 398,
	1797, 1798, 2450, 59, 398, 60, 58, 176, 57, 56,
	398, 1125, 2327, 2448, 1635, 13, 2460, 52, 51, 2462,
	49, 48, 488, 2461, 176, 47, 1263, 2479, 46, 826,
	176, 2108, 2473, 2343, 2107, 9, 2433, 2477, 103, 2484,
	2481, 2447, 467, 44, 176, 2482, 2483, 2106, 2360, 8,
	825, 1297, 2439, 42, 2493, 2491, 41, 102, 2497, 115,
	1260, 1260, 1263, 1263, 112, 825, 114, 2501, 111, 2500,
	113, 1263, 1263, 768, 770, 948, 949, 1126, 116, 108,
	466, 2509, 2513, 2508, 2478, 2514, 2311, 109, 1530, 1530,
	470, 110, 107, 106, 38, 37, 36, 35, 951, 2,
	467, 1, 0, 0, 1263, 0, 0, 1297, 1642, 0,
	0, 0, 0, 475, 1803, 764, 1299, 0, 0, 471,
	0, 0, 950, 2337, 0, 0, 398, 2406, 1674, 0,
	513, 0, 0, 513, 0, 513, 0, 398, 398, 1298,
	1680, 764, 0, 0, 0, 0, 0, 1296, 470, 1608,
	1299, 472, 1125, 0, 0, 0, 1297, 845, 0, 0,
	0, 0, 0, 849, 1530, 1530, 1530, 1125, 0, 0,
	0, 475, 2436, 1298, 474, 0, 1813, 471, 0, 0,
	0, 1126, 0, 0, 0, 0, 0, 0, 0, 956,
	591, 0, 0, 0, 0, 0, 0, 0, 0, 1299,
	825, 0, 0, 0, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 825, 825, 0, 0, 0, 0,
	826, 0, 1298, 1672, 0, 0, 0, 0, 0, 0,
	0, 0, 474, 0, 0, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1716, 0, 0, 0, 0,
	1814, 971, 0, 0, 2424, 0, 0, 610, 73, 0,
	1299, 398, 398, 398, 1263, 398, 0, 0, 0, 0,
	0, 0, 996, 997, 998, 999, 1000, 0, 0, 2440,
	2441, 2442, 1009, 1298, 825, 398, 473, 0, 0, 0,
	0, 0, 1017, 825, 825, 0, 1299, 1299, 0, 0,
	0, 0, 0, 0, 0, 1299, 1299, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1298,
	1298, 73, 1126, 1125, 0, 972, 0, 0, 1298, 1298,
	0, 0, 0, 0, 0, 0, 0, 1126, 1299, 0,
	0, 476, 0, 0, 473, 0, 0, 0, 1806, 1807,
	1799, 1800, 1801, 1802, 1804, 1805, 1296, 0, 0, 0,
	0, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	826, 0, 0, 1530, 1530, 0, 571, 0, 0, 579,
	0, 0, 0, 0, 826, 826, 0, 0, 0, 1753,
	1754, 0, 0, 0, 0, 741, 73, 0, 0, 476,
	0, 0, 0, 0, 0, 0, 1071, 1071, 0, 0,
	0, 0, 1296, 591, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 959, 960, 952, 953, 954, 955, 957,
	958, 0, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
	1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
	1530, 0, 1530, 0, 826, 0, 0, 0, 0, 0,
	0, 1296, 398, 826, 826, 1820, 1821, 1822, 398, 398,
	0, 0, 398, 1263, 0, 0, 0, 1595, 0, 0,
	1595, 0, 0, 0, 0, 0, 0, 0, 1879, 0,
	0, 0, 0, 1126, 398, 1885, 1886, 0, 1299, 0,
	1608, 0, 0, 1893, 0, 0, 0, 0, 0, 1898,
	1899, 1901, 1903, 1904, 0, 0, 0, 0, 398, 0,
	1911, 1298, 0, 0, 1914, 0, 0, 0, 0, 1263,
	0, 0, 398, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1225, 0, 1225, 0, 513, 591, 591, 398,
	0, 0, 0, 1938, 0, 0, 0, 0, 398, 0,
	1948, 0, 0, 0, 0, 0, 0, 398, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1263, 0,
	1716, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1716, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1377, 0, 1382, 0, 0, 0, 0, 0,
	1389, 0, 0, 0, 0, 0, 0, 0, 398, 0,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
	1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
	1434, 1435, 0, 1441, 0, 1443, 1444, 1445, 1446, 0,
	0, 0, 0, 0, 1987, 1988, 0, 0, 2020, 0,
	0, 0, 1469, 0, 0, 0, 0, 0, 0, 1009,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 0, 0, 0, 0, 0, 0, 1299, 1509, 1510,
	0, 0, 1526, 0, 1538, 1540, 1545, 1548, 1549, 1550,
	1260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1298, 0, 0, 2032, 2033, 2034, 2035, 2036, 2037, 2038,
	2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048,
	2049, 2050, 0, 2054, 1260, 0, 0, 0, 0, 398,
	0, 0, 0, 1299, 0, 1595, 0, 0, 0, 0,
	0, 0, 0, 0, 764, 1595, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1298, 0, 0, 2103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1260, 0, 0, 0, 0, 0, 0,
	39, 0, 1299, 0, 0, 0, 0, 0, 1608, 0,
	1225, 40, 124, 0, 0, 0, 0, 2139, 0, 1530,
	0, 0, 0, 0, 43, 1298, 0, 0, 0, 571,
	0, 0, 0, 0, 0, 398, 398, 0, 126, 0,
	0, 0, 0, 0, 0, 45, 0, 50, 0, 0,
	1005, 0, 1008, 2165, 1260, 0, 0, 0, 0, 1013,
	1530, 0, 0, 2167, 0, 0, 0, 0, 53, 0,
	0, 0, 55, 0, 0, 0, 61, 0, 0, 127,
	0, 0, 0, 62, 0, 117, 63, 0, 0, 0,
	1260, 1260, 0, 0, 0, 0, 0, 0, 0, 1260,
	1260, 0, 0, 0, 0, 2190, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	0, 0, 0, 0, 0, 0, 1530, 0, 0, 0,
	0, 0, 1260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 398,
	0, 0, 764, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1595, 764, 0, 0, 2222, 2223, 1608,
	0, 0, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 1092, 0, 2103, 764, 0, 0, 0, 0, 2256,
	66, 2257, 0, 398, 2259, 2260, 67, 398, 0, 2264,
	0, 0, 0, 0, 0, 0, 0, 2103, 0, 764,
	1642, 0, 2103, 0, 0, 74, 122, 68, 0, 69,
	0, 70, 0, 128, 0, 0, 0, 0, 71, 0,
	0, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 1260, 0, 1797, 1798, 0, 1815, 1816, 1817,
	123, 0, 0, 0, 1737, 1738, 0, 0, 136, 1608,
	1743, 2318, 0, 0, 2320, 0, 129, 0, 0, 0,
	2302, 0, 398, 130, 0, 2103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1762, 0, 0, 0, 121, 1812, 1769, 4,
	2352, 1773, 0, 2103, 0, 0, 73, 0, 398, 0,
	0, 2326, 0, 0, 0, 764, 0, 0, 1787, 0,
	0, 0, 0, 2165, 2165, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 571, 0, 0, 571, 571,
	0, 0, 0, 2385, 0, 0, 0, 0, 1595, 0,
	0, 0, 1009, 0, 0, 1225, 0, 0, 1803, 1545,
	1545, 1545, 0, 0, 0, 0, 948, 949, 0, 978,
	979, 980, 988, 989, 990, 0, 0, 2379, 0, 0,
	2401, 2402, 981, 0, 0, 1071, 0, 398, 0, 951,
	591, 1459, 992, 0, 0, 0, 0, 0, 0, 1818,
	2417, 0, 0, 0, 579, 0, 0, 0, 0, 1008,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 970,
	1813, 0, 0, 967, 0, 0, 0, 2432, 0, 764,
	0, 0, 398, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2103, 0, 0, 0, 0,
	0, 1260, 0, 0, 0, 0, 0, 0, 0, 0,
	2385, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 974, 975, 976, 0, 741, 764, 0, 1941,
	956, 0, 0, 398, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 0, 1814, 0, 0, 2490, 0, 0,
	0, 1959, 985, 993, 0, 73, 0, 1260, 0, 0,
	0, 73, 0, 0, 0, 0, 0, 0, 591, 591,
	0, 991, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 0, 0, 0, 0, 983, 0, 0, 0,
	0, 0, 971, 1981, 0, 0, 0, 0, 1389, 0,
	0, 0, 0, 0, 1985, 0, 1260, 1986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 1991,
	0, 0, 0, 0, 0, 0, 0, 0, 1999, 0,
	0, 0, 1809, 1810, 1811, 0, 2003, 0, 0, 1959,
	0, 1808, 1806, 1807, 1799, 1800, 1801, 1802, 1804, 1805,
	0, 977, 0, 0, 0, 0, 0, 0, 0, 2027,
	0, 0, 0, 2029, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 73,
	0, 0, 0, 986, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2059, 2060, 73, 0,
	0, 0, 0, 0, 73, 2066, 2067, 2068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 39, 0,
	0, 0, 2079, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 984, 43, 0, 962, 963, 969, 968, 964, 965,
	966, 987, 2100, 961, 959, 960, 952, 953, 954, 955,
	957, 958, 0, 0, 0, 50, 0, 0, 0, 0,
	2203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 948, 949, 0, 978, 979, 980, 988,
	989, 990, 0, 0, 61, 0, 0, 0, 73, 981,
	0, 62, 1071, 0, 63, 0, 951, 0, 0, 992,
	0, 591, 0, 0, 0, 0, 0, 0, 948, 949,
	0, 978, 979, 980, 988, 989, 990, 0, 0, 0,
	950, 0, 0, 0, 981, 0, 970, 65, 0, 0,
	967, 951, 0, 0, 992, 0, 0, 2174, 0, 0,
	0, 2177, 2178, 0, 0, 2180, 1797, 1798, 0, 1815,
	1816, 1817, 2182, 0, 2184, 950, 0, 0, 0, 0,
	0, 970, 1994, 0, 0, 967, 0, 0, 1459, 0,
	2191, 0, 0, 0, 0, 0, 0, 0, 973, 974,
	975, 976, 0, 0, 0, 0, 0, 956, 1008, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1812,
	0, 0, 0, 2200, 0, 0, 0, 0, 66, 985,
	993, 0, 0, 973, 974, 975, 976, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 991, 0,
	0, 0, 0, 0, 122, 68, 0, 69, 0, 0,
	0, 0, 0, 983, 985, 993, 0, 0, 0, 971,
	0, 135, 0, 2246, 0, 1358, 0, 0, 464, 0,
	1803, 101, 1008, 991, 0, 0, 441, 1084, 0, 0,
	0, 0, 0, 0, 982, 0, 0, 0, 983, 0,
	137, 0, 0, 39, 971, 0, 0, 39, 0, 0,
	0, 0, 0, 0, 40, 0, 741, 0, 40, 0,
	0, 1818, 741, 741, 0, 0, 741, 43, 977, 982,
	0, 43, 0, 0, 0, 0, 136, 0, 0, 0,
	2294, 2295, 1813, 972, 129, 0, 0, 0, 0, 0,
	50, 130, 0, 0, 50, 0, 0, 0, 0, 0,
	986, 0, 0, 977, 0, 0, 0, 0, 0, 73,
	0, 2307, 0, 0, 121, 73, 0, 2310, 972, 61,
	0, 0, 0, 61, 0, 0, 62, 0, 0, 63,
	62, 0, 0, 63, 0, 986, 0, 0, 0, 73,
	0, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 0, 1814, 0, 0, 0,
	0, 2342, 65, 0, 0, 0, 65, 0, 984, 0,
	0, 962, 963, 969, 968, 964, 965, 966, 987, 0,
	961, 959, 960, 952, 953, 954, 955, 957, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 1839, 0, 0,
	0, 0, 0, 984, 0, 0, 962, 963, 969, 968,
	964, 965, 966, 987, 0, 961, 959, 960, 952, 953,
	954, 955, 957, 958, 0, 0, 0, 0, 0, 0,
	0, 0, 1838, 2391, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 1809, 1810, 1811, 66, 0, 0,
	0, 0, 0, 1808, 1806, 1807, 1799, 1800, 1801, 1802,
	1804, 1805, 0, 0, 0, 0, 0, 0, 0, 122,
	68, 0, 69, 122, 68, 0, 69, 591, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	135, 0, 0, 464, 0, 0, 101, 464, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2459, 2459, 0, 0, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 0, 0, 0, 2474, 0, 0, 0,
	0, 136, 0, 741, 0, 136, 0, 0, 0, 129,
	0, 0, 0, 129, 2459, 0, 130, 0, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 580, 0, 175, 0, 121,
	0, 0, 0, 442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	2459, 335, 0, 0, 0, 0, 181, 182, 183, 336,
	337, 338, 339, 184, 340, 341, 0, 185, 342, 343,
	186, 187, 0, 0, 344, 345, 346, 0, 188, 347,
	741, 0, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 0, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 399, 201, 348,
	202, 349, 350, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 351, 209,
	211, 210, 212, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 354, 355, 356, 0, 215, 0,
	216, 0, 0, 0, 0, 217, 357, 0, 358, 0,
	0, 218, 219, 0, 0, 220, 221, 359, 360, 0,
	0, 361, 225, 0, 222, 0, 0, 223, 362, 224,
	363, 364, 365, 366, 367, 0, 368, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	369, 0, 234, 741, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 370, 240, 0, 242, 243, 245,
	244, 0, 0, 0, 371, 246, 372, 247, 248, 0,
	249, 0, 744, 250, 0, 0, 251, 373, 0, 252,
	0, 374, 253, 254, 255, 256, 257, 0, 258, 375,
	259, 376, 260, 0, 261, 262, 263, 264, 265, 377,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 73, 281,
	282, 378, 283, 0, 287, 288, 289, 290, 291, 135,
	293, 379, 292, 294, 295, 0, 296, 284, 285, 297,
	0, 298, 380, 381, 299, 0, 306, 300, 301, 286,
	302, 305, 382, 303, 304, 383, 0, 307, 137, 308,
	309, 310, 311, 312, 313, 314, 0, 384, 385, 386,
	0, 0, 315, 316, 387, 388, 0, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 0, 325, 0,
	389, 326, 327, 328, 827, 391, 0, 0, 329, 0,
	0, 0, 129, 330, 331, 332, 333, 334, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	738, 0, 1094, 0, 0, 0, 0, 0, 1123, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2368, 178, 179, 1128, 180, 1129, 1130,
	1131, 1132, 335, 1133, 1134, 1135, 1136, 181, 182, 183,
	336, 337, 338, 339, 184, 340, 341, 1137, 185, 342,
	343, 186, 187, 1138, 1139, 344, 345, 346, 1140, 188,
	347, 1141, 828, 1142, 189, 190, 191, 0, 192, 1143,
	193, 0, 194, 195, 1144, 691, 196, 197, 198, 1145,
	1146, 1148, 1147, 1149, 1150, 1151, 199, 200, 399, 201,
	348, 202, 349, 350, 1152, 203, 1153, 204, 1154, 205,
	1155, 1156, 206, 207, 1157, 208, 1158, 1008, 1159, 351,
	209, 211, 210, 212, 352, 353, 1160, 692, 1161, 0,
	0, 0, 0, 213, 214, 354, 355, 356, 0, 215,
	1162, 216, 1163, 1164, 693, 1165, 217, 357, 1166, 358,
	1167, 0, 218, 219, 0, 0, 220, 221, 359, 360,
	695, 1168, 361, 225, 1169, 222, 1170, 694, 223, 362,
	224, 363, 364, 365, 366, 367, 1171, 368, 1172, 696,
	226, 227, 228, 697, 229, 230, 231, 1173, 233, 232,
	1174, 369, 698, 234, 699, 1175, 235, 1176, 1177, 236,
	0, 237, 238, 239, 241, 370, 240, 700, 242, 243,
	245, 244, 1178, 1179, 1180, 371, 246, 372, 247, 248,
	1181, 249, 1182, 1183, 250, 1184, 1185, 251, 373, 701,
	252, 702, 374, 253, 254, 255, 256, 257, 1186, 258,
	375, 259, 376, 260, 1187, 261, 262, 263, 264, 265,
	377, 266, 267, 1188, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 1189, 280, 703,
	281, 282, 378, 283, 0, 287, 288, 289, 290, 291,
	1190, 293, 379, 292, 294, 295, 1191, 296, 284, 285,
	297, 704, 298, 380, 381, 299, 1192, 306, 300, 301,
	286, 302, 305, 382, 303, 304, 383, 1193, 307, 1194,
	308, 309, 310, 311, 312, 313, 314, 1195, 384, 385,
	386, 1196, 1197, 315, 316, 387, 388, 1198, 317, 318,
	319, 320, 1199, 1200, 321, 322, 323, 324, 1201, 325,
	1202, 389, 326, 327, 328, 390, 391, 1203, 1204, 329,
	1205, 1206, 1207, 1208, 330, 331, 332, 333, 334, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1123, 0, 0, 0, 0,
	0, 1588, 0, 0, 0, 0, 0, 0, 0, 0,
	1589, 178, 179, 1128, 180, 1129, 1130, 1131, 1132, 335,
	1133, 1134, 1135, 1136, 181, 182, 183, 336, 337, 338,
	339, 184, 340, 341, 1137, 185, 342, 343, 186, 187,
	1138, 1139, 344, 345, 346, 1140, 188, 347, 1141, 828,
	1142, 189, 190, 191, 0, 192, 1143, 193, 0, 194,
	195, 1144, 691, 196, 197, 198, 1145, 1146, 1148, 1147,
	1149, 1150, 1151, 199, 200, 399, 201, 348, 202, 349,
	350, 1152, 203, 1153, 204, 1154, 205, 1155, 1156, 206,
	207, 1157, 208, 1158, 0, 1159, 351, 209, 211, 210,
	212, 352, 353, 1160, 692, 1161, 0, 0, 0, 0,
	213, 214, 354, 355, 356, 0, 215, 1162, 216, 1163,
	1164, 693, 1165, 217, 357, 1166, 358, 1167, 0, 218,
	219, 0, 0, 220, 221, 359, 360, 695, 1168, 361,
	225, 1169, 222, 1170, 694, 223, 362, 224, 363, 364,
	365, 366, 367, 1171, 368, 1172, 696, 226, 227, 228,
	697, 229, 230, 231, 1173, 233, 232, 1174, 369, 698,
	234, 699, 1175, 235, 1176, 1177, 236, 0, 237, 238,
	239, 241, 370, 240, 700, 242, 243, 245, 244, 1178,
	1179, 1180, 371, 246, 372, 247, 248, 1181, 249, 1182,
	1183, 250, 1184, 1185, 251, 373, 701, 252, 702, 374,
	253, 254, 255, 256, 257, 1186, 258, 375, 259, 376,
	260, 1187, 261, 262, 263, 264, 265, 377, 266, 267,
	1188, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 1189, 280, 703, 281, 282, 378,
	283, 0, 287, 288, 289, 290, 291, 1190, 293, 379,
	292, 294, 295, 1191, 296, 284, 285, 297, 704, 298,
	380, 381, 299, 1192, 306, 300, 301, 286, 302, 305,
	382, 303, 304, 383, 1193, 307, 1194, 308, 309, 310,
	311, 312, 313, 314, 1195, 384, 385, 386, 1196, 1197,
	315, 316, 387, 388, 1198, 317, 318, 319, 320, 1199,
	1200, 321, 322, 323, 324, 1201, 325, 1202, 389, 326,
	327, 328, 390, 391, 1203, 1204, 329, 1205, 1206, 1207,
	1208, 330, 331, 332, 333, 334, 0, 0, 0, 0,
	0, 0, 0, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2218, 178,
	179, 1128, 180, 1129, 1130, 1131, 1132, 335, 1133, 1134,
	1135, 1136, 181, 182, 183, 336, 337, 338, 339, 184,
	340, 341, 1137, 185, 342, 343, 186, 187, 1138, 1139,
	344, 345, 346, 1140, 188, 347, 1141, 828, 1142, 189,
	190, 191, 0, 192, 1143, 193, 0, 194, 195, 1144,
	691, 196, 197, 198, 1145, 1146, 1148, 1147, 1149, 1150,
	1151, 199, 200, 399, 201, 348, 202, 349, 350, 1152,
	203, 1153, 204, 1154, 205, 1155, 1156, 206, 207, 1157,
	208, 1158, 0, 1159, 351, 209, 211, 210, 212, 352,
	353, 1160, 692, 1161, 0, 0, 0, 0, 213, 214,
	354, 355, 356, 0, 215, 1162, 216, 1163, 1164, 693,
	1165, 217, 357, 1166, 358, 1167, 0, 218, 219, 0,
	0, 220, 221, 359, 360, 695, 1168, 361, 225, 1169,
	222, 1170, 694, 223, 362, 224, 363, 364, 365, 366,
	367, 1171, 368, 1172, 696, 226, 227, 228, 697, 229,
	230, 231, 1173, 233, 232, 1174, 369, 698, 234, 699,
	1175, 235, 1176, 1177, 236, 0, 237, 238, 239, 241,
	370, 240, 700, 242, 243, 245, 244, 1178, 1179, 1180,
	371, 246, 372, 247, 248, 1181, 249, 1182, 1183, 250,
	1184, 1185, 251, 373, 701, 252, 702, 374, 253, 254,
	255, 256, 257, 1186, 258, 375, 259, 376, 260, 1187,
	261, 262, 263, 264, 265, 377, 266, 267, 1188, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 1189, 280, 703, 281, 282, 378, 283, 0,
	287, 288, 289, 290, 291, 1190, 293, 379, 292, 294,
	295, 1191, 296, 284, 285, 297, 704, 298, 380, 381,
	299, 1192, 306, 300, 301, 286, 302, 305, 382, 303,
	304, 383, 1193, 307, 1194, 308, 309, 310, 311, 312,
	313, 314, 1195, 384, 385, 386, 1196, 1197, 315, 316,
	387, 388, 1198, 317, 318, 319, 320, 1199, 1200, 321,
	322, 323, 324, 1201, 325, 1202, 389, 326, 327, 328,
	390, 391, 1203, 1204, 329, 1205, 1206, 1207, 1208, 330,
	331, 332, 333, 334, 0, 0, 1123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1122, 178, 179, 1128, 180, 1129, 1130, 1131, 1132,
	335, 1133, 1134, 1135, 1136, 181, 182, 183, 336, 337,
	338, 339, 184, 340, 341, 1137, 185, 342, 343, 186,
	187, 1138, 1139, 344, 345, 346, 1140, 188, 347, 1141,
	828, 1142, 189, 190, 191, 0, 192, 1143, 193, 0,
	194, 195, 1144, 691, 196, 197, 198, 1145, 1146, 1148,
	1147, 1149, 1150, 1151, 199, 200, 399, 201, 348, 202,
	349, 350, 1152, 203, 1153, 204, 1154, 205, 1155, 1156,
	206, 207, 1157, 208, 1158, 0, 1159, 351, 209, 211,
	210, 212, 352, 353, 1160, 692, 1161, 0, 0, 0,
	0, 213, 214, 354, 355, 356, 0, 215, 1162, 216,
	1163, 1164, 693, 1165, 217, 357, 1166, 358, 1167, 0,
	218, 219, 0, 0, 220, 221, 359, 360, 695, 1168,
	361, 225, 1169, 222, 1170, 694, 223, 362, 224, 363,
	364, 365, 366, 367, 1171, 368, 1172, 696, 226, 227,
	228, 697, 229, 230, 231, 1173, 233, 232, 1174, 369,
	698, 234, 699, 1175, 235, 1176, 1177, 236, 0, 237,
	238, 239, 241, 370, 240, 700, 242, 243, 245, 244,
	1178, 1179, 1180, 371, 246, 372, 247, 248, 1181, 249,
	1182, 1183, 250, 1184, 1185, 251, 373, 701, 252, 702,
	374, 253, 254, 255, 256, 257, 1186, 258, 375, 259,
	376, 260, 1187, 261, 262, 263, 264, 265, 377, 266,
	267, 1188, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 1189, 280, 703, 281, 282,
	378, 283, 0, 287, 288, 289, 290, 291, 1190, 293,
	379, 292, 294, 295, 1191, 296, 284, 285, 297, 704,
	298, 380, 381, 299, 1192, 306, 300, 301, 286, 302,
	305, 382, 303, 304, 383, 1193, 307, 1194, 308, 309,
	310, 311, 312, 313, 314, 1195, 384, 385, 386, 1196,
	1197, 315, 316, 387, 388, 1198, 317, 318, 319, 320,
	1199, 1200, 321, 322, 323, 324, 1201, 325, 1202, 389,
	326, 327, 328, 390, 391, 1203, 1204, 329, 1205, 1206,
	1207, 1208, 330, 331, 332, 333, 334, 1487, 0, 629,
	618, 619, 616, 617, 608, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 1484, 180, 0,
	0, 0, 0, 646, 611, 0, 0, 0, 181, 182,
	183, 336, 661, 338, 662, 184, 663, 664, 0, 185,
	342, 343, 186, 187, 614, 645, 665, 666, 346, 0,
	188, 657, 0, 637, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 691, 196, 197, 198,
	0, 638, 639, 641, 0, 640, 642, 199, 200, 399,
	201, 667, 202, 668, 669, 0, 203, 0, 204, 0,
	205, 1485, 0, 660, 207, 0, 208, 0, 0, 0,
	602, 209, 211, 210, 212, 647, 648, 625, 692, 0,
	0, 0, 0, 0, 213, 214, 670, 671, 672, 0,
	215, 0, 216, 0, 0, 693, 0, 217, 658, 0,
	358, 0, 0, 218, 219, 0, 0, 220, 221, 654,
	656, 695, 0, 361, 225, 0, 222, 0, 694, 223,
	673, 224, 674, 675, 676, 677, 678, 0, 636, 0,
	696, 226, 227, 228, 697, 229, 230, 231, 0, 233,
	232, 0, 659, 698, 234, 699, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 370, 240, 700, 242,
	243, 245, 244, 597, 0, 626, 655, 246, 679, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 373,
	701, 252, 702, 649, 253, 254, 255, 256, 257, 0,
	258, 650, 259, 376, 260, 0, 261, 262, 263, 264,
	265, 680, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	703, 281, 282, 603, 283, 0, 287, 288, 289, 290,
	291, 0, 293, 379, 292, 294, 295, 643, 296, 284,
	285, 297, 704, 298, 681, 381, 299, 0, 306, 300,
	301, 286, 302, 305, 682, 303, 304, 651, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 384,
	683, 684, 0, 0, 315, 316, 652, 653, 624, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 644,
	325, 0, 389, 326, 327, 328, 390, 685, 1483, 0,
	329, 0, 0, 0, 0, 330, 331, 332, 333, 334,
	598, 0, 629, 618, 619, 616, 617, 608, 0, 0,
	596, 0, 0, 0, 0, 594, 595, 1486, 178, 179,
	0, 180, 0, 0, 604, 1481, 646, 611, 0, 0,
	607, 181, 182, 183, 336, 661, 338, 662, 184, 663,
	664, 0, 185, 342, 343, 186, 187, 614, 645, 665,
	666, 346, 0, 188, 657, 0, 637, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 691,
	196, 197, 198, 0, 638, 639, 641, 0, 640, 642,
	199, 200, 399, 201, 667, 202, 668, 669, 592, 203,
	0, 204, 0, 205, 0, 0, 660, 207, 0, 208,
	0, 0, 0, 602, 209, 211, 210, 212, 647, 648,
	625, 692, 0, 0, 0, 0, 0, 213, 214, 670,
	671, 672, 0, 215, 0, 216, 0, 0, 693, 0,
	217, 658, 0, 358, 0, 0, 218, 219, 0, 0,
	220, 221, 654, 656, 695, 0, 361, 225, 0, 222,
	0, 694, 223, 673, 224, 674, 675, 676, 677, 678,
	0, 636, 0, 696, 226, 227, 228, 697, 229, 230,
	231, 0, 233, 232, 0, 659, 698, 234, 699, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 370,
	240, 700, 242, 243, 245, 244, 597, 0, 626, 655,
	246, 679, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 373, 701, 252, 702, 649, 253, 254, 255,
	256, 257, 0, 258, 650, 259, 376, 260, 0, 261,
	262, 263, 264, 265, 680, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 703, 281, 282, 603, 283, 0, 287,
	288, 289, 290, 291, 135, 293, 379, 292, 294, 295,
	643, 296, 284, 285, 297, 704, 298, 681, 381, 299,
	0, 306, 300, 301, 286, 302, 305, 682, 303, 304,
	651, 0, 307, 137, 308, 309, 310, 311, 312, 313,
	314, 0, 384, 683, 684, 0, 0, 315, 316, 652,
	653, 624, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 644, 325, 0, 389, 326, 327, 328, 827,
	685, 0, 0, 329, 0, 0, 0, 129, 330, 331,
	332, 333, 334, 598, 130, 580, 0, 629, 618, 619,
	616, 617, 608, 596, 0, 0, 0, 0, 594, 595,
	0, 0, 0, 178, 179, 0, 180, 1011, 0, 0,
	0, 646, 611, 607, 0, 0, 181, 182, 183, 336,
	661, 338, 662, 184, 663, 664, 0, 185, 342, 343,
	186, 187, 614, 645, 665, 666, 346, 0, 188, 657,
	0, 637, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 691, 196, 197, 198, 0, 638,
	639, 641, 0, 640, 642, 199, 200, 399, 201, 667,
	202, 668, 669, 0, 203, 0, 204, 0, 205, 0,
	0, 660, 207, 0, 208, 0, 0, 0, 602, 209,
	211, 210, 212, 647, 648, 625, 692, 0, 0, 0,
	0, 0, 213, 214, 670, 671, 672, 0, 215, 0,
	216, 0, 0, 693, 0, 217, 658, 0, 358, 0,
	0, 218, 219, 0, 0, 220, 221, 654, 656, 695,
	0, 361, 225, 0, 222, 0, 694, 223, 673, 224,
	674, 675, 676, 677, 678, 0, 636, 0, 696, 226,
	227, 228, 697, 229, 230, 231, 0, 233, 232, 0,
	659, 698, 234, 699, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 370, 240, 700, 242, 243, 245,
	244, 597, 0, 626, 655, 246, 679, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 373, 701, 252,
	702, 649, 253, 254, 255, 256, 257, 0, 258, 650,
	259, 376, 260, 0, 261, 262, 263, 264, 265, 680,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 703, 281,
	282, 603, 283, 0, 287, 288, 289, 290, 291, 135,
	293, 379, 292, 294, 295, 643, 296, 284, 285, 297,
	704, 298, 681, 381, 299, 0, 306, 300, 301, 286,
	302, 305, 682, 303, 304, 651, 0, 307, 137, 308,
	309, 310, 311, 312, 313, 314, 0, 384, 683, 684,
	0, 0, 315, 316, 652, 653, 624, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 644, 325, 0,
	389, 326, 327, 328, 827, 685, 0, 0, 329, 0,
	0, 0, 129, 330, 331, 332, 333, 334, 598, 130,
	629, 618, 619, 616, 617, 608, 0, 0, 596, 0,
	0, 0, 0, 594, 595, 0, 178, 179, 0, 180,
	0, 0, 1011, 0, 646, 611, 0, 0, 607, 181,
	182, 183, 336, 661, 338, 662, 184, 663, 664, 0,
	185, 342, 343, 186, 187, 614, 645, 665, 666, 346,
	0, 188, 657, 0, 637, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 691, 196, 197,
	198, 0, 638, 639, 641, 0, 640, 642, 199, 200,
	399, 201, 667, 202, 668, 669, 0, 203, 0, 204,
	0, 205, 0, 0, 660, 207, 0, 208, 0, 0,
	0, 602, 209, 211, 210, 212, 647, 648, 625, 692,
	0, 0, 0, 0, 0, 213, 214, 670, 671, 672,
	0, 215, 0, 216, 0, 0, 693, 0, 217, 658,
	0, 358, 0, 0, 218, 219, 0, 0, 220, 221,
	654, 656, 695, 0, 361, 225, 0, 222, 0, 694,
	223, 673, 224, 674, 675, 676, 677, 678, 0, 636,
	0, 696, 226, 227, 228, 697, 229, 230, 231, 0,
	233, 232, 0, 659, 698, 234, 699, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 370, 240, 700,
	242, 243, 245, 244, 597, 0, 626, 655, 246, 679,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	373, 701, 252, 702, 649, 253, 254, 255, 256, 257,
	0, 258, 650, 259, 376, 260, 0, 261, 262, 263,
	264, 265, 680, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 703, 281, 282, 603, 283, 0, 287, 288, 289,
	290, 291, 135, 293, 379, 292, 294, 295, 643, 296,
	284, 285, 297, 704, 298, 681, 381, 299, 0, 306,
	300, 301, 286, 302, 305, 682, 303, 304, 651, 0,
	307, 137, 308, 309, 310, 311, 312, 313, 314, 0,
	384, 683, 684, 0, 0, 315, 316, 652, 653, 624,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	644, 325, 0, 389, 326, 327, 328, 827, 685, 0,
	0, 329, 0, 0, 0, 129, 330, 331, 332, 333,
	334, 598, 130, 629, 618, 619, 616, 617, 608, 0,
	0, 596, 0, 0, 0, 0, 594, 595, 0, 178,
	179, 0, 180, 0, 0, 1011, 0, 646, 611, 0,
	0, 607, 181, 182, 183, 336, 661, 338, 662, 184,
	663, 664, 1541, 185, 342, 343, 186, 187, 614, 645,
	665, 666, 346, 0, 188, 657, 0, 637, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	691, 196, 197, 198, 0, 638, 639, 641, 0, 640,
	642, 199, 200, 399, 201, 667, 202, 668, 669, 0,
	203, 0, 204, 0, 205, 0, 0, 660, 207, 0,
	208, 0, 0, 0, 602, 209, 211, 210, 212, 647,
	648, 625, 692, 0, 0, 0, 0, 0, 213, 214,
	670, 671, 672, 0, 215, 0, 216, 0, 1546, 693,
	0, 217, 658, 0, 358, 0, 0, 218, 219, 0,
	0, 220, 221, 654, 656, 695, 0, 361, 225, 0,
	222, 0, 694, 223, 673, 224, 674, 675, 676, 677,
	678, 0, 636, 0, 696, 226, 227, 228, 697, 229,
	230, 231, 0, 233, 232, 1542, 659, 698, 234, 699,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	370, 240, 700, 242, 243, 245, 244, 597, 0, 626,
	655, 246, 679, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 373, 701, 252, 702, 649, 253, 254,
	255, 256, 257, 0, 258, 650, 259, 376, 260, 0,
	261, 262, 263, 264, 265, 680, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 703, 281, 282, 603, 283, 0,
	287, 288, 289, 290, 291, 0, 293, 379, 292, 294,
	295, 643, 296, 284, 285, 297, 704, 298, 681, 381,
	299, 0, 306, 300, 301, 286, 302, 305, 682, 303,
	304, 651, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 384, 683, 684, 0, 1543, 315, 316,
	652, 653, 624, 317, 318, 319, 320, 0, 0, 321,
	322, 323, 324, 644, 325, 0, 389, 326, 327, 328,
	390, 685, 0, 0, 329, 0, 0, 0, 0, 330,
	331, 332, 333, 334, 598, 588, 0, 629, 618, 619,
	616, 617, 608, 0, 596, 0, 0, 0, 0, 594,
	595, 0, 0, 178, 179, 0, 180, 0, 604, 0,
	0, 646, 611, 0, 607, 0, 181, 182, 183, 336,
	661, 338, 662, 184, 663, 664, 0, 185, 342, 343,
	186, 187, 614, 645, 665, 666, 346, 0, 188, 657,
	0, 637, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 691, 196, 197, 198, 0, 638,
	639, 641, 0, 640, 642, 199, 200, 399, 201, 667,
	202, 668, 669, 592, 203, 0, 204, 0, 205, 0,
	0, 660, 207, 0, 208, 0, 0, 0, 602, 209,
	211, 210, 212, 647, 648, 625, 692, 0, 0, 0,
	0, 0, 213, 214, 670, 671, 672, 0, 215, 0,
	216, 0, 0, 693, 0, 217, 658, 0, 358, 0,
	0, 218, 219, 0, 0, 220, 221, 654, 656, 695,
	0, 361, 225, 0, 222, 0, 694, 223, 673, 224,
	674, 675, 676, 677, 678, 0, 636, 0, 696, 226,
	227, 228, 697, 229, 230, 231, 0, 233, 232, 0,
	659, 698, 234, 699, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 370, 240, 700, 242, 243, 245,
	244, 597, 0, 626, 655, 246, 679, 247, 248, 0,
	249, 590, 0, 250, 0, 0, 251, 373, 701, 252,
	702, 649, 253, 254, 255, 256, 257, 0, 258, 650,
	259, 376, 260, 0, 261, 262, 263, 264, 265, 680,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 703, 281,
	282, 603, 283, 0, 287, 288, 289, 290, 291, 0,
	293, 379, 292, 294, 295, 643, 296, 284, 285, 297,
	704, 298, 681, 381, 299, 0, 306, 300, 301, 286,
	302, 305, 682, 303, 304, 651, 0, 307, 0, 308,
	309, 310, 311, 312, 313, 314, 0, 384, 683, 684,
	0, 0, 315, 316, 652, 653, 624, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 644, 325, 0,
	389, 326, 327, 328, 390, 685, 0, 0, 329, 0,
	0, 0, 0, 330, 331, 332, 333, 334, 598, 0,
	629, 618, 619, 616, 617, 608, 0, 0, 596, 0,
	0, 0, 0, 594, 595, 0, 178, 179, 0, 180,
	0, 0, 604, 0, 646, 611, 0, 0, 607, 181,
	182, 183, 336, 661, 338, 662, 184, 663, 664, 0,
	185, 342, 343, 186, 187, 614, 645, 665, 666, 346,
	0, 188, 657, 0, 637, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 691, 196, 197,
	198, 0, 638, 639, 641, 0, 640, 642, 199, 200,
	399, 201, 667, 202, 668, 669, 0, 203, 0, 204,
	0, 205, 0, 0, 660, 207, 0, 208, 0, 0,
	0, 602, 209, 211, 210, 212, 647, 648, 625, 692,
	0, 0, 0, 0, 0, 213, 214, 670, 671, 672,
	0, 215, 0, 216, 0, 0, 693, 0, 217, 658,
	0, 358, 0, 0, 218, 219, 0, 0, 220, 221,
	654, 656, 695, 0, 361, 225, 0, 222, 0, 694,
	223, 673, 224, 674, 675, 676, 677, 678, 0, 636,
	0, 696, 226, 227, 228, 697, 229, 230, 231, 0,
	233, 232, 0, 659, 698, 234, 699, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 370, 240, 700,
	242, 243, 245, 244, 597, 2148, 626, 655, 246, 679,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	373, 701, 252, 702, 649, 253, 254, 255, 256, 257,
	0, 258, 650, 259, 376, 260, 0, 261, 262, 263,
	264, 265, 680, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 703, 281, 282, 603, 283, 0, 287, 288, 289,
	290, 291, 0, 293, 379, 292, 294, 295, 643, 296,
	284, 285, 297, 704, 298, 681, 381, 299, 0, 306,
	300, 301, 286, 302, 305, 682, 303, 304, 651, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	384, 683, 684, 0, 0, 315, 316, 652, 653, 624,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	644, 325, 0, 389, 326, 327, 328, 390, 685, 0,
	0, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 598, 0, 629, 618, 619, 616, 617, 608, 0,
	0, 596, 0, 0, 0, 0, 594, 595, 1072, 178,
	179, 0, 180, 0, 0, 604, 0, 646, 611, 0,
	0, 607, 181, 182, 183, 336, 661, 338, 662, 184,
	663, 664, 0, 185, 342, 343, 186, 187, 614, 645,
	665, 666, 346, 0, 188, 657, 0, 637, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	691, 196, 197, 198, 0, 638, 639, 641, 0, 640,
	642, 199, 200, 399, 201, 667, 202, 668, 669, 0,
	203, 0, 204, 0, 205, 0, 0, 660, 207, 0,
	208, 0, 0, 0, 602, 209, 211, 210, 212, 647,
	648, 625, 692, 0, 0, 0, 0, 0, 213, 214,
	670, 671, 672, 0, 215, 0, 216, 0, 0, 693,
	0, 217, 658, 0, 358, 0, 0, 218, 219, 0,
	0, 220, 221, 654, 656, 695, 0, 361, 225, 1391,
	222, 0, 694, 223, 673, 224, 674, 675, 676, 677,
	678, 0, 636, 0, 696, 226, 227, 228, 697, 229,
	230, 231, 0, 233, 232, 0, 659, 698, 234, 699,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	370, 240, 700, 242, 243, 245, 244, 597, 0, 626,
	655, 246, 679, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 373, 701, 252, 702, 649, 253, 254,
	255, 256, 257, 0, 258, 650, 259, 376, 260, 1390,
	261, 262, 263, 264, 265, 680, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 703, 281, 282, 603, 283, 0,
	287, 288, 289, 290, 291, 0, 293, 379, 292, 294,
	295, 643, 296, 284, 285, 297, 704, 298, 681, 381,
	299, 0, 306, 300, 301, 286, 302, 305, 682, 303,
	304, 651, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 384, 683, 684, 0, 0, 315, 316,
	652, 653, 624, 317, 318, 319, 320, 0, 0, 321,
	322, 323, 324, 644, 325, 0, 389, 326, 327, 328,
	390, 685, 0, 0, 329, 0, 0, 0, 0, 330,
	331, 332, 333, 334, 598, 0, 629, 618, 619, 616,
	617, 608, 0, 0, 596, 0, 0, 0, 0, 594,
	595, 0, 178, 179, 0, 180, 0, 0, 604, 0,
	646, 611, 0, 0, 607, 181, 182, 183, 336, 661,
	338, 662, 184, 663, 664, 0, 185, 342, 343, 186,
	187, 614, 645, 665, 666, 346, 0, 188, 657, 0,
	637, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 691, 196, 197, 198, 0, 638, 639,
	641, 0, 640, 642, 199, 200, 399, 201, 667, 202,
	668, 669, 592, 203, 0, 204, 0, 205, 0, 0,
	660, 207, 0, 208, 0, 0, 0, 602, 209, 211,
	210, 212, 647, 648, 625, 692, 0, 0, 0, 0,
	0, 213, 214, 670, 671, 672, 0, 215, 0, 216,
	0, 0, 693, 0, 217, 658, 0, 358, 0, 0,
	218, 219, 0, 0, 220, 221, 654, 656, 695, 0,
	361, 225, 0, 222, 0, 694, 223, 673, 224, 674,
	675, 676, 677, 678, 0, 636, 0, 696, 226, 227,
	228, 697, 229, 230, 231, 0, 233, 232, 0, 659,
	698, 234, 699, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 370, 240, 700, 242, 243, 245, 244,
	597, 0, 626, 655, 246, 679, 247, 248, 0, 249,
	590, 0, 250, 0, 0, 251, 373, 701, 252, 702,
	649, 253, 254, 255, 256, 257, 0, 258, 650, 259,
	376, 260, 0, 261, 262, 263, 264, 265, 680, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 703, 281, 282,
	603, 283, 0, 287, 288, 289, 290, 291, 0, 293,
	379, 292, 294, 295, 643, 296, 284, 285, 297, 704,
	298, 681, 381, 299, 0, 306, 300, 301, 286, 302,
	305, 682, 303, 304, 651, 0, 307, 0, 308, 309,
	310, 311, 312, 313, 314, 0, 384, 683, 684, 0,
	0, 315, 316, 652, 653, 624, 317, 318, 319, 320,
	0, 0, 321, 322, 323, 324, 644, 325, 0, 389,
	326, 327, 328, 390, 685, 0, 0, 329, 0, 0,
	0, 0, 330, 331, 332, 333, 334, 598, 0, 629,
	618, 619, 616, 617, 608, 0, 0, 596, 0, 0,
	0, 0, 594, 595, 0, 178, 179, 0, 180, 0,
	0, 604, 0, 646, 611, 0, 0, 607, 181, 182,
	183, 336, 661, 338, 662, 184, 663, 664, 0, 185,
	342, 343, 186, 187, 614, 645, 665, 666, 346, 0,
	188, 657, 0, 637, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 691, 196, 197, 198,
	0, 638, 639, 641, 0, 640, 642, 199, 200, 399,
	201, 667, 202, 668, 669, 592, 203, 0, 204, 0,
	205, 0, 0, 660, 207, 0, 208, 0, 0, 0,
	602, 209, 211, 210, 212, 647, 648, 625, 692, 0,
	0, 0, 0, 0, 213, 214, 670, 671, 672, 0,
	215, 0, 216, 0, 0, 693, 0, 217, 658, 0,
	358, 0, 0, 218, 219, 0, 0, 220, 221, 654,
	656, 695, 0, 361, 225, 0, 222, 0, 694, 223,
	673, 224, 674, 675, 676, 677, 678, 0, 636, 0,
	696, 226, 227, 228, 697, 229, 230, 231, 0, 233,
	232, 0, 659, 698, 234, 699, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 370, 240, 700, 242,
	243, 245, 244, 597, 0, 626, 655, 246, 679, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 373,
	701, 252, 702, 649, 253, 254, 255, 256, 257, 0,
	258, 650, 259, 376, 260, 0, 261, 262, 263, 264,
	265, 680, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	703, 281, 282, 603, 283, 0, 287, 288, 289, 290,
	291, 0, 293, 379, 292, 294, 295, 643, 296, 284,
	285, 297, 704, 298, 681, 381, 299, 0, 306, 300,
	301, 286, 302, 305, 682, 303, 304, 651, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 384,
	683, 684, 0, 0, 315, 316, 652, 653, 624, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 644,
	325, 0, 389, 326, 327, 328, 390, 685, 0, 0,
	329, 0, 0, 0, 0, 330, 331, 332, 333, 334,
	598, 0, 629, 618, 619, 616, 617, 608, 0, 0,
	596, 0, 0, 0, 0, 594, 595, 0, 178, 179,
	0, 180, 0, 0, 604, 0, 646, 611, 0, 0,
	607, 181, 182, 183, 336, 661, 338, 662, 184, 663,
	664, 0, 185, 342, 343, 186, 187, 614, 645, 665,
	666, 346, 0, 188, 657, 0, 637, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 691,
	196, 197, 198, 0, 638, 639, 641, 0, 640, 642,
	199, 200, 399, 201, 667, 202, 668, 669, 0, 203,
	0, 204, 0, 205, 0, 0, 660, 207, 0, 208,
	0, 0, 0, 602, 209, 211, 210, 212, 647, 648,
	625, 692, 0, 0, 0, 0, 0, 213, 214, 670,
	671, 672, 0, 215, 0, 216, 0, 0, 693, 0,
	217, 658, 0, 358, 0, 0, 218, 219, 0, 0,
	220, 221, 654, 656, 695, 0, 361, 225, 0, 222,
	0, 694, 223, 673, 224, 674, 675, 676, 677, 678,
	0, 636, 0, 696, 226, 227, 228, 697, 229, 230,
	231, 0, 233, 232, 0, 659, 698, 234, 699, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 370,
	240, 700, 242, 243, 245, 244, 597, 0, 626, 655,
	246, 679, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 373, 701, 252, 702, 649, 253, 254, 255,
	256, 257, 0, 258, 650, 259, 376, 260, 0, 261,
	262, 263, 264, 265, 680, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 703, 281, 282, 603, 283, 0, 287,
	288, 289, 290, 291, 0, 293, 379, 292, 294, 295,
	643, 296, 284, 285, 297, 704, 298, 681, 381, 299,
	0, 306, 300, 301, 286, 302, 305, 682, 303, 304,
	651, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 384, 683, 684, 0, 0, 315, 316, 652,
	653, 624, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 644, 325, 0, 389, 326, 327, 328, 390,
	685, 2006, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 598, 0, 629, 618, 619, 616, 617,
	608, 0, 0, 596, 0, 0, 0, 0, 594, 595,
	0, 178, 179, 0, 180, 0, 0, 604, 0, 646,
	611, 0, 0, 607, 181, 182, 183, 336, 661, 338,
	662, 184, 663, 664, 0, 185, 342, 343, 186, 187,
	614, 645, 665, 666, 346, 0, 188, 657, 0, 637,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 691, 196, 197, 198, 0, 638, 639, 641,
	0, 640, 642, 199, 200, 399, 201, 667, 202, 668,
	669, 0, 203, 0, 204, 0, 205, 0, 0, 660,
	207, 0, 208, 0, 0, 0, 602, 209, 211, 210,
	212, 647, 648, 625, 692, 0, 0, 0, 0, 0,
	213, 214, 670, 671, 672, 0, 215, 0, 216, 0,
	0, 693, 0, 217, 658, 0, 358, 0, 0, 218,
	219, 0, 0, 220, 221, 654, 656, 695, 0, 361,
	225, 0, 222, 0, 694, 223, 673, 224, 674, 675,
	676, 677, 678, 0, 636, 0, 696, 226, 227, 228,
	697, 229, 230, 231, 0, 233, 232, 0, 659, 698,
	234, 699, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 370, 240, 700, 242, 243, 245, 244, 597,
	0, 626, 655, 246, 679, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 373, 701, 252, 702, 649,
	253, 254, 255, 256, 257, 0, 258, 650, 259, 376,
	260, 0, 261, 262, 263, 264, 265, 680, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 703, 281, 282, 603,
	283, 0, 287, 288, 289, 290, 291, 0, 293, 379,
	292, 294, 295, 643, 296, 284, 285, 297, 704, 298,
	681, 381, 299, 0, 306, 300, 301, 286, 302, 305,
	682, 303, 304, 651, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 384, 683, 684, 0, 0,
	315, 316, 652, 653, 624, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 644, 325, 0, 389, 326,
	327, 328, 390, 685, 0, 0, 329, 0, 0, 0,
	0, 330, 331, 332, 333, 334, 598, 0, 629, 618,
	619, 616, 617, 608, 0, 0, 596, 0, 0, 0,
	0, 594, 595, 1072, 178, 179, 0, 180, 0, 0,
	604, 0, 646, 611, 0, 0, 607, 181, 182, 183,
	336, 661, 338, 662, 184, 663, 664, 0, 185, 342,
	343, 186, 187, 614, 645, 665, 666, 346, 0, 188,
	657, 0, 637, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 691, 196, 197, 198, 0,
	638, 639, 641, 0, 640, 642, 199, 200, 399, 201,
	667, 202, 668, 669, 0, 203, 0, 204, 0, 205,
	0, 0, 660, 207, 0, 208, 0, 0, 0, 602,
	209, 211, 210, 212, 647, 648, 625, 692, 0, 0,
	0, 0, 0, 213, 214, 670, 671, 672, 0, 215,
	0, 216, 0, 1546, 693, 0, 217, 658, 0, 358,
	0, 0, 218, 219, 0, 0, 220, 221, 654, 656,
	695, 0, 361, 225, 0, 222, 0, 694, 223, 673,
	224, 674, 675, 676, 677, 678, 0, 636, 0, 696,
	226, 227, 228, 697, 229, 230, 231, 0, 233, 232,
	0, 659, 698, 234, 699, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 370, 240, 700, 242, 243,
	245, 244, 597, 0, 626, 655, 246, 679, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 373, 701,
	252, 702, 649, 253, 254, 255, 256, 257, 0, 258,
	650, 259, 376, 260, 0, 261, 262, 263, 264, 265,
	680, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 703,
	281, 282, 603, 283, 0, 287, 288, 289, 290, 291,
	0, 293, 379, 292, 294, 295, 643, 296, 284, 285,
	297, 704, 298, 681, 381, 299, 0, 306, 300, 301,
	286, 302, 305, 682, 303, 304, 651, 0, 307, 0,
	308, 309, 310, 311, 312, 313, 314, 0, 384, 683,
	684, 0, 0, 315, 316, 652, 653, 624, 317, 318,
	319, 320, 0, 0, 321, 322, 323, 324, 644, 325,
	0, 389, 326, 327, 328, 390, 685, 0, 0, 329,
	0, 0, 0, 0, 330, 331, 332, 333, 334, 598,
	1591, 0, 629, 618, 619, 616, 617, 608, 0, 596,
	0, 0, 0, 0, 594, 595, 0, 0, 178, 179,
	0, 180, 0, 604, 0, 0, 646, 611, 0, 607,
	0, 181, 182, 183, 336, 661, 338, 662, 184, 663,
	664, 0, 185, 342, 343, 186, 187, 614, 645, 665,
	666, 346, 0, 188, 657, 0, 637, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 691,
	196, 197, 198, 0, 638, 639, 641, 0, 640, 642,
	199, 200, 399, 201, 667, 202, 668, 669, 0, 203,
	0, 204, 0, 205, 0, 0, 660, 207, 0, 208,
	0, 0, 0, 602, 209, 211, 210, 212, 647, 648,
	625, 692, 0, 0, 0, 0, 0, 213, 214, 670,
	671, 672, 0, 215, 0, 216, 0, 0, 693, 0,
	217, 658, 0, 358, 0, 0, 218, 219, 0, 0,
	220, 221, 654, 656, 695, 0, 361, 225, 0, 222,
	0, 694, 223, 673, 224, 674, 675, 676, 677, 678,
	0, 636, 0, 696, 226, 227, 228, 697, 229, 230,
	231, 0, 233, 232, 0, 659, 698, 234, 699, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 370,
	240, 700, 242, 243, 245, 244, 597, 0, 626, 655,
	246, 679, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 373, 701, 252, 702, 649, 253, 254, 255,
	256, 257, 0, 258, 650, 259, 376, 260, 0, 261,
	262, 263, 264, 265, 680, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 703, 281, 282, 603, 283, 0, 287,
	288, 289, 290, 291, 0, 293, 379, 292, 294, 295,
	643, 296, 284, 285, 297, 704, 298, 681, 381, 299,
	0, 306, 300, 301, 286, 302, 305, 682, 303, 304,
	651, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 384, 683, 684, 0, 0, 315, 316, 652,
	653, 624, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 644, 325, 0, 389, 326, 327, 328, 390,
	685, 0, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 598, 1555, 0, 629, 618, 619, 616,
	617, 608, 0, 596, 0, 0, 0, 0, 594, 595,
	0, 0, 178, 179, 0, 180, 0, 604, 0, 0,
	646, 611, 0, 607, 0, 181, 182, 183, 336, 661,
	338, 662, 184, 663, 664, 0, 185, 342, 343, 186,
	187, 614, 645, 665, 666, 346, 0, 188, 657, 0,
	637, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 691, 196, 197, 198, 0, 638, 639,
	641, 0, 640, 642, 199, 200, 399, 201, 667, 202,
	668, 669, 0, 203, 0, 204, 0, 205, 0, 0,
	660, 207, 0, 208, 0, 0, 0, 602, 209, 211,
	210, 212, 647, 648, 625, 692, 0, 0, 0, 0,
	0, 213, 214, 670, 671, 672, 0, 215, 0, 216,
	0, 0, 693, 0, 217, 658, 0, 358, 0, 0,
	218, 219, 0, 0, 220, 221, 654, 656, 695, 0,
	361, 225, 0, 222, 0, 694, 223, 673, 224, 674,
	675, 676, 677, 678, 0, 636, 0, 696, 226, 227,
	228, 697, 229, 230, 231, 0, 233, 232, 0, 659,
	698, 234, 699, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 370, 240, 700, 242, 243, 245, 244,
	597, 0, 626, 655, 246, 679, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 373, 701, 252, 702,
	649, 253, 254, 255, 256, 257, 0, 258, 650, 259,
	376, 260, 0, 261, 262, 263, 264, 265, 680, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 703, 281, 282,
	603, 283, 0, 287, 288, 289, 290, 291, 0, 293,
	379, 292, 294, 295, 643, 296, 284, 285, 297, 704,
	298, 681, 381, 299, 0, 306, 300, 301, 286, 302,
	305, 682, 303, 304, 651, 0, 307, 0, 308, 309,
	310, 311, 312, 313, 314, 0, 384, 683, 684, 0,
	0, 315, 316, 652, 653, 624, 317, 318, 319, 320,
	0, 0, 321, 322, 323, 324, 644, 325, 0, 389,
	326, 327, 328, 390, 685, 0, 0, 329, 0, 0,
	0, 0, 330, 331, 332, 333, 334, 598, 1553, 0,
	629, 618, 619, 616, 617, 608, 0, 596, 0, 0,
	0, 0, 594, 595, 0, 0, 178, 179, 0, 180,
	0, 604, 0, 0, 646, 611, 0, 607, 0, 181,
	182, 183, 336, 661, 338, 662, 184, 663, 664, 0,
	185, 342, 343, 186, 187, 614, 645, 665, 666, 346,
	0, 188, 657, 0, 637, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 691, 196, 197,
	198, 0, 638, 639, 641, 0, 640, 642, 199, 200,
	399, 201, 667, 202, 668, 669, 0, 203, 0, 204,
	0, 205, 0, 0, 660, 207, 0, 208, 0, 0,
	0, 602, 209, 211, 210, 212, 647, 648, 625, 692,
	0, 0, 0, 0, 0, 213, 214, 670, 671, 672,
	0, 215, 0, 216, 0, 0, 693, 0, 217, 658,
	0, 358, 0, 0, 218, 219, 0, 0, 220, 221,
	654, 656, 695, 0, 361, 225, 0, 222, 0, 694,
	223, 673, 224, 674, 675, 676, 677, 678, 0, 636,
	0, 696, 226, 227, 228, 697, 229, 230, 231, 0,
	233, 232, 0, 659, 698, 234, 699, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 370, 240, 700,
	242, 243, 245, 244, 597, 0, 626, 655, 246, 679,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	373, 701, 252, 702, 649, 253, 254, 255, 256, 257,
	0, 258, 650, 259, 376, 260, 0, 261, 262, 263,
	264, 265, 680, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 703, 281, 282, 603, 283, 0, 287, 288, 289,
	290, 291, 0, 293, 379, 292, 294, 295, 643, 296,
	284, 285, 297, 704, 298, 681, 381, 299, 0, 306,
	300, 301, 286, 302, 305, 682, 303, 304, 651, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	384, 683, 684, 0, 0, 315, 316, 652, 653, 624,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	644, 325, 0, 389, 326, 327, 328, 390, 685, 0,
	0, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 598, 1537, 0, 629, 618, 619, 616, 617, 608,
	0, 596, 0, 0, 0, 0, 594, 595, 0, 0,
	178, 179, 0, 180, 0, 604, 0, 0, 646, 611,
	0, 607, 0, 181, 182, 183, 336, 661, 338, 662,
	184, 663, 664, 0, 185, 342, 343, 186, 187, 614,
	645, 665, 666, 346, 0, 188, 657, 0, 637, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 691, 196, 197, 198, 0, 638, 639, 641, 0,
	640, 642, 199, 200, 399, 201, 667, 202, 668, 669,
	0, 203, 0, 204, 0, 205, 0, 0, 660, 207,
	0, 208, 0, 0, 0, 602, 209, 211, 210, 212,
	647, 648, 625, 692, 0, 0, 0, 0, 0, 213,
	214, 670, 671, 672, 0, 215, 0, 216, 0, 0,
	693, 0, 217, 658, 0, 358, 0, 0, 218, 219,
	0, 0, 220, 221, 654, 656, 695, 0, 361, 225,
	0, 222, 0, 694, 223, 673, 224, 674, 675, 676,
	677, 678, 0, 636, 0, 696, 226, 227, 228, 697,
	229, 230, 231, 0, 233, 232, 0, 659, 698, 234,
	699, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 370, 240, 700, 242, 243, 245, 244, 597, 0,
	626, 655, 246, 679, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 373, 701, 252, 702, 649, 253,
	254, 255, 256, 257, 0, 258, 650, 259, 376, 260,
	0, 261, 262, 263, 264, 265, 680, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 703, 281, 282, 603, 283,
	0, 287, 288, 289, 290, 291, 0, 293, 379, 292,
	294, 295, 643, 296, 284, 285, 297, 704, 298, 681,
	381, 299, 0, 306, 300, 301, 286, 302, 305, 682,
	303, 304, 651, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 384, 683, 684, 0, 0, 315,
	316, 652, 653, 624, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 644, 325, 0, 389, 326, 327,
	328, 390, 685, 0, 0, 329, 0, 0, 0, 0,
	330, 331, 332, 333, 334, 598, 1525, 0, 629, 618,
	619, 616, 617, 608, 0, 596, 0, 0, 0, 0,
	594, 595, 0, 0, 178, 179, 0, 180, 0, 604,
	0, 0, 646, 611, 0, 607, 0, 181, 182, 183,
	336, 661, 338, 662, 184, 663, 664, 0, 185, 342,
	343, 186, 187, 614, 645, 665, 666, 346, 0, 188,
	657, 0, 637, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 691, 196, 197, 198, 0,
	638, 639, 641, 0, 640, 642, 199, 200, 399, 201,
	667, 202, 668, 669, 0, 203, 0, 204, 0, 205,
	0, 0, 660, 207, 0, 208, 0, 0, 0, 602,
	209, 211, 210, 212, 647, 648, 625, 692, 0, 0,
	0, 0, 0, 213, 214, 670, 671, 672, 0, 215,
	0, 216, 0, 0, 693, 0, 217, 658, 0, 358,
	0, 0, 218, 219, 0, 0, 220, 221, 654, 656,
	695, 0, 361, 225, 0, 222, 0, 694, 223, 673,
	224, 674, 675, 676, 677, 678, 0, 636, 0, 696,
	226, 227, 228, 697, 229, 230, 231, 0, 233, 232,
	0, 659, 698, 234, 699, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 370, 240, 700, 242, 243,
	245, 244, 597, 0, 626, 655, 246, 679, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 373, 701,
	252, 702, 649, 253, 254, 255, 256, 257, 0, 258,
	650, 259, 376, 260, 0, 261, 262, 263, 264, 265,
	680, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 703,
	281, 282, 603, 283, 0, 287, 288, 289, 290, 291,
	0, 293, 379, 292, 294, 295, 643, 296, 284, 285,
	297, 704, 298, 681, 381, 299, 0, 306, 300, 301,
	286, 302, 305, 682, 303, 304, 651, 0, 307, 0,
	308, 309, 310, 311, 312, 313, 314, 0, 384, 683,
	684, 0, 0, 315, 316, 652, 653, 624, 317, 318,
	319, 320, 0, 0, 321, 322, 323, 324, 644, 325,
	0, 389, 326, 327, 328, 390, 685, 0, 0, 329,
	0, 0, 0, 0, 330, 331, 332, 333, 334, 598,
	1523, 0, 1515, 618, 619, 616, 617, 608, 0, 596,
	0, 0, 0, 0, 594, 595, 0, 0, 178, 179,
	0, 180, 0, 604, 0, 0, 646, 611, 0, 607,
	0, 181, 182, 183, 336, 661, 338, 662, 184, 663,
	664, 0, 185, 342, 343, 186, 187, 614, 645, 665,
	666, 346, 0, 188, 657, 0, 637, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 691,
	196, 197, 198, 0, 638, 639, 641, 0, 640, 642,
	199, 200, 399, 201, 667, 1518, 668, 669, 0, 203,
	0, 204, 0, 205, 0, 0, 660, 207, 0, 208,
	0, 0, 0, 602, 209, 211, 210, 212, 647, 648,
	625, 692, 0, 0, 0, 0, 0, 213, 214, 670,
	671, 672, 0, 215, 0, 216, 0, 0, 693, 0,
	217, 658, 0, 358, 0, 0, 218, 1519, 0, 0,
	220, 221, 654, 656, 695, 0, 361, 225, 0, 222,
	0, 694, 223, 673, 224, 674, 675, 676, 677, 678,
	0, 636, 0, 696, 226, 227, 228, 697, 229, 230,
	231, 0, 233, 232, 0, 659, 698, 234, 699, 0,
	235, 0, 0, 236, 0, 237, 1520, 1517, 241, 370,
	240, 700, 242, 243, 245, 244, 597, 0, 626, 655,
	246, 679, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 373, 701, 252, 702, 649, 253, 254, 255,
	256, 257, 0, 258, 650, 259, 376, 260, 0, 261,
	262, 263, 264, 265, 680, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 703, 281, 282, 603, 283, 0, 287,
	288, 289, 290, 1521, 0, 293, 379, 292, 294, 295,
	643, 296, 284, 285, 297, 704, 298, 681, 381, 299,
	0, 306, 300, 301, 286, 302, 305, 682, 303, 304,
	651, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 384, 683, 684, 0, 0, 315, 316, 652,
	653, 624, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 644, 325, 0, 389, 326, 327, 328, 390,
	685, 0, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 1516, 334, 598, 1512, 0, 1515, 618, 619, 616,
	617, 608, 0, 596, 0, 0, 0, 0, 594, 595,
	0, 0, 178, 179, 0, 180, 0, 604, 0, 0,
	646, 611, 0, 607, 0, 181, 182, 183, 336, 661,
	338, 662, 184, 663, 664, 0, 185, 342, 343, 186,
	187, 614, 645, 665, 666, 346, 0, 188, 657, 0,
	637, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 691, 196, 197, 198, 0, 638, 639,
	641, 0, 640, 642, 199, 200, 399, 201, 667, 1518,
	668, 669, 0, 203, 0, 204, 0, 205, 0, 0,
	660, 207, 0, 208, 0, 0, 0, 602, 209, 211,
	210, 212, 647, 648, 625, 692, 0, 0, 0, 0,
	0, 213, 214, 670, 671, 672, 0, 215, 0, 216,
	0, 0, 693, 0, 217, 658, 0, 358, 0, 0,
	218, 1519, 0, 0, 220, 221, 654, 656, 695, 0,
	361, 225, 0, 222, 0, 694, 223, 673, 224, 674,
	675, 676, 677, 678, 0, 636, 0, 696, 226, 227,
	228, 697, 229, 230, 231, 0, 233, 232, 0, 659,
	698, 234, 699, 0, 235, 0, 0, 236, 0, 237,
	1520, 1517, 241, 370, 240, 700, 242, 243, 245, 244,
	597, 0, 626, 655, 246, 679, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 373, 701, 252, 702,
	649, 253, 254, 255, 256, 257, 0, 258, 650, 259,
	376, 260, 0, 261, 262, 263, 264, 265, 680, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 703, 281, 282,
	603, 283, 0, 287, 288, 289, 290, 1521, 0, 293,
	379, 292, 294, 295, 643, 296, 284, 285, 297, 704,
	298, 681, 381, 299, 0, 306, 300, 301, 286, 302,
	305, 682, 303, 304, 651, 0, 307, 0, 308, 309,
	310, 311, 312, 313, 314, 0, 384, 683, 684, 0,
	0, 315, 316, 652, 653, 624, 317, 318, 319, 320,
	0, 0, 321, 322, 323, 324, 644, 325, 0, 389,
	326, 327, 328, 390, 685, 0, 0, 329, 0, 0,
	0, 0, 330, 331, 332, 1516, 334, 598, 0, 629,
	618, 619, 616, 617, 608, 0, 0, 596, 0, 0,
	0, 0, 594, 595, 0, 178, 179, 0, 180, 0,
	0, 604, 0, 646, 611, 0, 0, 607, 181, 182,
	183, 336, 661, 338, 662, 184, 663, 664, 0, 185,
	342, 343, 186, 187, 614, 645, 665, 666, 346, 0,
	188, 657, 0, 637, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 691, 196, 197, 198,
	0, 638, 639, 641, 0, 640, 642, 199, 200, 399,
	201, 667, 202, 668, 669, 0, 203, 0, 204, 0,
	205, 0, 0, 660, 207, 0, 208, 0, 0, 0,
	602, 209, 211, 210, 212, 647, 648, 625, 692, 0,
	0, 0, 0, 0, 213, 214, 670, 671, 672, 0,
	215, 0, 216, 0, 0, 693, 0, 217, 658, 0,
	358, 0, 0, 218, 219, 0, 0, 220, 221, 654,
	656, 695, 0, 361, 225, 0, 222, 0, 694, 223,
	673, 224, 674, 675, 676, 677, 678, 0, 636, 0,
	696, 226, 227, 228, 697, 229, 230, 231, 0, 233,
	232, 0, 659, 698, 234, 699, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 370, 240, 700, 242,
	243, 245, 244, 597, 0, 626, 655, 246, 679, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 373,
	701, 252, 702, 649, 253, 254, 255, 256, 257, 0,
	258, 650, 259, 376, 260, 0, 261, 262, 263, 264,
	265, 680, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	703, 281, 282, 603, 283, 0, 287, 288, 289, 290,
	291, 0, 293, 379, 292, 294, 295, 643, 296, 284,
	285, 297, 704, 298, 681, 381, 299, 0, 306, 300,
	301, 286, 302, 305, 682, 303, 304, 651, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 384,
	683, 684, 0, 0, 315, 316, 652, 653, 624, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 644,
	325, 0, 389, 326, 327, 328, 390, 685, 0, 0,
	329, 0, 0, 0, 0, 330, 331, 332, 333, 334,
	598, 0, 629, 618, 619, 616, 617, 608, 0, 0,
	596, 0, 0, 0, 0, 594, 595, 0, 178, 179,
	1378, 180, 1015, 0, 604, 0, 646, 611, 0, 0,
	607, 181, 182, 183, 336, 661, 338, 662, 184, 663,
	664, 0, 185, 342, 343, 186, 187, 614, 645, 665,
	666, 346, 0, 188, 657, 0, 637, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 691,
	196, 197, 198, 0, 638, 639, 641, 0, 640, 642,
	199, 200, 399, 201, 667, 202, 668, 669, 0, 203,
	0, 204, 0, 205, 0, 0, 660, 207, 0, 208,
	0, 0, 0, 602, 209, 211, 210, 212, 647, 648,
	625, 692, 0, 0, 0, 0, 0, 213, 214, 670,
	671, 672, 0, 215, 0, 216, 0, 0, 693, 0,
	217, 658, 0, 358, 0, 0, 218, 219, 0, 0,
	220, 221, 654, 656, 695, 0, 361, 225, 0, 222,
	0, 694, 223, 673, 224, 674, 675, 676, 677, 678,
	0, 636, 0, 696, 226, 227, 228, 697, 229, 230,
	231, 0, 233, 232, 0, 659, 698, 234, 699, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 370,
	240, 700, 242, 243, 245, 244, 597, 0, 626, 655,
	246, 679, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 373, 701, 252, 702, 649, 253, 254, 255,
	256, 257, 0, 258, 650, 259, 376, 260, 0, 261,
	262, 263, 264, 265, 680, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 703, 281, 282, 603, 283, 0, 287,
	288, 289, 290, 291, 0, 293, 379, 292, 294, 295,
	643, 296, 284, 285, 297, 704, 298, 681, 381, 299,
	0, 306, 300, 301, 286, 302, 305, 682, 303, 304,
	651, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 384, 683, 684, 0, 0, 315, 316, 652,
	653, 624, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 644, 325, 0, 389, 326, 327, 328, 390,
	685, 0, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 598, 771, 0, 629, 618, 619, 616,
	617, 608, 0, 596, 0, 0, 0, 0, 594, 595,
	0, 0, 178, 179, 0, 180, 0, 604, 0, 0,
	646, 611, 0, 607, 0, 181, 182, 183, 336, 661,
	338, 662, 184, 663, 664, 0, 185, 342, 343, 186,
	187, 614, 645, 665, 666, 346, 0, 188, 657, 0,
	637, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 691, 196, 197, 198, 0, 638, 639,
	641, 0, 640, 642, 199, 200, 399, 201, 667, 202,
	668, 669, 0, 203, 0, 204, 0, 205, 0, 0,
	660, 207, 0, 208, 0, 0, 0, 602, 209, 211,
	210, 212, 647, 648, 625, 692, 0, 0, 0, 0,
	0, 213, 214, 670, 671, 672, 0, 215, 0, 216,
	0, 0, 693, 0, 217, 658, 0, 358, 0, 0,
	218, 219, 0, 0, 220, 221, 654, 656, 695, 0,
	361, 225, 0, 222, 0, 694, 223, 673, 224, 674,
	675, 676, 677, 678, 0, 636, 0, 696, 226, 227,
	228, 697, 229, 230, 231, 0, 233, 232, 0, 659,
	698, 234, 699, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 370, 240, 700, 242, 243, 245, 244,
	597, 0, 626, 655, 246, 679, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 373, 701, 252, 702,
	649, 253, 254, 255, 256, 257, 0, 258, 650, 259,
	376, 260, 0, 261, 262, 263, 264, 265, 680, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 703, 281, 282,
	603, 283, 0, 287, 288, 289, 290, 291, 0, 293,
	379, 292, 294, 295, 643, 296, 284, 285, 297, 704,
	298, 681, 381, 299, 0, 306, 300, 301, 286, 302,
	305, 682, 303, 304, 651, 0, 307, 0, 308, 309,
	310, 311, 312, 313, 314, 0, 384, 683, 684, 0,
	0, 315, 316, 652, 653, 624, 317, 318, 319, 320,
	0, 0, 321, 322, 323, 324, 644, 325, 0, 389,
	326, 327, 328, 390, 685, 0, 0, 329, 0, 0,
	0, 0, 330, 331, 332, 333, 334, 598, 769, 0,
	629, 618, 619, 616, 617, 608, 0, 596, 0, 0,
	0, 0, 594, 595, 0, 0, 178, 179, 0, 180,
	0, 604, 0, 0, 646, 611, 0, 607, 0, 181,
	182, 183, 336, 661, 338, 662, 184, 663, 664, 0,
	185, 342, 343, 186, 187, 614, 645, 665, 666, 346,
	0, 188, 657, 0, 637, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 691, 196, 197,
	198, 0, 638, 639, 641, 0, 640, 642, 199, 200,
	399, 201, 667, 202, 668, 669, 0, 203, 0, 204,
	0, 205, 0, 0, 660, 207, 0, 208, 0, 0,
	0, 602, 209, 211, 210, 212, 647, 648, 625, 692,
	0, 0, 0, 0, 0, 213, 214, 670, 671, 672,
	0, 215, 0, 216, 0, 0, 693, 0, 217, 658,
	0, 358, 0, 0, 218, 219, 0, 0, 220, 221,
	654, 656, 695, 0, 361, 225, 0, 222, 0, 694,
	223, 673, 224, 674, 675, 676, 677, 678, 0, 636,
	0, 696, 226, 227, 228, 697, 229, 230, 231, 0,
	233, 232, 0, 659, 698, 234, 699, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 370, 240, 700,
	242, 243, 245, 244, 597, 0, 626, 655, 246, 679,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	373, 701, 252, 702, 649, 253, 254, 255, 256, 257,
	0, 258, 650, 259, 376, 260, 0, 261, 262, 263,
	264, 265, 680, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 703, 281, 282, 603, 283, 0, 287, 288, 289,
	290, 291, 0, 293, 379, 292, 294, 295, 643, 296,
	284, 285, 297, 704, 298, 681, 381, 299, 0, 306,
	300, 301, 286, 302, 305, 682, 303, 304, 651, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	384, 683, 684, 0, 0, 315, 316, 652, 653, 624,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	644, 325, 0, 389, 326, 327, 328, 390, 685, 0,
	0, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 598, 0, 629, 618, 619, 616, 617, 608, 0,
	0, 596, 0, 0, 0, 0, 594, 595, 0, 178,
	179, 0, 180, 0, 0, 604, 0, 646, 611, 0,
	0, 607, 181, 182, 183, 336, 661, 338, 662, 184,
	663, 664, 0, 185, 342, 343, 186, 187, 614, 645,
	665, 666, 346, 0, 188, 657, 0, 637, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	691, 196, 197, 2458, 0, 638, 639, 641, 0, 640,
	642, 199, 200, 399, 201, 667, 202, 668, 669, 0,
	203, 0, 204, 0, 205, 0, 0, 660, 207, 0,
	208, 0, 0, 0, 602, 209, 211, 210, 212, 647,
	648, 625, 692, 0, 0, 0, 0, 0, 213, 214,
	670, 671, 672, 0, 215, 0, 216, 0, 0, 693,
	0, 217, 658, 0, 358, 0, 0, 218, 219, 0,
	0, 220, 221, 654, 656, 695, 0, 361, 225, 0,
	222, 0, 694, 223, 673, 224, 674, 675, 676, 677,
	678, 0, 636, 0, 696, 226, 227, 228, 697, 229,
	230, 231, 0, 233, 232, 0, 659, 698, 234, 699,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	370, 240, 700, 242, 243, 245, 244, 597, 0, 626,
	655, 246, 679, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 373, 701, 252, 702, 649, 253, 254,
	255, 256, 257, 0, 258, 650, 259, 376, 260, 0,
	261, 262, 263, 264, 265, 680, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 703, 281, 282, 603, 283, 0,
	287, 288, 289, 290, 291, 0, 293, 379, 292, 294,
	295, 643, 296, 284, 285, 297, 704, 298, 681, 381,
	299, 0, 306, 300, 301, 286, 302, 305, 682, 303,
	304, 651, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 384, 683, 684, 0, 0, 315, 316,
	652, 653, 624, 317, 318, 2457, 320, 0, 0, 321,
	322, 323, 324, 644, 325, 0, 389, 326, 327, 328,
	390, 685, 0, 0, 329, 0, 0, 0, 0, 330,
	331, 332, 333, 334, 598, 0, 629, 618, 619, 616,
	617, 608, 0, 0, 596, 0, 0, 0, 0, 594,
	595, 0, 178, 179, 0, 180, 0, 0, 604, 0,
	646, 611, 0, 0, 607, 181, 182, 183, 336, 661,
	338, 662, 184, 663, 664, 0, 185, 342, 343, 186,
	187, 614, 645, 665, 666, 346, 0, 188, 657, 0,
	637, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 691, 196, 197, 198, 0, 638, 639,
	641, 0, 640, 642, 199, 200, 399, 201, 667, 202,
	668, 669, 0, 203, 0, 204, 0, 205, 0, 0,
	660, 207, 0, 208, 0, 0, 0, 602, 209, 211,
	210, 212, 647, 648, 625, 692, 0, 0, 0, 0,
	0, 213, 214, 670, 671, 672, 0, 215, 0, 216,
	0, 0, 693, 0, 217, 658, 0, 358, 0, 0,
	218, 219, 0, 0, 220, 221, 654, 656, 695, 0,
	361, 225, 0, 222, 0, 694, 223, 673, 224, 674,
	675, 676, 677, 678, 0, 636, 0, 696, 226, 227,
	228, 697, 229, 230, 231, 0, 233, 232, 0, 659,
	698, 234, 699, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 370, 240, 700, 242, 243, 245, 244,
	597, 0, 626, 655, 246, 679, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 373, 701, 252, 702,
	649, 253, 254, 255, 256, 257, 0, 258, 650, 259,
	376, 260, 0, 261, 262, 263, 264, 265, 680, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 703, 281, 282,
	603, 283, 0, 287, 288, 289, 290, 291, 0, 293,
	379, 292, 294, 295, 643, 296, 284, 285, 297, 704,
	298, 681, 381, 299, 0, 306, 300, 301, 286, 302,
	305, 682, 303, 304, 651, 0, 307, 0, 308, 309,
	310, 311, 312, 313, 314, 0, 384, 683, 684, 0,
	0, 315, 316, 652, 653, 624, 317, 318, 319, 320,
	0, 0, 321, 322, 323, 324, 644, 325, 0, 389,
	326, 327, 328, 390, 685, 0, 0, 329, 0, 0,
	0, 0, 330, 331, 332, 333, 334, 598, 0, 629,
	618, 619, 616, 617, 608, 0, 0, 596, 0, 0,
	0, 0, 594, 595, 0, 178, 179, 0, 180, 0,
	0, 604, 0, 646, 611, 0, 0, 607, 181, 182,
	183, 2456, 661, 338, 662, 184, 663, 664, 0, 185,
	342, 343, 186, 187, 614, 645, 665, 666, 346, 0,
	188, 657, 0, 637, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 691, 196, 197, 2458,
	0, 638, 639, 641, 0, 640, 642, 199, 200, 399,
	201, 667, 202, 668, 669, 0, 203, 0, 204, 0,
	205, 0, 0, 660, 207, 0, 208, 0, 0, 0,
	602, 209, 211, 210, 212, 647, 648, 625, 692, 0,
	0, 0, 0, 0, 213, 214, 670, 671, 672, 0,
	215, 0, 216, 0, 0, 693, 0, 217, 658, 0,
	358, 0, 0, 218, 219, 0, 0, 220, 221, 654,
	656, 695, 0, 361, 225, 0, 222, 0, 694, 223,
	673, 224, 674, 675, 676, 677, 678, 0, 636, 0,
	696, 226, 227, 228, 697, 229, 230, 231, 0, 233,
	232, 0, 659, 698, 234, 699, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 370, 240, 700, 242,
	243, 245, 244, 597, 0, 626, 655, 246, 679, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 373,
	701, 252, 702, 649, 253, 254, 255, 256, 257, 0,
	258, 650, 259, 376, 260, 0, 261, 262, 263, 264,
	265, 680, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	703, 281, 282, 603, 283, 0, 287, 288, 289, 290,
	291, 0, 293, 379, 292, 294, 295, 643, 296, 284,
	285, 297, 704, 298, 681, 381, 299, 0, 306, 300,
	301, 286, 302, 305, 682, 303, 304, 651, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 384,
	683, 684, 0, 0, 315, 316, 652, 653, 624, 317,
	318, 2457, 320, 0, 0, 321, 322, 323, 324, 644,
	325, 0, 389, 326, 327, 328, 390, 685, 0, 0,
	329, 0, 0, 0, 0, 330, 331, 332, 333, 334,
	598, 0, 629, 618, 619, 616, 617, 608, 0, 0,
	596, 0, 0, 0, 0, 594, 595, 0, 178, 179,
	0, 180, 0, 0, 604, 0, 646, 611, 0, 0,
	607, 181, 182, 183, 336, 661, 338, 662, 184, 663,
	664, 0, 185, 342, 343, 186, 187, 614, 645, 665,
	666, 346, 0, 188, 657, 0, 637, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 691,
	196, 197, 198, 0, 638, 639, 641, 0, 640, 642,
	199, 200, 399, 201, 667, 202, 668, 669, 0, 203,
	0, 204, 0, 205, 0, 0, 660, 207, 0, 208,
	0, 0, 0, 602, 209, 211, 210, 212, 647, 648,
	625, 692, 0, 0, 0, 0, 0, 213, 214, 670,
	671, 672, 0, 215, 0, 216, 0, 0, 693, 0,
	217, 658, 0, 358, 0, 0, 218, 219, 0, 0,
	220, 221, 654, 656, 695, 0, 361, 225, 0, 222,
	0, 694, 223, 673, 224, 674, 675, 676, 677, 678,
	0, 636, 0, 696, 226, 227, 228, 697, 229, 230,
	231, 0, 233, 232, 0, 659, 698, 234, 699, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 370,
	240, 700, 242, 243, 245, 244, 0, 0, 626, 655,
	246, 679, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 373, 701, 252, 702, 649, 253, 254, 255,
	256, 257, 0, 258, 650, 259, 376, 260, 0, 261,
	262, 263, 264, 265, 680, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 703, 281, 282, 1535, 283, 0, 287,
	288, 289, 290, 291, 0, 293, 379, 292, 294, 295,
	643, 296, 284, 285, 297, 704, 298, 681, 381, 299,
	0, 306, 300, 301, 286, 302, 305, 682, 303, 304,
	651, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 384, 683, 684, 0, 0, 315, 316, 652,
	653, 624, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 644, 325, 0, 389, 326, 327, 328, 390,
	685, 0, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 629, 618, 619, 616, 617,
	608, 0, 0, 1533, 0, 0, 0, 0, 1531, 1532,
	0, 178, 179, 0, 180, 0, 0, 1534, 0, 646,
	611, 0, 0, 607, 181, 182, 183, 336, 661, 338,
	662, 184, 663, 664, 0, 185, 342, 343, 186, 187,
	0, 645, 665, 666, 346, 0, 188, 657, 0, 637,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 691, 196, 197, 198, 0, 638, 639, 641,
	0, 640, 642, 199, 200, 399, 201, 667, 202, 668,
	669, 0, 203, 0, 204, 0, 205, 0, 0, 660,
	207, 0, 208, 0, 0, 0, 351, 209, 211, 210,
	212, 647, 648, 625, 692, 0, 0, 0, 0, 0,
	213, 214, 670, 671, 672, 0, 215, 0, 216, 0,
	0, 693, 0, 217, 658, 0, 358, 0, 0, 218,
	219, 0, 0, 220, 221, 654, 656, 695, 0, 361,
	225, 0, 222, 0, 694, 223, 673, 224, 674, 675,
	676, 677, 678, 0, 636, 0, 696, 226, 227, 228,
	697, 229, 230, 231, 0, 233, 232, 0, 659, 698,
	234, 699, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 370, 240, 700, 242, 243, 245, 244, 0,
	0, 626, 655, 246, 679, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 373, 701, 252, 702, 649,
	253, 254, 255, 256, 257, 0, 258, 650, 259, 376,
	260, 0, 261, 262, 263, 264, 265, 680, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 703, 281, 282, 1535,
	283, 0, 287, 288, 289, 290, 291, 0, 293, 379,
	292, 294, 295, 643, 296, 284, 285, 297, 704, 298,
	681, 381, 299, 0, 306, 300, 301, 286, 302, 305,
	682, 303, 304, 651, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 384, 683, 684, 0, 0,
	315, 316, 652, 653, 624, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 644, 325, 0, 389, 326,
	327, 328, 390, 685, 0, 0, 329, 0, 0, 0,
	0, 330, 331, 332, 333, 334, 0, 0, 629, 618,
	619, 616, 617, 608, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	1534, 0, 646, 611, 0, 0, 607, 181, 182, 183,
	0, 661, 338, 662, 184, 663, 664, 0, 185, 342,
	343, 186, 187, 614, 645, 665, 666, 346, 0, 188,
	657, 0, 637, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 691, 196, 197, 2458, 0,
	638, 639, 641, 0, 640, 642, 199, 200, 399, 201,
	667, 202, 668, 669, 0, 203, 0, 204, 0, 205,
	0, 0, 660, 207, 0, 208, 0, 0, 0, 602,
	209, 211, 210, 212, 647, 648, 625, 692, 0, 0,
	0, 0, 0, 213, 214, 670, 671, 672, 0, 215,
	0, 216, 0, 0, 693, 0, 217, 658, 0, 358,
	0, 0, 218, 219, 0, 0, 220, 221, 654, 656,
	0, 0, 361, 225, 0, 222, 0, 694, 223, 673,
	224, 674, 675, 676, 677, 678, 0, 636, 0, 0,
	226, 227, 228, 697, 229, 230, 231, 0, 233, 232,
	0, 659, 698, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 370, 240, 700, 242, 243,
	245, 244, 597, 0, 626, 655, 246, 679, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 373, 701,
	252, 702, 649, 253, 254, 255, 256, 257, 0, 258,
	650, 259, 376, 260, 0, 261, 262, 263, 264, 265,
	680, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 703,
	281, 282, 603, 283, 0, 287, 288, 289, 290, 291,
	0, 293, 379, 292, 294, 295, 643, 296, 284, 285,
	297, 0, 298, 681, 381, 299, 0, 306, 300, 301,
	286, 302, 305, 682, 303, 304, 651, 0, 307, 0,
	308, 309, 310, 311, 312, 313, 314, 0, 384, 683,
	684, 0, 0, 315, 316, 652, 653, 624, 317, 318,
	2457, 320, 0, 0, 321, 322, 323, 324, 644, 325,
	0, 389, 326, 327, 328, 390, 685, 0, 0, 329,
	0, 0, 0, 0, 330, 331, 332, 333, 334, 0,
	0, 629, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 594, 595, 0, 178, 179, 0,
	180, 0, 0, 604, 0, 646, 0, 0, 0, 607,
	181, 182, 183, 336, 337, 338, 339, 184, 340, 341,
	0, 185, 342, 343, 186, 187, 0, 645, 344, 345,
	346, 0, 188, 657, 0, 637, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 691, 196,
	197, 198, 0, 638, 639, 641, 0, 640, 642, 199,
	200, 399, 201, 348, 202, 349, 350, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 351, 209, 211, 210, 212, 647, 648, 0,
	692, 0, 0, 0, 0, 0, 213, 214, 354, 355,
	356, 0, 215, 0, 216, 0, 0, 693, 0, 217,
	658, 0, 358, 0, 0, 218, 219, 0, 0, 220,
	221, 654, 656, 695, 0, 361, 225, 0, 222, 0,
	694, 223, 362, 224, 363, 364, 365, 366, 367, 0,
	368, 0, 696, 226, 227, 228, 697, 229, 230, 231,
	0, 233, 232, 0, 659, 698, 234, 699, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 370, 240,
	700, 242, 243, 245, 244, 0, 0, 0, 655, 246,
	372, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 373, 701, 252, 702, 649, 253, 254, 255, 256,
	257, 0, 258, 650, 259, 376, 260, 0, 261, 262,
	263, 264, 265, 377, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 703, 281, 282, 378, 283, 0, 287, 288,
	289, 290, 291, 0, 293, 379, 292, 294, 295, 643,
	296, 284, 285, 297, 704, 298, 380, 381, 299, 0,
	306, 300, 301, 286, 302, 305, 382, 303, 304, 651,
	0, 307, 0, 308, 309, 310, 311, 312, 313, 314,
	0, 384, 385, 386, 0, 0, 315, 316, 652, 653,
	0, 317, 318, 319, 320, 0, 0, 321, 322, 323,
	324, 644, 325, 0, 389, 326, 327, 328, 390, 391,
	0, 0, 329, 0, 0, 0, 0, 330, 331, 332,
	333, 334, 820, 0, 823, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 2105, 0, 335, 0,
	0, 0, 0, 181, 182, 183, 336, 337, 338, 339,
	184, 340, 341, 0, 185, 342, 343, 186, 187, 0,
	0, 344, 345, 346, 0, 188, 347, 0, 828, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 691, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 399, 201, 348, 202, 349, 350,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 351, 209, 211, 210, 212,
	352, 353, 0, 692, 0, 0, 0, 0, 0, 213,
	214, 354, 355, 356, 0, 215, 0, 216, 0, 0,
	693, 0, 217, 357, 0, 358, 0, 0, 218, 219,
	0, 0, 220, 221, 359, 360, 695, 0, 361, 225,
	0, 222, 0, 694, 223, 362, 224, 363, 364, 365,
	366, 367, 0, 368, 0, 696, 226, 227, 228, 697,
	229, 230, 231, 0, 233, 232, 0, 369, 698, 234,
	699, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 370, 240, 700, 242, 243, 245, 244, 0, 0,
	0, 371, 246, 372, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 373, 701, 252, 702, 374, 253,
	254, 255, 256, 257, 0, 258, 375, 259, 376, 260,
	0, 261, 262, 263, 264, 265, 377, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 703, 281, 282, 378, 283,
	0, 287, 288, 289, 290, 291, 135, 293, 379, 292,
	294, 295, 0, 296, 284, 285, 297, 704, 298, 380,
	381, 299, 0, 306, 300, 301, 286, 302, 305, 382,
	303, 304, 383, 0, 307, 137, 308, 309, 310, 311,
	312, 313, 314, 0, 384, 385, 386, 0, 0, 315,
	316, 387, 388, 0, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 0, 325, 0, 389, 326, 327,
	328, 827, 391, 0, 0, 329, 0, 0, 0, 129,
	330, 331, 332, 333, 334, 0, 130, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 121,
	0, 335, 0, 0, 0, 0, 181, 182, 183, 336,
	337, 338, 339, 184, 340, 341, 0, 185, 342, 343,
	186, 187, 0, 0, 344, 345, 346, 0, 188, 347,
	0, 0, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 0, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 399, 201, 348,
	202, 349, 350, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 351, 209,
	211, 210, 212, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 354, 355, 356, 0, 215, 0,
	216, 0, 0, 0, 0, 217, 357, 0, 358, 0,
	0, 218, 219, 0, 0, 220, 221, 359, 360, 0,
	0, 361, 225, 0, 222, 0, 0, 223, 362, 224,
	363, 364, 365, 366, 367, 0, 368, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	369, 0, 234, 0, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 370, 240, 0, 242, 243, 245,
	244, 0, 0, 0, 371, 246, 372, 247, 248, 0,
	249, 0, 744, 250, 0, 0, 251, 373, 0, 252,
	0, 374, 253, 254, 255, 256, 257, 0, 258, 375,
	259, 376, 260, 0, 261, 262, 263, 264, 265, 377,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 0, 281,
	282, 378, 283, 0, 287, 288, 289, 290, 291, 135,
	293, 379, 292, 294, 295, 0, 296, 284, 285, 297,
	0, 298, 380, 381, 299, 0, 306, 300, 301, 286,
	302, 305, 382, 303, 304, 383, 0, 307, 137, 308,
	309, 310, 311, 312, 313, 314, 0, 384, 385, 386,
	0, 0, 315, 316, 387, 388, 0, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 0, 325, 0,
	389, 326, 327, 328, 827, 391, 0, 0, 329, 0,
	0, 0, 129, 330, 331, 332, 333, 334, 580, 130,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 0, 180,
	738, 0, 1094, 0, 335, 0, 0, 0, 0, 181,
	182, 183, 336, 337, 338, 339, 184, 340, 341, 0,
	185, 342, 343, 186, 187, 0, 0, 344, 345, 346,
	0, 188, 347, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	399, 201, 348, 202, 349, 350, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 351, 209, 211, 210, 212, 352, 353, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 354, 355, 356,
	0, 215, 0, 216, 0, 0, 0, 0, 217, 357,
	0, 358, 0, 0, 218, 219, 0, 0, 220, 221,
	359, 360, 0, 0, 361, 225, 0, 222, 0, 0,
	223, 362, 224, 363, 364, 365, 366, 367, 0, 368,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 369, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 370, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 371, 246, 372,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	373, 0, 252, 0, 374, 253, 254, 255, 256, 257,
	0, 258, 375, 259, 376, 260, 0, 261, 262, 263,
	264, 265, 377, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 378, 283, 0, 287, 288, 289,
	290, 291, 135, 293, 379, 292, 294, 295, 0, 296,
	284, 285, 297, 0, 298, 380, 381, 299, 0, 306,
	300, 301, 286, 302, 305, 382, 303, 304, 383, 0,
	307, 137, 308, 309, 310, 311, 312, 313, 314, 0,
	384, 385, 386, 0, 0, 315, 316, 387, 388, 0,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	0, 325, 0, 389, 326, 327, 328, 827, 391, 0,
	0, 329, 0, 0, 0, 129, 330, 331, 332, 333,
	334, 1855, 130, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 121, 0, 335, 0, 0,
	0, 0, 181, 182, 183, 336, 337, 338, 339, 184,
	340, 341, 0, 185, 342, 343, 186, 187, 0, 0,
	344, 345, 346, 0, 188, 347, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 399, 201, 348, 202, 349, 350, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 351, 209, 211, 210, 212, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	354, 355, 356, 0, 215, 0, 216, 0, 0, 0,
	0, 217, 357, 0, 358, 0, 0, 218, 219, 0,
	0, 220, 221, 359, 360, 0, 0, 361, 225, 0,
	222, 0, 0, 223, 362, 224, 363, 364, 365, 366,
	367, 0, 368, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 369, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	370, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	371, 246, 372, 247, 248, 0, 249, 0, 744, 250,
	0, 0, 251, 373, 0, 252, 0, 374, 253, 254,
	255, 256, 257, 0, 258, 375, 259, 376, 260, 0,
	261, 262, 263, 264, 265, 377, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 378, 283, 0,
	287, 288, 289, 290, 291, 0, 293, 379, 292, 294,
	295, 0, 296, 284, 285, 297, 0, 298, 380, 381,
	299, 0, 306, 300, 301, 286, 302, 305, 382, 303,
	304, 383, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 384, 385, 386, 0, 0, 315, 316,
	387, 388, 0, 317, 318, 319, 320, 0, 0, 321,
	322, 323, 324, 0, 325, 0, 389, 326, 327, 328,
	390, 391, 0, 0, 329, 0, 0, 0, 0, 330,
	331, 332, 333, 334, 737, 0, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 0, 180, 738, 0, 743, 0,
	335, 0, 0, 0, 0, 181, 182, 183, 336, 337,
	338, 339, 184, 340, 341, 0, 185, 342, 343, 186,
	187, 0, 0, 344, 345, 346, 0, 188, 347, 0,
	0, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 0, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 399, 201, 348, 202,
	349, 350, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 351, 209, 211,
	210, 212, 352, 353, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 354, 355, 356, 0, 215, 0, 216,
	0, 0, 0, 0, 217, 357, 0, 358, 0, 0,
	218, 219, 0, 0, 220, 221, 359, 360, 0, 0,
	361, 225, 0, 222, 0, 0, 223, 362, 224, 363,
	364, 365, 366, 367, 0, 368, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 369,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 370, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 371, 246, 372, 247, 248, 0, 249,
	0, 744, 250, 0, 0, 251, 373, 0, 252, 0,
	374, 253, 254, 255, 256, 257, 0, 258, 375, 259,
	376, 260, 0, 261, 262, 263, 264, 265, 377, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 0, 281, 282,
	378, 283, 0, 287, 288, 289, 290, 291, 0, 293,
	379, 292, 294, 295, 0, 296, 284, 285, 297, 0,
	298, 380, 381, 299, 0, 306, 300, 301, 286, 302,
	305, 382, 303, 304, 383, 0, 307, 0, 308, 309,
	310, 311, 312, 313, 314, 0, 384, 385, 386, 0,
	0, 315, 316, 387, 388, 0, 317, 318, 319, 320,
	0, 0, 321, 322, 323, 324, 0, 325, 0, 389,
	326, 327, 328, 390, 391, 0, 0, 329, 0, 0,
	0, 0, 330, 331, 332, 333, 334, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 738,
	0, 743, 335, 0, 0, 0, 0, 181, 182, 183,
	336, 337, 338, 339, 184, 340, 341, 0, 185, 342,
	343, 186, 187, 0, 0, 344, 345, 346, 0, 188,
	347, 0, 0, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 399, 201,
	348, 202, 349, 350, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 351,
	209, 211, 210, 212, 352, 353, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 354, 355, 356, 0, 215,
	0, 216, 0, 0, 0, 0, 217, 357, 0, 358,
	0, 0, 218, 219, 0, 0, 220, 221, 359, 360,
	0, 0, 361, 225, 0, 222, 0, 0, 223, 362,
	224, 363, 364, 365, 366, 367, 0, 368, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 369, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 370, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 371, 246, 372, 247, 248,
	0, 249, 0, 744, 250, 0, 0, 251, 373, 0,
	252, 0, 374, 253, 254, 255, 256, 257, 0, 258,
	375, 259, 376, 260, 0, 261, 262, 263, 264, 265,
	377, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 378, 283, 0, 287, 288, 289, 290, 291,
	0, 293, 379, 292, 294, 295, 0, 296, 284, 285,
	297, 0, 298, 380, 381, 299, 0, 306, 300, 301,
	286, 302, 305, 382, 303, 304, 383, 0, 307, 0,
	308, 309, 310, 311, 312, 313, 314, 0, 384, 385,
	386, 0, 0, 315, 316, 387, 388, 0, 317, 318,
	319, 320, 0, 0, 321, 322, 323, 324, 0, 325,
	0, 389, 326, 327, 328, 390, 391, 0, 0, 329,
	0, 0, 0, 0, 330, 331, 332, 333, 334, 0,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 738, 0, 743, 335, 0, 0, 0, 0, 181,
	182, 183, 336, 337, 338, 339, 184, 340, 341, 0,
	185, 342, 343, 186, 187, 0, 0, 344, 345, 346,
	0, 188, 347, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	399, 201, 348, 202, 349, 350, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 351, 209, 211, 210, 212, 352, 353, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 354, 355, 356,
	0, 215, 0, 216, 0, 0, 0, 0, 217, 357,
	0, 358, 0, 0, 218, 219, 0, 0, 220, 221,
	359, 360, 0, 0, 361, 225, 0, 222, 0, 0,
	223, 362, 224, 363, 364, 365, 366, 367, 0, 368,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 369, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 370, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 371, 246, 372,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	373, 0, 252, 0, 374, 253, 254, 255, 256, 257,
	0, 258, 375, 259, 376, 260, 0, 261, 262, 263,
	264, 265, 377, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 378, 283, 0, 287, 288, 289,
	290, 291, 0, 293, 379, 292, 294, 295, 0, 296,
	284, 285, 297, 0, 298, 380, 381, 299, 0, 306,
	300, 301, 286, 302, 305, 382, 303, 304, 383, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	384, 385, 386, 0, 0, 315, 316, 387, 388, 0,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	0, 325, 0, 389, 326, 327, 328, 390, 391, 0,
	0, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 0, 335, 1210, 0, 0, 0,
	181, 182, 183, 336, 337, 338, 339, 184, 340, 341,
	0, 185, 342, 343, 186, 187, 0, 0, 344, 345,
	346, 0, 188, 347, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 399, 201, 348, 202, 349, 350, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 351, 209, 211, 210, 212, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 354, 355,
	356, 0, 215, 0, 216, 0, 0, 0, 0, 217,
	357, 0, 358, 0, 0, 218, 219, 0, 0, 220,
	221, 359, 360, 0, 0, 361, 225, 0, 222, 0,
	0, 223, 362, 224, 363, 364, 365, 366, 367, 0,
	368, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 369, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 370, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 371, 246,
	372, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 373, 0, 252, 0, 374, 253, 254, 255, 256,
	257, 0, 258, 375, 259, 376, 260, 0, 261, 262,
	263, 264, 265, 377, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 378, 283, 0, 287, 288,
	289, 290, 291, 0, 293, 379, 292, 294, 295, 0,
	296, 284, 285, 297, 0, 298, 380, 381, 299, 0,
	306, 300, 301, 286, 302, 305, 382, 303, 304, 383,
	0, 307, 0, 308, 309, 310, 311, 312, 313, 314,
	0, 384, 385, 386, 0, 0, 315, 316, 387, 388,
	0, 317, 318, 319, 320, 0, 0, 321, 322, 323,
	324, 0, 325, 0, 389, 326, 327, 328, 390, 391,
	0, 0, 329, 0, 0, 0, 0, 330, 331, 332,
	333, 334, 0, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 1673, 335, 0, 0,
	0, 0, 181, 182, 183, 336, 337, 338, 339, 184,
	340, 341, 0, 185, 342, 343, 186, 187, 0, 0,
	344, 345, 346, 0, 188, 347, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 399, 201, 348, 202, 349, 350, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 351, 209, 211, 210, 212, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	354, 355, 356, 0, 215, 0, 216, 0, 0, 0,
	0, 217, 357, 0, 358, 0, 0, 218, 219, 0,
	0, 220, 221, 359, 360, 0, 0, 361, 225, 0,
	222, 0, 0, 223, 362, 224, 363, 364, 365, 366,
	367, 0, 368, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 369, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	370, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	371, 246, 372, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 373, 0, 252, 0, 374, 253, 254,
	255, 256, 257, 0, 258, 375, 259, 376, 260, 0,
	261, 262, 263, 264, 265, 377, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 378, 283, 0,
	287, 288, 289, 290, 291, 0, 293, 379, 292, 294,
	295, 0, 296, 284, 285, 297, 0, 298, 380, 381,
	299, 0, 306, 300, 301, 286, 302, 305, 382, 303,
	304, 383, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 384, 385, 386, 0, 0, 315, 316,
	387, 388, 0, 317, 318, 319, 320, 0, 0, 321,
	322, 323, 324, 0, 325, 0, 389, 326, 327, 328,
	390, 391, 0, 0, 329, 0, 0, 0, 0, 330,
	331, 332, 333, 334, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 2021, 335,
	0, 0, 0, 0, 181, 182, 183, 336, 337, 338,
	339, 184, 340, 341, 0, 185, 342, 343, 186, 187,
	0, 0, 344, 345, 346, 0, 188, 347, 0, 0,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 0, 196, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 199, 200, 399, 201, 348, 202, 349,
	350, 0, 203, 0, 204, 0, 205, 0, 0, 206,
	207, 0, 208, 0, 0, 0, 351, 209, 211, 210,
	212, 352, 353, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 354, 355, 356, 0, 215, 0, 216, 0,
	0, 0, 0, 217, 357, 0, 358, 0, 0, 218,
	219, 0, 0, 220, 221, 359, 360, 0, 0, 361,
	225, 0, 222, 0, 0, 223, 362, 224, 363, 364,
	365, 366, 367, 0, 368, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 369, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 370, 240, 0, 242, 243, 245, 244, 0,
	0, 0, 371, 246, 372, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 373, 0, 252, 0, 374,
	253, 254, 255, 256, 257, 0, 258, 375, 259, 376,
	260, 0, 261, 262, 263, 264, 265, 377, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 0, 281, 282, 378,
	283, 0, 287, 288, 289, 290, 291, 0, 293, 379,
	292, 294, 295, 0, 296, 284, 285, 297, 0, 298,
	380, 381, 299, 0, 306, 300, 301, 286, 302, 305,
	382, 303, 304, 383, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 384, 385, 386, 0, 0,
	315, 316, 387, 388, 0, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 0, 325, 0, 389, 326,
	327, 328, 390, 391, 0, 0, 329, 0, 0, 0,
	0, 330, 331, 332, 333, 334, 0, 629, 618, 619,
	616, 617, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	1097, 335, 0, 0, 0, 0, 181, 182, 183, 336,
	661, 338, 662, 184, 663, 664, 0, 185, 342, 343,
	186, 187, 0, 0, 665, 666, 346, 0, 188, 347,
	0, 828, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 691, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 399, 201, 667,
	202, 668, 669, 0, 203, 0, 204, 0, 205, 0,
	0, 660, 207, 0, 208, 0, 0, 0, 351, 209,
	211, 210, 212, 352, 353, 625, 692, 0, 0, 0,
	0, 0, 213, 214, 670, 671, 672, 0, 215, 0,
	216, 0, 0, 693, 0, 217, 357, 0, 358, 0,
	0, 218, 219, 0, 0, 220, 221, 359, 360, 695,
	0, 361, 225, 0, 222, 0, 694, 223, 673, 224,
	674, 675, 676, 677, 678, 0, 636, 0, 696, 226,
	227, 228, 697, 229, 230, 231, 0, 233, 232, 0,
	369, 698, 234, 699, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 370, 240, 700, 242, 243, 245,
	244, 0, 0, 626, 371, 246, 679, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 373, 701, 252,
	702, 374, 253, 254, 255, 256, 257, 0, 258, 375,
	259, 376, 260, 0, 261, 262, 263, 264, 265, 680,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 703, 281,
	282, 378, 283, 0, 287, 288, 289, 290, 291, 0,
	293, 379, 292, 294, 295, 0, 296, 284, 285, 297,
	704, 298, 681, 381, 299, 0, 306, 300, 301, 286,
	302, 305, 682, 303, 304, 383, 0, 307, 0, 308,
	309, 310, 311, 312, 313, 314, 0, 384, 683, 684,
	0, 0, 315, 316, 387, 388, 624, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 0, 325, 0,
	389, 326, 327, 328, 390, 685, 0, 484, 329, 175,
	0, 0, 0, 330, 331, 332, 333, 334, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 181, 182,
	183, 336, 337, 338, 339, 184, 340, 341, 0, 185,
	342, 343, 186, 187, 0, 0, 344, 345, 346, 0,
	188, 347, 0, 0, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 0, 196, 197, 198,
	0, 0, 0, 0, 0, 0, 0, 199, 200, 171,
	201, 348, 202, 349, 350, 0, 203, 0, 204, 0,
	205, 0, 0, 206, 207, 0, 208, 0, 0, 0,
	351, 209, 211, 210, 212, 352, 353, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 354, 355, 356, 0,
	215, 0, 216, 0, 0, 0, 0, 217, 357, 0,
	358, 0, 0, 218, 219, 0, 0, 220, 221, 359,
	360, 0, 0, 361, 225, 0, 222, 0, 0, 223,
	362, 224, 363, 364, 365, 366, 367, 0, 368, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 369, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 370, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 371, 246, 372, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 373,
	0, 252, 0, 374, 253, 254, 255, 256, 257, 0,
	258, 375, 259, 376, 260, 0, 261, 262, 263, 264,
	265, 377, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	0, 281, 282, 378, 283, 0, 287, 288, 289, 290,
	291, 0, 293, 379, 292, 294, 295, 0, 296, 284,
	285, 297, 0, 298, 380, 381, 299, 0, 306, 300,
	301, 286, 302, 305, 382, 303, 304, 383, 0, 307,
	170, 308, 309, 310, 311, 312, 313, 314, 0, 384,
	385, 386, 0, 0, 315, 316, 387, 388, 0, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 0,
	325, 0, 389, 326, 327, 328, 390, 391, 0, 168,
	329, 175, 0, 0, 0, 330, 331, 332, 333, 334,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 0, 335, 0, 174, 0, 0,
	181, 182, 183, 336, 337, 338, 339, 184, 340, 341,
	0, 185, 342, 343, 186, 187, 0, 0, 344, 345,
	346, 0, 188, 347, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 171, 201, 348, 202, 349, 350, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 351, 209, 211, 210, 212, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 354, 355,
	356, 0, 215, 0, 216, 0, 0, 0, 0, 217,
	357, 0, 358, 0, 0, 218, 219, 0, 0, 220,
	221, 359, 360, 0, 0, 361, 225, 0, 222, 0,
	0, 223, 362, 224, 363, 364, 365, 366, 367, 0,
	368, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 369, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 370, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 371, 246,
	372, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 373, 0, 252, 0, 374, 253, 254, 255, 256,
	257, 0, 258, 375, 259, 376, 260, 0, 261, 262,
	263, 264, 265, 377, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 378, 283, 0, 287, 288,
	289, 290, 291, 0, 293, 379, 292, 294, 295, 0,
	296, 284, 285, 297, 0, 298, 380, 381, 299, 0,
	306, 300, 301, 286, 302, 305, 382, 303, 304, 383,
	0, 307, 170, 308, 309, 310, 311, 312, 313, 314,
	0, 384, 385, 386, 0, 0, 315, 316, 387, 388,
	0, 317, 318, 319, 320, 0, 0, 321, 322, 323,
	324, 0, 325, 0, 389, 326, 327, 328, 390, 391,
	0, 175, 329, 0, 0, 0, 0, 330, 331, 332,
	333, 334, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 0, 335, 0, 0, 0, 174,
	181, 182, 183, 336, 337, 338, 339, 184, 340, 341,
	0, 185, 342, 343, 186, 187, 0, 0, 344, 345,
	346, 0, 188, 347, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 171, 201, 348, 202, 349, 350, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 351, 209, 211, 210, 212, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 354, 355,
	356, 0, 215, 0, 216, 0, 0, 0, 0, 217,
	357, 0, 358, 0, 0, 218, 219, 0, 0, 220,
	221, 359, 360, 0, 0, 361, 225, 0, 222, 0,
	0, 223, 362, 224, 363, 364, 365, 366, 367, 0,
	368, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 369, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 370, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 371, 246,
	372, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 373, 0, 252, 0, 374, 253, 254, 255, 256,
	257, 0, 258, 375, 259, 376, 260, 0, 261, 262,
	263, 264, 265, 377, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 378, 283, 0, 287, 288,
	289, 290, 291, 0, 293, 379, 292, 294, 295, 0,
	296, 284, 285, 297, 0, 298, 380, 381, 299, 0,
	306, 300, 301, 286, 302, 305, 382, 303, 304, 383,
	0, 307, 170, 308, 309, 310, 311, 312, 313, 314,
	0, 384, 385, 386, 0, 0, 315, 316, 387, 388,
	0, 317, 318, 319, 320, 0, 0, 321, 322, 323,
	324, 0, 325, 0, 389, 326, 327, 328, 390, 391,
	0, 175, 329, 0, 0, 0, 0, 330, 331, 332,
	333, 334, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 0, 335, 0, 0, 0, 174,
	181, 182, 183, 336, 337, 338, 339, 184, 340, 341,
	0, 185, 342, 343, 186, 187, 0, 0, 344, 345,
	346, 0, 188, 347, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 399, 201, 348, 202, 349, 350, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 351, 209, 211, 210, 212, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 354, 355,
	356, 0, 215, 0, 216, 0, 0, 0, 0, 217,
	357, 0, 358, 0, 0, 218, 219, 0, 0, 220,
	221, 359, 360, 0, 0, 361, 225, 0, 222, 0,
	0, 223, 362, 224, 363, 364, 365, 366, 367, 0,
	368, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 369, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 370, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 371, 246,
	372, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 373, 0, 252, 0, 374, 253, 254, 255, 256,
	257, 0, 258, 375, 259, 376, 260, 0, 261, 262,
	263, 264, 265, 377, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 378, 283, 0, 287, 288,
	289, 290, 291, 0, 293, 379, 292, 294, 295, 0,
	296, 284, 285, 297, 0, 298, 380, 381, 299, 0,
	306, 300, 301, 286, 302, 305, 382, 303, 304, 383,
	0, 307, 0, 308, 309, 310, 311, 312, 313, 314,
	0, 384, 385, 386, 0, 0, 315, 316, 387, 388,
	0, 317, 318, 319, 320, 0, 0, 321, 322, 323,
	324, 0, 325, 0, 389, 326, 327, 328, 390, 391,
	0, 0, 329, 0, 0, 0, 0, 330, 331, 332,
	333, 334, 878, 0, 823, 882, 0, 0, 0, 880,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	178, 179, 0, 180, 0, 0, 0, 0, 335, 0,
	0, 0, 0, 181, 182, 183, 336, 337, 338, 339,
	184, 340, 341, 0, 185, 342, 343, 186, 187, 0,
	0, 344, 345, 346, 0, 188, 347, 0, 828, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 691, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 399, 201, 348, 202, 349, 350,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 351, 209, 211, 210, 212,
	352, 353, 0, 692, 0, 0, 0, 0, 0, 213,
	214, 354, 355, 356, 0, 215, 0, 216, 0, 0,
	693, 0, 217, 357, 0, 358, 0, 0, 218, 219,
	0, 0, 220, 221, 359, 360, 695, 0, 361, 225,
	0, 222, 0, 694, 223, 362, 224, 363, 364, 365,
	366, 367, 0, 368, 0, 696, 226, 227, 228, 697,
	229, 230, 231, 0, 233, 232, 0, 369, 698, 234,
	699, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 370, 240, 700, 242, 243, 245, 244, 0, 0,
	0, 371, 246, 372, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 373, 701, 252, 702, 374, 253,
	254, 255, 256, 257, 0, 258, 375, 259, 376, 260,
	0, 261, 262, 263, 264, 265, 377, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 703, 281, 282, 378, 283,
	0, 287, 288, 289, 290, 291, 0, 293, 379, 292,
	294, 295, 0, 296, 284, 285, 297, 704, 298, 380,
	381, 299, 0, 306, 300, 301, 286, 302, 305, 382,
	303, 304, 383, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 384, 385, 386, 0, 0, 315,
	316, 387, 388, 0, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 0, 325, 0, 389, 326, 327,
	328, 390, 391, 823, 882, 329, 0, 0, 880, 0,
	330, 331, 332, 333, 334, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 181, 182, 183, 336, 337, 338, 339, 184,
	340, 341, 0, 185, 342, 343, 186, 187, 0, 0,
	344, 345, 346, 0, 188, 347, 0, 828, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	691, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 399, 201, 348, 202, 349, 350, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 351, 209, 211, 210, 212, 352,
	353, 0, 692, 0, 0, 0, 0, 0, 213, 214,
	354, 355, 356, 0, 215, 0, 216, 0, 0, 693,
	0, 217, 357, 0, 358, 0, 0, 218, 219, 0,
	0, 220, 221, 359, 360, 695, 0, 361, 225, 0,
	222, 0, 694, 223, 362, 224, 363, 364, 365, 366,
	367, 0, 368, 0, 696, 226, 227, 228, 697, 229,
	230, 231, 0, 233, 232, 0, 369, 698, 234, 699,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	370, 240, 700, 242, 243, 245, 244, 0, 0, 0,
	371, 246, 372, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 373, 701, 252, 702, 374, 253, 254,
	255, 256, 257, 0, 258, 375, 259, 376, 260, 0,
	261, 262, 263, 264, 265, 377, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 703, 281, 282, 378, 283, 0,
	287, 288, 289, 290, 291, 0, 293, 379, 292, 294,
	295, 0, 296, 284, 285, 297, 704, 298, 380, 381,
	299, 0, 306, 300, 301, 286, 302, 305, 382, 303,
	304, 383, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 384, 385, 386, 0, 0, 315, 316,
	387, 388, 0, 317, 318, 319, 320, 0, 0, 321,
	322, 323, 324, 0, 325, 0, 389, 326, 327, 328,
	390, 391, 823, 882, 329, 0, 0, 0, 0, 330,
	331, 332, 333, 334, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 335, 0, 0, 0,
	0, 181, 182, 183, 336, 337, 338, 339, 184, 340,
	341, 0, 185, 342, 343, 186, 187, 0, 0, 344,
	345, 346, 0, 188, 347, 0, 828, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 691,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 399, 201, 348, 202, 349, 350, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 351, 209, 211, 210, 212, 352, 353,
	0, 692, 0, 0, 0, 0, 0, 213, 214, 354,
	355, 356, 0, 215, 0, 216, 0, 0, 693, 0,
	217, 357, 0, 358, 0, 0, 218, 219, 0, 0,
	220, 221, 359, 360, 695, 0, 361, 225, 0, 222,
	0, 694, 223, 362, 224, 363, 364, 365, 366, 367,
	0, 368, 0, 696, 226, 227, 228, 697, 229, 230,
	231, 0, 233, 232, 0, 369, 698, 234, 699, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 370,
	240, 700, 242, 243, 245, 244, 0, 0, 0, 371,
	246, 372, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 373, 701, 252, 702, 374, 253, 254, 255,
	256, 257, 0, 258, 375, 259, 376, 260, 0, 261,
	262, 263, 264, 265, 377, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 703, 281, 282, 378, 283, 0, 287,
	288, 289, 290, 291, 0, 293, 379, 292, 294, 295,
	0, 296, 284, 285, 297, 704, 298, 380, 381, 299,
	0, 306, 300, 301, 286, 302, 305, 382, 303, 304,
	383, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 384, 385, 386, 0, 0, 315, 316, 387,
	388, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 389, 326, 327, 328, 390,
	391, 823, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	181, 182, 183, 336, 337, 338, 339, 184, 340, 341,
	0, 185, 342, 343, 186, 187, 0, 0, 344, 345,
	346, 0, 188, 347, 0, 828, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 691, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 399, 201, 348, 202, 349, 350, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 351, 209, 211, 210, 212, 352, 353, 0,
	692, 0, 0, 0, 0, 0, 213, 214, 354, 355,
	356, 0, 215, 0, 216, 0, 0, 693, 0, 217,
	357, 0, 358, 0, 0, 218, 219, 0, 0, 220,
	221, 359, 360, 695, 0, 361, 225, 0, 222, 0,
	694, 223, 362, 224, 363, 364, 365, 366, 367, 0,
	368, 0, 696, 226, 227, 228, 697, 229, 230, 231,
	0, 233, 232, 0, 369, 698, 234, 699, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 370, 240,
	700, 242, 243, 245, 244, 0, 0, 0, 371, 246,
	372, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 373, 701, 252, 702, 374, 253, 254, 255, 256,
	257, 0, 258, 375, 259, 376, 260, 0, 261, 262,
	263, 264, 265, 377, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 703, 281, 282, 378, 283, 0, 287, 288,
	289, 290, 291, 0, 293, 379, 292, 294, 295, 0,
	296, 284, 285, 297, 704, 298, 380, 381, 299, 0,
	306, 300, 301, 286, 302, 305, 382, 303, 304, 383,
	0, 307, 0, 308, 309, 310, 311, 312, 313, 314,
	0, 384, 385, 386, 0, 0, 315, 316, 387, 388,
	0, 317, 318, 319, 320, 0, 0, 321, 322, 323,
	324, 0, 325, 0, 389, 326, 327, 328, 390, 391,
	175, 0, 329, 0, 0, 0, 0, 330, 331, 332,
	333, 334, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 335, 0, 0, 0, 0, 181,
	182, 183, 336, 337, 338, 339, 184, 340, 341, 0,
	185, 342, 343, 186, 187, 0, 0, 344, 345, 346,
	1611, 188, 347, 0, 0, 0, 189, 190, 191, 0,
	192, 1609, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	399, 201, 348, 202, 349, 350, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 351, 209, 211, 210, 212, 352, 353, 0, 1650,
	0, 0, 0, 0, 0, 213, 214, 354, 355, 356,
	0, 215, 0, 216, 1614, 0, 0, 0, 217, 357,
	0, 358, 0, 0, 218, 219, 0, 0, 220, 221,
	359, 360, 0, 0, 361, 225, 1648, 222, 0, 0,
	223, 362, 224, 363, 364, 365, 366, 367, 0, 368,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 369, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 370, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 371, 246, 372,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	373, 0, 252, 0, 374, 253, 254, 255, 256, 257,
	0, 258, 375, 259, 376, 260, 1613, 261, 262, 263,
	264, 265, 377, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 378, 283, 0, 287, 288, 289,
	290, 291, 0, 293, 379, 292, 294, 295, 0, 296,
	284, 285, 297, 0, 298, 380, 381, 299, 0, 306,
	300, 301, 286, 302, 305, 382, 303, 304, 383, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	384, 385, 386, 0, 0, 315, 316, 387, 388, 0,
	317, 318, 319, 320, 0, 1649, 321, 322, 323, 324,
	0, 325, 0, 389, 326, 327, 328, 390, 391, 175,
	0, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 0, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 181, 182,
	183, 336, 337, 338, 339, 184, 340, 341, 0, 185,
	342, 343, 186, 187, 0, 0, 344, 345, 346, 1611,
	188, 347, 0, 0, 1606, 189, 190, 191, 0, 192,
	1609, 193, 0, 194, 195, 0, 0, 196, 197, 198,
	0, 0, 0, 0, 0, 0, 0, 199, 200, 399,
	201, 348, 202, 349, 350, 0, 203, 0, 204, 0,
	205, 0, 0, 206, 207, 0, 208, 0, 0, 0,
	351, 209, 211, 210, 212, 352, 353, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 354, 355, 356, 0,
	215, 0, 216, 1614, 0, 0, 0, 217, 357, 0,
	358, 0, 0, 218, 219, 0, 0, 220, 221, 1605,
	360, 0, 0, 361, 225, 0, 222, 0, 0, 223,
	362, 224, 363, 364, 365, 366, 367, 0, 368, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 369, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 370, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 371, 246, 372, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 373,
	0, 252, 0, 374, 253, 254, 255, 256, 257, 0,
	258, 375, 259, 376, 260, 1613, 261, 262, 263, 264,
	265, 377, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	0, 281, 282, 378, 283, 0, 287, 288, 289, 290,
	291, 0, 293, 379, 292, 294, 295, 0, 296, 284,
	285, 297, 0, 298, 380, 381, 299, 0, 306, 300,
	301, 286, 302, 305, 382, 303, 304, 383, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 384,
	385, 386, 0, 0, 315, 316, 387, 388, 0, 317,
	318, 319, 320, 0, 1612, 321, 322, 323, 324, 0,
	325, 0, 389, 326, 327, 328, 390, 391, 0, 798,
	329, 175, 0, 0, 0, 330, 331, 332, 333, 334,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	181, 182, 183, 336, 337, 338, 339, 184, 340, 341,
	0, 185, 342, 343, 186, 187, 0, 0, 344, 345,
	346, 0, 188, 347, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 399, 201, 348, 202, 349, 350, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 351, 209, 211, 210, 212, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 354, 355,
	356, 0, 215, 0, 216, 0, 0, 0, 0, 217,
	357, 0, 358, 0, 0, 218, 219, 0, 0, 220,
	221, 359, 360, 0, 0, 361, 225, 0, 222, 0,
	0, 223, 362, 224, 363, 364, 365, 366, 367, 0,
	368, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 369, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 370, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 371, 246,
	372, 247, 248, 0, 249, 0, 744, 250, 0, 0,
	251, 373, 0, 252, 0, 374, 253, 254, 255, 256,
	257, 0, 258, 375, 259, 376, 260, 0, 261, 262,
	263, 264, 265, 377, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 378, 283, 0, 287, 288,
	289, 290, 291, 0, 293, 379, 292, 294, 295, 0,
	296, 284, 285, 297, 0, 298, 380, 381, 299, 0,
	306, 300, 301, 286, 302, 305, 382, 303, 304, 383,
	0, 307, 0, 308, 309, 310, 311, 312, 313, 314,
	0, 384, 385, 386, 0, 0, 315, 316, 387, 388,
	0, 317, 318, 319, 320, 0, 0, 321, 322, 323,
	324, 0, 325, 0, 389, 326, 327, 328, 390, 391,
	0, 750, 329, 175, 0, 0, 0, 330, 331, 332,
	333, 334, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 181, 182, 183, 336, 337, 338, 339, 184,
	340, 341, 0, 185, 342, 343, 186, 187, 0, 0,
	344, 345, 346, 0, 188, 347, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 399, 201, 348, 202, 349, 350, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 351, 209, 211, 210, 212, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	354, 355, 356, 0, 215, 0, 216, 0, 0, 0,
	0, 217, 357, 0, 358, 0, 0, 218, 219, 0,
	0, 220, 221, 752, 360, 0, 0, 361, 225, 0,
	222, 0, 0, 223, 362, 224, 363, 364, 365, 366,
	367, 0, 368, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 369, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	370, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	371, 246, 372, 247, 248, 0, 249, 0, 744, 250,
	0, 0, 251, 373, 0, 252, 0, 374, 253, 254,
	255, 256, 257, 0, 258, 375, 259, 376, 260, 0,
	261, 262, 263, 264, 265, 377, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 378, 283, 0,
	287, 288, 289, 290, 291, 0, 293, 379, 292, 294,
	295, 0, 296, 284, 285, 297, 0, 298, 380, 381,
	299, 0, 306, 300, 301, 286, 302, 305, 382, 303,
	304, 383, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 384, 385, 386, 0, 0, 315, 316,
	387, 388, 0, 317, 318, 319, 320, 0, 0, 321,
	322, 323, 324, 0, 325, 0, 389, 326, 327, 328,
	390, 391, 0, 746, 329, 175, 0, 0, 0, 330,
	331, 332, 333, 334, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 181, 182, 183, 336, 337, 338,
	339, 184, 340, 341, 0, 185, 342, 343, 186, 187,
	0, 0, 344, 345, 346, 0, 188, 347, 0, 0,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 0, 196, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 199, 200, 399, 201, 348, 202, 349,
	350, 0, 203, 0, 204, 0, 205, 0, 0, 206,
	207, 0, 208, 0, 0, 0, 351, 209, 211, 210,
	212, 352, 353, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 354, 355, 356, 0, 215, 0, 216, 0,
	0, 0, 0, 217, 357, 0, 358, 0, 0, 218,
	219, 0, 0, 220, 221, 748, 360, 0, 0, 361,
	225, 0, 222, 0, 0, 223, 362, 224, 363, 364,
	365, 366, 367, 0, 368, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 369, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 370, 240, 0, 242, 243, 245, 244, 0,
	0, 0, 371, 246, 372, 247, 248, 0, 249, 0,
	744, 250, 0, 0, 251, 373, 0, 252, 0, 374,
	253, 254, 255, 256, 257, 0, 258, 375, 259, 376,
	260, 0, 261, 262, 263, 264, 265, 377, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 0, 281, 282, 378,
	283, 0, 287, 288, 289, 290, 291, 0, 293, 379,
	292, 294, 295, 0, 296, 284, 285, 297, 0, 298,
	380, 381, 299, 0, 306, 300, 301, 286, 302, 305,
	382, 303, 304, 383, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 384, 385, 386, 0, 0,
	315, 316, 387, 388, 0, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 0, 325, 0, 389, 326,
	327, 328, 390, 391, 0, 416, 329, 175, 0, 0,
	0, 330, 331, 332, 333, 334, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 415, 180, 0, 0, 0,
	0, 335, 0, 0, 0, 0, 181, 182, 183, 336,
	337, 338, 339, 184, 340, 341, 0, 185, 342, 343,
	186, 187, 0, 0, 344, 345, 346, 0, 188, 347,
	0, 0, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 0, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 399, 201, 348,
	202, 349, 350, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 351, 209,
	211, 210, 212, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 354, 355, 356, 0, 215, 0,
	216, 0, 0, 0, 0, 217, 357, 0, 358, 0,
	0, 218, 219, 0, 0, 220, 221, 359, 360, 0,
	0, 361, 225, 0, 222, 0, 0, 223, 362, 224,
	363, 364, 365, 366, 367, 0, 368, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	369, 0, 234, 0, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 370, 240, 0, 242, 243, 245,
	244, 0, 0, 0, 371, 246, 372, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 373, 0, 252,
	0, 374, 253, 254, 255, 256, 257, 0, 258, 375,
	259, 376, 414, 0, 261, 262, 263, 264, 265, 377,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 0, 281,
	282, 378, 283, 0, 287, 288, 289, 290, 291, 0,
	293, 379, 292, 294, 295, 0, 296, 284, 285, 297,
	0, 298, 380, 381, 299, 0, 306, 300, 301, 286,
	302, 305, 382, 303, 304, 383, 0, 307, 0, 308,
	309, 310, 311, 312, 313, 314, 0, 384, 385, 386,
	0, 0, 315, 316, 387, 388, 0, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 0, 325, 0,
	389, 326, 327, 328, 390, 391, 175, 0, 329, 0,
	0, 0, 0, 330, 331, 332, 333, 334, 0, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 0,
	335, 0, 1594, 0, 0, 181, 182, 183, 336, 337,
	338, 339, 184, 340, 341, 0, 185, 342, 343, 186,
	187, 0, 0, 344, 345, 346, 0, 188, 347, 0,
	0, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 0, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 399, 201, 348, 202,
	349, 350, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 351, 209, 211,
	210, 212, 352, 353, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 354, 355, 356, 0, 215, 0, 216,
	0, 0, 0, 0, 217, 357, 0, 358, 0, 0,
	218, 219, 0, 0, 220, 221, 359, 360, 0, 0,
	361, 225, 0, 222, 0, 0, 223, 362, 224, 363,
	364, 365, 366, 367, 0, 368, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 369,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 370, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 371, 246, 372, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 373, 0, 252, 0,
	374, 253, 254, 255, 256, 257, 0, 258, 375, 259,
	376, 260, 0, 261, 262, 263, 264, 265, 377, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 0, 281, 282,
	378, 283, 0, 287, 288, 289, 290, 291, 0, 293,
	379, 292, 294, 295, 0, 296, 284, 285, 297, 0,
	298, 380, 381, 299, 0, 306, 300, 301, 286, 302,
	305, 382, 303, 304, 383, 0, 307, 0, 308, 309,
	310, 311, 312, 313, 314, 0, 384, 385, 386, 0,
	0, 315, 316, 387, 388, 0, 317, 318, 319, 320,
	0, 0, 321, 322, 323, 324, 0, 325, 0, 389,
	326, 327, 328, 390, 391, 175, 2166, 329, 0, 0,
	0, 0, 330, 331, 332, 333, 334, 0, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 181, 182, 183, 336, 337, 338,
	339, 184, 340, 341, 0, 185, 342, 343, 186, 187,
	0, 0, 344, 345, 346, 0, 188, 347, 0, 0,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 0, 196, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 199, 200, 399, 201, 348, 202, 349,
	350, 0, 203, 0, 204, 0, 205, 0, 0, 206,
	207, 0, 208, 0, 0, 0, 351, 209, 211, 210,
	212, 352, 353, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 354, 355, 356, 0, 215, 0, 216, 0,
	0, 0, 0, 217, 357, 0, 358, 0, 0, 218,
	219, 0, 0, 220, 221, 359, 360, 0, 0, 361,
	225, 0, 222, 0, 0, 223, 362, 224, 363, 364,
	365, 366, 367, 0, 368, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 369, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 370, 240, 0, 242, 243, 245, 244, 0,
	0, 0, 371, 246, 372, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 373, 0, 252, 0, 374,
	253, 254, 255, 256, 257, 0, 258, 375, 259, 376,
	260, 0, 261, 262, 263, 264, 265, 377, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 0, 281, 282, 378,
	283, 0, 287, 288, 289, 290, 291, 0, 293, 379,
	292, 294, 295, 0, 296, 284, 285, 297, 0, 298,
	380, 381, 299, 0, 306, 300, 301, 286, 302, 305,
	382, 303, 304, 383, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 384, 385, 386, 0, 0,
	315, 316, 387, 388, 0, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 0, 325, 0, 389, 326,
	327, 328, 390, 391, 175, 2166, 329, 0, 0, 0,
	0, 330, 331, 332, 333, 334, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 0, 335, 0,
	0, 0, 0, 181, 182, 183, 336, 337, 338, 339,
	184, 340, 341, 0, 185, 342, 343, 186, 187, 0,
	0, 344, 345, 346, 0, 188, 347, 0, 0, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 0, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 399, 201, 348, 202, 349, 350,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 351, 209, 211, 210, 212,
	352, 353, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 354, 355, 356, 0, 215, 0, 216, 0, 0,
	0, 0, 217, 357, 0, 358, 0, 0, 218, 219,
	0, 0, 220, 221, 359, 360, 0, 0, 361, 225,
	0, 222, 0, 0, 223, 362, 224, 363, 364, 365,
	366, 367, 0, 368, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 369, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 370, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 371, 246, 372, 247, 248, 0, 249, 0, 0,
	2163, 0, 0, 251, 373, 0, 252, 0, 374, 253,
	254, 255, 256, 257, 0, 258, 375, 259, 376, 260,
	0, 261, 262, 263, 264, 265, 377, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 0, 281, 282, 378, 283,
	0, 287, 288, 289, 290, 291, 0, 293, 379, 292,
	294, 295, 0, 296, 284, 285, 297, 0, 298, 380,
	381, 299, 0, 306, 300, 301, 286, 302, 305, 382,
	303, 304, 383, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 384, 385, 386, 0, 0, 315,
	316, 387, 388, 0, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 0, 325, 0, 389, 326, 327,
	328, 390, 391, 175, 0, 329, 0, 0, 0, 0,
	330, 331, 332, 333, 334, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 181, 182, 183, 336, 337, 338, 339, 184,
	340, 341, 0, 185, 342, 343, 186, 187, 0, 0,
	344, 345, 346, 0, 188, 347, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 399, 201, 348, 202, 349, 350, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 351, 209, 211, 210, 212, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	354, 355, 356, 0, 215, 0, 216, 0, 0, 0,
	0, 217, 357, 0, 358, 0, 0, 218, 219, 0,
	0, 220, 221, 359, 360, 0, 0, 361, 225, 0,
	222, 0, 0, 223, 362, 224, 363, 364, 365, 366,
	367, 0, 368, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 369, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	370, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	371, 246, 372, 247, 248, 0, 249, 0, 744, 250,
	0, 0, 251, 373, 0, 252, 0, 374, 253, 254,
	255, 256, 257, 0, 258, 375, 259, 376, 260, 0,
	261, 262, 263, 264, 265, 377, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 378, 283, 0,
	287, 288, 289, 290, 291, 0, 293, 379, 292, 294,
	295, 0, 296, 284, 285, 297, 0, 298, 380, 381,
	299, 0, 306, 300, 301, 286, 302, 305, 382, 303,
	304, 383, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 384, 385, 386, 0, 0, 315, 316,
	387, 388, 0, 317, 318, 319, 320, 0, 0, 321,
	322, 323, 324, 0, 325, 0, 389, 326, 327, 328,
	390, 391, 0, 1366, 329, 175, 0, 0, 0, 330,
	331, 332, 333, 334, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 181, 182, 183, 336, 337, 338,
	339, 184, 340, 341, 0, 185, 342, 343, 186, 187,
	0, 0, 344, 345, 346, 0, 188, 347, 0, 0,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 0, 196, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 199, 200, 399, 201, 348, 202, 349,
	350, 0, 203, 0, 204, 0, 205, 0, 0, 206,
	207, 0, 208, 0, 0, 0, 351, 209, 211, 210,
	212, 352, 353, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 354, 355, 356, 0, 215, 0, 216, 0,
	0, 0, 0, 217, 357, 0, 358, 0, 0, 218,
	219, 0, 0, 220, 221, 359, 360, 0, 0, 361,
	225, 0, 222, 0, 0, 223, 362, 224, 363, 364,
	365, 366, 367, 0, 368, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 369, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 370, 240, 0, 242, 243, 245, 244, 0,
	0, 0, 371, 246, 372, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 373, 0, 252, 0, 374,
	253, 254, 255, 256, 257, 0, 258, 375, 259, 376,
	260, 0, 261, 262, 263, 264, 265, 377, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 0, 281, 282, 378,
	283, 0, 287, 288, 289, 290, 291, 0, 293, 379,
	292, 294, 295, 0, 296, 284, 285, 297, 0, 298,
	380, 381, 299, 0, 306, 300, 301, 286, 302, 305,
	382, 303, 304, 383, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 384, 385, 386, 0, 0,
	315, 316, 387, 388, 0, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 0, 325, 0, 389, 326,
	327, 328, 390, 391, 0, 1364, 329, 175, 0, 0,
	0, 330, 331, 332, 333, 334, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	0, 335, 0, 0, 0, 0, 181, 182, 183, 336,
	337, 338, 339, 184, 340, 341, 0, 185, 342, 343,
	186, 187, 0, 0, 344, 345, 346, 0, 188, 347,
	0, 0, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 0, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 399, 201, 348,
	202, 349, 350, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 351, 209,
	211, 210, 212, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 354, 355, 356, 0, 215, 0,
	216, 0, 0, 0, 0, 217, 357, 0, 358, 0,
	0, 218, 219, 0, 0, 220, 221, 359, 360, 0,
	0, 361, 225, 0, 222, 0, 0, 223, 362, 224,
	363, 364, 365, 366, 367, 0, 368, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	369, 0, 234, 0, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 370, 240, 0, 242, 243, 245,
	244, 0, 0, 0, 371, 246, 372, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 373, 0, 252,
	0, 374, 253, 254, 255, 256, 257, 0, 258, 375,
	259, 376, 260, 0, 261, 262, 263, 264, 265, 377,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 0, 281,
	282, 378, 283, 0, 287, 288, 289, 290, 291, 0,
	293, 379, 292, 294, 295, 0, 296, 284, 285, 297,
	0, 298, 380, 381, 299, 0, 306, 300, 301, 286,
	302, 305, 382, 303, 304, 383, 0, 307, 0, 308,
	309, 310, 311, 312, 313, 314, 0, 384, 385, 386,
	0, 0, 315, 316, 387, 388, 0, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 0, 325, 0,
	389, 326, 327, 328, 390, 391, 175, 0, 329, 0,
	0, 0, 0, 330, 331, 332, 333, 334, 0, 0,
	0, 0, 178, 179, 1346, 180, 0, 0, 0, 0,
	335, 0, 0, 0, 0, 181, 182, 183, 336, 337,
	338, 339, 184, 340, 341, 0, 185, 342, 343, 186,
	187, 0, 0, 344, 345, 346, 0, 188, 347, 0,
	0, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 0, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 399, 201, 348, 202,
	349, 350, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 351, 209, 211,
	210, 212, 352, 353, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 354, 355, 356, 0, 215, 0, 216,
	0, 0, 0, 0, 217, 357, 0, 358, 0, 0,
	218, 219, 0, 0, 220, 221, 359, 360, 0, 0,
	361, 225, 0, 222, 0, 0, 223, 362, 224, 363,
	364, 365, 366, 367, 0, 368, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 369,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 370, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 371, 246, 372, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 373, 0, 252, 0,
	374, 253, 254, 255, 256, 257, 0, 258, 375, 259,
	376, 260, 0, 261, 262, 263, 264, 265, 377, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 0, 281, 282,
	378, 283, 0, 287, 288, 289, 290, 291, 0, 293,
	379, 292, 294, 295, 0, 296, 284, 285, 297, 0,
	298, 380, 381, 299, 0, 306, 300, 301, 286, 302,
	305, 382, 303, 304, 383, 0, 307, 0, 308, 309,
	310, 311, 312, 313, 314, 0, 384, 385, 386, 0,
	0, 315, 316, 387, 388, 0, 317, 318, 319, 320,
	0, 0, 321, 322, 323, 324, 0, 325, 0, 389,
	326, 327, 328, 390, 391, 0, 510, 329, 175, 0,
	0, 0, 330, 331, 332, 333, 334, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 181, 182, 183,
	336, 337, 338, 339, 184, 340, 341, 0, 185, 342,
	343, 186, 187, 0, 0, 344, 345, 857, 0, 188,
	347, 0, 0, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 399, 201,
	348, 202, 349, 350, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 351,
	209, 211, 210, 212, 352, 353, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 354, 355, 356, 0, 215,
	0, 216, 0, 0, 0, 0, 217, 357, 0, 358,
	0, 0, 218, 219, 0, 0, 220, 221, 359, 360,
	0, 0, 361, 225, 0, 222, 0, 0, 223, 362,
	224, 363, 364, 365, 366, 367, 0, 368, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 369, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 370, 512, 0, 242, 243,
	245, 244, 0, 0, 0, 371, 246, 372, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 373, 0,
	252, 0, 374, 253, 254, 255, 256, 257, 0, 258,
	375, 259, 376, 260, 0, 261, 262, 263, 264, 265,
	377, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 378, 283, 0, 287, 288, 289, 290, 291,
	0, 293, 379, 292, 294, 295, 0, 296, 284, 285,
	297, 0, 298, 380, 381, 299, 0, 306, 300, 301,
	286, 302, 305, 382, 303, 304, 383, 0, 307, 0,
	308, 309, 310, 311, 312, 313, 314, 0, 507, 385,
	386, 0, 0, 315, 316, 387, 388, 0, 317, 318,
	319, 320, 0, 0, 321, 322, 323, 324, 0, 325,
	0, 389, 326, 327, 328, 390, 391, 0, 1224, 329,
	175, 0, 0, 0, 330, 331, 332, 333, 334, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 335, 0, 0, 0, 0, 181,
	182, 183, 336, 337, 338, 339, 184, 340, 341, 0,
	185, 342, 343, 186, 187, 0, 0, 344, 345, 346,
	0, 188, 347, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	399, 201, 348, 202, 349, 350, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 351, 209, 211, 210, 212, 352, 353, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 354, 355, 356,
	0, 215, 0, 216, 0, 0, 0, 0, 217, 357,
	0, 358, 0, 0, 218, 219, 0, 0, 220, 221,
	1223, 360, 0, 0, 361, 225, 0, 222, 0, 0,
	223, 362, 224, 363, 364, 365, 366, 367, 0, 368,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 369, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 370, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 371, 246, 372,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	373, 0, 252, 0, 374, 253, 254, 255, 256, 257,
	0, 258, 375, 259, 376, 260, 0, 261, 262, 263,
	264, 265, 377, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 378, 283, 0, 287, 288, 289,
	290, 291, 0, 293, 379, 292, 294, 295, 0, 296,
	284, 285, 297, 0, 298, 380, 381, 299, 0, 306,
	300, 301, 286, 302, 305, 382, 303, 304, 383, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	384, 385, 386, 0, 0, 315, 316, 387, 388, 0,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	0, 325, 0, 389, 326, 327, 328, 390, 391, 0,
	510, 329, 175, 0, 0, 0, 330, 331, 332, 333,
	334, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 335, 0, 0, 0,
	0, 181, 182, 183, 336, 337, 338, 339, 184, 340,
	341, 0, 185, 342, 343, 186, 187, 0, 0, 344,
	345, 857, 0, 188, 347, 0, 0, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 399, 201, 348, 202, 349, 350, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 351, 209, 211, 210, 212, 352, 353,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 354,
	355, 356, 0, 215, 0, 216, 0, 0, 0, 0,
	217, 357, 0, 358, 0, 0, 218, 219, 0, 0,
	220, 221, 359, 360, 0, 0, 361, 225, 0, 222,
	0, 0, 223, 362, 224, 363, 364, 365, 366, 367,
	0, 368, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 369, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 370,
	512, 0, 242, 243, 245, 244, 0, 0, 0, 371,
	246, 372, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 373, 0, 252, 0, 374, 253, 254, 255,
	256, 257, 0, 258, 375, 259, 376, 260, 0, 261,
	262, 263, 264, 265, 377, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 378, 283, 0, 287,
	288, 289, 290, 291, 0, 293, 379, 292, 294, 295,
	0, 296, 284, 285, 297, 0, 298, 380, 381, 299,
	0, 306, 300, 301, 286, 302, 305, 382, 303, 304,
	383, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 507, 385, 386, 0, 0, 315, 858, 387,
	388, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 389, 326, 327, 328, 390,
	391, 0, 510, 329, 175, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 0, 335, 0,
	0, 0, 0, 181, 182, 183, 336, 337, 338, 339,
	184, 340, 341, 0, 185, 342, 343, 186, 187, 0,
	0, 344, 345, 346, 0, 501, 347, 0, 0, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 0, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 399, 201, 348, 202, 349, 350,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 351, 209, 211, 210, 212,
	352, 353, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 354, 355, 356, 0, 215, 0, 216, 0, 0,
	0, 0, 217, 357, 0, 358, 0, 0, 218, 219,
	0, 0, 220, 221, 359, 360, 0, 0, 361, 225,
	0, 222, 0, 0, 223, 362, 224, 363, 364, 365,
	366, 367, 0, 368, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 369, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 370, 512, 0, 242, 243, 245, 244, 0, 0,
	0, 371, 246, 372, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 373, 0, 252, 0, 374, 253,
	254, 255, 256, 257, 0, 258, 375, 259, 376, 260,
	0, 261, 262, 263, 264, 265, 377, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 0, 281, 282, 378, 283,
	0, 287, 288, 289, 290, 291, 0, 293, 379, 292,
	841, 295, 0, 296, 284, 285, 297, 0, 298, 380,
	381, 299, 0, 306, 300, 301, 286, 302, 305, 382,
	303, 304, 383, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 507, 385, 386, 0, 0, 315,
	316, 387, 388, 0, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 0, 325, 0, 389, 326, 327,
	328, 390, 391, 0, 816, 329, 175, 0, 0, 0,
	330, 331, 332, 333, 334, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 0,
	335, 0, 0, 0, 0, 181, 182, 183, 336, 337,
	338, 339, 184, 340, 341, 0, 185, 342, 343, 186,
	187, 0, 0, 344, 345, 346, 0, 188, 347, 0,
	0, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 0, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 399, 201, 348, 202,
	349, 350, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 351, 209, 211,
	210, 212, 352, 353, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 354, 355, 356, 0, 215, 0, 216,
	0, 0, 0, 0, 217, 357, 0, 358, 0, 0,
	218, 219, 0, 0, 220, 221, 815, 360, 0, 0,
	361, 225, 0, 222, 0, 0, 223, 362, 224, 363,
	364, 365, 366, 367, 0, 368, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 369,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 370, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 371, 246, 372, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 373, 0, 252, 0,
	374, 253, 254, 255, 256, 257, 0, 258, 375, 259,
	376, 260, 0, 261, 262, 263, 264, 265, 377, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 0, 281, 282,
	378, 283, 0, 287, 288, 289, 290, 291, 0, 293,
	379, 292, 294, 295, 0, 296, 284, 285, 297, 0,
	298, 380, 381, 299, 0, 306, 300, 301, 286, 302,
	305, 382, 303, 304, 383, 0, 307, 0, 308, 309,
	310, 311, 312, 313, 314, 0, 384, 385, 386, 0,
	0, 315, 316, 387, 388, 0, 317, 318, 319, 320,
	0, 0, 321, 322, 323, 324, 0, 325, 0, 389,
	326, 327, 328, 390, 391, 0, 813, 329, 175, 0,
	0, 0, 330, 331, 332, 333, 334, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 181, 182, 183,
	336, 337, 338, 339, 184, 340, 341, 0, 185, 342,
	343, 186, 187, 0, 0, 344, 345, 346, 0, 188,
	347, 0, 0, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 399, 201,
	348, 202, 349, 350, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 351,
	209, 211, 210, 212, 352, 353, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 354, 355, 356, 0, 215,
	0, 216, 0, 0, 0, 0, 217, 357, 0, 358,
	0, 0, 218, 219, 0, 0, 220, 221, 812, 360,
	0, 0, 361, 225, 0, 222, 0, 0, 223, 362,
	224, 363, 364, 365, 366, 367, 0, 368, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 369, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 370, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 371, 246, 372, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 373, 0,
	252, 0, 374, 253, 254, 255, 256, 257, 0, 258,
	375, 259, 376, 260, 0, 261, 262, 263, 264, 265,
	377, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 378, 283, 0, 287, 288, 289, 290, 291,
	0, 293, 379, 292, 294, 295, 0, 296, 284, 285,
	297, 0, 298, 380, 381, 299, 0, 306, 300, 301,
	286, 302, 305, 382, 303, 304, 383, 0, 307, 0,
	308, 309, 310, 311, 312, 313, 314, 0, 384, 385,
	386, 0, 0, 315, 316, 387, 388, 0, 317, 318,
	319, 320, 0, 0, 321, 322, 323, 324, 0, 325,
	0, 389, 326, 327, 328, 390, 391, 0, 809, 329,
	175, 0, 0, 0, 330, 331, 332, 333, 334, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 335, 0, 0, 0, 0, 181,
	182, 183, 336, 337, 338, 339, 184, 340, 341, 0,
	185, 342, 343, 186, 187, 0, 0, 344, 345, 346,
	0, 188, 347, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	399, 201, 348, 202, 349, 350, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 351, 209, 211, 210, 212, 352, 353, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 354, 355, 356,
	0, 215, 0, 216, 0, 0, 0, 0, 217, 357,
	0, 358, 0, 0, 218, 219, 0, 0, 220, 221,
	808, 360, 0, 0, 361, 225, 0, 222, 0, 0,
	223, 362, 224, 363, 364, 365, 366, 367, 0, 368,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 369, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 370, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 371, 246, 372,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	373, 0, 252, 0, 374, 253, 254, 255, 256, 257,
	0, 258, 375, 259, 376, 260, 0, 261, 262, 263,
	264, 265, 377, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 378, 283, 0, 287, 288, 289,
	290, 291, 0, 293, 379, 292, 294, 295, 0, 296,
	284, 285, 297, 0, 298, 380, 381, 299, 0, 306,
	300, 301, 286, 302, 305, 382, 303, 304, 383, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	384, 385, 386, 0, 0, 315, 316, 387, 388, 0,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	0, 325, 0, 389, 326, 327, 328, 390, 391, 0,
	806, 329, 175, 0, 0, 0, 330, 331, 332, 333,
	334, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 335, 0, 0, 0,
	0, 181, 182, 183, 336, 337, 338, 339, 184, 340,
	341, 0, 185, 342, 343, 186, 187, 0, 0, 344,
	345, 346, 0, 188, 347, 0, 0, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 399, 201, 348, 202, 349, 350, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 351, 209, 211, 210, 212, 352, 353,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 354,
	355, 356, 0, 215, 0, 216, 0, 0, 0, 0,
	217, 357, 0, 358, 0, 0, 218, 219, 0, 0,
	220, 221, 805, 360, 0, 0, 361, 225, 0, 222,
	0, 0, 223, 362, 224, 363, 364, 365, 366, 367,
	0, 368, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 369, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 370,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 371,
	246, 372, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 373, 0, 252, 0, 374, 253, 254, 255,
	256, 257, 0, 258, 375, 259, 376, 260, 0, 261,
	262, 263, 264, 265, 377, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 378, 283, 0, 287,
	288, 289, 290, 291, 0, 293, 379, 292, 294, 295,
	0, 296, 284, 285, 297, 0, 298, 380, 381, 299,
	0, 306, 300, 301, 286, 302, 305, 382, 303, 304,
	383, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 384, 385, 386, 0, 0, 315, 316, 387,
	388, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 389, 326, 327, 328, 390,
	391, 0, 802, 329, 175, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 0, 335, 0,
	0, 0, 0, 181, 182, 183, 336, 337, 338, 339,
	184, 340, 341, 0, 185, 342, 343, 186, 187, 0,
	0, 344, 345, 346, 0, 188, 347, 0, 0, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 0, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 399, 201, 348, 202, 349, 350,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 351, 209, 211, 210, 212,
	352, 353, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 354, 355, 356, 0, 215, 0, 216, 0, 0,
	0, 0, 217, 357, 0, 358, 0, 0, 218, 219,
	0, 0, 220, 221, 801, 360, 0, 0, 361, 225,
	0, 222, 0, 0, 223, 362, 224, 363, 364, 365,
	366, 367, 0, 368, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 369, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 370, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 371, 246, 372, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 373, 0, 252, 0, 374, 253,
	254, 255, 256, 257, 0, 258, 375, 259, 376, 260,
	0, 261, 262, 263, 264, 265, 377, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 0, 281, 282, 378, 283,
	0, 287, 288, 289, 290, 291, 0, 293, 379, 292,
	294, 295, 0, 296, 284, 285, 297, 0, 298, 380,
	381, 299, 0, 306, 300, 301, 286, 302, 305, 382,
	303, 304, 383, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 384, 385, 386, 0, 0, 315,
	316, 387, 388, 0, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 0, 325, 0, 389, 326, 327,
	328, 390, 391, 175, 0, 329, 0, 0, 0, 0,
	330, 331, 332, 333, 334, 0, 0, 0, 0, 178,
	179, 790, 180, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 181, 182, 183, 336, 337, 338, 339, 184,
	340, 341, 0, 185, 342, 343, 186, 187, 0, 0,
	344, 345, 346, 0, 188, 347, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 399, 201, 348, 202, 349, 350, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 351, 209, 211, 210, 212, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	354, 355, 356, 0, 215, 0, 216, 0, 0, 0,
	0, 217, 357, 0, 358, 0, 0, 218, 219, 0,
	0, 220, 221, 359, 360, 0, 0, 361, 225, 0,
	222, 0, 0, 223, 362, 224, 363, 364, 365, 366,
	367, 0, 368, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 369, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	370, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	371, 246, 372, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 373, 0, 252, 0, 374, 253, 254,
	255, 256, 257, 0, 258, 375, 259, 376, 260, 0,
	261, 262, 263, 264, 265, 377, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 378, 283, 0,
	287, 288, 289, 290, 291, 0, 293, 379, 292, 294,
	295, 0, 296, 284, 285, 297, 0, 298, 380, 381,
	299, 0, 306, 300, 301, 286, 302, 305, 382, 303,
	304, 383, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 384, 385, 386, 0, 0, 315, 316,
	387, 388, 0, 317, 318, 319, 320, 0, 0, 321,
	322, 323, 324, 0, 325, 0, 389, 326, 327, 328,
	390, 391, 0, 788, 329, 175, 0, 0, 0, 330,
	331, 332, 333, 334, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 181, 182, 183, 336, 337, 338,
	339, 184, 340, 341, 0, 185, 342, 343, 186, 187,
	0, 0, 344, 345, 346, 0, 188, 347, 0, 0,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 0, 196, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 199, 200, 399, 201, 348, 202, 349,
	350, 0, 203, 0, 204, 0, 205, 0, 0, 206,
	207, 0, 208, 0, 0, 0, 351, 209, 211, 210,
	212, 352, 353, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 354, 355, 356, 0, 215, 0, 216, 0,
	0, 0, 0, 217, 357, 0, 358, 0, 0, 218,
	219, 0, 0, 220, 221, 787, 360, 0, 0, 361,
	225, 0, 222, 0, 0, 223, 362, 224, 363, 364,
	365, 366, 367, 0, 368, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 369, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 370, 240, 0, 242, 243, 245, 244, 0,
	0, 0, 371, 246, 372, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 373, 0, 252, 0, 374,
	253, 254, 255, 256, 257, 0, 258, 375, 259, 376,
	260, 0, 261, 262, 263, 264, 265, 377, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 0, 281, 282, 378,
	283, 0, 287, 288, 289, 290, 291, 0, 293, 379,
	292, 294, 295, 0, 296, 284, 285, 297, 0, 298,
	380, 381, 299, 0, 306, 300, 301, 286, 302, 305,
	382, 303, 304, 383, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 384, 385, 386, 0, 0,
	315, 316, 387, 388, 0, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 0, 325, 0, 389, 326,
	327, 328, 390, 391, 0, 784, 329, 175, 0, 0,
	0, 330, 331, 332, 333, 334, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	0, 335, 0, 0, 0, 0, 181, 182, 183, 336,
	337, 338, 339, 184, 340, 341, 0, 185, 342, 343,
	186, 187, 0, 0, 344, 345, 346, 0, 188, 347,
	0, 0, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 0, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 399, 201, 348,
	202, 349, 350, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 351, 209,
	211, 210, 212, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 354, 355, 356, 0, 215, 0,
	216, 0, 0, 0, 0, 217, 357, 0, 358, 0,
	0, 218, 219, 0, 0, 220, 221, 359, 360, 0,
	0, 361, 225, 0, 222, 0, 0, 223, 362, 224,
	363, 364, 365, 366, 367, 0, 368, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	369, 0, 234, 0, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 370, 240, 0, 242, 243, 245,
	244, 0, 0, 0, 371, 246, 372, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 373, 0, 252,
	0, 374, 253, 254, 255, 256, 257, 0, 258, 375,
	259, 376, 260, 0, 261, 262, 263, 264, 265, 377,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 0, 281,
	282, 378, 283, 0, 287, 288, 289, 290, 291, 0,
	293, 379, 292, 294, 295, 0, 296, 284, 285, 297,
	0, 298, 380, 381, 299, 0, 306, 300, 301, 286,
	302, 305, 382, 303, 304, 383, 0, 307, 0, 308,
	309, 310, 311, 312, 313, 314, 0, 384, 385, 386,
	0, 0, 315, 316, 387, 388, 0, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 0, 325, 0,
	389, 326, 327, 328, 390, 391, 0, 782, 329, 175,
	0, 0, 0, 330, 331, 332, 333, 334, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 181, 182,
	183, 336, 337, 338, 339, 184, 340, 341, 0, 185,
	342, 343, 186, 187, 0, 0, 344, 345, 346, 0,
	188, 347, 0, 0, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 0, 196, 197, 198,
	0, 0, 0, 0, 0, 0, 0, 199, 200, 399,
	201, 348, 202, 349, 350, 0, 203, 0, 204, 0,
	205, 0, 0, 206, 207, 0, 208, 0, 0, 0,
	351, 209, 211, 210, 212, 352, 353, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 354, 355, 356, 0,
	215, 0, 216, 0, 0, 0, 0, 217, 357, 0,
	358, 0, 0, 218, 219, 0, 0, 220, 221, 359,
	360, 0, 0, 361, 225, 0, 222, 0, 0, 223,
	362, 224, 363, 364, 365, 366, 367, 0, 368, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 369, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 370, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 371, 246, 372, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 373,
	0, 252, 0, 374, 253, 254, 255, 256, 257, 0,
	258, 375, 259, 376, 260, 0, 261, 262, 263, 264,
	265, 377, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	0, 281, 282, 378, 283, 0, 287, 288, 289, 290,
	291, 0, 293, 379, 292, 294, 295, 0, 296, 284,
	285, 297, 0, 298, 380, 381, 299, 0, 306, 300,
	301, 286, 302, 305, 382, 303, 304, 383, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 384,
	385, 386, 0, 0, 315, 316, 387, 388, 0, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 0,
	325, 0, 389, 326, 327, 328, 390, 391, 0, 778,
	329, 175, 0, 0, 0, 330, 331, 332, 333, 334,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	181, 182, 183, 336, 337, 338, 339, 184, 340, 341,
	0, 185, 342, 343, 186, 187, 0, 0, 344, 345,
	346, 0, 188, 347, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 399, 201, 348, 202, 349, 350, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 351, 209, 211, 210, 212, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 354, 355,
	356, 0, 215, 0, 216, 0, 0, 0, 0, 217,
	357, 0, 358, 0, 0, 218, 219, 0, 0, 220,
	221, 780, 360, 0, 0, 361, 225, 0, 222, 0,
	0, 223, 362, 224, 363, 364, 365, 366, 367, 0,
	368, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 369, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 370, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 371, 246,
	372, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 373, 0, 252, 0, 374, 253, 254, 255, 256,
	257, 0, 258, 375, 259, 376, 260, 0, 261, 262,
	263, 264, 265, 377, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 378, 283, 0, 287, 288,
	289, 290, 291, 0, 293, 379, 292, 294, 295, 0,
	296, 284, 285, 297, 0, 298, 380, 381, 299, 0,
	306, 300, 301, 286, 302, 305, 382, 303, 304, 383,
	0, 307, 0, 308, 309, 310, 311, 312, 313, 314,
	0, 384, 385, 386, 0, 0, 315, 316, 387, 388,
	0, 317, 318, 319, 320, 0, 0, 321, 322, 323,
	324, 0, 325, 0, 389, 326, 327, 328, 390, 391,
	0, 756, 329, 175, 0, 0, 0, 330, 331, 332,
	333, 334, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 181, 182, 183, 336, 337, 338, 339, 184,
	340, 341, 0, 185, 342, 343, 186, 187, 0, 0,
	344, 345, 346, 0, 188, 347, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 399, 201, 348, 202, 349, 350, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 351, 209, 211, 210, 212, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	354, 355, 356, 0, 215, 0, 216, 0, 0, 0,
	0, 217, 357, 0, 358, 0, 0, 218, 219, 0,
	0, 220, 221, 758, 360, 0, 0, 361, 225, 0,
	222, 0, 0, 223, 362, 224, 363, 364, 365, 366,
	367, 0, 368, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 369, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	370, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	371, 246, 372, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 373, 0, 252, 0, 374, 253, 254,
	255, 256, 257, 0, 258, 375, 259, 376, 260, 0,
	261, 262, 263, 264, 265, 377, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 378, 283, 0,
	287, 288, 289, 290, 291, 0, 293, 379, 292, 294,
	295, 0, 296, 284, 285, 297, 0, 298, 380, 381,
	299, 0, 306, 300, 301, 286, 302, 305, 382, 303,
	304, 383, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 384, 385, 386, 0, 0, 315, 316,
	387, 388, 0, 317, 318, 319, 320, 0, 0, 321,
	322, 323, 324, 0, 325, 0, 389, 326, 327, 328,
	390, 391, 0, 754, 329, 175, 0, 0, 0, 330,
	331, 332, 333, 334, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 181, 182, 183, 336, 337, 338,
	339, 184, 340, 341, 0, 185, 342, 343, 186, 187,
	0, 0, 344, 345, 346, 0, 188, 347, 0, 0,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 0, 196, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 199, 200, 399, 201, 348, 202, 349,
	350, 0, 203, 0, 204, 0, 205, 0, 0, 206,
	207, 0, 208, 0, 0, 0, 351, 209, 211, 210,
	212, 352, 353, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 354, 355, 356, 0, 215, 0, 216, 0,
	0, 0, 0, 217, 357, 0, 358, 0, 0, 218,
	219, 0, 0, 220, 221, 359, 360, 0, 0, 361,
	225, 0, 222, 0, 0, 223, 362, 224, 363, 364,
	365, 366, 367, 0, 368, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 369, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 370, 240, 0, 242, 243, 245, 244, 0,
	0, 0, 371, 246, 372, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 373, 0, 252, 0, 374,
	253, 254, 255, 256, 257, 0, 258, 375, 259, 376,
	260, 0, 261, 262, 263, 264, 265, 377, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 0, 281, 282, 378,
	283, 0, 287, 288, 289, 290, 291, 0, 293, 379,
	292, 294, 295, 0, 296, 284, 285, 297, 0, 298,
	380, 381, 299, 0, 306, 300, 301, 286, 302, 305,
	382, 303, 304, 383, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 384, 385, 386, 0, 0,
	315, 316, 387, 388, 0, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 0, 325, 0, 389, 326,
	327, 328, 390, 391, 0, 510, 329, 175, 0, 0,
	0, 330, 331, 332, 333, 334, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	0, 335, 0, 0, 0, 0, 181, 182, 183, 336,
	337, 338, 339, 184, 340, 341, 0, 185, 342, 343,
	186, 187, 0, 0, 344, 345, 346, 0, 501, 347,
	0, 0, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 0, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 399, 201, 348,
	202, 349, 350, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 351, 209,
	211, 210, 212, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 354, 355, 356, 0, 215, 0,
	216, 0, 0, 0, 0, 217, 357, 0, 358, 0,
	0, 218, 219, 0, 0, 220, 221, 359, 360, 0,
	0, 361, 225, 0, 222, 0, 0, 223, 362, 224,
	363, 364, 365, 366, 367, 0, 368, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	369, 0, 234, 0, 0, 500, 0, 0, 236, 0,
	237, 238, 239, 241, 370, 512, 0, 242, 243, 245,
	244, 0, 0, 0, 371, 246, 372, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 373, 0, 252,
	0, 374, 253, 254, 255, 256, 257, 0, 258, 375,
	259, 376, 260, 0, 261, 262, 263, 264, 265, 377,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 0, 281,
	282, 502, 283, 0, 287, 288, 289, 290, 291, 0,
	293, 379, 292, 503, 295, 0, 296, 284, 285, 297,
	0, 298, 380, 381, 299, 0, 306, 300, 301, 286,
	302, 305, 382, 303, 304, 383, 0, 307, 0, 308,
	309, 310, 311, 312, 313, 314, 0, 507, 385, 386,
	0, 0, 315, 505, 387, 388, 0, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 0, 325, 0,
	389, 326, 327, 328, 390, 391, 0, 492, 329, 175,
	0, 0, 0, 330, 331, 332, 333, 334, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 181, 182,
	183, 336, 337, 338, 339, 184, 340, 341, 0, 185,
	342, 343, 186, 187, 0, 0, 344, 345, 346, 0,
	188, 347, 0, 0, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 0, 196, 197, 198,
	0, 0, 0, 0, 0, 0, 0, 199, 200, 399,
	201, 348, 202, 349, 350, 0, 203, 0, 204, 0,
	205, 0, 0, 206, 207, 0, 208, 0, 0, 0,
	351, 209, 211, 210, 212, 352, 353, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 354, 355, 356, 0,
	215, 0, 216, 0, 0, 0, 0, 217, 357, 0,
	358, 0, 0, 218, 219, 0, 0, 220, 221, 359,
	360, 0, 0, 361, 225, 0, 222, 0, 0, 223,
	362, 224, 363, 364, 365, 366, 367, 0, 368, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 369, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 370, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 371, 246, 372, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 373,
	0, 252, 0, 374, 253, 254, 255, 256, 257, 0,
	258, 375, 259, 376, 260, 0, 261, 262, 263, 264,
	265, 377, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	0, 281, 282, 378, 283, 0, 493, 288, 289, 290,
	291, 0, 293, 379, 292, 294, 295, 0, 296, 284,
	285, 297, 0, 298, 380, 381, 299, 0, 306, 300,
	301, 286, 302, 305, 382, 303, 304, 383, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 384,
	385, 386, 0, 0, 315, 316, 387, 388, 0, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 0,
	325, 0, 389, 326, 327, 328, 390, 391, 0, 490,
	329, 175, 0, 0, 0, 330, 331, 332, 333, 334,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	181, 182, 183, 336, 337, 338, 339, 184, 340, 341,
	0, 185, 342, 343, 186, 187, 0, 0, 344, 345,
	346, 0, 188, 347, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 399, 201, 348, 202, 349, 350, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 351, 209, 211, 210, 212, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 354, 355,
	356, 0, 215, 0, 216, 0, 0, 0, 0, 217,
	357, 0, 358, 0, 0, 218, 219, 0, 0, 220,
	221, 359, 360, 0, 0, 361, 225, 0, 222, 0,
	0, 223, 362, 224, 363, 364, 365, 366, 367, 0,
	368, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 369, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 370, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 371, 246,
	372, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 373, 0, 252, 0, 374, 253, 254, 255, 256,
	257, 0, 258, 375, 259, 376, 260, 0, 261, 262,
	263, 264, 265, 377, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 378, 283, 0, 287, 288,
	289, 290, 291, 0, 293, 379, 292, 294, 295, 0,
	296, 284, 285, 297, 0, 298, 380, 381, 299, 0,
	306, 300, 301, 286, 302, 305, 382, 303, 304, 383,
	0, 307, 0, 308, 309, 310, 311, 312, 313, 314,
	0, 384, 385, 386, 0, 0, 315, 316, 387, 388,
	0, 317, 318, 319, 320, 0, 0, 321, 322, 323,
	324, 0, 325, 0, 389, 326, 327, 328, 390, 391,
	0, 482, 329, 175, 0, 0, 0, 330, 331, 332,
	333, 334, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 181, 182, 183, 336, 337, 338, 339, 184,
	340, 341, 0, 185, 342, 343, 186, 187, 0, 0,
	344, 345, 346, 0, 188, 347, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 399, 201, 348, 202, 349, 350, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 351, 209, 211, 210, 212, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	354, 355, 356, 0, 215, 0, 216, 0, 0, 0,
	0, 217, 357, 0, 358, 0, 0, 218, 219, 0,
	0, 220, 221, 359, 360, 0, 0, 361, 225, 0,
	222, 0, 0, 223, 362, 224, 363, 364, 365, 366,
	367, 0, 368, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 369, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	370, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	371, 246, 372, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 373, 0, 252, 0, 374, 253, 254,
	255, 256, 257, 0, 258, 375, 259, 376, 260, 0,
	261, 262, 263, 264, 265, 377, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 378, 283, 0,
	287, 288, 289, 290, 291, 0, 293, 379, 292, 294,
	295, 0, 296, 284, 285, 297, 0, 298, 380, 381,
	299, 0, 306, 300, 301, 286, 302, 305, 382, 303,
	304, 383, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 384, 385, 386, 0, 0, 315, 316,
	387, 388, 0, 317, 318, 319, 320, 0, 0, 321,
	322, 323, 324, 0, 325, 0, 389, 326, 327, 328,
	390, 391, 0, 439, 329, 175, 0, 0, 0, 330,
	331, 332, 333, 334, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 181, 182, 183, 336, 337, 338,
	339, 184, 340, 341, 0, 185, 342, 343, 186, 187,
	0, 0, 344, 345, 346, 0, 188, 347, 0, 0,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 0, 196, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 199, 200, 399, 201, 348, 202, 349,
	350, 0, 203, 0, 204, 0, 205, 0, 0, 206,
	207, 0, 208, 0, 0, 0, 351, 209, 211, 210,
	212, 352, 353, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 354, 355, 356, 0, 215, 0, 216, 0,
	0, 0, 0, 217, 357, 0, 358, 0, 0, 218,
	219, 0, 0, 220, 221, 359, 360, 0, 0, 361,
	225, 0, 222, 0, 0, 223, 362, 224, 363, 364,
	365, 366, 367, 0, 368, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 369, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 370, 240, 0, 242, 243, 245, 244, 0,
	0, 0, 371, 246, 372, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 373, 0, 252, 0, 374,
	253, 254, 255, 256, 257, 0, 258, 375, 259, 376,
	260, 0, 261, 262, 263, 264, 265, 377, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 0, 281, 282, 378,
	283, 0, 287, 288, 289, 290, 291, 0, 293, 379,
	292, 294, 295, 0, 296, 284, 285, 297, 0, 298,
	380, 381, 299, 0, 306, 300, 301, 286, 302, 305,
	382, 303, 304, 383, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 384, 385, 386, 0, 0,
	315, 316, 387, 388, 0, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 0, 325, 0, 389, 326,
	327, 328, 390, 391, 175, 0, 329, 0, 0, 0,
	0, 330, 331, 332, 333, 334, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 0, 335, 0,
	0, 0, 0, 181, 182, 183, 336, 337, 338, 339,
	184, 340, 341, 0, 185, 342, 343, 186, 187, 0,
	0, 344, 345, 346, 0, 188, 347, 0, 0, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 0, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 399, 201, 348, 202, 349, 350,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 351, 209, 211, 210, 212,
	352, 353, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 354, 355, 356, 0, 215, 0, 216, 0, 0,
	0, 0, 217, 357, 0, 358, 0, 0, 218, 219,
	0, 0, 220, 221, 359, 360, 0, 0, 361, 225,
	0, 222, 0, 0, 223, 362, 224, 363, 364, 365,
	366, 367, 0, 368, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 369, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 370, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 371, 246, 372, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 373, 0, 252, 0, 374, 253,
	254, 255, 256, 257, 0, 258, 375, 259, 376, 260,
	0, 261, 262, 263, 264, 265, 377, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 0, 281, 282, 378, 283,
	0, 287, 288, 289, 290, 291, 0, 293, 379, 292,
	294, 295, 0, 296, 284, 285, 297, 0, 298, 380,
	381, 299, 0, 306, 300, 301, 286, 302, 305, 382,
	303, 304, 383, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 384, 385, 386, 0, 0, 315,
	316, 387, 388, 0, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 0, 325, 0, 389, 326, 327,
	328, 390, 391, 175, 0, 329, 0, 0, 0, 0,
	330, 331, 332, 333, 334, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 181, 182, 183, 336, 337, 338, 339, 184,
	340, 341, 0, 185, 342, 343, 186, 187, 0, 0,
	344, 345, 346, 0, 188, 347, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 399, 201, 348, 202, 349, 350, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 351, 209, 211, 210, 212, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	354, 355, 356, 0, 215, 0, 216, 0, 0, 0,
	0, 217, 357, 0, 358, 0, 0, 218, 219, 0,
	0, 220, 221, 1902, 360, 0, 0, 361, 225, 0,
	222, 0, 0, 223, 362, 224, 363, 364, 365, 366,
	367, 0, 368, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 369, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	370, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	371, 246, 372, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 373, 0, 252, 0, 374, 253, 254,
	255, 256, 257, 0, 258, 375, 259, 376, 260, 0,
	261, 262, 263, 264, 265, 377, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 378, 283, 0,
	287, 288, 289, 290, 291, 0, 293, 379, 292, 294,
	295, 0, 296, 284, 285, 297, 0, 298, 380, 381,
	299, 0, 306, 300, 301, 286, 302, 305, 382, 303,
	304, 383, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 384, 385, 386, 0, 0, 315, 316,
	387, 388, 0, 317, 318, 319, 320, 0, 0, 321,
	322, 323, 324, 0, 325, 0, 389, 326, 327, 328,
	390, 391, 175, 0, 329, 0, 0, 0, 0, 330,
	331, 332, 333, 334, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 335, 0, 0, 0,
	0, 181, 182, 183, 336, 337, 338, 339, 184, 340,
	341, 0, 185, 342, 343, 186, 187, 0, 0, 344,
	345, 346, 0, 188, 347, 0, 0, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 399, 201, 348, 202, 349, 350, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 351, 209, 211, 210, 212, 352, 353,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 354,
	355, 356, 0, 215, 0, 216, 0, 0, 0, 0,
	217, 357, 0, 358, 0, 0, 218, 219, 0, 0,
	220, 221, 1900, 360, 0, 0, 361, 225, 0, 222,
	0, 0, 223, 362, 224, 363, 364, 365, 366, 367,
	0, 368, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 369, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 370,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 371,
	246, 372, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 373, 0, 252, 0, 374, 253, 254, 255,
	256, 257, 0, 258, 375, 259, 376, 260, 0, 261,
	262, 263, 264, 265, 377, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 378, 283, 0, 287,
	288, 289, 290, 291, 0, 293, 379, 292, 294, 295,
	0, 296, 284, 285, 297, 0, 298, 380, 381, 299,
	0, 306, 300, 301, 286, 302, 305, 382, 303, 304,
	383, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 384, 385, 386, 0, 0, 315, 316, 387,
	388, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 389, 326, 327, 328, 390,
	391, 175, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	181, 182, 183, 336, 337, 338, 339, 184, 340, 341,
	0, 185, 342, 343, 186, 187, 0, 0, 344, 345,
	346, 0, 188, 347, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 399, 201, 348, 202, 349, 350, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 351, 209, 211, 210, 212, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 354, 355,
	356, 0, 215, 0, 216, 0, 0, 0, 0, 217,
	357, 0, 358, 0, 0, 218, 219, 0, 0, 220,
	221, 1889, 360, 0, 0, 361, 225, 0, 222, 0,
	0, 223, 362, 224, 363, 364, 365, 366, 367, 0,
	368, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 369, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 370, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 371, 246,
	372, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 373, 0, 252, 0, 374, 253, 254, 255, 256,
	257, 0, 258, 375, 259, 376, 260, 0, 261, 262,
	263, 264, 265, 377, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 378, 283, 0, 287, 288,
	289, 290, 291, 0, 293, 379, 292, 294, 295, 0,
	296, 284, 285, 297, 0, 298, 380, 381, 299, 0,
	306, 300, 301, 286, 302, 305, 382, 303, 304, 383,
	0, 307, 0, 308, 309, 310, 311, 312, 313, 314,
	0, 384, 385, 386, 0, 0, 315, 316, 387, 388,
	0, 317, 318, 319, 320, 0, 0, 321, 322, 323,
	324, 0, 325, 0, 389, 326, 327, 328, 390, 391,
	175, 0, 329, 0, 0, 0, 0, 330, 331, 332,
	333, 334, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 335, 0, 0, 0, 0, 181,
	182, 183, 336, 337, 338, 339, 184, 340, 341, 0,
	185, 342, 343, 186, 187, 0, 0, 344, 345, 346,
	0, 188, 347, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	399, 201, 348, 202, 349, 350, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 351, 209, 211, 210, 212, 352, 353, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 354, 355, 356,
	0, 215, 0, 216, 0, 0, 0, 0, 217, 357,
	0, 358, 0, 0, 218, 219, 0, 0, 220, 221,
	359, 360, 0, 0, 361, 225, 0, 222, 0, 0,
	223, 362, 224, 363, 364, 365, 366, 367, 0, 368,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 369, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 370, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 371, 246, 372,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	373, 0, 252, 0, 374, 253, 254, 255, 256, 257,
	0, 258, 375, 259, 376, 260, 0, 261, 262, 263,
	264, 265, 377, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 378, 283, 0, 493, 288, 289,
	290, 291, 0, 293, 379, 292, 294, 295, 0, 296,
	284, 285, 297, 0, 298, 380, 381, 299, 0, 306,
	300, 301, 286, 302, 305, 382, 303, 304, 383, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	384, 385, 386, 0, 0, 315, 316, 387, 388, 0,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	0, 325, 0, 389, 326, 327, 328, 390, 391, 175,
	0, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 0, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 0, 335, 0, 1234, 0, 0, 181, 182,
	183, 336, 337, 338, 339, 184, 340, 341, 0, 185,
	342, 343, 186, 187, 0, 0, 344, 345, 346, 0,
	188, 347, 0, 0, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 0, 196, 197, 198,
	0, 0, 0, 0, 0, 0, 0, 199, 200, 399,
	201, 348, 202, 349, 350, 0, 203, 0, 204, 0,
	205, 0, 0, 206, 207, 0, 208, 0, 0, 0,
	351, 209, 211, 210, 212, 352, 353, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 354, 355, 356, 0,
	215, 0, 216, 0, 0, 0, 0, 217, 357, 0,
	358, 0, 0, 218, 219, 0, 0, 220, 221, 359,
	360, 0, 0, 361, 225, 0, 222, 0, 0, 223,
	362, 224, 363, 364, 365, 366, 367, 0, 368, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 369, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 370, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 371, 246, 372, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 373,
	0, 252, 0, 374, 253, 254, 255, 256, 257, 0,
	258, 375, 259, 376, 260, 0, 261, 262, 263, 264,
	265, 377, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	0, 281, 282, 378, 283, 0, 287, 288, 289, 290,
	291, 0, 293, 379, 292, 294, 295, 0, 0, 284,
	285, 297, 0, 298, 380, 381, 299, 0, 306, 300,
	301, 286, 302, 305, 382, 303, 304, 383, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 384,
	385, 386, 0, 0, 315, 316, 387, 388, 0, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 0,
	325, 0, 389, 326, 327, 328, 390, 391, 175, 0,
	329, 0, 0, 0, 0, 330, 331, 332, 333, 334,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 181, 182, 183,
	336, 337, 338, 339, 184, 340, 341, 0, 185, 342,
	343, 186, 187, 0, 0, 344, 345, 346, 0, 188,
	347, 0, 0, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 399, 201,
	348, 202, 349, 350, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 351,
	209, 211, 210, 212, 352, 353, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 354, 355, 356, 0, 215,
	0, 216, 0, 0, 0, 0, 217, 357, 0, 358,
	0, 0, 218, 219, 0, 0, 220, 221, 359, 360,
	0, 0, 361, 225, 0, 222, 0, 0, 223, 362,
	224, 363, 364, 365, 366, 367, 0, 368, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 369, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 370, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 371, 246, 372, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 373, 0,
	252, 0, 374, 253, 254, 255, 256, 257, 0, 258,
	375, 259, 376, 260, 0, 261, 262, 263, 264, 265,
	377, 720, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 378, 283, 0, 287, 288, 289, 290, 291,
	0, 293, 379, 292, 294, 295, 0, 296, 284, 285,
	297, 0, 298, 380, 381, 299, 0, 306, 300, 301,
	286, 302, 305, 382, 303, 304, 383, 0, 307, 0,
	308, 309, 310, 311, 312, 313, 314, 0, 384, 385,
	386, 0, 0, 315, 316, 387, 388, 0, 317, 318,
	319, 320, 0, 0, 321, 322, 323, 324, 0, 325,
	0, 389, 326, 327, 328, 390, 391, 175, 0, 329,
	0, 0, 0, 0, 330, 331, 332, 333, 334, 0,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	0, 335, 0, 0, 0, 0, 181, 182, 183, 336,
	337, 338, 339, 184, 340, 341, 0, 185, 342, 343,
	186, 187, 0, 0, 344, 345, 346, 0, 188, 347,
	0, 0, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 0, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 399, 201, 348,
	202, 349, 350, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 351, 209,
	211, 210, 212, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 354, 355, 356, 0, 215, 0,
	216, 0, 0, 0, 0, 217, 357, 0, 358, 0,
	0, 218, 219, 0, 0, 220, 221, 359, 360, 0,
	0, 361, 225, 0, 222, 0, 0, 223, 362, 224,
	363, 364, 365, 366, 367, 0, 368, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	369, 0, 234, 0, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 370, 240, 0, 242, 243, 245,
	244, 0, 0, 0, 371, 246, 372, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 373, 0, 252,
	0, 374, 253, 254, 0, 256, 257, 0, 258, 375,
	259, 376, 260, 0, 261, 262, 263, 0, 265, 377,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 0, 281,
	282, 378, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 379, 292, 294, 295, 0, 296, 284, 285, 297,
	0, 298, 380, 381, 299, 0, 306, 300, 301, 286,
	302, 305, 382, 303, 304, 383, 0, 307, 0, 308,
	309, 310, 311, 312, 313, 314, 0, 384, 385, 386,
	0, 0, 315, 316, 387, 388, 0, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 0, 325, 0,
	389, 326, 327, 328, 390, 391, 0, 0, 329, 0,
	0, 0, 0, 330, 331, 332, 333, 334, 948, 949,
	0, 978, 979, 980, 988, 989, 990, 0, 0, 0,
	0, 0, 0, 0, 981, 0, 0, 0, 0, 0,
	0, 951, 0, 0, 992, 0, 0, 0, 0, 0,
	0, 0, 0, 948, 949, 0, 978, 979, 980, 988,
	989, 990, 0, 0, 0, 950, 0, 0, 0, 981,
	0, 970, 0, 0, 0, 967, 951, 0, 0, 992,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	950, 0, 0, 0, 0, 0, 970, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 974, 975, 976, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 985, 993, 0, 0, 973, 974,
	975, 976, 0, 0, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 991, 0, 948, 949, 0, 978, 979,
	980, 988, 989, 990, 0, 0, 0, 0, 983, 985,
	993, 981, 0, 0, 971, 0, 0, 0, 951, 0,
	0, 992, 0, 0, 0, 0, 0, 0, 991, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 950, 983, 39, 0, 0, 0, 970, 971,
	0, 0, 967, 0, 0, 40, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 43, 0,
	0, 0, 0, 977, 982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 50, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 974, 975, 976, 0, 986, 0, 0, 977, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 972, 0, 0, 0, 62, 0, 0,
	63, 985, 993, 0, 0, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 983, 0, 0, 0, 0,
	0, 971, 0, 984, 0, 0, 962, 963, 969, 968,
	964, 965, 966, 987, 0, 961, 959, 960, 952, 953,
	954, 955, 957, 958, 0, 0, 982, 0, 0, 0,
	0, 0, 1837, 0, 0, 0, 0, 0, 984, 0,
	0, 962, 963, 969, 968, 964, 965, 966, 987, 0,
	961, 959, 960, 952, 953, 954, 955, 957, 958, 0,
	977, 0, 0, 0, 0, 0, 0, 1789, 0, 0,
	0, 0, 0, 0, 66, 972, 0, 0, 0, 0,
	0, 948, 949, 0, 978, 979, 980, 988, 989, 990,
	0, 0, 986, 0, 0, 0, 0, 981, 0, 0,
	122, 68, 0, 69, 951, 0, 0, 992, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 0, 0, 0, 464, 0, 0, 101, 950, 0,
	0, 0, 0, 0, 970, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	984, 0, 0, 962, 963, 969, 968, 964, 965, 966,
	987, 0, 961, 959, 960, 952, 953, 954, 955, 957,
	958, 0, 136, 0, 0, 2429, 973, 974, 975, 976,
	129, 0, 0, 0, 0, 956, 0, 130, 0, 0,
	0, 0, 0, 948, 949, 0, 978, 979, 980, 988,
	989, 990, 0, 0, 0, 0, 0, 985, 993, 981,
	121, 0, 0, 0, 0, 0, 951, 0, 0, 992,
	0, 0, 0, 0, 0, 0, 991, 0, 948, 949,
	0, 978, 979, 980, 988, 989, 990, 0, 0, 0,
	950, 983, 0, 0, 981, 0, 970, 971, 0, 0,
	967, 951, 0, 0, 992, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 982, 0, 0, 950, 0, 0, 0, 0,
	0, 970, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 973, 974,
	975, 976, 0, 0, 0, 0, 977, 956, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 985,
	993, 0, 0, 973, 974, 975, 976, 0, 986, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 991, 0,
	948, 949, 0, 978, 979, 980, 988, 989, 990, 0,
	0, 0, 0, 983, 985, 993, 981, 0, 0, 971,
	0, 0, 0, 951, 0, 0, 992, 0, 0, 0,
	0, 0, 0, 991, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 982, 0, 0, 950, 983, 0,
	0, 0, 0, 970, 971, 0, 984, 967, 0, 962,
	963, 969, 968, 964, 965, 966, 987, 0, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 0, 977, 982,
	0, 2382, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 974, 975, 976, 0,
	986, 0, 0, 977, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 985, 993, 0, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 991, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	983, 0, 0, 0, 0, 0, 971, 0, 984, 0,
	0, 962, 963, 969, 968, 964, 965, 966, 987, 0,
	961, 959, 960, 952, 953, 954, 955, 957, 958, 0,
	0, 982, 0, 2336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 984, 0, 0, 962, 963, 969, 968,
	964, 965, 966, 987, 0, 961, 959, 960, 952, 953,
	954, 955, 957, 958, 0, 977, 0, 0, 2306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 948, 949, 0, 978,
	979, 980, 988, 989, 990, 0, 0, 986, 0, 0,
	0, 0, 981, 0, 0, 0, 0, 0, 0, 951,
	0, 0, 992, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 970,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 984, 0, 0, 962, 963,
	969, 968, 964, 965, 966, 987, 0, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 0, 0, 0, 0,
	2301, 973, 974, 975, 976, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 0, 0, 948, 949,
	0, 978, 979, 980, 988, 989, 990, 0, 0, 0,
	0, 0, 985, 993, 981, 0, 0, 0, 0, 0,
	0, 951, 0, 0, 992, 0, 0, 0, 0, 0,
	0, 991, 0, 948, 949, 0, 978, 979, 980, 988,
	989, 990, 0, 0, 0, 950, 983, 0, 0, 981,
	0, 970, 971, 0, 0, 967, 951, 0, 0, 992,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	950, 0, 0, 0, 0, 0, 970, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 974, 975, 976, 0, 0, 0,
	0, 977, 956, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 985, 993, 0, 0, 973, 974,
	975, 976, 0, 986, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 991, 0, 948, 949, 0, 978, 979,
	980, 988, 989, 990, 0, 0, 0, 0, 983, 985,
	993, 981, 0, 0, 971, 0, 0, 0, 951, 0,
	0, 992, 0, 0, 0, 0, 0, 0, 991, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 950, 983, 0, 0, 0, 0, 970, 971,
	0, 984, 967, 0, 962, 963, 969, 968, 964, 965,
	966, 987, 0, 961, 959, 960, 952, 953, 954, 955,
	957, 958, 0, 977, 982, 0, 2297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 974, 975, 976, 0, 986, 0, 0, 977, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 985, 993, 0, 0, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 983, 0, 0, 0, 0,
	0, 971, 0, 984, 0, 0, 962, 963, 969, 968,
	964, 965, 966, 987, 0, 961, 959, 960, 952, 953,
	954, 955, 957, 958, 0, 0, 982, 0, 2239, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 984, 0,
	0, 962, 963, 969, 968, 964, 965, 966, 987, 0,
	961, 959, 960, 952, 953, 954, 955, 957, 958, 0,
	977, 0, 0, 2205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 948, 949, 0, 978, 979, 980, 988, 989, 990,
	0, 0, 986, 0, 0, 0, 0, 981, 0, 0,
	0, 0, 0, 0, 951, 0, 0, 992, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 950, 0,
	0, 0, 0, 0, 970, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	984, 0, 0, 962, 963, 969, 968, 964, 965, 966,
	987, 0, 961, 959, 960, 952, 953, 954, 955, 957,
	958, 0, 0, 0, 0, 2204, 973, 974, 975, 976,
	0, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 948, 949, 0, 978, 979, 980, 988,
	989, 990, 0, 0, 0, 0, 0, 985, 993, 981,
	0, 0, 0, 0, 0, 0, 951, 0, 0, 992,
	0, 0, 0, 0, 0, 0, 991, 0, 948, 949,
	0, 978, 979, 980, 988, 989, 990, 0, 0, 0,
	950, 983, 0, 0, 981, 0, 970, 971, 0, 0,
	967, 951, 0, 0, 992, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 982, 0, 0, 950, 0, 0, 0, 0,
	0, 970, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 973, 974,
	975, 976, 0, 0, 0, 0, 977, 956, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 985,
	993, 0, 0, 973, 974, 975, 976, 0, 986, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 991, 0,
	948, 949, 0, 978, 979, 980, 988, 989, 990, 0,
	0, 0, 0, 983, 985, 993, 981, 0, 0, 971,
	0, 0, 0, 951, 0, 0, 992, 0, 0, 0,
	0, 0, 0, 991, 1797, 1798, 0, 1815, 1816, 1817,
	0, 0, 0, 0, 982, 0, 0, 950, 983, 0,
	1993, 0, 0, 970, 971, 0, 984, 967, 0, 962,
	963, 969, 968, 964, 965, 966, 987, 0, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 0, 977, 982,
	0, 2169, 0, 0, 0, 0, 0, 1812, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 974, 975, 976, 0,
	986, 0, 0, 977, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 985, 993, 0, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 1803, 0,
	0, 0, 0, 0, 0, 991, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	983, 0, 0, 0, 0, 0, 971, 0, 984, 0,
	0, 962, 963, 969, 968, 964, 965, 966, 987, 1818,
	961, 959, 960, 952, 953, 954, 955, 957, 958, 0,
	0, 982, 0, 2024, 0, 0, 0, 0, 0, 0,
	1813, 0, 0, 984, 0, 0, 962, 963, 969, 968,
	964, 965, 966, 987, 0, 961, 959, 960, 952, 953,
	954, 955, 957, 958, 0, 977, 0, 0, 2000, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 948, 949, 0, 978,
	979, 980, 988, 989, 990, 0, 0, 986, 0, 0,
	0, 0, 981, 0, 0, 0, 0, 0, 0, 951,
	0, 0, 992, 0, 1814, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 970,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 984, 0, 0, 962, 963,
	969, 968, 964, 965, 966, 987, 0, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 0, 0, 0, 0,
	1473, 973, 974, 975, 976, 0, 0, 0, 0, 0,
	956, 0, 1809, 1810, 1811, 0, 0, 0, 0, 0,
	0, 1808, 1806, 1807, 1799, 1800, 1801, 1802, 1804, 1805,
	0, 0, 985, 993, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 991, 948, 949, 0, 978, 979, 980, 988, 989,
	990, 0, 0, 0, 0, 0, 983, 0, 981, 0,
	0, 0, 971, 0, 0, 951, 0, 0, 992, 0,
	0, 0, 0, 0, 0, 0, 0, 948, 949, 0,
	978, 979, 980, 988, 989, 990, 0, 982, 0, 950,
	0, 0, 0, 981, 0, 970, 0, 0, 0, 967,
	951, 0, 0, 992, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 977, 0, 0, 950, 0, 0, 0, 0, 0,
	970, 0, 0, 0, 967, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 974, 975,
	976, 0, 0, 986, 0, 0, 956, 2489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 993,
	0, 0, 973, 974, 975, 976, 0, 0, 0, 0,
	0, 956, 0, 1829, 0, 0, 1828, 991, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 985, 993, 0, 0, 0, 971, 0,
	0, 984, 0, 0, 962, 963, 969, 968, 964, 965,
	966, 987, 991, 961, 959, 960, 952, 953, 954, 955,
	957, 958, 0, 982, 1759, 0, 0, 983, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 2488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 977, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 986,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 986, 0, 0, 0, 0, 0,
	0, 0, 948, 949, 0, 978, 979, 980, 988, 989,
	990, 0, 0, 0, 0, 0, 0, 0, 981, 0,
	0, 0, 0, 1732, 0, 951, 0, 984, 992, 0,
	962, 963, 969, 968, 964, 965, 966, 987, 0, 961,
	959, 960, 952, 953, 954, 955, 957, 958, 0, 950,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 967,
	0, 0, 984, 0, 0, 962, 963, 969, 968, 964,
	965, 966, 987, 0, 961, 959, 960, 952, 953, 954,
	955, 957, 958, 0, 0, 0, 1733, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 974, 975,
	976, 0, 0, 0, 0, 0, 956, 0, 1570, 0,
	0, 0, 0, 0, 948, 949, 0, 978, 979, 980,
	988, 989, 990, 0, 0, 0, 0, 0, 985, 993,
	981, 0, 0, 0, 1569, 0, 0, 951, 0, 0,
	992, 0, 0, 0, 0, 0, 0, 991, 0, 948,
	949, 0, 978, 979, 980, 988, 989, 990, 0, 0,
	0, 950, 983, 0, 0, 981, 0, 970, 971, 0,
	0, 967, 951, 0, 0, 992, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 950, 0, 0, 0,
	0, 0, 970, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 973,
	974, 975, 976, 0, 0, 0, 0, 977, 956, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	985, 993, 0, 0, 973, 974, 975, 976, 0, 986,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 991,
	0, 948, 949, 0, 978, 979, 980, 988, 989, 990,
	0, 0, 0, 0, 983, 985, 993, 981, 0, 0,
	971, 0, 0, 0, 951, 0, 0, 992, 0, 0,
	0, 0, 0, 0, 991, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 950, 983,
	0, 0, 0, 0, 970, 971, 0, 984, 967, 0,
	962, 963, 969, 968, 964, 965, 966, 987, 0, 961,
	959, 960, 952, 953, 954, 955, 957, 958, 0, 977,
	982, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 974, 975, 976,
	0, 986, 0, 0, 977, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 985, 993, 0,
	0, 0, 0, 0, 0, 0, 986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 991, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 983, 0, 0, 0, 0, 0, 971, 0, 984,
	0, 0, 962, 963, 969, 968, 964, 965, 966, 987,
	0, 961, 959, 960, 952, 953, 954, 955, 957, 958,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 984, 0, 0, 962, 963, 969,
	968, 964, 965, 966, 987, 0, 961, 959, 960, 952,
	953, 954, 955, 957, 958, 0, 977, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 948, 949, 0, 978, 979, 980, 988,
	989, 990, 0, 0, 0, 0, 0, 0, 986, 981,
	0, 0, 0, 0, 0, 0, 951, 0, 0, 992,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2004, 0, 0, 0, 0, 0,
	950, 0, 0, 0, 0, 0, 970, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 0, 0, 962,
	963, 969, 968, 964, 965, 966, 987, 0, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 0, 973, 974,
	975, 976, 0, 0, 0, 0, 0, 956, 0, 0,
	0, 0, 1835, 0, 0, 948, 949, 0, 978, 979,
	980, 988, 989, 990, 0, 0, 0, 0, 0, 985,
	993, 981, 0, 0, 0, 1830, 0, 0, 951, 0,
	0, 992, 0, 0, 0, 0, 0, 0, 991, 0,
	948, 949, 0, 978, 979, 980, 988, 989, 990, 0,
	0, 0, 950, 983, 0, 0, 981, 0, 970, 971,
	0, 0, 967, 951, 0, 0, 992, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 982, 0, 0, 950, 0, 0,
	0, 0, 0, 970, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 974, 975, 976, 0, 0, 0, 0, 977, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 985, 993, 0, 0, 973, 974, 975, 976, 0,
	986, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	991, 0, 948, 949, 0, 978, 979, 980, 988, 989,
	990, 0, 0, 0, 0, 983, 985, 993, 981, 0,
	0, 971, 1788, 0, 0, 951, 0, 0, 992, 0,
	0, 0, 0, 0, 0, 991, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 982, 0, 0, 950,
	983, 0, 0, 0, 0, 970, 971, 0, 984, 967,
	0, 962, 963, 969, 968, 964, 965, 966, 987, 0,
	961, 959, 960, 952, 953, 954, 955, 957, 958, 0,
	977, 982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1795, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 974, 975,
	976, 0, 986, 0, 0, 977, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 985, 993,
	0, 0, 0, 0, 0, 0, 0, 986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 991, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 0, 0, 0, 0, 0, 971, 0,
	984, 0, 0, 962, 963, 969, 968, 964, 965, 966,
	987, 0, 961, 959, 960, 952, 953, 954, 955, 957,
	958, 0, 0, 982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 984, 0, 0, 962, 963,
	969, 968, 964, 965, 966, 987, 0, 961, 959, 960,
	952, 953, 954, 955, 957, 958, 0, 977, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 948, 949, 0, 978, 979, 980,
	988, 989, 990, 0, 0, 0, 0, 0, 0, 986,
	981, 0, 0, 0, 0, 0, 0, 951, 0, 0,
	992, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 0, 0, 0, 0, 0, 970, 0, 0,
	0, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 0, 0,
	962, 963, 969, 968, 964, 965, 966, 987, 0, 961,
	959, 960, 952, 953, 954, 955, 957, 958, 0, 973,
	974, 975, 976, 0, 0, 0, 0, 0, 956, 0,
	0, 0, 0, 0, 0, 0, 948, 949, 0, 978,
	979, 980, 988, 989, 990, 0, 0, 0, 0, 0,
	985, 993, 981, 0, 0, 0, 0, 0, 0, 951,
	0, 0, 992, 0, 0, 0, 0, 0, 0, 991,
	0, 948, 949, 0, 978, 979, 980, 988, 989, 990,
	0, 0, 0, 950, 983, 0, 0, 0, 0, 970,
	971, 0, 0, 967, 951, 0, 0, 992, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 950, 0,
	0, 0, 0, 0, 970, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 974, 975, 976, 0, 0, 0, 0, 977,
	956, 0, 0, 0, 0, 0, 0, 0, 1797, 1798,
	0, 1815, 1816, 1817, 972, 0, 0, 0, 0, 0,
	0, 0, 985, 993, 0, 0, 973, 974, 975, 976,
	0, 986, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 991, 0, 948, 949, 0, 978, 979, 980, 988,
	989, 990, 0, 0, 0, 0, 983, 985, 993, 0,
	0, 1812, 971, 0, 0, 0, 951, 0, 0, 992,
	0, 0, 0, 0, 0, 0, 991, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	950, 983, 0, 0, 0, 0, 970, 971, 0, 984,
	967, 0, 962, 963, 969, 968, 964, 965, 966, 987,
	0, 961, 959, 960, 952, 953, 954, 955, 957, 958,
	0, 977, 1803, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 1819, 0, 0, 973, 974,
	975, 976, 0, 986, 0, 0, 977, 956, 0, 0,
	0, 0, 0, 1818, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 985,
	993, 0, 0, 0, 1813, 0, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 983, 0, 0, 0, 0, 0, 971,
	0, 984, 0, 0, 962, 963, 969, 968, 964, 965,
	966, 987, 0, 961, 959, 960, 952, 953, 954, 955,
	957, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 0, 1814, 962,
	963, 969, 968, 964, 965, 966, 987, 0, 961, 959,
	960, 952, 953, 954, 955, 957, 958, 0, 977, 0,
	0, 0, 1277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 1285, 1274, 1304, 1265, 1295,
	1294, 0, 0, 1267, 1266, 0, 0, 0, 0, 1306,
	1305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1809, 1810, 1811, 0,
	0, 0, 0, 0, 0, 1808, 1806, 1807, 1799, 1800,
	1801, 1802, 1804, 1805, 1300, 0, 1292, 1291, 0, 0,
	0, 0, 1277, 0, 0, 0, 1290, 0, 984, 0,
	0, 962, 963, 969, 968, 964, 965, 966, 987, 0,
	961, 959, 960, 952, 953, 954, 955, 957, 958, 1289,
	1287, 1288, 0, 0, 0, 1285, 1274, 1304, 1265, 1295,
	1294, 0, 0, 1267, 1266, 0, 0, 0, 0, 1306,
	1305, 0, 0, 0, 0, 0, 1273, 0, 0, 0,
	0, 0, 0, 1278, 1276, 1279, 1280, 1281, 1282, 1283,
	0, 1303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 0, 1292, 1291, 0, 0,
	0, 0, 0, 0, 0, 0, 1290, 0, 0, 1269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1293, 0, 0, 0, 1275, 0, 0, 0, 1289,
	1287, 1288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1286, 0, 1273, 0, 1398, 1396,
	1397, 1400, 1399, 1278, 1276, 1279, 1280, 1281, 1282, 1283,
	0, 1303, 531, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1270, 0, 0, 0,
	0, 0, 536, 0, 0, 0, 0, 1284, 1271, 1269,
	0, 0, 0, 0, 534, 0, 0, 1308, 0, 0,
	0, 1293, 0, 0, 0, 1275, 0, 0, 0, 0,
	1268, 0, 0, 1301, 1302, 535, 0, 0, 0, 0,
	537, 0, 0, 0, 0, 543, 544, 0, 0, 0,
	553, 0, 0, 0, 1286, 1272, 0, 0, 0, 0,
	1307, 0, 0, 0, 558, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1270, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1284, 1271, 0,
	0, 0, 0, 0, 0, 0, 0, 1308, 0, 0,
	0, 0, 539, 0, 0, 0, 0, 0, 0, 0,
	1268, 0, 0, 1301, 1302, 0, 0, 0, 0, 0,
	540, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1272, 0, 0, 547, 0,
	1307, 542, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	533, 550, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 551, 0, 0, 0,
	555, 0, 0, 0, 561, 0, 0, 0, 0, 548,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 554,
}
var sqlPact = [...]int{

	3207, -1000, -36, -1000, -1000, -1000, 134, -1000, -1000, -1000,
	-1000, 131, 130, 128, -1000, 127, 125, 124, 123, 120,
	119, 117, 105, 104, 103, 102, -1000, 98, -1000, -1000,
	-1000, -1000, 95, 90, 89, 88, 86, 85, 84, 966,
	21067, 83, 82, 1319, -1000, 34650, 79, 78, 76, 74,
	917, 73, 72, 25043, 981, 1172, 70, 68, 57, 56,
	55, 930, 34321, 4214, 2498, 1095, 1552, 33989, 20735, 1536,
	2440, 33657, -1000, -1000, 33325, 54, 52, 51, 50, 46,
	-1000, -1000, 32993, 42, 41, 37, 34, 32, 31, 30,
	29, 28, 27, 26, 24, 21, 20, -1000, 15, 14,
	12, 41610, 11, 9, 8, 1088, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 880, 80, -1000,
	913, 351, 1263, 8053, 969, 968, 964, 947, 943, 36624,
	34650, 5, -69, 2, -1000, 1881, 617, 18352, 3207, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 24711, 24379, 32661, 32329, 735, -1000, -40,
	21727, 34650, -1000, 81, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 14236, 13892, 471, 81, -1000,
	-1000, -1000, -1000, -1000, 31997, -1000, 31665, 31333, 1407, 31001,
	-1000, -1000, -1000, -1000, 30669, -1000, -1000, 1777, 1569, 1566,
	24047, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 30340, 30008, 29676, 29344, 29012, 442, -1000,
	-1000, -1000, 16980, -1000, -1000, -1000, -1000, 1, -1000, -4,
	-1000, -5, -6, -11, -16, -1000, -17, -23, -1000, -25,
	-29, -1000, -31, -34, 28680, 1186, -1000, -1000, -39, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 34650, -1000, 14922,
	-1000, 441, -1000, 1534, -1000, 14922, -1000, 1171, -1000, -1000,
	-1000, -1000, -1000, 34650, -1000, -1000, -1000, -1000, -1000, -1000,
	2090, 1153, 440, 28348, -1000, 1578, -1000, 546, 712, -1000,
	-1000, -1000, 9082, 142, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1671, 22070, 1236, 1876, 1768, 2083, 1339,
	1707, 1675, 1664, 1653, 1638, 2082, 900, 2081, 1689, 961,
	2079, 1630, 1167, 627, 2078, 1518, 1516, -1000, -1000, -1000,
	-1000, 902, -1000, -1000, -1000, 26359, -1000, -1000, 771, 913,
	-1000, -1000, -1000, 1328, 1819, 1819, 1819, 1896, 242, 236,
	-1000, 80, -1000, 1721, -1000, 1151, -1000, -1000, -1000, -1000,
	-1000, 40834, -1000, -1000, 14922, 14922, 14922, 14922, 14922, 1094,
	342, -1000, 436, 434, 7366, -1000, -1000, 2065, -1000, -1000,
	-1000, 274, -1000, -1000, 14922, 81, -1000, -1000, -1000, -1000,
	432, 2073, -1000, 605, -1000, -1000, -1000, 553, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1556, 429, 426,
	424, -1000, 422, -1000, -1000, 421, 418, 415, 413, 412,
	411, 406, 403, 402, 401, 400, 396, 394, 391, 389,
	1053, -1000, 582, -1000, -1000, 582, 582, -1000, 369, 369,
	370, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 369,
	-1000, -1000, -1000, 528, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 388, 1183, -1000, -1000, 1183,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 734, 35966, -42,
	34650, -1000, 387, -42, -1000, -1000, 385, -1000, 10111, 10111,
	-1000, -1000, -1000, -1000, -1000, 9425, 1459, -1000, 4210, -212,
	251, 504, -1000, 17323, 20061, -1000, -1000, 997, 1694, 597,
	-1000, 1003, 1681, 464, -1000, 988, -1000, 861, 1678, -116,
	22399, 21727, -40, -56, -1000, -1000, -1000, 5649, 40834, -1000,
	40834, -1000, 835, 19036, 81, -1000, -1000, -1000, -1000, 383,
	1250, 567, -1000, 246, -1000, 28016, 567, 1248, -1000, -1000,
	-1000, 26359, -1000, 34650, -1000, 34650, -1000, 858, -1000, 36295,
	112, 1672, -1000, -1000, 112, 1649, -1000, 111, 1647, -1000,
	-1000, 1214, 1624, -1000, -56, 1621, -1000, -1000, 14922, -73,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 617, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 27684, 21397, 1196, 541, 40834, 1969, 41448, 22399, 40834,
	21397, -1000, -1000, 34650, -1000, 14922, -1000, 1967, 1281, -46,
	-1000, -1000, -1000, -1000, -1000, 1285, 1321, 682, 926, 9082,
	9082, 1776, -1000, 109, 5992, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 27352, -1000, -1000, -1000, 1138, 34650, -1000,
	-1000, 1554, -1000, 21397, 34650, -1000, 34650, -1000, 34650, -1000,
	34650, -1000, 34650, -1000, -1000, -1000, -1000, -1000, 3935, -1000,
	1545, -1000, -1000, 34650, -1000, 1282, -1000, -1000, -1000, 27023,
	26691, -1000, 919, 769, -1000, -1000, 114, -1000, 22399, -1000,
	1328, -1000, 1174, 1369, 13548, 1314, 14922, 80, -1000, -1000,
	80, 80, 8739, -1000, -1000, -1000, 34650, -1000, 41358, 41448,
	5992, 755, 14922, 14922, 14922, 14922, 14922, 14922, 14922, 14922,
	14922, 14922, 14922, 14922, 14922, 14922, 14922, 14922, 14922, 14922,
	14922, 14922, 14922, 14922, 14922, 14922, 14922, 14922, 14922, 14922,
	14922, 14922, 14922, 14922, 1112, 14922, 729, 14922, 14922, 14922,
	14922, 1542, 1080, 368, 1111, -1000, 2026, 2026, 2026, 40991,
	40991, 347, 342, -1000, 14922, -1000, 13, 14922, 236, 39050,
	-41, 7023, -1000, -1000, -1000, 13205, 579, 40834, 81, 6335,
	-1000, 2064, 784, 1570, 1452, 374, 526, 513, 512, 477,
	14922, 14922, 12862, 12518, 12174, 15608, 11830, 14922, 7709, 14922,
	14922, 14922, 14922, 11486, 11142, -1000, 373, -1000, -1000, -1000,
	-1000, 2061, -1000, -1000, 2060, -1000, 749, 747, 2059, -1000,
	-46, -1000, 35966, -1000, 34650, -42, 1953, 34650, -1000, 108,
	-1000, 39894, -1000, 108, -74, -1000, 1377, 1376, 18694, 1717,
	1105, 1105, 1105, -1000, 372, 468, 504, 4944, 10798, -1000,
	25372, 1119, 137, 233, 4573, 1459, -1000, 34650, -67, 975,
	-1000, 23715, 1929, 1837, 1810, 26359, 1917, 13, 1504, 721,
	26359, 714, 1916, 13, 1500, 706, 34650, 5992, 523, -1000,
	34650, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1497, -76, -1000, -1000, 23386, 1946, 1612, -1000, 1074, -1000,
	1939, 34650, 1170, 1247, -1000, -1000, 763, 1610, 575, 239,
	1931, 239, 19377, -1000, 34650, -1000, 34650, -1000, -1000, 34650,
	-1000, 34650, -1000, 34650, 34650, -1000, 34650, 34650, -82, 40834,
	37481, 23057, 705, -1000, 600, 23386, 1769, -94, -1000, 806,
	-1000, -1000, -1000, -1000, 182, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 370,
	1053, 369, 369, 369, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 528, -1000, -1000, 582, 582, 582, -1000, -1000, -89,
	-1000, 1495, 537, -102, 638, -46, -1000, 1183, -1000, 1062,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2072, -1000, 2031, -1000, -1000, 2058, -50,
	-1000, -50, -1000, 5992, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 34650, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	270, -1000, -1000, -1000, -1000, -1000, -1000, 34650, 34650, 34650,
	-1000, 26359, -1000, -1000, -1000, -1000, -1000, 40834, -1000, 338,
	-1000, -1000, 40834, 960, 1394, -1000, 1394, -52, -1000, 39772,
	1354, 34650, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 542, 384, 384, 740, 740, 740, 740,
	2041, 1131, 722, 2485, 273, 273, 273, 273, 273, 273,
	273, 273, 230, 845, 845, 230, 230, 230, 230, 230,
	273, 273, 273, 40991, 40956, 315, 14922, 14922, 704, 1069,
	368, 315, 14922, 315, 315, 315, 315, -1000, 1850, -1000,
	-1000, -1000, -1000, 1494, 366, 15608, 15608, -1000, -1000, -1000,
	7366, 15951, -1000, -1000, -1000, -1000, 365, 14922, -1000, 39306,
	-224, 232, -147, -1000, 14922, 466, -124, -1000, 816, -1000,
	14922, -1000, -51, 14922, 14922, 14922, 229, -1000, 228, -1000,
	702, -1000, 699, 692, 689, -1000, 362, 1096, 361, 360,
	14922, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 40582,
	37323, 227, -1000, 1492, -147, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 216, -1000, 213, -1000, 40460, -147, 211, 41078,
	-1000, 15608, 15608, 15608, 7366, 357, 210, -1000, 39497, -1000,
	40425, 10454, 10454, 10454, 207, 40303, 14922, -147, 37288, 4048,
	4013, -104, -109, -1000, -110, -1000, 2056, -117, 204, 535,
	529, 203, -1000, -1000, 356, -118, 575, 10111, 18009, 5992,
	-1000, 575, 9425, -1000, 18694, 18694, 1358, 1363, 18694, -1000,
	-1000, -1000, -1000, 25372, 502, 504, 25372, -1000, 2048, 1323,
	202, -1000, -1000, -1000, 34650, 355, -1000, 504, 201, 931,
	34650, 34650, 34650, -1000, -1000, 1242, 35637, 1238, 41448, 34650,
	-1000, 354, 353, 1353, 1345, 34650, 34650, 35308, 34979, 34650,
	939, 13, -1000, 346, 34650, 967, 34650, 13, -1000, 345,
	34650, 941, -1000, 1438, 1197, -1000, 833, 1482, 34650, 199,
	-119, -55, 41448, -1000, -1000, -1000, -1000, -1000, 34650, 235,
	34650, 13, 34650, 2043, 13, 34650, 1606, 1713, 487, 34650,
	1369, 14922, 976, -1000, 17666, 587, 34650, 904, 107, -1000,
	-1000, -1000, 518, 34650, -1000, -1000, 112, 112, -1000, 111,
	1214, -56, -1000, 14922, -1000, -1000, 34650, 22399, -125, -1000,
	-1000, 41448, -1000, 317, 635, -1000, 2046, 566, 22399, 34650,
	9082, 9082, -1000, 1383, -1000, -1000, 882, -1000, 992, -1000,
	-1000, -1000, -1000, 9082, -1000, -72, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 960, -1000, 14922, 2042, -1000, -1000, -1000,
	8739, -1000, -1000, -1000, 34650, -207, 14922, 315, 315, 14922,
	15608, 15608, -1000, 315, -1000, -1000, -1000, -1000, -1000, 1480,
	344, 14922, 41448, 39084, 4086, -127, -1000, 14922, -61, -1000,
	14922, -1000, 38928, -1000, -1000, 303, 1709, -1000, 14922, 40051,
	198, 9768, -1000, 39929, -54, -54, -1000, 2028, 1265, 1207,
	1012, 869, 2037, -1000, 19719, 576, 1123, 38893, 41358, 41448,
	-1000, 14922, -1000, -1000, 1479, 14922, -1000, 41358, 41448, 15608,
	15608, 15608, 15608, 15608, 15608, 15608, 15608, 15608, 15608, 15608,
	15608, 15608, 15608, 15608, 15608, 15608, 15608, 15608, 1316, 15608,
	2016, 2016, 2016, -64, 14922, -1000, 1544, 1479, 14922, 14922,
	41448, 197, 194, 192, -1000, 14922, -147, 14922, 14922, 14922,
	-1000, -1000, -1000, 189, -1000, 2024, -1000, -1000, -1000, -1000,
	1769, -1000, 1449, -1000, -112, -1000, 1459, -1000, 1449, -1000,
	-1000, 1358, -1000, 343, 14922, 18694, -1000, 459, -1000, -128,
	-1000, 25372, -1000, 457, -221, -1000, 516, -1000, 504, 341,
	34650, 25372, -1000, -1000, -1000, 688, 687, 1605, -1000, 1237,
	-1000, 596, -1000, 971, 14922, 16637, 339, 337, 1025, -1000,
	1602, 1214, 1600, 1214, -1000, -67, 932, -1000, 14922, -1000,
	686, -1000, -1000, 14922, -1000, 685, 566, 1475, 799, -1000,
	817, -1000, 1409, -1000, 23386, 327, 34650, 326, -1000, 325,
	-1000, -1000, 322, 34650, 1295, 487, 22728, -1000, 567, 904,
	-1000, 40834, -1000, 904, 8396, 1824, -136, -1000, -1000, -1000,
	575, 19377, 18694, 9425, -141, -1000, -1000, -1000, -1000, 40834,
	-72, 1779, 1779, -1000, 2013, -1000, 456, 188, -1000, 26030,
	-1000, -72, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 34650,
	1115, 38771, -1000, 1826, 5992, 1908, 315, 458, 301, 14922,
	41448, 41113, -146, 14922, 14922, -1000, 187, 14922, 446, 40834,
	-1000, -1000, -1000, 40834, 14922, 2018, 14922, 186, 185, 178,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 177, -1000,
	-1000, 36953, 14922, 175, -1000, 174, 172, 40834, 1544, 40834,
	-1000, -1000, 500, 500, 828, 828, 828, 828, 2016, 1139,
	616, 2410, 1046, 1046, 1046, 1464, 340, 340, 1046, 1046,
	1046, 1468, 1324, 320, 3514, 14922, 171, -1000, -1000, 40834,
	40834, 169, -1000, -1000, -1000, -147, 3636, 38515, 38393, -1000,
	167, 162, 1446, 1892, -1000, 18694, 1446, -1000, 34650, 40834,
	-1000, -212, -1000, 2009, -1000, -1000, 1323, -1000, 5301, 25372,
	34650, -148, -1000, 34650, 34650, 34650, 1597, -1000, 1483, -1000,
	38358, -149, -1000, 282, 1859, 14922, -1000, -1000, 319, 16637,
	34650, -1000, 1341, 1366, 625, 34650, -1000, 34650, -1000, 34650,
	34650, 34650, -154, 34650, -155, 34650, -1000, 22399, 739, -1000,
	-1000, 1412, -1000, 16637, 318, 34650, 23386, 1930, 16637, 1163,
	1299, 487, 22728, -1000, 763, -1000, -1000, -75, -1000, 323,
	13, 904, -1000, -88, -1000, 511, 1763, -1000, 1762, 445,
	-1000, -1000, -96, 316, -1000, 508, 503, -1000, -1000, -1000,
	-1000, 1826, 14922, 14922, 41113, -157, -1000, 315, 315, -1000,
	38236, -1000, 40834, -1000, 39929, -1000, -1000, -1000, -1000, 1084,
	-1000, 37980, -1000, -1000, -1000, -1000, 15608, 1462, 312, 41448,
	37858, -1000, -1000, 14922, -1000, -1000, -1000, -1000, 573, 14922,
	14922, 1459, 573, -160, 504, -1000, -1000, -1000, 2004, -1000,
	-162, -1000, -1000, -1000, -1000, 34650, -1000, 34650, -1000, 5992,
	34650, 1461, 1228, -1000, -1000, 1343, 302, 15608, 34650, -1000,
	1031, 16637, 1826, 81, 5992, 1826, 37823, 6335, -163, -165,
	1223, -1000, 1221, 14922, -1000, 41448, 1214, 1214, -1000, 658,
	651, 649, -1000, 646, -1000, -101, 20403, 1082, -168, 16637,
	-170, 160, 13, -171, 34650, -1000, 487, 22728, -1000, 1713,
	1722, 34650, 1789, -1000, -1000, 300, 299, 298, -1000, 25701,
	25701, 22399, 22399, -1000, 315, 315, -1000, -1000, 159, 1123,
	1888, -1000, 818, 15608, 41448, -178, -1000, 37701, -1000, 34650,
	40834, -147, -1000, -1000, 25372, 444, -1000, -1000, 956, -1000,
	-1000, 34650, 1234, -1000, -1000, 14922, 3514, 288, 1409, 287,
	-1000, -1000, -1000, -1000, -1000, -1000, 1859, -51, -1000, 1037,
	-1000, -1000, 40834, 1835, -1000, -1000, 34650, 34650, 286, 285,
	-1000, 279, 81, 34650, 1031, -179, -1000, 1409, -1000, 1031,
	271, 22728, -1000, 1295, 737, -184, 34650, -1000, -1000, 6678,
	22399, 22399, -1000, -185, -1000, -1000, -1000, 1035, 14922, 818,
	-186, -1000, -1000, -107, -1000, 1927, -1000, -1000, -1000, -1000,
	1596, 37445, 1270, 34650, -1000, 34650, 1826, 157, 34650, 599,
	5992, -1000, -1000, 14922, 14922, 14922, 253, 1409, 1031, -1000,
	1409, 16637, -1000, 1299, 853, -1000, 575, -1000, -187, -192,
	-1000, 154, 15265, 15265, -147, -1000, 34650, 252, 1585, -1000,
	1128, 1006, 147, -193, -1000, -1000, 246, -1000, 14922, -1000,
	-194, -195, -54, 34650, -1000, 1409, -1000, -200, -1000, 19377,
	-1000, 566, 566, -1000, -1000, -1000, 16294, 1231, 887, 39462,
	-1000, -1000, -1000, 34650, -1000, 1158, 1129, 842, -1000, -1000,
	-1000, -1000, -1000, 1270, 40834, -1000, -1000, 146, -201, -1000,
	1031, -180, -1000, -1000, 1977, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1738, -1000, 607, 1271, 1271, 1128, 2018, 1182,
	1409, -1000, 14579, -1000, 1986, -1000, -1000, 1329, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2521, 2519, 1606, 2009, 2517, 2516, 2515, 2514, 2513,
	2512, 2511, 2507, 2499, 2498, 2490, 2488, 2486, 2484, 2479,
	2001, 2477, 1978, 2476, 2473, 2469, 2463, 2458, 2455, 1973,
	2448, 2445, 2441, 2440, 2438, 2437, 1967, 2435, 1923, 2429,
	2428, 2426, 2425, 2423, 1908, 2416, 66, 106, 1904, 2414,
	2413, 1890, 1873, 1868, 2410, 1852, 2406, 2405, 1800, 1696,
	2403, 84, 2402, 2395, 2393, 1694, 1634, 2391, 2389, 2388,
	148, 2384, 1614, 2383, 2382, 2377, 2373, 2370, 2369, 2364,
	2360, 2358, 2356, 2355, 2353, 2346, 2345, 2343, 2341, 2340,
	2339, 152, 2335, 2334, 1598, 1592, 2333, 2332, 34, 32,
	13, 52, 20, 135, 2677, 129, 2331, 2318, 2308, 2305,
	2304, 2303, 21, 90, 87, 2299, 80, 2298, 2294, 45,
	31, 22, 19, 2289, 88, 2288, 2287, 1313, 27, 2286,
	2285, 133, 2283, 39, 24, 193, 145, 143, 107, 120,
	2277, 2276, 2274, 43, 119, 1, 2272, 2271, 15, 77,
	14, 2270, 49, 60, 2266, 2261, 123, 2259, 51, 100,
	1521, 118, 144, 295, 76, 2258, 53, 10, 56, 2257,
	2256, 150, 29, 2255, 40, 74, 141, 2254, 73, 151,
	121, 59, 122, 124, 2253, 2252, 2251, 115, 2250, 109,
	79, 2248, 2247, 57, 2246, 105, 127, 2244, 2243, 2242,
	86, 2241, 113, 2240, 2238, 147, 139, 104, 8, 37,
	65, 5, 1505, 1487, 126, 82, 48, 47, 2237, 2097,
	1353, 1052, 33, 98, 70, 44, 101, 58, 78, 136,
	23, 2236, 2232, 128, 2229, 2224, 2222, 2220, 2218, 99,
	2217, 2215, 17, 2213, 62, 35, 50, 81, 38, 93,
	116, 117, 149, 96, 2206, 67, 112, 2205, 197, 2203,
	2201, 1531, 108, 2198, 2195, 2192, 950, 927, 693, 95,
	2191, 2187, 576, 271, 2186, 2184, 89, 2182, 110, 102,
	94, 137, 134, 71, 2179, 111, 18, 2177, 28, 26,
	0, 512, 342, 2175, 114, 64, 2174, 2168, 2166, 2162,
	25, 3, 9, 4, 7, 6, 55, 42, 2158, 2157,
	125, 91, 61, 2153, 146, 2150, 2147, 2144, 36, 2142,
	16, 2141, 11, 2132, 2127, 12, 2, 2123, 2119, 132,
	2114, 97, 2110, 1910, 2104, 140, 2103, 2101, 1820, 2093,
	30, 103,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	7, 7, 8, 8, 6, 6, 6, 6, 6, 9,
	9, 10, 16, 13, 18, 12, 12, 15, 15, 114,
	114, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 111, 111, 116, 116,
	116, 118, 118, 115, 115, 110, 110, 20, 20, 59,
	59, 101, 52, 52, 52, 288, 288, 289, 289, 97,
	97, 98, 98, 98, 98, 99, 99, 100, 100, 100,
	28, 28, 28, 22, 22, 22, 22, 22, 23, 23,
	24, 24, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 36, 36, 37, 37,
	37, 37, 37, 37, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 43, 43, 43, 41, 41,
	41, 40, 40, 40, 39, 39, 39, 42, 42, 42,
	162, 162, 161, 161, 165, 165, 44, 44, 44, 44,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 47, 47, 47, 47,
	47, 47, 47, 257, 257, 256, 45, 45, 231, 231,
	48, 48, 188, 188, 49, 49, 49, 49, 49, 50,
	50, 60, 60, 329, 329, 329, 333, 333, 334, 334,
	335, 335, 335, 335, 335, 335, 335, 331, 331, 55,
	55, 55, 55, 56, 56, 56, 57, 57, 96, 96,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 25,
	26, 66, 66, 66, 68, 65, 65, 65, 67, 67,
	67, 67, 69, 69, 70, 70, 70, 70, 70, 71,
	71, 282, 280, 280, 281, 281, 141, 141, 141, 141,
	141, 142, 142, 142, 287, 287, 287, 287, 287, 287,
	286, 286, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 84, 84,
	84, 91, 91, 91, 91, 91, 91, 91, 73, 73,
	78, 78, 78, 78, 78, 74, 74, 79, 79, 80,
	80, 81, 81, 81, 81, 81, 81, 75, 75, 75,
	75, 83, 83, 83, 83, 82, 82, 88, 88, 88,
	88, 88, 88, 85, 85, 85, 85, 86, 86, 86,
	89, 89, 89, 89, 76, 76, 77, 77, 90, 90,
	87, 87, 87, 330, 330, 332, 332, 53, 53, 32,
	32, 33, 33, 143, 143, 144, 144, 210, 210, 210,
	210, 145, 145, 117, 117, 117, 209, 298, 298, 299,
	299, 299, 299, 299, 299, 300, 300, 300, 300, 300,
	300, 300, 296, 296, 297, 294, 294, 295, 295, 295,
	295, 336, 336, 208, 208, 148, 148, 303, 303, 303,
	303, 301, 301, 301, 301, 301, 304, 302, 305, 305,
	305, 305, 305, 243, 243, 243, 93, 93, 34, 34,
	123, 123, 35, 35, 31, 31, 31, 192, 192, 152,
	152, 248, 248, 248, 134, 134, 112, 112, 112, 14,
	11, 11, 11, 11, 11, 11, 19, 19, 17, 17,
	193, 193, 194, 194, 54, 54, 58, 58, 63, 63,
	92, 92, 92, 92, 92, 92, 21, 21, 21, 21,
	27, 27, 27, 27, 62, 62, 338, 338, 130, 130,
	130, 130, 131, 131, 205, 205, 206, 206, 339, 339,
	207, 207, 207, 125, 124, 126, 126, 30, 30, 30,
	119, 119, 120, 120, 121, 121, 122, 122, 340, 340,
	51, 51, 51, 95, 95, 137, 137, 202, 202, 202,
	204, 204, 203, 203, 203, 178, 178, 178, 94, 94,
	157, 157, 167, 167, 168, 168, 254, 169, 169, 61,
	61, 104, 104, 102, 102, 102, 102, 102, 102, 103,
	103, 103, 105, 105, 105, 105, 105, 105, 105, 108,
	108, 108, 109, 109, 109, 107, 107, 311, 311, 311,
	314, 314, 310, 312, 312, 313, 313, 337, 337, 179,
	179, 179, 147, 146, 146, 150, 150, 149, 151, 151,
	247, 247, 247, 176, 176, 176, 176, 197, 197, 195,
	195, 196, 196, 198, 198, 199, 199, 199, 200, 200,
	201, 201, 175, 175, 227, 227, 106, 106, 106, 156,
	156, 156, 158, 158, 217, 217, 217, 218, 218, 216,
	216, 216, 216, 249, 249, 249, 249, 249, 249, 249,
	249, 327, 327, 327, 328, 328, 246, 246, 250, 250,
	250, 250, 250, 250, 244, 244, 244, 244, 245, 245,
	255, 255, 182, 182, 182, 182, 180, 180, 181, 181,
	251, 251, 251, 251, 177, 177, 252, 252, 252, 211,
	211, 258, 258, 258, 276, 276, 155, 155, 155, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 260, 260,
	260, 260, 262, 262, 262, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 275, 275, 275, 275, 275, 263, 263,
	270, 270, 271, 271, 272, 273, 264, 264, 265, 265,
	266, 267, 274, 274, 274, 274, 278, 278, 268, 268,
	268, 268, 268, 269, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 190, 190,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 221, 221, 221, 221, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 306, 306, 306,
	306, 306, 306, 306, 306, 308, 308, 309, 309, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 315,
	315, 316, 316, 318, 318, 319, 319, 320, 321, 321,
	321, 322, 323, 323, 317, 317, 324, 324, 324, 325,
	325, 326, 326, 326, 326, 326, 233, 233, 234, 235,
	241, 241, 241, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 132,
	132, 132, 132, 132, 164, 164, 163, 163, 230, 230,
	228, 228, 232, 232, 183, 183, 277, 277, 277, 277,
	277, 277, 277, 184, 184, 184, 191, 185, 185, 186,
	186, 186, 186, 186, 224, 225, 187, 187, 187, 226,
	226, 236, 240, 240, 239, 238, 238, 237, 237, 214,
	214, 215, 215, 213, 212, 172, 172, 171, 171, 170,
	170, 341, 341, 242, 242, 173, 173, 174, 166, 166,
	253, 253, 253, 253, 159, 159, 139, 139, 160, 160,
	135, 135, 138, 138, 136, 136, 136, 136, 153, 153,
	154, 154, 133, 133, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 279, 279, 279, 229, 127,
	127, 127, 128, 128, 129, 129, 284, 284, 284, 285,
	285, 285, 285, 283, 283, 283, 283, 283, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 2, 6,
	2, 1, 12, 12, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	4, 6, 7, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 1, 2, 2, 7, 3, 2, 2,
	2, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	1, 3, 1, 2, 2, 3, 2, 2, 5, 3,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 1, 5, 2, 3, 0,
	3, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	2, 6, 2, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 1,
	4, 6, 6, 3, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 3, 1, 3, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 1, 2, 2, 3, 3,
	4, 4, 3, 4, 4, 4, 3, 2, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 2, 3, 3, 3, 2, 3, 4, 3, 5,
	3, 4, 5, 2, 3, 3, 3, 4, 2, 3,
	4, 3, 3, 3, 4, 4, 4, 4, 2, 3,
	5, 5, 5, 2, 0, 2, 0, 3, 2, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 2, 4, 3,
	3, 0, 6, 3, 11, 14, 4, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 8, 10, 8, 10, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 2, 0, 8, 3,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 2, 3, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 3, 3, 1, 5,
	5, 0, 2, 3, 1, 3, 2, 0, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 3, 4, 1, 1, 1, 5,
	1, 3, 3, 1, 3, 3, 1, 3, 3, 1,
	1, 3, 3, 1, 1, 6, 6, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 5, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 372, -4, -20, -22, -25, -28,
	-29, -49, -36, -37, -38, -48, -44, -50, -51, -52,
	-53, -45, -59, -58, -60, -63, -61, -54, -55, -64,
	-72, -92, -93, -94, -95, -5, -6, -7, -8, 23,
	34, -23, -24, 47, -26, 68, -30, -31, -32, -33,
	70, -34, -35, 91, -313, 95, -39, -40, -41, -43,
	-42, 99, 106, 109, 131, 142, 223, 229, 250, 252,
	254, 261, -102, -104, 248, -56, -57, -65, -66, -67,
	-68, -96, 273, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, -89,
	-90, 276, -21, -27, -62, 314, -9, -10, -13, -12,
	-11, -16, -18, -15, -17, -19, -14, 108, -311, -105,
	-103, 369, 249, 323, 35, 285, 61, 102, 256, 339,
	346, -108, -106, -107, -109, 266, 331, 295, 373, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 2, 295, 334, 84, 150, -329, 2, -160,
	295, 84, -136, -127, 362, 4, -290, -292, 20, 21,
	23, 33, 34, 35, 40, 44, 47, 48, 55, 60,
	61, 62, 64, 66, 68, 69, 72, 73, 74, 82,
	83, 85, 87, 91, 93, 95, 98, 99, 101, 106,
	108, 107, 109, 119, 120, 125, 127, 132, 138, 139,
	142, 143, 151, 154, 156, 149, 166, 167, 168, 170,
	171, 172, 175, 174, 179, 182, 185, 187, 188, 189,
	192, 190, 194, 195, 197, 196, 202, 204, 205, 207,
	210, 213, 216, 219, 220, 221, 222, 223, 225, 227,
	229, 231, 232, 233, 234, 235, 237, 238, 240, 241,
	242, 243, 244, 248, 246, 247, 249, 250, 251, 252,
	254, 256, 257, 259, 274, 275, 286, 261, 262, 263,
	264, 265, 269, 267, 270, 271, 273, 276, 278, 281,
	284, 285, 287, 290, 291, 288, 283, 294, 296, 297,
	298, 299, 300, 301, 302, 309, 310, 314, 315, 316,
	317, 320, 321, 322, 323, 325, 328, 329, 330, 335,
	340, 341, 342, 343, 344, 28, 36, 37, 38, 39,
	41, 42, 45, 46, 51, 52, 53, 56, 86, 88,
	89, 105, 110, 111, 121, 122, 123, 133, 135, 144,
	145, 148, 155, 157, 158, 159, 160, 161, 163, 177,
	191, 201, 203, 214, 218, 226, 228, 236, 258, 268,
	279, 280, 289, 292, 304, 305, 306, 311, 312, 327,
	331, 332, 372, 372, 2, 167, 233, -135, -127, 84,
	372, 372, 372, 372, 295, 2, 324, 334, -192, 84,
	319, 372, 372, -127, 229, 22, 2, 93, 154, 322,
	321, 22, 225, 267, 297, 299, 2, 372, 372, 372,
	372, 372, 2, 334, 295, 150, 84, 324, -127, 2,
	-47, 2, 369, -46, -4, -29, -38, -48, -44, -20,
	-22, -36, -52, -51, -53, -55, -59, -58, -61, -65,
	-66, -72, -94, -95, 273, -333, 2, 22, -334, -335,
	70, 99, 131, 266, 154, 93, 321, 295, 2, 167,
	2, -127, 2, -329, 2, 167, 2, -333, 2, -127,
	2, -131, 2, 261, -127, 372, 372, 372, 372, 372,
	182, 55, 258, 270, -70, 310, -69, 304, -282, -71,
	2, -161, 192, -127, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 2, -91, 270, 34, 55, 22, 60, 85, 132,
	150, 151, 171, 65, 66, 232, 182, 168, 309, 172,
	271, 296, 310, 70, 325, 300, 107, 4, 84, 192,
	272, 304, 372, 372, 372, -337, 2, 295, 263, -103,
	-105, -104, -149, -150, 318, 162, 104, 212, -102, -104,
	2, -311, -91, 270, 2, 55, 22, -280, 2, -242,
	208, -219, 90, -221, 360, 361, 355, 198, 345, -233,
	-223, -236, 105, 258, 369, -135, -222, 375, 9, -308,
	-104, 29, -234, -235, 49, -127, 7, 8, 5, 6,
	-133, -260, -229, -269, 313, 112, 200, -306, -307, 4,
	-290, -284, -261, -271, -265, -268, 163, 58, 76, 77,
	80, 78, 81, 272, 324, 50, 28, 110, 111, 218,
	226, 292, 311, 312, 144, 201, 145, 56, 133, 177,
	98, 37, 39, 41, 42, 51, 52, 86, 88, 89,
	121, 122, 123, 155, 157, 158, 159, 160, 161, 203,
	236, 279, 289, 305, 306, 332, -291, -272, -273, -266,
	-267, 71, 113, 130, 153, 146, 165, 169, 178, 180,
	193, 215, 217, 255, 277, -274, -338, 2, 310, 310,
	2, -338, 2, -338, 2, -130, 2, 310, 307, -314,
	237, -310, -127, -314, 372, 372, 374, 372, -146, -147,
	2, 22, 96, -174, 2, 369, -249, 2, 367, -251,
	-135, -104, -250, 369, 209, -3, 2, -251, 144, -135,
	2, -251, 144, -135, 2, -127, 2, -138, 144, -135,
	307, 374, -160, -153, -127, -213, -212, 371, -219, 2,
	-219, 2, 129, 369, -171, -172, -212, -213, 2, -161,
	144, -127, 2, -161, 2, 150, -127, 144, 2, -127,
	22, 129, 2, 164, 2, 164, 2, -252, 2, -251,
	-162, 144, 2, -161, -162, 144, 2, -139, 144, 2,
	-138, -127, 144, 2, -153, 144, 2, -188, 369, -257,
	2, -256, -285, 4, -290, -292, -291, 331, 58, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 270, 208, 374, -161, -219, -231, 369, 129, -219,
	208, -127, 2, 274, 2, 369, -70, 53, 310, -206,
	2, -207, -124, -125, -126, 166, 231, 235, 344, 307,
	350, 129, -280, -165, 371, -91, 2, -288, 2, -286,
	9, -285, 5, 274, 2, 232, 271, 55, 129, 2,
	2, -330, 2, 208, 129, 2, 129, 2, 129, 2,
	129, 2, 129, 2, 2, 232, 271, 2, 126, 2,
	309, 2, 2, 129, 2, 166, 231, 286, 2, 295,
	334, 2, 129, 129, 344, 2, -177, -251, 295, -149,
	-150, -176, -195, -196, 181, 114, 206, -179, 22, 96,
	-179, -179, 44, 370, 370, -91, 274, 2, 10, 11,
	57, 33, 360, 361, 362, 363, 124, 364, 365, 358,
	359, 357, 348, 349, 352, 353, 354, 67, 351, 350,
	63, 186, 260, 115, 116, 117, 118, 245, 13, 14,
	15, 26, 211, 180, 345, 146, 277, 355, 16, 17,
	18, 165, 36, 147, -132, -140, -219, -219, -219, -219,
	-219, 217, -170, -214, 367, -104, 369, 369, -104, -219,
	-163, 369, 7, -104, -228, 367, -237, -219, -171, 369,
	5, 369, 5, -315, 340, 126, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 228, -278, 335, -278, -278,
	-262, 369, -262, -263, 369, -262, 341, 346, 369, -205,
	-206, -205, 307, -131, 374, -314, -154, 369, -174, -166,
	-253, -219, 362, -166, -173, -242, 71, -182, 169, 193,
	130, 178, 255, 153, 7, -47, -216, 375, 369, 362,
	-246, 346, -104, -250, 369, -249, -135, 369, -114, 246,
	-113, 21, 23, 99, 329, 105, 283, 301, 262, 246,
	105, 246, 283, 301, 262, 246, 105, 375, -288, -136,
	374, -283, 362, 4, -290, -292, -291, -293, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 43, 49, 50,
	54, 57, 59, 65, 70, 75, 76, 78, 77, 79,
	80, 81, 90, 92, 94, 96, 97, 100, 102, 104,
	112, 114, 126, 128, 129, 131, 134, 136, 147, 150,
	152, 162, 164, 173, 176, 181, 183, 184, 198, 199,
	200, 206, 208, 209, 211, 212, 224, 230, 239, 253,
	266, 272, 282, 293, 295, 303, 307, 308, 313, 318,
	319, 324, 326, 333, 334, 336, 337, 338, 339, 287,
	370, -159, -135, -172, 369, -148, 198, -123, -312, 339,
	-148, 369, -128, 144, 2, -127, -312, 198, -252, -137,
	-135, -137, 273, -127, 30, -116, 374, 48, 251, 105,
	-116, 105, -116, 374, 105, -116, 105, 105, -163, -219,
	370, 374, -329, -335, 70, 369, 30, -230, -258, -259,
	-261, -270, -264, -268, -269, 40, 46, 45, 302, 191,
	268, 280, 327, 148, 38, 207, 156, 4, 155, 157,
	158, 159, 160, 161, 279, 37, 236, 122, 123, 121,
	98, 89, 88, 203, 42, 41, -272, -273, -266, -267,
	86, 305, 306, 163, 39, 52, 51, 332, 289, -289,
	-288, -329, -282, -163, 30, -206, 2, -339, 374, 179,
	-142, 185, 197, 138, 209, 342, -287, 5, 4, -229,
	-243, 90, 182, -269, 8, 361, -279, 7, 360, -281,
	-280, -281, 74, 371, -283, -161, 22, 275, 2, -282,
	-332, 126, -329, -282, -282, -282, -282, -282, 270, -47,
	126, -127, 179, -282, 2, -282, 2, 295, 150, 295,
	-116, 374, -288, -176, -196, -195, -198, -219, 22, -201,
	120, 194, -219, -221, -103, -103, -103, -151, -247, -219,
	230, 150, -282, -276, -258, -275, 241, 242, 240, 244,
	243, -258, -283, 304, -219, -219, -219, -219, -219, -219,
	-219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
	-219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
	-219, -219, -219, -219, -219, -219, 180, 146, 277, 36,
	147, -219, 307, -219, -219, -219, -219, 190, 198, 200,
	313, 112, 320, 96, 204, -341, 293, 32, -226, -104,
	369, -241, 27, 282, 22, -233, 258, 369, -214, -219,
	-215, -164, -163, 370, 374, -164, -232, -228, -240, -239,
	336, 370, -163, 333, 22, 96, 362, 2, 7, -189,
	343, 189, 87, 139, 188, -190, 265, -316, 119, 134,
	369, 370, 2, 370, 2, 370, 2, 370, 2, -219,
	-219, -183, 2, -277, -163, 4, 343, 189, 87, 139,
	188, 265, -183, 2, -184, 2, -219, -163, -185, -220,
	-221, 360, 361, 355, 369, 258, -186, 2, -219, -164,
	-219, 43, 176, 308, -187, -219, 129, -163, -219, -219,
	-219, -163, -163, 2, -163, 2, 369, 7, 7, 304,
	304, 7, -131, -310, 30, -153, -156, 374, 129, 30,
	4, -156, 374, 370, 169, 169, -249, -182, 169, -180,
	215, -180, -180, -327, 369, 368, -246, -283, 367, 376,
	-164, 2, -245, -244, 30, -127, 213, 370, -135, 374,
	307, -193, 65, 59, -209, 144, 59, -294, -127, 65,
	-295, 54, 319, 230, 128, -193, 65, -193, 65, 65,
	-251, 33, -61, 129, 307, -251, 307, 33, -61, 129,
	307, -138, -283, -255, 347, -127, 129, 370, 374, -143,
	-153, -144, -127, -210, -209, -296, -297, -294, 150, 319,
	113, 30, 105, 222, 30, 208, 198, -119, 298, 105,
	-211, 337, -202, -61, 369, 90, 30, -202, -167, -168,
	-254, -169, -135, 369, -127, -161, -162, -162, -138, -139,
	-127, -153, 370, 374, -47, -256, 307, 326, -144, -46,
	370, 374, -155, 29, 367, -189, 369, -255, 374, 129,
	350, 307, 370, 310, -207, -141, 235, 281, 247, 269,
	8, 7, 7, 374, -283, -331, -127, 270, -47, -135,
	-138, -135, -251, -199, -279, 369, 361, -200, 258, 259,
	374, -112, 31, 94, 170, -135, 344, -219, -219, 307,
	-341, 293, -226, -219, 190, 200, 313, 112, 320, 96,
	204, 129, 369, -220, -220, -163, -223, 369, -163, 368,
	378, 370, -219, 368, 368, 374, -238, -239, 100, -219,
	-150, 374, -149, -219, -163, -163, 370, 370, 307, 307,
	307, 307, 369, -321, 216, 369, 369, -219, 30, 374,
	370, 129, 370, 370, -191, 224, 370, 10, 11, 360,
	361, 362, 363, 124, 364, 365, 358, 359, 357, 348,
	349, 350, 63, 186, 260, 13, 14, 15, 165, 147,
	-220, -220, -220, -163, 369, 370, -224, -225, 129, 126,
	30, -187, -187, -187, 370, 129, -163, 374, 374, 374,
	370, 370, 370, 7, 370, 374, 370, 344, 344, 370,
	369, 370, -211, -253, -158, 2, -249, -283, -211, -242,
	-249, -249, -181, 326, 208, 169, -249, -244, 370, -328,
	7, -246, -245, 7, -218, -217, 127, 196, 370, -127,
	369, -246, 370, -113, -135, -127, -127, 198, -209, 144,
	-118, 198, -258, -127, 369, 369, 170, 170, -127, -127,
	144, -127, 144, -127, -127, -114, 246, -61, 369, -135,
	246, -127, -61, 369, -127, 246, -97, 143, 204, 287,
	129, -135, 370, 370, 374, -128, 150, -128, -61, -161,
	5, -61, -135, 105, -120, 101, -340, 350, -127, -197,
	-195, -219, -178, -204, 253, 208, -159, 331, -127, -178,
	-157, 374, 129, 350, -159, -116, -116, -116, -116, -219,
	-331, -288, 370, -258, 367, 368, 7, 7, -100, 339,
	-288, -331, -280, -280, -124, 317, 62, 235, -280, 374,
	-200, -219, -247, -135, 375, -219, -219, -220, -220, 129,
	369, -219, -230, 26, 26, 370, -164, 374, -215, -219,
	370, -228, 102, -219, 303, 370, 333, -150, -150, -150,
	5, 189, 139, 188, -190, 188, -190, -190, 7, -322,
	-127, 369, 337, -149, 370, -276, -258, -219, -224, -219,
	-276, -258, -220, -220, -220, -220, -220, -220, -220, -220,
	-220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
	-220, 96, 198, 204, -220, 374, -164, -225, -224, -219,
	-219, -258, 370, 370, 370, -163, -219, -219, -219, 370,
	7, -46, -175, 134, -255, 374, -175, -181, 369, -219,
	-249, 368, 370, 374, -245, 368, 374, 377, 350, -246,
	369, -153, -244, 307, 307, 105, 198, 328, -298, -295,
	-219, -152, -248, -127, -309, 369, -306, -307, -133, 369,
	369, -111, 99, 273, -194, 105, -116, 105, -116, 307,
	-193, 65, -163, 307, -163, 307, -100, 129, 294, 287,
	-145, 149, -210, 369, -128, 369, 369, -148, 369, -127,
	-121, 175, -340, -286, -312, -178, -178, -166, 199, 64,
	370, -211, -168, -158, -242, 370, -101, 72, -101, 7,
	368, 370, -99, 210, -98, -127, 5, -127, 209, 370,
	-112, -283, 26, 26, -219, -230, 370, -219, -219, 370,
	-219, 368, -219, 5, -219, 370, 370, 370, 370, -323,
	-127, -219, 370, 370, 370, -225, 129, 96, 204, 369,
	-219, 370, 370, 374, 370, 370, 370, 370, -227, 136,
	44, -249, -227, -153, -216, 7, -217, -283, 367, -245,
	-153, 370, -127, -127, -209, 105, -299, 65, -300, 57,
	113, 70, 198, 200, 319, 230, 54, 90, 239, 370,
	370, 374, -134, -171, 57, -134, -219, 369, -152, -153,
	198, 90, 198, 90, 83, 315, -127, -127, -135, -127,
	-127, 370, -135, 370, -127, -289, 304, 147, -152, 369,
	-153, -143, 30, -152, 208, -122, 174, -340, -286, -119,
	-203, 369, 208, -61, -178, 350, 83, 83, 368, 374,
	369, 350, 350, -112, -219, -219, 370, 370, -150, -317,
	221, 370, -220, 129, 369, -230, 370, -219, -318, 338,
	-219, -163, -318, 370, -246, 7, 370, -209, -127, -283,
	-127, 113, 144, 200, 170, 369, -220, -135, -208, -336,
	69, 291, -248, -112, -283, -112, 370, -163, 370, 370,
	200, 200, -219, -258, -116, -116, 307, 307, 307, 307,
	-222, -133, -127, 219, 370, -152, 370, 370, -61, 370,
	-135, -340, -286, -120, 97, -153, 65, -174, -104, 369,
	369, 369, -98, -99, -288, -288, 370, -150, 44, -220,
	-230, 370, 370, -319, -320, -127, -245, 368, -300, -128,
	198, -219, -129, 369, -145, 369, -134, -150, 239, -115,
	57, -127, -127, 369, 369, 369, -135, -208, 370, -145,
	-208, 369, -286, -121, 321, 199, 370, -127, -289, -289,
	370, -324, 234, 259, -163, 370, 374, 30, 105, 370,
	-303, 187, -127, -153, -112, 370, -135, -110, 326, -283,
	-163, -163, -163, 369, -145, -208, -145, -152, -122, 273,
	-211, 370, 370, 370, -325, -326, 36, 316, 74, -219,
	-325, -320, -322, 113, -301, -304, -302, 208, 130, 220,
	278, 370, 370, -148, -219, 370, 370, -150, -153, -145,
	370, -167, -100, -100, -326, 227, 125, 258, 227, 125,
	-127, -302, 208, -304, 208, 321, 93, -303, 370, 370,
	-208, -211, 26, -305, 195, 251, 48, 273, -305, -301,
	-117, 48, 251, -145, -326, 20, 200, 90,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 0,
	0, 143, 145, 0, 299, 0, 152, 154, 156, 158,
	-2, 161, 163, 0, 0, 0, 174, 176, 178, 180,
	182, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 639, -2, 0, 279, 281, 290, 292, 294,
	296, 297, 0, 342, 344, 346, 348, 350, 352, 354,
	356, 358, 360, 362, 364, 366, 368, 370, 371, 373,
	375, 0, 560, 562, 564, -2, 64, 65, 66, 67,
	68, 74, 75, 76, 77, 70, 72, 0, 675, -2,
	686, 0, 0, 0, -2, 0, -2, -2, -2, 0,
	0, 652, 654, 656, 658, -2, 0, 0, -2, 7,
	13, 15, 17, 20, 22, 24, 26, 28, 30, 32,
	34, 36, 38, 40, 43, 49, 51, 53, 56, 58,
	60, 62, 63, 0, 0, 0, 0, 0, 118, 263,
	0, 1251, 1178, 1184, 1185, 1209, 1210, 1211, 1228, 1229,
	1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
	1250, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260,
	1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270,
	1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290,
	1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300,
	1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
	1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320,
	1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
	1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
	1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350,
	1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,
	1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370,
	1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
	1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
	1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400,
	1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
	1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
	1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
	1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440,
	1441, 1442, 144, 146, 147, 0, 0, 0, 1180, 1251,
	153, 155, 157, 159, 0, 165, 0, 0, 0, 0,
	527, 162, 164, 254, 1311, 256, 258, 0, 0, 0,
	0, 168, 169, 170, 171, 172, 173, 175, 177, 179,
	181, 183, 184, 0, 0, 0, 0, 0, 253, 251,
	206, 207, 0, 236, 237, 238, 239, 240, 242, 210,
	212, 213, 215, 217, 219, 221, 222, 224, 226, 227,
	229, 231, 232, 234, 0, 0, 260, 266, 267, 268,
	270, 271, 272, 273, 274, 275, 276, 0, 124, 0,
	448, 249, 247, 0, 120, 0, 557, 0, 262, 558,
	559, 554, 555, 1338, 583, 280, 282, 291, 293, 295,
	-2, -2, 1429, -2, 306, -2, 314, 1435, 0, 317,
	318, 321, -2, 202, 343, 345, 347, 349, 351, 353,
	355, 357, 359, 361, 363, 365, 367, 369, 372, 374,
	376, 377, 378, 0, 0, 0, 382, 0, -2, -2,
	0, 0, 0, 0, 0, -2, 0, -2, 0, 0,
	-2, -2, 0, 0, -2, 0, 0, 381, 383, 384,
	385, 0, 561, 563, 565, 0, 517, 677, 0, -2,
	650, 651, -2, 0, 681, 681, 681, 0, 0, 651,
	649, 0, 283, 0, 285, 0, 382, 288, 289, 322,
	323, 1163, 1164, 880, 0, 0, 0, 0, 0, 0,
	982, 984, 1402, 1429, 0, 986, 987, 0, 989, 991,
	992, 0, 995, 996, 1148, 1180, 1194, 1195, 1196, 1197,
	0, 0, 1200, 0, 1202, 1203, 1204, 1050, 1006, -2,
	-2, 1192, 808, 809, 810, 811, -2, 1443, 1010, 1013,
	1016, 1019, 1020, 1023, 1024, 0, 1386, 1403, 1404, 1425,
	1426, 1434, 1438, 1439, 1410, 1422, 1411, 1398, 1408, 1420,
	1257, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1218, 842, 843, 848,
	849, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452,
	1453, 1454, 1455, 1456, 1457, 851, 585, 567, 576, 585,
	569, 570, 571, 572, 573, 574, 575, 578, 0, 667,
	1317, 670, 1191, 668, 653, 655, 0, 657, 0, 0,
	661, 683, 682, 716, 717, 0, 665, 666, 676, 732,
	770, 747, 738, 0, 0, 2, 69, 0, 1410, 770,
	71, 0, 1410, 770, 73, 0, 78, 0, 1410, 1183,
	0, 0, 264, 265, 1188, 1186, 1187, 0, 148, 149,
	150, 151, 0, 0, 1181, 1157, 1155, 1156, 160, 496,
	1410, -2, 519, 496, 523, -2, 674, 1410, 599, 255,
	257, 0, 167, 0, 612, 0, 614, 0, 629, 776,
	110, 1410, 187, 200, 110, 1410, 190, 110, 1410, 193,
	1176, 110, 1410, 196, 197, 1410, 199, 250, 0, 0,
	-2, 243, 245, 1219, 1220, 1221, 1222, -2, 1443, 241,
	211, 214, 216, 218, 220, 223, 225, 228, 230, 233,
	235, -2, 0, 0, 0, 447, 0, 0, 0, 556,
	0, 582, 298, 0, 303, 0, 305, 1397, -2, -2,
	309, 586, 590, 591, 592, 0, 0, 0, 0, 0,
	0, 0, 319, 203, 0, 379, 380, 388, 389, 125,
	126, 340, 341, 0, 392, 413, 425, 0, 0, 396,
	398, 446, 400, 0, 0, 402, 0, 404, 0, 406,
	0, 408, 0, 410, 412, 414, 426, 416, 676, 418,
	0, 420, 424, 0, 429, 0, 431, 432, 433, 0,
	0, 439, 0, 0, 386, 387, 110, 774, 0, -2,
	0, 645, 695, 696, 0, 0, 0, 0, 679, 680,
	0, 0, 0, 641, 642, 284, 0, 287, 0, 0,
	0, 0, 1083, 1084, 1085, 1086, 1087, 1088, 1091, 1092,
	1089, 1090, 1093, 1094, 0, 0, 0, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 1096, 1097,
	1098, 0, 0, 1100, 0, 1102, 0, 0, 0, 0,
	0, 0, 1162, 0, 0, 1099, 885, 886, 887, 919,
	920, 0, 983, 1159, 1152, 985, 0, 1105, -2, 1106,
	0, 0, 988, 993, 994, 1105, 0, 1147, -2, 0,
	1199, 0, 877, 1052, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1128, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 827, 845, 856, 853, 852,
	829, 0, 828, 826, 0, 830, 0, 0, 0, 566,
	-2, 568, 0, 580, 0, 669, 0, 0, 718, 721,
	1168, 1172, 1173, 721, 0, 1165, 0, 0, 0, 0,
	767, 767, 767, 765, 741, 0, 747, 0, -2, 771,
	759, 0, -2, 738, 0, 0, 772, 0, 79, 551,
	89, 0, 551, 551, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 761, 1179,
	0, 1153, 1154, 1223, 1224, 1225, 1226, 1227, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
	1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
	1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 140,
	0, 0, 1174, 1158, 454, 0, 0, 518, 0, 673,
	0, 0, 0, 1410, 526, 1212, 601, 0, 780, 0,
	615, 0, 0, 777, 0, 185, 0, 108, 109, 0,
	188, 0, 191, 0, 0, 194, 0, 0, 0, 1106,
	676, 0, 0, 269, 0, 0, 676, 0, 1108, 788,
	789, 790, 791, 792, 877, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 839,
	0, 814, 814, 814, 831, 832, 840, 841, 846, 847,
	858, 859, 861, 863, 857, 857, 857, 854, 855, 761,
	127, 0, 0, 0, 0, -2, 311, 0, 588, 0,
	593, 331, 332, 333, 595, 596, 315, 334, 335, 336,
	337, 338, 339, 0, 513, 0, 515, 1205, 0, 312,
	324, 313, 316, 0, 204, 390, 391, 393, 394, 395,
	399, 0, 443, 401, 403, 405, 407, 409, 417, 421,
	676, 427, 430, 434, 435, 436, 437, 0, 0, 0,
	516, 0, 300, 648, 693, 694, 699, 703, 704, 707,
	710, 711, 701, 880, 662, 663, 664, 687, 688, 538,
	0, 0, 286, 881, 784, 785, 833, 834, 835, 836,
	837, 882, 883, 0, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, -2, -2, -2, -2, -2, -2,
	-2, -2, 906, 907, 908, 909, 910, 911, 912, 913,
	-2, -2, -2, 917, 918, -2, 1101, 1103, 0, 1162,
	0, -2, 0, -2, -2, -2, -2, 931, 0, 933,
	936, 938, 940, 0, 0, 0, 0, 1161, 950, 1139,
	0, 0, 1080, 1081, 1082, 935, 0, 0, 1160, 1151,
	0, 0, 1104, 990, 0, 0, 0, 1112, 1146, 1142,
	0, 997, 686, 0, 0, 0, 0, 1004, 0, 1208,
	864, 865, 866, 867, 868, 869, 878, 1060, 0, 0,
	0, 1011, 1012, 1014, 1015, 1017, 1018, 1021, 1022, 0,
	0, 0, 1028, 0, 1115, -2, -2, -2, -2, -2,
	-2, -2, 0, 1030, 0, 1032, 1106, 1125, 0, 0,
	953, 0, 0, 0, 0, 1429, 0, 1035, 1106, 1133,
	0, 0, 0, 0, 0, 1106, 0, 1138, 0, 0,
	0, 0, 0, 1046, 0, 1048, 0, 0, 0, 0,
	0, 0, 579, 671, 0, 0, 780, 0, 0, 0,
	1171, 780, 0, 1167, 0, 0, 0, 0, 0, 762,
	766, 763, 764, 0, 0, 747, 759, 729, 0, 0,
	0, 736, 737, 758, 0, 757, 746, -2, 0, 0,
	0, 0, 0, 550, 91, 1410, 0, 112, 0, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 1182, 130, 0, 1189, 0, 0, 0, 0,
	0, 453, 1188, 455, 457, 458, 459, 460, 1213, 0,
	1213, 0, 0, 0, 0, 0, 0, 603, 609, 0,
	698, 0, 627, 617, 0, 0, 0, 627, 631, 632,
	634, 635, 0, 0, 778, 201, 110, 110, 1177, 110,
	110, 198, 252, 0, 208, 244, 0, 0, 0, 246,
	248, 0, 781, 783, 0, 793, 0, 139, 0, 0,
	0, 0, 304, 0, 587, 594, 0, 328, 0, 330,
	514, 1207, 1206, 0, 205, 445, 277, 419, 422, 440,
	441, 442, 775, 0, 705, 0, 0, 702, 708, 709,
	0, 690, 536, 537, 0, 0, 0, -2, -2, 0,
	0, 0, 951, -2, 932, 934, 937, 939, 941, 0,
	0, 0, 0, 0, 0, 0, 952, 1105, 0, 1149,
	1152, -2, 1107, 1110, 1111, 0, 0, 1143, 0, 0,
	0, 0, 685, 686, 686, 686, 1003, 0, 0, 0,
	0, 0, 0, 1005, 0, 0, 0, 0, 0, 0,
	1027, 0, 1029, 1031, 0, 0, 1033, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	956, 957, 958, 0, 1105, 1034, 1131, 1132, 0, 0,
	0, 0, 0, 0, 1040, 0, 1137, 0, 0, 0,
	1044, 1045, 1047, 0, 812, 0, 838, 860, 862, 850,
	676, 1190, 713, 1169, 761, 720, 722, 1170, 713, 1166,
	749, 0, 751, 0, 0, 0, 753, 0, 742, 0,
	744, 759, 734, 0, 0, 727, 0, 726, 747, 755,
	0, 0, 773, 90, 540, 0, 0, 0, 93, 1410,
	101, 0, 468, 0, 0, 0, 0, 0, 553, 102,
	1410, 110, 1410, 110, 103, 80, 551, 81, 0, 546,
	0, 539, 82, 0, 548, 0, 139, 0, 0, 141,
	0, 1175, 462, 495, 0, 0, 1213, 0, 451, 496,
	520, 522, 0, 0, 605, 609, 0, 608, 674, 627,
	697, 779, 610, 627, 0, 0, 0, 619, 616, 613,
	780, 0, 0, 0, 0, 186, 189, 192, 195, 1107,
	259, 0, 0, 1109, 0, 786, 0, 0, 119, 0,
	128, 261, 301, 302, 307, 326, 327, 329, 325, 0,
	0, 0, 689, 538, 0, 884, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1140, 0, 0, 0, 1151,
	-2, 1113, 1141, 1145, 0, 998, 0, 0, 0, 0,
	1201, 870, 871, 872, 873, 874, 875, 876, 0, 1058,
	1059, 1063, 0, 0, 1009, 0, 0, 1114, 1124, 1126,
	954, 955, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, -2, -2, -2, 972, 973, 974, -2, -2,
	-2, 0, 0, 0, 1127, 0, 0, 1129, 1130, 1134,
	1135, 0, 1037, 1038, 1039, 1136, 0, 0, 0, 844,
	0, 0, 715, 0, 719, 0, 715, 750, 0, 769,
	752, 732, 743, 0, 740, 730, 0, 731, 0, 759,
	0, 0, 739, 0, 0, 0, 0, 111, 466, 485,
	0, 0, 529, 535, 535, 0, 1007, 1008, 0, 0,
	0, 95, 0, 0, 0, 0, 99, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 142,
	449, 0, 456, 0, 0, 0, 454, 0, 0, 0,
	607, 609, 0, 600, 601, 166, 611, 625, 626, 624,
	0, 627, 633, 630, 636, 0, 0, 121, 0, 0,
	787, 794, 137, 1301, 135, 132, 134, 278, 700, 706,
	691, 538, 0, 0, -2, 0, 944, -2, -2, 1076,
	1107, 1150, 1144, 1198, 686, 999, 1001, 1002, 879, 1065,
	1062, 0, 1049, 1025, 1026, 1123, 0, 0, 0, 0,
	1107, 1078, 1036, 0, 1042, 1043, 813, 672, 1054, 0,
	0, 723, 1054, 0, 747, 745, 728, 724, 0, 735,
	0, 756, 542, 544, 92, 0, 467, 0, 470, 0,
	0, 0, 0, 476, 477, 0, 0, 0, 0, 487,
	494, 0, 538, 1193, 0, 538, 0, 0, 0, 0,
	0, 107, 0, 0, 552, 0, 110, 110, 541, 0,
	0, 0, 547, 0, 549, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 597, 609, 0, 602, 603,
	0, 0, 0, 618, 628, 0, 0, 0, 782, 0,
	0, 0, 0, 692, -2, -2, 945, 1077, 0, 686,
	0, 1051, -2, 0, 0, 0, 1079, 0, 659, 0,
	714, 712, 660, 768, 759, 0, 754, 94, 0, 471,
	472, 1213, 0, 475, 478, 0, 480, 1215, 462, 0,
	491, 492, 530, 531, 534, 532, 535, 686, 489, 0,
	96, 97, 106, 114, 98, 104, 0, 0, 0, 0,
	760, 0, 0, 0, 494, 0, 484, 462, 452, 494,
	0, 0, 604, 605, 0, 0, 0, 637, 638, 0,
	0, 0, 136, 0, 131, 133, 1000, 1068, 0, -2,
	0, 980, 1041, 1053, 1055, 0, 733, 725, 469, 473,
	0, 0, 500, 0, 488, 0, 538, 0, 0, 116,
	0, 543, 545, 0, 0, 0, 0, 462, 494, 450,
	462, 0, 606, 607, 0, 621, 780, 623, 0, 0,
	138, 0, 0, 0, 1064, 981, 0, 0, 0, 479,
	505, 0, 0, 0, 533, 998, 496, 100, 0, 113,
	0, 0, 686, 0, 482, 462, 524, 0, 598, 0,
	622, 139, 139, 1061, 1066, 1069, -2, 1370, 1248, 0,
	1067, 1056, 1057, 0, 481, 501, 502, 0, 497, 498,
	499, 1214, 493, 500, 115, 86, 88, 0, 0, 483,
	494, 780, 122, 123, 0, 1071, 1072, 1073, 1074, 1075,
	474, 503, 0, 504, 0, 0, 0, 505, 0, 465,
	462, 620, 0, 506, 0, 509, 510, 0, 507, 490,
	461, 463, 464, 525, 1070, 508, 511, 512,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 358, 3, 364, 359, 3,
	369, 370, 362, 360, 374, 361, 371, 363, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 378, 373,
	348, 350, 349, 352, 375, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 367, 3, 368, 365, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 376, 357, 377, 355,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 351, 57691, 353, 57692, 354, 57693, 356, 57694, 366,
	57695, 372, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:863
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:869
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:875
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:884
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:916
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "ALTER")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:966
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:977
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:988
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1008
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1034
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1040
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1106
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1129
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = nil
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = DropCascade
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = DropRestrict
		}
	case 110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = DropDefault
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1201
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1202
		{
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1205
		{
			return unimplemented(sqllex, "alter using")
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1206
		{
		}
	case 117:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1233
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1259
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.str = "CSV"
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1297
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1366
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1386
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1387
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1388
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1399
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1410
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			return helpWith(sqllex, "CREATE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1444
		{
			return helpWith(sqllex, "DELETE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			return helpWith(sqllex, "DROP")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1484
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1499
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1522
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1611
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "DELETE")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1627
		{
			return helpWith(sqllex, "INSERT")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1628
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1630
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1639
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1640
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1648
		{ /* SKIP DOC */
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1735
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			return helpWith(sqllex, "GRANT")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return helpWith(sqllex, "RESET")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1854
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			return helpWith(sqllex, "RESET")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1880
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1885
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1888
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1892
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1893
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1894
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1895
		{ /* SKIP DOC */
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{ /* SKIP DOC */
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1897
		{
			return unimplemented(sqllex, "set local")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.expr()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1923
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1973
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1978
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1998
		{
			return unimplemented(sqllex, "set from current")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2006
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2010
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = Low
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = Normal
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = High
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2120
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2124
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2125
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2126
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2127
		{
			return helpWith(sqllex, "SHOW")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2136
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.str = "client_encoding"
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2162
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2179
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2184
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2195
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2206
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2217
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2228
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2238
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2249
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2254
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2265
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2284
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2297
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2302
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2320
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2343
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2351
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2359
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2362
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2370
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2373
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2384
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2399
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2403
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2407
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2413
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2441
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2540
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2544
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = DropDefault
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2554
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2759
		{
			return unimplemented(sqllex, "match full")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2760
		{
			return unimplemented(sqllex, "match partial")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2761
		{
			return unimplemented(sqllex, "match simple")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2762
		{
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2768
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2770
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2772
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2775
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2778
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2781
		{
			return unimplemented(sqllex, "no action")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2785
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2786
		{
			return unimplemented(sqllex, "action set null")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2787
		{
			return unimplemented(sqllex, "action set default")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2812
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2823
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2827
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 522:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2848
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2888
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = true
		}
	case 528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = false
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2918
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2919
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2922
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2923
		{
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = Ascending
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = Descending
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 539:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2963
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2965
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = true
		}
	case 551:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = false
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2998
		{
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2999
		{
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3010
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3021
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3036
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3038
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3056
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3061
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3087
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3097
		{
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3098
		{
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.str = ""
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.str = ""
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3144
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3159
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = ReadOnly
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = ReadWrite
		}
	case 597:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.str = ""
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.str = ""
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.str = ""
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.str = ""
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3266
		{
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3267
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			return helpWith(sqllex, "INSERT")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3350
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3354
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3362
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 628:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3389
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3390
		{
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3519
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3554
		{
			return helpWith(sqllex, "SELECT")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3555
		{
			return helpWith(sqllex, "VALUES")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3556
		{
			return helpWith(sqllex, "TABLE")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3602
		{
			return helpWith(sqllex, "SELECT")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3646
		{
			return helpWith(sqllex, "TABLE")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3657
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3658
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3659
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3663
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3666
		{
			return unimplemented(sqllex, "cte")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3669
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3670
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3673
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3674
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3678
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = true
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = false
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = false
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = true
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3701
		{
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3702
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3749
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3773
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3825
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3826
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3829
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3830
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3888
		{
			return helpWith(sqllex, "VALUES")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3890
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3905
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &From{}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3927
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3945
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3972
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4009
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = nil
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4075
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = true
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = false
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.str = astFullJoin
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.str = astLeftJoin
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.str = astRightJoin
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.str = astInnerJoin
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4192
		{
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4193
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4279
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4293
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4301
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4325
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4336
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4386
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4417
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4426
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = nil
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4491
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4587
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4619
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4659
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 860:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 862:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = year
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = month
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = day
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = hour
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = minute
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = month
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = hour
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = minute
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = minute
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = nil
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = second
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4754
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4789
		{
			return unimplemented(sqllex, "at tz")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4997
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5063
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5236
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5289
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5290
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5292
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5296
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5303
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5314
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5330
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5331
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5335
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5344
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5353
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5362
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5363
		{
			return unimplemented(sqllex, "current role")
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5372
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5393
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5398
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5403
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5412
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5413
		{
			return unimplemented(sqllex, "treat")
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5427
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5447
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5450
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5455
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5459
		{
			return unimplemented(sqllex, "within group")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5460
		{
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5475
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5479
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5485
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5489
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5495
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5537
		{
			sqlVAL.str = ""
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5557
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5558
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5559
		{
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5562
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5563
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5569
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5570
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5571
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5572
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5573
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5600
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = Any
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5610
		{
			sqlVAL.union.val = Some
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = All
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = Plus
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = Minus
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = Mult
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = Div
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = Mod
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = Bitand
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = Bitor
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = Pow
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = Bitxor
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = LT
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = GT
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5631
		{
			sqlVAL.union.val = EQ
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5632
		{
			sqlVAL.union.val = LE
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = GE
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = NE
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = Like
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = NotLike
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5640
		{
			sqlVAL.union.val = ILike
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5641
		{
			sqlVAL.union.val = NotILike
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5653
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5703
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5767
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5771
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5775
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5779
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5783
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5789
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5795
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5805
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5815
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5819
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5837
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5841
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5847
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5853
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5857
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5893
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5899
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5903
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5909
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5928
		{
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5929
		{
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5963
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5967
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5973
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6047
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6060
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6088
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6091
		{
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6101
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6105
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6112
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6116
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6120
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6127
		{
			return unimplemented(sqllex, "func const")
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6133
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6136
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = DNull
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6153
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6157
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6163
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6198
		{
			sqlVAL.str = ""
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6204
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6208
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
