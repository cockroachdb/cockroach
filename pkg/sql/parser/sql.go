// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:466
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const LATERAL = 57494
const LC_CTYPE = 57495
const LC_COLLATE = 57496
const LEADING = 57497
const LEAST = 57498
const LEFT = 57499
const LEVEL = 57500
const LIKE = 57501
const LIMIT = 57502
const LOCAL = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const LOW = 57506
const LSHIFT = 57507
const MATCH = 57508
const MINUTE = 57509
const MONTH = 57510
const NAN = 57511
const NAME = 57512
const NAMES = 57513
const NATURAL = 57514
const NEXT = 57515
const NO = 57516
const NO_INDEX_JOIN = 57517
const NORMAL = 57518
const NOT = 57519
const NOTHING = 57520
const NULL = 57521
const NULLIF = 57522
const NULLS = 57523
const NUMERIC = 57524
const OF = 57525
const OFF = 57526
const OFFSET = 57527
const OID = 57528
const ON = 57529
const ONLY = 57530
const OPTIONS = 57531
const OR = 57532
const ORDER = 57533
const ORDINALITY = 57534
const OUT = 57535
const OUTER = 57536
const OVER = 57537
const OVERLAPS = 57538
const OVERLAY = 57539
const PARENT = 57540
const PARTIAL = 57541
const PARTITION = 57542
const PASSWORD = 57543
const PLACING = 57544
const POSITION = 57545
const PRECEDING = 57546
const PRECISION = 57547
const PREPARE = 57548
const PRIMARY = 57549
const PRIORITY = 57550
const QUERIES = 57551
const RANGE = 57552
const READ = 57553
const REAL = 57554
const RECURSIVE = 57555
const REF = 57556
const REFERENCES = 57557
const REGCLASS = 57558
const REGPROC = 57559
const REGPROCEDURE = 57560
const REGNAMESPACE = 57561
const REGTYPE = 57562
const RENAME = 57563
const REPEATABLE = 57564
const RELEASE = 57565
const RESET = 57566
const RESTORE = 57567
const RESTRICT = 57568
const RETURNING = 57569
const REVOKE = 57570
const RIGHT = 57571
const ROLLBACK = 57572
const ROLLUP = 57573
const ROW = 57574
const ROWS = 57575
const RSHIFT = 57576
const SAVEPOINT = 57577
const SCATTER = 57578
const SEARCH = 57579
const SECOND = 57580
const SELECT = 57581
const SERIAL = 57582
const SERIALIZABLE = 57583
const SESSION = 57584
const SESSIONS = 57585
const SESSION_USER = 57586
const SET = 57587
const SETTING = 57588
const SETTINGS = 57589
const SHOW = 57590
const SIMILAR = 57591
const SIMPLE = 57592
const SMALLINT = 57593
const SMALLSERIAL = 57594
const SNAPSHOT = 57595
const SOME = 57596
const SPLIT = 57597
const SQL = 57598
const START = 57599
const STATUS = 57600
const STDIN = 57601
const STRICT = 57602
const STRING = 57603
const STORING = 57604
const SUBSTRING = 57605
const SYMMETRIC = 57606
const SYSTEM = 57607
const TABLE = 57608
const TABLES = 57609
const TEMPLATE = 57610
const TESTING_RANGES = 57611
const TESTING_RELOCATE = 57612
const TEXT = 57613
const THEN = 57614
const TIME = 57615
const TIMESTAMP = 57616
const TIMESTAMPTZ = 57617
const TO = 57618
const TRAILING = 57619
const TRACE = 57620
const TRANSACTION = 57621
const TREAT = 57622
const TRIM = 57623
const TRUE = 57624
const TRUNCATE = 57625
const TYPE = 57626
const UNBOUNDED = 57627
const UNCOMMITTED = 57628
const UNION = 57629
const UNIQUE = 57630
const UNKNOWN = 57631
const UPDATE = 57632
const UPSERT = 57633
const USE = 57634
const USER = 57635
const USERS = 57636
const USING = 57637
const UUID = 57638
const VALID = 57639
const VALIDATE = 57640
const VALUE = 57641
const VALUES = 57642
const VARCHAR = 57643
const VARIADIC = 57644
const VIEW = 57645
const VARYING = 57646
const WHEN = 57647
const WHERE = 57648
const WINDOW = 57649
const WITH = 57650
const WITHIN = 57651
const WITHOUT = 57652
const WRITE = 57653
const YEAR = 57654
const ZONE = 57655
const NOT_LA = 57656
const WITH_LA = 57657
const AS_LA = 57658
const POSTFIXOP = 57659
const UMINUS = 57660

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5587

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 32,
	337, 32,
	-2, 446,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 53,
	1, 419,
	187, 419,
	227, 419,
	333, 419,
	335, 419,
	337, 419,
	-2, 429,
	-1, 68,
	1, 422,
	187, 422,
	227, 422,
	333, 422,
	335, 422,
	337, 422,
	-2, 428,
	-1, 77,
	1, 32,
	337, 32,
	-2, 446,
	-1, 447,
	1, 175,
	337, 175,
	-2, 1019,
	-1, 516,
	108, 456,
	160, 456,
	185, 456,
	-2, 425,
	-1, 519,
	108, 455,
	160, 455,
	185, 455,
	-2, 423,
	-1, 668,
	108, 455,
	160, 455,
	185, 455,
	-2, 426,
	-1, 728,
	334, 951,
	-2, 944,
	-1, 729,
	334, 952,
	-2, 945,
	-1, 735,
	5, 620,
	334, 620,
	-2, 1133,
	-1, 759,
	5, 581,
	-2, 1107,
	-1, 760,
	5, 614,
	334, 614,
	-2, 1109,
	-1, 761,
	5, 589,
	-2, 1110,
	-1, 762,
	5, 588,
	-2, 1111,
	-1, 763,
	5, 614,
	334, 614,
	-2, 1114,
	-1, 764,
	5, 614,
	334, 614,
	-2, 1115,
	-1, 765,
	5, 615,
	-2, 1118,
	-1, 766,
	5, 575,
	-2, 1119,
	-1, 767,
	5, 575,
	-2, 1120,
	-1, 768,
	5, 596,
	-2, 1124,
	-1, 769,
	5, 576,
	-2, 1129,
	-1, 770,
	5, 577,
	-2, 1130,
	-1, 771,
	5, 578,
	-2, 1131,
	-1, 772,
	5, 579,
	-2, 1132,
	-1, 773,
	5, 575,
	-2, 1137,
	-1, 774,
	5, 582,
	-2, 1142,
	-1, 775,
	5, 580,
	-2, 1145,
	-1, 776,
	5, 612,
	334, 612,
	-2, 1147,
	-1, 777,
	5, 616,
	-2, 1150,
	-1, 778,
	5, 618,
	-2, 1151,
	-1, 779,
	5, 611,
	334, 611,
	-2, 1156,
	-1, 1040,
	99, 429,
	108, 429,
	144, 429,
	160, 429,
	185, 429,
	191, 429,
	287, 429,
	-2, 739,
	-1, 1049,
	334, 928,
	-2, 916,
	-1, 1259,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 655,
	-1, 1260,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 656,
	-1, 1261,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 657,
	-1, 1265,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 661,
	-1, 1266,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 662,
	-1, 1267,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 663,
	-1, 1270,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 668,
	-1, 1276,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 670,
	-1, 1278,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 674,
	-1, 1279,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 675,
	-1, 1280,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 676,
	-1, 1281,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 677,
	-1, 1308,
	196, 810,
	-2, 813,
	-1, 1337,
	117, 850,
	334, 951,
	-2, 944,
	-1, 1338,
	117, 851,
	-2, 1103,
	-1, 1339,
	117, 852,
	-2, 1018,
	-1, 1340,
	117, 853,
	-2, 986,
	-1, 1341,
	117, 854,
	-2, 1002,
	-1, 1342,
	117, 855,
	-2, 1017,
	-1, 1343,
	117, 856,
	-2, 1065,
	-1, 1502,
	99, 429,
	108, 429,
	144, 429,
	160, 429,
	185, 429,
	191, 429,
	287, 429,
	-2, 510,
	-1, 1506,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 669,
	-1, 1507,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 671,
	-1, 1512,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 672,
	-1, 1530,
	196, 809,
	-2, 812,
	-1, 1720,
	1, 511,
	69, 511,
	99, 511,
	108, 511,
	118, 511,
	122, 511,
	124, 511,
	137, 511,
	144, 511,
	149, 511,
	157, 511,
	160, 511,
	172, 511,
	185, 511,
	187, 511,
	191, 511,
	227, 511,
	229, 511,
	287, 511,
	295, 511,
	306, 511,
	307, 511,
	316, 511,
	333, 511,
	335, 511,
	337, 511,
	338, 511,
	-2, 510,
	-1, 1722,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 673,
	-1, 1727,
	147, 0,
	-2, 689,
	-1, 1737,
	196, 811,
	-2, 814,
	-1, 1771,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 716,
	-1, 1772,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 717,
	-1, 1773,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 718,
	-1, 1777,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 722,
	-1, 1778,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 723,
	-1, 1779,
	13, 0,
	14, 0,
	15, 0,
	317, 0,
	318, 0,
	319, 0,
	-2, 724,
	-1, 1898,
	147, 0,
	-2, 690,
	-1, 1901,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 693,
	-1, 1902,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 695,
	-1, 2006,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 694,
	-1, 2007,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 696,
	-1, 2014,
	147, 0,
	-2, 725,
	-1, 2068,
	147, 0,
	-2, 726,
	-1, 2131,
	36, 0,
	131, 0,
	159, 0,
	249, 0,
	314, 0,
	320, 0,
	-2, 1106,
}

const sqlPrivate = 57344

const sqlLast = 30967

var sqlAct = [...]int{

	729, 2130, 1676, 2109, 1134, 2154, 2074, 2110, 1942, 2111,
	1142, 1748, 2129, 955, 1988, 1716, 1889, 1968, 1865, 852,
	1194, 1686, 1223, 1474, 1822, 52, 1876, 314, 961, 835,
	1808, 1715, 705, 1624, 90, 90, 90, 1870, 1591, 1623,
	1497, 1231, 1212, 541, 820, 1198, 316, 90, 90, 90,
	1694, 1193, 90, 1238, 565, 90, 1306, 1703, 1541, 520,
	1476, 1045, 1488, 90, 1590, 957, 507, 300, 20, 719,
	1171, 1424, 90, 90, 1197, 1230, 90, 792, 1143, 90,
	90, 90, 90, 688, 1363, 90, 90, 1418, 1094, 1483,
	727, 726, 1316, 699, 1293, 795, 525, 1290, 1103, 1236,
	1126, 981, 917, 498, 1187, 608, 556, 1500, 1334, 1219,
	824, 797, 527, 67, 1036, 298, 821, 698, 1164, 689,
	607, 577, 502, 578, 501, 586, 1201, 1366, 519, 446,
	1233, 986, 1136, 1079, 530, 1075, 575, 671, 670, 443,
	1823, 672, 432, 68, 493, 20, 721, 82, 442, 915,
	423, 86, 828, 528, 651, 652, 571, 67, 676, 1529,
	1135, 837, 1561, 1562, 435, 1579, 1580, 1581, 491, 837,
	69, 837, 313, 1999, 313, 524, 2000, 2146, 1897, 524,
	817, 1168, 285, 2126, 1561, 1562, 1821, 1579, 1580, 1581,
	67, 2121, 1435, 2120, 1174, 2117, 1174, 1436, 817, 1174,
	1896, 547, 1139, 1498, 2107, 484, 538, 1161, 73, 544,
	2102, 517, 551, 817, 1576, 2099, 811, 66, 817, 66,
	2070, 2064, 988, 1161, 817, 1169, 532, 853, 2048, 2044,
	2039, 1821, 817, 2038, 2008, 75, 1576, 1161, 516, 1995,
	2054, 1982, 1996, 43, 1821, 43, 1979, 1977, 1953, 817,
	1821, 817, 44, 1952, 44, 1924, 1821, 1903, 1174, 1900,
	1174, 1130, 1161, 1486, 1567, 1170, 1167, 1892, 91, 76,
	1174, 987, 1842, 1784, 45, 1174, 45, 71, 1841, 1820,
	1731, 1174, 1821, 1174, 72, 1495, 1567, 1662, 1657, 1608,
	1133, 1133, 1609, 90, 90, 90, 90, 90, 90, 1582,
	507, 313, 1606, 70, 1734, 1174, 1605, 1604, 1533, 1174,
	1174, 1532, 1530, 1534, 317, 1174, 1174, 1577, 583, 1127,
	1463, 1582, 1174, 817, 1227, 525, 1540, 817, 1178, 1173,
	1160, 1174, 1174, 1161, 508, 1132, 1172, 1127, 1133, 1577,
	838, 1486, 1091, 989, 990, 1090, 66, 1460, 838, 846,
	838, 1092, 847, 1464, 817, 73, 1310, 1222, 1185, 1130,
	684, 907, 554, 598, 537, 1824, 992, 77, 73, 560,
	929, 1501, 43, 622, 2144, 2128, 2116, 2079, 504, 1884,
	2065, 44, 75, 1980, 989, 990, 1578, 1929, 73, 991,
	73, 683, 1925, 1917, 1916, 75, 1915, 56, 1911, 56,
	1910, 1909, 1856, 45, 1850, 1799, 1794, 992, 1578, 1793,
	1166, 1792, 1742, 1720, 1693, 75, 76, 75, 1435, 90,
	581, 1666, 587, 572, 71, 580, 580, 722, 564, 76,
	991, 72, 1165, 960, 90, 1613, 1610, 90, 90, 1598,
	1302, 1589, 1560, 987, 1557, 997, 1556, 1554, 507, 76,
	1138, 76, 841, 704, 1546, 1545, 507, 71, 788, 71,
	836, 1462, 953, 70, 72, 1499, 72, 1380, 1331, 1573,
	1574, 1575, 1466, 1330, 1572, 1570, 1571, 1563, 1564, 1565,
	1566, 1568, 1569, 70, 90, 299, 997, 1561, 1562, 286,
	90, 1573, 1574, 1575, 683, 682, 1572, 1570, 1571, 1563,
	1564, 1565, 1566, 1568, 1569, 1750, 2091, 1053, 1046, 562,
	70, 90, 90, 90, 2051, 90, 2037, 73, 2036, 2035,
	2027, 780, 2025, 2016, 2003, 1991, 56, 1975, 1939, 539,
	90, 1922, 546, 549, 1894, 539, 1859, 1847, 1827, 1726,
	1708, 90, 1303, 1684, 75, 1561, 1562, 1682, 1681, 1679,
	618, 1849, 1664, 1632, 507, 90, 1631, 1588, 1550, 626,
	1549, 316, 507, 1526, 90, 1521, 1295, 318, 508, 90,
	90, 90, 625, 90, 1451, 668, 669, 1409, 76, 1407,
	1394, 787, 1393, 1373, 989, 990, 71, 509, 818, 1567,
	90, 90, 1329, 72, 1226, 1080, 606, 1576, 90, 1083,
	90, 601, 603, 1087, 1073, 90, 1072, 992, 840, 1071,
	1070, 843, 70, 1069, 1068, 507, 507, 1067, 786, 826,
	657, 1066, 1065, 316, 1064, 1063, 655, 1062, 1061, 90,
	991, 1060, 90, 653, 90, 90, 90, 90, 90, 90,
	661, 1059, 664, 90, 1058, 560, 1057, 1567, 90, 90,
	930, 1050, 1039, 70, 954, 90, 542, 626, 993, 994,
	995, 996, 998, 999, 687, 626, 90, 2127, 1561, 1562,
	815, 517, 1394, 605, 594, 592, 782, 1998, 959, 1905,
	1881, 679, 680, 685, 1855, 90, 952, 1854, 90, 1709,
	1046, 1561, 1562, 1445, 1444, 1037, 505, 1218, 516, 572,
	1577, 995, 996, 998, 999, 1217, 816, 1882, 985, 805,
	788, 616, 850, 614, 2041, 2001, 508, 1477, 1853, 1437,
	848, 1127, 898, 830, 508, 827, 563, 1501, 803, 525,
	1085, 1612, 964, 906, 1611, 1086, 67, 1505, 643, 931,
	617, 1055, 958, 804, 905, 900, 539, 902, 549, 901,
	913, 1419, 1871, 904, 1135, 1751, 615, 1317, 933, 1076,
	1431, 647, 925, 1619, 924, 918, 2082, 514, 1537, 1578,
	1567, 935, 2141, 781, 939, 940, 941, 942, 943, 80,
	798, 938, 799, 2043, 1168, 1835, 483, 946, 947, 482,
	1177, 90, 477, 478, 2142, 293, 1457, 951, 648, 90,
	788, 641, 1963, 90, 1565, 1566, 1568, 1569, 966, 1962,
	968, 90, 90, 967, 1961, 90, 1960, 1647, 90, 983,
	517, 509, 508, 517, 517, 1646, 1616, 1615, 1169, 317,
	508, 1042, 90, 79, 90, 90, 1052, 90, 1561, 1562,
	90, 1508, 90, 90, 1097, 90, 90, 977, 507, 294,
	978, 979, 1104, 800, 1450, 1049, 1449, 1572, 1570, 1571,
	1563, 1564, 1565, 1566, 1568, 1569, 1155, 289, 1170, 1167,
	614, 1096, 1115, 914, 798, 1118, 799, 1643, 1663, 1816,
	1096, 1846, 1448, 508, 508, 1447, 1095, 1277, 1108, 1110,
	1175, 317, 1124, 1123, 1120, 2042, 1137, 654, 1137, 1077,
	1078, 1081, 553, 1377, 999, 1376, 1248, 1084, 1561, 1562,
	1213, 950, 1817, 615, 490, 1107, 290, 949, 1088, 923,
	922, 1129, 504, 499, 1650, 1100, 590, 1652, 1292, 1292,
	316, 1944, 1121, 1113, 523, 1421, 822, 932, 90, 1172,
	1567, 604, 798, 539, 799, 1125, 1172, 800, 2113, 90,
	90, 90, 2089, 510, 90, 90, 1274, 1186, 1150, 67,
	692, 90, 1156, 1141, 67, 78, 1153, 1159, 1154, 509,
	587, 1152, 580, 1157, 580, 515, 1151, 509, 1317, 522,
	511, 295, 644, 1563, 1564, 1565, 1566, 1568, 1569, 90,
	512, 1228, 316, 1577, 789, 2141, 1634, 734, 831, 2151,
	629, 926, 81, 1812, 1299, 1813, 1106, 1425, 297, 1297,
	1567, 1569, 2030, 1166, 1081, 800, 1084, 825, 296, 1247,
	859, 1456, 539, 829, 829, 639, 524, 316, 1179, 2114,
	1078, 1077, 809, 1815, 630, 424, 808, 628, 1220, 1221,
	1414, 1818, 645, 546, 549, 928, 1349, 808, 1411, 948,
	2104, 1272, 1275, 813, 1300, 806, 429, 801, 589, 640,
	892, 425, 1578, 1577, 812, 1458, 806, 1671, 292, 291,
	807, 1190, 2150, 2105, 1405, 509, 927, 1561, 1562, 1271,
	2115, 807, 318, 509, 1192, 784, 426, 1105, 1181, 1641,
	1074, 1208, 646, 1379, 90, 90, 90, 1216, 1093, 1183,
	90, 2012, 611, 90, 826, 428, 1429, 1229, 1314, 90,
	90, 90, 90, 90, 1814, 2162, 508, 837, 1184, 2157,
	485, 90, 521, 1976, 90, 90, 1945, 1034, 1548, 1704,
	1182, 507, 1578, 1719, 90, 524, 509, 509, 1172, 90,
	1651, 90, 796, 1691, 318, 1387, 1425, 1635, 90, 2112,
	1304, 801, 1301, 1563, 1564, 1565, 1566, 1568, 1569, 90,
	1510, 1291, 612, 2149, 525, 613, 2140, 1307, 1381, 1273,
	421, 1344, 1325, 1288, 1311, 2138, 90, 90, 1319, 1567,
	1864, 1439, 1406, 1440, 1441, 1408, 507, 1210, 1286, 1336,
	1336, 1347, 633, 1358, 1487, 599, 486, 597, 317, 1370,
	1371, 1372, 675, 90, 1382, 90, 427, 90, 1427, 1404,
	1417, 90, 1920, 1433, 1955, 90, 424, 1239, 1246, 801,
	1572, 1570, 1571, 1563, 1564, 1565, 1566, 1568, 1569, 2168,
	1668, 1465, 1577, 1467, 626, 1954, 1298, 429, 90, 1937,
	505, 500, 425, 1491, 1089, 1667, 2155, 1420, 2022, 1430,
	674, 1282, 1618, 783, 1780, 1390, 539, 430, 1438, 1283,
	317, 1284, 1494, 525, 549, 1289, 1386, 426, 539, 886,
	1669, 714, 1491, 1468, 1489, 1211, 1831, 1471, 912, 1504,
	1453, 1454, 1492, 1455, 965, 1146, 428, 488, 1459, 1442,
	549, 1494, 1461, 549, 2163, 317, 838, 1490, 2156, 731,
	956, 1578, 673, 1702, 1921, 87, 87, 287, 1834, 674,
	2075, 1492, 1878, 1890, 973, 1833, 910, 2158, 415, 416,
	417, 525, 2167, 434, 1481, 1479, 448, 675, 911, 1391,
	945, 1485, 908, 1687, 434, 1866, 1469, 1503, 1938, 67,
	1781, 1172, 1482, 531, 531, 67, 1782, 287, 1496, 1396,
	287, 287, 550, 287, 1493, 1395, 87, 557, 1879, 1699,
	487, 673, 1698, 611, 1285, 570, 885, 1830, 569, 509,
	1511, 1287, 1509, 1891, 522, 665, 1677, 974, 1857, 1539,
	525, 1416, 1695, 1493, 1484, 1328, 2015, 427, 1935, 1443,
	1525, 1571, 1563, 1564, 1565, 1566, 1568, 1569, 1327, 508,
	1518, 1919, 1189, 549, 1191, 1592, 1832, 539, 1536, 1725,
	1936, 1649, 1555, 1520, 1422, 1516, 1176, 859, 859, 1131,
	1877, 1119, 1116, 1524, 1391, 650, 2108, 649, 642, 638,
	1638, 1527, 1640, 637, 636, 635, 90, 90, 430, 1658,
	634, 631, 1234, 568, 561, 1595, 1596, 1597, 1593, 1543,
	1544, 318, 1056, 937, 508, 623, 2072, 1805, 1639, 1637,
	1617, 90, 1473, 1214, 1630, 90, 1206, 90, 1158, 1614,
	845, 844, 842, 839, 90, 834, 814, 507, 1513, 810,
	802, 1739, 1587, 1683, 1475, 1629, 1628, 90, 1514, 1970,
	90, 1621, 1519, 1600, 1642, 1680, 1224, 2142, 83, 316,
	1655, 90, 677, 1648, 535, 567, 566, 305, 30, 1653,
	311, 25, 1660, 318, 1659, 1661, 920, 1972, 1096, 1670,
	1672, 1673, 310, 24, 1111, 1112, 1711, 1656, 1697, 859,
	2032, 1700, 309, 23, 1096, 1644, 1688, 1645, 1404, 1678,
	1109, 1728, 307, 22, 1690, 1824, 1487, 1383, 318, 90,
	1705, 1706, 3, 1701, 624, 1225, 2067, 304, 16, 308,
	11, 312, 10, 1696, 287, 573, 287, 448, 448, 557,
	420, 678, 681, 536, 1117, 1114, 989, 990, 1413, 2055,
	1689, 302, 9, 555, 1862, 30, 1735, 1423, 25, 859,
	858, 1515, 825, 558, 559, 1491, 1738, 1209, 1517, 992,
	24, 825, 1744, 1745, 1746, 1710, 1754, 306, 8, 1752,
	23, 1205, 539, 476, 1494, 1759, 90, 90, 90, 1140,
	22, 431, 991, 1757, 859, 984, 1489, 1714, 903, 1787,
	543, 989, 990, 90, 1492, 16, 976, 11, 90, 10,
	90, 851, 90, 90, 90, 1163, 2165, 90, 90, 1490,
	507, 1825, 509, 1829, 1732, 2166, 1788, 301, 7, 9,
	303, 4, 2101, 1804, 1472, 1801, 886, 886, 1561, 1562,
	2058, 1828, 1907, 479, 480, 989, 990, 991, 888, 659,
	658, 1887, 90, 90, 1800, 8, 1674, 1665, 1607, 507,
	595, 1234, 659, 1446, 1845, 1378, 1375, 1374, 1324, 90,
	90, 1630, 1860, 90, 1043, 600, 1493, 509, 448, 448,
	660, 90, 2088, 1969, 1747, 1470, 1785, 1053, 90, 1858,
	1051, 489, 1629, 1628, 1863, 1851, 1943, 1795, 422, 936,
	1852, 632, 1883, 1869, 1861, 7, 1707, 2103, 4, 1912,
	1874, 1875, 1886, 1547, 1880, 508, 1899, 1987, 1867, 1630,
	2011, 90, 1326, 626, 1630, 434, 1054, 42, 1626, 708,
	1806, 287, 1620, 885, 885, 1200, 1199, 317, 319, 921,
	1629, 1628, 730, 492, 1335, 1629, 1628, 1240, 886, 785,
	1239, 1755, 448, 663, 448, 732, 666, 856, 733, 1239,
	1760, 857, 1868, 1082, 720, 854, 1918, 585, 1144, 1296,
	1315, 531, 1535, 1047, 700, 712, 90, 711, 90, 1312,
	316, 90, 287, 591, 1888, 445, 55, 1885, 441, 90,
	1428, 1848, 1791, 972, 1873, 316, 87, 1215, 1895, 969,
	1636, 513, 1558, 593, 1356, 287, 1348, 1933, 886, 1930,
	287, 287, 287, 1345, 832, 1947, 887, 656, 1949, 791,
	90, 1931, 1948, 1035, 1145, 1946, 621, 1434, 1162, 686,
	980, 287, 287, 1561, 1562, 90, 1958, 1959, 507, 87,
	1971, 87, 90, 886, 534, 885, 448, 533, 826, 1964,
	90, 1195, 619, 909, 1180, 1028, 90, 1025, 481, 1146,
	1234, 1630, 855, 1986, 2024, 90, 90, 1973, 610, 1978,
	448, 609, 1990, 448, 1207, 87, 448, 448, 448, 448,
	448, 2005, 1629, 1628, 944, 2004, 1965, 1997, 508, 448,
	448, 1993, 1994, 1389, 2161, 2031, 434, 1984, 1633, 1630,
	1981, 2081, 74, 2040, 1967, 885, 90, 963, 1415, 31,
	1234, 29, 2017, 1234, 26, 2026, 21, 19, 18, 859,
	1629, 1628, 28, 17, 27, 1951, 531, 508, 15, 557,
	14, 90, 90, 2020, 2021, 1567, 13, 12, 2010, 41,
	885, 1985, 40, 90, 39, 2028, 38, 90, 37, 36,
	859, 859, 6, 2049, 5, 507, 2047, 858, 858, 859,
	859, 2050, 90, 2, 1, 0, 0, 0, 509, 0,
	2002, 525, 316, 90, 90, 0, 0, 0, 2053, 0,
	0, 2029, 2056, 0, 0, 0, 2059, 0, 1577, 0,
	318, 0, 859, 0, 2063, 1350, 90, 0, 90, 2060,
	0, 90, 0, 316, 2062, 0, 2069, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 899, 0, 2077, 2090,
	2092, 2078, 0, 2094, 0, 90, 2087, 2093, 90, 0,
	2083, 0, 287, 1957, 0, 0, 0, 2098, 0, 2097,
	1101, 2066, 2096, 2100, 287, 888, 888, 0, 317, 0,
	0, 0, 287, 1122, 0, 0, 287, 1578, 2052, 1128,
	90, 2095, 90, 317, 2118, 1838, 2125, 0, 0, 858,
	2123, 1844, 2057, 287, 0, 1148, 1149, 0, 287, 90,
	0, 287, 2124, 448, 448, 0, 448, 557, 2135, 2139,
	2137, 1630, 0, 0, 0, 2143, 0, 0, 2145, 0,
	0, 0, 0, 2148, 0, 2147, 508, 0, 0, 989,
	990, 0, 1629, 1628, 0, 0, 2122, 2160, 2159, 0,
	2164, 0, 1234, 1234, 859, 0, 1234, 0, 0, 858,
	0, 0, 992, 2084, 2085, 2086, 0, 2169, 0, 0,
	0, 509, 0, 989, 990, 0, 1570, 1571, 1563, 1564,
	1565, 1566, 1568, 1569, 0, 991, 0, 888, 0, 0,
	0, 1006, 0, 0, 858, 2106, 992, 0, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1188,
	509, 0, 0, 0, 0, 0, 0, 0, 0, 991,
	287, 287, 287, 0, 0, 287, 1196, 0, 0, 886,
	886, 0, 557, 0, 0, 0, 0, 0, 886, 886,
	0, 997, 0, 887, 887, 0, 0, 888, 0, 0,
	0, 1350, 1350, 508, 0, 0, 989, 990, 0, 0,
	287, 0, 0, 859, 0, 0, 0, 0, 0, 0,
	317, 886, 1941, 0, 0, 997, 0, 0, 0, 992,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 855,
	855, 0, 0, 0, 1007, 885, 0, 0, 0, 0,
	0, 317, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1350, 1350, 1350, 0, 0, 0, 1983, 0,
	0, 0, 0, 0, 0, 0, 885, 885, 1007, 0,
	0, 318, 0, 1234, 0, 885, 885, 1522, 1523, 989,
	990, 0, 0, 0, 0, 0, 318, 0, 0, 0,
	859, 0, 0, 0, 0, 887, 0, 0, 997, 0,
	0, 0, 992, 1008, 0, 287, 1384, 1385, 885, 0,
	0, 1101, 0, 0, 1392, 0, 0, 0, 0, 0,
	1397, 1398, 1400, 1402, 1403, 991, 0, 0, 0, 509,
	0, 0, 1410, 0, 0, 1412, 287, 1008, 1584, 1585,
	1586, 855, 0, 886, 0, 287, 0, 0, 0, 0,
	287, 1007, 1432, 0, 0, 887, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 997, 0, 0, 859, 0, 0, 1188, 1188, 0,
	887, 1002, 1000, 1001, 993, 994, 995, 996, 998, 999,
	0, 855, 0, 0, 0, 0, 0, 0, 0, 0,
	1350, 1350, 0, 0, 963, 0, 963, 0, 448, 0,
	1008, 0, 287, 0, 2080, 0, 1478, 1001, 993, 994,
	995, 996, 998, 999, 1007, 0, 855, 0, 0, 0,
	885, 0, 0, 0, 0, 0, 509, 0, 0, 287,
	0, 0, 886, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 318, 1350, 1350, 1350, 1350, 1350, 1350,
	1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
	1350, 1350, 1350, 1146, 1350, 0, 0, 0, 0, 0,
	858, 858, 0, 0, 318, 0, 1723, 1724, 0, 858,
	858, 0, 0, 1008, 0, 0, 0, 0, 1002, 1000,
	1001, 993, 994, 995, 996, 998, 999, 0, 0, 0,
	690, 690, 0, 0, 0, 0, 0, 0, 0, 793,
	0, 0, 858, 0, 0, 0, 0, 0, 0, 886,
	0, 0, 0, 0, 0, 0, 0, 888, 0, 885,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 0,
	1783, 0, 0, 0, 709, 53, 0, 0, 888, 888,
	0, 0, 0, 0, 0, 0, 0, 888, 888, 0,
	0, 0, 1000, 1001, 993, 994, 995, 996, 998, 999,
	0, 0, 0, 0, 0, 0, 1625, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 53,
	888, 0, 0, 989, 990, 0, 1009, 1010, 1011, 1019,
	1020, 1021, 0, 886, 0, 0, 885, 0, 0, 0,
	989, 990, 518, 0, 0, 526, 992, 287, 287, 1023,
	0, 0, 53, 0, 0, 1816, 0, 0, 1809, 0,
	970, 0, 975, 992, 858, 0, 1807, 0, 982, 991,
	1811, 0, 1675, 0, 0, 1006, 1101, 0, 963, 0,
	1029, 1030, 1031, 1032, 1033, 1685, 991, 0, 1817, 0,
	1041, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	1048, 287, 0, 0, 0, 0, 0, 0, 0, 1810,
	0, 0, 1718, 0, 0, 887, 0, 0, 1350, 0,
	0, 0, 0, 0, 0, 997, 0, 0, 0, 0,
	885, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 997, 0, 1016, 1024, 887, 887, 0, 0,
	0, 0, 888, 0, 0, 887, 887, 0, 0, 0,
	1749, 855, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1014, 858, 0, 0, 0, 0, 1007, 1812,
	0, 1813, 0, 0, 0, 0, 0, 0, 887, 0,
	0, 0, 855, 855, 0, 1007, 0, 0, 0, 0,
	0, 855, 855, 0, 1940, 0, 0, 0, 0, 1815,
	0, 0, 0, 0, 0, 0, 0, 1818, 0, 0,
	1350, 0, 0, 0, 0, 0, 0, 1802, 1803, 1101,
	0, 0, 0, 0, 855, 0, 0, 0, 0, 0,
	0, 0, 0, 1625, 557, 0, 0, 1008, 0, 1836,
	0, 1837, 0, 287, 1839, 1840, 0, 0, 1843, 287,
	858, 888, 1017, 0, 1008, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1814, 1625, 0, 557, 1196, 0, 1625, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2014, 0, 0, 0,
	287, 287, 0, 0, 287, 0, 1350, 0, 0, 0,
	887, 0, 1718, 0, 0, 0, 0, 1015, 0, 1893,
	1003, 1004, 1005, 1018, 0, 1002, 1000, 1001, 993, 994,
	995, 996, 998, 999, 0, 0, 0, 0, 888, 0,
	0, 0, 0, 0, 858, 993, 994, 995, 996, 998,
	999, 0, 1913, 0, 0, 0, 855, 0, 0, 0,
	0, 0, 0, 0, 690, 0, 0, 0, 0, 0,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	1269, 1270, 2068, 1276, 0, 1278, 1279, 1280, 1281, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 0, 1932,
	0, 0, 1934, 0, 1305, 0, 0, 0, 0, 887,
	287, 0, 0, 1625, 0, 0, 0, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 1332, 1333, 0, 0,
	1346, 0, 1357, 1359, 1364, 1367, 1368, 1369, 1966, 0,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1625, 0, 0, 0, 855, 287, 793, 0, 0,
	0, 0, 0, 1989, 0, 0, 0, 0, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 1718, 0, 0,
	0, 0, 518, 0, 0, 0, 557, 1718, 0, 0,
	0, 0, 0, 0, 0, 0, 887, 0, 0, 0,
	0, 0, 1426, 0, 0, 0, 0, 0, 989, 990,
	0, 1009, 1010, 1011, 1019, 1020, 1021, 0, 0, 0,
	0, 0, 0, 0, 1012, 1561, 1562, 963, 1579, 1580,
	1581, 992, 0, 0, 1023, 0, 0, 0, 0, 0,
	0, 1452, 855, 0, 0, 0, 0, 0, 0, 0,
	989, 990, 2033, 2034, 991, 0, 1019, 1020, 1021, 0,
	1006, 0, 0, 0, 2045, 0, 0, 0, 2046, 0,
	0, 0, 0, 992, 0, 0, 1023, 1576, 53, 0,
	0, 0, 0, 557, 1480, 0, 0, 0, 0, 982,
	887, 0, 0, 0, 1718, 557, 991, 0, 0, 0,
	0, 0, 1006, 0, 0, 0, 0, 0, 0, 0,
	997, 0, 0, 0, 0, 0, 0, 2076, 0, 557,
	0, 0, 287, 0, 0, 0, 0, 1567, 0, 1016,
	1024, 518, 0, 0, 518, 518, 855, 0, 1506, 1507,
	0, 0, 0, 1625, 1512, 1022, 1989, 1583, 0, 1718,
	0, 0, 997, 0, 0, 0, 1038, 1014, 1040, 0,
	0, 0, 1582, 1007, 0, 1044, 0, 0, 0, 0,
	0, 1016, 1024, 0, 0, 0, 0, 1531, 0, 0,
	1577, 287, 0, 557, 1538, 0, 0, 1542, 1013, 0,
	0, 0, 0, 0, 0, 0, 1551, 0, 0, 1014,
	2136, 0, 0, 0, 0, 1007, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1041, 0, 0, 0, 0, 0, 1364, 1364, 1364,
	0, 0, 1008, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1017, 0, 1578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 53,
	1622, 0, 53, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1008, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 53, 0, 0, 0, 1017,
	0, 0, 690, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 793, 0, 53, 0, 0, 0,
	0, 0, 1015, 0, 0, 1003, 1004, 1005, 1018, 0,
	1002, 1000, 1001, 993, 994, 995, 996, 998, 999, 0,
	0, 0, 1573, 1574, 1575, 0, 1926, 1572, 1570, 1571,
	1563, 1564, 1565, 1566, 1568, 1569, 0, 0, 0, 0,
	0, 0, 0, 0, 1015, 0, 0, 0, 0, 0,
	1018, 0, 1002, 1000, 1001, 993, 994, 995, 996, 998,
	999, 0, 1721, 0, 0, 1722, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1727, 0, 0,
	0, 0, 0, 0, 0, 0, 1736, 0, 0, 0,
	0, 0, 0, 0, 1740, 989, 990, 1452, 1009, 1010,
	1011, 1019, 1020, 1021, 0, 0, 0, 0, 0, 0,
	0, 1012, 1756, 0, 0, 0, 1758, 0, 992, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1235, 0, 0, 0, 0, 0, 0,
	0, 991, 0, 0, 0, 0, 0, 1006, 0, 1789,
	1790, 0, 0, 0, 0, 0, 0, 0, 1796, 1797,
	1798, 0, 0, 0, 0, 0, 0, 0, 0, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1826, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 997, 0, 0,
	0, 0, 0, 989, 990, 0, 1009, 1010, 1011, 1019,
	1020, 1021, 0, 0, 0, 0, 1016, 1024, 0, 1012,
	0, 0, 0, 0, 0, 0, 992, 0, 0, 1023,
	0, 0, 1022, 0, 0, 0, 1561, 1562, 0, 1579,
	1580, 1581, 0, 0, 1014, 0, 0, 0, 0, 991,
	1007, 0, 1872, 0, 0, 1006, 0, 0, 0, 53,
	0, 0, 53, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1013, 0, 0, 0, 0,
	0, 0, 1898, 526, 0, 0, 1901, 1902, 1576, 0,
	0, 1904, 0, 0, 0, 0, 0, 0, 1906, 0,
	1908, 0, 0, 0, 0, 997, 0, 0, 1914, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1008,
	0, 0, 0, 0, 1016, 1024, 0, 0, 0, 0,
	0, 0, 0, 0, 1017, 0, 0, 0, 1567, 0,
	1022, 1923, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 1014, 0, 53, 0, 0, 0, 1007, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 1582, 0, 0, 0, 53, 0, 0,
	0, 0, 1502, 1013, 0, 0, 0, 0, 0, 0,
	1956, 1577, 0, 0, 0, 0, 0, 0, 0, 1015,
	0, 0, 1003, 1004, 1005, 1018, 0, 1002, 1000, 1001,
	993, 994, 995, 996, 998, 999, 0, 0, 0, 0,
	1294, 0, 0, 1603, 0, 989, 990, 1008, 1009, 1010,
	1011, 1019, 1020, 1021, 0, 1992, 0, 0, 0, 0,
	1040, 1012, 1017, 0, 0, 0, 0, 0, 992, 0,
	0, 1023, 0, 2006, 2007, 0, 0, 0, 0, 0,
	1578, 0, 989, 990, 0, 1009, 1010, 1011, 1019, 1020,
	1021, 991, 0, 0, 0, 0, 0, 1006, 1012, 0,
	0, 0, 0, 2019, 0, 992, 0, 0, 1023, 0,
	0, 0, 0, 0, 0, 0, 2023, 0, 0, 1040,
	0, 0, 0, 0, 0, 0, 0, 1015, 991, 0,
	1003, 1004, 1005, 1018, 1006, 1002, 1000, 1001, 993, 994,
	995, 996, 998, 999, 0, 0, 0, 997, 0, 0,
	0, 1602, 793, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1573, 1574, 1575, 1016, 1024, 1572, 1570,
	1571, 1563, 1564, 1565, 1566, 1568, 1569, 0, 0, 0,
	449, 0, 1022, 0, 997, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1014, 0, 0, 0, 454, 0,
	1007, 1235, 0, 1016, 1024, 0, 0, 0, 0, 0,
	455, 0, 0, 0, 0, 0, 0, 0, 0, 1022,
	0, 0, 0, 1561, 1562, 1013, 1579, 1580, 1581, 0,
	456, 1014, 0, 0, 0, 457, 0, 1007, 0, 0,
	462, 463, 0, 0, 472, 0, 0, 0, 0, 0,
	0, 1235, 0, 0, 1235, 0, 452, 458, 0, 2119,
	0, 0, 1013, 0, 0, 0, 0, 0, 0, 1008,
	0, 0, 0, 0, 0, 1576, 0, 0, 475, 0,
	0, 2134, 2134, 0, 1017, 0, 989, 990, 0, 1009,
	1010, 1011, 1019, 1020, 1021, 0, 459, 0, 0, 0,
	0, 0, 1012, 0, 0, 0, 1008, 0, 2134, 992,
	460, 461, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 1017, 0, 0, 0, 1567, 0, 464, 0, 0,
	0, 0, 991, 0, 0, 0, 0, 466, 1006, 0,
	0, 0, 2134, 0, 0, 0, 0, 450, 0, 1015,
	0, 0, 1003, 1004, 1005, 1018, 0, 1002, 1000, 1001,
	993, 994, 995, 996, 998, 999, 0, 0, 0, 0,
	0, 0, 0, 1601, 0, 0, 0, 0, 1577, 0,
	0, 0, 0, 0, 0, 465, 1015, 0, 997, 1003,
	1004, 1005, 1018, 0, 1002, 1000, 1001, 993, 994, 995,
	996, 998, 999, 0, 0, 0, 0, 1016, 1024, 0,
	1553, 0, 0, 0, 0, 0, 0, 0, 467, 468,
	451, 0, 53, 1022, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1014, 0, 0, 0, 0,
	0, 1007, 0, 469, 0, 474, 0, 1578, 0, 470,
	0, 0, 0, 0, 453, 471, 0, 0, 0, 0,
	0, 0, 0, 1235, 1235, 0, 1013, 1235, 0, 0,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1008, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1017, 0, 0, 0, 0,
	1573, 1574, 1575, 0, 0, 1572, 1570, 1571, 1563, 1564,
	1565, 1566, 1568, 1569, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1015, 0, 0, 1003, 1004, 1005, 1018, 0, 1002, 1000,
	1001, 993, 994, 995, 996, 998, 999, 0, 0, 0,
	0, 2073, 0, 0, 0, 0, 0, 0, 1974, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	0, 0, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1235, 0, 0, 0, 92, 93,
	334, 94, 335, 336, 337, 338, 233, 339, 340, 341,
	342, 95, 96, 97, 234, 235, 236, 237, 98, 238,
	239, 343, 99, 240, 241, 100, 344, 345, 242, 243,
	244, 346, 101, 245, 347, 320, 348, 102, 103, 104,
	0, 105, 349, 106, 107, 108, 350, 321, 109, 110,
	351, 352, 353, 354, 355, 356, 111, 112, 288, 113,
	246, 114, 247, 248, 357, 115, 358, 116, 359, 360,
	361, 117, 118, 362, 119, 363, 0, 364, 249, 120,
	121, 122, 250, 251, 365, 366, 367, 123, 124, 252,
	1040, 125, 368, 126, 369, 370, 322, 371, 127, 253,
	372, 254, 373, 128, 129, 130, 131, 255, 256, 324,
	374, 135, 375, 132, 376, 323, 133, 257, 134, 258,
	259, 260, 377, 261, 378, 325, 136, 326, 137, 138,
	379, 140, 139, 380, 262, 327, 141, 328, 381, 142,
	382, 383, 143, 0, 144, 145, 146, 148, 263, 147,
	329, 149, 150, 152, 151, 384, 385, 386, 264, 153,
	265, 154, 155, 387, 156, 388, 389, 157, 390, 391,
	158, 266, 330, 159, 331, 267, 160, 161, 162, 163,
	392, 268, 164, 269, 165, 393, 166, 167, 168, 169,
	270, 170, 171, 394, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 395, 183, 332, 184, 185,
	271, 186, 0, 190, 191, 192, 193, 396, 272, 194,
	195, 196, 397, 197, 187, 188, 198, 333, 199, 273,
	274, 200, 398, 206, 201, 202, 189, 203, 205, 275,
	204, 276, 399, 207, 400, 208, 209, 210, 211, 212,
	401, 277, 278, 279, 402, 403, 213, 214, 280, 281,
	404, 215, 216, 217, 218, 405, 406, 219, 220, 221,
	222, 407, 223, 408, 282, 224, 225, 226, 283, 284,
	409, 410, 227, 411, 412, 413, 414, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 0, 0,
	1712, 0, 0, 0, 0, 0, 0, 0, 1713, 92,
	93, 334, 94, 335, 336, 337, 338, 233, 339, 340,
	341, 342, 95, 96, 97, 234, 235, 236, 237, 98,
	238, 239, 343, 99, 240, 241, 100, 344, 345, 242,
	243, 244, 346, 101, 245, 347, 320, 348, 102, 103,
	104, 0, 105, 349, 106, 107, 108, 350, 321, 109,
	110, 351, 352, 353, 354, 355, 356, 111, 112, 288,
	113, 246, 114, 247, 248, 357, 115, 358, 116, 359,
	360, 361, 117, 118, 362, 119, 363, 0, 364, 249,
	120, 121, 122, 250, 251, 365, 366, 367, 123, 124,
	252, 0, 125, 368, 126, 369, 370, 322, 371, 127,
	253, 372, 254, 373, 128, 129, 130, 131, 255, 256,
	324, 374, 135, 375, 132, 376, 323, 133, 257, 134,
	258, 259, 260, 377, 261, 378, 325, 136, 326, 137,
	138, 379, 140, 139, 380, 262, 327, 141, 328, 381,
	142, 382, 383, 143, 0, 144, 145, 146, 148, 263,
	147, 329, 149, 150, 152, 151, 384, 385, 386, 264,
	153, 265, 154, 155, 387, 156, 388, 389, 157, 390,
	391, 158, 266, 330, 159, 331, 267, 160, 161, 162,
	163, 392, 268, 164, 269, 165, 393, 166, 167, 168,
	169, 270, 170, 171, 394, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 395, 183, 332, 184,
	185, 271, 186, 0, 190, 191, 192, 193, 396, 272,
	194, 195, 196, 397, 197, 187, 188, 198, 333, 199,
	273, 274, 200, 398, 206, 201, 202, 189, 203, 205,
	275, 204, 276, 399, 207, 400, 208, 209, 210, 211,
	212, 401, 277, 278, 279, 402, 403, 213, 214, 280,
	281, 404, 215, 216, 217, 218, 405, 406, 219, 220,
	221, 222, 407, 223, 408, 282, 224, 225, 226, 283,
	284, 409, 410, 227, 411, 412, 413, 414, 228, 229,
	230, 231, 232, 0, 0, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2061, 92, 93, 334, 94, 335, 336, 337, 338,
	233, 339, 340, 341, 342, 95, 96, 97, 234, 235,
	236, 237, 98, 238, 239, 343, 99, 240, 241, 100,
	344, 345, 242, 243, 244, 346, 101, 245, 347, 320,
	348, 102, 103, 104, 0, 105, 349, 106, 107, 108,
	350, 321, 109, 110, 351, 352, 353, 354, 355, 356,
	111, 112, 288, 113, 246, 114, 247, 248, 357, 115,
	358, 116, 359, 360, 361, 117, 118, 362, 119, 363,
	0, 364, 249, 120, 121, 122, 250, 251, 365, 366,
	367, 123, 124, 252, 0, 125, 368, 126, 369, 370,
	322, 371, 127, 253, 372, 254, 373, 128, 129, 130,
	131, 255, 256, 324, 374, 135, 375, 132, 376, 323,
	133, 257, 134, 258, 259, 260, 377, 261, 378, 325,
	136, 326, 137, 138, 379, 140, 139, 380, 262, 327,
	141, 328, 381, 142, 382, 383, 143, 0, 144, 145,
	146, 148, 263, 147, 329, 149, 150, 152, 151, 384,
	385, 386, 264, 153, 265, 154, 155, 387, 156, 388,
	389, 157, 390, 391, 158, 266, 330, 159, 331, 267,
	160, 161, 162, 163, 392, 268, 164, 269, 165, 393,
	166, 167, 168, 169, 270, 170, 171, 394, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 395,
	183, 332, 184, 185, 271, 186, 0, 190, 191, 192,
	193, 396, 272, 194, 195, 196, 397, 197, 187, 188,
	198, 333, 199, 273, 274, 200, 398, 206, 201, 202,
	189, 203, 205, 275, 204, 276, 399, 207, 400, 208,
	209, 210, 211, 212, 401, 277, 278, 279, 402, 403,
	213, 214, 280, 281, 404, 215, 216, 217, 218, 405,
	406, 219, 220, 221, 222, 407, 223, 408, 282, 224,
	225, 226, 283, 284, 409, 410, 227, 411, 412, 413,
	414, 228, 229, 230, 231, 232, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 92, 93, 334, 94, 335, 336, 337, 338,
	233, 339, 340, 341, 342, 95, 96, 97, 234, 235,
	236, 237, 98, 238, 239, 343, 99, 240, 241, 100,
	344, 345, 242, 243, 244, 346, 101, 245, 347, 320,
	348, 102, 103, 104, 0, 105, 349, 106, 107, 108,
	350, 321, 109, 110, 351, 352, 353, 354, 355, 356,
	111, 112, 288, 113, 246, 114, 247, 248, 357, 115,
	358, 116, 359, 360, 361, 117, 118, 362, 119, 363,
	0, 364, 249, 120, 121, 122, 250, 251, 365, 366,
	367, 123, 124, 252, 0, 125, 368, 126, 369, 370,
	322, 371, 127, 253, 372, 254, 373, 128, 129, 130,
	131, 255, 256, 324, 374, 135, 375, 132, 376, 323,
	133, 257, 134, 258, 259, 260, 377, 261, 378, 325,
	136, 326, 137, 138, 379, 140, 139, 380, 262, 327,
	141, 328, 381, 142, 382, 383, 143, 0, 144, 145,
	146, 148, 263, 147, 329, 149, 150, 152, 151, 384,
	385, 386, 264, 153, 265, 154, 155, 387, 156, 388,
	389, 157, 390, 391, 158, 266, 330, 159, 331, 267,
	160, 161, 162, 163, 392, 268, 164, 269, 165, 393,
	166, 167, 168, 169, 270, 170, 171, 394, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 395,
	183, 332, 184, 185, 271, 186, 0, 190, 191, 192,
	193, 396, 272, 194, 195, 196, 397, 197, 187, 188,
	198, 333, 199, 273, 274, 200, 398, 206, 201, 202,
	189, 203, 205, 275, 204, 276, 399, 207, 400, 208,
	209, 210, 211, 212, 401, 277, 278, 279, 402, 403,
	213, 214, 280, 281, 404, 215, 216, 217, 218, 405,
	406, 219, 220, 221, 222, 407, 223, 408, 282, 224,
	225, 226, 283, 284, 409, 410, 227, 411, 412, 413,
	414, 228, 229, 230, 231, 232, 728, 717, 718, 715,
	716, 707, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	744, 710, 0, 0, 0, 95, 96, 97, 234, 759,
	236, 760, 98, 761, 762, 0, 99, 240, 241, 100,
	713, 743, 763, 764, 244, 0, 101, 755, 0, 736,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 321, 109, 110, 0, 737, 739, 0, 738, 740,
	111, 112, 288, 113, 765, 114, 766, 767, 794, 115,
	0, 116, 0, 0, 0, 758, 118, 0, 119, 0,
	0, 0, 701, 120, 121, 122, 745, 746, 724, 0,
	0, 123, 124, 768, 0, 125, 0, 126, 0, 0,
	322, 0, 127, 756, 0, 254, 0, 128, 129, 130,
	131, 752, 754, 324, 0, 135, 0, 132, 0, 323,
	133, 769, 134, 770, 771, 772, 0, 735, 0, 325,
	136, 326, 137, 138, 0, 140, 139, 0, 757, 327,
	141, 328, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 263, 147, 329, 149, 150, 152, 151, 696,
	0, 725, 753, 153, 773, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 266, 330, 159, 331, 747,
	160, 161, 162, 163, 0, 748, 164, 269, 165, 0,
	166, 167, 168, 169, 774, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 332, 184, 185, 702, 186, 0, 190, 191, 192,
	193, 73, 272, 194, 195, 196, 741, 197, 187, 188,
	198, 333, 199, 775, 274, 200, 0, 206, 201, 202,
	189, 203, 205, 776, 204, 749, 0, 207, 75, 208,
	209, 210, 211, 212, 0, 277, 777, 778, 0, 0,
	213, 214, 750, 751, 723, 215, 216, 217, 218, 0,
	0, 219, 220, 221, 222, 742, 223, 0, 282, 224,
	225, 226, 588, 779, 0, 0, 227, 0, 0, 0,
	71, 228, 229, 230, 231, 232, 697, 72, 0, 0,
	0, 0, 695, 0, 0, 0, 0, 693, 694, 728,
	717, 718, 715, 716, 707, 0, 703, 0, 0, 0,
	0, 706, 0, 0, 0, 92, 93, 1321, 94, 0,
	0, 0, 0, 744, 710, 0, 0, 0, 95, 96,
	97, 234, 759, 236, 760, 98, 761, 762, 0, 99,
	240, 241, 100, 713, 743, 763, 764, 244, 0, 101,
	755, 0, 736, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 321, 109, 110, 0, 737, 739,
	0, 738, 740, 111, 112, 288, 113, 765, 114, 766,
	767, 0, 115, 0, 116, 0, 1322, 0, 758, 118,
	0, 119, 0, 0, 0, 701, 120, 121, 122, 745,
	746, 724, 0, 0, 123, 124, 768, 0, 125, 0,
	126, 0, 0, 322, 0, 127, 756, 0, 254, 0,
	128, 129, 130, 131, 752, 754, 324, 0, 135, 0,
	132, 0, 323, 133, 769, 134, 770, 771, 772, 0,
	735, 0, 325, 136, 326, 137, 138, 0, 140, 139,
	0, 757, 327, 141, 328, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 263, 147, 329, 149, 150,
	152, 151, 696, 0, 725, 753, 153, 773, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 266, 330,
	159, 331, 747, 160, 161, 162, 163, 0, 748, 164,
	269, 165, 0, 166, 167, 168, 169, 774, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 332, 184, 185, 702, 186, 0,
	190, 191, 192, 193, 0, 272, 194, 195, 196, 741,
	197, 187, 188, 198, 333, 199, 775, 274, 200, 0,
	206, 201, 202, 189, 203, 205, 776, 204, 749, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 277, 777,
	778, 0, 0, 213, 214, 750, 751, 723, 215, 216,
	217, 218, 0, 0, 219, 220, 221, 222, 742, 223,
	0, 282, 224, 225, 226, 283, 779, 1320, 0, 227,
	0, 0, 0, 0, 228, 229, 230, 231, 232, 697,
	0, 0, 0, 0, 0, 695, 0, 0, 0, 0,
	693, 694, 1323, 728, 717, 718, 715, 716, 707, 703,
	1318, 0, 0, 0, 706, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 744, 710, 0,
	0, 0, 95, 96, 97, 234, 759, 236, 760, 98,
	761, 762, 0, 99, 240, 241, 100, 713, 743, 763,
	764, 244, 0, 101, 755, 0, 736, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 321, 109,
	110, 0, 737, 739, 0, 738, 740, 111, 112, 288,
	113, 765, 114, 766, 767, 0, 115, 0, 116, 0,
	0, 0, 758, 118, 0, 119, 0, 0, 0, 701,
	120, 121, 122, 745, 746, 724, 0, 0, 123, 124,
	768, 0, 125, 0, 126, 0, 0, 322, 0, 127,
	756, 0, 254, 0, 128, 129, 130, 131, 752, 754,
	324, 0, 135, 0, 132, 0, 323, 133, 769, 134,
	770, 771, 772, 0, 735, 0, 325, 136, 326, 137,
	138, 0, 140, 139, 0, 757, 327, 141, 328, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 263,
	147, 329, 149, 150, 152, 151, 696, 0, 725, 753,
	153, 773, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 266, 330, 159, 331, 747, 160, 161, 162,
	163, 0, 748, 164, 269, 165, 0, 166, 167, 168,
	169, 774, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 332, 184,
	185, 702, 186, 0, 190, 191, 192, 193, 73, 272,
	194, 195, 196, 741, 197, 187, 188, 198, 333, 199,
	775, 274, 200, 0, 206, 201, 202, 189, 203, 205,
	776, 204, 749, 0, 207, 75, 208, 209, 210, 211,
	212, 0, 277, 777, 778, 0, 0, 213, 214, 750,
	751, 723, 215, 216, 217, 218, 0, 0, 219, 220,
	221, 222, 742, 223, 0, 282, 224, 225, 226, 588,
	779, 0, 0, 227, 0, 0, 0, 71, 228, 229,
	230, 231, 232, 697, 72, 0, 0, 0, 0, 695,
	0, 0, 0, 0, 693, 694, 728, 717, 718, 715,
	716, 707, 0, 703, 0, 0, 0, 0, 706, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	744, 710, 0, 0, 0, 95, 96, 97, 234, 759,
	236, 760, 98, 761, 762, 1360, 99, 240, 241, 100,
	713, 743, 763, 764, 244, 0, 101, 755, 0, 736,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 321, 109, 110, 0, 737, 739, 0, 738, 740,
	111, 112, 288, 113, 765, 114, 766, 767, 0, 115,
	0, 116, 0, 0, 0, 758, 118, 0, 119, 0,
	0, 0, 701, 120, 121, 122, 745, 746, 724, 0,
	0, 123, 124, 768, 0, 125, 0, 126, 0, 1365,
	322, 0, 127, 756, 0, 254, 0, 128, 129, 130,
	131, 752, 754, 324, 0, 135, 0, 132, 0, 323,
	133, 769, 134, 770, 771, 772, 0, 735, 0, 325,
	136, 326, 137, 138, 0, 140, 139, 1361, 757, 327,
	141, 328, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 263, 147, 329, 149, 150, 152, 151, 696,
	0, 725, 753, 153, 773, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 266, 330, 159, 331, 747,
	160, 161, 162, 163, 0, 748, 164, 269, 165, 0,
	166, 167, 168, 169, 774, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 332, 184, 185, 702, 186, 0, 190, 191, 192,
	193, 0, 272, 194, 195, 196, 741, 197, 187, 188,
	198, 333, 199, 775, 274, 200, 0, 206, 201, 202,
	189, 203, 205, 776, 204, 749, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 277, 777, 778, 0, 1362,
	213, 214, 750, 751, 723, 215, 216, 217, 218, 0,
	0, 219, 220, 221, 222, 742, 223, 0, 282, 224,
	225, 226, 283, 779, 0, 0, 227, 0, 0, 0,
	0, 228, 229, 230, 231, 232, 697, 0, 0, 0,
	0, 0, 695, 0, 0, 0, 0, 693, 694, 728,
	717, 718, 715, 716, 707, 0, 703, 0, 0, 0,
	0, 706, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 744, 710, 0, 0, 0, 95, 96,
	97, 234, 759, 236, 760, 98, 761, 762, 0, 99,
	240, 241, 100, 713, 743, 763, 764, 244, 0, 101,
	755, 0, 736, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 321, 109, 110, 0, 737, 739,
	0, 738, 740, 111, 112, 288, 113, 765, 114, 766,
	767, 0, 115, 0, 116, 0, 0, 0, 758, 118,
	0, 119, 0, 0, 0, 701, 120, 121, 122, 745,
	746, 724, 0, 0, 123, 124, 768, 0, 125, 0,
	126, 0, 0, 322, 0, 127, 756, 0, 254, 0,
	128, 129, 130, 131, 752, 754, 324, 0, 135, 0,
	132, 0, 323, 133, 769, 134, 770, 771, 772, 0,
	735, 0, 325, 136, 326, 137, 138, 0, 140, 139,
	0, 757, 327, 141, 328, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 263, 147, 329, 149, 150,
	152, 151, 696, 1654, 725, 753, 153, 773, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 266, 330,
	159, 331, 747, 160, 161, 162, 163, 0, 748, 164,
	269, 165, 0, 166, 167, 168, 169, 774, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 332, 184, 185, 702, 186, 0,
	190, 191, 192, 193, 0, 272, 194, 195, 196, 741,
	197, 187, 188, 198, 333, 199, 775, 274, 200, 0,
	206, 201, 202, 189, 203, 205, 776, 204, 749, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 277, 777,
	778, 0, 0, 213, 214, 750, 751, 723, 215, 216,
	217, 218, 0, 0, 219, 220, 221, 222, 742, 223,
	0, 282, 224, 225, 226, 283, 779, 0, 0, 227,
	0, 0, 0, 0, 228, 229, 230, 231, 232, 697,
	0, 0, 0, 0, 0, 695, 0, 0, 0, 0,
	693, 694, 691, 728, 717, 718, 715, 716, 707, 703,
	0, 0, 0, 0, 706, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 744, 710, 0,
	0, 0, 95, 96, 97, 234, 759, 236, 760, 98,
	761, 762, 0, 99, 240, 241, 100, 713, 743, 763,
	764, 244, 0, 101, 755, 0, 736, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 321, 109,
	110, 0, 737, 739, 0, 738, 740, 111, 112, 288,
	113, 765, 114, 766, 767, 0, 115, 0, 116, 0,
	0, 0, 758, 118, 0, 119, 0, 0, 0, 701,
	120, 121, 122, 745, 746, 724, 0, 0, 123, 124,
	768, 0, 125, 0, 126, 0, 0, 322, 0, 127,
	756, 0, 254, 0, 128, 129, 130, 131, 752, 754,
	324, 0, 135, 0, 132, 0, 323, 133, 769, 134,
	770, 771, 772, 0, 735, 0, 325, 136, 326, 137,
	138, 0, 140, 139, 0, 757, 327, 141, 328, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 263,
	147, 329, 149, 150, 152, 151, 696, 0, 725, 753,
	153, 773, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 266, 330, 159, 331, 747, 160, 161, 162,
	163, 0, 748, 164, 269, 165, 0, 166, 167, 168,
	169, 774, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 332, 184,
	185, 702, 186, 0, 190, 191, 192, 193, 0, 272,
	194, 195, 196, 741, 197, 187, 188, 198, 333, 199,
	775, 274, 200, 0, 206, 201, 202, 189, 203, 205,
	776, 204, 749, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 277, 777, 778, 0, 0, 213, 214, 750,
	751, 723, 215, 216, 217, 218, 0, 0, 219, 220,
	221, 222, 742, 223, 0, 282, 224, 225, 226, 283,
	779, 0, 0, 227, 0, 0, 0, 0, 228, 229,
	230, 231, 232, 697, 0, 0, 0, 0, 0, 695,
	0, 0, 0, 0, 693, 694, 0, 0, 0, 0,
	0, 1046, 1313, 703, 0, 0, 0, 0, 706, 728,
	717, 718, 715, 716, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 744, 710, 0, 0, 0, 95, 96,
	97, 234, 759, 236, 760, 98, 761, 762, 0, 99,
	240, 241, 100, 713, 743, 763, 764, 244, 0, 101,
	755, 0, 736, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 321, 109, 110, 0, 737, 739,
	0, 738, 740, 111, 112, 288, 113, 765, 114, 766,
	767, 0, 115, 0, 116, 0, 0, 0, 758, 118,
	0, 119, 0, 0, 0, 701, 120, 121, 122, 745,
	746, 724, 0, 0, 123, 124, 768, 0, 125, 0,
	126, 0, 0, 322, 0, 127, 756, 0, 254, 0,
	128, 129, 130, 131, 752, 754, 324, 0, 135, 0,
	132, 0, 323, 133, 769, 134, 770, 771, 772, 0,
	735, 0, 325, 136, 326, 137, 138, 0, 140, 139,
	0, 757, 327, 141, 328, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 263, 147, 329, 149, 150,
	152, 151, 696, 0, 725, 753, 153, 773, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 266, 330,
	159, 331, 747, 160, 161, 162, 163, 0, 748, 164,
	269, 165, 0, 166, 167, 168, 169, 774, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 332, 184, 185, 702, 186, 0,
	190, 191, 192, 193, 0, 272, 194, 195, 196, 741,
	197, 187, 188, 198, 333, 199, 775, 274, 200, 0,
	206, 201, 202, 189, 203, 205, 776, 204, 749, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 277, 777,
	778, 0, 0, 213, 214, 750, 751, 723, 215, 216,
	217, 218, 0, 0, 219, 220, 221, 222, 742, 223,
	0, 282, 224, 225, 226, 283, 779, 0, 0, 227,
	0, 0, 0, 0, 228, 229, 230, 231, 232, 697,
	0, 0, 0, 0, 0, 695, 0, 0, 0, 0,
	693, 694, 728, 717, 718, 715, 716, 707, 0, 703,
	1786, 0, 0, 0, 706, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 744, 710, 0, 0,
	0, 95, 96, 97, 234, 759, 236, 760, 98, 761,
	762, 0, 99, 240, 241, 100, 713, 743, 763, 764,
	244, 0, 101, 755, 0, 736, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 321, 109, 110,
	0, 737, 739, 0, 738, 740, 111, 112, 288, 113,
	765, 114, 766, 767, 0, 115, 0, 116, 0, 0,
	0, 758, 118, 0, 119, 0, 0, 0, 701, 120,
	121, 122, 745, 746, 724, 0, 0, 123, 124, 768,
	0, 125, 0, 126, 0, 0, 322, 0, 127, 756,
	0, 254, 0, 128, 129, 130, 131, 752, 754, 324,
	0, 135, 0, 132, 0, 323, 133, 769, 134, 770,
	771, 772, 0, 735, 0, 325, 136, 326, 137, 138,
	0, 140, 139, 0, 757, 327, 141, 328, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 263, 147,
	329, 149, 150, 152, 151, 696, 0, 725, 753, 153,
	773, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 266, 330, 159, 331, 747, 160, 161, 162, 163,
	0, 748, 164, 269, 165, 0, 166, 167, 168, 169,
	774, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 332, 184, 185,
	702, 186, 0, 190, 191, 192, 193, 0, 272, 194,
	195, 196, 741, 197, 187, 188, 198, 333, 199, 775,
	274, 200, 0, 206, 201, 202, 189, 203, 205, 776,
	204, 749, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 277, 777, 778, 0, 0, 213, 214, 750, 751,
	723, 215, 216, 217, 218, 0, 0, 219, 220, 221,
	222, 742, 223, 0, 282, 224, 225, 226, 283, 779,
	1743, 0, 227, 0, 0, 0, 0, 228, 229, 230,
	231, 232, 697, 0, 0, 0, 0, 0, 695, 0,
	0, 0, 0, 693, 694, 728, 717, 718, 715, 716,
	707, 0, 703, 0, 0, 0, 0, 706, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 744,
	710, 0, 0, 0, 95, 96, 97, 234, 759, 236,
	760, 98, 761, 762, 0, 99, 240, 241, 100, 713,
	743, 763, 764, 244, 0, 101, 755, 0, 736, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	321, 109, 110, 0, 737, 739, 0, 738, 740, 111,
	112, 288, 113, 765, 114, 766, 767, 0, 115, 0,
	116, 0, 0, 0, 758, 118, 0, 119, 0, 0,
	0, 701, 120, 121, 122, 745, 746, 724, 0, 0,
	123, 124, 768, 0, 125, 0, 126, 0, 0, 322,
	0, 127, 756, 0, 254, 0, 128, 129, 130, 131,
	752, 754, 324, 0, 135, 0, 132, 0, 323, 133,
	769, 134, 770, 771, 772, 0, 735, 0, 325, 136,
	326, 137, 138, 0, 140, 139, 0, 757, 327, 141,
	328, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 263, 147, 329, 149, 150, 152, 151, 696, 0,
	725, 753, 153, 773, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 266, 330, 159, 331, 747, 160,
	161, 162, 163, 0, 748, 164, 269, 165, 0, 166,
	167, 168, 169, 774, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	332, 184, 185, 702, 186, 0, 190, 191, 192, 193,
	0, 272, 194, 195, 196, 741, 197, 187, 188, 198,
	333, 199, 775, 274, 200, 0, 206, 201, 202, 189,
	203, 205, 776, 204, 749, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 277, 777, 778, 0, 0, 213,
	214, 750, 751, 723, 215, 216, 217, 218, 0, 0,
	219, 220, 221, 222, 742, 223, 0, 282, 224, 225,
	226, 283, 779, 0, 0, 227, 0, 0, 0, 0,
	228, 229, 230, 231, 232, 697, 0, 0, 0, 0,
	0, 695, 0, 0, 0, 0, 693, 694, 728, 717,
	718, 715, 716, 707, 0, 703, 1733, 0, 0, 0,
	706, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 744, 710, 0, 0, 0, 95, 96, 97,
	234, 759, 236, 760, 98, 761, 762, 0, 99, 240,
	241, 100, 713, 743, 763, 764, 244, 0, 101, 755,
	0, 736, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 321, 109, 110, 0, 737, 739, 0,
	738, 740, 111, 112, 288, 113, 765, 114, 766, 767,
	794, 115, 0, 116, 0, 0, 0, 758, 118, 0,
	119, 0, 0, 0, 701, 120, 121, 122, 745, 746,
	724, 0, 0, 123, 124, 768, 0, 125, 0, 126,
	0, 0, 322, 0, 127, 756, 0, 254, 0, 128,
	129, 130, 131, 752, 754, 324, 0, 135, 0, 132,
	0, 323, 133, 769, 134, 770, 771, 772, 0, 735,
	0, 325, 136, 326, 137, 138, 0, 140, 139, 0,
	757, 327, 141, 328, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 263, 147, 329, 149, 150, 152,
	151, 696, 0, 725, 753, 153, 773, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 266, 330, 159,
	331, 747, 160, 161, 162, 163, 0, 748, 164, 269,
	165, 0, 166, 167, 168, 169, 774, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 332, 184, 185, 702, 186, 0, 190,
	191, 192, 193, 0, 272, 194, 195, 196, 741, 197,
	187, 188, 198, 333, 199, 775, 274, 200, 0, 206,
	201, 202, 189, 203, 205, 776, 204, 749, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 277, 777, 778,
	0, 0, 213, 214, 750, 751, 723, 215, 216, 217,
	218, 0, 0, 219, 220, 221, 222, 742, 223, 0,
	282, 224, 225, 226, 283, 779, 0, 0, 227, 0,
	0, 0, 0, 228, 229, 230, 231, 232, 697, 0,
	0, 0, 0, 0, 695, 0, 0, 0, 0, 693,
	694, 728, 717, 718, 715, 716, 707, 0, 703, 0,
	0, 0, 0, 706, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 744, 710, 0, 0, 0,
	95, 96, 97, 234, 759, 236, 760, 98, 761, 762,
	0, 99, 240, 241, 100, 713, 743, 763, 764, 244,
	0, 101, 755, 0, 736, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 321, 109, 110, 0,
	737, 739, 0, 738, 740, 111, 112, 288, 113, 765,
	114, 766, 767, 0, 115, 0, 116, 0, 0, 0,
	758, 118, 0, 119, 0, 0, 0, 701, 120, 121,
	122, 745, 746, 724, 0, 0, 123, 124, 768, 0,
	125, 0, 126, 0, 1365, 322, 0, 127, 756, 0,
	254, 0, 128, 129, 130, 131, 752, 754, 324, 0,
	135, 0, 132, 0, 323, 133, 769, 134, 770, 771,
	772, 0, 735, 0, 325, 136, 326, 137, 138, 0,
	140, 139, 0, 757, 327, 141, 328, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 263, 147, 329,
	149, 150, 152, 151, 696, 0, 725, 753, 153, 773,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	266, 330, 159, 331, 747, 160, 161, 162, 163, 0,
	748, 164, 269, 165, 0, 166, 167, 168, 169, 774,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 332, 184, 185, 702,
	186, 0, 190, 191, 192, 193, 0, 272, 194, 195,
	196, 741, 197, 187, 188, 198, 333, 199, 775, 274,
	200, 0, 206, 201, 202, 189, 203, 205, 776, 204,
	749, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	277, 777, 778, 0, 0, 213, 214, 750, 751, 723,
	215, 216, 217, 218, 0, 0, 219, 220, 221, 222,
	742, 223, 0, 282, 224, 225, 226, 283, 779, 0,
	0, 227, 0, 0, 0, 0, 228, 229, 230, 231,
	232, 697, 0, 0, 0, 0, 0, 695, 0, 0,
	0, 0, 693, 694, 728, 717, 718, 715, 716, 707,
	0, 703, 0, 0, 0, 0, 706, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 744, 710,
	0, 0, 0, 95, 96, 97, 234, 759, 236, 760,
	98, 761, 762, 0, 99, 240, 241, 100, 713, 743,
	763, 764, 244, 0, 101, 755, 0, 736, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 321,
	109, 110, 0, 737, 739, 0, 738, 740, 111, 112,
	288, 113, 765, 114, 766, 767, 0, 115, 0, 116,
	0, 0, 0, 758, 118, 0, 119, 0, 0, 0,
	701, 120, 121, 122, 745, 746, 724, 0, 0, 123,
	124, 768, 0, 125, 0, 126, 0, 0, 322, 0,
	127, 756, 0, 254, 0, 128, 129, 130, 131, 752,
	754, 324, 0, 135, 0, 132, 0, 323, 133, 769,
	134, 770, 771, 772, 0, 735, 0, 325, 136, 326,
	137, 138, 0, 140, 139, 0, 757, 327, 141, 328,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	263, 147, 329, 149, 150, 152, 151, 696, 0, 725,
	753, 153, 773, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 266, 330, 159, 331, 747, 160, 161,
	162, 163, 0, 748, 164, 269, 165, 0, 166, 167,
	168, 169, 774, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 332,
	184, 185, 702, 186, 0, 190, 191, 192, 193, 0,
	272, 194, 195, 196, 741, 197, 187, 188, 198, 333,
	199, 775, 274, 200, 0, 206, 201, 202, 189, 203,
	205, 776, 204, 749, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 277, 777, 778, 0, 0, 213, 214,
	750, 751, 723, 215, 216, 217, 218, 0, 0, 219,
	220, 221, 222, 742, 223, 0, 282, 224, 225, 226,
	283, 779, 0, 0, 227, 0, 0, 0, 0, 228,
	229, 230, 231, 232, 697, 0, 0, 0, 0, 0,
	695, 0, 0, 0, 0, 693, 694, 728, 717, 718,
	715, 716, 707, 0, 703, 1308, 0, 0, 0, 706,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 744, 710, 0, 0, 0, 95, 96, 97, 234,
	759, 236, 760, 98, 761, 762, 0, 99, 240, 241,
	100, 713, 743, 763, 764, 244, 0, 101, 755, 0,
	736, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 321, 109, 110, 0, 737, 739, 0, 738,
	740, 111, 112, 288, 113, 765, 114, 766, 767, 0,
	115, 0, 116, 0, 0, 0, 758, 118, 0, 119,
	0, 0, 0, 701, 120, 121, 122, 745, 746, 724,
	0, 0, 123, 124, 768, 0, 125, 0, 126, 0,
	0, 322, 0, 127, 756, 0, 254, 0, 128, 129,
	130, 131, 752, 754, 324, 0, 135, 0, 132, 0,
	323, 133, 769, 134, 770, 771, 772, 0, 735, 0,
	325, 136, 326, 137, 138, 0, 140, 139, 0, 757,
	327, 141, 328, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 263, 147, 329, 149, 150, 152, 151,
	696, 0, 725, 753, 153, 773, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 266, 330, 159, 331,
	747, 160, 161, 162, 163, 0, 748, 164, 269, 165,
	0, 166, 167, 168, 169, 774, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 332, 184, 185, 702, 186, 0, 190, 191,
	192, 193, 0, 272, 194, 195, 196, 741, 197, 187,
	188, 198, 333, 199, 775, 274, 200, 0, 206, 201,
	202, 189, 203, 205, 776, 204, 749, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 277, 777, 778, 0,
	0, 213, 214, 750, 751, 723, 215, 216, 217, 218,
	0, 0, 219, 220, 221, 222, 742, 223, 0, 282,
	224, 225, 226, 283, 779, 0, 0, 227, 0, 0,
	0, 0, 228, 229, 230, 231, 232, 697, 0, 0,
	0, 0, 0, 695, 0, 0, 0, 0, 693, 694,
	691, 728, 717, 718, 715, 716, 707, 703, 0, 0,
	0, 0, 706, 0, 0, 0, 0, 92, 93, 971,
	94, 0, 0, 0, 0, 744, 710, 0, 0, 0,
	95, 96, 97, 234, 759, 236, 760, 98, 761, 762,
	0, 99, 240, 241, 100, 713, 743, 763, 764, 244,
	0, 101, 755, 0, 736, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 321, 109, 110, 0,
	737, 739, 0, 738, 740, 111, 112, 288, 113, 765,
	114, 766, 767, 0, 115, 0, 116, 0, 0, 0,
	758, 118, 0, 119, 0, 0, 0, 701, 120, 121,
	122, 745, 746, 724, 0, 0, 123, 124, 768, 0,
	125, 0, 126, 0, 0, 322, 0, 127, 756, 0,
	254, 0, 128, 129, 130, 131, 752, 754, 324, 0,
	135, 0, 132, 0, 323, 133, 769, 134, 770, 771,
	772, 0, 735, 0, 325, 136, 326, 137, 138, 0,
	140, 139, 0, 757, 327, 141, 328, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 263, 147, 329,
	149, 150, 152, 151, 696, 0, 725, 753, 153, 773,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	266, 330, 159, 331, 747, 160, 161, 162, 163, 0,
	748, 164, 269, 165, 0, 166, 167, 168, 169, 774,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 332, 184, 185, 702,
	186, 0, 190, 191, 192, 193, 0, 272, 194, 195,
	196, 741, 197, 187, 188, 198, 333, 199, 775, 274,
	200, 0, 206, 201, 202, 189, 203, 205, 776, 204,
	749, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	277, 777, 778, 0, 0, 213, 214, 750, 751, 723,
	215, 216, 217, 218, 0, 0, 219, 220, 221, 222,
	742, 223, 0, 282, 224, 225, 226, 283, 779, 0,
	0, 227, 0, 0, 0, 0, 228, 229, 230, 231,
	232, 697, 0, 0, 0, 0, 0, 695, 0, 0,
	0, 0, 693, 694, 728, 717, 718, 715, 716, 707,
	0, 703, 0, 0, 0, 0, 706, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 744, 710,
	0, 0, 0, 95, 96, 97, 234, 759, 236, 760,
	98, 761, 762, 0, 99, 240, 241, 100, 713, 743,
	763, 764, 244, 0, 101, 755, 0, 736, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 321,
	109, 2133, 0, 737, 739, 0, 738, 740, 111, 112,
	288, 113, 765, 114, 766, 767, 0, 115, 0, 116,
	0, 0, 0, 758, 118, 0, 119, 0, 0, 0,
	701, 120, 121, 122, 745, 746, 724, 0, 0, 123,
	124, 768, 0, 125, 0, 126, 0, 0, 322, 0,
	127, 756, 0, 254, 0, 128, 129, 130, 131, 752,
	754, 324, 0, 135, 0, 132, 0, 323, 133, 769,
	134, 770, 771, 772, 0, 735, 0, 325, 136, 326,
	137, 138, 0, 140, 139, 0, 757, 327, 141, 328,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	263, 147, 329, 149, 150, 152, 151, 696, 0, 725,
	753, 153, 773, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 266, 330, 159, 331, 747, 160, 161,
	162, 163, 0, 748, 164, 269, 165, 0, 166, 167,
	168, 169, 774, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 332,
	184, 185, 702, 186, 0, 190, 191, 192, 193, 0,
	272, 194, 195, 196, 741, 197, 187, 188, 198, 333,
	199, 775, 274, 200, 0, 206, 201, 202, 189, 203,
	205, 776, 204, 749, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 277, 777, 778, 0, 0, 213, 214,
	750, 751, 723, 215, 216, 2132, 218, 0, 0, 219,
	220, 221, 222, 742, 223, 0, 282, 224, 225, 226,
	283, 779, 0, 0, 227, 0, 0, 0, 0, 228,
	229, 230, 231, 232, 697, 0, 0, 0, 0, 0,
	695, 0, 0, 0, 0, 693, 694, 728, 717, 718,
	715, 716, 707, 0, 703, 0, 0, 0, 0, 706,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 744, 710, 0, 0, 0, 95, 96, 97, 2131,
	759, 236, 760, 98, 761, 762, 0, 99, 240, 241,
	100, 713, 743, 763, 764, 244, 0, 101, 755, 0,
	736, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 321, 109, 2133, 0, 737, 739, 0, 738,
	740, 111, 112, 288, 113, 765, 114, 766, 767, 0,
	115, 0, 116, 0, 0, 0, 758, 118, 0, 119,
	0, 0, 0, 701, 120, 121, 122, 745, 746, 724,
	0, 0, 123, 124, 768, 0, 125, 0, 126, 0,
	0, 322, 0, 127, 756, 0, 254, 0, 128, 129,
	130, 131, 752, 754, 324, 0, 135, 0, 132, 0,
	323, 133, 769, 134, 770, 771, 772, 0, 735, 0,
	325, 136, 326, 137, 138, 0, 140, 139, 0, 757,
	327, 141, 328, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 263, 147, 329, 149, 150, 152, 151,
	696, 0, 725, 753, 153, 773, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 266, 330, 159, 331,
	747, 160, 161, 162, 163, 0, 748, 164, 269, 165,
	0, 166, 167, 168, 169, 774, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 332, 184, 185, 702, 186, 0, 190, 191,
	192, 193, 0, 272, 194, 195, 196, 741, 197, 187,
	188, 198, 333, 199, 775, 274, 200, 0, 206, 201,
	202, 189, 203, 205, 776, 204, 749, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 277, 777, 778, 0,
	0, 213, 214, 750, 751, 723, 215, 216, 2132, 218,
	0, 0, 219, 220, 221, 222, 742, 223, 0, 282,
	224, 225, 226, 283, 779, 0, 0, 227, 0, 0,
	0, 0, 228, 229, 230, 231, 232, 697, 0, 0,
	0, 0, 0, 695, 0, 0, 0, 0, 693, 694,
	728, 717, 718, 715, 716, 707, 0, 703, 0, 0,
	0, 0, 706, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 744, 710, 0, 0, 0, 95,
	96, 97, 234, 759, 236, 760, 98, 761, 762, 0,
	99, 240, 241, 100, 713, 743, 763, 764, 244, 0,
	101, 755, 0, 736, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 321, 109, 110, 0, 737,
	739, 0, 738, 740, 111, 112, 288, 113, 765, 114,
	766, 767, 0, 115, 0, 116, 0, 0, 0, 758,
	118, 0, 119, 0, 0, 0, 701, 120, 121, 122,
	745, 746, 724, 0, 0, 123, 124, 768, 0, 125,
	0, 126, 0, 0, 322, 0, 127, 756, 0, 254,
	0, 128, 129, 130, 131, 752, 754, 324, 0, 135,
	0, 132, 0, 323, 133, 769, 134, 770, 771, 772,
	0, 735, 0, 325, 136, 326, 137, 138, 0, 140,
	139, 0, 757, 327, 141, 328, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 263, 147, 329, 149,
	150, 152, 151, 696, 0, 725, 753, 153, 773, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 266,
	330, 159, 331, 747, 160, 161, 162, 163, 0, 748,
	164, 269, 165, 0, 166, 167, 168, 169, 774, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 332, 184, 185, 702, 186,
	0, 190, 191, 192, 193, 0, 272, 194, 195, 196,
	741, 197, 187, 188, 198, 333, 199, 775, 274, 200,
	0, 206, 201, 202, 189, 203, 205, 776, 204, 749,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 277,
	777, 778, 0, 0, 213, 214, 750, 751, 723, 215,
	216, 217, 218, 0, 0, 219, 220, 221, 222, 742,
	223, 0, 282, 224, 225, 226, 283, 779, 0, 0,
	227, 0, 0, 0, 0, 228, 229, 230, 231, 232,
	697, 0, 0, 0, 0, 0, 695, 0, 0, 0,
	0, 693, 694, 1337, 717, 718, 715, 716, 707, 0,
	703, 0, 0, 0, 0, 706, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 744, 710, 0,
	0, 0, 95, 96, 97, 234, 759, 236, 760, 98,
	761, 762, 0, 99, 240, 241, 100, 713, 743, 763,
	764, 244, 0, 101, 755, 0, 736, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 321, 109,
	110, 0, 737, 739, 0, 738, 740, 111, 112, 288,
	113, 765, 1340, 766, 767, 0, 115, 0, 116, 0,
	0, 0, 758, 118, 0, 119, 0, 0, 0, 701,
	120, 121, 122, 745, 746, 724, 0, 0, 123, 124,
	768, 0, 125, 0, 126, 0, 0, 322, 0, 127,
	756, 0, 254, 0, 128, 129, 1341, 131, 752, 754,
	324, 0, 135, 0, 132, 0, 323, 133, 769, 134,
	770, 771, 772, 0, 735, 0, 325, 136, 326, 137,
	138, 0, 140, 139, 0, 757, 327, 141, 328, 0,
	142, 0, 0, 143, 0, 144, 1342, 1339, 148, 263,
	147, 329, 149, 150, 152, 151, 696, 0, 725, 753,
	153, 773, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 266, 330, 159, 331, 747, 160, 161, 162,
	163, 0, 748, 164, 269, 165, 0, 166, 167, 168,
	169, 774, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 332, 184,
	185, 702, 186, 0, 190, 191, 192, 1343, 0, 272,
	194, 195, 196, 741, 197, 187, 188, 198, 333, 199,
	775, 274, 200, 0, 206, 201, 202, 189, 203, 205,
	776, 204, 749, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 277, 777, 778, 0, 0, 213, 214, 750,
	751, 723, 215, 216, 217, 218, 0, 0, 219, 220,
	221, 222, 742, 223, 0, 282, 224, 225, 226, 283,
	779, 0, 0, 227, 0, 0, 0, 0, 228, 229,
	230, 1338, 232, 697, 0, 0, 0, 0, 0, 695,
	0, 0, 0, 0, 693, 694, 728, 717, 718, 715,
	716, 707, 0, 703, 0, 0, 0, 0, 706, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	744, 710, 0, 0, 0, 95, 96, 97, 234, 759,
	236, 760, 98, 761, 762, 0, 99, 240, 241, 100,
	713, 743, 763, 764, 244, 0, 101, 755, 0, 736,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 321, 109, 110, 0, 737, 739, 0, 738, 740,
	111, 112, 288, 113, 765, 114, 766, 767, 0, 115,
	0, 116, 0, 0, 0, 758, 118, 0, 119, 0,
	0, 0, 701, 120, 121, 122, 745, 746, 724, 0,
	0, 123, 124, 768, 0, 125, 0, 126, 0, 0,
	322, 0, 127, 756, 0, 254, 0, 128, 129, 130,
	131, 752, 754, 324, 0, 135, 0, 132, 0, 323,
	133, 769, 134, 770, 771, 772, 0, 735, 0, 325,
	136, 326, 137, 138, 0, 140, 139, 0, 757, 327,
	141, 328, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 263, 147, 329, 149, 150, 152, 151, 0,
	0, 725, 753, 153, 773, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 266, 330, 159, 331, 747,
	160, 161, 162, 163, 0, 748, 164, 269, 165, 0,
	166, 167, 168, 169, 774, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 332, 184, 185, 1355, 186, 0, 190, 191, 192,
	193, 0, 272, 194, 195, 196, 741, 197, 187, 188,
	198, 333, 199, 775, 274, 200, 0, 206, 201, 202,
	189, 203, 205, 776, 204, 749, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 277, 777, 778, 0, 0,
	213, 214, 750, 751, 723, 215, 216, 217, 218, 0,
	0, 219, 220, 221, 222, 742, 223, 0, 282, 224,
	225, 226, 283, 779, 0, 0, 227, 0, 0, 0,
	0, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 1353, 0, 0, 0, 0, 1351, 1352, 728,
	717, 718, 715, 716, 707, 0, 1354, 0, 0, 0,
	0, 706, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 744, 710, 0, 0, 0, 95, 96,
	97, 234, 759, 236, 760, 98, 761, 762, 0, 99,
	240, 241, 100, 0, 743, 763, 764, 244, 0, 101,
	755, 0, 736, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 321, 109, 110, 0, 737, 739,
	0, 738, 740, 111, 112, 288, 113, 765, 114, 766,
	767, 0, 115, 0, 116, 0, 0, 0, 758, 118,
	0, 119, 0, 0, 0, 249, 120, 121, 122, 745,
	746, 724, 0, 0, 123, 124, 768, 0, 125, 0,
	126, 0, 0, 322, 0, 127, 756, 0, 254, 0,
	128, 129, 130, 131, 752, 754, 324, 0, 135, 0,
	132, 0, 323, 133, 769, 134, 770, 771, 772, 0,
	735, 0, 325, 136, 326, 137, 138, 0, 140, 139,
	0, 757, 327, 141, 328, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 263, 147, 329, 149, 150,
	152, 151, 0, 0, 725, 753, 153, 773, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 266, 330,
	159, 331, 747, 160, 161, 162, 163, 0, 748, 164,
	269, 165, 0, 166, 167, 168, 169, 774, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 332, 184, 185, 1355, 186, 0,
	190, 191, 192, 193, 0, 272, 194, 195, 196, 741,
	197, 187, 188, 198, 333, 199, 775, 274, 200, 0,
	206, 201, 202, 189, 203, 205, 776, 204, 749, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 277, 777,
	778, 0, 0, 213, 214, 750, 751, 723, 215, 216,
	217, 218, 0, 0, 219, 220, 221, 222, 742, 223,
	0, 282, 224, 225, 226, 283, 779, 0, 0, 227,
	0, 0, 0, 0, 228, 229, 230, 231, 232, 0,
	0, 728, 717, 718, 715, 716, 707, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 1354,
	94, 0, 0, 0, 706, 744, 710, 0, 0, 0,
	95, 96, 97, 0, 759, 236, 760, 98, 761, 762,
	0, 99, 240, 241, 100, 713, 743, 763, 764, 244,
	0, 101, 755, 0, 736, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 321, 109, 2133, 0,
	737, 739, 0, 738, 740, 111, 112, 288, 113, 765,
	114, 766, 767, 0, 115, 0, 116, 0, 0, 0,
	758, 118, 0, 119, 0, 0, 0, 701, 120, 121,
	122, 745, 746, 724, 0, 0, 123, 124, 768, 0,
	125, 0, 126, 0, 0, 322, 0, 127, 756, 0,
	254, 0, 128, 129, 130, 131, 752, 754, 0, 0,
	135, 0, 132, 0, 323, 133, 769, 134, 770, 771,
	772, 0, 735, 0, 0, 136, 326, 137, 138, 0,
	140, 139, 0, 757, 327, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 263, 147, 329,
	149, 150, 152, 151, 696, 0, 725, 753, 153, 773,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	266, 330, 159, 331, 747, 160, 161, 162, 163, 0,
	748, 164, 269, 165, 0, 166, 167, 168, 169, 774,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 332, 184, 185, 702,
	186, 0, 190, 191, 192, 193, 0, 272, 194, 195,
	196, 741, 197, 187, 188, 198, 0, 199, 775, 274,
	200, 0, 206, 201, 202, 189, 203, 205, 776, 204,
	749, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	277, 777, 778, 0, 0, 213, 214, 750, 751, 723,
	215, 216, 2132, 218, 0, 0, 219, 220, 221, 222,
	742, 223, 0, 282, 224, 225, 226, 283, 779, 0,
	0, 227, 0, 0, 0, 0, 228, 229, 230, 231,
	232, 728, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 693, 694, 0, 0, 0, 92, 93, 0,
	94, 703, 0, 0, 0, 744, 706, 0, 0, 0,
	95, 96, 97, 234, 235, 236, 237, 98, 238, 239,
	0, 99, 240, 241, 100, 0, 743, 242, 243, 244,
	0, 101, 755, 0, 736, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 321, 109, 110, 0,
	737, 739, 0, 738, 740, 111, 112, 288, 113, 246,
	114, 247, 248, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 249, 120, 121,
	122, 745, 746, 0, 0, 0, 123, 124, 252, 0,
	125, 0, 126, 0, 0, 322, 0, 127, 756, 0,
	254, 0, 128, 129, 130, 131, 752, 754, 324, 0,
	135, 0, 132, 0, 323, 133, 257, 134, 258, 259,
	260, 0, 261, 0, 325, 136, 326, 137, 138, 0,
	140, 139, 0, 757, 327, 141, 328, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 263, 147, 329,
	149, 150, 152, 151, 0, 0, 0, 753, 153, 265,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	266, 330, 159, 331, 747, 160, 161, 162, 163, 0,
	748, 164, 269, 165, 0, 166, 167, 168, 169, 270,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 332, 184, 185, 271,
	186, 0, 190, 191, 192, 193, 0, 272, 194, 195,
	196, 741, 197, 187, 188, 198, 333, 199, 273, 274,
	200, 0, 206, 201, 202, 189, 203, 205, 275, 204,
	749, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	277, 278, 279, 0, 0, 213, 214, 750, 751, 0,
	215, 216, 217, 218, 0, 0, 219, 220, 221, 222,
	742, 223, 0, 282, 224, 225, 226, 283, 284, 0,
	0, 227, 0, 506, 0, 0, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 233, 0, 0,
	0, 1627, 95, 96, 97, 234, 235, 236, 237, 98,
	238, 239, 0, 99, 240, 241, 100, 0, 0, 242,
	243, 244, 0, 101, 245, 0, 320, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 321, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 288,
	113, 246, 114, 247, 248, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 249,
	120, 121, 122, 250, 251, 0, 0, 0, 123, 124,
	252, 0, 125, 0, 126, 0, 0, 322, 0, 127,
	253, 0, 254, 0, 128, 129, 130, 131, 255, 256,
	324, 0, 135, 0, 132, 0, 323, 133, 257, 134,
	258, 259, 260, 0, 261, 0, 325, 136, 326, 137,
	138, 0, 140, 139, 0, 262, 327, 141, 328, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 263,
	147, 329, 149, 150, 152, 151, 0, 0, 0, 264,
	153, 265, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 266, 330, 159, 331, 267, 160, 161, 162,
	163, 0, 268, 164, 269, 165, 0, 166, 167, 168,
	169, 270, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 332, 184,
	185, 271, 186, 0, 190, 191, 192, 193, 73, 272,
	194, 195, 196, 0, 197, 187, 188, 198, 333, 199,
	273, 274, 200, 0, 206, 201, 202, 189, 203, 205,
	275, 204, 276, 0, 207, 75, 208, 209, 210, 211,
	212, 0, 277, 278, 279, 0, 0, 213, 214, 280,
	281, 0, 215, 216, 217, 218, 0, 0, 219, 220,
	221, 222, 0, 223, 0, 282, 224, 225, 226, 588,
	284, 0, 0, 227, 0, 0, 0, 71, 228, 229,
	230, 231, 232, 0, 72, 506, 503, 0, 504, 499,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 70, 94, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 95, 96, 97, 234, 235, 236,
	237, 98, 238, 239, 0, 99, 240, 241, 100, 0,
	0, 242, 243, 244, 0, 101, 245, 0, 320, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	321, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 288, 113, 246, 114, 247, 248, 919, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 249, 120, 121, 122, 250, 251, 496, 0, 0,
	123, 124, 252, 0, 125, 0, 126, 0, 0, 322,
	0, 127, 253, 0, 254, 0, 128, 129, 130, 131,
	255, 256, 324, 0, 135, 0, 132, 0, 323, 133,
	257, 134, 258, 259, 260, 0, 261, 0, 325, 136,
	326, 137, 138, 0, 140, 139, 0, 262, 327, 141,
	328, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 263, 147, 329, 149, 150, 152, 151, 0, 0,
	0, 264, 153, 265, 154, 155, 0, 156, 497, 0,
	157, 0, 0, 158, 266, 330, 159, 331, 267, 160,
	161, 162, 163, 0, 268, 164, 269, 165, 0, 166,
	167, 168, 169, 270, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	332, 184, 185, 271, 186, 0, 190, 191, 192, 193,
	0, 272, 194, 195, 196, 0, 197, 187, 188, 198,
	333, 199, 273, 274, 200, 0, 206, 201, 202, 189,
	203, 205, 275, 204, 276, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 277, 278, 279, 0, 0, 213,
	214, 280, 281, 495, 215, 216, 217, 218, 0, 0,
	219, 220, 221, 222, 0, 223, 0, 282, 224, 225,
	226, 283, 284, 0, 0, 227, 0, 0, 0, 0,
	228, 229, 230, 231, 232, 506, 503, 0, 504, 499,
	494, 0, 0, 0, 0, 0, 505, 500, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 95, 96, 97, 234, 235, 236,
	237, 98, 238, 239, 0, 99, 240, 241, 100, 0,
	0, 242, 243, 244, 0, 101, 245, 0, 320, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	321, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 288, 113, 246, 114, 247, 248, 916, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 249, 120, 121, 122, 250, 251, 496, 0, 0,
	123, 124, 252, 0, 125, 0, 126, 0, 0, 322,
	0, 127, 253, 0, 254, 0, 128, 129, 130, 131,
	255, 256, 324, 0, 135, 0, 132, 0, 323, 133,
	257, 134, 258, 259, 260, 0, 261, 0, 325, 136,
	326, 137, 138, 0, 140, 139, 0, 262, 327, 141,
	328, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 263, 147, 329, 149, 150, 152, 151, 0, 0,
	0, 264, 153, 265, 154, 155, 0, 156, 497, 0,
	157, 0, 0, 158, 266, 330, 159, 331, 267, 160,
	161, 162, 163, 0, 268, 164, 269, 165, 0, 166,
	167, 168, 169, 270, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	332, 184, 185, 271, 186, 0, 190, 191, 192, 193,
	0, 272, 194, 195, 196, 0, 197, 187, 188, 198,
	333, 199, 273, 274, 200, 0, 206, 201, 202, 189,
	203, 205, 275, 204, 276, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 277, 278, 279, 0, 0, 213,
	214, 280, 281, 495, 215, 216, 217, 218, 0, 0,
	219, 220, 221, 222, 0, 223, 0, 282, 224, 225,
	226, 283, 284, 0, 0, 227, 0, 0, 0, 0,
	228, 229, 230, 231, 232, 506, 503, 0, 504, 499,
	494, 0, 0, 0, 0, 0, 505, 500, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 95, 96, 97, 234, 235, 236,
	237, 98, 238, 239, 0, 99, 240, 241, 100, 0,
	0, 242, 243, 244, 0, 101, 245, 0, 320, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	321, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 288, 113, 246, 114, 247, 248, 620, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 249, 120, 121, 122, 250, 251, 496, 0, 0,
	123, 124, 252, 0, 125, 0, 126, 0, 0, 322,
	0, 127, 253, 0, 254, 0, 128, 129, 130, 131,
	255, 256, 324, 0, 135, 0, 132, 0, 323, 133,
	257, 134, 258, 259, 260, 0, 261, 0, 325, 136,
	326, 137, 138, 0, 140, 139, 0, 262, 327, 141,
	328, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 263, 147, 329, 149, 150, 152, 151, 0, 0,
	0, 264, 153, 265, 154, 155, 0, 156, 497, 0,
	157, 0, 0, 158, 266, 330, 159, 331, 267, 160,
	161, 162, 163, 0, 268, 164, 269, 165, 0, 166,
	167, 168, 169, 270, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	332, 184, 185, 271, 186, 0, 190, 191, 192, 193,
	0, 272, 194, 195, 196, 0, 197, 187, 188, 198,
	333, 199, 273, 274, 200, 0, 206, 201, 202, 189,
	203, 205, 275, 204, 276, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 277, 278, 279, 0, 0, 213,
	214, 280, 281, 495, 215, 216, 217, 218, 0, 0,
	219, 220, 221, 222, 0, 223, 0, 282, 224, 225,
	226, 283, 284, 0, 0, 227, 0, 0, 0, 0,
	228, 229, 230, 231, 232, 506, 503, 0, 504, 499,
	494, 0, 0, 0, 0, 0, 505, 500, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 95, 96, 97, 234, 235, 236,
	237, 98, 238, 239, 0, 99, 240, 241, 100, 0,
	0, 242, 243, 244, 0, 101, 245, 0, 320, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	321, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 288, 113, 246, 114, 247, 248, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 249, 120, 121, 122, 250, 251, 496, 0, 0,
	123, 124, 252, 0, 125, 0, 126, 0, 0, 322,
	0, 127, 253, 0, 254, 0, 128, 129, 130, 131,
	255, 256, 324, 0, 135, 0, 132, 0, 323, 133,
	257, 134, 258, 259, 260, 0, 261, 0, 325, 136,
	326, 137, 138, 0, 140, 139, 0, 262, 327, 141,
	328, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 263, 147, 329, 149, 150, 152, 151, 0, 0,
	0, 264, 153, 265, 154, 155, 0, 156, 497, 0,
	157, 0, 0, 158, 266, 330, 159, 331, 267, 160,
	161, 162, 163, 0, 268, 164, 269, 165, 0, 166,
	167, 168, 169, 270, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	332, 184, 185, 271, 186, 0, 190, 191, 192, 193,
	0, 272, 194, 195, 196, 0, 197, 187, 188, 198,
	333, 199, 273, 274, 200, 0, 206, 201, 202, 189,
	203, 205, 275, 204, 276, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 277, 278, 279, 0, 0, 213,
	214, 280, 281, 495, 215, 216, 217, 218, 0, 0,
	219, 220, 221, 222, 0, 223, 0, 282, 224, 225,
	226, 283, 284, 0, 89, 227, 0, 0, 0, 0,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 505, 500, 233, 0,
	0, 0, 0, 95, 96, 97, 234, 235, 236, 237,
	98, 238, 239, 0, 99, 240, 241, 100, 0, 0,
	242, 243, 244, 0, 101, 245, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	288, 113, 246, 114, 247, 248, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	249, 120, 121, 122, 250, 251, 0, 0, 0, 123,
	124, 252, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 253, 0, 254, 0, 128, 129, 130, 131, 255,
	256, 0, 0, 135, 0, 132, 0, 0, 133, 257,
	134, 258, 259, 260, 0, 261, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 262, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	263, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	264, 153, 265, 154, 155, 0, 156, 0, 540, 157,
	0, 0, 158, 266, 0, 159, 0, 267, 160, 161,
	162, 163, 0, 268, 164, 269, 165, 0, 166, 167,
	168, 169, 270, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 271, 186, 0, 190, 191, 192, 193, 73,
	272, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 273, 274, 200, 0, 206, 201, 202, 189, 203,
	205, 275, 204, 276, 0, 207, 75, 208, 209, 210,
	211, 212, 0, 277, 278, 279, 0, 0, 213, 214,
	280, 281, 0, 215, 216, 217, 218, 0, 0, 219,
	220, 221, 222, 0, 223, 0, 282, 224, 225, 226,
	588, 284, 0, 0, 227, 0, 89, 0, 71, 228,
	229, 230, 231, 232, 0, 72, 0, 0, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	233, 0, 1232, 0, 1237, 95, 96, 97, 234, 235,
	236, 237, 98, 238, 239, 0, 99, 240, 241, 100,
	0, 0, 242, 243, 244, 0, 101, 245, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 288, 113, 246, 114, 247, 248, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 249, 120, 121, 122, 250, 251, 0, 0,
	0, 123, 124, 252, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 253, 0, 254, 0, 128, 129, 130,
	131, 255, 256, 0, 0, 135, 0, 132, 0, 0,
	133, 257, 134, 258, 259, 260, 0, 261, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 262, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 263, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 264, 153, 265, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 266, 0, 159, 0, 267,
	160, 161, 162, 163, 0, 268, 164, 269, 165, 0,
	166, 167, 168, 169, 270, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 271, 186, 0, 190, 191, 192,
	193, 73, 272, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 273, 274, 200, 0, 206, 201, 202,
	189, 203, 205, 275, 204, 276, 0, 207, 75, 208,
	209, 210, 211, 212, 0, 277, 278, 279, 0, 0,
	213, 214, 280, 281, 0, 215, 216, 217, 218, 0,
	0, 219, 220, 221, 222, 0, 223, 0, 282, 224,
	225, 226, 588, 284, 0, 0, 227, 0, 89, 0,
	71, 228, 229, 230, 231, 232, 0, 72, 0, 0,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 233, 0, 0, 0, 70, 95, 96, 97,
	234, 235, 236, 237, 98, 238, 239, 0, 99, 240,
	241, 100, 0, 0, 242, 243, 244, 0, 101, 245,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 288, 113, 246, 114, 247, 248,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 249, 120, 121, 122, 250, 251,
	0, 0, 0, 123, 124, 252, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 253, 0, 254, 0, 128,
	129, 130, 131, 255, 256, 0, 0, 135, 0, 132,
	0, 0, 133, 257, 134, 258, 259, 260, 0, 261,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	262, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 263, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 264, 153, 265, 154, 155, 0,
	156, 0, 540, 157, 0, 0, 158, 266, 0, 159,
	0, 267, 160, 161, 162, 163, 0, 268, 164, 269,
	165, 0, 166, 167, 168, 169, 270, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 271, 186, 0, 190,
	191, 192, 193, 0, 272, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 273, 274, 200, 0, 206,
	201, 202, 189, 203, 205, 275, 204, 276, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 277, 278, 279,
	0, 0, 213, 214, 280, 281, 0, 215, 216, 217,
	218, 0, 0, 219, 220, 221, 222, 0, 223, 0,
	282, 224, 225, 226, 283, 284, 0, 0, 227, 0,
	89, 0, 0, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 233, 0, 1232, 0, 1237, 95,
	96, 97, 234, 235, 236, 237, 98, 238, 239, 0,
	99, 240, 241, 100, 0, 0, 242, 243, 244, 0,
	101, 245, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 288, 113, 246, 114,
	247, 248, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 249, 120, 121, 122,
	250, 251, 0, 0, 0, 123, 124, 252, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 253, 0, 254,
	0, 128, 129, 130, 131, 255, 256, 0, 0, 135,
	0, 132, 0, 0, 133, 257, 134, 258, 259, 260,
	0, 261, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 262, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 263, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 264, 153, 265, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 266,
	0, 159, 0, 267, 160, 161, 162, 163, 0, 268,
	164, 269, 165, 0, 166, 167, 168, 169, 270, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 271, 186,
	0, 190, 191, 192, 193, 0, 272, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 273, 274, 200,
	0, 206, 201, 202, 189, 203, 205, 275, 204, 276,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 277,
	278, 279, 0, 0, 213, 214, 280, 281, 0, 215,
	216, 217, 218, 0, 0, 219, 220, 221, 222, 0,
	223, 0, 282, 224, 225, 226, 283, 284, 0, 0,
	227, 0, 0, 89, 0, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 233, 0, 0,
	0, 823, 95, 96, 97, 234, 235, 236, 237, 98,
	238, 239, 0, 99, 240, 241, 100, 0, 0, 242,
	243, 244, 0, 101, 245, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 288,
	113, 246, 114, 247, 248, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 249,
	120, 121, 122, 250, 251, 0, 0, 0, 123, 124,
	252, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	253, 0, 254, 0, 128, 129, 130, 131, 255, 256,
	0, 0, 135, 0, 132, 0, 0, 133, 257, 134,
	258, 259, 260, 0, 261, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 262, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 263,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 264,
	153, 265, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 266, 0, 159, 0, 267, 160, 161, 162,
	163, 0, 268, 164, 269, 165, 0, 166, 167, 168,
	169, 270, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 271, 186, 0, 190, 191, 192, 193, 0, 272,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	273, 274, 200, 0, 206, 201, 202, 189, 203, 205,
	275, 204, 276, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 277, 278, 279, 0, 0, 213, 214, 280,
	281, 0, 215, 216, 217, 218, 0, 0, 219, 220,
	221, 222, 0, 223, 0, 282, 224, 225, 226, 283,
	284, 0, 0, 227, 0, 89, 0, 0, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 233,
	0, 0, 0, 1147, 95, 96, 97, 234, 235, 236,
	237, 98, 238, 239, 0, 99, 240, 241, 100, 0,
	0, 242, 243, 244, 0, 101, 245, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 288, 113, 246, 114, 247, 248, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 249, 120, 121, 122, 250, 251, 0, 0, 0,
	123, 124, 252, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 253, 0, 254, 0, 128, 129, 130, 131,
	255, 256, 0, 0, 135, 0, 132, 0, 0, 133,
	257, 134, 258, 259, 260, 0, 261, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 262, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 263, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 264, 153, 265, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 266, 0, 159, 0, 267, 160,
	161, 162, 163, 0, 268, 164, 269, 165, 0, 166,
	167, 168, 169, 270, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 271, 186, 0, 190, 191, 192, 193,
	0, 272, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 273, 274, 200, 0, 206, 201, 202, 189,
	203, 205, 275, 204, 276, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 277, 278, 279, 0, 0, 213,
	214, 280, 281, 0, 215, 216, 217, 218, 0, 0,
	219, 220, 221, 222, 0, 223, 0, 282, 224, 225,
	226, 283, 284, 0, 0, 227, 0, 89, 0, 0,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 233, 0, 0, 0, 1750, 95, 96, 97, 234,
	235, 236, 237, 98, 238, 239, 0, 99, 240, 241,
	100, 0, 0, 242, 243, 244, 0, 101, 245, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 288, 113, 246, 114, 247, 248, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 249, 120, 121, 122, 250, 251, 0,
	0, 0, 123, 124, 252, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 253, 0, 254, 0, 128, 129,
	130, 131, 255, 256, 0, 0, 135, 0, 132, 0,
	0, 133, 257, 134, 258, 259, 260, 0, 261, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 262,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 263, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 264, 153, 265, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 266, 0, 159, 0,
	267, 160, 161, 162, 163, 0, 268, 164, 269, 165,
	0, 166, 167, 168, 169, 270, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 271, 186, 0, 190, 191,
	192, 193, 0, 272, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 273, 274, 200, 0, 206, 201,
	202, 189, 203, 205, 275, 204, 276, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 277, 278, 279, 0,
	0, 213, 214, 280, 281, 0, 215, 216, 217, 218,
	0, 0, 219, 220, 221, 222, 0, 223, 0, 282,
	224, 225, 226, 283, 284, 0, 0, 227, 0, 0,
	0, 0, 228, 229, 230, 231, 232, 728, 717, 718,
	715, 716, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 0, 94, 790, 0, 0,
	0, 233, 0, 0, 0, 0, 95, 96, 97, 234,
	759, 236, 760, 98, 761, 762, 0, 99, 240, 241,
	100, 0, 0, 763, 764, 244, 0, 101, 245, 0,
	320, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 321, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 288, 113, 765, 114, 766, 767, 0,
	115, 0, 116, 0, 0, 0, 758, 118, 0, 119,
	0, 0, 0, 249, 120, 121, 122, 250, 251, 724,
	0, 0, 123, 124, 768, 0, 125, 0, 126, 0,
	0, 322, 0, 127, 253, 0, 254, 0, 128, 129,
	130, 131, 255, 256, 324, 0, 135, 0, 132, 0,
	323, 133, 769, 134, 770, 771, 772, 0, 735, 0,
	325, 136, 326, 137, 138, 0, 140, 139, 0, 262,
	327, 141, 328, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 263, 147, 329, 149, 150, 152, 151,
	0, 0, 725, 264, 153, 773, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 266, 330, 159, 331,
	267, 160, 161, 162, 163, 0, 268, 164, 269, 165,
	0, 166, 167, 168, 169, 774, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 332, 184, 185, 271, 186, 0, 190, 191,
	192, 193, 0, 272, 194, 195, 196, 0, 197, 187,
	188, 198, 333, 199, 775, 274, 200, 0, 206, 201,
	202, 189, 203, 205, 776, 204, 276, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 277, 777, 778, 0,
	0, 213, 214, 280, 281, 723, 215, 216, 217, 218,
	0, 0, 219, 220, 221, 222, 0, 223, 0, 282,
	224, 225, 226, 283, 779, 506, 503, 227, 0, 0,
	627, 0, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 95, 96, 97, 234, 235, 236,
	237, 98, 238, 239, 0, 99, 240, 241, 100, 0,
	0, 242, 243, 244, 0, 101, 245, 0, 320, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	321, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 288, 113, 246, 114, 247, 248, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 249, 120, 121, 122, 250, 251, 0, 0, 0,
	123, 124, 252, 0, 125, 0, 126, 0, 0, 322,
	0, 127, 253, 0, 254, 0, 128, 129, 130, 131,
	255, 256, 324, 0, 135, 0, 132, 0, 323, 133,
	257, 134, 258, 259, 260, 0, 261, 0, 325, 136,
	326, 137, 138, 0, 140, 139, 0, 262, 327, 141,
	328, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 263, 147, 329, 149, 150, 152, 151, 0, 0,
	0, 264, 153, 265, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 266, 330, 159, 331, 267, 160,
	161, 162, 163, 0, 268, 164, 269, 165, 0, 166,
	167, 168, 169, 270, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	332, 184, 185, 271, 186, 0, 190, 191, 192, 193,
	0, 272, 194, 195, 196, 0, 197, 187, 188, 198,
	333, 199, 273, 274, 200, 0, 206, 201, 202, 189,
	203, 205, 275, 204, 276, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 277, 278, 279, 0, 0, 213,
	214, 280, 281, 0, 215, 216, 217, 218, 0, 0,
	219, 220, 221, 222, 0, 223, 0, 282, 224, 225,
	226, 283, 284, 89, 0, 227, 0, 0, 0, 0,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 95, 96, 97, 234, 235, 236, 237, 98,
	238, 239, 0, 99, 240, 241, 100, 0, 0, 242,
	243, 244, 0, 101, 245, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 85,
	113, 246, 114, 247, 248, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 249,
	120, 121, 122, 250, 251, 0, 0, 0, 123, 124,
	252, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	253, 0, 254, 0, 128, 129, 130, 131, 255, 256,
	0, 0, 135, 0, 132, 0, 0, 133, 257, 134,
	258, 259, 260, 0, 261, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 262, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 263,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 264,
	153, 265, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 266, 0, 159, 0, 267, 160, 161, 162,
	163, 0, 268, 164, 269, 165, 0, 166, 167, 168,
	169, 270, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 271, 186, 0, 190, 191, 192, 193, 0, 272,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	273, 274, 200, 0, 206, 201, 202, 189, 203, 205,
	275, 204, 276, 0, 207, 84, 208, 209, 210, 211,
	212, 0, 277, 278, 279, 0, 0, 213, 214, 280,
	281, 0, 215, 216, 217, 218, 0, 0, 219, 220,
	221, 222, 0, 223, 0, 282, 224, 225, 226, 283,
	284, 506, 503, 227, 0, 0, 0, 0, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 233, 88, 0, 0, 0,
	95, 96, 97, 234, 235, 236, 237, 98, 238, 239,
	0, 99, 240, 241, 100, 0, 0, 242, 243, 244,
	0, 101, 245, 0, 320, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 321, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 288, 113, 246,
	114, 247, 248, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 249, 120, 121,
	122, 250, 251, 0, 0, 0, 123, 124, 252, 0,
	125, 0, 126, 0, 0, 322, 0, 127, 253, 0,
	254, 0, 128, 129, 130, 131, 255, 256, 324, 0,
	135, 0, 132, 0, 323, 133, 257, 134, 258, 259,
	260, 0, 261, 0, 325, 136, 326, 137, 138, 0,
	140, 139, 0, 262, 327, 141, 328, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 263, 147, 329,
	149, 150, 152, 151, 0, 0, 0, 264, 153, 265,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	266, 330, 159, 331, 267, 160, 161, 162, 163, 0,
	268, 164, 269, 165, 0, 166, 167, 168, 169, 270,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 332, 184, 185, 271,
	186, 0, 190, 191, 192, 193, 0, 272, 194, 195,
	196, 0, 197, 187, 188, 198, 333, 199, 273, 274,
	200, 0, 206, 201, 202, 189, 203, 205, 275, 204,
	276, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	277, 278, 279, 0, 0, 213, 214, 280, 281, 0,
	215, 216, 217, 218, 0, 0, 219, 220, 221, 222,
	0, 223, 0, 282, 224, 225, 226, 283, 284, 89,
	0, 227, 0, 0, 0, 0, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 95, 96,
	97, 234, 235, 236, 237, 98, 238, 239, 0, 99,
	240, 241, 100, 0, 0, 242, 243, 244, 0, 101,
	245, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 288, 113, 246, 114, 247,
	248, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 249, 120, 121, 122, 250,
	251, 0, 0, 0, 123, 124, 252, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 253, 0, 254, 0,
	128, 129, 130, 131, 255, 256, 0, 0, 135, 0,
	132, 0, 0, 133, 257, 134, 258, 259, 260, 0,
	261, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 262, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 263, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 264, 153, 265, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 266, 0,
	159, 0, 267, 160, 161, 162, 163, 0, 268, 164,
	269, 165, 0, 166, 167, 168, 169, 270, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 271, 186, 0,
	190, 191, 192, 193, 0, 272, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 273, 274, 200, 0,
	206, 201, 202, 189, 203, 205, 275, 204, 276, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 277, 278,
	279, 0, 0, 213, 214, 280, 281, 0, 215, 216,
	217, 218, 0, 0, 219, 220, 221, 222, 0, 223,
	0, 282, 224, 225, 226, 283, 284, 506, 0, 227,
	0, 0, 0, 0, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 233, 88, 0, 0, 0, 95, 96, 97, 234,
	235, 236, 237, 98, 238, 239, 0, 99, 240, 241,
	100, 0, 0, 242, 243, 244, 0, 101, 245, 0,
	320, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 321, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 288, 113, 246, 114, 247, 248, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 249, 120, 121, 122, 250, 251, 0,
	0, 0, 123, 124, 252, 0, 125, 0, 126, 0,
	0, 322, 0, 127, 253, 0, 254, 0, 128, 129,
	130, 131, 255, 256, 324, 0, 135, 0, 132, 0,
	323, 133, 257, 134, 258, 259, 260, 0, 261, 0,
	325, 136, 326, 137, 138, 0, 140, 139, 0, 262,
	327, 141, 328, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 263, 147, 329, 149, 150, 152, 151,
	0, 0, 0, 264, 153, 265, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 266, 330, 159, 331,
	267, 160, 161, 162, 163, 0, 268, 164, 269, 165,
	0, 166, 167, 168, 169, 270, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 332, 184, 185, 271, 186, 0, 190, 191,
	192, 193, 0, 272, 194, 195, 196, 0, 197, 187,
	188, 198, 333, 199, 273, 274, 200, 0, 206, 201,
	202, 189, 203, 205, 275, 204, 276, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 277, 278, 279, 0,
	0, 213, 214, 280, 281, 0, 215, 216, 217, 218,
	0, 0, 219, 220, 221, 222, 0, 223, 0, 282,
	224, 225, 226, 283, 284, 89, 0, 227, 0, 0,
	0, 0, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 95, 96, 97, 234, 235, 236,
	237, 98, 238, 239, 0, 99, 240, 241, 100, 0,
	0, 242, 243, 244, 1104, 101, 245, 0, 0, 0,
	102, 103, 104, 0, 105, 1102, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 288, 113, 246, 114, 247, 248, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 249, 120, 121, 122, 250, 251, 0, 1204, 0,
	123, 124, 252, 0, 125, 0, 126, 1107, 0, 0,
	0, 127, 253, 0, 254, 0, 128, 129, 130, 131,
	255, 256, 0, 0, 135, 1202, 132, 0, 0, 133,
	257, 134, 258, 259, 260, 0, 261, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 262, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 263, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 264, 153, 265, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 266, 0, 159, 0, 267, 160,
	161, 162, 163, 0, 268, 164, 269, 165, 1106, 166,
	167, 168, 169, 270, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 271, 186, 0, 190, 191, 192, 193,
	0, 272, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 273, 274, 200, 0, 206, 201, 202, 189,
	203, 205, 275, 204, 276, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 277, 278, 279, 0, 0, 213,
	214, 280, 281, 0, 215, 216, 217, 218, 0, 1203,
	219, 220, 221, 222, 0, 223, 0, 282, 224, 225,
	226, 283, 284, 89, 0, 227, 0, 0, 0, 0,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 95, 96, 97, 234, 235, 236, 237, 98,
	238, 239, 0, 99, 240, 241, 100, 0, 0, 242,
	243, 244, 1104, 101, 245, 0, 0, 1099, 102, 103,
	104, 0, 105, 1102, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 288,
	113, 246, 114, 247, 248, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 249,
	120, 121, 122, 250, 251, 0, 0, 0, 123, 124,
	252, 0, 125, 0, 126, 1107, 0, 0, 0, 127,
	253, 0, 254, 0, 128, 129, 130, 131, 1098, 256,
	0, 0, 135, 0, 132, 0, 0, 133, 257, 134,
	258, 259, 260, 0, 261, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 262, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 263,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 264,
	153, 265, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 266, 0, 159, 0, 267, 160, 161, 162,
	163, 0, 268, 164, 269, 165, 1106, 166, 167, 168,
	169, 270, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 271, 186, 0, 190, 191, 192, 193, 0, 272,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	273, 274, 200, 0, 206, 201, 202, 189, 203, 205,
	275, 204, 276, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 277, 278, 279, 0, 0, 213, 214, 280,
	281, 0, 215, 216, 217, 218, 0, 1105, 219, 220,
	221, 222, 0, 223, 0, 282, 224, 225, 226, 283,
	284, 89, 0, 227, 0, 0, 0, 0, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 233, 0, 1717, 0, 0,
	95, 96, 97, 234, 235, 236, 237, 98, 238, 239,
	0, 99, 240, 241, 100, 0, 0, 242, 243, 244,
	0, 101, 245, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 288, 113, 246,
	114, 247, 248, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 249, 120, 121,
	122, 250, 251, 0, 0, 0, 123, 124, 252, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 253, 0,
	254, 0, 128, 129, 130, 131, 255, 256, 0, 0,
	135, 0, 132, 0, 0, 133, 257, 134, 258, 259,
	260, 0, 261, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 262, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 263, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 264, 153, 265,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	266, 0, 159, 0, 267, 160, 161, 162, 163, 0,
	268, 164, 269, 165, 0, 166, 167, 168, 169, 270,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 271,
	186, 0, 190, 191, 192, 193, 0, 272, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 273, 274,
	200, 0, 206, 201, 202, 189, 203, 205, 275, 204,
	276, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	277, 278, 279, 0, 0, 213, 214, 280, 281, 0,
	215, 216, 217, 218, 0, 0, 219, 220, 221, 222,
	0, 223, 0, 282, 224, 225, 226, 283, 284, 89,
	0, 227, 0, 0, 0, 0, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 95, 96,
	97, 234, 235, 236, 237, 98, 238, 239, 0, 99,
	240, 241, 100, 0, 0, 242, 243, 244, 0, 101,
	245, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 288, 113, 246, 114, 247,
	248, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 249, 120, 121, 122, 250,
	251, 0, 0, 0, 123, 124, 252, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 253, 0, 254, 0,
	128, 129, 130, 131, 255, 256, 0, 0, 135, 0,
	132, 0, 0, 133, 257, 134, 258, 259, 260, 0,
	261, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 262, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 263, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 264, 153, 265, 154, 155,
	0, 156, 0, 540, 157, 0, 0, 158, 266, 0,
	159, 0, 267, 160, 161, 162, 163, 0, 268, 164,
	269, 165, 0, 166, 167, 168, 169, 270, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 271, 186, 0,
	190, 191, 192, 193, 0, 272, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 273, 274, 200, 0,
	206, 201, 202, 189, 203, 205, 275, 204, 276, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 277, 278,
	279, 0, 0, 213, 214, 280, 281, 0, 215, 216,
	217, 218, 0, 0, 219, 220, 221, 222, 0, 223,
	0, 282, 224, 225, 226, 283, 284, 89, 0, 227,
	0, 0, 0, 0, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 92, 93, 934, 94, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 95, 96, 97, 234,
	235, 236, 237, 98, 238, 239, 0, 99, 240, 241,
	100, 0, 0, 242, 243, 244, 0, 101, 245, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 288, 113, 246, 114, 247, 248, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 249, 120, 121, 122, 250, 251, 0,
	0, 0, 123, 124, 252, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 253, 0, 254, 0, 128, 129,
	130, 131, 255, 256, 0, 0, 135, 0, 132, 0,
	0, 133, 257, 134, 258, 259, 260, 0, 261, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 262,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 263, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 264, 153, 265, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 266, 0, 159, 0,
	267, 160, 161, 162, 163, 0, 268, 164, 269, 165,
	0, 166, 167, 168, 169, 270, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 271, 186, 0, 190, 191,
	192, 193, 0, 272, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 273, 274, 200, 0, 206, 201,
	202, 189, 203, 205, 275, 204, 276, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 277, 278, 279, 0,
	0, 213, 214, 280, 281, 0, 215, 216, 217, 218,
	0, 0, 219, 220, 221, 222, 0, 223, 0, 282,
	224, 225, 226, 283, 284, 89, 0, 227, 0, 0,
	0, 0, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 95, 96, 97, 234, 235, 236,
	237, 98, 238, 239, 0, 99, 240, 241, 100, 0,
	0, 242, 243, 244, 0, 101, 245, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 288, 113, 246, 114, 247, 248, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 249, 120, 121, 122, 250, 251, 0, 0, 0,
	123, 124, 252, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 253, 0, 254, 0, 128, 129, 130, 131,
	849, 256, 0, 0, 135, 0, 132, 0, 0, 133,
	257, 134, 258, 259, 260, 0, 261, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 262, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 263, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 264, 153, 265, 154, 155, 0, 156, 0, 540,
	157, 0, 0, 158, 266, 0, 159, 0, 267, 160,
	161, 162, 163, 0, 268, 164, 269, 165, 0, 166,
	167, 168, 169, 270, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 271, 186, 0, 190, 191, 192, 193,
	0, 272, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 273, 274, 200, 0, 206, 201, 202, 189,
	203, 205, 275, 204, 276, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 277, 278, 279, 0, 0, 213,
	214, 280, 281, 0, 215, 216, 217, 218, 0, 0,
	219, 220, 221, 222, 0, 223, 0, 282, 224, 225,
	226, 283, 284, 89, 0, 227, 0, 0, 0, 0,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 92,
	93, 596, 94, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 95, 96, 97, 234, 235, 236, 237, 98,
	238, 239, 0, 99, 240, 241, 100, 0, 0, 242,
	243, 244, 0, 101, 245, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 288,
	113, 246, 114, 247, 248, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 249,
	120, 121, 122, 250, 251, 0, 0, 0, 123, 124,
	252, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	253, 0, 254, 0, 128, 129, 130, 131, 255, 256,
	0, 0, 135, 0, 132, 0, 0, 133, 257, 134,
	258, 259, 260, 0, 261, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 262, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 263,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 264,
	153, 265, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 266, 0, 159, 0, 267, 160, 161, 162,
	163, 0, 268, 164, 269, 165, 0, 166, 167, 168,
	169, 270, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 271, 186, 0, 190, 191, 192, 193, 0, 272,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	273, 274, 200, 0, 206, 201, 202, 189, 203, 205,
	275, 204, 276, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 277, 278, 279, 0, 0, 213, 214, 280,
	281, 0, 215, 216, 217, 218, 0, 0, 219, 220,
	221, 222, 0, 223, 0, 282, 224, 225, 226, 283,
	284, 89, 0, 227, 0, 0, 0, 0, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	95, 96, 97, 234, 235, 236, 237, 98, 238, 239,
	0, 99, 240, 241, 100, 0, 0, 242, 243, 244,
	0, 101, 245, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 288, 113, 246,
	114, 247, 248, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 249, 120, 121,
	122, 250, 251, 0, 0, 0, 123, 124, 252, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 253, 0,
	254, 0, 128, 129, 130, 131, 552, 256, 0, 0,
	135, 0, 132, 0, 0, 133, 257, 134, 258, 259,
	260, 0, 261, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 262, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 263, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 264, 153, 265,
	154, 155, 0, 156, 0, 540, 157, 0, 0, 158,
	266, 0, 159, 0, 267, 160, 161, 162, 163, 0,
	268, 164, 269, 165, 0, 166, 167, 168, 169, 270,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 271,
	186, 0, 190, 191, 192, 193, 0, 272, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 273, 274,
	200, 0, 206, 201, 202, 189, 203, 205, 275, 204,
	276, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	277, 278, 279, 0, 0, 213, 214, 280, 281, 0,
	215, 216, 217, 218, 0, 0, 219, 220, 221, 222,
	0, 223, 0, 282, 224, 225, 226, 283, 284, 89,
	0, 227, 0, 0, 0, 0, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 95, 96,
	97, 234, 235, 236, 237, 98, 238, 239, 0, 99,
	240, 241, 100, 0, 0, 242, 243, 244, 0, 101,
	245, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 288, 113, 246, 114, 247,
	248, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 249, 120, 121, 122, 250,
	251, 0, 0, 0, 123, 124, 252, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 253, 0, 254, 0,
	128, 129, 130, 131, 545, 256, 0, 0, 135, 0,
	132, 0, 0, 133, 257, 134, 258, 259, 260, 0,
	261, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 262, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 263, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 264, 153, 265, 154, 155,
	0, 156, 0, 540, 157, 0, 0, 158, 266, 0,
	159, 0, 267, 160, 161, 162, 163, 0, 268, 164,
	269, 165, 0, 166, 167, 168, 169, 270, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 271, 186, 0,
	190, 191, 192, 193, 0, 272, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 273, 274, 200, 0,
	206, 201, 202, 189, 203, 205, 275, 204, 276, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 277, 278,
	279, 0, 0, 213, 214, 280, 281, 0, 215, 216,
	217, 218, 0, 0, 219, 220, 221, 222, 0, 223,
	0, 282, 224, 225, 226, 283, 284, 89, 0, 227,
	0, 0, 0, 0, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 92, 93, 419, 94, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 95, 96, 97, 234,
	235, 236, 237, 98, 238, 239, 0, 99, 240, 241,
	100, 0, 0, 242, 243, 244, 0, 101, 245, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 288, 113, 246, 114, 247, 248, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 249, 120, 121, 122, 250, 251, 0,
	0, 0, 123, 124, 252, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 253, 0, 254, 0, 128, 129,
	130, 131, 255, 256, 0, 0, 135, 0, 132, 0,
	0, 133, 257, 134, 258, 259, 260, 0, 261, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 262,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 263, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 264, 153, 265, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 266, 0, 159, 0,
	267, 160, 161, 162, 163, 0, 268, 164, 269, 418,
	0, 166, 167, 168, 169, 270, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 271, 186, 0, 190, 191,
	192, 193, 0, 272, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 273, 274, 200, 0, 206, 201,
	202, 189, 203, 205, 275, 204, 276, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 277, 278, 279, 0,
	0, 213, 214, 280, 281, 0, 215, 216, 217, 218,
	0, 0, 219, 220, 221, 222, 0, 223, 0, 282,
	224, 225, 226, 283, 284, 89, 0, 227, 0, 0,
	0, 0, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 95, 96, 97, 234, 235, 236,
	237, 98, 238, 239, 0, 99, 240, 241, 100, 0,
	0, 242, 243, 244, 0, 101, 245, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 288, 113, 246, 114, 247, 248, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 249, 120, 121, 122, 250, 251, 0, 0, 0,
	123, 124, 252, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 253, 0, 254, 0, 128, 129, 130, 131,
	255, 256, 0, 0, 135, 0, 132, 0, 0, 133,
	257, 134, 258, 259, 260, 0, 261, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 262, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 263, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 264, 153, 265, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 266, 0, 159, 0, 267, 160,
	161, 162, 163, 0, 268, 164, 269, 165, 0, 166,
	167, 168, 169, 270, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 271, 186, 0, 190, 191, 192, 193,
	0, 272, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 273, 274, 200, 0, 206, 201, 202, 189,
	203, 205, 275, 204, 276, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 277, 278, 279, 0, 0, 213,
	214, 280, 281, 0, 215, 216, 217, 218, 0, 0,
	219, 220, 221, 222, 0, 223, 0, 282, 224, 225,
	226, 283, 284, 89, 0, 227, 0, 0, 0, 0,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 95, 96, 97, 234, 235, 236, 237, 98,
	238, 239, 0, 99, 240, 241, 100, 0, 0, 242,
	243, 244, 0, 101, 245, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 288,
	113, 246, 114, 247, 248, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 249,
	120, 121, 122, 250, 251, 0, 0, 0, 123, 124,
	252, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	253, 0, 254, 0, 128, 129, 130, 131, 1401, 256,
	0, 0, 135, 0, 132, 0, 0, 133, 257, 134,
	258, 259, 260, 0, 261, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 262, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 263,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 264,
	153, 265, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 266, 0, 159, 0, 267, 160, 161, 162,
	163, 0, 268, 164, 269, 165, 0, 166, 167, 168,
	169, 270, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 271, 186, 0, 190, 191, 192, 193, 0, 272,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	273, 274, 200, 0, 206, 201, 202, 189, 203, 205,
	275, 204, 276, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 277, 278, 279, 0, 0, 213, 214, 280,
	281, 0, 215, 216, 217, 218, 0, 0, 219, 220,
	221, 222, 0, 223, 0, 282, 224, 225, 226, 283,
	284, 89, 0, 227, 0, 0, 0, 0, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	95, 96, 97, 234, 235, 236, 237, 98, 238, 239,
	0, 99, 240, 241, 100, 0, 0, 242, 243, 244,
	0, 101, 245, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 288, 113, 246,
	114, 247, 248, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 249, 120, 121,
	122, 250, 251, 0, 0, 0, 123, 124, 252, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 253, 0,
	254, 0, 128, 129, 130, 131, 1399, 256, 0, 0,
	135, 0, 132, 0, 0, 133, 257, 134, 258, 259,
	260, 0, 261, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 262, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 263, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 264, 153, 265,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	266, 0, 159, 0, 267, 160, 161, 162, 163, 0,
	268, 164, 269, 165, 0, 166, 167, 168, 169, 270,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 271,
	186, 0, 190, 191, 192, 193, 0, 272, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 273, 274,
	200, 0, 206, 201, 202, 189, 203, 205, 275, 204,
	276, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	277, 278, 279, 0, 0, 213, 214, 280, 281, 0,
	215, 216, 217, 218, 0, 0, 219, 220, 221, 222,
	0, 223, 0, 282, 224, 225, 226, 283, 284, 89,
	0, 227, 0, 0, 0, 0, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 95, 96,
	97, 234, 235, 236, 237, 98, 238, 239, 0, 99,
	240, 241, 100, 0, 0, 242, 243, 244, 0, 101,
	245, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 288, 113, 246, 114, 247,
	248, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 249, 120, 121, 122, 250,
	251, 0, 0, 0, 123, 124, 252, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 253, 0, 254, 0,
	128, 129, 130, 131, 1388, 256, 0, 0, 135, 0,
	132, 0, 0, 133, 257, 134, 258, 259, 260, 0,
	261, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 262, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 263, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 264, 153, 265, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 266, 0,
	159, 0, 267, 160, 161, 162, 163, 0, 268, 164,
	269, 165, 0, 166, 167, 168, 169, 270, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 271, 186, 0,
	190, 191, 192, 193, 0, 272, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 273, 274, 200, 0,
	206, 201, 202, 189, 203, 205, 275, 204, 276, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 277, 278,
	279, 0, 0, 213, 214, 280, 281, 0, 215, 216,
	217, 218, 0, 0, 219, 220, 221, 222, 0, 223,
	0, 282, 224, 225, 226, 283, 284, 89, 0, 227,
	0, 0, 0, 0, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 95, 96, 97, 234,
	235, 236, 237, 98, 238, 239, 0, 99, 240, 241,
	100, 0, 0, 242, 243, 244, 0, 101, 245, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 288, 113, 246, 114, 247, 248, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 249, 120, 121, 122, 250, 251, 0,
	0, 0, 123, 124, 252, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 253, 0, 254, 0, 128, 129,
	130, 131, 962, 256, 0, 0, 135, 0, 132, 0,
	0, 133, 257, 134, 258, 259, 260, 0, 261, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 262,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 263, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 264, 153, 265, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 266, 0, 159, 0,
	267, 160, 161, 162, 163, 0, 268, 164, 269, 165,
	0, 166, 167, 168, 169, 270, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 271, 186, 0, 190, 191,
	192, 193, 0, 272, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 273, 274, 200, 0, 206, 201,
	202, 189, 203, 205, 275, 204, 276, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 277, 278, 279, 0,
	0, 213, 214, 280, 281, 0, 215, 216, 217, 218,
	0, 0, 219, 220, 221, 222, 0, 223, 0, 282,
	224, 225, 226, 283, 284, 89, 0, 227, 0, 0,
	0, 0, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 95, 96, 97, 234, 235, 236,
	237, 98, 238, 239, 0, 99, 240, 241, 100, 0,
	0, 242, 243, 244, 0, 101, 245, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 288, 113, 246, 114, 247, 248, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 249, 120, 121, 122, 250, 251, 0, 0, 0,
	123, 124, 252, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 253, 0, 254, 0, 128, 129, 130, 131,
	255, 256, 0, 0, 135, 0, 132, 0, 0, 133,
	257, 134, 258, 259, 260, 0, 261, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 262, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 263, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 264, 153, 265, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 266, 0, 159, 0, 267, 160,
	161, 162, 163, 0, 268, 164, 269, 165, 0, 166,
	167, 168, 169, 270, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 271, 186, 0, 433, 191, 192, 193,
	0, 272, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 273, 274, 200, 0, 206, 201, 202, 189,
	203, 205, 275, 204, 276, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 277, 278, 279, 0, 0, 213,
	214, 280, 281, 0, 215, 216, 217, 218, 0, 0,
	219, 220, 221, 222, 0, 223, 0, 282, 224, 225,
	226, 283, 284, 89, 0, 227, 0, 0, 0, 0,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 233, 0, 833,
	0, 0, 95, 96, 97, 234, 235, 236, 237, 98,
	238, 239, 0, 99, 240, 241, 100, 0, 0, 242,
	243, 244, 0, 101, 245, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 288,
	113, 246, 114, 247, 248, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 249,
	120, 121, 122, 250, 251, 0, 0, 0, 123, 124,
	252, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	253, 0, 254, 0, 128, 129, 130, 131, 255, 256,
	0, 0, 135, 0, 132, 0, 0, 133, 257, 134,
	258, 259, 260, 0, 261, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 262, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 263,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 264,
	153, 265, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 266, 0, 159, 0, 267, 160, 161, 162,
	163, 0, 268, 164, 269, 165, 0, 166, 167, 168,
	169, 270, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 271, 186, 0, 190, 191, 192, 193, 0, 272,
	194, 195, 196, 0, 0, 187, 188, 198, 0, 199,
	273, 274, 200, 0, 206, 201, 202, 189, 203, 205,
	275, 204, 276, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 277, 278, 279, 0, 0, 213, 214, 280,
	281, 0, 215, 216, 217, 218, 0, 0, 219, 220,
	221, 222, 0, 223, 0, 282, 224, 225, 226, 283,
	284, 89, 0, 227, 0, 0, 0, 0, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	95, 96, 97, 234, 235, 236, 237, 98, 238, 239,
	0, 99, 240, 241, 100, 0, 0, 242, 243, 244,
	0, 101, 245, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 288, 113, 246,
	114, 247, 248, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 249, 120, 121,
	122, 250, 251, 0, 0, 0, 123, 124, 252, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 253, 0,
	254, 0, 128, 129, 130, 131, 667, 256, 0, 0,
	135, 0, 132, 0, 0, 133, 257, 134, 258, 259,
	260, 0, 261, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 262, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 263, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 264, 153, 265,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	266, 0, 159, 0, 267, 160, 161, 162, 163, 0,
	268, 164, 269, 165, 0, 166, 167, 168, 169, 270,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 271,
	186, 0, 190, 191, 192, 193, 0, 272, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 273, 274,
	200, 0, 206, 201, 202, 189, 203, 205, 275, 204,
	276, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	277, 278, 279, 0, 0, 213, 214, 280, 281, 0,
	215, 216, 217, 218, 0, 0, 219, 220, 221, 222,
	0, 223, 0, 282, 224, 225, 226, 283, 284, 89,
	0, 227, 0, 0, 0, 0, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 95, 96,
	97, 234, 235, 236, 237, 98, 238, 239, 0, 99,
	240, 241, 100, 0, 0, 242, 243, 244, 0, 101,
	245, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 288, 113, 246, 114, 247,
	248, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 249, 120, 121, 122, 250,
	251, 0, 0, 0, 123, 124, 252, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 253, 0, 254, 0,
	128, 129, 130, 131, 662, 256, 0, 0, 135, 0,
	132, 0, 0, 133, 257, 134, 258, 259, 260, 0,
	261, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 262, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 263, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 264, 153, 265, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 266, 0,
	159, 0, 267, 160, 161, 162, 163, 0, 268, 164,
	269, 165, 0, 166, 167, 168, 169, 270, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 271, 186, 0,
	190, 191, 192, 193, 0, 272, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 273, 274, 200, 0,
	206, 201, 202, 189, 203, 205, 275, 204, 276, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 277, 278,
	279, 0, 0, 213, 214, 280, 281, 0, 215, 216,
	217, 218, 0, 0, 219, 220, 221, 222, 0, 223,
	0, 282, 224, 225, 226, 283, 284, 89, 0, 227,
	0, 0, 0, 0, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 95, 96, 97, 234,
	235, 236, 237, 98, 238, 239, 0, 99, 240, 241,
	100, 0, 0, 242, 243, 602, 0, 101, 245, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 288, 113, 246, 114, 247, 248, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 249, 120, 121, 122, 250, 251, 0,
	0, 0, 123, 124, 252, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 253, 0, 254, 0, 128, 129,
	130, 131, 255, 256, 0, 0, 135, 0, 132, 0,
	0, 133, 257, 134, 258, 259, 260, 0, 261, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 262,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 263, 447, 0, 149, 150, 152, 151,
	0, 0, 0, 264, 153, 265, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 266, 0, 159, 0,
	267, 160, 161, 162, 163, 0, 268, 164, 269, 165,
	0, 166, 167, 168, 169, 270, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 271, 186, 0, 190, 191,
	192, 193, 0, 272, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 273, 274, 200, 0, 206, 201,
	202, 189, 203, 205, 275, 204, 276, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 444, 278, 279, 0,
	0, 213, 440, 280, 281, 0, 215, 216, 217, 218,
	0, 0, 219, 220, 221, 222, 0, 223, 0, 282,
	224, 225, 226, 283, 284, 89, 0, 227, 0, 0,
	0, 0, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 95, 96, 97, 234, 235, 236,
	237, 98, 238, 239, 0, 99, 240, 241, 100, 0,
	0, 242, 243, 244, 0, 101, 245, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 288, 113, 246, 114, 247, 248, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 249, 120, 121, 122, 250, 251, 0, 0, 0,
	123, 124, 252, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 253, 0, 254, 0, 128, 129, 130, 131,
	255, 256, 0, 0, 135, 0, 132, 0, 0, 133,
	257, 134, 258, 259, 260, 0, 261, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 262, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 263, 447, 0, 149, 150, 152, 151, 0, 0,
	0, 264, 153, 265, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 266, 0, 159, 0, 267, 160,
	161, 162, 163, 0, 268, 164, 269, 165, 0, 166,
	167, 168, 169, 270, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 271, 186, 0, 190, 191, 192, 193,
	0, 272, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 273, 274, 200, 0, 206, 201, 202, 189,
	203, 205, 275, 204, 276, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 444, 278, 279, 0, 0, 213,
	440, 280, 281, 0, 215, 216, 217, 218, 0, 0,
	219, 220, 221, 222, 0, 223, 0, 282, 224, 225,
	226, 283, 284, 89, 0, 227, 0, 0, 0, 0,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 95, 96, 97, 234, 235, 236, 237, 98,
	238, 239, 0, 99, 240, 241, 100, 0, 0, 242,
	243, 244, 0, 101, 245, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 288,
	113, 246, 114, 247, 248, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 249,
	120, 121, 122, 250, 251, 0, 0, 0, 123, 124,
	252, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	253, 0, 254, 0, 128, 129, 130, 131, 584, 256,
	0, 0, 135, 0, 132, 0, 0, 133, 257, 134,
	258, 259, 260, 0, 261, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 262, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 263,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 264,
	153, 265, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 266, 0, 159, 0, 267, 160, 161, 162,
	163, 0, 268, 164, 269, 165, 0, 166, 167, 168,
	169, 270, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 271, 186, 0, 190, 191, 192, 193, 0, 272,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	273, 274, 200, 0, 206, 201, 202, 189, 203, 205,
	275, 204, 276, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 277, 278, 279, 0, 0, 213, 214, 280,
	281, 0, 215, 216, 217, 218, 0, 0, 219, 220,
	221, 222, 0, 223, 0, 282, 224, 225, 226, 283,
	284, 89, 0, 227, 0, 0, 0, 0, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	95, 96, 97, 234, 235, 236, 237, 98, 238, 239,
	0, 99, 240, 241, 100, 0, 0, 242, 243, 244,
	0, 101, 245, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 288, 113, 246,
	114, 247, 248, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 249, 120, 121,
	122, 250, 251, 0, 0, 0, 123, 124, 252, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 253, 0,
	254, 0, 128, 129, 130, 131, 582, 256, 0, 0,
	135, 0, 132, 0, 0, 133, 257, 134, 258, 259,
	260, 0, 261, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 262, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 263, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 264, 153, 265,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	266, 0, 159, 0, 267, 160, 161, 162, 163, 0,
	268, 164, 269, 165, 0, 166, 167, 168, 169, 270,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 271,
	186, 0, 190, 191, 192, 193, 0, 272, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 273, 274,
	200, 0, 206, 201, 202, 189, 203, 205, 275, 204,
	276, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	277, 278, 279, 0, 0, 213, 214, 280, 281, 0,
	215, 216, 217, 218, 0, 0, 219, 220, 221, 222,
	0, 223, 0, 282, 224, 225, 226, 283, 284, 89,
	0, 227, 0, 0, 0, 0, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 95, 96,
	97, 234, 235, 236, 237, 98, 238, 239, 0, 99,
	240, 241, 100, 0, 0, 242, 243, 244, 0, 101,
	245, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 288, 113, 246, 114, 247,
	248, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 249, 120, 121, 122, 250,
	251, 0, 0, 0, 123, 124, 252, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 253, 0, 254, 0,
	128, 129, 130, 131, 579, 256, 0, 0, 135, 0,
	132, 0, 0, 133, 257, 134, 258, 259, 260, 0,
	261, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 262, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 263, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 264, 153, 265, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 266, 0,
	159, 0, 267, 160, 161, 162, 163, 0, 268, 164,
	269, 165, 0, 166, 167, 168, 169, 270, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 271, 186, 0,
	190, 191, 192, 193, 0, 272, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 273, 274, 200, 0,
	206, 201, 202, 189, 203, 205, 275, 204, 276, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 277, 278,
	279, 0, 0, 213, 214, 280, 281, 0, 215, 216,
	217, 218, 0, 0, 219, 220, 221, 222, 0, 223,
	0, 282, 224, 225, 226, 283, 284, 89, 0, 227,
	0, 0, 0, 0, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 95, 96, 97, 234,
	235, 236, 237, 98, 238, 239, 0, 99, 240, 241,
	100, 0, 0, 242, 243, 244, 0, 101, 245, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 288, 113, 246, 114, 247, 248, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 249, 120, 121, 122, 250, 251, 0,
	0, 0, 123, 124, 252, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 253, 0, 254, 0, 128, 129,
	130, 131, 576, 256, 0, 0, 135, 0, 132, 0,
	0, 133, 257, 134, 258, 259, 260, 0, 261, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 262,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 263, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 264, 153, 265, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 266, 0, 159, 0,
	267, 160, 161, 162, 163, 0, 268, 164, 269, 165,
	0, 166, 167, 168, 169, 270, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 271, 186, 0, 190, 191,
	192, 193, 0, 272, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 273, 274, 200, 0, 206, 201,
	202, 189, 203, 205, 275, 204, 276, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 277, 278, 279, 0,
	0, 213, 214, 280, 281, 0, 215, 216, 217, 218,
	0, 0, 219, 220, 221, 222, 0, 223, 0, 282,
	224, 225, 226, 283, 284, 89, 0, 227, 0, 0,
	0, 0, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 95, 96, 97, 234, 235, 236,
	237, 98, 238, 239, 0, 99, 240, 241, 100, 0,
	0, 242, 243, 244, 0, 101, 245, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 288, 113, 246, 114, 247, 248, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 249, 120, 121, 122, 250, 251, 0, 0, 0,
	123, 124, 252, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 253, 0, 254, 0, 128, 129, 130, 131,
	574, 256, 0, 0, 135, 0, 132, 0, 0, 133,
	257, 134, 258, 259, 260, 0, 261, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 262, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 263, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 264, 153, 265, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 266, 0, 159, 0, 267, 160,
	161, 162, 163, 0, 268, 164, 269, 165, 0, 166,
	167, 168, 169, 270, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 271, 186, 0, 190, 191, 192, 193,
	0, 272, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 273, 274, 200, 0, 206, 201, 202, 189,
	203, 205, 275, 204, 276, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 277, 278, 279, 0, 0, 213,
	214, 280, 281, 0, 215, 216, 217, 218, 0, 0,
	219, 220, 221, 222, 0, 223, 0, 282, 224, 225,
	226, 283, 284, 89, 0, 227, 0, 0, 0, 0,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 95, 96, 97, 234, 235, 236, 237, 98,
	238, 239, 0, 99, 240, 241, 100, 0, 0, 242,
	243, 244, 0, 101, 245, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 288,
	113, 246, 114, 247, 248, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 249,
	120, 121, 122, 250, 251, 0, 0, 0, 123, 124,
	252, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	253, 0, 254, 0, 128, 129, 130, 131, 548, 256,
	0, 0, 135, 0, 132, 0, 0, 133, 257, 134,
	258, 259, 260, 0, 261, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 262, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 263,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 264,
	153, 265, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 266, 0, 159, 0, 267, 160, 161, 162,
	163, 0, 268, 164, 269, 165, 0, 166, 167, 168,
	169, 270, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 271, 186, 0, 190, 191, 192, 193, 0, 272,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	273, 274, 200, 0, 206, 201, 202, 189, 203, 205,
	275, 204, 276, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 277, 278, 279, 0, 0, 213, 214, 280,
	281, 0, 215, 216, 217, 218, 0, 0, 219, 220,
	221, 222, 0, 223, 0, 282, 224, 225, 226, 283,
	284, 89, 0, 227, 0, 0, 0, 0, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	95, 96, 97, 234, 235, 236, 237, 98, 238, 239,
	0, 99, 240, 241, 100, 0, 0, 242, 243, 244,
	0, 101, 245, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 288, 113, 246,
	114, 247, 248, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 249, 120, 121,
	122, 250, 251, 0, 0, 0, 123, 124, 252, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 253, 0,
	254, 0, 128, 129, 130, 131, 255, 256, 0, 0,
	135, 0, 132, 0, 0, 133, 257, 134, 258, 259,
	260, 0, 261, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 262, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 263, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 264, 153, 265,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	266, 0, 159, 0, 267, 160, 161, 162, 163, 0,
	268, 164, 269, 165, 0, 166, 167, 168, 169, 270,
	529, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 271,
	186, 0, 190, 191, 192, 193, 0, 272, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 273, 274,
	200, 0, 206, 201, 202, 189, 203, 205, 275, 204,
	276, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	277, 278, 279, 0, 0, 213, 214, 280, 281, 0,
	215, 216, 217, 218, 0, 0, 219, 220, 221, 222,
	0, 223, 0, 282, 224, 225, 226, 283, 284, 89,
	0, 227, 0, 0, 0, 0, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 95, 96,
	97, 234, 235, 236, 237, 98, 238, 239, 0, 99,
	240, 241, 100, 0, 0, 242, 243, 244, 0, 438,
	245, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 288, 113, 246, 114, 247,
	248, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 249, 120, 121, 122, 250,
	251, 0, 0, 0, 123, 124, 252, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 253, 0, 254, 0,
	128, 129, 130, 131, 255, 256, 0, 0, 135, 0,
	132, 0, 0, 133, 257, 134, 258, 259, 260, 0,
	261, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 262, 0, 141, 0, 0, 436, 0, 0, 143,
	0, 144, 145, 146, 148, 263, 447, 0, 149, 150,
	152, 151, 0, 0, 0, 264, 153, 265, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 266, 0,
	159, 0, 267, 160, 161, 162, 163, 0, 268, 164,
	269, 165, 0, 166, 167, 168, 169, 270, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 439, 186, 0,
	190, 191, 192, 193, 0, 272, 194, 437, 196, 0,
	197, 187, 188, 198, 0, 199, 273, 274, 200, 0,
	206, 201, 202, 189, 203, 205, 275, 204, 276, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 444, 278,
	279, 0, 0, 213, 440, 280, 281, 0, 215, 216,
	217, 218, 0, 0, 219, 220, 221, 222, 0, 223,
	0, 282, 224, 225, 226, 283, 284, 89, 0, 227,
	0, 0, 0, 0, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 95, 96, 97, 234,
	235, 236, 237, 98, 238, 239, 0, 99, 240, 241,
	100, 0, 0, 242, 243, 244, 0, 101, 245, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 288, 113, 246, 114, 247, 248, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 249, 120, 121, 122, 250, 251, 0,
	0, 0, 123, 124, 252, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 253, 0, 254, 0, 128, 129,
	130, 131, 255, 256, 0, 0, 135, 0, 132, 0,
	0, 133, 257, 134, 258, 259, 260, 0, 261, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 262,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 263, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 264, 153, 265, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 266, 0, 159, 0,
	267, 160, 161, 0, 163, 0, 268, 164, 269, 165,
	0, 166, 167, 0, 169, 270, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 271, 0, 0, 190, 191,
	192, 193, 0, 272, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 273, 274, 200, 0, 206, 201,
	202, 189, 203, 205, 275, 204, 276, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 277, 278, 279, 0,
	0, 213, 214, 280, 281, 0, 215, 216, 217, 218,
	0, 0, 219, 220, 221, 222, 0, 223, 0, 282,
	224, 225, 226, 283, 284, 0, 0, 227, 0, 0,
	0, 0, 228, 229, 230, 231, 232, 989, 990, 0,
	1009, 1010, 1011, 1019, 1020, 1021, 0, 0, 0, 0,
	0, 0, 0, 1012, 0, 0, 0, 0, 0, 0,
	992, 989, 990, 1023, 1009, 1010, 1011, 1019, 1020, 1021,
	0, 0, 0, 0, 0, 1561, 1562, 1012, 1579, 1580,
	1581, 0, 0, 991, 992, 0, 0, 1023, 0, 1006,
	0, 1730, 0, 0, 0, 0, 0, 0, 989, 990,
	0, 1009, 1010, 1011, 1019, 1020, 1021, 991, 0, 0,
	0, 0, 0, 1006, 1012, 0, 0, 0, 0, 0,
	0, 992, 0, 0, 1023, 0, 0, 1576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 997,
	0, 0, 0, 0, 991, 0, 0, 0, 0, 0,
	1006, 0, 0, 0, 0, 0, 0, 0, 1016, 1024,
	0, 0, 0, 997, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1022, 0, 0, 1567, 0, 0,
	0, 0, 1016, 1024, 0, 0, 1014, 0, 0, 0,
	0, 0, 1007, 0, 0, 0, 0, 0, 1022, 0,
	997, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1014, 0, 1582, 0, 0, 0, 1007, 1013, 0, 1016,
	1024, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1577, 0, 0, 0, 0, 1022, 0, 0, 0, 0,
	0, 1013, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 1007, 0, 0, 0, 0, 0, 0,
	0, 1008, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1017, 0, 1013, 0,
	0, 0, 0, 0, 0, 1008, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1578,
	1017, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1008, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1017, 0, 0,
	0, 1015, 0, 0, 1003, 1004, 1005, 1018, 0, 1002,
	1000, 1001, 993, 994, 995, 996, 998, 999, 0, 0,
	0, 0, 2071, 0, 0, 1015, 0, 0, 1003, 1004,
	1005, 1018, 0, 1002, 1000, 1001, 993, 994, 995, 996,
	998, 999, 1573, 1574, 1575, 0, 2018, 1572, 1570, 1571,
	1563, 1564, 1565, 1566, 1568, 1569, 0, 0, 0, 0,
	0, 0, 1015, 0, 0, 1003, 1004, 1005, 1018, 0,
	1002, 1000, 1001, 993, 994, 995, 996, 998, 999, 0,
	0, 989, 990, 2013, 1009, 1010, 1011, 1019, 1020, 1021,
	0, 0, 0, 0, 0, 0, 0, 1012, 0, 0,
	0, 0, 0, 0, 992, 989, 990, 1023, 1009, 1010,
	1011, 1019, 1020, 1021, 0, 0, 0, 0, 0, 1561,
	1562, 1012, 1579, 1580, 1581, 0, 0, 991, 992, 0,
	0, 1023, 0, 1006, 0, 1729, 0, 0, 0, 0,
	0, 0, 989, 990, 0, 1009, 1010, 1011, 1019, 1020,
	1021, 991, 0, 0, 0, 0, 0, 1006, 1012, 0,
	0, 0, 0, 0, 0, 992, 0, 0, 1023, 0,
	0, 1576, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 997, 0, 0, 0, 0, 991, 0,
	0, 0, 0, 0, 1006, 0, 0, 0, 0, 0,
	0, 0, 1016, 1024, 0, 0, 0, 997, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1022, 0,
	0, 1567, 0, 0, 0, 0, 1016, 1024, 0, 0,
	1014, 0, 0, 0, 0, 0, 1007, 0, 0, 0,
	0, 0, 1022, 0, 997, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1014, 0, 1582, 0, 0, 0,
	1007, 1013, 0, 1016, 1024, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1577, 0, 0, 0, 0, 1022,
	0, 0, 0, 0, 0, 1013, 0, 0, 0, 0,
	0, 1014, 0, 0, 0, 0, 0, 1007, 0, 0,
	0, 0, 0, 0, 0, 1008, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1017, 0, 1013, 0, 0, 0, 0, 0, 0, 1008,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1578, 1017, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1008, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1017, 0, 0, 0, 1015, 0, 0, 1003, 1004,
	1005, 1018, 0, 1002, 1000, 1001, 993, 994, 995, 996,
	998, 999, 0, 0, 0, 0, 2009, 0, 0, 1015,
	0, 0, 1003, 1004, 1005, 1018, 0, 1002, 1000, 1001,
	993, 994, 995, 996, 998, 999, 1573, 1574, 1575, 0,
	1950, 1572, 1570, 1571, 1563, 1564, 1565, 1566, 1568, 1569,
	0, 0, 0, 0, 0, 0, 1015, 0, 0, 1003,
	1004, 1005, 1018, 0, 1002, 1000, 1001, 993, 994, 995,
	996, 998, 999, 0, 0, 989, 990, 1928, 1009, 1010,
	1011, 1019, 1020, 1021, 0, 0, 0, 0, 0, 0,
	0, 1012, 0, 0, 0, 0, 0, 0, 992, 989,
	990, 1023, 1009, 1010, 1011, 1019, 1020, 1021, 0, 0,
	0, 0, 0, 0, 0, 1012, 0, 0, 0, 0,
	0, 991, 992, 0, 0, 1023, 0, 1006, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 990, 0, 1009,
	1010, 1011, 1019, 1020, 1021, 991, 0, 0, 0, 0,
	0, 1006, 1012, 0, 0, 0, 0, 0, 0, 992,
	0, 0, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 997, 0, 0,
	0, 0, 991, 0, 0, 0, 0, 0, 1006, 0,
	0, 0, 0, 0, 0, 0, 1016, 1024, 0, 0,
	0, 997, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1022, 0, 0, 0, 0, 0, 0, 0,
	1016, 1024, 0, 0, 1014, 0, 0, 0, 0, 0,
	1007, 0, 0, 0, 0, 0, 1022, 0, 997, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1014, 0,
	0, 0, 0, 0, 1007, 1013, 0, 1016, 1024, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1022, 0, 0, 0, 0, 0, 1013,
	0, 0, 0, 0, 0, 1014, 0, 0, 0, 0,
	0, 1007, 0, 0, 0, 0, 0, 0, 0, 1008,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1017, 0, 1013, 0, 0, 0,
	0, 0, 0, 1008, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1017, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1008, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1017, 0, 0, 0, 1015,
	0, 0, 1003, 1004, 1005, 1018, 0, 1002, 1000, 1001,
	993, 994, 995, 996, 998, 999, 0, 0, 0, 0,
	1927, 0, 0, 1015, 0, 0, 1003, 1004, 1005, 1018,
	0, 1002, 1000, 1001, 993, 994, 995, 996, 998, 999,
	0, 0, 0, 0, 1819, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1015, 0, 0, 1003, 1004, 1005, 1018, 0, 1002, 1000,
	1001, 993, 994, 995, 996, 998, 999, 0, 0, 989,
	990, 1753, 1009, 1010, 1011, 1019, 1020, 1021, 0, 0,
	0, 0, 0, 0, 0, 1012, 0, 0, 0, 0,
	0, 0, 992, 989, 990, 1023, 1009, 1010, 1011, 1019,
	1020, 1021, 0, 0, 0, 0, 0, 0, 0, 1012,
	0, 0, 0, 0, 0, 991, 992, 0, 0, 1023,
	0, 1006, 0, 0, 0, 0, 0, 0, 0, 0,
	989, 990, 0, 1009, 1010, 1011, 1019, 1020, 1021, 991,
	0, 0, 0, 0, 0, 1006, 1012, 0, 0, 0,
	0, 0, 0, 992, 0, 0, 1023, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 997, 0, 0, 0, 0, 991, 0, 0, 0,
	0, 0, 1006, 0, 0, 0, 0, 0, 0, 0,
	1016, 1024, 0, 0, 0, 997, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1022, 0, 0, 0,
	0, 0, 0, 0, 1016, 1024, 0, 0, 1014, 0,
	0, 0, 0, 0, 1007, 0, 0, 0, 0, 0,
	1022, 0, 997, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1014, 0, 0, 0, 0, 0, 1007, 1013,
	0, 1016, 1024, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1022, 0, 0,
	0, 0, 0, 1013, 0, 0, 0, 0, 0, 1014,
	0, 0, 0, 0, 0, 1007, 0, 0, 0, 0,
	0, 0, 0, 1008, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1017, 0,
	1013, 0, 0, 0, 0, 0, 0, 1008, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1017, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1008, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1017,
	0, 0, 0, 1015, 0, 0, 1003, 1004, 1005, 1018,
	0, 1002, 1000, 1001, 993, 994, 995, 996, 998, 999,
	0, 0, 0, 0, 1737, 0, 0, 1015, 0, 0,
	1003, 1004, 1005, 1018, 0, 1002, 1000, 1001, 993, 994,
	995, 996, 998, 999, 0, 0, 0, 0, 1692, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1015, 0, 0, 1003, 1004, 1005,
	1018, 0, 1002, 1000, 1001, 993, 994, 995, 996, 998,
	999, 0, 0, 989, 990, 1309, 1009, 1010, 1011, 1019,
	1020, 1021, 0, 0, 0, 0, 0, 0, 0, 1012,
	0, 0, 0, 0, 0, 0, 992, 989, 990, 1023,
	1009, 1010, 1011, 1019, 1020, 1021, 0, 0, 0, 0,
	0, 0, 0, 1012, 0, 0, 0, 0, 0, 991,
	992, 0, 0, 1023, 0, 1006, 0, 0, 0, 0,
	0, 0, 0, 0, 989, 990, 0, 1009, 1010, 1011,
	1019, 1020, 1021, 991, 0, 0, 0, 0, 0, 1006,
	1012, 0, 0, 0, 0, 0, 0, 992, 0, 0,
	1023, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 997, 0, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 1006, 0, 0, 0,
	0, 0, 0, 0, 1016, 1024, 0, 0, 0, 997,
	2153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1022, 0, 0, 0, 0, 0, 0, 0, 1016, 1024,
	0, 0, 1014, 0, 0, 0, 0, 0, 1007, 0,
	0, 0, 0, 0, 1022, 0, 997, 0, 1593, 0,
	0, 1592, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 0, 1007, 1013, 0, 1016, 1024, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1022, 0, 0, 0, 0, 0, 1013, 0, 0,
	0, 0, 0, 1014, 0, 0, 0, 0, 0, 1007,
	0, 2152, 0, 0, 0, 0, 0, 1008, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1017, 0, 1013, 0, 0, 0, 0, 0,
	0, 1008, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1017, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1008, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1017, 0, 0, 0, 1015, 0, 0,
	1003, 1004, 1005, 1018, 0, 1002, 1000, 1001, 993, 994,
	995, 996, 998, 999, 0, 0, 1528, 0, 0, 0,
	0, 1015, 0, 0, 1003, 1004, 1005, 1018, 0, 1002,
	1000, 1001, 993, 994, 995, 996, 998, 999, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1015, 0,
	0, 1003, 1004, 1005, 1018, 0, 1002, 1000, 1001, 993,
	994, 995, 996, 998, 999, 989, 990, 0, 1009, 1010,
	1011, 1019, 1020, 1021, 0, 0, 0, 0, 0, 0,
	0, 1012, 0, 1027, 0, 0, 1224, 0, 992, 989,
	990, 1023, 1009, 1010, 1011, 1019, 1020, 1021, 0, 0,
	0, 0, 0, 0, 0, 1012, 0, 0, 0, 1026,
	0, 991, 992, 0, 0, 1023, 0, 1006, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 990, 0, 1009,
	1010, 1011, 1019, 1020, 1021, 991, 0, 0, 0, 0,
	0, 1006, 1012, 0, 0, 1225, 0, 0, 0, 992,
	0, 0, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 997, 0, 0,
	0, 0, 991, 0, 0, 0, 0, 0, 1006, 0,
	0, 0, 0, 0, 0, 0, 1016, 1024, 0, 0,
	0, 997, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1022, 0, 0, 0, 0, 0, 0, 0,
	1016, 1024, 0, 0, 1014, 0, 0, 0, 0, 0,
	1007, 0, 0, 0, 0, 0, 1022, 0, 997, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1014, 0,
	0, 0, 0, 0, 1007, 1013, 0, 1016, 1024, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1022, 0, 0, 0, 0, 0, 1013,
	0, 0, 0, 0, 0, 1014, 0, 0, 0, 0,
	0, 1007, 0, 0, 0, 0, 0, 0, 0, 1008,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1017, 0, 1013, 524, 0, 0,
	0, 0, 0, 1008, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1017, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1008, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1017, 0, 0, 0, 1015,
	0, 0, 1003, 1004, 1005, 1018, 0, 1002, 1000, 1001,
	993, 994, 995, 996, 998, 999, 0, 0, 0, 0,
	0, 0, 0, 1015, 0, 0, 1003, 1004, 1005, 1018,
	0, 1002, 1000, 1001, 993, 994, 995, 996, 998, 999,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1015, 0, 0, 1003, 1004, 1005, 1018, 0, 1002, 1000,
	1001, 993, 994, 995, 996, 998, 999, 989, 990, 0,
	1009, 1010, 1011, 1019, 1020, 1021, 0, 0, 0, 0,
	0, 0, 0, 1012, 0, 0, 0, 0, 0, 0,
	992, 989, 990, 1023, 1009, 1010, 1011, 1019, 1020, 1021,
	0, 0, 0, 0, 0, 0, 0, 1012, 0, 0,
	0, 0, 0, 991, 992, 0, 0, 1023, 0, 1006,
	0, 0, 0, 0, 0, 0, 0, 0, 989, 990,
	0, 1009, 1010, 1011, 1019, 1020, 1021, 991, 0, 0,
	0, 0, 0, 1006, 1012, 0, 0, 0, 1594, 0,
	0, 992, 0, 0, 1023, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 997,
	0, 0, 0, 0, 991, 0, 0, 0, 0, 0,
	1006, 0, 0, 0, 0, 0, 0, 0, 1016, 1024,
	0, 0, 0, 997, 0, 0, 0, 0, 1599, 0,
	0, 0, 0, 0, 1022, 0, 0, 0, 0, 0,
	0, 0, 1016, 1024, 0, 0, 1014, 0, 0, 0,
	0, 0, 1007, 0, 0, 0, 0, 0, 1022, 0,
	997, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1014, 0, 0, 0, 0, 0, 1007, 1013, 0, 1016,
	1024, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1022, 0, 0, 0, 0,
	0, 1013, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 1007, 0, 0, 0, 0, 0, 0,
	0, 1008, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1017, 0, 1013, 0,
	0, 0, 0, 0, 0, 1008, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1741,
	1017, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1008, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1017, 0, 0,
	0, 1015, 0, 0, 1003, 1004, 1005, 1018, 0, 1002,
	1000, 1001, 993, 994, 995, 996, 998, 999, 0, 0,
	0, 0, 0, 0, 0, 1015, 0, 0, 1003, 1004,
	1005, 1018, 0, 1002, 1000, 1001, 993, 994, 995, 996,
	998, 999, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1015, 0, 0, 1003, 1004, 1005, 1018, 0,
	1002, 1000, 1001, 993, 994, 995, 996, 998, 999, 989,
	990, 0, 1009, 1010, 1011, 1019, 1020, 1021, 0, 0,
	0, 0, 0, 0, 0, 1012, 0, 0, 0, 0,
	0, 0, 992, 989, 990, 1023, 1009, 1010, 1011, 1019,
	1020, 1021, 0, 0, 0, 0, 0, 0, 0, 1012,
	0, 0, 0, 1552, 0, 991, 992, 0, 0, 1023,
	0, 1006, 0, 0, 0, 0, 0, 0, 0, 0,
	989, 990, 0, 1009, 1010, 1011, 1019, 1020, 1021, 991,
	0, 0, 0, 0, 0, 1006, 1012, 0, 0, 0,
	0, 0, 0, 992, 0, 0, 1023, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 997, 0, 0, 0, 0, 991, 0, 0, 0,
	0, 0, 1006, 0, 0, 0, 0, 0, 0, 0,
	1016, 1024, 0, 989, 990, 997, 1009, 1010, 1011, 1019,
	1020, 1021, 0, 0, 0, 0, 1022, 0, 0, 1012,
	0, 0, 0, 0, 1016, 1024, 992, 0, 1014, 1023,
	0, 0, 0, 0, 1007, 0, 0, 0, 0, 0,
	1022, 0, 997, 0, 0, 0, 0, 0, 0, 991,
	0, 0, 1014, 0, 0, 1006, 0, 0, 1007, 1013,
	0, 1016, 1024, 0, 0, 0, 0, 0, 0, 0,
	0, 1559, 0, 0, 0, 0, 0, 1022, 0, 0,
	0, 0, 0, 1013, 0, 0, 0, 0, 0, 1014,
	0, 0, 0, 0, 0, 1007, 0, 0, 0, 0,
	0, 0, 0, 1008, 0, 997, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1017, 0,
	1013, 0, 0, 0, 1016, 1024, 0, 1008, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1022, 0, 1017, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1014, 0, 0, 0, 0, 0, 1007, 0,
	0, 0, 0, 0, 1008, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1017,
	0, 0, 0, 1015, 0, 0, 1003, 1004, 1005, 1018,
	0, 1002, 1000, 1001, 993, 994, 995, 996, 998, 999,
	0, 0, 0, 0, 0, 0, 0, 1015, 0, 0,
	1003, 1004, 1005, 1018, 0, 1002, 1000, 1001, 993, 994,
	995, 996, 998, 999, 0, 0, 0, 1008, 32, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 33,
	57, 0, 1017, 0, 1015, 0, 0, 1003, 1004, 1005,
	1018, 0, 1002, 1000, 1001, 993, 994, 995, 996, 998,
	999, 0, 0, 0, 0, 59, 0, 0, 0, 0,
	0, 35, 0, 66, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 0, 0, 0, 0, 0, 43,
	0, 0, 60, 0, 0, 0, 47, 1015, 44, 0,
	1003, 1004, 1005, 1018, 0, 1002, 1000, 1001, 993, 994,
	995, 996, 998, 999, 49, 0, 0, 0, 0, 0,
	45, 0, 0, 0, 0, 989, 990, 0, 1009, 1010,
	1011, 1019, 1020, 1021, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 992, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 991, 0, 0, 0, 0, 0, 1006, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 63,
	34, 0, 0, 50, 0, 61, 0, 997, 0, 0,
	51, 0, 0, 0, 73, 0, 0, 0, 0, 0,
	54, 0, 0, 56, 0, 0, 1016, 1024, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 1022, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1014, 0, 0, 0, 64, 0,
	1007, 0, 0, 0, 0, 0, 0, 65, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 876, 868, 893, 860, 884, 883, 0,
	0, 862, 861, 0, 0, 0, 895, 894, 0, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1008,
	0, 0, 0, 0, 0, 0, 0, 0, 889, 0,
	881, 880, 0, 0, 1017, 0, 0, 0, 0, 879,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 871, 870, 872, 873, 874,
	0, 892, 0, 0, 0, 0, 0, 0, 0, 1015,
	0, 0, 1003, 1004, 1005, 1018, 0, 1002, 1000, 1001,
	993, 994, 995, 996, 998, 999, 864, 0, 0, 0,
	0, 0, 876, 868, 893, 860, 884, 883, 882, 0,
	862, 861, 869, 0, 0, 895, 894, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 0,
	0, 0, 1243, 1241, 1242, 1245, 1244, 889, 0, 881,
	880, 0, 0, 0, 0, 0, 0, 0, 879, 0,
	0, 0, 0, 0, 0, 0, 865, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 878, 875, 866, 0,
	0, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 863, 0, 0,
	890, 891, 0, 0, 871, 870, 872, 873, 874, 0,
	892, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 0, 0, 0, 0, 896, 0, 0,
	0, 0, 0, 0, 0, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 877, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 865, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 866, 0, 0,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 863, 0, 0, 890,
	891, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 0, 896,
}
var sqlPact = [...]int{

	30245, -1000, 30, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 699, 17089, 17089, 21261, -1000, -1000, -1000, -1000,
	-1000, -1000, 778, 715, 151, 5442, 21261, 21261, 20963, 1148,
	1148, 22751, -1000, -1000, 26625, -1000, 4046, 513, 514, 513,
	513, 510, 22751, 1116, 648, 14071, 687, 129, -1000, 835,
	-31, 26327, 21261, 1482, 26, 19175, 322, 30245, 20665, 26029,
	21261, 20367, 626, 24, 17685, 21261, -1000, 33, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1327, 392, 33, -1000, 1326,
	1222, 1219, 19175, 25731, 25433, 25135, 24837, 24539, -1000, 12829,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 792, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 341, 340, -1000, 20069, -1000,
	1010, -1000, 25, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1008, -1000, 21261, -1000, -1000, 24241, 23943, 695, 339,
	954, -1000, -1000, 594, 427, -1000, -1000, 13761, 37, -1000,
	-1000, -1000, -1000, 1341, 1500, 16791, 791, 1324, -1000, 1005,
	1323, 1318, 1317, 1316, 1312, -1000, 816, 523, -1000, 1311,
	425, 834, 495, -1000, 1310, 1308, 954, -1000, 954, -1000,
	-1000, -1000, 621, 22751, -1000, -1000, -1000, -1000, -1000, 19175,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1672, -1000, -1000, -1000, -1000, 1703, -1000, -1000, -1000, -1000,
	23645, 21261, 21261, 1241, 23347, -1000, 835, -1000, -1000, -1000,
	1142, 1480, 1480, 1480, 1528, 160, 159, 129, 22, 21261,
	-1000, 330, 22, 9643, 9643, -1000, -1000, 322, -1000, 383,
	16183, -1000, 8674, -1000, 921, 1380, 473, 811, 1379, -123,
	843, 832, 1376, 16791, 17685, 24, 16, -1000, -1000, -1000,
	5132, 16791, 677, 15276, 33, -1000, -1000, -1000, 19175, 21261,
	21261, 753, 23049, -1000, 1375, 122, 1373, -1000, 114, 1372,
	-1000, 114, 1371, 16, 1370, 14, -1000, -1000, 322, 19771,
	21261, 1611, 30665, -1000, 10936, -1000, -1000, 17089, 967, 17089,
	-1000, -1000, 1598, -1000, 21261, 10936, 23, -1000, -1000, -1000,
	-1000, 1174, 1152, 562, 13451, 13141, 1445, 915, -1000, -1000,
	-1000, 34, 5442, 149, 690, -1000, -1000, -1000, 19473, -1000,
	-1000, 21261, 1339, 17089, 21261, 21261, 21261, 21261, 21261, -1000,
	-1000, -1000, 21261, -1000, 1172, -1000, -1000, 21261, 21261, 783,
	645, -1000, 23, -1000, 22751, -1000, 124, -1000, -1000, -1000,
	-1000, 320, 1123, 434, 99, 22453, 434, 1107, -1000, 1142,
	-1000, 1017, 1201, 9967, 1204, 10936, 129, -1000, -1000, 129,
	129, 10936, -1000, -1000, 21261, 22, 1595, 21261, 105, -1000,
	29169, -1000, -1000, 10936, 10936, 10936, 10936, 10936, 931, 363,
	-1000, 319, 318, 6399, -1000, -1000, 1697, -1000, -1000, -1000,
	176, -1000, -1000, 10936, 33, -1000, -1000, -1000, -1000, 317,
	1715, -1000, 502, -1000, -1000, -1000, 432, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1338, 312, 310, -1000,
	-1000, -1000, -1000, 307, 297, 294, 293, 291, 290, 288,
	287, 283, 280, 279, 276, 275, 272, 270, 885, -1000,
	455, -1000, -1000, 455, 455, -1000, 261, 261, 265, -1000,
	-1000, -1000, -1000, 261, -1000, -1000, -1000, 420, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 269, 105, -1000, -1000, -1000,
	21261, 7, -1000, 29970, -1000, 13, 822, -1000, 18579, 1476,
	1460, 1461, 19175, 1542, -31, 1305, 1541, -31, 1304, 618,
	21261, 21261, 617, 616, 19175, 405, -1000, 21261, -1000, -1000,
	21, -1000, -1000, 1302, 0, -1000, -1000, 448, 116, 1589,
	116, 15579, -1000, 21261, 21261, -1000, 21261, -1000, -1000, 21261,
	-1000, 21261, 21261, -1000, 21261, 21261, 149, 17983, 759, 1368,
	800, 149, -5, -1000, 1616, -1000, -1000, -1000, -1000, 98,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 265, 885,
	261, 261, 261, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	420, -1000, -1000, 455, 455, 455, -1000, -1000, -6, 29970,
	614, -1000, 1299, 511, -1000, 437, -7, 954, 877, -1000,
	-1000, -1000, -1000, -1000, -1000, 20, -1000, -1000, 20, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1712, 5442,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 21261, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 21261, 21261,
	21261, -1000, -1000, 19175, 18281, 1581, 1366, 890, -1000, 1567,
	21261, 1000, 1098, -1000, 642, 1363, -1000, -1000, -1000, -1000,
	29970, -1000, 371, -1000, -1000, 29970, 806, 1230, -1000, 1230,
	19, -1000, 29145, -1000, 260, -11, 448, 9643, 14974, 30526,
	30665, 5442, 633, 10936, 10936, 10936, 10936, 10936, 10936, 10936,
	10936, 10936, 10936, 10936, 10936, 10936, 10936, 10936, 10936, 10936,
	10936, 10936, 10936, 10936, 10936, 920, 10936, 611, 10936, 10936,
	10936, 10936, 1082, 897, 232, 982, 5442, -1000, -1000, 1665,
	1665, 1665, 30365, 30365, 208, 363, -1000, 10936, -1000, 9320,
	159, 28440, 18, -1000, -1000, -1000, 7369, 452, 29970, 33,
	6075, -1000, 1691, 701, 1289, 1263, 258, 138, 133, 10936,
	10936, 11259, 11259, 10936, 11582, 10936, 10936, 6722, 10936, 10936,
	10936, 10936, 10936, 10936, -1000, 249, -1000, -1000, -1000, -1000,
	1690, -1000, -1000, 1689, -1000, 632, 630, 1688, 448, 132,
	8674, -1000, 759, 21261, 21261, 21261, -1000, -1000, 1089, 22155,
	1078, 30665, 21261, -1000, 248, 246, 1205, 1199, 21261, 21261,
	21857, 21559, 21261, 853, -31, -1000, 245, -31, -1000, 243,
	21261, 827, -1000, 21261, 21261, 819, 1253, 1027, -1000, 443,
	16791, 676, 1297, 21261, 780, 10936, 919, -1000, 14672, 460,
	21261, 780, 80, -1000, -1000, -1000, 400, 21261, -1000, -1000,
	-1000, 122, -1000, 114, 114, 16, -1000, -1000, 19175, -1000,
	-1000, 30665, 362, 361, -1000, 1686, 609, -1000, 606, 580,
	578, -1000, 240, -1000, 10936, 21261, 21261, 1215, -1000, -1000,
	-1000, 735, -1000, 854, -1000, 14071, -1000, 9, -1000, -1000,
	-1000, 405, -1000, 126, -15, 15, 30665, -1000, -1000, -1000,
	-1000, -1000, 21261, 338, 21261, -31, 21261, -1000, 1710, -31,
	21261, 1362, 1388, 398, 21261, 806, -1000, 10936, 1685, -1000,
	-1000, -1000, 10936, -1000, -1000, -1000, 149, -1000, 1262, -1000,
	3, 1477, 278, -136, 131, 412, -1000, 14370, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 424, 374,
	374, 574, 574, 574, 574, 1566, 2163, 2690, 2329, 3220,
	3220, 3220, 2246, 333, 333, 3220, 3220, 3220, 30365, 30033,
	2129, 10936, 10936, 565, 896, 232, 2129, 10936, 2129, 2129,
	2129, 2129, -1000, 1309, -1000, -1000, -1000, -1000, 1296, 231,
	11582, 11582, -1000, -1000, -1000, 6399, 11905, -1000, -1000, -1000,
	-1000, -1000, 229, 10936, -1000, 28763, -183, -23, -1000, -1000,
	10936, -22, -25, -1000, -1000, 673, -1000, 10936, -1000, -12,
	10936, 10936, 10936, 120, 119, -1000, 933, 226, 224, 10936,
	-1000, -1000, 29933, 3942, 112, 1295, -139, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 111, 109, 29909, -139, 107, 3195,
	-1000, 11582, 11582, 11582, 6399, 223, 106, 28824, -139, 29588,
	8997, 8997, 8997, 104, 29551, 10936, -139, 3905, 3683, 3575,
	-28, -29, -33, 1681, -46, 101, 421, 418, 100, 1262,
	-1000, -1000, -1000, -1000, 551, 550, 1360, -1000, 1075, -1000,
	466, -1000, 799, 10936, 12527, 222, 219, 902, -1000, 1359,
	1070, 1358, 1070, -1000, 13, 813, -1000, 10936, -1000, 10936,
	-1000, 549, -1000, -1000, 541, 443, 1294, 659, -1000, 951,
	-1000, -1000, 668, -1000, -1000, 7045, 29970, -1000, 780, 1464,
	-47, -1000, -1000, -1000, 448, 15579, 14974, 8674, -48, -1000,
	-1000, -1000, 759, -1000, 545, 1680, 86, 1077, 1103, 900,
	708, 1679, 29970, 9, 9, -1000, -1000, -1000, -1000, -1000,
	21261, -1000, 1243, -1000, 18281, 215, 21261, 214, -1000, 213,
	-1000, -1000, 209, 21261, 1179, 398, 17387, -1000, 434, 955,
	28403, -1000, 79, 1258, 1519, -1000, 14974, 1213, 1210, 14974,
	1154, 935, 935, 935, -1000, 206, 356, 412, 4498, 10936,
	18877, 941, 56, 78, 1477, 10936, 2129, 2129, 10936, 11582,
	11582, -1000, 2129, -1000, -1000, -1000, -1000, -1000, 1292, 205,
	10936, 30665, 27649, 27265, -55, -1000, 8351, -34, -1000, 10936,
	-1000, 28379, -1000, -1000, 358, 1384, -1000, 10936, 29527, 77,
	8028, -1000, 29206, -16, -16, -1000, 1709, -1000, 15881, 449,
	944, 28056, 30526, 30665, -1000, 10936, -1000, -1000, 1288, 10936,
	-1000, 30526, 30665, 11582, 11582, 11582, 11582, 11582, 11582, 11582,
	11582, 11582, 11582, 11582, 11582, 11582, 11582, 11582, 11582, 11582,
	11582, 11582, 1163, 11582, 1658, 1658, 1658, -65, 7705, -1000,
	1334, 1288, 10936, 10936, 30665, 76, 74, 71, -1000, 10936,
	-139, 10936, 10936, 10936, -1000, -1000, -1000, 70, -1000, 1677,
	-1000, -1000, -1000, -1000, 1258, 21261, 21261, 21261, 1357, -1000,
	2662, -1000, 28019, -56, -1000, 309, 1489, 10936, -1000, -1000,
	204, 12527, 21261, -1000, 1190, 1229, 501, 21261, -1000, 21261,
	-1000, 21261, 21261, 21261, -57, -63, 21261, 21261, -1000, 16791,
	608, 203, -1000, -67, -1000, -1000, 217, -31, 780, -1000,
	-75, -1000, 399, -1000, 354, 351, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 67, -1000, -1000, 1246, -1000, 12527,
	202, 21261, 18281, 1554, 12527, 993, 1182, 398, 17387, -1000,
	642, -1000, -1000, -1000, 445, 10936, 10936, 1477, 14974, 14974,
	1125, 1209, 14974, -1000, -1000, -1000, -1000, 347, 372, 412,
	18877, -1000, 1674, 1198, -68, -1000, -1000, 21261, 200, -1000,
	412, 1621, 2129, 174, 152, 10936, 30665, 2673, -76, 10936,
	10936, -1000, -78, -1000, 10936, 346, 29970, -1000, -1000, -1000,
	29970, 10936, 1667, 10936, 66, 65, 63, -1000, -1000, -1000,
	26923, 10936, 61, -1000, 59, 58, 29970, 1334, 29970, -1000,
	-1000, 477, 477, 681, 681, 681, 681, 1658, 1067, 828,
	1853, 535, 535, 535, 898, 658, 658, 535, 535, 535,
	1284, 1121, 197, 3716, 10936, -80, -1000, -1000, -1000, 29970,
	29970, 57, -1000, -1000, -1000, -139, 3178, 27995, 27672, -1000,
	52, 445, -1000, -1000, -1000, 21261, -1000, 21261, -1000, 5442,
	21261, 1281, 1060, -1000, -1000, 1188, 194, 11582, 21261, -1000,
	864, 12527, 1465, 33, 5442, 1465, 27635, 6075, -82, -87,
	1056, -1000, 1035, 10936, -1000, 30665, 1070, 1070, -1000, 540,
	538, 533, 526, -1000, -1000, -77, 16493, 1708, 1397, 21261,
	1453, -1000, -1000, 193, -1000, -1000, -1000, 925, -88, 12527,
	-89, 48, -31, -94, 21261, -1000, 398, 17387, -1000, 1388,
	-1000, 21261, 29970, -139, -1000, 1125, -1000, 191, 10936, 14974,
	-1000, -136, -1000, -96, -1000, 18877, -1000, 344, -165, -1000,
	396, -1000, 412, 190, 21261, 18877, 10936, 10936, 2673, -101,
	-1000, 2129, 2129, -1000, 27611, -1000, 29970, -1000, 29206, -1000,
	-1000, -1000, 901, -1000, 27288, -1000, -1000, -1000, -1000, 11582,
	1269, 189, 30665, 27251, -1000, -1000, 10936, -1000, -1000, -1000,
	-1000, -1000, 826, -1000, -1000, 21261, 1071, -1000, -1000, 10936,
	3716, 188, 1243, 186, -1000, -1000, -1000, -1000, -1000, -1000,
	1489, -12, -1000, 797, -1000, -1000, 29970, 1474, -1000, -1000,
	21261, 21261, 185, 184, -1000, 182, 33, -105, -1000, 395,
	605, -106, 21261, -1000, -1000, 5752, 21261, 864, -107, -1000,
	1243, -1000, 864, 180, 17387, -1000, 1179, -98, -1000, 1549,
	-1000, 21261, 29970, -1000, 412, -1000, 1663, -1000, -1000, 1198,
	-1000, 4819, 18877, 21261, -114, -1000, 2129, 2129, -1000, -1000,
	45, 944, 1512, -1000, 4083, 11582, 30665, -115, -1000, 27227,
	-1000, -1000, 1356, 4146, 1144, 21261, -1000, 21261, 1465, 42,
	21261, 471, 5442, -1000, -1000, 10936, 10936, 10936, 1708, -1000,
	-1000, 1707, 707, -1000, 448, -1000, 172, 1243, 864, -1000,
	1243, 12527, -1000, 1182, 21261, 171, -120, 18877, -1000, -1000,
	-1000, 1655, -1000, -125, -1000, -1000, 840, 10936, 4083, -131,
	-1000, -1000, 1319, -1000, 962, 830, 41, -140, -1000, -1000,
	99, -1000, 10936, -1000, -142, -144, -16, -1000, -1000, 15579,
	-1000, 21261, -1000, 1243, -1000, -152, -1000, -1000, -1000, -1000,
	-1000, 334, -1000, 40, 10613, 10613, -139, -1000, 21261, -1000,
	988, 979, 705, -1000, -1000, -1000, -1000, -1000, 1144, 29970,
	-1000, -1000, 39, -146, -158, -1000, 864, -1000, -1000, -1000,
	-1000, 12217, 959, 767, 28787, -1000, -1000, -1000, 1408, -1000,
	482, 1072, 1072, 962, 1667, -1000, 1068, 1243, 1620, -1000,
	-1000, -1000, -1000, -1000, -1000, 1635, -1000, -1000, 1143, -1000,
	-1000, -1000, -1000, -1000, -1000, 10290, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1994, 1993, 1552, 1660, 1984, 1982, 1657, 1979, 1978,
	1976, 1974, 1972, 1969, 1607, 1581, 1561, 1559, 1967, 115,
	1966, 1960, 1958, 1557, 1954, 1953, 1952, 1948, 67, 1947,
	1946, 1542, 1532, 1522, 1510, 1944, 1941, 1507, 1939, 1938,
	17, 1934, 87, 1933, 25, 170, 2634, 143, 1932, 1931,
	1928, 22, 111, 95, 1925, 29, 1924, 1923, 42, 23,
	21, 18, 1904, 105, 1901, 1898, 1271, 28, 1894, 1888,
	142, 1887, 69, 24, 453, 151, 152, 121, 136, 1885,
	1884, 1883, 1882, 51, 1881, 2, 1877, 1874, 13, 58,
	59, 1860, 39, 20, 1859, 1858, 131, 1857, 75, 110,
	1498, 129, 123, 127, 1856, 83, 10, 78, 1854, 1853,
	140, 54, 1849, 43, 89, 138, 1847, 71, 158, 57,
	26, 62, 108, 1843, 1836, 1834, 84, 1833, 118, 70,
	1832, 1831, 88, 1830, 137, 141, 1829, 1827, 109, 1823,
	132, 1821, 1820, 148, 164, 1818, 154, 1816, 1815, 155,
	120, 8, 45, 74, 4, 1506, 1505, 114, 56, 40,
	16, 1814, 2046, 1046, 960, 32, 93, 64, 38, 94,
	50, 61, 146, 19, 1813, 1809, 117, 1807, 1805, 1804,
	1803, 1802, 92, 1800, 1799, 77, 144, 15, 31, 107,
	101, 33, 41, 99, 130, 156, 119, 1798, 100, 125,
	1797, 227, 1795, 1794, 1299, 133, 1793, 1791, 1788, 1253,
	1085, 997, 427, 1787, 1785, 773, 676, 1779, 1777, 53,
	1774, 135, 124, 1773, 149, 139, 27, 1772, 122, 103,
	102, 1769, 116, 44, 0, 521, 268, 1768, 126, 98,
	1766, 1765, 1762, 1760, 30, 3, 9, 6, 7, 5,
	91, 90, 1759, 1758, 134, 112, 65, 1757, 153, 1756,
	1752, 1750, 37, 1747, 14, 1743, 11, 1739, 1737, 12,
	1, 1736, 1732, 147, 1731, 104, 1729, 1570, 1728, 150,
	1726, 1721, 1613, 60, 97,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 53, 53, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 50, 50, 55, 55, 55, 57, 57, 54,
	54, 49, 49, 5, 5, 232, 232, 233, 233, 39,
	39, 43, 43, 40, 41, 41, 42, 42, 6, 6,
	6, 7, 7, 7, 7, 7, 7, 14, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 102, 102,
	101, 101, 104, 104, 16, 16, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 200,
	200, 199, 18, 174, 174, 20, 127, 127, 21, 21,
	21, 21, 22, 27, 273, 273, 273, 277, 277, 278,
	278, 279, 279, 279, 279, 279, 279, 279, 275, 275,
	26, 26, 26, 26, 38, 30, 30, 30, 30, 30,
	30, 147, 144, 144, 143, 143, 143, 143, 145, 145,
	145, 145, 148, 148, 82, 82, 225, 224, 224, 230,
	230, 230, 80, 80, 80, 80, 80, 81, 81, 81,
	223, 223, 223, 223, 231, 231, 231, 231, 231, 231,
	229, 229, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	17, 274, 274, 276, 276, 32, 32, 33, 33, 34,
	34, 34, 34, 10, 10, 11, 11, 83, 83, 84,
	84, 153, 153, 153, 153, 85, 85, 56, 56, 56,
	152, 242, 242, 243, 243, 243, 243, 243, 243, 244,
	244, 244, 244, 244, 244, 244, 240, 240, 241, 238,
	238, 239, 239, 239, 239, 280, 280, 151, 151, 88,
	88, 247, 247, 247, 247, 245, 245, 245, 245, 245,
	248, 246, 249, 249, 249, 249, 249, 186, 186, 186,
	36, 12, 62, 62, 13, 9, 9, 131, 131, 92,
	92, 191, 191, 191, 73, 73, 51, 51, 51, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	132, 132, 133, 133, 24, 29, 35, 35, 35, 35,
	35, 282, 282, 69, 69, 69, 69, 70, 70, 146,
	146, 149, 149, 150, 150, 150, 64, 63, 65, 65,
	8, 8, 58, 58, 59, 59, 60, 60, 61, 61,
	283, 283, 23, 23, 23, 76, 76, 140, 140, 140,
	142, 142, 141, 141, 141, 117, 117, 117, 37, 97,
	97, 106, 106, 107, 107, 197, 108, 108, 28, 28,
	46, 46, 44, 44, 44, 44, 44, 44, 45, 45,
	47, 47, 47, 47, 47, 47, 47, 255, 255, 255,
	258, 258, 254, 256, 256, 257, 257, 281, 281, 118,
	118, 118, 87, 86, 86, 90, 90, 89, 91, 91,
	190, 115, 115, 115, 115, 134, 134, 135, 135, 136,
	136, 137, 137, 137, 138, 138, 139, 139, 114, 114,
	170, 170, 48, 48, 96, 96, 98, 98, 160, 160,
	160, 161, 161, 159, 159, 159, 159, 192, 192, 192,
	192, 192, 192, 192, 271, 271, 271, 272, 272, 189,
	189, 193, 193, 193, 193, 193, 193, 187, 187, 187,
	187, 188, 188, 198, 198, 121, 121, 121, 121, 119,
	119, 120, 120, 194, 194, 194, 194, 116, 116, 195,
	195, 195, 154, 154, 201, 201, 201, 219, 219, 95,
	95, 95, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 203,
	203, 203, 203, 205, 205, 205, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	218, 218, 218, 218, 218, 206, 206, 213, 213, 214,
	214, 215, 216, 207, 207, 208, 208, 209, 210, 217,
	217, 217, 217, 221, 221, 211, 211, 211, 211, 211,
	212, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 129, 129, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 164,
	164, 164, 164, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 250, 250, 250, 250, 250, 250,
	250, 252, 252, 253, 253, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 259, 259, 260, 260, 262, 262, 263, 263,
	264, 265, 265, 265, 266, 267, 267, 261, 261, 268,
	268, 268, 269, 269, 270, 270, 270, 270, 270, 176,
	176, 176, 177, 177, 178, 184, 184, 184, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 71, 71, 71, 71, 71, 103,
	103, 173, 173, 171, 171, 171, 175, 175, 122, 122,
	220, 220, 220, 220, 220, 220, 220, 123, 123, 123,
	130, 124, 124, 125, 125, 125, 125, 125, 125, 167,
	168, 126, 126, 126, 169, 169, 179, 183, 183, 182,
	181, 181, 180, 180, 157, 157, 158, 158, 156, 155,
	111, 111, 110, 110, 109, 109, 284, 284, 185, 185,
	112, 112, 113, 105, 105, 196, 196, 196, 196, 99,
	99, 78, 78, 100, 100, 74, 74, 77, 77, 75,
	75, 75, 75, 93, 93, 94, 94, 72, 72, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	222, 222, 222, 172, 66, 66, 66, 67, 67, 68,
	68, 227, 227, 227, 228, 228, 228, 228, 226, 226,
	226, 226, 226, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 7, 6, 1, 1, 1, 3, 3,
	0, 2, 0, 2, 1, 3, 5, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 2, 2, 2, 2, 2, 3, 6, 3, 4,
	1, 5, 2, 1, 3, 3, 3, 3, 1, 3,
	3, 1, 2, 2, 1, 0, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 3, 4,
	4, 4, 4, 2, 4, 4, 4, 4, 4, 4,
	2, 3, 3, 3, 4, 2, 3, 3, 4, 2,
	3, 4, 3, 3, 4, 4, 2, 5, 5, 6,
	2, 2, 0, 2, 0, 6, 6, 5, 5, 4,
	12, 4, 12, 7, 10, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 5, 2, 0, 6, 11, 14, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 6, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 3, 3, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 7, 4, 6,
	3, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 3, 1, 1,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 4, 1, 1, 1, 5, 1, 3, 1, 3,
	1, 1, 1, 1, 6, 6, 4, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -17, -18, -20, -21, -22, -23, -25, -27, -29,
	-28, -30, -31, -32, -33, -34, -35, -24, -26, -36,
	-37, -38, 23, 34, 225, 66, -8, -9, -10, -11,
	-12, -13, -257, 94, 103, 125, 206, 101, 87, 119,
	228, 235, -44, -46, 245, -147, 248, 35, 257, 60,
	97, 230, 223, 224, 283, 292, 68, -255, -47, -45,
	334, 308, 315, 239, -48, 266, 300, 337, 266, 134,
	80, 303, -273, -100, 266, 80, -75, -66, 327, 4,
	-234, -236, 20, 21, 23, 33, 34, 35, 40, 44,
	47, 54, 59, 60, 61, 63, 65, 66, 67, 70,
	71, 78, 79, 81, 83, 87, 89, 93, 94, 96,
	101, 102, 103, 109, 110, 113, 115, 120, 125, 126,
	127, 128, 135, 138, 140, 133, 148, 150, 151, 154,
	153, 158, 161, 164, 166, 167, 168, 171, 169, 173,
	174, 176, 175, 181, 183, 184, 186, 189, 192, 195,
	198, 199, 200, 201, 204, 206, 208, 209, 210, 211,
	213, 214, 216, 217, 218, 219, 220, 223, 221, 222,
	224, 225, 226, 228, 230, 231, 233, 246, 247, 258,
	235, 236, 237, 238, 241, 242, 243, 245, 248, 250,
	253, 256, 257, 259, 262, 260, 255, 265, 267, 268,
	269, 270, 271, 278, 279, 283, 284, 285, 286, 289,
	290, 291, 292, 294, 297, 298, 299, 304, 309, 310,
	311, 312, 313, 28, 36, 37, 38, 39, 41, 42,
	45, 46, 50, 51, 52, 55, 82, 84, 85, 100,
	104, 105, 111, 121, 123, 129, 130, 139, 141, 142,
	143, 145, 156, 170, 180, 182, 193, 197, 203, 205,
	212, 232, 240, 251, 252, 261, 263, 273, 274, 275,
	280, 281, 296, 300, 301, -273, -74, -66, 80, 89,
	138, 291, 290, 80, 134, 266, 303, 293, -19, 334,
	-28, -7, -15, -4, -23, -37, -14, -31, -17, -32,
	-33, -34, -16, 23, -226, 4, -234, -236, -235, -237,
	57, 69, 118, 137, 131, 147, 149, 157, 159, 172,
	194, 196, 229, 249, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 43, 48, 49, 53, 56, 58, 64,
	68, 72, 73, 74, 75, 76, 77, 86, 88, 90,
	91, 92, 95, 97, 99, 106, 107, 108, 114, 116,
	117, 119, 122, 124, 132, 134, 136, 144, 146, 152,
	155, 160, 162, 163, 177, 178, 179, 185, 187, 188,
	190, 191, 202, 207, 215, 227, 239, 244, 254, 264,
	266, 272, 276, 277, 282, 287, 288, 293, 295, 302,
	303, 305, 306, 307, 308, -66, -66, -66, 206, 22,
	-277, 22, -278, -279, 68, 94, 119, 239, 138, 89,
	290, -277, -70, 235, -66, -144, 161, 242, 54, 232,
	279, -145, -143, -225, 273, -148, -101, 171, -66, 4,
	171, 244, 80, 278, 22, 34, 54, 59, 81, 120,
	134, 135, 64, 65, 151, 209, 161, 242, 243, 267,
	273, 279, 68, 294, 269, 102, -282, 279, 279, -282,
	-282, -69, 279, 276, -70, 4, 80, 244, 171, -281,
	266, -230, -223, -186, 9, 282, 106, 187, -229, 8,
	326, -222, -228, 5, 7, 325, 4, -234, -236, -235,
	266, 293, 303, -131, 80, 288, -45, -47, -46, -89,
	-90, 287, 144, 99, 191, -44, -46, -255, -258, 213,
	-254, -66, -258, -86, -87, 22, 91, 338, -194, -74,
	188, -113, 334, -3, -194, 129, -74, -77, 129, -74,
	-66, -194, 129, 276, 338, -100, -93, -66, -156, -155,
	336, 117, 117, 334, -110, -111, -155, -156, 117, 146,
	146, -195, -194, -66, 129, -78, 129, -77, -102, 129,
	-101, -102, 129, -93, 129, -200, -199, -228, 300, 266,
	134, -174, 334, -127, 334, -66, 22, 187, 338, 187,
	-66, -144, 52, -144, 246, 334, -149, -150, -63, -64,
	-65, 148, 208, 211, 276, 319, 117, 313, -230, -82,
	86, -104, 336, 114, 54, -232, -229, 9, 246, 209,
	243, 117, -274, 187, 117, 117, 117, 117, 117, 209,
	243, 278, 117, 313, 148, 208, 258, 266, 303, 117,
	117, -146, -149, -146, 276, -70, -116, -194, 8, 7,
	7, -101, 129, -66, -101, 134, -66, 129, -89, -90,
	-115, -134, -135, 160, 108, 185, -118, 22, 91, -118,
	-118, 44, 335, 335, 338, -258, -94, 334, -105, -196,
	-162, 327, -164, 325, 326, 320, 177, 314, -176, -166,
	-179, 100, 232, 334, -74, -165, 339, 9, -252, -46,
	29, -177, -178, 48, -66, 7, 8, 5, 6, -72,
	-203, -172, -212, 282, 106, 179, -250, -251, 4, -234,
	-227, -204, -214, -208, -211, 145, 57, 73, 76, 74,
	77, 244, 293, 49, 28, 104, 105, 197, 203, 263,
	280, 281, 129, 180, 130, 55, 121, 156, 93, 37,
	39, 41, 42, 50, 51, 82, 84, 85, 111, 139,
	141, 142, 143, 182, 212, 251, 261, 274, 275, 301,
	-235, -215, -216, -209, -210, -217, -105, -113, 327, -74,
	334, -112, -185, -162, 86, -53, 221, -52, 21, 23,
	94, 298, 100, 255, 270, 236, 255, 270, 236, 221,
	100, 339, 221, 221, 100, -232, -75, 338, -226, 327,
	-233, -232, 259, 335, -99, -74, -111, -195, -76, -74,
	-76, 245, -66, 30, 100, -55, 338, 47, 226, 100,
	-55, 338, 100, -55, 100, 100, 335, 338, -194, 129,
	-77, 30, -173, -201, -202, -204, -213, -207, -211, -212,
	40, 46, 45, 271, 170, 240, 252, 296, 38, 186,
	140, 139, 141, 142, 143, 251, 37, 212, 111, 93,
	85, 84, 182, 42, 41, -215, -216, -209, -210, 82,
	274, 275, 145, 39, 51, 50, 301, 261, -103, -162,
	-273, -279, -273, 30, -143, -225, -103, 338, 158, -81,
	164, 176, 126, 188, 311, -224, 86, -230, -224, 86,
	71, -231, 5, 4, -172, -186, 86, 161, -212, 336,
	-226, -19, 247, -101, 22, -225, -276, 114, -273, -225,
	-225, -225, -225, -225, -66, 158, -225, -225, 266, 134,
	266, -70, -55, 338, 334, -88, 177, -256, 308, -88,
	334, -67, 129, -66, -256, 177, -115, -135, -134, -136,
	-162, 22, -139, 110, 173, -162, -164, -45, -45, -45,
	-91, -190, -162, -254, 30, -93, -96, 338, 117, 10,
	11, 56, 33, 325, 326, 327, 328, 112, 329, 330,
	323, 324, 322, 317, 318, 319, 62, 165, 234, 13,
	14, 15, 26, 190, 159, 314, 131, 249, 320, 16,
	17, 18, 147, 36, 132, -71, 30, 4, -79, -162,
	-162, -162, -162, -162, 196, -109, -157, 332, -46, 334,
	-46, -162, -103, 7, -46, -171, 332, -180, -162, -110,
	334, 5, 334, 5, -259, 309, 114, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 205, -221, 304, -221, -221, -205,
	334, -205, -206, 334, -205, 310, 315, 334, -96, -74,
	338, 335, 338, 276, -132, 64, 58, -152, 129, 58,
	-238, -66, 64, -239, 53, 288, 207, 116, -132, 64,
	-132, 64, 64, -194, 33, -28, 117, 33, -28, 117,
	276, -77, -66, 276, 276, -194, -198, 316, -66, -198,
	338, 117, 335, 338, -154, 306, -140, -28, 334, 86,
	30, -140, -106, -107, -197, -108, -74, 334, -66, -66,
	-77, -78, -101, -102, -102, -93, -19, -199, 100, -19,
	335, 338, -95, 29, -128, 334, 312, 168, 83, 127,
	167, -129, 238, 335, 338, 276, 117, 279, 335, -150,
	-80, 211, 253, 222, 241, 338, -226, -275, -66, -74,
	-77, -74, -194, -83, -93, -84, -66, -153, -152, -240,
	-241, -238, 134, 288, 107, 30, 100, -62, 201, 30,
	187, 177, -58, 268, 100, -137, -222, 334, 326, -138,
	232, 233, 338, -51, 31, 90, 334, 335, -154, -196,
	-98, -192, 332, -194, -74, -46, -193, 334, -219, -201,
	-218, 217, 218, 216, 220, 219, -201, -226, 273, -162,
	-162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
	-162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
	-162, 159, 131, 249, 36, 132, -162, 276, -162, -162,
	-162, -162, 169, 177, 179, 282, 106, 289, 91, 183,
	-284, 264, 32, -169, -46, 334, -184, 27, 254, 22,
	-226, -176, 232, 334, -157, -162, -158, -103, 335, 335,
	338, -103, -175, 333, -171, -183, -182, 305, 335, -103,
	302, 22, 91, 327, 7, -128, -260, 109, 122, 334,
	335, 335, -162, -162, -122, -220, -103, 4, 312, 168,
	83, 127, 167, 238, -122, -123, -162, -103, -124, -163,
	-164, 325, 326, 320, 334, 232, -125, -162, -103, -162,
	43, 155, 277, -126, -162, 117, -103, -162, -162, -162,
	-103, -103, -103, 334, 7, 7, 273, 273, 7, -154,
	335, -185, -52, -74, -66, -66, 177, -152, 129, -57,
	177, -201, -66, 334, 334, 150, 150, -66, -66, 129,
	-66, 129, -66, -66, -53, 221, -28, 334, -28, 334,
	-66, 221, -66, -74, 221, -39, 128, 183, -42, 308,
	-232, 259, 117, -74, -117, 227, -162, -117, -142, 187,
	-99, 300, -66, -117, -97, 338, 117, 319, -99, -55,
	-55, -55, -194, -201, 332, 332, 7, 276, 276, 276,
	276, 334, -162, -275, -275, -63, 286, 61, 211, -230,
	338, -198, 335, 335, 338, -67, 134, -67, -28, -101,
	5, -28, -74, 100, -59, 96, -283, 319, -66, -138,
	-162, -190, -19, -114, 122, -198, 338, 69, -121, 149,
	172, 118, 157, 229, 137, 7, -19, -159, 339, 334,
	-189, 315, -46, -193, -192, 313, -162, -162, 276, -284,
	264, -169, -162, 169, 179, 282, 106, 289, 91, 183,
	117, 334, -163, -163, -103, -166, 334, -103, 333, 342,
	335, -162, 333, 333, 338, -181, -182, 95, -162, -90,
	338, -89, -162, -103, -103, 335, 335, -265, 195, 334,
	334, -162, 30, 338, 335, 117, 335, 335, -130, 202,
	335, 10, 11, 325, 326, 327, 328, 112, 329, 330,
	323, 324, 322, 317, 318, 319, 62, 165, 234, 13,
	14, 15, 147, 132, -163, -163, -163, -103, 334, 335,
	-167, -168, 117, 114, 30, -126, -126, -126, 335, 117,
	-103, 338, 338, 338, 335, 335, 335, 7, 335, 338,
	335, 313, 313, 335, -114, 276, 276, 100, 177, 297,
	-242, -239, -162, -92, -191, -66, -253, 334, -250, -251,
	-72, 334, 334, -50, 94, 245, -133, 100, -55, 100,
	-55, 276, -132, 64, -103, -103, 276, 276, -42, 117,
	265, 189, 259, -105, 178, -117, 63, 335, -154, -107,
	-98, -185, 335, 333, 7, 7, 335, 168, 127, 167,
	-129, 167, -129, -129, 7, -66, -85, 133, -153, 334,
	-67, 334, 334, -88, 334, -66, -60, 154, -283, -229,
	-256, 188, 335, 335, -170, 124, 44, -192, 149, 149,
	-192, -121, 149, -119, 194, -119, -119, -271, 334, 333,
	-189, -226, 332, 340, -103, -188, -187, 30, -66, 192,
	335, -162, -162, -163, -163, 117, 334, -162, -173, 26,
	26, 335, -103, 335, 338, -158, -162, 335, -171, 97,
	-162, 272, 335, 302, -90, -90, -90, 5, -266, -66,
	334, 306, -89, 335, -219, -201, -162, -167, -162, -219,
	-201, -163, -163, -163, -163, -163, -163, -163, -163, -163,
	-163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
	91, 177, 183, -163, 338, -103, 335, -168, -167, -162,
	-162, -201, 335, 335, 335, -103, -162, -162, -162, 335,
	7, -170, -66, -66, -152, 100, -243, 64, -244, 56,
	107, 68, 177, 179, 288, 207, 53, 86, 215, 335,
	335, 338, -73, -110, 56, -73, -162, 334, -92, -93,
	177, 86, 177, 86, 79, 284, -66, -66, -74, -66,
	-66, 335, 335, -66, -74, -233, 273, 334, -141, 334,
	187, -28, -117, 319, 333, 333, 335, 132, -92, 334,
	-93, -83, 30, -92, 187, -61, 153, -283, -229, -58,
	-262, 307, -162, -103, -192, -192, -120, 295, 187, 149,
	-192, 333, 335, -272, 7, -189, -188, 7, -161, -160,
	115, 175, 335, -66, 334, -189, 26, 26, -162, -173,
	335, -162, -162, 335, -162, 333, -162, 5, -162, 335,
	335, 335, -267, -66, -162, 335, 335, 335, -168, 117,
	91, 183, 334, -162, 335, 335, 338, 335, 335, 335,
	-262, -152, -66, -226, -66, 107, 129, 179, 150, 334,
	-163, -74, -151, -280, 67, 262, -191, -51, -226, -51,
	335, -103, 335, 335, 179, 179, -162, -201, -55, -55,
	276, 276, 276, 276, -165, -72, -66, -41, -40, 5,
	92, -93, 64, -113, -46, 334, 198, 335, -92, 335,
	335, -28, 335, -74, -283, -229, -59, -263, -264, -66,
	-120, 334, -162, -192, -159, 335, 338, -188, 333, 338,
	341, 319, -189, 334, -93, -187, -162, -162, 335, 335,
	-90, -261, 200, 335, -163, 117, 334, -173, 335, -162,
	-244, -67, 177, -162, -68, 334, -85, 334, -73, -90,
	215, -54, 56, -66, -66, 334, 334, 334, 338, 335,
	-43, 319, 290, 178, 335, -66, -66, -151, 335, -85,
	-151, 334, -229, -60, 338, 30, -93, -189, 7, -160,
	-226, 332, -188, -93, 335, 335, -90, 44, -163, -173,
	335, 335, 100, 335, -247, 166, -66, -93, -51, 335,
	-74, -49, 295, -226, -103, -103, -103, -40, 5, 245,
	-154, 334, -85, -151, -85, -92, -61, -264, -266, 335,
	-187, 7, 335, -268, 210, 233, -103, 335, 107, -245,
	-248, -246, 187, 118, 199, 250, 335, 335, -88, -162,
	335, 335, -90, -106, -93, -85, 335, 333, 335, -269,
	-270, 36, 285, 71, -162, -269, -66, -246, 187, -248,
	187, 290, 89, -247, 335, -154, 335, -151, -270, 204,
	113, 232, 204, 113, -249, 174, 226, 47, 245, -249,
	-245, -56, 47, 226, -85, 26, 20, 179, 86, -270,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 0, 0, 0, 0, 81, 82, 83, 84,
	85, 86, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 418, -2, 0, 160, 0, 362, 0, 362,
	362, 366, 0, 0, 448, 0, 328, 445, -2, 456,
	0, 0, 0, 454, 432, 0, 0, -2, 0, 0,
	0, 0, 0, 134, 0, 984, 913, 919, 920, 944,
	945, 946, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
	1152, 1153, 1154, 1155, 1156, 0, 0, 915, 984, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 0, 240, 958, 959, 960, 961, 962,
	1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 1251, 124, 127, 128, 1037, 130,
	0, 137, 138, 139, 141, 142, 143, 144, 145, 146,
	147, 0, 355, 1062, 368, 155, 1014, 1067, 972, 1143,
	1086, 163, 168, 0, 1149, 171, 176, -2, 100, 202,
	203, 204, 205, 206, 207, 0, 0, 0, 213, 242,
	0, 0, 0, 0, 0, 220, 0, 0, 225, 229,
	0, 0, 0, 236, 0, 0, 370, 361, 370, 358,
	359, 360, 363, 0, 354, 150, 151, 152, 153, 0,
	447, 154, 179, 180, 181, 190, 191, 192, 193, 317,
	0, 319, 200, 201, 940, 0, 954, 955, 956, 957,
	0, 0, 0, 0, 0, 327, -2, 428, 429, -2,
	0, 451, 451, 451, 0, 0, 429, 0, 437, 1042,
	440, 926, 438, 0, 0, 453, 452, 0, 433, 533,
	0, 482, 0, 2, 0, 1127, 533, 0, 1127, 918,
	0, 0, 1127, 0, 0, 135, 136, 923, 921, 922,
	0, 0, 0, 0, 916, 892, 890, 891, 0, 0,
	0, 0, 539, 88, 1127, 56, 1127, 911, 56, 1127,
	98, 56, 1127, 96, 1127, 0, 119, 121, 1155, 0,
	0, 0, 0, 125, 0, 129, 131, 0, 0, 0,
	367, 156, 1116, 158, 0, 0, 162, 371, 373, 374,
	375, 0, 0, 0, 0, 0, 0, 0, 172, 173,
	174, 101, 0, 446, 0, 208, 65, 66, 0, 221,
	226, 0, 244, 0, 0, 0, 0, 0, 0, 222,
	227, 223, 0, 230, 0, 232, 233, 0, 0, 0,
	0, 356, 369, 357, 0, 365, 56, 537, 318, 942,
	941, 300, 1127, 444, 300, 948, 444, 1127, -2, 0,
	424, 463, 464, 0, 0, 0, 0, 449, 450, 0,
	0, 0, 420, 421, 0, 439, 0, 0, 485, 903,
	907, 908, 637, 0, 0, 0, 0, 0, 0, 729,
	731, 1121, 1143, 0, 733, 734, 0, 736, 738, 739,
	0, 742, 743, 883, 915, 929, 930, 931, 932, 0,
	0, 935, 0, 937, 938, 939, 783, 752, -2, -2,
	927, 569, 570, 571, 572, -2, 1157, 756, 758, 760,
	761, 762, 763, 0, 1105, 1122, 1123, 1139, 1140, 1148,
	1152, 1153, 1127, 1136, 1128, 1117, 1125, 1134, 989, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	953, 599, 600, 605, 606, 608, 485, 483, 534, 535,
	0, 0, 900, 898, 899, 33, 351, 35, 0, 351,
	351, 0, 0, 0, 0, 249, 0, 0, 251, 0,
	0, 0, 0, 0, 0, 524, 914, 0, 888, 889,
	524, 67, 78, 0, 0, 909, 893, 543, 0, 395,
	0, 0, 540, 0, 0, 90, 0, 54, 55, 0,
	92, 0, 0, 94, 0, 0, 446, 0, 0, 1127,
	0, 446, 0, 841, 551, 552, 553, 554, 555, 634,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 576, 577, 578, 579, 580, 581, 582, 596, 0,
	575, 575, 575, 588, 589, 597, 598, 603, 604, 615,
	616, 618, 620, 614, 614, 614, 611, 612, 0, 839,
	0, 140, 0, 0, 159, 0, 0, 0, 0, 376,
	187, 188, 189, 378, 379, 164, 166, 177, 165, 167,
	169, 170, 194, 195, 196, 197, 198, 199, 0, 0,
	102, 224, 211, 209, 210, 212, 214, 0, 241, 215,
	216, 217, 218, 219, 228, 231, 234, 235, 0, 0,
	0, 364, 320, 0, 258, 0, 0, 323, 443, 0,
	0, 0, 1127, 947, 383, 0, 427, 461, 462, 465,
	469, 470, 473, 476, 477, 467, 637, 434, 435, 436,
	457, 458, 338, 441, 0, 0, 543, 0, 0, 0,
	0, 0, 0, 818, 819, 820, 821, 822, 823, 826,
	827, 824, 825, 828, 829, 830, 0, 0, 0, 831,
	832, 833, 0, 0, 835, 0, 837, 0, 0, 0,
	0, 0, 0, 897, 0, 0, 0, 906, 834, 642,
	643, 644, 666, 667, 0, 730, 894, 887, 732, 0,
	-2, 839, 0, 735, 740, 741, 0, 0, 882, -2,
	0, 934, 0, 634, 785, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 862, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 602, 613, 610, 609, 586,
	0, 585, 583, 0, 587, 0, 0, 0, 543, 0,
	0, 902, 0, 0, 0, 0, 350, 37, 1127, 0,
	58, 0, 0, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 248, 0,
	0, 0, 917, 0, 0, 0, 70, 0, 924, 77,
	0, 0, 0, 0, 407, 0, 407, 397, 0, 0,
	0, 407, 410, 411, 413, 414, 0, 0, 541, 89,
	912, 56, 99, 56, 56, 97, 105, 120, 0, 122,
	123, 0, 544, 546, 556, 0, 621, 622, 623, 624,
	625, 626, 635, 126, 0, 0, 0, 0, 161, 372,
	377, 0, 184, 0, 186, 0, 103, 243, 148, 237,
	238, 524, 538, 0, 0, 257, 923, 259, 261, 262,
	263, 264, 948, 0, 948, 0, 0, 321, 0, 0,
	0, 0, 385, 391, 0, 0, 471, 0, 0, 468,
	474, 475, 0, 460, 336, 337, 446, 925, 479, 904,
	524, 486, 446, 496, 533, 510, 501, 0, 638, 547,
	548, 590, 591, 592, 593, 594, 639, 640, 0, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, -2,
	-2, -2, 658, 659, 660, -2, -2, -2, 664, 665,
	-2, 836, 838, 0, 897, 0, -2, 0, -2, -2,
	-2, -2, 678, 0, 680, 683, 685, 687, 0, 0,
	0, 0, 896, 697, 874, 0, 0, 815, 816, 817,
	905, 682, 0, 0, 895, 886, 0, 0, -2, 737,
	0, 0, 0, 845, 846, 881, 877, 0, 744, 456,
	0, 0, 0, 0, 0, 943, 793, 0, 0, 0,
	757, 759, 0, 0, 0, 0, 849, -2, -2, -2,
	-2, -2, -2, -2, 0, 0, 839, 859, 0, 0,
	700, 0, 0, 0, 0, 1143, 0, 839, 867, 0,
	0, 0, 0, 0, 839, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 479,
	536, 901, 36, 340, 0, 0, 0, 39, 1127, 47,
	0, 272, 0, 0, 0, 0, 0, 353, 48, 1127,
	56, 1127, 56, 49, 34, 351, 245, 0, 246, 0,
	344, 0, 339, 342, 0, 77, 0, 0, 64, 0,
	68, 79, 0, 910, 87, 0, 542, 392, 407, 0,
	0, 399, 396, 394, 543, 0, 0, 0, 0, 91,
	93, 95, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 840, 132, 133, 157, 182, 183, 185, 178,
	0, 239, 266, 299, 0, 0, 948, 0, 255, 300,
	322, 324, 0, 0, 387, 391, 0, 390, 444, 0,
	0, 459, 0, 481, 0, 484, 0, 0, 0, 0,
	0, 530, 530, 530, 528, 504, 0, 510, 0, 0,
	522, 0, -2, 501, 0, 0, -2, -2, 0, 0,
	0, 698, -2, 679, 681, 684, 686, 688, 0, 0,
	0, 0, 0, 0, 0, 699, 0, 0, 884, 887,
	-2, 840, 843, 844, 0, 0, 878, 0, 0, 0,
	0, 455, 456, 456, 456, 750, 0, 751, 0, 0,
	0, 0, 0, 0, 766, 0, 767, 768, 0, 0,
	769, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 703, 704, 705, 0, 0, 770,
	865, 866, 0, 0, 0, 0, 0, 0, 775, 0,
	872, 0, 0, 0, 779, 780, 781, 0, 573, 0,
	595, 617, 619, 607, 481, 0, 0, 0, 0, 57,
	270, 289, 0, 0, 329, 335, 335, 0, 753, 754,
	0, 0, 0, 41, 0, 0, 0, 0, 45, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 0, 80, 405, 406, 393, 404, 0, 407, 412,
	409, 415, 0, 549, 0, 0, 557, 627, 628, 629,
	630, 631, 632, 633, 0, 149, 253, 0, 260, 0,
	0, 0, 258, 0, 0, 0, 389, 391, 0, 382,
	383, 466, 472, 442, 787, 0, 0, 487, 0, 0,
	0, 0, 0, 525, 529, 526, 527, 0, 0, 510,
	522, 493, 0, 0, 0, 500, 521, 0, 520, 509,
	-2, 641, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 875, 0, 810, 0, 0, 886, -2, 847, 876,
	880, 0, 745, 0, 0, 0, 0, 936, 791, 792,
	796, 0, 0, 755, 0, 0, 848, 858, 860, 701,
	702, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, -2, -2, -2, 719, 720, 721, -2, -2, -2,
	0, 0, 0, 861, 0, 0, 813, 863, 864, 869,
	870, 0, 772, 773, 774, 871, 0, 0, 0, 601,
	0, 787, 346, 348, 38, 0, 271, 0, 274, 0,
	0, 0, 0, 280, 281, 0, 0, 0, 0, 291,
	298, 0, 338, 928, 0, 338, 0, 0, 0, 0,
	0, 53, 0, 0, 352, 0, 56, 56, 341, 0,
	0, 0, 0, 345, 343, 69, 0, 0, 0, 0,
	0, 398, 408, 0, 550, 545, 636, 0, 0, 0,
	0, 0, 0, 0, 0, 380, 391, 0, 384, 385,
	430, 0, 480, 478, 512, 0, 514, 0, 0, 0,
	516, 496, 505, 0, 507, 522, 498, 0, 0, 491,
	0, 490, 510, 518, 0, 0, 0, 0, -2, 0,
	691, -2, -2, 809, 840, 885, 879, 933, 456, 746,
	748, 749, 798, 795, 0, 782, 764, 765, 857, 0,
	0, 0, 0, 840, 812, 771, 0, 777, 778, 574,
	431, 40, 0, 275, 276, 948, 0, 279, 282, 0,
	284, 950, 266, 0, 295, 296, 330, 331, 334, 332,
	335, 456, 293, 0, 42, 43, 52, 60, 44, 50,
	0, 0, 0, 0, 523, 0, 0, 0, 74, 72,
	0, 0, 0, 416, 417, 0, 0, 298, 0, 288,
	266, 256, 298, 0, 0, 386, 387, 786, 788, 0,
	513, 0, 532, 515, 510, 506, 0, 503, 494, 0,
	495, 0, 522, 0, 0, 502, -2, -2, 692, 811,
	0, 456, 0, 784, -2, 0, 0, 0, 814, 0,
	273, 277, 0, 0, 304, 0, 292, 0, 338, 0,
	0, 62, 0, 347, 349, 0, 0, 0, 0, 76,
	73, 0, 0, 401, 543, 403, 0, 266, 298, 254,
	266, 0, 388, 389, 0, 0, 0, 0, 508, 492,
	488, 0, 499, 0, 519, 747, 801, 0, -2, 0,
	727, 776, 0, 283, 309, 0, 0, 0, 333, 745,
	300, 46, 0, 59, 0, 0, 456, 75, 71, 0,
	402, 0, 286, 266, 325, 0, 381, 789, 790, 531,
	497, 0, 517, 0, 0, 0, 797, 728, 0, 285,
	305, 306, 0, 301, 302, 303, 949, 297, 304, 61,
	250, 252, 0, 543, 0, 287, 298, 489, 794, 799,
	802, -2, 1089, 981, 0, 800, 278, 307, 0, 308,
	0, 0, 0, 309, 0, 400, 269, 266, 0, 804,
	805, 806, 807, 808, 310, 0, 313, 314, 0, 311,
	294, 265, 267, 268, 326, 0, 312, 315, 316, 803,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 323, 3, 329, 324, 3,
	334, 335, 327, 325, 338, 326, 336, 328, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 342, 337,
	317, 319, 318, 3, 339, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 332, 3, 333, 330, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 340, 322, 341, 320,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 321,
	57660, 331, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:791
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:797
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:803
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:850
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:860
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:900
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:923
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:933
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = nil
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = DropCascade
		}
	case 55:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = DropRestrict
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = DropDefault
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:995
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:996
		{
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:999
		{
			return unimplemented(sqllex, "alter using")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1000
		{
		}
	case 63:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 67:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 70:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 72:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.str = ""
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 76:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1073
		{
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1213
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1391
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1395
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1401
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1408
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			return unimplemented(sqllex, "set local")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{ /* SKIP DOC */
		}
	case 161:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1472
		{
			return unimplemented(sqllex, "set from current")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1484
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1492
		{
		}
	case 175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1492
		{
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = Low
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = Normal
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = High
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1616
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1624
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1720
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1724
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1728
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1748
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1752
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1756
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1799
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1803
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1809
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1813
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1817
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1821
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1892
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = DropDefault
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1906
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return unimplemented(sqllex, "match full")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return unimplemented(sqllex, "match partial")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return unimplemented(sqllex, "match simple")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2114
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2120
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2121
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2124
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2127
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2130
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2133
		{
			return unimplemented(sqllex, "no action")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2136
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2137
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2138
		{
			return unimplemented(sqllex, "action set null")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2139
		{
			return unimplemented(sqllex, "action set default")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2171
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = true
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = false
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2247
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2250
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2251
		{
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = Ascending
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = Descending
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2305
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2306
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = true
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = false
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2319
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2320
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2353
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2362
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2363
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.str = ""
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.str = ""
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2409
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.union.val = ReadOnly
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = ReadWrite
		}
	case 380:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.str = ""
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.str = ""
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.str = ""
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.str = ""
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2517
		{
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
		}
	case 392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2582
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2586
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2594
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 408:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2616
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2617
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2845
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2846
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2849
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2850
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2853
		{
			return unimplemented(sqllex, "cte")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2856
		{
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2857
		{
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2860
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2861
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2864
		{
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2865
		{
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = true
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = false
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = false
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = true
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2888
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2889
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2927
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2947
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2999
		{
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3000
		{
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3003
		{
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3004
		{
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3058
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = &From{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3094
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3112
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3139
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3156
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = nil
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3214
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3220
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = true
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = false
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.str = astFullJoin
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.str = astLeftJoin
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.str = astRightJoin
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.str = astInnerJoin
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3331
		{
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3332
		{
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3418
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3431
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3446
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3455
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3527
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = nil
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3576
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3672
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3704
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3743
		{
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3744
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = year
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = month
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = day
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = hour
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = minute
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = month
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = hour
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = minute
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = minute
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = nil
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = second
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3839
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3874
		{
			return unimplemented(sqllex, "at tz")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4042
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4108
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4281
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4334
		{
			return unimplemented(sqllex, "variadic")
		}
	case 747:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4335
		{
			return unimplemented(sqllex, "variadic")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4358
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4374
		{
			return unimplemented(sqllex, "func_application")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4375
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4379
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4396
		{
			return unimplemented(sqllex, "current role")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4397
		{
			return unimplemented(sqllex, "current user")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4398
		{
			return unimplemented(sqllex, "session user")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4399
		{
			return unimplemented(sqllex, "user")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4428
		{
			return unimplemented(sqllex, "treat")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4472
		{
			return unimplemented(sqllex, "within group")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4473
		{
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = Window(nil)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4508
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.str = ""
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4570
		{
			return unimplemented(sqllex, "frame range")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4571
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4572
		{
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4575
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4576
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4582
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4583
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4584
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4585
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4586
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = Any
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = Some
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = All
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = Plus
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = Minus
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = Mult
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = Div
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = FloorDiv
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = Mod
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = Bitand
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = Bitor
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = Pow
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = Bitxor
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = LT
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = GT
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = EQ
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = LE
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = GE
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = NE
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = Like
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = NotLike
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = ILike
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = NotILike
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4951
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5069
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5113
		{
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5149
		{
			return unimplemented(sqllex, "func const")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5158
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = DNull
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5185
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 948:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.str = ""
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
