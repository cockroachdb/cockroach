// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) seqOpt() SequenceOption {
	return u.val.(SequenceOption)
}
func (u *sqlSymUnion) intVal() *int64 {
	return u.val.(*int64)
}
func (u *sqlSymUnion) seqOpts() []SequenceOption {
	return u.val.([]SequenceOption)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:499
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CACHE = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const HAS_SOME = 57486
const HAS_ALL = 57487
const IMPORT = 57488
const INCREMENT = 57489
const INCREMENTAL = 57490
const IF = 57491
const IFNULL = 57492
const ILIKE = 57493
const IN = 57494
const INET = 57495
const INTERLEAVE = 57496
const INDEX = 57497
const INDEXES = 57498
const INITIALLY = 57499
const INNER = 57500
const INSERT = 57501
const INT = 57502
const INT2VECTOR = 57503
const INT2 = 57504
const INT4 = 57505
const INT8 = 57506
const INT64 = 57507
const INTEGER = 57508
const INTERSECT = 57509
const INTERVAL = 57510
const INTO = 57511
const IS = 57512
const ISOLATION = 57513
const JOB = 57514
const JOBS = 57515
const JOIN = 57516
const JSON = 57517
const JSONB = 57518
const KEY = 57519
const KEYS = 57520
const KV = 57521
const LATERAL = 57522
const LC_CTYPE = 57523
const LC_COLLATE = 57524
const LEADING = 57525
const LEAST = 57526
const LEFT = 57527
const LESS = 57528
const LEVEL = 57529
const LIKE = 57530
const LIMIT = 57531
const LIST = 57532
const LOCAL = 57533
const LOCALTIME = 57534
const LOCALTIMESTAMP = 57535
const LOW = 57536
const LSHIFT = 57537
const MATCH = 57538
const MINVALUE = 57539
const MAXVALUE = 57540
const MINUTE = 57541
const MONTH = 57542
const NAN = 57543
const NAME = 57544
const NAMES = 57545
const NATURAL = 57546
const NEXT = 57547
const NO = 57548
const NO_INDEX_JOIN = 57549
const NORMAL = 57550
const NOT = 57551
const NOTHING = 57552
const NULL = 57553
const NULLIF = 57554
const NULLS = 57555
const NUMERIC = 57556
const OF = 57557
const OFF = 57558
const OFFSET = 57559
const OID = 57560
const ON = 57561
const ONLY = 57562
const OPTIONS = 57563
const OR = 57564
const ORDER = 57565
const ORDINALITY = 57566
const OUT = 57567
const OUTER = 57568
const OVER = 57569
const OVERLAPS = 57570
const OVERLAY = 57571
const PARENT = 57572
const PARTIAL = 57573
const PARTITION = 57574
const PASSWORD = 57575
const PAUSE = 57576
const PLACING = 57577
const PLANS = 57578
const POSITION = 57579
const PRECEDING = 57580
const PRECISION = 57581
const PREPARE = 57582
const PRIMARY = 57583
const PRIORITY = 57584
const QUERIES = 57585
const QUERY = 57586
const RANGE = 57587
const READ = 57588
const REAL = 57589
const RECURSIVE = 57590
const REF = 57591
const REFERENCES = 57592
const REGCLASS = 57593
const REGPROC = 57594
const REGPROCEDURE = 57595
const REGNAMESPACE = 57596
const REGTYPE = 57597
const REMOVE_PATH = 57598
const RENAME = 57599
const REPEATABLE = 57600
const RELEASE = 57601
const RESET = 57602
const RESTORE = 57603
const RESTRICT = 57604
const RESUME = 57605
const RETURNING = 57606
const REVOKE = 57607
const RIGHT = 57608
const ROLLBACK = 57609
const ROLLUP = 57610
const ROW = 57611
const ROWS = 57612
const RSHIFT = 57613
const SAVEPOINT = 57614
const SCATTER = 57615
const SCRUB = 57616
const SEARCH = 57617
const SECOND = 57618
const SELECT = 57619
const SEQUENCE = 57620
const SEQUENCES = 57621
const SERIAL = 57622
const SERIALIZABLE = 57623
const SESSION = 57624
const SESSIONS = 57625
const SESSION_USER = 57626
const SET = 57627
const SETTING = 57628
const SETTINGS = 57629
const SHOW = 57630
const SIMILAR = 57631
const SIMPLE = 57632
const SMALLINT = 57633
const SMALLSERIAL = 57634
const SNAPSHOT = 57635
const SOME = 57636
const SPLIT = 57637
const SQL = 57638
const START = 57639
const STATUS = 57640
const STDIN = 57641
const STRICT = 57642
const STRING = 57643
const STORE = 57644
const STORING = 57645
const SUBSTRING = 57646
const SYMMETRIC = 57647
const SYSTEM = 57648
const TABLE = 57649
const TABLES = 57650
const TEMP = 57651
const TEMPLATE = 57652
const TEMPORARY = 57653
const TESTING_RANGES = 57654
const TESTING_RELOCATE = 57655
const TEXT = 57656
const THAN = 57657
const THEN = 57658
const TIME = 57659
const TIMESTAMP = 57660
const TIMESTAMPTZ = 57661
const TO = 57662
const TRAILING = 57663
const TRACE = 57664
const TRANSACTION = 57665
const TREAT = 57666
const TRIM = 57667
const TRUE = 57668
const TRUNCATE = 57669
const TYPE = 57670
const UNBOUNDED = 57671
const UNCOMMITTED = 57672
const UNION = 57673
const UNIQUE = 57674
const UNKNOWN = 57675
const UPDATE = 57676
const UPSERT = 57677
const USE = 57678
const USER = 57679
const USERS = 57680
const USING = 57681
const UUID = 57682
const VALID = 57683
const VALIDATE = 57684
const VALUE = 57685
const VALUES = 57686
const VARCHAR = 57687
const VARIADIC = 57688
const VIEW = 57689
const VARYING = 57690
const WHEN = 57691
const WHERE = 57692
const WINDOW = 57693
const WITH = 57694
const WITHIN = 57695
const WITHOUT = 57696
const WRITE = 57697
const YEAR = 57698
const ZONE = 57699
const NOT_LA = 57700
const WITH_LA = 57701
const AS_LA = 57702
const CONTAINED_BY = 57703
const HAS_SOME_KEY = 57704
const HAS_ALL_KEYS = 57705
const POSTFIXOP = 57706
const UMINUS = 57707
const HELPTOKEN = 57708

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6989

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	386, 54,
	-2, 733,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	155, 583,
	-2, 0,
	-1, 65,
	97, 733,
	159, 733,
	334, 733,
	335, 733,
	-2, 0,
	-1, 75,
	1, 695,
	219, 695,
	264, 695,
	381, 695,
	383, 695,
	385, 695,
	386, 695,
	-2, 708,
	-1, 108,
	4, 735,
	20, 735,
	21, 735,
	23, 735,
	28, 735,
	33, 735,
	34, 735,
	35, 735,
	36, 735,
	37, 735,
	38, 735,
	39, 735,
	40, 735,
	41, 735,
	42, 735,
	44, 735,
	45, 735,
	46, 735,
	47, 735,
	48, 735,
	49, 735,
	52, 735,
	53, 735,
	54, 735,
	56, 735,
	57, 735,
	61, 735,
	62, 735,
	63, 735,
	65, 735,
	66, 735,
	67, 735,
	68, 735,
	70, 735,
	72, 735,
	73, 735,
	76, 735,
	77, 735,
	78, 735,
	86, 735,
	87, 735,
	88, 735,
	89, 735,
	90, 735,
	91, 735,
	92, 735,
	93, 735,
	95, 735,
	97, 735,
	99, 735,
	102, 735,
	103, 735,
	105, 735,
	109, 735,
	110, 735,
	111, 735,
	112, 735,
	113, 735,
	114, 735,
	115, 735,
	123, 735,
	124, 735,
	125, 735,
	126, 735,
	127, 735,
	129, 735,
	131, 735,
	136, 735,
	137, 735,
	139, 735,
	142, 735,
	143, 735,
	146, 735,
	147, 735,
	148, 735,
	149, 735,
	150, 735,
	153, 735,
	154, 735,
	156, 735,
	159, 735,
	160, 735,
	161, 735,
	162, 735,
	163, 735,
	164, 735,
	165, 735,
	166, 735,
	168, 735,
	171, 735,
	172, 735,
	173, 735,
	175, 735,
	176, 735,
	177, 735,
	178, 735,
	179, 735,
	181, 735,
	182, 735,
	184, 735,
	186, 735,
	187, 735,
	190, 735,
	191, 735,
	194, 735,
	196, 735,
	197, 735,
	199, 735,
	200, 735,
	201, 735,
	202, 735,
	203, 735,
	205, 735,
	206, 735,
	207, 735,
	208, 735,
	212, 735,
	213, 735,
	214, 735,
	215, 735,
	216, 735,
	218, 735,
	220, 735,
	221, 735,
	224, 735,
	225, 735,
	227, 735,
	229, 735,
	230, 735,
	231, 735,
	232, 735,
	233, 735,
	234, 735,
	236, 735,
	237, 735,
	238, 735,
	239, 735,
	240, 735,
	242, 735,
	243, 735,
	244, 735,
	245, 735,
	246, 735,
	247, 735,
	248, 735,
	249, 735,
	251, 735,
	252, 735,
	253, 735,
	254, 735,
	255, 735,
	257, 735,
	258, 735,
	259, 735,
	260, 735,
	261, 735,
	262, 735,
	263, 735,
	265, 735,
	267, 735,
	268, 735,
	269, 735,
	270, 735,
	272, 735,
	273, 735,
	274, 735,
	275, 735,
	276, 735,
	278, 735,
	279, 735,
	280, 735,
	281, 735,
	282, 735,
	283, 735,
	285, 735,
	286, 735,
	287, 735,
	288, 735,
	290, 735,
	291, 735,
	292, 735,
	293, 735,
	295, 735,
	296, 735,
	297, 735,
	298, 735,
	299, 735,
	300, 735,
	301, 735,
	302, 735,
	303, 735,
	304, 735,
	306, 735,
	308, 735,
	309, 735,
	310, 735,
	311, 735,
	312, 735,
	313, 735,
	314, 735,
	315, 735,
	317, 735,
	318, 735,
	319, 735,
	322, 735,
	323, 735,
	324, 735,
	325, 735,
	327, 735,
	328, 735,
	329, 735,
	330, 735,
	333, 735,
	334, 735,
	335, 735,
	336, 735,
	338, 735,
	340, 735,
	341, 735,
	342, 735,
	343, 735,
	344, 735,
	345, 735,
	348, 735,
	353, 735,
	354, 735,
	355, 735,
	356, 735,
	357, 735,
	-2, 0,
	-1, 125,
	1, 698,
	219, 698,
	264, 698,
	381, 698,
	383, 698,
	385, 698,
	386, 698,
	-2, 707,
	-1, 130,
	1, 632,
	171, 632,
	242, 632,
	246, 632,
	385, 632,
	386, 632,
	-2, 0,
	-1, 132,
	1, 632,
	385, 632,
	386, 632,
	-2, 0,
	-1, 133,
	1, 632,
	385, 632,
	386, 632,
	-2, 0,
	-1, 134,
	1, 636,
	385, 636,
	386, 636,
	-2, 0,
	-1, 141,
	4, 741,
	5, 741,
	6, 741,
	7, 741,
	8, 741,
	9, 741,
	20, 741,
	21, 741,
	23, 741,
	28, 741,
	29, 741,
	33, 741,
	34, 741,
	35, 741,
	36, 741,
	37, 741,
	38, 741,
	39, 741,
	40, 741,
	41, 741,
	42, 741,
	44, 741,
	45, 741,
	46, 741,
	47, 741,
	48, 741,
	49, 741,
	50, 741,
	51, 741,
	52, 741,
	53, 741,
	54, 741,
	56, 741,
	57, 741,
	59, 741,
	61, 741,
	62, 741,
	63, 741,
	65, 741,
	66, 741,
	67, 741,
	68, 741,
	70, 741,
	72, 741,
	73, 741,
	75, 741,
	76, 741,
	77, 741,
	78, 741,
	80, 741,
	81, 741,
	82, 741,
	84, 741,
	85, 741,
	86, 741,
	87, 741,
	88, 741,
	89, 741,
	90, 741,
	91, 741,
	92, 741,
	93, 741,
	95, 741,
	97, 741,
	99, 741,
	102, 741,
	103, 741,
	105, 741,
	109, 741,
	110, 741,
	111, 741,
	112, 741,
	113, 741,
	114, 741,
	115, 741,
	116, 741,
	117, 741,
	123, 741,
	124, 741,
	125, 741,
	126, 741,
	127, 741,
	129, 741,
	131, 741,
	134, 741,
	136, 741,
	137, 741,
	139, 741,
	142, 741,
	143, 741,
	146, 741,
	147, 741,
	148, 741,
	149, 741,
	150, 741,
	151, 741,
	153, 741,
	154, 741,
	156, 741,
	158, 741,
	159, 741,
	160, 741,
	161, 741,
	162, 741,
	163, 741,
	164, 741,
	165, 741,
	166, 741,
	168, 741,
	170, 741,
	171, 741,
	172, 741,
	173, 741,
	174, 741,
	175, 741,
	176, 741,
	177, 741,
	178, 741,
	179, 741,
	181, 741,
	182, 741,
	184, 741,
	185, 741,
	186, 741,
	187, 741,
	188, 741,
	190, 741,
	191, 741,
	194, 741,
	196, 741,
	197, 741,
	198, 741,
	199, 741,
	200, 741,
	201, 741,
	202, 741,
	203, 741,
	204, 741,
	205, 741,
	206, 741,
	207, 741,
	208, 741,
	209, 741,
	211, 741,
	212, 741,
	213, 741,
	214, 741,
	215, 741,
	216, 741,
	218, 741,
	221, 741,
	224, 741,
	225, 741,
	226, 741,
	227, 741,
	228, 741,
	229, 741,
	230, 741,
	231, 741,
	232, 741,
	233, 741,
	234, 741,
	236, 741,
	237, 741,
	238, 741,
	239, 741,
	240, 741,
	242, 741,
	243, 741,
	244, 741,
	245, 741,
	246, 741,
	247, 741,
	248, 741,
	249, 741,
	251, 741,
	252, 741,
	253, 741,
	254, 741,
	255, 741,
	257, 741,
	258, 741,
	259, 741,
	260, 741,
	261, 741,
	262, 741,
	263, 741,
	265, 741,
	266, 741,
	267, 741,
	268, 741,
	269, 741,
	270, 741,
	272, 741,
	273, 741,
	274, 741,
	275, 741,
	276, 741,
	278, 741,
	279, 741,
	280, 741,
	281, 741,
	282, 741,
	283, 741,
	284, 741,
	285, 741,
	286, 741,
	287, 741,
	288, 741,
	289, 741,
	290, 741,
	291, 741,
	292, 741,
	293, 741,
	295, 741,
	296, 741,
	297, 741,
	298, 741,
	299, 741,
	300, 741,
	301, 741,
	302, 741,
	303, 741,
	304, 741,
	306, 741,
	308, 741,
	309, 741,
	310, 741,
	311, 741,
	312, 741,
	313, 741,
	314, 741,
	315, 741,
	317, 741,
	318, 741,
	319, 741,
	322, 741,
	323, 741,
	324, 741,
	325, 741,
	326, 741,
	327, 741,
	328, 741,
	329, 741,
	330, 741,
	333, 741,
	334, 741,
	335, 741,
	336, 741,
	337, 741,
	338, 741,
	340, 741,
	341, 741,
	342, 741,
	343, 741,
	344, 741,
	345, 741,
	348, 741,
	353, 741,
	354, 741,
	355, 741,
	356, 741,
	357, 741,
	358, 741,
	368, 741,
	373, 741,
	374, 741,
	375, 741,
	382, 741,
	388, 741,
	-2, 0,
	-1, 144,
	1, 54,
	386, 54,
	-2, 733,
	-1, 522,
	133, 1357,
	320, 1357,
	363, 1357,
	384, 1357,
	-2, 0,
	-1, 523,
	133, 1303,
	320, 1303,
	363, 1303,
	384, 1303,
	-2, 0,
	-1, 525,
	133, 1418,
	320, 1418,
	363, 1418,
	384, 1418,
	-2, 0,
	-1, 527,
	133, 1441,
	320, 1441,
	363, 1441,
	384, 1441,
	-2, 0,
	-1, 534,
	133, 1363,
	320, 1363,
	363, 1363,
	384, 1363,
	-2, 334,
	-1, 560,
	1, 412,
	381, 412,
	383, 412,
	385, 412,
	386, 412,
	-2, 0,
	-1, 561,
	1, 464,
	130, 464,
	381, 464,
	383, 464,
	385, 464,
	386, 464,
	-2, 0,
	-1, 567,
	1, 426,
	381, 426,
	383, 426,
	385, 426,
	386, 426,
	-2, 0,
	-1, 569,
	1, 430,
	381, 430,
	383, 430,
	385, 430,
	386, 430,
	-2, 0,
	-1, 572,
	1, 438,
	381, 438,
	383, 438,
	385, 438,
	386, 438,
	-2, 0,
	-1, 573,
	1, 443,
	381, 443,
	383, 443,
	385, 443,
	386, 443,
	-2, 0,
	-1, 576,
	1, 453,
	381, 453,
	383, 453,
	385, 453,
	386, 453,
	-2, 0,
	-1, 592,
	118, 743,
	130, 743,
	189, 743,
	217, 743,
	-2, 702,
	-1, 595,
	118, 742,
	130, 742,
	189, 742,
	217, 742,
	-2, 699,
	-1, 652,
	382, 1280,
	-2, 1273,
	-1, 653,
	382, 1281,
	-2, 1274,
	-1, 659,
	5, 927,
	382, 927,
	-2, 1493,
	-1, 684,
	5, 886,
	-2, 1462,
	-1, 685,
	5, 921,
	382, 921,
	-2, 1464,
	-1, 686,
	5, 896,
	-2, 1465,
	-1, 687,
	5, 895,
	-2, 1466,
	-1, 688,
	5, 921,
	382, 921,
	-2, 1469,
	-1, 689,
	5, 921,
	382, 921,
	-2, 1470,
	-1, 690,
	5, 922,
	-2, 1473,
	-1, 691,
	5, 878,
	-2, 1474,
	-1, 692,
	5, 878,
	-2, 1475,
	-1, 693,
	5, 903,
	-2, 1479,
	-1, 694,
	5, 888,
	-2, 1480,
	-1, 695,
	5, 889,
	-2, 1481,
	-1, 696,
	5, 879,
	-2, 1487,
	-1, 697,
	5, 880,
	-2, 1488,
	-1, 698,
	5, 881,
	-2, 1489,
	-1, 699,
	5, 882,
	-2, 1490,
	-1, 700,
	5, 883,
	-2, 1491,
	-1, 701,
	5, 884,
	-2, 1492,
	-1, 702,
	5, 878,
	-2, 1499,
	-1, 703,
	5, 887,
	-2, 1504,
	-1, 704,
	5, 885,
	-2, 1507,
	-1, 705,
	5, 919,
	382, 919,
	-2, 1509,
	-1, 706,
	5, 923,
	-2, 1512,
	-1, 707,
	5, 925,
	-2, 1513,
	-1, 708,
	5, 918,
	382, 918,
	-2, 1518,
	-1, 895,
	233, 731,
	-2, 576,
	-1, 899,
	219, 1277,
	-2, 0,
	-1, 934,
	1, 218,
	381, 218,
	383, 218,
	385, 218,
	386, 218,
	-2, 706,
	-1, 941,
	4, 1517,
	10, 1517,
	11, 1517,
	13, 1517,
	14, 1517,
	15, 1517,
	16, 1517,
	17, 1517,
	18, 1517,
	20, 1517,
	21, 1517,
	23, 1517,
	26, 1517,
	28, 1517,
	30, 1517,
	33, 1517,
	34, 1517,
	35, 1517,
	36, 1517,
	37, 1517,
	38, 1517,
	39, 1517,
	40, 1517,
	41, 1517,
	42, 1517,
	44, 1517,
	45, 1517,
	46, 1517,
	47, 1517,
	48, 1517,
	49, 1517,
	52, 1517,
	53, 1517,
	54, 1517,
	56, 1517,
	57, 1517,
	58, 1517,
	61, 1517,
	62, 1517,
	63, 1517,
	64, 1517,
	65, 1517,
	66, 1517,
	67, 1517,
	68, 1517,
	70, 1517,
	71, 1517,
	72, 1517,
	73, 1517,
	75, 1517,
	76, 1517,
	77, 1517,
	78, 1517,
	86, 1517,
	87, 1517,
	88, 1517,
	89, 1517,
	90, 1517,
	91, 1517,
	92, 1517,
	93, 1517,
	95, 1517,
	97, 1517,
	99, 1517,
	102, 1517,
	103, 1517,
	105, 1517,
	109, 1517,
	110, 1517,
	111, 1517,
	112, 1517,
	113, 1517,
	114, 1517,
	115, 1517,
	119, 1517,
	120, 1517,
	121, 1517,
	122, 1517,
	123, 1517,
	124, 1517,
	125, 1517,
	126, 1517,
	127, 1517,
	128, 1517,
	129, 1517,
	131, 1517,
	134, 1517,
	136, 1517,
	137, 1517,
	139, 1517,
	142, 1517,
	143, 1517,
	146, 1517,
	147, 1517,
	148, 1517,
	149, 1517,
	150, 1517,
	151, 1517,
	152, 1517,
	153, 1517,
	154, 1517,
	156, 1517,
	158, 1517,
	159, 1517,
	160, 1517,
	161, 1517,
	162, 1517,
	163, 1517,
	164, 1517,
	165, 1517,
	166, 1517,
	168, 1517,
	170, 1517,
	171, 1517,
	172, 1517,
	173, 1517,
	174, 1517,
	175, 1517,
	176, 1517,
	177, 1517,
	178, 1517,
	179, 1517,
	181, 1517,
	182, 1517,
	184, 1517,
	185, 1517,
	186, 1517,
	187, 1517,
	188, 1517,
	190, 1517,
	191, 1517,
	194, 1517,
	195, 1517,
	196, 1517,
	197, 1517,
	199, 1517,
	200, 1517,
	201, 1517,
	202, 1517,
	203, 1517,
	204, 1517,
	205, 1517,
	206, 1517,
	207, 1517,
	208, 1517,
	212, 1517,
	213, 1517,
	214, 1517,
	215, 1517,
	216, 1517,
	218, 1517,
	221, 1517,
	222, 1517,
	224, 1517,
	225, 1517,
	227, 1517,
	229, 1517,
	230, 1517,
	231, 1517,
	232, 1517,
	233, 1517,
	234, 1517,
	236, 1517,
	237, 1517,
	238, 1517,
	239, 1517,
	240, 1517,
	242, 1517,
	243, 1517,
	244, 1517,
	245, 1517,
	246, 1517,
	247, 1517,
	248, 1517,
	249, 1517,
	251, 1517,
	252, 1517,
	253, 1517,
	254, 1517,
	255, 1517,
	256, 1517,
	257, 1517,
	258, 1517,
	259, 1517,
	260, 1517,
	261, 1517,
	262, 1517,
	263, 1517,
	265, 1517,
	266, 1517,
	267, 1517,
	268, 1517,
	269, 1517,
	270, 1517,
	271, 1517,
	272, 1517,
	273, 1517,
	274, 1517,
	275, 1517,
	276, 1517,
	278, 1517,
	279, 1517,
	280, 1517,
	281, 1517,
	282, 1517,
	283, 1517,
	285, 1517,
	286, 1517,
	287, 1517,
	288, 1517,
	289, 1517,
	290, 1517,
	291, 1517,
	292, 1517,
	293, 1517,
	295, 1517,
	296, 1517,
	297, 1517,
	298, 1517,
	299, 1517,
	300, 1517,
	301, 1517,
	302, 1517,
	303, 1517,
	304, 1517,
	306, 1517,
	308, 1517,
	309, 1517,
	310, 1517,
	311, 1517,
	312, 1517,
	313, 1517,
	314, 1517,
	315, 1517,
	317, 1517,
	318, 1517,
	319, 1517,
	322, 1517,
	323, 1517,
	324, 1517,
	325, 1517,
	327, 1517,
	328, 1517,
	329, 1517,
	330, 1517,
	333, 1517,
	334, 1517,
	335, 1517,
	336, 1517,
	338, 1517,
	340, 1517,
	341, 1517,
	342, 1517,
	343, 1517,
	344, 1517,
	345, 1517,
	348, 1517,
	353, 1517,
	354, 1517,
	355, 1517,
	356, 1517,
	357, 1517,
	358, 1517,
	359, 1517,
	361, 1517,
	362, 1517,
	363, 1517,
	364, 1517,
	365, 1517,
	366, 1517,
	367, 1517,
	368, 1517,
	370, 1517,
	371, 1517,
	372, 1517,
	373, 1517,
	374, 1517,
	375, 1517,
	376, 1517,
	377, 1517,
	378, 1517,
	380, 1517,
	383, 1517,
	384, 1517,
	387, 1517,
	388, 1517,
	-2, 0,
	-1, 954,
	133, 1418,
	320, 1418,
	363, 1418,
	384, 1418,
	-2, 0,
	-1, 971,
	133, 1441,
	320, 1441,
	363, 1441,
	384, 1441,
	-2, 0,
	-1, 972,
	171, 644,
	242, 644,
	246, 644,
	-2, 322,
	-1, 1044,
	118, 742,
	130, 742,
	189, 742,
	217, 742,
	-2, 703,
	-1, 1125,
	108, 708,
	118, 708,
	130, 708,
	167, 708,
	189, 708,
	217, 708,
	223, 708,
	331, 708,
	-2, 1056,
	-1, 1135,
	382, 1257,
	-2, 1245,
	-1, 1153,
	383, 1169,
	-2, 0,
	-1, 1177,
	171, 644,
	242, 644,
	246, 644,
	-2, 639,
	-1, 1205,
	383, 1169,
	-2, 0,
	-1, 1209,
	108, 708,
	118, 708,
	130, 708,
	167, 708,
	189, 708,
	217, 708,
	223, 708,
	331, 708,
	-2, 809,
	-1, 1361,
	171, 644,
	242, 644,
	246, 644,
	-2, 324,
	-1, 1469,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 962,
	-1, 1470,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 963,
	-1, 1471,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 964,
	-1, 1472,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 965,
	-1, 1473,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 966,
	-1, 1474,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 967,
	-1, 1475,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 968,
	-1, 1476,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 969,
	-1, 1485,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 978,
	-1, 1486,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 979,
	-1, 1487,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 980,
	-1, 1490,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 985,
	-1, 1496,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 987,
	-1, 1498,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 991,
	-1, 1499,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 992,
	-1, 1500,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 993,
	-1, 1501,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 994,
	-1, 1570,
	133, 1180,
	382, 1280,
	-2, 1273,
	-1, 1571,
	133, 1181,
	-2, 1458,
	-1, 1572,
	133, 1182,
	-2, 1362,
	-1, 1573,
	133, 1183,
	-2, 1321,
	-1, 1574,
	133, 1184,
	-2, 1338,
	-1, 1575,
	133, 1185,
	-2, 1360,
	-1, 1576,
	133, 1186,
	-2, 1414,
	-1, 1652,
	1, 810,
	75, 810,
	108, 810,
	118, 810,
	130, 810,
	134, 810,
	138, 810,
	140, 810,
	158, 810,
	167, 810,
	174, 810,
	185, 810,
	189, 810,
	204, 810,
	217, 810,
	219, 810,
	223, 810,
	264, 810,
	266, 810,
	331, 810,
	339, 810,
	350, 810,
	351, 810,
	360, 810,
	381, 810,
	383, 810,
	385, 810,
	386, 810,
	387, 810,
	-2, 809,
	-1, 1812,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 986,
	-1, 1813,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 988,
	-1, 1818,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 989,
	-1, 1836,
	228, 1140,
	-2, 1142,
	-1, 2070,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 990,
	-1, 2075,
	170, 0,
	-2, 1006,
	-1, 2084,
	228, 1141,
	-2, 1143,
	-1, 2126,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1033,
	-1, 2127,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1034,
	-1, 2128,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1035,
	-1, 2132,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1039,
	-1, 2133,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1040,
	-1, 2134,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1041,
	-1, 2269,
	170, 0,
	-2, 1007,
	-1, 2272,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1010,
	-1, 2273,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1012,
	-1, 2396,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1011,
	-1, 2397,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1013,
	-1, 2404,
	170, 0,
	-2, 1042,
	-1, 2483,
	170, 0,
	-2, 1043,
	-1, 2565,
	36, 0,
	151, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1461,
	-1, 2651,
	382, 1529,
	-2, 499,
}

const sqlPrivate = 57344

const sqlLast = 45423

var sqlAct = [...]int{

	653, 2633, 2647, 2364, 2363, 2648, 2631, 2219, 2564, 2614,
	2573, 2537, 2574, 1739, 2575, 2103, 1731, 1249, 2430, 1806,
	2374, 2488, 992, 2229, 2048, 2563, 2337, 74, 596, 651,
	1266, 2323, 612, 1301, 1647, 2251, 1355, 757, 2258, 2186,
	887, 2014, 183, 629, 2253, 2410, 1698, 183, 2022, 650,
	643, 1702, 1203, 1356, 1728, 1697, 183, 2185, 2245, 1207,
	1929, 2016, 1950, 1740, 1186, 183, 2303, 1262, 1701, 1902,
	183, 183, 1665, 1937, 183, 604, 124, 183, 2156, 1648,
	464, 1691, 1901, 1656, 1847, 183, 1525, 479, 26, 1448,
	1245, 975, 1526, 1550, 1217, 1131, 784, 1049, 1786, 1212,
	1513, 1215, 1187, 1534, 1599, 623, 1510, 1443, 1712, 1426,
	1714, 763, 924, 533, 1424, 1802, 461, 974, 1163, 1544,
	1699, 1167, 914, 994, 921, 935, 1733, 1253, 1705, 766,
	1621, 1566, 1634, 745, 513, 1120, 183, 183, 1194, 622,
	1050, 124, 125, 1427, 183, 530, 1385, 1425, 126, 645,
	1177, 174, 1273, 526, 491, 601, 179, 1386, 743, 911,
	1176, 2338, 1054, 554, 2170, 1835, 1732, 2171, 1281, 1281,
	183, 183, 183, 183, 786, 1281, 2664, 2365, 183, 183,
	2657, 2663, 2656, 2365, 2610, 2657, 2657, 2609, 1240, 2608,
	2590, 1240, 2585, 1240, 2336, 2584, 1754, 2581, 2561, 1754,
	2560, 1240, 1769, 2031, 1769, 2532, 2527, 600, 2526, 1762,
	1240, 595, 2388, 2522, 2514, 600, 1204, 1240, 2336, 2485,
	124, 2068, 505, 1762, 2032, 875, 2461, 1065, 1066, 184,
	2336, 2458, 26, 2456, 2441, 1240, 2440, 2336, 1240, 1623,
	2336, 2418, 2415, 760, 2398, 1240, 1240, 2359, 1762, 2357,
	1068, 1754, 2335, 1754, 2316, 2271, 2336, 2244, 1240, 1762,
	1302, 1696, 2239, 646, 1236, 2669, 1696, 593, 1065, 1066,
	2166, 1692, 2079, 592, 2167, 1067, 1754, 1065, 1066, 2042,
	2001, 771, 775, 2002, 1240, 781, 1926, 610, 1839, 1919,
	1240, 1068, 605, 1920, 1840, 747, 1692, 1917, 2159, 1916,
	1068, 1754, 749, 1754, 750, 1065, 1066, 2655, 1095, 1096,
	1097, 1105, 1106, 1107, 1915, 1773, 1067, 1754, 1754, 1754,
	1761, 1098, 1753, 1769, 1762, 1067, 1754, 2533, 1068, 1695,
	1628, 1109, 2665, 1696, 1627, 1294, 1769, 2392, 2644, 1295,
	2388, 2159, 1622, 2059, 1654, 1073, 2139, 2081, 1240, 2002,
	1805, 1784, 1364, 1067, 1181, 1529, 873, 956, 144, 1087,
	2339, 1547, 141, 953, 1872, 1873, 1084, 1890, 1891, 1892,
	952, 1754, 141, 41, 951, 950, 949, 2637, 948, 1846,
	2268, 1282, 1282, 1383, 947, 946, 1073, 44, 1282, 945,
	944, 711, 143, 943, 942, 1073, 751, 748, 586, 585,
	584, 552, 143, 787, 551, 550, 549, 548, 547, 546,
	545, 544, 1088, 1548, 1090, 1091, 1092, 1093, 1887, 543,
	542, 541, 540, 1073, 183, 539, 183, 183, 183, 142,
	183, 538, 537, 536, 521, 520, 183, 135, 519, 142,
	518, 517, 183, 452, 136, 451, 1102, 1110, 450, 449,
	448, 486, 433, 1088, 432, 183, 183, 183, 183, 183,
	431, 422, 1088, 421, 938, 1108, 420, 127, 419, 1549,
	1546, 603, 412, 411, 167, 166, 879, 127, 2031, 165,
	709, 164, 1878, 1100, 163, 67, 183, 162, 1089, 161,
	1088, 601, 160, 1622, 159, 158, 1065, 1066, 157, 156,
	183, 1736, 1105, 1106, 1107, 928, 1287, 1280, 155, 154,
	153, 1945, 152, 1417, 151, 150, 183, 1099, 149, 1068,
	148, 147, 1109, 146, 1893, 145, 183, 1389, 1208, 1089,
	1563, 1561, 1559, 987, 2635, 1557, 2580, 891, 1089, 893,
	2632, 897, 2562, 2547, 1067, 2542, 1551, 2480, 2459, 1888,
	1087, 1094, 1061, 913, 2302, 2381, 2301, 938, 2393, 2297,
	2296, 2289, 2288, 2287, 2283, 2282, 1089, 2281, 917, 917,
	2280, 1872, 1873, 68, 2274, 2250, 2153, 2148, 918, 886,
	2147, 2146, 2089, 2004, 1103, 1872, 1873, 936, 183, 1077,
	1069, 1070, 1071, 1072, 1074, 1075, 2000, 1957, 1953, 128,
	70, 1924, 71, 1921, 1909, 1090, 1091, 1092, 1093, 1900,
	990, 1871, 1868, 957, 1073, 1867, 141, 1865, 1872, 1873,
	1852, 1045, 1851, 1836, 485, 1889, 1545, 104, 1078, 1076,
	1077, 1069, 1070, 1071, 1072, 1074, 1075, 1102, 1110, 1652,
	1069, 1070, 1071, 1072, 1074, 1075, 143, 1061, 758, 1139,
	1521, 1298, 1767, 1101, 788, 601, 1079, 1080, 1086, 1085,
	1081, 1082, 1083, 1104, 1060, 1078, 1076, 1077, 1069, 1070,
	1071, 1072, 1074, 1075, 1100, 884, 2658, 1044, 972, 969,
	2642, 1088, 2298, 142, 141, 2622, 879, 1065, 1066, 1878,
	2654, 135, 985, 939, 1206, 1132, 2621, 1123, 136, 1040,
	1265, 1205, 2105, 1878, 2552, 2551, 2550, 2517, 2509, 2508,
	1068, 1872, 1873, 2499, 143, 1884, 1885, 1886, 2380, 988,
	2497, 127, 2473, 2472, 1883, 1881, 1882, 1874, 1875, 1876,
	1877, 1879, 1880, 2471, 2427, 1067, 1878, 2406, 2389, 2368,
	1046, 1087, 1094, 183, 1047, 183, 141, 593, 2356, 1384,
	1715, 142, 2342, 592, 2294, 2227, 1888, 1089, 1801, 135,
	2225, 1057, 1058, 1522, 2224, 1887, 136, 1279, 183, 183,
	1062, 2222, 2194, 2193, 2174, 1103, 143, 2162, 2074, 1990,
	2046, 1984, 1970, 1969, 1955, 1925, 939, 1899, 1185, 1735,
	1861, 1860, 1192, 1857, 1832, 601, 1090, 1091, 1092, 1093,
	1135, 1827, 1065, 1066, 1515, 1073, 1168, 1165, 1166, 1171,
	1970, 1293, 1639, 142, 1169, 1611, 1555, 1248, 1190, 759,
	1184, 135, 1175, 1161, 1172, 1068, 1160, 1159, 136, 1878,
	1065, 1066, 1889, 1158, 1157, 1156, 1155, 1154, 124, 1153,
	1152, 1151, 1150, 1149, 1101, 1148, 1147, 1146, 1145, 1144,
	1067, 127, 1143, 1068, 1104, 1136, 1078, 1076, 1077, 1069,
	1070, 1071, 1072, 1074, 1075, 1124, 1123, 968, 1383, 960,
	932, 2491, 1088, 938, 183, 2387, 2276, 1180, 1067, 1202,
	786, 2249, 2169, 2165, 1838, 1132, 183, 1943, 1640, 1764,
	2044, 1872, 1873, 1121, 1178, 1383, 1888, 1210, 1383, 1206,
	183, 2017, 1772, 1182, 2391, 1692, 183, 2390, 183, 984,
	183, 1562, 1560, 1558, 183, 1264, 1556, 2384, 2394, 2172,
	1073, 2033, 1208, 1173, 885, 1043, 1238, 1247, 1174, 1993,
	1038, 1987, 1713, 1094, 1874, 1875, 1876, 1877, 1879, 1880,
	1983, 614, 1065, 1066, 940, 1771, 1923, 628, 1089, 1547,
	1876, 1877, 1879, 1880, 1922, 183, 183, 1811, 1421, 1299,
	981, 2049, 938, 1370, 183, 1068, 1141, 183, 1270, 1263,
	1794, 2411, 1889, 168, 1732, 2106, 1241, 1843, 1535, 1164,
	1225, 1874, 1875, 1876, 1877, 1879, 1880, 2640, 786, 1032,
	1067, 2639, 2027, 2181, 416, 2545, 1758, 183, 2605, 2521,
	1428, 1548, 183, 2350, 1774, 2056, 1666, 183, 183, 2452,
	183, 2606, 183, 710, 183, 2451, 183, 913, 740, 2449,
	453, 1218, 1218, 1219, 1219, 1024, 1138, 183, 759, 1033,
	1239, 599, 2448, 183, 183, 738, 736, 940, 438, 2213,
	2210, 734, 183, 2178, 2177, 1856, 1855, 1078, 1076, 1077,
	1069, 1070, 1071, 1072, 1074, 1075, 1854, 1549, 1546, 171,
	1073, 731, 1275, 2652, 183, 1272, 1853, 1814, 786, 1757,
	1687, 1883, 1881, 1882, 1874, 1875, 1876, 1877, 1879, 1880,
	1683, 1680, 1497, 1669, 1390, 1179, 872, 2362, 1615, 1614,
	598, 764, 1382, 1729, 1458, 1414, 982, 124, 1371, 2217,
	439, 1415, 939, 1220, 1220, 1041, 457, 1296, 969, 787,
	1391, 1297, 1358, 1512, 1512, 1357, 2218, 773, 777, 588,
	783, 2432, 1361, 2520, 1997, 1243, 172, 591, 997, 2196,
	1387, 1375, 1872, 1873, 1551, 1890, 1891, 1892, 1405, 983,
	500, 1226, 1394, 1658, 2558, 1551, 600, 1395, 1430, 1276,
	1527, 601, 2205, 1399, 2045, 1400, 601, 1401, 1398, 1402,
	590, 1403, 658, 1223, 1457, 1069, 1070, 1071, 1072, 1074,
	1075, 2597, 1519, 456, 591, 1658, 1247, 1517, 1409, 1411,
	183, 1224, 183, 2024, 1657, 183, 1887, 1872, 1873, 1422,
	1429, 939, 1668, 1423, 2099, 1234, 183, 593, 1075, 1229,
	593, 593, 2577, 1439, 1992, 786, 1440, 1441, 183, 1447,
	1031, 1233, 183, 1722, 1545, 183, 173, 787, 1986, 183,
	1064, 967, 1535, 183, 1308, 1530, 880, 882, 1532, 183,
	1227, 1620, 2502, 1231, 1384, 1715, 183, 786, 2057, 601,
	1765, 183, 1218, 1206, 1219, 1379, 1594, 1413, 2605, 183,
	1878, 1232, 1162, 1018, 597, 1523, 2624, 1981, 1520, 1880,
	1042, 1384, 1715, 1641, 1384, 1715, 183, 2510, 424, 2062,
	1659, 1551, 2055, 1803, 1804, 441, 440, 183, 169, 183,
	1724, 183, 1577, 1667, 183, 1037, 183, 2596, 183, 183,
	1281, 183, 183, 1019, 2634, 1631, 938, 787, 1645, 2578,
	183, 1642, 2632, 1670, 1672, 1878, 2617, 1071, 1072, 1074,
	1075, 2197, 1677, 958, 1617, 1618, 2402, 1888, 170, 962,
	1685, 1626, 2511, 2365, 1220, 455, 1449, 1456, 616, 1308,
	1308, 1636, 1637, 1689, 1675, 1632, 742, 2455, 1752, 741,
	1681, 1210, 1221, 1221, 1230, 1023, 614, 1662, 1688, 1118,
	413, 2433, 1343, 940, 429, 458, 732, 732, 2579, 1494,
	788, 1734, 733, 1734, 1716, 454, 1720, 1721, 1723, 998,
	124, 447, 1888, 1859, 1374, 1373, 124, 1383, 1380, 1028,
	1711, 1760, 732, 1635, 1651, 978, 1816, 1511, 1362, 777,
	786, 442, 600, 1889, 1746, 2096, 2595, 917, 183, 917,
	1749, 2025, 1738, 2203, 783, 1777, 1747, 1508, 1748, 999,
	1584, 1755, 996, 1750, 183, 183, 183, 1779, 183, 936,
	1759, 1756, 2060, 1506, 589, 2263, 2061, 1393, 1766, 1113,
	1114, 1115, 1116, 1117, 787, 1655, 2576, 1768, 1996, 1126,
	1780, 2604, 940, 2602, 1518, 499, 2024, 183, 1889, 1134,
	1029, 2097, 1778, 989, 973, 579, 979, 1343, 1343, 1169,
	980, 1172, 1005, 2615, 1377, 2529, 787, 2373, 788, 2625,
	1166, 1165, 1726, 609, 1492, 1495, 1052, 1193, 1216, 1872,
	1873, 1775, 124, 1884, 1885, 1886, 1785, 510, 2063, 963,
	2530, 955, 1883, 1881, 1882, 1874, 1875, 1876, 1877, 1879,
	1880, 492, 1259, 1282, 1063, 966, 1030, 489, 1502, 1052,
	1053, 1491, 2292, 2443, 2442, 2425, 1503, 1369, 1504, 2616,
	414, 1048, 1509, 1789, 497, 939, 2494, 1791, 1551, 1793,
	493, 2346, 2630, 1798, 1197, 777, 1197, 1797, 1349, 580,
	1824, 1260, 2618, 601, 425, 1800, 2180, 1051, 788, 1882,
	1874, 1875, 1876, 1877, 1879, 1880, 1822, 978, 1200, 492,
	1200, 1378, 494, 1221, 1188, 1188, 1845, 2095, 2135, 1367,
	2349, 614, 1966, 423, 1633, 1053, 1195, 2348, 1435, 1719,
	1051, 1962, 497, 1368, 2538, 1198, 496, 1198, 493, 1727,
	1271, 1250, 415, 1951, 1408, 1365, 1817, 1878, 430, 1052,
	2643, 1815, 1254, 426, 2230, 443, 1196, 2375, 1053, 889,
	888, 176, 1493, 427, 508, 1940, 2426, 601, 713, 787,
	494, 1939, 1831, 978, 183, 786, 1972, 2293, 979, 502,
	183, 183, 980, 1505, 183, 1971, 1809, 1842, 1927, 183,
	1507, 1819, 183, 1933, 496, 1630, 2345, 1629, 444, 2629,
	183, 1820, 1255, 1257, 581, 1825, 183, 183, 183, 1436,
	1934, 1256, 183, 978, 1888, 183, 1199, 910, 1199, 1952,
	1051, 183, 183, 183, 183, 183, 1947, 2136, 445, 1006,
	446, 183, 908, 2137, 183, 788, 1284, 598, 183, 1286,
	1717, 1718, 2347, 1289, 979, 2259, 899, 183, 980, 2220,
	1946, 1906, 1907, 1908, 495, 2366, 1995, 183, 2304, 183,
	2423, 183, 1956, 1963, 3, 764, 1213, 788, 1942, 484,
	34, 1932, 2157, 1931, 1554, 1928, 1904, 183, 2405, 1935,
	1936, 183, 2291, 1941, 730, 582, 183, 2003, 183, 2005,
	1889, 1938, 2424, 1384, 1381, 183, 2216, 1903, 2073, 1958,
	1998, 1866, 1258, 1826, 1770, 1694, 1686, 712, 183, 938,
	1048, 498, 495, 601, 1982, 1679, 1821, 1036, 583, 1035,
	938, 183, 1989, 1823, 961, 1795, 940, 1980, 1127, 1406,
	1397, 483, 33, 1142, 507, 1553, 2572, 2029, 1237, 874,
	877, 878, 482, 30, 614, 614, 579, 2006, 2535, 501,
	655, 1027, 2320, 1016, 1014, 2201, 2199, 1416, 1012, 2179,
	183, 2013, 2041, 2011, 609, 1730, 1710, 1022, 1291, 498,
	1010, 1290, 2008, 2050, 2007, 1288, 2026, 481, 80, 2020,
	1285, 2009, 1283, 1246, 909, 2034, 1235, 1228, 1222, 1883,
	1881, 1882, 1874, 1875, 1876, 1877, 1879, 1880, 1008, 907,
	2086, 480, 79, 777, 787, 1274, 2040, 1274, 2015, 769,
	183, 2076, 1002, 1432, 34, 1437, 2054, 735, 737, 2051,
	788, 1444, 2466, 477, 22, 2606, 1055, 2091, 2092, 2093,
	580, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
	1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 2066, 1496, 2064, 1498, 1499, 1500, 1501,
	2386, 2385, 2082, 1388, 1967, 2080, 33, 1308, 2246, 2052,
	2053, 1807, 1026, 1524, 1015, 1013, 2085, 30, 2468, 1011,
	1126, 183, 2058, 2331, 906, 1021, 2107, 183, 2098, 2100,
	2101, 1009, 2112, 2109, 1056, 487, 183, 183, 1674, 1564,
	1565, 1967, 2114, 1581, 1308, 1593, 1595, 1600, 1603, 1604,
	1605, 2141, 80, 2238, 1342, 1658, 478, 23, 1690, 1007,
	1682, 2168, 2332, 1678, 1673, 2142, 1796, 488, 939, 1418,
	476, 28, 2140, 1001, 2504, 581, 79, 2339, 1808, 939,
	2191, 124, 2175, 183, 1000, 183, 2155, 489, 2482, 754,
	2161, 2158, 2160, 2173, 183, 1658, 2454, 938, 22, 2215,
	2190, 2192, 2305, 2043, 1671, 2226, 1308, 2206, 509, 755,
	1059, 2211, 183, 183, 2207, 2223, 2176, 2214, 2207, 2232,
	2164, 2183, 1684, 1193, 2207, 475, 20, 2240, 473, 19,
	183, 474, 18, 468, 15, 1343, 469, 16, 1676, 492,
	183, 2534, 786, 183, 183, 2204, 2243, 2371, 2234, 786,
	1737, 2221, 2235, 1419, 1420, 905, 582, 2231, 1725, 1342,
	1342, 1709, 497, 1292, 1619, 1360, 2233, 2265, 493, 2236,
	1300, 1308, 1343, 2242, 2613, 2241, 2628, 2327, 2417, 2328,
	2310, 2247, 1197, 467, 14, 788, 183, 756, 2270, 583,
	1872, 1873, 2248, 472, 12, 466, 10, 1065, 1066, 1359,
	494, 23, 2154, 1307, 1449, 2110, 1200, 1308, 1308, 2330,
	471, 7, 1931, 1449, 2115, 28, 1308, 1308, 2333, 470,
	6, 2102, 1195, 764, 496, 465, 5, 1782, 1781, 1065,
	1066, 2047, 1782, 1198, 1343, 1948, 1918, 1783, 2260, 764,
	183, 1616, 1653, 183, 1613, 2266, 2145, 1612, 1543, 1308,
	777, 1129, 1196, 786, 183, 183, 777, 2278, 183, 183,
	183, 2094, 2290, 783, 2010, 1139, 1137, 1034, 1025, 1020,
	20, 1017, 1003, 19, 965, 183, 18, 1067, 15, 1363,
	183, 16, 183, 587, 183, 183, 183, 2431, 2314, 2308,
	490, 183, 1396, 1004, 183, 2340, 1944, 938, 2309, 1343,
	2329, 2315, 1638, 2191, 1743, 183, 183, 2307, 1307, 1307,
	2528, 2319, 938, 2311, 1199, 783, 783, 2284, 1858, 940,
	2487, 2344, 2401, 2190, 2192, 1552, 939, 1140, 14, 56,
	940, 2343, 2191, 2361, 2377, 1343, 1343, 2191, 12, 2306,
	10, 2188, 495, 632, 1343, 1343, 2321, 2182, 1704, 2312,
	1703, 2369, 2190, 2192, 789, 7, 1372, 2190, 2192, 1127,
	2367, 2370, 1065, 1066, 6, 2372, 2395, 1537, 2378, 2383,
	5, 787, 2376, 654, 1568, 1450, 729, 1343, 787, 656,
	1569, 1569, 1582, 1812, 1813, 1068, 1602, 1305, 2400, 1818,
	1606, 1607, 1609, 657, 1306, 1170, 644, 1303, 933, 498,
	1741, 183, 1376, 183, 1516, 786, 183, 2382, 2407, 1533,
	1067, 1841, 1133, 624, 183, 636, 635, 1531, 1308, 959,
	786, 1837, 1949, 2023, 2379, 1434, 1799, 1844, 1431, 2019,
	1848, 2198, 428, 2414, 1869, 931, 1591, 2435, 638, 1583,
	2437, 1790, 783, 1792, 1579, 777, 2191, 1862, 1251, 2416,
	1252, 1039, 2419, 1191, 183, 1119, 2434, 938, 1742, 1247,
	986, 183, 1438, 2030, 1763, 1183, 2190, 2192, 1442, 183,
	183, 938, 938, 753, 1810, 183, 752, 2641, 2191, 2464,
	180, 1126, 787, 1366, 1776, 417, 2453, 1112, 1600, 1600,
	1600, 1111, 183, 2207, 434, 739, 2496, 183, 2190, 2192,
	2465, 2421, 2469, 459, 183, 2475, 2457, 2467, 503, 180,
	2481, 2478, 511, 2474, 1188, 516, 2436, 2463, 2498, 614,
	2484, 2479, 977, 535, 2476, 2477, 939, 976, 1261, 183,
	183, 2490, 2492, 1965, 2493, 2623, 183, 2503, 2195, 2460,
	2544, 939, 140, 137, 938, 2500, 1343, 2515, 2501, 183,
	139, 138, 1994, 938, 938, 2513, 83, 32, 31, 2507,
	2516, 1585, 103, 102, 101, 100, 2518, 99, 98, 2519,
	97, 96, 95, 94, 746, 746, 93, 940, 183, 601,
	183, 92, 417, 183, 1192, 786, 91, 90, 89, 2524,
	2525, 88, 87, 86, 85, 2035, 2036, 531, 2037, 2038,
	2541, 2553, 528, 82, 2555, 81, 29, 25, 417, 417,
	779, 417, 107, 2554, 183, 24, 180, 876, 78, 2559,
	2557, 77, 788, 27, 2021, 17, 2540, 2191, 11, 788,
	2571, 183, 183, 183, 787, 2570, 2569, 21, 1308, 183,
	61, 2582, 2589, 62, 60, 59, 2039, 2190, 2192, 787,
	58, 764, 2591, 183, 2594, 2556, 13, 764, 764, 1345,
	54, 764, 53, 614, 614, 2592, 2593, 52, 2603, 2601,
	50, 49, 48, 47, 2607, 9, 614, 2586, 2587, 2588,
	106, 2546, 2257, 1959, 1065, 1066, 939, 45, 2612, 2611,
	8, 2445, 43, 2065, 1308, 42, 2619, 1444, 2620, 2626,
	939, 939, 2627, 2069, 105, 119, 2070, 1068, 1985, 116,
	118, 115, 117, 786, 121, 786, 120, 113, 2075, 111,
	112, 114, 1872, 1873, 1999, 2645, 2646, 2083, 110, 109,
	122, 2653, 1067, 788, 39, 2087, 38, 2659, 2039, 37,
	36, 2662, 2660, 2661, 35, 2, 1830, 2668, 2666, 2667,
	1308, 2670, 1, 1833, 2012, 0, 0, 1342, 2111, 607,
	0, 579, 2113, 1246, 1345, 1345, 1343, 0, 0, 0,
	1849, 1850, 1246, 939, 0, 0, 0, 940, 0, 609,
	0, 0, 939, 939, 633, 75, 0, 0, 0, 0,
	0, 0, 940, 0, 1342, 2143, 2144, 0, 1344, 0,
	0, 0, 1073, 0, 2150, 2151, 2152, 0, 0, 2636,
	0, 2638, 0, 608, 787, 0, 0, 0, 0, 0,
	1898, 0, 1343, 0, 2200, 0, 2202, 1602, 1602, 1602,
	0, 2163, 1911, 0, 0, 0, 0, 2067, 0, 0,
	1878, 1304, 0, 0, 0, 580, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 1342, 0, 0, 0,
	0, 2184, 535, 0, 535, 895, 535, 0, 900, 1088,
	0, 0, 0, 0, 903, 0, 0, 0, 1343, 0,
	417, 0, 0, 0, 0, 788, 0, 0, 0, 0,
	0, 0, 0, 535, 535, 417, 925, 876, 0, 0,
	788, 0, 0, 1344, 1344, 0, 1307, 1888, 0, 594,
	0, 0, 602, 0, 0, 0, 1188, 0, 0, 1585,
	1585, 1342, 0, 0, 535, 614, 0, 0, 765, 75,
	0, 0, 0, 0, 0, 0, 0, 940, 535, 0,
	0, 0, 787, 1307, 787, 1089, 1304, 1304, 0, 0,
	0, 940, 940, 0, 964, 0, 0, 1342, 1342, 0,
	581, 0, 0, 0, 535, 2269, 1342, 1342, 764, 2272,
	2273, 0, 0, 2275, 0, 2331, 0, 0, 2324, 0,
	2277, 0, 2279, 1889, 0, 0, 0, 0, 0, 2322,
	0, 0, 0, 0, 2326, 1585, 1585, 1585, 2286, 1342,
	0, 1828, 1829, 0, 0, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 2332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 0, 417, 0, 0, 0,
	0, 2295, 0, 940, 940, 0, 0, 2325, 0, 606,
	0, 582, 0, 0, 0, 1076, 1077, 1069, 1070, 1071,
	1072, 1074, 1075, 0, 0, 0, 0, 0, 0, 1743,
	764, 0, 0, 0, 0, 788, 0, 0, 0, 0,
	1307, 0, 0, 0, 583, 0, 0, 1895, 1896, 1897,
	0, 2341, 0, 1881, 1882, 1874, 1875, 1876, 1877, 1879,
	1880, 2262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1307, 1307, 0, 0,
	0, 0, 0, 0, 0, 1307, 1307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2327,
	0, 2328, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2149, 0, 0, 0, 0, 0, 0, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2396,
	2397, 2330, 0, 0, 0, 0, 0, 0, 1342, 0,
	2333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 0, 746, 0, 0, 0, 764, 0, 0,
	2409, 0, 0, 788, 0, 788, 2412, 0, 0, 2446,
	2447, 0, 0, 0, 0, 0, 417, 417, 0, 0,
	0, 0, 0, 0, 0, 2209, 0, 0, 0, 0,
	0, 2212, 0, 0, 1585, 1585, 0, 0, 0, 0,
	0, 2353, 0, 0, 0, 0, 0, 0, 2358, 0,
	2444, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 0, 2329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1585, 1585, 1585, 1585, 1585, 1585, 1585,
	1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585,
	1585, 1585, 0, 1585, 0, 0, 2071, 2072, 0, 0,
	0, 0, 180, 0, 0, 0, 0, 1307, 0, 2495,
	0, 0, 0, 0, 417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1269, 0,
	0, 0, 0, 0, 417, 0, 417, 0, 417, 0,
	0, 0, 1277, 0, 0, 0, 0, 0, 0, 0,
	0, 2429, 1345, 614, 0, 2116, 2117, 2118, 2119, 2120,
	2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130,
	2131, 2132, 2133, 2134, 0, 2138, 0, 0, 1342, 594,
	0, 0, 0, 535, 180, 0, 0, 0, 0, 1345,
	0, 2462, 180, 0, 0, 535, 0, 0, 0, 0,
	1122, 0, 1125, 0, 0, 0, 0, 0, 0, 1130,
	0, 2568, 2568, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 535, 0, 2583, 0, 0,
	535, 0, 0, 0, 1342, 180, 535, 0, 535, 0,
	535, 0, 535, 0, 535, 0, 0, 2568, 0, 0,
	0, 1345, 0, 0, 0, 1407, 0, 0, 0, 0,
	0, 535, 535, 0, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 2512, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 1344, 535, 0, 0, 2568, 1872, 1873, 0, 1890,
	1891, 1892, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2267, 0, 0, 0, 1345, 0, 0, 0,
	2543, 0, 0, 0, 2649, 0, 2413, 1307, 1344, 0,
	0, 0, 0, 0, 1304, 0, 2649, 75, 0, 2649,
	2649, 0, 1209, 0, 0, 0, 0, 0, 0, 0,
	1887, 0, 1345, 1345, 0, 40, 0, 0, 0, 0,
	0, 1345, 1345, 2439, 0, 0, 41, 0, 0, 0,
	0, 1304, 0, 0, 0, 0, 1743, 2450, 0, 0,
	44, 0, 0, 1307, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 1345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 516, 0,
	746, 0, 0, 876, 1878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 417, 0, 0, 0, 0, 0,
	0, 0, 0, 1304, 0, 63, 1650, 0, 0, 1307,
	417, 0, 64, 417, 486, 65, 0, 1663, 0, 0,
	0, 417, 0, 0, 0, 1344, 1893, 417, 0, 40,
	0, 0, 0, 0, 417, 0, 0, 0, 0, 1693,
	41, 0, 0, 0, 0, 0, 0, 1700, 67, 0,
	0, 1888, 0, 0, 44, 0, 0, 0, 0, 0,
	1585, 1344, 1344, 0, 876, 0, 0, 0, 1304, 0,
	1344, 1344, 0, 2531, 0, 417, 0, 1745, 0, 535,
	51, 0, 535, 0, 535, 0, 417, 417, 0, 1751,
	876, 0, 0, 0, 0, 0, 0, 0, 1663, 2548,
	2549, 1585, 0, 1344, 1304, 1304, 0, 0, 0, 63,
	0, 0, 0, 1304, 1304, 0, 64, 0, 486, 65,
	0, 0, 0, 0, 0, 0, 0, 1889, 0, 0,
	0, 0, 0, 1345, 0, 0, 68, 0, 0, 0,
	0, 0, 2404, 0, 0, 0, 1304, 0, 0, 0,
	0, 0, 67, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 70, 0, 71, 75, 0, 0, 0,
	0, 0, 0, 0, 1585, 0, 0, 0, 0, 141,
	0, 0, 0, 2428, 1788, 0, 0, 485, 0, 0,
	104, 0, 0, 0, 0, 0, 1787, 0, 0, 594,
	0, 0, 594, 594, 0, 0, 0, 0, 0, 143,
	0, 0, 417, 417, 417, 0, 417, 1884, 1885, 1886,
	0, 0, 0, 0, 0, 0, 1883, 1881, 1882, 1874,
	1875, 1876, 1877, 1879, 1880, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 417, 142, 0, 0, 0,
	0, 0, 0, 0, 135, 1514, 2483, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 128, 70, 602, 71,
	0, 0, 1344, 1125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 127, 0, 0, 0, 1404, 0,
	0, 485, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 0, 1304, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	765, 0, 0, 0, 0, 0, 1201, 0, 0, 0,
	142, 0, 0, 1345, 0, 0, 1209, 0, 135, 0,
	0, 0, 40, 0, 0, 136, 0, 0, 0, 75,
	0, 0, 0, 41, 0, 0, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	0, 0, 0, 51, 0, 0, 0, 0, 75, 0,
	75, 0, 417, 0, 0, 0, 0, 0, 417, 417,
	0, 0, 417, 0, 0, 0, 0, 1650, 0, 75,
	1650, 0, 63, 0, 0, 75, 0, 0, 1954, 64,
	0, 486, 65, 0, 417, 1960, 1961, 0, 0, 0,
	1663, 0, 0, 1968, 0, 1345, 0, 0, 0, 1973,
	1974, 1976, 1978, 1979, 0, 0, 0, 0, 0, 417,
	0, 0, 1988, 0, 0, 67, 1991, 0, 0, 0,
	0, 0, 1344, 0, 0, 417, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1269, 0, 1269, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 0, 2018,
	0, 0, 0, 0, 417, 1304, 2028, 0, 0, 0,
	0, 0, 0, 417, 0, 0, 0, 0, 1344, 0,
	0, 75, 0, 0, 0, 0, 1787, 0, 1065, 1066,
	0, 1095, 1096, 1097, 1105, 1106, 1107, 0, 0, 1787,
	0, 0, 0, 68, 1098, 0, 0, 0, 0, 0,
	0, 1068, 0, 0, 1109, 0, 0, 0, 0, 0,
	0, 1304, 0, 0, 0, 0, 0, 0, 0, 128,
	70, 0, 71, 0, 1344, 0, 1067, 0, 417, 0,
	0, 0, 1087, 0, 0, 0, 141, 0, 0, 1084,
	0, 0, 0, 0, 485, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1514, 0, 0, 0, 0, 0, 143, 1304, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2104, 0,
	1125, 0, 0, 0, 0, 0, 0, 1090, 1091, 1092,
	1093, 0, 0, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 0, 0, 0, 136, 1102,
	1110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1108, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1125, 0, 1100, 0, 0, 417,
	0, 0, 0, 1088, 0, 1650, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 1650, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 765, 2187,
	1099, 0, 0, 0, 765, 765, 0, 0, 765, 0,
	0, 0, 2208, 0, 0, 0, 2208, 0, 0, 0,
	0, 0, 2208, 0, 0, 0, 0, 0, 0, 0,
	0, 1663, 0, 1269, 1094, 0, 0, 0, 0, 0,
	0, 0, 2228, 0, 0, 0, 0, 0, 0, 1089,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 75,
	417, 417, 0, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2254, 0,
	0, 0, 0, 0, 75, 0, 0, 0, 2256, 0,
	0, 2261, 417, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2285, 0, 1101, 0, 0, 1079,
	1080, 1086, 1085, 1081, 1082, 1083, 1104, 0, 1078, 1076,
	1077, 1069, 1070, 1071, 1072, 1074, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 1914, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 417, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1650, 876, 0, 0, 2317, 2318, 1663, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2187, 876, 0, 0, 0, 0, 2351, 0,
	2352, 0, 417, 2354, 2355, 0, 0, 0, 0, 417,
	0, 0, 2360, 0, 0, 0, 0, 0, 0, 0,
	0, 2187, 0, 876, 1700, 0, 2187, 0, 0, 0,
	0, 0, 0, 0, 1065, 1066, 0, 1095, 1096, 1097,
	1105, 1106, 1107, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 1068, 0, 0,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 765, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1663,
	0, 2420, 0, 0, 2422, 0, 0, 0, 0, 0,
	0, 0, 417, 0, 0, 2187, 0, 0, 0, 0,
	0, 0, 0, 1090, 1091, 1092, 1093, 0, 0, 0,
	0, 0, 1073, 0, 0, 0, 0, 0, 0, 0,
	0, 2208, 0, 0, 0, 0, 0, 2187, 0, 0,
	0, 0, 417, 0, 0, 1102, 1110, 765, 0, 876,
	0, 0, 0, 0, 0, 0, 0, 2254, 2254, 0,
	0, 0, 0, 876, 1108, 0, 0, 0, 0, 0,
	0, 0, 40, 0, 0, 0, 0, 0, 0, 0,
	2489, 0, 1100, 41, 130, 1650, 0, 0, 0, 1088,
	0, 0, 1269, 0, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 0, 1099, 2505, 2506, 0,
	0, 46, 0, 51, 417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2523, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 0, 57, 0,
	1094, 0, 63, 0, 0, 133, 0, 0, 0, 64,
	0, 123, 65, 0, 0, 1089, 2539, 0, 876, 0,
	0, 417, 0, 0, 765, 0, 0, 0, 0, 0,
	0, 0, 0, 1103, 66, 0, 2187, 0, 0, 0,
	0, 0, 0, 0, 0, 67, 0, 0, 0, 0,
	0, 0, 2489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	876, 876, 0, 0, 0, 0, 0, 417, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2600, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 0, 75, 1079, 1080, 1086, 1085, 1081,
	1082, 1083, 1104, 0, 1078, 1076, 1077, 1069, 1070, 1071,
	1072, 1074, 1075, 0, 0, 0, 0, 0, 0, 0,
	0, 1913, 0, 68, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 128,
	70, 0, 71, 0, 72, 0, 134, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 75, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 0, 0, 2470,
	0, 135, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 785,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 4, 185, 186, 791, 187, 792,
	793, 794, 795, 352, 796, 797, 798, 799, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 800, 192,
	359, 360, 193, 194, 195, 801, 802, 361, 362, 363,
	803, 196, 364, 804, 790, 805, 197, 198, 199, 0,
	201, 202, 203, 200, 806, 204, 1125, 205, 206, 807,
	714, 207, 208, 209, 808, 809, 811, 810, 812, 813,
	814, 210, 211, 418, 212, 365, 213, 366, 367, 815,
	214, 816, 215, 817, 216, 818, 819, 217, 218, 820,
	219, 821, 0, 822, 368, 220, 222, 221, 223, 369,
	370, 823, 715, 824, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 825, 227, 826, 827, 716,
	828, 228, 374, 829, 375, 830, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 718, 831, 378, 237,
	832, 234, 833, 717, 235, 379, 236, 380, 381, 382,
	383, 384, 834, 385, 835, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 836, 245, 244, 837, 388,
	721, 246, 247, 722, 838, 248, 249, 839, 840, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 841, 842, 843, 390, 261, 391,
	262, 263, 844, 264, 845, 846, 265, 847, 848, 266,
	392, 725, 267, 726, 393, 268, 269, 270, 271, 272,
	849, 273, 394, 274, 395, 275, 850, 276, 277, 278,
	279, 280, 396, 281, 282, 851, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 852,
	295, 727, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 853, 308, 309, 398, 307, 310, 311, 854,
	312, 299, 300, 313, 728, 314, 399, 400, 315, 855,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	856, 323, 857, 324, 325, 326, 327, 328, 329, 330,
	331, 858, 403, 404, 405, 859, 860, 332, 333, 406,
	407, 861, 334, 335, 336, 337, 862, 863, 338, 339,
	340, 341, 864, 342, 865, 408, 343, 344, 345, 409,
	410, 866, 867, 346, 868, 869, 870, 871, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 785,
	0, 0, 0, 0, 0, 1643, 0, 0, 0, 0,
	0, 0, 0, 0, 1644, 185, 186, 791, 187, 792,
	793, 794, 795, 352, 796, 797, 798, 799, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 800, 192,
	359, 360, 193, 194, 195, 801, 802, 361, 362, 363,
	803, 196, 364, 804, 790, 805, 197, 198, 199, 0,
	201, 202, 203, 200, 806, 204, 0, 205, 206, 807,
	714, 207, 208, 209, 808, 809, 811, 810, 812, 813,
	814, 210, 211, 418, 212, 365, 213, 366, 367, 815,
	214, 816, 215, 817, 216, 818, 819, 217, 218, 820,
	219, 821, 0, 822, 368, 220, 222, 221, 223, 369,
	370, 823, 715, 824, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 825, 227, 826, 827, 716,
	828, 228, 374, 829, 375, 830, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 718, 831, 378, 237,
	832, 234, 833, 717, 235, 379, 236, 380, 381, 382,
	383, 384, 834, 385, 835, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 836, 245, 244, 837, 388,
	721, 246, 247, 722, 838, 248, 249, 839, 840, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 841, 842, 843, 390, 261, 391,
	262, 263, 844, 264, 845, 846, 265, 847, 848, 266,
	392, 725, 267, 726, 393, 268, 269, 270, 271, 272,
	849, 273, 394, 274, 395, 275, 850, 276, 277, 278,
	279, 280, 396, 281, 282, 851, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 852,
	295, 727, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 853, 308, 309, 398, 307, 310, 311, 854,
	312, 299, 300, 313, 728, 314, 399, 400, 315, 855,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	856, 323, 857, 324, 325, 326, 327, 328, 329, 330,
	331, 858, 403, 404, 405, 859, 860, 332, 333, 406,
	407, 861, 334, 335, 336, 337, 862, 863, 338, 339,
	340, 341, 864, 342, 865, 408, 343, 344, 345, 409,
	410, 866, 867, 346, 868, 869, 870, 871, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	785, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2313, 185, 186, 791, 187,
	792, 793, 794, 795, 352, 796, 797, 798, 799, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 800,
	192, 359, 360, 193, 194, 195, 801, 802, 361, 362,
	363, 803, 196, 364, 804, 790, 805, 197, 198, 199,
	0, 201, 202, 203, 200, 806, 204, 0, 205, 206,
	807, 714, 207, 208, 209, 808, 809, 811, 810, 812,
	813, 814, 210, 211, 418, 212, 365, 213, 366, 367,
	815, 214, 816, 215, 817, 216, 818, 819, 217, 218,
	820, 219, 821, 0, 822, 368, 220, 222, 221, 223,
	369, 370, 823, 715, 824, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 825, 227, 826, 827,
	716, 828, 228, 374, 829, 375, 830, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 718, 831, 378,
	237, 832, 234, 833, 717, 235, 379, 236, 380, 381,
	382, 383, 384, 834, 385, 835, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 836, 245, 244, 837,
	388, 721, 246, 247, 722, 838, 248, 249, 839, 840,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 841, 842, 843, 390, 261,
	391, 262, 263, 844, 264, 845, 846, 265, 847, 848,
	266, 392, 725, 267, 726, 393, 268, 269, 270, 271,
	272, 849, 273, 394, 274, 395, 275, 850, 276, 277,
	278, 279, 280, 396, 281, 282, 851, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	852, 295, 727, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 853, 308, 309, 398, 307, 310, 311,
	854, 312, 299, 300, 313, 728, 314, 399, 400, 315,
	855, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 856, 323, 857, 324, 325, 326, 327, 328, 329,
	330, 331, 858, 403, 404, 405, 859, 860, 332, 333,
	406, 407, 861, 334, 335, 336, 337, 862, 863, 338,
	339, 340, 341, 864, 342, 865, 408, 343, 344, 345,
	409, 410, 866, 867, 346, 868, 869, 870, 871, 347,
	348, 349, 350, 351, 0, 0, 785, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1242, 185, 186, 791, 187, 792, 793, 794, 795,
	352, 796, 797, 798, 799, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 800, 192, 359, 360, 193,
	194, 195, 801, 802, 361, 362, 363, 803, 196, 364,
	804, 790, 805, 197, 198, 199, 0, 201, 202, 203,
	200, 806, 204, 0, 205, 206, 807, 714, 207, 208,
	209, 808, 809, 811, 810, 812, 813, 814, 210, 211,
	418, 212, 365, 213, 366, 367, 815, 214, 816, 215,
	817, 216, 818, 819, 217, 218, 820, 219, 821, 0,
	822, 368, 220, 222, 221, 223, 369, 370, 823, 715,
	824, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 825, 227, 826, 827, 716, 828, 228, 374,
	829, 375, 830, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 718, 831, 378, 237, 832, 234, 833,
	717, 235, 379, 236, 380, 381, 382, 383, 384, 834,
	385, 835, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 836, 245, 244, 837, 388, 721, 246, 247,
	722, 838, 248, 249, 839, 840, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 841, 842, 843, 390, 261, 391, 262, 263, 844,
	264, 845, 846, 265, 847, 848, 266, 392, 725, 267,
	726, 393, 268, 269, 270, 271, 272, 849, 273, 394,
	274, 395, 275, 850, 276, 277, 278, 279, 280, 396,
	281, 282, 851, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 852, 295, 727, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 853,
	308, 309, 398, 307, 310, 311, 854, 312, 299, 300,
	313, 728, 314, 399, 400, 315, 855, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 856, 323, 857,
	324, 325, 326, 327, 328, 329, 330, 331, 858, 403,
	404, 405, 859, 860, 332, 333, 406, 407, 861, 334,
	335, 336, 337, 862, 863, 338, 339, 340, 341, 864,
	342, 865, 408, 343, 344, 345, 409, 410, 866, 867,
	346, 868, 869, 870, 871, 347, 348, 349, 350, 351,
	1542, 0, 652, 641, 642, 639, 640, 631, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	1539, 187, 0, 0, 0, 0, 669, 634, 0, 0,
	0, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 0, 214, 0, 215, 0, 216, 1540, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 620, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 626, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 409, 708, 1538, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 621, 0, 652, 641,
	642, 639, 640, 631, 0, 0, 619, 0, 0, 0,
	0, 617, 618, 1541, 185, 186, 0, 187, 0, 0,
	627, 1536, 669, 634, 0, 0, 630, 188, 189, 190,
	353, 684, 355, 685, 191, 686, 687, 0, 192, 359,
	360, 193, 194, 195, 637, 668, 688, 689, 363, 0,
	196, 680, 0, 660, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 209, 0, 661, 662, 664, 0, 663, 665,
	210, 211, 418, 212, 690, 213, 691, 692, 615, 214,
	0, 215, 0, 216, 0, 0, 683, 218, 0, 219,
	0, 0, 0, 625, 220, 222, 221, 223, 670, 671,
	648, 715, 0, 0, 0, 0, 0, 224, 225, 693,
	694, 695, 0, 226, 0, 227, 0, 0, 716, 0,
	228, 681, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 677, 679, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 696, 236, 697, 698, 699, 700,
	701, 0, 659, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 682, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 620, 0, 649, 678, 261, 702, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 672, 268, 269, 270, 271, 272, 0,
	273, 673, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 703, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 626, 298, 0, 302, 303, 304, 305,
	306, 141, 308, 309, 398, 307, 310, 311, 666, 312,
	299, 300, 313, 728, 314, 704, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 705, 319, 320, 674, 0,
	323, 143, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 706, 707, 0, 0, 332, 333, 675, 676,
	647, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 667, 342, 0, 408, 343, 344, 345, 941, 708,
	0, 0, 346, 0, 0, 0, 135, 347, 348, 349,
	350, 351, 621, 136, 603, 0, 652, 641, 642, 639,
	640, 631, 619, 0, 0, 0, 0, 617, 618, 0,
	0, 0, 185, 186, 0, 187, 1128, 0, 0, 0,
	669, 634, 630, 0, 0, 188, 189, 190, 353, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 213, 691, 692, 0, 214, 0, 215,
	0, 216, 0, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 620, 0, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 626, 298, 0, 302, 303, 304, 305, 306, 141,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 143,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 941, 708, 0, 0,
	346, 0, 0, 0, 135, 347, 348, 349, 350, 351,
	621, 136, 652, 641, 642, 639, 640, 631, 0, 0,
	619, 0, 0, 0, 0, 617, 618, 0, 185, 186,
	0, 187, 0, 0, 1128, 0, 669, 634, 0, 0,
	630, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 0, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 620, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 626, 298, 0,
	302, 303, 304, 305, 306, 141, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 143, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 941, 708, 0, 0, 346, 0, 0, 0,
	135, 347, 348, 349, 350, 351, 621, 136, 652, 641,
	642, 639, 640, 631, 0, 0, 619, 0, 0, 0,
	0, 617, 618, 0, 185, 186, 0, 187, 0, 0,
	1128, 0, 669, 634, 0, 0, 630, 188, 189, 190,
	353, 684, 355, 685, 191, 686, 687, 1596, 192, 359,
	360, 193, 194, 195, 637, 668, 688, 689, 363, 0,
	196, 680, 0, 660, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 209, 0, 661, 662, 664, 0, 663, 665,
	210, 211, 418, 212, 690, 213, 691, 692, 0, 214,
	0, 215, 0, 216, 0, 0, 683, 218, 0, 219,
	0, 0, 0, 625, 220, 222, 221, 223, 670, 671,
	648, 715, 0, 0, 0, 0, 0, 224, 225, 693,
	694, 695, 0, 226, 0, 227, 0, 1601, 716, 0,
	228, 681, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 677, 679, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 696, 236, 697, 698, 699, 700,
	701, 0, 659, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 1597, 682, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 620, 0, 649, 678, 261, 702, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 672, 268, 269, 270, 271, 272, 0,
	273, 673, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 703, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 626, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 666, 312,
	299, 300, 313, 728, 314, 704, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 705, 319, 320, 674, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 706, 707, 0, 1598, 332, 333, 675, 676,
	647, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 667, 342, 0, 408, 343, 344, 345, 409, 708,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 621, 611, 0, 652, 641, 642, 639, 640,
	631, 0, 619, 0, 0, 0, 0, 617, 618, 0,
	0, 185, 186, 0, 187, 0, 627, 0, 0, 669,
	634, 0, 630, 0, 188, 189, 190, 353, 684, 355,
	685, 191, 686, 687, 0, 192, 359, 360, 193, 194,
	195, 637, 668, 688, 689, 363, 0, 196, 680, 0,
	660, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 209,
	0, 661, 662, 664, 0, 663, 665, 210, 211, 418,
	212, 690, 213, 691, 692, 615, 214, 0, 215, 0,
	216, 0, 0, 683, 218, 0, 219, 0, 0, 0,
	625, 220, 222, 221, 223, 670, 671, 648, 715, 0,
	0, 0, 0, 0, 224, 225, 693, 694, 695, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 681, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	677, 679, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 696, 236, 697, 698, 699, 700, 701, 0, 659,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 682, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	620, 0, 649, 678, 261, 702, 262, 263, 0, 264,
	613, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	672, 268, 269, 270, 271, 272, 0, 273, 673, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 703, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	626, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 666, 312, 299, 300, 313,
	728, 314, 704, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 705, 319, 320, 674, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 706,
	707, 0, 0, 332, 333, 675, 676, 647, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 667, 342,
	0, 408, 343, 344, 345, 409, 708, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 621,
	0, 652, 641, 642, 639, 640, 631, 0, 0, 619,
	0, 0, 0, 0, 617, 618, 0, 185, 186, 0,
	187, 0, 0, 627, 0, 669, 634, 0, 0, 630,
	188, 189, 190, 353, 684, 355, 685, 191, 686, 687,
	0, 192, 359, 360, 193, 194, 195, 637, 668, 688,
	689, 363, 0, 196, 680, 0, 660, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 661, 662, 664,
	0, 663, 665, 210, 211, 418, 212, 690, 213, 691,
	692, 0, 214, 0, 215, 0, 216, 0, 0, 683,
	218, 0, 219, 0, 0, 0, 625, 220, 222, 221,
	223, 670, 671, 648, 715, 0, 0, 0, 0, 0,
	224, 225, 693, 694, 695, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 681, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 677, 679, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 696, 236, 697,
	698, 699, 700, 701, 0, 659, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 682, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 620, 2237, 649, 678,
	261, 702, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 672, 268, 269, 270,
	271, 272, 0, 273, 673, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 703, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 626, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 666, 312, 299, 300, 313, 728, 314, 704, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 705, 319,
	320, 674, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 706, 707, 0, 0, 332,
	333, 675, 676, 647, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 667, 342, 0, 408, 343, 344,
	345, 409, 708, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 621, 0, 652, 641, 642,
	639, 640, 631, 0, 0, 619, 0, 0, 0, 0,
	617, 618, 1189, 185, 186, 0, 187, 0, 0, 627,
	0, 669, 634, 0, 0, 630, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 213, 691, 692, 0, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 1446, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 620, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 1445, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 626, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 409, 708, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 621, 0, 652, 641, 642, 639, 640, 631, 0,
	0, 619, 0, 0, 0, 0, 617, 618, 0, 185,
	186, 0, 187, 0, 0, 627, 0, 669, 634, 0,
	0, 630, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 615, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 613, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 621, 0, 652,
	641, 642, 639, 640, 631, 0, 0, 619, 0, 0,
	0, 0, 617, 618, 0, 185, 186, 0, 187, 0,
	0, 627, 0, 669, 634, 0, 0, 630, 188, 189,
	190, 353, 684, 355, 685, 191, 686, 687, 0, 192,
	359, 360, 193, 194, 195, 637, 668, 688, 689, 363,
	0, 196, 680, 0, 660, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 209, 0, 661, 662, 664, 0, 663,
	665, 210, 211, 418, 212, 690, 213, 691, 692, 2650,
	214, 0, 215, 0, 216, 0, 0, 683, 218, 0,
	219, 0, 0, 0, 625, 220, 222, 221, 223, 670,
	671, 648, 715, 0, 0, 0, 0, 0, 224, 225,
	693, 694, 695, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 681, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 677, 679, 718, 0, 378, 237,
	0, 234, 0, 717, 235, 696, 236, 697, 698, 699,
	700, 701, 0, 659, 0, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 682,
	721, 246, 247, 722, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 2651, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 620, 0, 649, 678, 261, 702,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 672, 268, 269, 270, 271, 272,
	0, 273, 673, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 703, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 626, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 666,
	312, 299, 300, 313, 728, 314, 704, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 705, 319, 320, 674,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 706, 707, 0, 0, 332, 333, 675,
	676, 647, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 667, 342, 0, 408, 343, 344, 345, 409,
	708, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 621, 0, 652, 641, 642, 639, 640,
	631, 0, 0, 619, 0, 0, 0, 0, 617, 618,
	0, 185, 186, 0, 187, 0, 0, 627, 0, 669,
	634, 0, 0, 630, 188, 189, 190, 353, 684, 355,
	685, 191, 686, 687, 0, 192, 359, 360, 193, 194,
	195, 637, 668, 688, 689, 363, 0, 196, 680, 0,
	660, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 209,
	0, 661, 662, 664, 0, 663, 665, 210, 211, 418,
	212, 690, 213, 691, 692, 615, 214, 0, 215, 0,
	216, 0, 0, 683, 218, 0, 219, 0, 0, 0,
	625, 220, 222, 221, 223, 670, 671, 648, 715, 0,
	0, 0, 0, 0, 224, 225, 693, 694, 695, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 681, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	677, 679, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 696, 236, 697, 698, 699, 700, 701, 0, 659,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 682, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	620, 0, 649, 678, 261, 702, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	672, 268, 269, 270, 271, 272, 0, 273, 673, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 703, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	626, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 666, 312, 299, 300, 313,
	728, 314, 704, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 705, 319, 320, 674, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 706,
	707, 0, 0, 332, 333, 675, 676, 647, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 667, 342,
	0, 408, 343, 344, 345, 409, 708, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 621,
	0, 652, 641, 642, 639, 640, 631, 0, 0, 619,
	0, 0, 0, 0, 617, 618, 0, 185, 186, 0,
	187, 0, 0, 627, 0, 669, 634, 0, 0, 630,
	188, 189, 190, 353, 684, 355, 685, 191, 686, 687,
	0, 192, 359, 360, 193, 194, 195, 637, 668, 688,
	689, 363, 0, 196, 680, 0, 660, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 661, 662, 664,
	0, 663, 665, 210, 211, 418, 212, 690, 213, 691,
	692, 0, 214, 0, 215, 0, 216, 0, 0, 683,
	218, 0, 219, 0, 0, 0, 625, 220, 222, 221,
	223, 670, 671, 648, 715, 0, 0, 0, 0, 0,
	224, 225, 693, 694, 695, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 681, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 677, 679, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 696, 236, 697,
	698, 699, 700, 701, 0, 659, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 682, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 620, 0, 649, 678,
	261, 702, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 672, 268, 269, 270,
	271, 272, 0, 273, 673, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 703, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 626, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 666, 312, 299, 300, 313, 728, 314, 704, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 705, 319,
	320, 674, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 706, 707, 0, 0, 332,
	333, 675, 676, 647, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 667, 342, 0, 408, 343, 344,
	345, 409, 708, 2090, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 621, 0, 652, 641, 642,
	639, 640, 631, 0, 0, 619, 0, 0, 0, 0,
	617, 618, 0, 185, 186, 0, 187, 0, 0, 627,
	0, 669, 634, 0, 0, 630, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 213, 691, 692, 0, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 620, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 626, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 409, 708, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 621, 0, 652, 641, 642, 639, 640, 631, 0,
	0, 619, 0, 0, 0, 0, 617, 618, 1189, 185,
	186, 0, 187, 0, 0, 627, 0, 669, 634, 0,
	0, 630, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 0, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 1601, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 621, 1646, 0,
	652, 641, 642, 639, 640, 631, 0, 619, 0, 0,
	0, 0, 617, 618, 0, 0, 185, 186, 0, 187,
	0, 627, 0, 0, 669, 634, 0, 630, 0, 188,
	189, 190, 353, 684, 355, 685, 191, 686, 687, 0,
	192, 359, 360, 193, 194, 195, 637, 668, 688, 689,
	363, 0, 196, 680, 0, 660, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 661, 662, 664, 0,
	663, 665, 210, 211, 418, 212, 690, 213, 691, 692,
	0, 214, 0, 215, 0, 216, 0, 0, 683, 218,
	0, 219, 0, 0, 0, 625, 220, 222, 221, 223,
	670, 671, 648, 715, 0, 0, 0, 0, 0, 224,
	225, 693, 694, 695, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 681, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 677, 679, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 696, 236, 697, 698,
	699, 700, 701, 0, 659, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	682, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 620, 0, 649, 678, 261,
	702, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 672, 268, 269, 270, 271,
	272, 0, 273, 673, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 703, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 626, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	666, 312, 299, 300, 313, 728, 314, 704, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 705, 319, 320,
	674, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 706, 707, 0, 0, 332, 333,
	675, 676, 647, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 667, 342, 0, 408, 343, 344, 345,
	409, 708, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 621, 1610, 0, 652, 641, 642,
	639, 640, 631, 0, 619, 0, 0, 0, 0, 617,
	618, 0, 0, 185, 186, 0, 187, 0, 627, 0,
	0, 669, 634, 0, 630, 0, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 213, 691, 692, 0, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 620, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 626, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 409, 708, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 621, 1608, 0, 652, 641, 642, 639, 640, 631,
	0, 619, 0, 0, 0, 0, 617, 618, 0, 0,
	185, 186, 0, 187, 0, 627, 0, 0, 669, 634,
	0, 630, 0, 188, 189, 190, 353, 684, 355, 685,
	191, 686, 687, 0, 192, 359, 360, 193, 194, 195,
	637, 668, 688, 689, 363, 0, 196, 680, 0, 660,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 714, 207, 208, 209, 0,
	661, 662, 664, 0, 663, 665, 210, 211, 418, 212,
	690, 213, 691, 692, 0, 214, 0, 215, 0, 216,
	0, 0, 683, 218, 0, 219, 0, 0, 0, 625,
	220, 222, 221, 223, 670, 671, 648, 715, 0, 0,
	0, 0, 0, 224, 225, 693, 694, 695, 0, 226,
	0, 227, 0, 0, 716, 0, 228, 681, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 677,
	679, 718, 0, 378, 237, 0, 234, 0, 717, 235,
	696, 236, 697, 698, 699, 700, 701, 0, 659, 0,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 682, 721, 246, 247, 722, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 723, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 620,
	0, 649, 678, 261, 702, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 725, 267, 726, 672,
	268, 269, 270, 271, 272, 0, 273, 673, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 703, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 727, 296, 297, 626,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 666, 312, 299, 300, 313, 728,
	314, 704, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 705, 319, 320, 674, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 706, 707,
	0, 0, 332, 333, 675, 676, 647, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 667, 342, 0,
	408, 343, 344, 345, 409, 708, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 621, 1592,
	0, 652, 641, 642, 639, 640, 631, 0, 619, 0,
	0, 0, 0, 617, 618, 0, 0, 185, 186, 0,
	187, 0, 627, 0, 0, 669, 634, 0, 630, 0,
	188, 189, 190, 353, 684, 355, 685, 191, 686, 687,
	0, 192, 359, 360, 193, 194, 195, 637, 668, 688,
	689, 363, 0, 196, 680, 0, 660, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 661, 662, 664,
	0, 663, 665, 210, 211, 418, 212, 690, 213, 691,
	692, 0, 214, 0, 215, 0, 216, 0, 0, 683,
	218, 0, 219, 0, 0, 0, 625, 220, 222, 221,
	223, 670, 671, 648, 715, 0, 0, 0, 0, 0,
	224, 225, 693, 694, 695, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 681, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 677, 679, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 696, 236, 697,
	698, 699, 700, 701, 0, 659, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 682, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 620, 0, 649, 678,
	261, 702, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 672, 268, 269, 270,
	271, 272, 0, 273, 673, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 703, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 626, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 666, 312, 299, 300, 313, 728, 314, 704, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 705, 319,
	320, 674, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 706, 707, 0, 0, 332,
	333, 675, 676, 647, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 667, 342, 0, 408, 343, 344,
	345, 409, 708, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 621, 1580, 0, 652, 641,
	642, 639, 640, 631, 0, 619, 0, 0, 0, 0,
	617, 618, 0, 0, 185, 186, 0, 187, 0, 627,
	0, 0, 669, 634, 0, 630, 0, 188, 189, 190,
	353, 684, 355, 685, 191, 686, 687, 0, 192, 359,
	360, 193, 194, 195, 637, 668, 688, 689, 363, 0,
	196, 680, 0, 660, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 209, 0, 661, 662, 664, 0, 663, 665,
	210, 211, 418, 212, 690, 213, 691, 692, 0, 214,
	0, 215, 0, 216, 0, 0, 683, 218, 0, 219,
	0, 0, 0, 625, 220, 222, 221, 223, 670, 671,
	648, 715, 0, 0, 0, 0, 0, 224, 225, 693,
	694, 695, 0, 226, 0, 227, 0, 0, 716, 0,
	228, 681, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 677, 679, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 696, 236, 697, 698, 699, 700,
	701, 0, 659, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 682, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 620, 0, 649, 678, 261, 702, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 672, 268, 269, 270, 271, 272, 0,
	273, 673, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 703, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 626, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 666, 312,
	299, 300, 313, 728, 314, 704, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 705, 319, 320, 674, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 706, 707, 0, 0, 332, 333, 675, 676,
	647, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 667, 342, 0, 408, 343, 344, 345, 409, 708,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 621, 1578, 0, 1570, 641, 642, 639, 640,
	631, 0, 619, 0, 0, 0, 0, 617, 618, 0,
	0, 185, 186, 0, 187, 0, 627, 0, 0, 669,
	634, 0, 630, 0, 188, 189, 190, 353, 684, 355,
	685, 191, 686, 687, 0, 192, 359, 360, 193, 194,
	195, 637, 668, 688, 689, 363, 0, 196, 680, 0,
	660, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 209,
	0, 661, 662, 664, 0, 663, 665, 210, 211, 418,
	212, 690, 1573, 691, 692, 0, 214, 0, 215, 0,
	216, 0, 0, 683, 218, 0, 219, 0, 0, 0,
	625, 220, 222, 221, 223, 670, 671, 648, 715, 0,
	0, 0, 0, 0, 224, 225, 693, 694, 695, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 681, 0,
	375, 0, 0, 229, 1574, 0, 0, 231, 232, 233,
	677, 679, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 696, 236, 697, 698, 699, 700, 701, 0, 659,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 682, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	1575, 1572, 256, 389, 255, 724, 257, 258, 260, 259,
	620, 0, 649, 678, 261, 702, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	672, 268, 269, 270, 271, 272, 0, 273, 673, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 703, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	626, 298, 0, 302, 303, 304, 305, 1576, 0, 308,
	309, 398, 307, 310, 311, 666, 312, 299, 300, 313,
	728, 314, 704, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 705, 319, 320, 674, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 706,
	707, 0, 0, 332, 333, 675, 676, 647, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 667, 342,
	0, 408, 343, 344, 345, 409, 708, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 1571, 351, 621,
	1567, 0, 1570, 641, 642, 639, 640, 631, 0, 619,
	0, 0, 0, 0, 617, 618, 0, 0, 185, 186,
	0, 187, 0, 627, 0, 0, 669, 634, 0, 630,
	0, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 1573,
	691, 692, 0, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 1574, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 1575, 1572, 256,
	389, 255, 724, 257, 258, 260, 259, 620, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 626, 298, 0,
	302, 303, 304, 305, 1576, 0, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 409, 708, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 1571, 351, 621, 0, 652, 641,
	642, 639, 640, 631, 0, 0, 619, 0, 0, 0,
	0, 617, 618, 0, 185, 186, 0, 187, 0, 0,
	627, 0, 669, 634, 0, 0, 630, 188, 189, 190,
	353, 684, 355, 685, 191, 686, 687, 0, 192, 359,
	360, 193, 194, 195, 637, 668, 688, 689, 363, 0,
	196, 680, 0, 660, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 209, 0, 661, 662, 664, 0, 663, 665,
	210, 211, 418, 212, 690, 213, 691, 692, 0, 214,
	0, 215, 0, 216, 0, 0, 683, 218, 0, 219,
	0, 0, 0, 625, 220, 222, 221, 223, 670, 671,
	648, 715, 0, 0, 0, 0, 0, 224, 225, 693,
	694, 695, 0, 226, 0, 227, 0, 0, 716, 0,
	228, 681, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 677, 679, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 696, 236, 697, 698, 699, 700,
	701, 0, 659, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 682, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 620, 0, 649, 678, 261, 702, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 672, 268, 269, 270, 271, 272, 0,
	273, 673, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 703, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 626, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 666, 312,
	299, 300, 313, 728, 314, 704, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 705, 319, 320, 674, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 706, 707, 0, 0, 332, 333, 675, 676,
	647, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 667, 342, 0, 408, 343, 344, 345, 409, 708,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 621, 0, 652, 641, 642, 639, 640, 631,
	0, 0, 619, 0, 0, 0, 0, 617, 618, 0,
	185, 186, 1433, 187, 1132, 0, 627, 0, 669, 634,
	0, 0, 630, 188, 189, 190, 353, 684, 355, 685,
	191, 686, 687, 0, 192, 359, 360, 193, 194, 195,
	637, 668, 688, 689, 363, 0, 196, 680, 0, 660,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 714, 207, 208, 209, 0,
	661, 662, 664, 0, 663, 665, 210, 211, 418, 212,
	690, 213, 691, 692, 0, 214, 0, 215, 0, 216,
	0, 0, 683, 218, 0, 219, 0, 0, 0, 625,
	220, 222, 221, 223, 670, 671, 648, 715, 0, 0,
	0, 0, 0, 224, 225, 693, 694, 695, 0, 226,
	0, 227, 0, 0, 716, 0, 228, 681, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 677,
	679, 718, 0, 378, 237, 0, 234, 0, 717, 235,
	696, 236, 697, 698, 699, 700, 701, 0, 659, 0,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 682, 721, 246, 247, 722, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 723, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 620,
	0, 649, 678, 261, 702, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 725, 267, 726, 672,
	268, 269, 270, 271, 272, 0, 273, 673, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 703, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 727, 296, 297, 626,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 666, 312, 299, 300, 313, 728,
	314, 704, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 705, 319, 320, 674, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 706, 707,
	0, 0, 332, 333, 675, 676, 647, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 667, 342, 0,
	408, 343, 344, 345, 409, 708, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 621, 883,
	0, 652, 641, 642, 639, 640, 631, 0, 619, 0,
	0, 0, 0, 617, 618, 0, 0, 185, 186, 0,
	187, 0, 627, 0, 0, 669, 634, 0, 630, 0,
	188, 189, 190, 353, 684, 355, 685, 191, 686, 687,
	0, 192, 359, 360, 193, 194, 195, 637, 668, 688,
	689, 363, 0, 196, 680, 0, 660, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 661, 662, 664,
	0, 663, 665, 210, 211, 418, 212, 690, 213, 691,
	692, 0, 214, 0, 215, 0, 216, 0, 0, 683,
	218, 0, 219, 0, 0, 0, 625, 220, 222, 221,
	223, 670, 671, 648, 715, 0, 0, 0, 0, 0,
	224, 225, 693, 694, 695, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 681, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 677, 679, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 696, 236, 697,
	698, 699, 700, 701, 0, 659, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 682, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 620, 0, 649, 678,
	261, 702, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 672, 268, 269, 270,
	271, 272, 0, 273, 673, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 703, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 626, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 666, 312, 299, 300, 313, 728, 314, 704, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 705, 319,
	320, 674, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 706, 707, 0, 0, 332,
	333, 675, 676, 647, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 667, 342, 0, 408, 343, 344,
	345, 409, 708, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 621, 881, 0, 652, 641,
	642, 639, 640, 631, 0, 619, 0, 0, 0, 0,
	617, 618, 0, 0, 185, 186, 0, 187, 0, 627,
	0, 0, 669, 634, 0, 630, 0, 188, 189, 190,
	353, 684, 355, 685, 191, 686, 687, 0, 192, 359,
	360, 193, 194, 195, 637, 668, 688, 689, 363, 0,
	196, 680, 0, 660, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 209, 0, 661, 662, 664, 0, 663, 665,
	210, 211, 418, 212, 690, 213, 691, 692, 0, 214,
	0, 215, 0, 216, 0, 0, 683, 218, 0, 219,
	0, 0, 0, 625, 220, 222, 221, 223, 670, 671,
	648, 715, 0, 0, 0, 0, 0, 224, 225, 693,
	694, 695, 0, 226, 0, 227, 0, 0, 716, 0,
	228, 681, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 677, 679, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 696, 236, 697, 698, 699, 700,
	701, 0, 659, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 682, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 620, 0, 649, 678, 261, 702, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 672, 268, 269, 270, 271, 272, 0,
	273, 673, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 703, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 626, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 666, 312,
	299, 300, 313, 728, 314, 704, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 705, 319, 320, 674, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 706, 707, 0, 0, 332, 333, 675, 676,
	647, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 667, 342, 0, 408, 343, 344, 345, 409, 708,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 621, 0, 652, 641, 642, 639, 640, 631,
	0, 0, 619, 0, 0, 0, 0, 617, 618, 0,
	185, 186, 0, 187, 0, 0, 627, 0, 669, 634,
	0, 0, 630, 188, 189, 190, 353, 684, 355, 685,
	191, 686, 687, 0, 192, 359, 360, 193, 194, 195,
	637, 668, 688, 689, 363, 0, 196, 680, 0, 660,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 714, 207, 208, 2567, 0,
	661, 662, 664, 0, 663, 665, 210, 211, 418, 212,
	690, 213, 691, 692, 0, 214, 0, 215, 0, 216,
	0, 0, 683, 218, 0, 219, 0, 0, 0, 625,
	220, 222, 221, 223, 670, 671, 648, 715, 0, 0,
	0, 0, 0, 224, 225, 693, 694, 695, 0, 226,
	0, 227, 0, 0, 716, 0, 228, 681, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 677,
	679, 718, 0, 378, 237, 0, 234, 0, 717, 235,
	696, 236, 697, 698, 699, 700, 701, 0, 659, 0,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 682, 721, 246, 247, 722, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 723, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 620,
	0, 649, 678, 261, 702, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 725, 267, 726, 672,
	268, 269, 270, 271, 272, 0, 273, 673, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 703, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 727, 296, 297, 626,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 666, 312, 299, 300, 313, 728,
	314, 704, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 705, 319, 320, 674, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 706, 707,
	0, 0, 332, 333, 675, 676, 647, 334, 335, 2566,
	337, 0, 0, 338, 339, 340, 341, 667, 342, 0,
	408, 343, 344, 345, 409, 708, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 621, 0,
	652, 641, 642, 639, 640, 631, 0, 0, 619, 0,
	0, 0, 0, 617, 618, 0, 185, 186, 0, 187,
	0, 0, 627, 0, 669, 634, 0, 0, 630, 188,
	189, 190, 353, 684, 355, 685, 191, 686, 687, 0,
	192, 359, 360, 193, 194, 195, 637, 668, 688, 689,
	363, 0, 196, 680, 0, 660, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 661, 662, 664, 0,
	663, 665, 210, 211, 418, 212, 690, 213, 691, 692,
	0, 214, 0, 215, 0, 216, 0, 0, 683, 218,
	0, 219, 0, 0, 0, 625, 220, 222, 221, 223,
	670, 671, 648, 715, 0, 0, 0, 0, 0, 224,
	225, 693, 694, 695, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 681, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 677, 679, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 696, 236, 697, 698,
	699, 700, 701, 0, 659, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	682, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 620, 0, 649, 678, 261,
	702, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 672, 268, 269, 270, 271,
	272, 0, 273, 673, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 703, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 626, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	666, 312, 299, 300, 313, 728, 314, 704, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 705, 319, 320,
	674, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 706, 707, 0, 0, 332, 333,
	675, 676, 647, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 667, 342, 0, 408, 343, 344, 345,
	409, 708, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 621, 0, 652, 641, 642, 639,
	640, 631, 0, 0, 619, 0, 0, 0, 0, 617,
	618, 0, 185, 186, 0, 187, 0, 0, 627, 0,
	669, 634, 0, 0, 630, 188, 189, 190, 2565, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	2567, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 213, 691, 692, 0, 214, 0, 215,
	0, 216, 0, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 620, 0, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 626, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 2566, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 409, 708, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	621, 0, 652, 641, 642, 639, 640, 631, 0, 0,
	619, 0, 0, 0, 0, 617, 618, 0, 185, 186,
	0, 187, 0, 0, 627, 0, 669, 634, 0, 0,
	630, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 0, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 0, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 1590, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 409, 708, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 652, 641,
	642, 639, 640, 631, 0, 0, 1588, 0, 0, 0,
	0, 1586, 1587, 0, 185, 186, 0, 187, 0, 0,
	1589, 0, 669, 634, 0, 0, 630, 188, 189, 190,
	353, 684, 355, 685, 191, 686, 687, 0, 192, 359,
	360, 193, 194, 195, 0, 668, 688, 689, 363, 0,
	196, 680, 0, 660, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 209, 0, 661, 662, 664, 0, 663, 665,
	210, 211, 418, 212, 690, 213, 691, 692, 0, 214,
	0, 215, 0, 216, 0, 0, 683, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 670, 671,
	648, 715, 0, 0, 0, 0, 0, 224, 225, 693,
	694, 695, 0, 226, 0, 227, 0, 0, 716, 0,
	228, 681, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 677, 679, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 696, 236, 697, 698, 699, 700,
	701, 0, 659, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 682, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 0, 0, 649, 678, 261, 702, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 672, 268, 269, 270, 271, 272, 0,
	273, 673, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 703, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 1590, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 666, 312,
	299, 300, 313, 728, 314, 704, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 705, 319, 320, 674, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 706, 707, 0, 0, 332, 333, 675, 676,
	647, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 667, 342, 0, 408, 343, 344, 345, 409, 708,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 652, 641, 642, 639, 640, 631,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 1589, 0, 669, 634,
	0, 0, 630, 188, 189, 190, 0, 684, 355, 685,
	191, 686, 687, 0, 192, 359, 360, 193, 194, 195,
	637, 668, 688, 689, 363, 0, 196, 680, 0, 660,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 714, 207, 208, 2567, 0,
	661, 662, 664, 0, 663, 665, 210, 211, 418, 212,
	690, 213, 691, 692, 0, 214, 0, 215, 0, 216,
	0, 0, 683, 218, 0, 219, 0, 0, 0, 625,
	220, 222, 221, 223, 670, 671, 648, 715, 0, 0,
	0, 0, 0, 224, 225, 693, 694, 695, 0, 226,
	0, 227, 0, 0, 716, 0, 228, 681, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 677,
	679, 0, 0, 378, 237, 0, 234, 0, 717, 235,
	696, 236, 697, 698, 699, 700, 701, 0, 659, 0,
	0, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 682, 721, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 723, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 620,
	0, 649, 678, 261, 702, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 725, 267, 726, 672,
	268, 269, 270, 271, 272, 0, 273, 673, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 703, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 727, 296, 297, 626,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 666, 312, 299, 300, 313, 0,
	314, 704, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 705, 319, 320, 674, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 706, 707,
	0, 0, 332, 333, 675, 676, 647, 334, 335, 2566,
	337, 0, 0, 338, 339, 340, 341, 667, 342, 0,
	408, 343, 344, 345, 409, 708, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	652, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 617, 618, 0, 185, 186, 0, 187,
	0, 0, 627, 0, 669, 0, 0, 0, 630, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 668, 361, 362,
	363, 0, 196, 680, 0, 660, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 661, 662, 664, 0,
	663, 665, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	670, 671, 0, 715, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 681, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 677, 679, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	682, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 0, 0, 0, 678, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 672, 268, 269, 270, 271,
	272, 0, 273, 673, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	666, 312, 299, 300, 313, 728, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	674, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	675, 676, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 667, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 934, 0, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 2189, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 790, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 715,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 141,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 728, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 143,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 941, 410, 0, 0,
	346, 0, 0, 0, 135, 347, 348, 349, 350, 351,
	603, 136, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 127, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 768, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 141, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 143, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 941, 410, 0, 0, 346, 0, 0, 0,
	135, 347, 348, 349, 350, 351, 0, 136, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 762, 0,
	1211, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 768, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 141, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 143, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 941, 410,
	0, 0, 346, 0, 0, 0, 135, 347, 348, 349,
	350, 351, 603, 136, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 762, 0, 1211, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 141, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 143, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 941, 410, 0, 0, 346, 0,
	0, 0, 135, 347, 348, 349, 350, 351, 1930, 136,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 127, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 768, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 761, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 762, 0, 767, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 768, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 762, 0, 767, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 768, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 762, 0, 767,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 1244, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 1744, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 2105, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 652, 641, 642, 639, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 1214, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 684, 355,
	685, 191, 686, 687, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 688, 689, 363, 0, 196, 364, 0,
	790, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 690, 213, 691, 692, 0, 214, 0, 215, 0,
	216, 0, 0, 683, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 648, 715, 0,
	0, 0, 0, 0, 224, 225, 693, 694, 695, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 696, 236, 697, 698, 699, 700, 701, 0, 659,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	0, 0, 649, 390, 261, 702, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 703, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	728, 314, 704, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 705, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 706,
	707, 0, 0, 332, 333, 406, 407, 647, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 708, 0, 506, 346,
	182, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 178, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 177, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 175, 346, 182, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 181, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 178,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 177, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 182, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 181, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 178, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 177, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 182, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 352, 0, 0, 0, 181,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 991, 0, 937, 995, 0,
	0, 0, 993, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 790, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	715, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 728, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 937,
	995, 346, 0, 0, 993, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 790, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 715, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 718, 0, 378, 237,
	0, 234, 0, 717, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	721, 246, 247, 722, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 728, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 937, 995, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 790, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 715, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 728, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 937, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 790, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 715, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 728, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 182, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 1666, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	1664, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 1708, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 1669, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 1706, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 1668, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 1707, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 182, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 1666, 196,
	364, 0, 0, 1661, 197, 198, 199, 0, 201, 202,
	203, 200, 1664, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 1669, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 1660, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 1668, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 1667, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	912, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 768, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 774, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 776, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 768, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	770, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 772, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 768, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 437, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 436, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 435, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 182,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 1649, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 182, 2255, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 182, 2255, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	2252, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 182, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 768, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 1412, 346,
	182, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 1410, 346, 182, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 182, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 185, 186, 1392, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	532, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 970, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 534, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 529, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 1268, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 1267, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	532, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 970, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 534, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 529, 404, 405, 0, 0,
	332, 971, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 532, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 523,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 534, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 954, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	529, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	930, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 929, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 927, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 926, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	923, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 922, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 920, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 919, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	916, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 915, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 182, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	185, 186, 904, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 902, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 901, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 898, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 896, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 894, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 890, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 892, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 780, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 782,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 778, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 532, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 523, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 522, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 534, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 524,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 525, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 529, 404, 405,
	0, 0, 332, 527, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 514, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 515, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 512, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 504, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 460, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 182, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 182, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 1977, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	182, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 1975, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 182, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 1964, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 182, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 515, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 182, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 1278, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 0, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 182, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 744, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	182, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 0, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 0, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 0, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 1065, 1066, 0, 1095, 1096, 1097,
	1105, 1106, 1107, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 1068, 0, 0,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 1066, 0, 1095, 1096, 1097, 1105,
	1106, 1107, 1067, 0, 0, 0, 0, 0, 1087, 1098,
	0, 0, 0, 0, 0, 1084, 1068, 0, 0, 1109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 1091, 1092, 1093, 0, 0, 0,
	0, 0, 1073, 0, 0, 0, 0, 1872, 1873, 0,
	1890, 1891, 1892, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2078, 0, 1102, 1110, 0, 0, 0,
	0, 0, 1090, 1091, 1092, 1093, 0, 0, 462, 0,
	0, 1073, 0, 0, 1108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 1887, 1100, 0, 1102, 1110, 0, 0, 0, 1088,
	41, 0, 0, 1872, 1873, 0, 1890, 1891, 1892, 0,
	0, 0, 0, 1108, 44, 0, 0, 0, 0, 2077,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 1088, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1878, 0, 1887, 0, 0,
	1094, 0, 0, 0, 0, 1099, 0, 0, 0, 63,
	0, 0, 0, 0, 0, 1089, 64, 0, 486, 65,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1103, 0, 0, 0, 1893, 0, 1094,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 0, 1089, 0, 0, 0, 0, 0,
	0, 1878, 1888, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 0, 0, 1065, 1066, 0, 1095, 1096,
	1097, 1105, 1106, 1107, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 1068, 0,
	0, 1109, 1101, 1893, 0, 1079, 1080, 1086, 1085, 1081,
	1082, 1083, 1104, 0, 1078, 1076, 1077, 1069, 1070, 1071,
	1072, 1074, 1075, 1067, 0, 0, 0, 0, 1888, 1087,
	0, 1912, 0, 0, 0, 0, 1084, 0, 1889, 0,
	68, 1101, 0, 0, 1079, 1080, 1086, 1085, 1081, 1082,
	1083, 1104, 0, 1078, 1076, 1077, 1069, 1070, 1071, 1072,
	1074, 1075, 0, 0, 0, 0, 128, 70, 0, 71,
	1864, 0, 0, 1065, 1066, 0, 1095, 1096, 1097, 1105,
	1106, 1107, 0, 141, 1090, 1091, 1092, 1093, 0, 1098,
	0, 485, 0, 1073, 104, 0, 1068, 0, 0, 1109,
	0, 0, 0, 0, 1889, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 0, 0, 1102, 1110, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 1087, 1884, 1885,
	1886, 0, 0, 0, 1084, 1108, 0, 1883, 1881, 1882,
	1874, 1875, 1876, 1877, 1879, 1880, 0, 0, 40, 0,
	142, 0, 0, 1100, 0, 0, 0, 0, 135, 41,
	1088, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 1091, 1092, 1093, 0, 1099, 463, 0,
	0, 1073, 0, 0, 1884, 1885, 1886, 0, 0, 51,
	0, 0, 0, 1883, 1881, 1882, 1874, 1875, 1876, 1877,
	1879, 1880, 0, 0, 1102, 1110, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 0, 0, 1108, 0, 64, 1089, 486, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1103, 0, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	1872, 1873, 0, 1890, 1891, 1892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1094,
	0, 0, 0, 1101, 0, 0, 1079, 1080, 1086, 1085,
	1081, 1082, 1083, 1104, 1089, 1078, 1076, 1077, 1069, 1070,
	1071, 1072, 1074, 1075, 1887, 0, 0, 0, 2536, 0,
	1065, 1066, 1103, 1095, 1096, 1097, 1105, 1106, 1107, 68,
	0, 0, 0, 0, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 70, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 0, 141, 0, 1087, 0, 0, 0, 1878, 0,
	485, 1084, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 1079, 1080, 1086, 1085, 1081, 1082,
	1083, 1104, 143, 1078, 1076, 1077, 1069, 1070, 1071, 1072,
	1074, 1075, 0, 0, 0, 0, 2486, 0, 1065, 1066,
	1893, 1095, 1096, 1097, 1105, 1106, 1107, 0, 0, 1090,
	1091, 1092, 1093, 0, 1098, 0, 0, 0, 1073, 142,
	0, 1068, 0, 0, 1109, 1888, 0, 135, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	0, 1102, 1110, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 1087, 0, 0, 0, 0, 127, 0, 1084,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1889, 0, 0, 0, 0, 0, 1090, 1091, 1092,
	1093, 0, 1099, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	1110, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1108, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1103,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 1884, 1885, 1886, 0, 0, 0, 0, 0, 0,
	1883, 1881, 1882, 1874, 1875, 1876, 1877, 1879, 1880, 0,
	1099, 0, 0, 0, 0, 1872, 1873, 0, 1890, 1891,
	1892, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 1101, 0,
	0, 1079, 1080, 1086, 1085, 1081, 1082, 1083, 1104, 1089,
	1078, 1076, 1077, 1069, 1070, 1071, 1072, 1074, 1075, 1887,
	0, 0, 0, 2438, 0, 1065, 1066, 1103, 1095, 1096,
	1097, 1105, 1106, 1107, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 1068, 0,
	0, 1109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 1878, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 1079,
	1080, 1086, 1085, 1081, 1082, 1083, 1104, 1894, 1078, 1076,
	1077, 1069, 1070, 1071, 1072, 1074, 1075, 0, 0, 0,
	0, 2408, 0, 1065, 1066, 1893, 1095, 1096, 1097, 1105,
	1106, 1107, 0, 0, 1090, 1091, 1092, 1093, 0, 1098,
	0, 0, 0, 1073, 0, 0, 1068, 0, 0, 1109,
	1888, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 1110, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 1084, 1108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1889, 0, 0, 0,
	0, 0, 1090, 1091, 1092, 1093, 0, 1099, 0, 0,
	0, 1073, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 1110, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1108, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1103, 0, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 1884, 1885, 1886, 0,
	0, 0, 0, 0, 0, 1883, 1881, 1882, 1874, 1875,
	1876, 1877, 1879, 1880, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1094,
	0, 0, 0, 1101, 0, 0, 1079, 1080, 1086, 1085,
	1081, 1082, 1083, 1104, 1089, 1078, 1076, 1077, 1069, 1070,
	1071, 1072, 1074, 1075, 0, 0, 0, 0, 2403, 0,
	1065, 1066, 1103, 1095, 1096, 1097, 1105, 1106, 1107, 0,
	0, 0, 0, 0, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 0, 0, 0, 1087, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 1079, 1080, 1086, 1085, 1081, 1082,
	1083, 1104, 0, 1078, 1076, 1077, 1069, 1070, 1071, 1072,
	1074, 1075, 0, 0, 0, 0, 2399, 0, 1065, 1066,
	0, 1095, 1096, 1097, 1105, 1106, 1107, 0, 0, 1090,
	1091, 1092, 1093, 0, 1098, 0, 0, 0, 1073, 0,
	0, 1068, 0, 0, 1109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 1110, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 1084,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 1091, 1092,
	1093, 0, 1099, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	1110, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1108, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1103,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 1101, 0,
	0, 1079, 1080, 1086, 1085, 1081, 1082, 1083, 1104, 1089,
	1078, 1076, 1077, 1069, 1070, 1071, 1072, 1074, 1075, 0,
	0, 0, 0, 2334, 0, 1065, 1066, 1103, 1095, 1096,
	1097, 1105, 1106, 1107, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 1068, 0,
	0, 1109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 1079,
	1080, 1086, 1085, 1081, 1082, 1083, 1104, 0, 1078, 1076,
	1077, 1069, 1070, 1071, 1072, 1074, 1075, 0, 0, 0,
	0, 2300, 0, 1065, 1066, 0, 1095, 1096, 1097, 1105,
	1106, 1107, 0, 0, 1090, 1091, 1092, 1093, 0, 1098,
	0, 0, 0, 1073, 0, 0, 1068, 0, 0, 1109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 1110, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 1084, 1108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 1091, 1092, 1093, 0, 1099, 0, 0,
	0, 1073, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 1110, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1108, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1103, 0, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1094,
	0, 0, 0, 1101, 0, 0, 1079, 1080, 1086, 1085,
	1081, 1082, 1083, 1104, 1089, 1078, 1076, 1077, 1069, 1070,
	1071, 1072, 1074, 1075, 0, 0, 0, 0, 2299, 0,
	1065, 1066, 1103, 1095, 1096, 1097, 1105, 1106, 1107, 0,
	0, 0, 0, 0, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 0, 0, 0, 1087, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 1079, 1080, 1086, 1085, 1081, 1082,
	1083, 1104, 0, 1078, 1076, 1077, 1069, 1070, 1071, 1072,
	1074, 1075, 0, 0, 0, 0, 2264, 0, 1065, 1066,
	0, 1095, 1096, 1097, 1105, 1106, 1107, 0, 0, 1090,
	1091, 1092, 1093, 0, 1098, 0, 0, 0, 1073, 0,
	0, 1068, 0, 0, 1109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 1110, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 1084,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 1091, 1092,
	1093, 0, 1099, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	1110, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1108, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1103,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 1101, 0,
	0, 1079, 1080, 1086, 1085, 1081, 1082, 1083, 1104, 1089,
	1078, 1076, 1077, 1069, 1070, 1071, 1072, 1074, 1075, 0,
	0, 0, 0, 2108, 0, 1065, 1066, 1103, 1095, 1096,
	1097, 1105, 1106, 1107, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 1068, 0,
	0, 1109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 1079,
	1080, 1086, 1085, 1081, 1082, 1083, 1104, 0, 1078, 1076,
	1077, 1069, 1070, 1071, 1072, 1074, 1075, 0, 0, 0,
	0, 2084, 0, 1065, 1066, 0, 1095, 1096, 1097, 1105,
	1106, 1107, 0, 0, 1090, 1091, 1092, 1093, 0, 1098,
	0, 0, 0, 1073, 0, 0, 1068, 0, 0, 1109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 1110, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 1084, 1108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 1091, 1092, 1093, 0, 1099, 0, 0,
	0, 1073, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 1110, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1108, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1103, 0, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1094,
	0, 0, 0, 1101, 0, 0, 1079, 1080, 1086, 1085,
	1081, 1082, 1083, 1104, 1089, 1078, 1076, 1077, 1069, 1070,
	1071, 1072, 1074, 1075, 0, 0, 0, 0, 1528, 0,
	1065, 1066, 1103, 1095, 1096, 1097, 1105, 1106, 1107, 0,
	0, 0, 0, 0, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 0, 0, 0, 1087, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 1079, 1080, 1086, 1085, 1081, 1082,
	1083, 1104, 0, 1078, 1076, 1077, 1069, 1070, 1071, 1072,
	1074, 1075, 0, 0, 1834, 0, 0, 0, 1065, 1066,
	0, 1095, 1096, 1097, 1105, 1106, 1107, 0, 0, 1090,
	1091, 1092, 1093, 0, 1098, 0, 0, 0, 1073, 2599,
	0, 1068, 0, 0, 1109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 1110, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 1084,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 1091, 1092,
	1093, 0, 1099, 0, 0, 0, 1073, 0, 1904, 0,
	0, 1903, 0, 0, 0, 0, 0, 0, 2598, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	1110, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1108, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1103,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 1101, 0,
	0, 1079, 1080, 1086, 1085, 1081, 1082, 1083, 1104, 1089,
	1078, 1076, 1077, 1069, 1070, 1071, 1072, 1074, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 0, 1065,
	1066, 0, 1095, 1096, 1097, 1105, 1106, 1107, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	1807, 0, 1068, 0, 0, 1109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	1084, 0, 0, 0, 0, 0, 1101, 0, 0, 1079,
	1080, 1086, 1085, 1081, 1082, 1083, 1104, 0, 1078, 1076,
	1077, 1069, 1070, 1071, 1072, 1074, 1075, 1808, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1090, 1091,
	1092, 1093, 0, 0, 0, 0, 1625, 1073, 0, 0,
	0, 0, 1065, 1066, 0, 1095, 1096, 1097, 1105, 1106,
	1107, 0, 0, 0, 0, 0, 0, 0, 1098, 0,
	1102, 1110, 1624, 0, 0, 1068, 0, 0, 1109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1067, 0, 0, 0, 0, 0, 1087, 1100, 0, 0,
	0, 0, 0, 1084, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 1091, 1092, 1093, 0, 0, 0, 0, 0,
	1073, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 0, 0, 1102, 1110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1103, 0,
	0, 0, 1108, 0, 0, 0, 0, 1065, 1066, 0,
	1095, 1096, 1097, 1105, 1106, 1107, 0, 0, 0, 0,
	1100, 0, 0, 1098, 0, 0, 0, 1088, 0, 0,
	1068, 0, 0, 1109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 1067, 0, 0, 0, 0,
	0, 1087, 0, 0, 0, 0, 0, 1101, 1084, 0,
	1079, 1080, 1086, 1085, 1081, 1082, 1083, 1104, 0, 1078,
	1076, 1077, 1069, 1070, 1071, 1072, 1074, 1075, 1094, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1089, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 1091, 1092, 1093,
	0, 1103, 0, 0, 0, 1073, 0, 0, 0, 0,
	1065, 1066, 0, 1095, 1096, 1097, 1105, 1106, 1107, 0,
	0, 0, 0, 0, 0, 0, 1098, 0, 1102, 1110,
	0, 0, 0, 1068, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 0, 0, 0, 1087, 1100, 0, 0, 0, 0,
	1101, 1084, 1088, 1079, 1080, 1086, 1085, 1081, 1082, 1083,
	1104, 0, 1078, 1076, 1077, 1069, 1070, 1071, 1072, 1074,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 1099,
	600, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	1091, 1092, 1093, 0, 0, 0, 0, 0, 1073, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1089, 0,
	0, 1102, 1110, 0, 0, 0, 0, 1065, 1066, 0,
	1095, 1096, 1097, 1105, 1106, 1107, 1103, 0, 0, 0,
	1108, 0, 0, 1098, 0, 0, 0, 0, 0, 0,
	1068, 0, 0, 1109, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 1087, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 1079, 1080,
	1086, 1085, 1081, 1082, 1083, 1104, 0, 1078, 1076, 1077,
	1069, 1070, 1071, 1072, 1074, 1075, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 1091, 1092, 1093,
	0, 1089, 0, 0, 0, 1073, 0, 0, 0, 0,
	1910, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 1110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2088, 1108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 0,
	0, 1079, 1080, 1086, 1085, 1081, 1082, 1083, 1104, 1099,
	1078, 1076, 1077, 1069, 1070, 1071, 1072, 1074, 1075, 0,
	0, 0, 0, 0, 0, 1065, 1066, 0, 1095, 1096,
	1097, 1105, 1106, 1107, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 1094, 0, 1905, 0, 0, 1068, 0,
	0, 1109, 0, 0, 0, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 1065, 1066, 0, 1095, 1096, 1097,
	1105, 1106, 1107, 1067, 0, 0, 1103, 0, 0, 1087,
	1098, 0, 0, 0, 0, 0, 1084, 1068, 0, 0,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 1091, 1092, 1093, 0, 0,
	0, 0, 0, 1073, 0, 1101, 0, 0, 1079, 1080,
	1086, 1085, 1081, 1082, 1083, 1104, 0, 1078, 1076, 1077,
	1069, 1070, 1071, 1072, 1074, 1075, 1102, 1110, 0, 0,
	0, 0, 0, 1090, 1091, 1092, 1093, 0, 0, 0,
	0, 0, 1073, 0, 0, 1108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 1102, 1110, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 0, 0, 1870,
	0, 0, 1065, 1066, 0, 1095, 1096, 1097, 1105, 1106,
	1107, 0, 0, 0, 1103, 0, 0, 0, 1098, 0,
	1094, 0, 1863, 0, 0, 1068, 0, 0, 1109, 0,
	0, 0, 0, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1067, 0, 0, 1103, 0, 0, 1087, 0, 0, 0,
	0, 0, 0, 1084, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 1079, 1080, 1086, 1085,
	1081, 1082, 1083, 1104, 0, 1078, 1076, 1077, 1069, 1070,
	1071, 1072, 1074, 1075, 0, 0, 0, 0, 0, 0,
	0, 1090, 1091, 1092, 1093, 0, 0, 0, 0, 0,
	1073, 0, 1101, 0, 0, 1079, 1080, 1086, 1085, 1081,
	1082, 1083, 1104, 0, 1078, 1076, 1077, 1069, 1070, 1071,
	1072, 1074, 1075, 1102, 1110, 0, 0, 0, 0, 1065,
	1066, 0, 1095, 1096, 1097, 1105, 1106, 1107, 0, 0,
	0, 0, 1108, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 1068, 0, 0, 1109, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	1084, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1090, 1091,
	1092, 1093, 0, 1089, 0, 0, 0, 1073, 0, 0,
	0, 0, 1065, 1066, 0, 1095, 1096, 1097, 1105, 1106,
	1107, 1103, 0, 0, 0, 0, 0, 0, 1098, 0,
	1102, 1110, 0, 0, 0, 1068, 0, 0, 1109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1067, 0, 0, 0, 0, 0, 1087, 1100, 0, 0,
	0, 0, 0, 1084, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 0, 0, 1079, 1080, 1086, 1085, 1081, 1082, 1083,
	1104, 1099, 1078, 1076, 1077, 1069, 1070, 1071, 1072, 1074,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 1091, 1092, 1093, 0, 0, 0, 0, 0,
	1073, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 0, 0, 1102, 1110, 0, 1065, 1066, 0, 1095,
	1096, 1097, 1105, 1106, 1107, 0, 0, 0, 1103, 0,
	0, 0, 1108, 0, 0, 0, 0, 0, 0, 1068,
	0, 0, 1109, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 1067, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	1079, 1080, 1086, 1085, 1081, 1082, 1083, 1104, 0, 1078,
	1076, 1077, 1069, 1070, 1071, 1072, 1074, 1075, 1094, 0,
	0, 0, 0, 0, 0, 1090, 1091, 1092, 1093, 0,
	0, 0, 0, 1089, 1073, 0, 0, 0, 0, 1065,
	1066, 0, 1095, 1096, 1097, 1105, 1106, 1107, 0, 0,
	0, 1103, 0, 0, 0, 0, 0, 1102, 1110, 0,
	0, 0, 1068, 0, 0, 1109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 1087, 1100, 0, 0, 0, 0, 0,
	1084, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 0, 0, 1079, 1080, 1086, 1085, 1081, 1082, 1083,
	1104, 0, 1078, 1076, 1077, 1069, 1070, 1071, 1072, 1074,
	1075, 0, 0, 0, 0, 0, 0, 0, 1090, 1091,
	1092, 1093, 0, 0, 0, 0, 0, 1073, 0, 0,
	0, 0, 1094, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 0,
	1102, 1110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 1331, 1320,
	1350, 1309, 1341, 1340, 0, 0, 1311, 1310, 0, 0,
	0, 0, 0, 1352, 1351, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 0, 1338, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 1101, 0, 0, 1079, 1080, 1086,
	1085, 1081, 1082, 1083, 1104, 0, 1078, 1076, 1077, 1069,
	1070, 1071, 1072, 1074, 1075, 1094, 1335, 1333, 1334, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1319, 0, 0, 0, 1103, 0,
	0, 1324, 1322, 1325, 1326, 1327, 1328, 1329, 0, 1349,
	0, 0, 0, 0, 0, 0, 1313, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 0, 1321,
	0, 0, 0, 0, 0, 0, 0, 1101, 1323, 0,
	1079, 1080, 1086, 1085, 1081, 1082, 1083, 1104, 0, 1078,
	1076, 1077, 1069, 1070, 1071, 1072, 1074, 1075, 1332, 0,
	0, 0, 1453, 1451, 1452, 1455, 1454, 0, 0, 0,
	0, 1331, 1320, 1350, 1309, 1341, 1340, 0, 0, 1311,
	1310, 0, 0, 0, 0, 0, 1352, 1351, 0, 0,
	0, 1316, 0, 0, 0, 0, 553, 0, 579, 0,
	0, 0, 1330, 1317, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 0, 0, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 1346, 1314, 1338, 1337, 556, 1347,
	1348, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 1318, 0, 0, 0, 559, 1353, 0, 0, 1335,
	1333, 1334, 0, 565, 566, 0, 0, 0, 575, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 560, 0, 0, 0, 1319, 0, 0,
	0, 0, 0, 0, 1324, 1322, 1325, 1326, 1327, 1328,
	1329, 0, 1349, 0, 0, 578, 0, 0, 0, 1313,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 0, 0, 0, 0, 0, 1315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1339, 562,
	563, 0, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 0, 0,
	0, 0, 564, 571, 0, 0, 0, 0, 0, 0,
	0, 1332, 0, 0, 0, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 1354, 0, 567, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1314, 0,
	0, 0, 1347, 1348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1318, 0, 555, 572, 582, 1353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 573, 0, 0, 0, 577, 0, 0, 0,
	0, 583, 0, 0, 0, 0, 570, 574, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 576,
}
var sqlPact = [...]int{

	4739, -1000, -28, -1000, -1000, -1000, 140, -1000, -1000, -1000,
	-1000, 138, 136, 135, -1000, 133, 130, 129, 127, 125,
	124, 123, 114, 113, 110, 109, -1000, 107, -1000, -1000,
	-1000, -1000, 104, 102, 99, 96, 94, 90, 89, -1000,
	971, 22551, 88, 87, 1348, -1000, 37012, 83, 81, 78,
	76, 1266, 75, 69, 67, 26683, 941, 1369, 65, 64,
	63, 60, 58, 1018, 36670, 39916, 1985, 1138, 1627, 36325,
	22206, 1612, 1485, 35980, -1000, -1000, 35635, 56, 55, 53,
	50, 49, -1000, -1000, 35290, 48, 47, 46, 40, 37,
	36, 35, 34, 26, 25, 24, 23, 22, 21, -1000,
	20, 19, 16, -1000, 45084, 15, 14, 13, 1117, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 886, 95, -1000, 923, 469, 2677, 8331,
	1059, 1039, 1034, 1033, 1016, 39064, 37012, 12, -83, 11,
	-1000, 2007, 646, 19732, 4739, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26338,
	25993, 34945, 34600, 6192, 766, -1000, -31, 23237, 37012, -1000,
	92, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15104, 14747, 542, 92, -1000, -1000,
	-1000, -1000, -1000, 34255, -1000, 33910, 33565, 33220, 1541, 32875,
	-1000, -1000, -1000, -1000, -1000, 32530, -1000, -1000, 1942, 1680,
	1665, 25648, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 32188, 31843, 31498, 31153, 30808, 488,
	-1000, -1000, -1000, 17952, -1000, -1000, -1000, -1000, 9, -1000,
	8, -1000, 5, 4, 0, -1, -1000, -7, -9, -1000,
	-10, -11, -1000, -15, -22, 30463, 839, 1272, -1000, -1000,
	-30, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 37012,
	-1000, 15816, -1000, 487, -1000, 1641, -1000, 15816, -1000, 1270,
	-1000, -1000, -1000, -1000, -1000, 37012, -1000, -1000, -1000, -1000,
	-1000, -1000, 2192, 1219, 485, 30118, -1000, 1452, -1000, 603,
	776, -1000, -1000, -1000, 9399, 149, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1451, 23593, 1126, 1948, 1860,
	2190, 1460, 1846, 1818, 1806, 1802, 1801, 2189, 1010, 2187,
	1815, 1023, 2186, 1799, 1208, 682, 2185, 1636, 1634, -1000,
	-1000, -1000, -1000, 928, -1000, -1000, -1000, 28051, -1000, -1000,
	798, 903, 923, -1000, -1000, -1000, 1391, 1854, 1854, 1854,
	1986, 281, 264, -1000, 95, -1000, 1792, -1000, 1218, -1000,
	-1000, -1000, -1000, -1000, 44279, -1000, -1000, 15816, 15816, 15816,
	15816, 15816, 1121, 513, -1000, 484, 483, 7618, -1000, -1000,
	2164, -1000, -1000, -1000, 315, -1000, -1000, 15816, 92, -1000,
	-1000, -1000, -1000, 473, 2181, -1000, 644, -1000, -1000, -1000,
	613, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1653, 470, 467, 466, -1000, 465, -1000, -1000, 464, 463,
	461, 460, 459, 458, 457, 455, 454, 453, 452, 451,
	445, 444, 441, 1013, -1000, 631, -1000, -1000, 631, 631,
	-1000, 424, 424, 427, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 424, -1000, -1000, -1000, 569, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 440,
	1214, -1000, -1000, 1214, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 765, 38380, -33, 37012, -1000, 438, -33, -1000, -1000,
	437, -1000, 10823, 10823, -1000, -1000, -1000, -1000, -1000, 10111,
	1968, -1000, 3899, -172, 319, 563, -1000, 18664, 21506, -1000,
	-1000, 1221, 1729, 868, -1000, 973, 1728, 524, -1000, 1087,
	-1000, 938, 1727, -124, 1676, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 23935, 23237, -31, -39, -1000, -1000, -1000, 5836,
	44279, -1000, 44279, -1000, 826, 20442, 92, -1000, -1000, -1000,
	-1000, 435, 1382, 1455, -1000, 617, -1000, 318, -1000, 29773,
	617, 1381, -1000, -1000, -1000, 28051, -1000, 37012, -1000, 37012,
	-1000, 864, -1000, 38722, 120, 1723, -1000, -1000, 120, 1721,
	-1000, 119, 1716, -1000, -1000, 1241, 1712, -1000, -39, 1709,
	-1000, -1000, 15816, -48, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 646, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 29428, 22894, 1427, 577, 44279, 2060,
	45024, 23935, 44279, 22894, -1000, -1000, 37012, -1000, 15816, -1000,
	2055, 1386, -35, -1000, -1000, -1000, -1000, -1000, 1408, 1375,
	743, 1370, 9399, 9399, 1845, -1000, 143, 6192, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 29083, -1000, -1000, -1000,
	1140, 37012, -1000, -1000, 1650, -1000, 22894, 37012, -1000, 37012,
	-1000, 37012, -1000, 37012, -1000, 37012, -1000, -1000, -1000, -1000,
	-1000, 3566, -1000, 1649, -1000, -1000, 37012, -1000, 1407, -1000,
	-1000, -1000, 28741, 28396, -1000, 940, 794, -1000, -1000, 126,
	-1000, 37012, 2008, 601, -1000, 1391, 1358, 1630, 666, 1293,
	1481, 14390, 1454, 15816, 95, -1000, -1000, 95, 95, 9043,
	-1000, -1000, -1000, 37012, -1000, 44801, 45024, 6192, 777, 15816,
	15816, 15816, 15816, 15816, 15816, 15816, 15816, 15816, 15816, 15816,
	15816, 15816, 15816, 15816, 15816, 15816, 15816, 15816, 15816, 15816,
	15816, 15816, 15816, 15816, 15816, 15816, 15816, 15816, 15816, 15816,
	15816, 1323, 15816, 762, 15816, 15816, 15816, 15816, 1307, 1082,
	422, 1150, -1000, 2107, 2107, 2107, 44546, 44546, 381, 513,
	-1000, 15816, -1000, 85, 15816, 264, 42325, -32, 7262, -1000,
	-1000, -1000, 14034, 629, 44279, 92, 6548, -1000, 2161, 858,
	1662, 1586, 434, 533, 530, 529, 528, 15816, 15816, 13678,
	13321, 12964, 16528, 12607, 15816, 7974, 15816, 15816, 15816, 15816,
	12250, 11893, -1000, 433, -1000, -1000, -1000, -1000, 2160, -1000,
	-1000, 2157, -1000, 772, 771, 2154, -1000, -35, -1000, 38380,
	-1000, 37012, -33, 2054, 37012, -1000, 106, -1000, 43202, -1000,
	106, -53, -1000, 1473, 1471, 20087, 1400, 1157, 1157, 1157,
	-1000, 430, 507, 563, 5105, 11536, -1000, 27025, 1160, 169,
	256, 18308, 1968, -1000, 37012, -43, 1115, -1000, 25303, 1955,
	1915, 1889, 28051, 2025, 85, 1916, 1632, 761, 28051, 1913,
	760, 2009, 85, 1623, 750, 37012, 6192, 1911, 545, -1000,
	37012, -1000, -1000, -1000, 1622, -54, -1000, -1000, 24961, 2051,
	1707, -1000, 1455, -1000, 888, 891, 1493, 891, 861, 891,
	-1000, -1000, 1047, -1000, 2048, 37012, 1253, 1380, -1000, -1000,
	783, 1706, 624, 407, 2040, 407, 20796, -1000, 37012, -1000,
	37012, -1000, -1000, 37012, -1000, 37012, -1000, 37012, 37012, -1000,
	37012, 37012, -61, 44279, 40235, 24619, 749, -1000, 657, 24961,
	339, -63, -1000, 860, -1000, -1000, -1000, -1000, 270, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 427, 1013, 424, 424, 424,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 569, -1000, -1000,
	631, 631, 631, -1000, -1000, -64, -1000, 1621, 582, -68,
	681, -35, -1000, 1214, -1000, 1159, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2180,
	-1000, 2140, -1000, -1000, 2150, -36, -1000, -36, -1000, 6192,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 37012, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3462, -1000, -1000, -1000,
	-1000, -1000, -1000, 37012, 37012, 37012, -1000, 28051, 618, 1645,
	-1000, 1920, 1358, 1630, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 44279, -1000, 376, -1000, -1000, 44279, 1004, 1520,
	-1000, 1520, -37, -1000, 43079, 1459, 37012, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 600, 932,
	932, 820, 820, 820, 820, 2272, 217, 267, 2594, 486,
	486, 486, 486, 486, 486, 486, 486, 258, 792, 792,
	258, 258, 258, 258, 258, 486, 486, 486, 44546, 44402,
	677, 15816, 15816, 747, 1081, 422, 677, 15816, 677, 677,
	677, 677, -1000, 1440, -1000, -1000, -1000, -1000, 1620, 419,
	16528, 16528, -1000, -1000, -1000, 7618, 16884, -1000, -1000, -1000,
	-1000, 412, 15816, -1000, 42423, -226, 240, -70, -1000, 15816,
	503, -93, -1000, 873, -1000, 15816, -1000, -8, 15816, 15816,
	15816, 239, -1000, 237, -1000, 746, -1000, 736, 726, 725,
	-1000, 411, 1146, 409, 408, 15816, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 44132, 39793, 234, -1000, 1618, -70,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 232, -1000, 229,
	-1000, 43904, -70, 228, 40765, -1000, 16528, 16528, 16528, 7618,
	405, 226, -1000, 42798, -1000, 43865, 11179, 11179, 11179, 221,
	43637, 15816, -70, 39754, 4584, 4108, -69, -84, -1000, -86,
	-1000, 2149, -94, 220, 597, 589, 218, -1000, -1000, 403,
	-97, 624, 10823, 19376, 6192, -1000, 624, 10111, -1000, 20087,
	20087, 1402, 1441, 20087, -1000, -1000, -1000, -1000, 27025, 504,
	563, 27025, -1000, 2148, 1462, 215, -1000, -1000, -1000, 37012,
	402, -1000, 563, 214, 1001, 37012, 37012, 37012, -1000, -1000,
	1372, 38038, 1363, 45024, 37012, -1000, 401, 400, 1458, 1449,
	37012, 37012, 37696, 37354, 37012, 1000, 85, -1000, 583, 399,
	37012, 961, 574, 37012, 85, -1000, 397, 37012, 947, -1000,
	572, 1558, 1223, -1000, 825, 1617, 37012, 213, -103, -38,
	45024, -1000, -1000, -1000, -1000, -1000, 37012, 428, 37012, 85,
	37012, -1000, -1000, 891, -1000, 2145, -1000, -1000, -1000, -1000,
	-1000, -1000, 891, -1000, 2179, 85, 37012, 1702, 1753, 538,
	37012, 1481, 15816, 1182, -1000, 19020, 648, 37012, 919, 91,
	-1000, -1000, -1000, 558, 37012, -1000, -1000, 120, 120, -1000,
	119, 1241, -39, -1000, 15816, -1000, -1000, 37012, 23935, -104,
	-1000, -1000, 45024, -1000, 510, 773, -1000, 2144, 609, 23935,
	37012, 9399, 9399, -1000, 1492, -1000, -1000, 942, -1000, 992,
	-1000, -1000, -1000, -1000, 9399, -1000, -44, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1201, 1181, -1000, -1000, -1000, 1004,
	-1000, 15816, -1000, -1000, -1000, 9043, -1000, -1000, -1000, 37012,
	-167, 15816, 677, 677, 15816, 16528, 16528, -1000, 677, -1000,
	-1000, -1000, -1000, -1000, 1615, 396, 15816, 45024, 39943, 39877,
	-111, -1000, 15816, -40, -1000, 15816, -1000, 42048, -1000, -1000,
	505, 1744, -1000, 15816, 43490, 199, 10467, -1000, 43367, -16,
	-16, -1000, 2176, 1367, 1252, 995, 869, 2134, -1000, 21151,
	625, 1169, 41950, 44801, 45024, -1000, 15816, -1000, -1000, 1614,
	15816, -1000, 44801, 45024, 16528, 16528, 16528, 16528, 16528, 16528,
	16528, 16528, 16528, 16528, 16528, 16528, 16528, 16528, 16528, 16528,
	16528, 16528, 16528, 1468, 16528, 2100, 2100, 2100, -41, 15816,
	-1000, 1596, 1614, 15816, 15816, 45024, 198, 197, 194, -1000,
	15816, -70, 15816, 15816, 15816, -1000, -1000, -1000, 193, -1000,
	2115, -1000, -1000, -1000, -1000, 339, -1000, 1584, -1000, -89,
	-1000, 1968, -1000, 1584, -1000, -1000, 1402, -1000, 395, 15816,
	20087, -1000, 502, -1000, -113, -1000, 27025, -1000, 501, -223,
	-1000, 556, -1000, 563, 392, 37012, 27025, -1000, -1000, -1000,
	724, 723, 1700, -1000, 1337, -1000, 652, -1000, 951, 15816,
	17596, 391, 390, 1026, -1000, 1697, 1241, 1696, 1241, -1000,
	-43, 1083, -1000, 21861, 15816, -1000, 720, 21861, -1000, -1000,
	15816, -1000, 719, 21861, 609, 1613, 793, -1000, 817, -1000,
	1545, -1000, 24961, 389, 37012, 382, -1000, 378, -1000, -1000,
	-1000, -1000, 373, 37012, 1422, 538, 24277, -1000, 617, 919,
	-1000, 44279, -1000, 919, 8687, 1905, -121, -1000, -1000, -1000,
	624, 20796, 20087, 10111, -126, -1000, -1000, -1000, -1000, 44279,
	-44, 1852, 1852, -1000, 2105, -1000, 500, 192, -1000, 27709,
	-1000, -44, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 37012,
	1540, 6192, 37012, 37012, 1205, 41673, -1000, 1900, 6192, 2139,
	677, 3416, 354, 15816, 45024, 44669, -128, 15816, 15816, -1000,
	191, 15816, 495, 44279, -1000, -1000, -1000, 44279, 15816, 2172,
	15816, 187, 184, 182, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 181, -1000, -1000, 39406, 15816, 180, -1000, 179,
	178, 44279, 1596, 44279, -1000, -1000, 575, 575, 881, 881,
	881, 881, 2100, 1177, 561, 2632, 701, 701, 701, 1469,
	608, 608, 701, 701, 701, 1599, 1412, 372, 40390, 15816,
	177, -1000, -1000, 44279, 44279, 176, -1000, -1000, -1000, -70,
	295, 41575, 41298, -1000, 173, 171, 1568, 1978, -1000, 20087,
	1568, -1000, 37012, 44279, -1000, -172, -1000, 2093, -1000, -1000,
	1462, -1000, 5475, 27025, 37012, -129, -1000, 37012, 37012, 37012,
	1693, -1000, 2840, -1000, 41200, -131, -1000, 302, 1939, 15816,
	-1000, -1000, 370, 17596, 37012, -1000, 1437, 1483, 675, 37012,
	-1000, 37012, -1000, 37012, 37012, 37012, -1000, 366, 92, -134,
	37012, -1000, -136, 37012, -1000, -1000, 23935, 770, -1000, 1091,
	1553, -1000, 17596, 357, 37012, 24961, 2037, 17596, 1248, 1426,
	538, 24277, -1000, 783, -1000, -1000, -45, -1000, 336, 85,
	919, -1000, -46, -1000, 554, 1834, -1000, 1833, 494, -1000,
	-1000, -47, 356, -1000, 544, 541, -1000, -50, -1000, 536,
	-1000, -1000, -1000, -1000, -1000, -1000, 1900, 15816, 15816, 44669,
	-139, -1000, 677, 677, -1000, 40923, -1000, 44279, -1000, 43367,
	-1000, -1000, -1000, -1000, 1084, -1000, 40825, -1000, -1000, -1000,
	-1000, 16528, 1595, 355, 45024, 40548, -1000, -1000, 15816, -1000,
	-1000, -1000, -1000, 620, 15816, 15816, 1968, 620, -141, 563,
	-1000, -1000, -1000, 2091, -1000, -142, -1000, -1000, -1000, -1000,
	37012, -1000, 37012, -1000, 6192, 37012, 1593, 1304, -1000, -1000,
	1439, 352, 16528, 37012, -1000, 1048, 17596, 1900, 92, 6192,
	1900, 40450, 6548, -147, -149, 1303, -1000, 1302, 15816, -1000,
	45024, 1241, 1241, -1000, 712, 699, 15816, 695, -1000, 689,
	-1000, -51, 21861, -1000, -1000, 1972, 1107, -150, 17596, -152,
	165, 85, -157, 37012, -1000, 538, 24277, -1000, 1753, 1771,
	37012, 1869, -1000, -1000, 351, 341, 340, -1000, 27367, 27367,
	23935, 23935, 1540, -1000, 37012, -1000, 677, 677, -1000, -1000,
	164, 1169, 1964, -1000, 1122, 16528, 45024, -164, -1000, 40173,
	-1000, 37012, 44279, -70, -1000, -1000, 27025, 490, -1000, -1000,
	1888, -1000, -1000, 37012, 1317, -1000, -1000, 15816, 40390, 338,
	1545, 331, -1000, -1000, -1000, -1000, -1000, -1000, 1939, -8,
	-1000, 982, -1000, -1000, 44279, 1936, -1000, -1000, 37012, 37012,
	-16, 327, 326, -1000, 1077, 37012, 1048, -169, -1000, 1545,
	-1000, 1048, 325, 24277, -1000, 1422, 789, -170, 37012, -1000,
	-1000, 6904, 23935, 23935, -1000, -175, -1000, -1000, -1000, -177,
	-1000, 1220, 15816, 1122, -178, -1000, -1000, -60, -1000, 2031,
	-1000, -1000, -1000, -1000, 1689, 40075, 1388, 37012, -1000, 37012,
	1900, 162, 37012, 656, 6192, -1000, -1000, 160, 15816, 15816,
	324, 323, 322, 1545, 1048, -1000, 1545, 17596, -1000, 1426,
	859, -1000, 624, -1000, -183, -185, -1000, -1000, 159, 16172,
	16172, -70, -1000, 37012, 320, 1669, -1000, 1217, 1068, 153,
	-186, -1000, -1000, 318, -1000, 15816, -1000, 2172, -188, -191,
	37012, 37012, 37012, -1000, 1545, -1000, -193, -1000, 20796, -1000,
	609, 609, -1000, -1000, -1000, 17240, 1158, 902, 42700, -1000,
	-1000, -1000, 37012, -1000, 1224, 1222, 914, -1000, -1000, -1000,
	-1000, -1000, 1388, 44279, -1000, -1000, -194, -196, -199, -1000,
	1048, -184, -1000, -1000, 2068, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1778, -1000, 664, 1257, 1257, 1217, 314, 303,
	1207, 1545, -1000, 15460, -1000, 2076, -1000, -1000, 1438, -1000,
	-1000, 1070, 1062, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 151, 6192, -6, 6192, -1000, 647, -1000, 643, 298,
	1414, -49, 9755, 748, 308, -80, -1000, -201, -1000, 44279,
	-1000, -1000, 294, -1000, 9755, 1070, -1000, 9755, 9755, -202,
	-1000, -1000, -207, -1000, -55, 1062, -122, -1000, -1000, 1062,
	-1000,
}
var sqlPgo = [...]int{

	0, 2672, 2665, 1714, 2145, 2664, 2660, 2659, 2656, 2654,
	2650, 2649, 2648, 2641, 2640, 2639, 2637, 2636, 2634, 2632,
	2631, 2630, 2629, 2625, 2139, 2624, 2130, 2615, 2612, 2610,
	2607, 2602, 38, 2600, 2595, 2115, 2593, 2592, 2591, 2590,
	2587, 2582, 2580, 2113, 2576, 2103, 2570, 2565, 2564, 2563,
	2560, 2056, 2557, 80, 116, 2053, 2548, 2545, 2051, 2048,
	2045, 2543, 1990, 2541, 2538, 1976, 1873, 2535, 87, 2532,
	2527, 2526, 1851, 1827, 2525, 2523, 2522, 153, 2517, 1792,
	2514, 2513, 2512, 2511, 2508, 2507, 2506, 2501, 2496, 2493,
	2492, 2491, 2490, 2488, 2487, 2485, 2484, 2483, 2482, 163,
	2478, 2477, 1781, 1719, 2476, 2472, 44, 35, 24, 58,
	27, 148, 2704, 142, 2471, 2470, 2463, 2462, 2460, 2458,
	19, 94, 101, 2457, 767, 2455, 2453, 54, 41, 23,
	20, 2448, 91, 2447, 2442, 2358, 30, 2416, 2415, 134,
	2411, 50, 26, 947, 156, 152, 112, 124, 2407, 2404,
	2403, 55, 120, 7, 4, 3, 6, 1, 2397, 2,
	5, 2396, 2393, 17, 84, 28, 2388, 57, 46, 2385,
	2384, 130, 2383, 60, 90, 1611, 113, 122, 1150, 92,
	2380, 64, 13, 63, 2378, 2375, 161, 40, 2373, 37,
	78, 147, 114, 2371, 48, 2370, 2368, 127, 108, 162,
	132, 73, 138, 131, 2364, 2359, 2356, 104, 2355, 119,
	93, 2354, 2352, 83, 2351, 97, 140, 2349, 143, 109,
	2348, 2346, 115, 2345, 126, 2344, 2343, 160, 150, 117,
	18, 51, 68, 16, 1610, 1609, 135, 86, 52, 62,
	2342, 811, 1410, 1328, 43, 105, 82, 69, 100, 66,
	95, 149, 33, 2339, 2337, 139, 2336, 2335, 2333, 2332,
	2331, 103, 2329, 2324, 32, 2322, 79, 34, 59, 107,
	39, 99, 129, 111, 159, 102, 2320, 81, 125, 2318,
	260, 2317, 2316, 1800, 121, 2315, 2314, 2313, 1757, 1618,
	1162, 263, 2307, 2299, 1013, 391, 2296, 2295, 89, 2294,
	118, 110, 157, 146, 145, 96, 2293, 123, 22, 2276,
	53, 36, 0, 480, 229, 2274, 128, 72, 2270, 2268,
	2267, 2266, 31, 11, 10, 9, 14, 12, 49, 29,
	2263, 2261, 133, 75, 67, 2249, 158, 2247, 2245, 2242,
	45, 2240, 21, 2238, 15, 2237, 2230, 25, 8, 2222,
	2216, 151, 2213, 98, 2212, 1955, 2210, 154, 2207, 2203,
	1734, 2199, 61, 106,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 122, 122, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 119, 119, 124, 124, 124, 126, 126,
	123, 123, 118, 118, 24, 24, 66, 66, 109, 59,
	59, 59, 310, 310, 311, 311, 105, 105, 106, 106,
	106, 106, 107, 107, 108, 108, 108, 34, 34, 34,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 43, 43, 44, 44, 44,
	44, 44, 44, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 50, 50, 50, 48, 48, 48,
	47, 47, 47, 46, 46, 46, 49, 49, 49, 177,
	177, 176, 176, 180, 180, 51, 51, 51, 51, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 54, 54, 54, 54, 54,
	54, 54, 279, 279, 278, 52, 52, 253, 253, 55,
	55, 208, 208, 56, 56, 56, 56, 56, 57, 57,
	67, 67, 351, 351, 351, 355, 355, 356, 356, 357,
	357, 357, 357, 357, 357, 357, 353, 353, 62, 62,
	62, 62, 63, 63, 63, 64, 64, 104, 104, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 29, 30,
	30, 31, 31, 32, 32, 73, 73, 73, 75, 72,
	72, 72, 74, 74, 74, 74, 76, 76, 77, 77,
	77, 77, 77, 78, 78, 304, 302, 302, 303, 303,
	149, 149, 149, 149, 149, 150, 150, 150, 309, 309,
	309, 309, 309, 309, 308, 308, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 91, 91, 91, 99, 99, 99, 99,
	99, 99, 99, 80, 80, 85, 85, 85, 85, 85,
	81, 81, 86, 86, 87, 87, 88, 88, 88, 88,
	88, 88, 82, 82, 82, 82, 90, 90, 90, 90,
	89, 89, 95, 95, 95, 95, 95, 95, 92, 92,
	92, 92, 93, 93, 93, 96, 96, 96, 96, 83,
	83, 84, 84, 97, 97, 98, 98, 98, 98, 98,
	94, 94, 94, 352, 352, 354, 354, 60, 60, 38,
	38, 39, 39, 151, 151, 152, 152, 232, 232, 232,
	232, 153, 153, 125, 125, 125, 154, 154, 155, 155,
	156, 156, 156, 158, 158, 159, 159, 160, 160, 160,
	157, 157, 157, 231, 320, 320, 321, 321, 321, 321,
	321, 321, 322, 322, 322, 322, 322, 322, 322, 318,
	318, 319, 316, 316, 317, 317, 317, 317, 358, 358,
	230, 230, 163, 163, 323, 323, 323, 323, 324, 324,
	324, 324, 324, 327, 326, 325, 325, 325, 325, 325,
	265, 265, 265, 42, 42, 196, 196, 195, 195, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	198, 101, 101, 40, 40, 131, 131, 41, 41, 37,
	37, 37, 212, 212, 167, 167, 270, 270, 270, 142,
	142, 120, 120, 120, 17, 13, 13, 13, 13, 13,
	13, 23, 23, 21, 21, 213, 213, 214, 214, 61,
	61, 65, 65, 70, 70, 100, 100, 100, 100, 100,
	100, 25, 25, 25, 25, 33, 33, 33, 33, 69,
	69, 360, 360, 138, 138, 138, 138, 139, 139, 227,
	227, 228, 228, 361, 361, 229, 229, 229, 133, 132,
	134, 134, 36, 36, 36, 127, 127, 128, 128, 129,
	129, 130, 130, 362, 362, 58, 58, 58, 103, 103,
	145, 145, 224, 224, 224, 226, 226, 225, 225, 225,
	194, 194, 194, 102, 102, 172, 172, 182, 182, 183,
	183, 276, 184, 184, 68, 68, 112, 112, 110, 110,
	110, 110, 110, 110, 110, 110, 111, 111, 111, 113,
	113, 113, 113, 113, 113, 113, 116, 116, 116, 117,
	117, 117, 115, 115, 333, 333, 333, 336, 336, 332,
	334, 334, 335, 335, 359, 359, 199, 199, 199, 162,
	161, 161, 165, 165, 164, 166, 166, 269, 269, 269,
	192, 192, 191, 191, 191, 191, 217, 217, 215, 215,
	216, 216, 220, 220, 221, 221, 221, 222, 222, 223,
	223, 190, 190, 249, 249, 219, 219, 218, 114, 114,
	114, 171, 171, 171, 173, 173, 239, 239, 239, 240,
	240, 238, 238, 238, 238, 271, 271, 271, 271, 271,
	271, 271, 271, 349, 349, 349, 350, 350, 268, 268,
	272, 272, 272, 272, 272, 272, 266, 266, 266, 266,
	267, 267, 277, 277, 202, 202, 202, 202, 200, 200,
	201, 201, 273, 273, 273, 273, 193, 193, 274, 274,
	274, 233, 233, 280, 280, 280, 298, 298, 170, 170,
	170, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 282, 282, 282, 282, 284, 284, 284, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 297, 297, 297,
	297, 297, 285, 285, 292, 292, 293, 293, 294, 295,
	286, 286, 287, 287, 288, 289, 296, 296, 296, 296,
	300, 300, 290, 290, 290, 290, 290, 291, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 210, 210, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 243, 243, 243, 243,
	245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
	245, 328, 328, 328, 328, 328, 328, 328, 328, 330,
	330, 331, 331, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 337, 337, 338, 338, 340, 340, 341,
	341, 342, 343, 343, 343, 344, 345, 345, 339, 339,
	346, 346, 346, 347, 347, 348, 348, 348, 348, 348,
	255, 255, 256, 257, 263, 263, 263, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 140, 140, 140, 140, 140, 179, 179,
	178, 178, 252, 252, 250, 250, 254, 254, 203, 203,
	299, 299, 299, 299, 299, 299, 299, 204, 204, 204,
	211, 205, 205, 206, 206, 206, 206, 206, 246, 247,
	207, 207, 207, 248, 248, 258, 262, 262, 261, 260,
	260, 259, 259, 236, 236, 237, 237, 235, 234, 187,
	187, 186, 186, 185, 185, 363, 363, 264, 264, 188,
	188, 189, 181, 181, 275, 275, 275, 275, 174, 174,
	147, 147, 175, 175, 143, 143, 146, 146, 144, 144,
	144, 144, 168, 168, 169, 169, 141, 141, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 301,
	301, 301, 251, 135, 135, 135, 136, 136, 137, 137,
	306, 306, 306, 307, 307, 307, 307, 305, 305, 305,
	305, 305, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 1, 2, 2, 7, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 1, 4,
	7, 1, 3, 2, 4, 6, 6, 3, 5, 3,
	2, 6, 3, 3, 4, 4, 3, 3, 1, 3,
	3, 1, 1, 2, 1, 1, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 3, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 2, 3, 3, 3,
	2, 3, 4, 3, 5, 3, 4, 5, 2, 3,
	3, 3, 4, 2, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 2, 3, 7, 7, 7, 4, 5,
	5, 5, 5, 2, 0, 2, 0, 3, 2, 8,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 1, 0, 9, 9,
	6, 7, 5, 3, 5, 1, 3, 1, 1, 1,
	10, 11, 9, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 3, 1, 0, 1, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 2, 1, 2,
	1, 4, 2, 4, 3, 3, 0, 6, 3, 11,
	14, 4, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 2, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 1, 0, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 3, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	4, 4, 2, 3, 5, 5, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	1, 0, 2, 2, 1, 1, 1, 0, 2, 5,
	2, 3, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 3, 0, 2, 0, 1, 0, 2, 2, 2,
	3, 3, 2, 0, 1, 3, 3, 5, 1, 1,
	3, 2, 4, 4, 0, 8, 4, 6, 3, 3,
	1, 5, 5, 0, 2, 3, 1, 3, 2, 0,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 3, 4,
	1, 1, 1, 5, 1, 3, 3, 1, 3, 3,
	1, 3, 3, 1, 1, 3, 3, 1, 1, 6,
	6, 4, 3, 4, 3, 4, 3, 4, 4, 3,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 5, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 385, -4, -24, -26, -29, -34,
	-35, -56, -43, -44, -45, -55, -51, -57, -58, -59,
	-60, -52, -66, -65, -67, -70, -68, -61, -62, -71,
	-79, -100, -101, -102, -103, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 48, -30, 72, -36, -37, -38,
	-39, 74, -40, -41, -42, 95, -335, 99, -46, -47,
	-48, -50, -49, 103, 110, 113, 135, 146, 234, 240,
	261, 263, 265, 272, -110, -112, 259, -63, -64, -72,
	-73, -74, -75, -104, 285, -80, -81, -82, -83, -84,
	-85, -86, -87, -88, -89, -90, -91, -92, -93, -94,
	-95, -96, -97, -98, 288, -25, -33, -69, 327, -11,
	-12, -15, -14, -16, -13, -20, -22, -19, -21, -23,
	-17, -18, -10, 112, -333, -113, -111, 382, 260, 336,
	35, 297, 62, 106, 267, 352, 359, -116, -114, -115,
	-117, 277, 344, 307, 386, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 2, 307,
	347, 88, 155, 245, -351, 2, -175, 307, 88, -144,
	-135, 375, 4, -312, -314, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 49, 56, 61, 62, 63,
	68, 65, 66, 67, 70, 72, 73, 76, 77, 78,
	86, 87, 89, 91, 95, 97, 99, 102, 103, 105,
	110, 112, 111, 113, 123, 124, 129, 131, 136, 142,
	143, 146, 147, 148, 156, 159, 161, 154, 171, 172,
	173, 177, 178, 179, 182, 181, 186, 187, 190, 191,
	194, 196, 199, 197, 200, 203, 201, 205, 206, 208,
	207, 213, 215, 216, 218, 221, 224, 227, 230, 231,
	232, 233, 234, 236, 238, 240, 242, 243, 244, 245,
	246, 248, 249, 251, 252, 253, 254, 255, 259, 257,
	258, 260, 261, 262, 263, 265, 267, 268, 270, 286,
	287, 298, 272, 273, 274, 275, 276, 281, 278, 279,
	282, 283, 285, 288, 290, 293, 296, 297, 299, 302,
	303, 300, 295, 306, 308, 309, 310, 311, 312, 313,
	314, 315, 322, 323, 327, 328, 329, 330, 333, 334,
	335, 336, 338, 341, 342, 343, 348, 353, 354, 355,
	356, 357, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 52, 53, 54, 57, 90, 92, 93, 109, 114,
	115, 125, 126, 127, 137, 139, 149, 150, 153, 160,
	162, 163, 164, 165, 166, 168, 175, 176, 184, 202,
	212, 214, 225, 229, 237, 239, 247, 269, 280, 291,
	292, 301, 304, 317, 318, 319, 324, 325, 340, 344,
	345, 385, 385, 2, 172, 244, -143, -135, 88, 385,
	385, 385, 385, 307, 2, 278, 337, 347, -212, 88,
	332, 385, 385, 385, -135, 240, 22, 2, 97, 159,
	335, 334, 22, 236, 279, 309, 311, 2, 385, 385,
	385, 385, 385, 2, 347, 307, 155, 88, 337, -135,
	2, -54, 2, 382, -53, -4, -35, -45, -55, -51,
	-24, -26, -43, -59, -58, -60, -62, -66, -65, -68,
	-72, -73, -79, -102, -103, 285, 112, -355, 2, 22,
	-356, -357, 74, 103, 135, 277, 159, 97, 334, 307,
	2, 172, 2, -135, 2, -351, 2, 172, 2, -355,
	2, -135, 2, -139, 2, 272, -135, 385, 385, 385,
	385, 385, 191, 56, 269, 282, -77, 323, -76, 317,
	-304, -78, 2, -176, 203, -135, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 2, -99, 282, 34, 56, 22, 61,
	89, 136, 155, 156, 178, 69, 70, 243, 191, 173,
	322, 179, 283, 308, 323, 74, 338, 312, 111, 4,
	88, 203, 284, 317, 385, 385, 385, -359, 2, 307,
	274, 288, -111, -113, -112, -164, -165, 331, 167, 108,
	223, -110, -112, 2, -333, -99, 282, 2, 56, 22,
	-302, 2, -264, 219, -241, 94, -243, 373, 374, 368,
	209, 358, -255, -245, -258, 109, 269, 382, -143, -244,
	388, 9, -330, -112, 29, -256, -257, 50, -135, 7,
	8, 5, 6, -141, -282, -251, -291, 326, 116, 211,
	-328, -329, 4, -312, -306, -283, -293, -287, -290, 168,
	59, 80, 81, 84, 82, 85, 284, 337, 51, 28,
	114, 115, 229, 237, 304, 324, 325, 149, 212, 150,
	57, 137, 184, 102, 37, 39, 41, 42, 52, 53,
	90, 92, 93, 125, 126, 127, 160, 162, 163, 164,
	165, 166, 214, 247, 291, 301, 318, 319, 345, -313,
	-294, -295, -288, -289, 75, 117, 134, 158, 151, 170,
	174, 185, 188, 198, 204, 226, 228, 266, 289, -296,
	-360, 2, 323, 323, 2, -360, 2, -360, 2, -138,
	2, 323, 320, -336, 248, -332, -135, -336, 385, 385,
	387, 385, -161, -162, 2, 22, 100, -189, 2, 382,
	-271, 2, 380, -273, -143, -112, -272, 382, 220, -3,
	2, -273, 149, -143, 2, -273, 149, -143, 2, -135,
	2, -146, 149, -143, -305, 4, -312, -314, -313, -315,
	59, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 50, 51, 55, 58, 60, 69, 74, 79, 80,
	82, 81, 83, 84, 85, 94, 96, 98, 100, 101,
	104, 106, 108, 116, 118, 130, 132, 133, 135, 138,
	140, 152, 155, 157, 167, 169, 180, 183, 189, 192,
	193, 209, 210, 211, 217, 219, 220, 222, 223, 235,
	241, 250, 264, 277, 284, 294, 305, 307, 316, 320,
	321, 326, 331, 332, 337, 339, 346, 347, 349, 350,
	351, 352, 320, 387, -175, -168, -135, -235, -234, 384,
	-241, 2, -241, 2, 133, 382, -186, -187, -234, -235,
	2, -176, 149, -176, 2, -135, 2, -176, 2, 155,
	-135, 149, 2, -135, 22, 133, 2, 169, 2, 169,
	2, -274, 2, -273, -177, 149, 2, -176, -177, 149,
	2, -147, 149, 2, -146, -135, 149, 2, -168, 149,
	2, -208, 382, -279, 2, -278, -307, 4, -312, -314,
	-313, 344, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 282, 219, 387, -176, -241, -253,
	382, 133, -241, 219, -135, 2, 286, 2, 382, -77,
	54, 323, -228, 2, -229, -132, -133, -134, 171, 242,
	246, 357, 320, 363, 133, -302, -180, 384, -99, 2,
	-310, 2, -308, 9, -307, 5, 286, 2, 243, 283,
	56, 133, 2, 2, -352, 2, 219, 133, 2, 133,
	2, 133, 2, 133, 2, 133, 2, 2, 243, 283,
	2, 130, 2, 322, 2, 2, 133, 2, 171, 242,
	298, 2, 307, 347, 2, 133, 133, 357, 2, -193,
	-273, 307, 357, 22, -164, -165, -218, -191, 130, -215,
	-216, 189, 118, 217, -199, 22, 100, -199, -199, 44,
	383, 383, -99, 286, 2, 10, 11, 58, 33, 373,
	374, 375, 376, 128, 377, 378, 371, 372, 370, 361,
	362, 365, 366, 367, 71, 364, 363, 64, 195, 271,
	119, 120, 121, 122, 256, 13, 14, 15, 26, 222,
	188, 358, 151, 289, 368, 16, 17, 18, 170, 36,
	152, -140, -148, -241, -241, -241, -241, -241, 228, -185,
	-236, 380, -112, 382, 382, -112, -241, -178, 382, 7,
	-112, -250, 380, -259, -241, -186, 382, 5, 382, 5,
	-337, 353, 130, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 239, -300, 348, -300, -300, -284, 382, -284,
	-285, 382, -284, 354, 359, 382, -227, -228, -227, 320,
	-139, 387, -336, -169, 382, -189, -181, -275, -241, 375,
	-181, -188, -264, 75, -202, 174, 204, 134, 185, 266,
	158, 7, -54, -238, 388, 382, 375, -268, 359, -112,
	-272, 382, -271, -143, 382, -122, 257, -121, 21, 23,
	103, 342, 109, 295, 313, 112, 273, 257, 109, 112,
	257, 295, 313, 273, 257, 109, 388, 112, -310, -144,
	387, -305, 375, 299, 383, -174, -143, -187, 382, -163,
	209, -196, -195, -197, 147, 197, 206, 198, 297, 47,
	86, -131, -334, 352, -163, 382, -136, 149, 2, -135,
	-334, 209, -274, -145, -143, -145, 285, -135, 30, -124,
	387, 49, 262, 109, -124, 109, -124, 387, 109, -124,
	109, 109, -178, -241, 383, 387, -351, -357, 74, 382,
	30, -252, -280, -281, -283, -292, -286, -290, -291, 40,
	46, 45, 176, 175, 314, 202, 280, 292, 340, 153,
	38, 218, 161, 4, 160, 162, 163, 164, 165, 166,
	291, 37, 247, 126, 127, 125, 102, 93, 92, 214,
	42, 41, -294, -295, -288, -289, 90, 318, 319, 168,
	39, 53, 52, 345, 301, -311, -310, -351, -304, -178,
	30, -228, 2, -361, 387, 187, -150, 194, 208, 142,
	220, 355, -309, 5, 4, -251, -265, 94, 191, -291,
	8, 374, -301, 7, 373, -303, -302, -303, 78, 384,
	-305, -176, 22, 287, 2, -304, -354, 130, -351, -304,
	-304, -304, -304, -304, 282, -54, 130, -135, 187, -304,
	2, -304, 2, 307, 155, 307, -124, 387, -143, 65,
	66, 357, -218, -191, -192, -191, -219, -218, 334, -216,
	-215, -220, -241, 22, -223, 124, 205, -241, -243, -111,
	-111, -111, -166, -269, -241, 241, 155, -304, -298, -280,
	-297, 252, 253, 251, 255, 254, -280, -305, 317, -241,
	-241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
	-241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
	-241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
	-241, 188, 151, 289, 36, 152, -241, 320, -241, -241,
	-241, -241, 201, 209, 211, 326, 116, 333, 100, 215,
	-363, 305, 32, -248, -112, 382, -263, 27, 294, 22,
	-255, 269, 382, -236, -241, -237, -179, -178, 383, 387,
	-179, -254, -250, -262, -261, 349, 383, -178, 346, 22,
	100, 375, 2, 7, -209, 356, 200, 91, 143, 199,
	-210, 276, -338, 123, 138, 382, 383, 2, 383, 2,
	383, 2, 383, 2, -241, -241, -203, 2, -299, -178,
	4, 356, 200, 91, 143, 199, 276, -203, 2, -204,
	2, -241, -178, -205, -242, -243, 373, 374, 368, 382,
	269, -206, 2, -241, -179, -241, 43, 183, 321, -207,
	-241, 133, -178, -241, -241, -241, -178, -178, 2, -178,
	2, 382, 7, 7, 317, 317, 7, -139, -332, 30,
	-168, -171, 387, 133, 30, 4, -171, 387, 383, 174,
	174, -271, -202, 174, -200, 226, -200, -200, -349, 382,
	381, -268, -305, 380, 389, -179, 2, -267, -266, 30,
	-135, 224, 383, -143, 387, 320, -213, 69, 60, -231,
	149, 60, -316, -135, 69, -317, 55, 332, 241, 132,
	-213, 69, -213, 69, 69, -273, 33, -68, 67, 133,
	320, -273, 67, 320, 33, -68, 133, 320, -146, -305,
	67, -277, 360, -135, 133, 383, 387, -151, -168, -152,
	-135, -232, -231, -318, -319, -316, 155, 332, 117, 30,
	109, -197, -198, 44, -301, 374, -198, 197, 198, 86,
	-198, -198, 352, -198, 233, 30, 219, 209, -127, 310,
	109, -233, 350, -224, -68, 382, 94, 30, -224, -182,
	-183, -276, -184, -143, 382, -135, -176, -177, -177, -146,
	-147, -135, -168, 383, 387, -54, -278, 320, 339, -152,
	-53, 383, 387, -170, 29, 380, -209, 382, -277, 387,
	133, 363, 320, 383, 323, -229, -149, 246, 293, 258,
	281, 8, 7, 7, 387, -305, -353, -135, 282, -54,
	-143, -146, -143, -273, 352, 130, 66, -192, -219, -221,
	-301, 382, -222, 269, 270, 387, -120, 31, 98, 177,
	-143, 357, -241, -241, 320, -363, 305, -248, -241, 201,
	211, 326, 116, 333, 100, 215, 133, 382, -242, -242,
	-178, -245, 382, -178, 381, 391, 383, -241, 381, 381,
	387, -260, -261, 104, -241, -165, 387, -164, -241, -178,
	-178, 383, 383, 320, 320, 320, 320, 382, -343, 227,
	382, 382, -241, 30, 387, 383, 133, 383, 383, -211,
	235, 383, 10, 11, 373, 374, 375, 376, 128, 377,
	378, 371, 372, 370, 361, 362, 363, 64, 195, 271,
	13, 14, 15, 170, 152, -242, -242, -242, -178, 382,
	383, -246, -247, 133, 130, 30, -207, -207, -207, 383,
	133, -178, 387, 387, 387, 383, 383, 383, 7, 383,
	387, 383, 357, 357, 383, 382, 383, -233, -275, -173,
	2, -271, -305, -233, -264, -271, -271, -201, 339, 219,
	174, -271, -266, 383, -350, 7, -268, -267, 7, -240,
	-239, 131, 207, 383, -135, 382, -268, 383, -121, -143,
	-135, -135, 209, -231, 149, -126, 209, -280, -135, 382,
	382, 177, 177, -135, -135, 149, -135, 149, -135, -135,
	-122, 257, -68, 357, 382, -143, 257, 357, -135, -68,
	382, -135, 257, 357, -105, 148, 215, 299, 133, -143,
	383, 383, 387, -136, 155, -136, -68, -176, -198, -198,
	5, -68, -143, 109, -128, 105, -362, 363, -135, -217,
	-215, -241, -194, -226, 264, 219, -174, 344, -135, -194,
	-172, 387, 133, 363, -174, -124, -124, -124, -124, -241,
	-353, -310, 383, -280, 380, 381, 7, 7, -108, 352,
	-310, -353, -302, -302, -132, 330, 63, 246, -302, 387,
	221, 245, 88, 307, -222, -241, -269, -143, 388, -241,
	-241, -242, -242, 133, 382, -241, -252, 26, 26, 383,
	-179, 387, -237, -241, 383, -250, 106, -241, 316, 383,
	346, -165, -165, -165, 5, 200, 143, 199, -210, 199,
	-210, -210, 7, -344, -135, 382, 350, -164, 383, -298,
	-280, -241, -246, -241, -298, -280, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, 100, 209, 215, -242, 387,
	-179, -247, -246, -241, -241, -280, 383, 383, 383, -178,
	-241, -241, -241, 383, 7, -53, -190, 138, -277, 387,
	-190, -201, 382, -241, -271, 381, 383, 387, -267, 381,
	387, 390, 363, -268, 382, -168, -266, 320, 320, 109,
	209, 341, -320, -317, -241, -167, -270, -135, -331, 382,
	-328, -329, -141, 382, 382, -119, 103, 285, -214, 109,
	-124, 109, -124, 320, -213, 69, -244, -141, -135, -178,
	320, -244, -178, 320, -244, -108, 133, 306, 299, -153,
	154, -232, 382, -136, 382, 382, -163, 382, -135, -129,
	182, -362, -308, -334, -194, -194, -181, 210, 68, 383,
	-233, -183, -173, -264, 383, -109, 76, -109, 7, 381,
	383, -107, 221, -106, -135, 5, -135, -31, -32, 155,
	-305, -135, -143, 220, 383, -120, -305, 26, 26, -241,
	-252, 383, -241, -241, 383, -241, 381, -241, 5, -241,
	383, 383, 383, 383, -345, -135, -241, 383, 383, 383,
	-247, 133, 100, 215, 382, -241, 383, 383, 387, 383,
	383, 383, 383, -249, 140, 44, -271, -249, -168, -238,
	7, -239, -305, 380, -267, -168, 383, -135, -135, -231,
	109, -321, 69, -322, 58, 117, 74, 209, 211, 332,
	241, 55, 94, 250, 383, 383, 387, -142, -186, 58,
	-142, -241, 382, -167, -168, 209, 94, 209, 94, 87,
	328, -135, -135, -143, -135, -135, 382, 383, -143, 383,
	-135, -311, 317, -154, -155, 232, 152, -167, 382, -168,
	-151, 30, -167, 219, -130, 181, -362, -308, -127, -225,
	382, 219, -68, -194, 363, 87, 87, 381, 387, 382,
	363, 363, 387, 22, 382, -120, -241, -241, 383, 383,
	-165, -339, 232, 383, -242, 133, 382, -252, 383, -241,
	-340, 351, -241, -178, -340, 383, -268, 7, 383, -231,
	-135, -305, -135, 117, 149, 211, 177, 382, -242, -143,
	-230, -358, 73, 303, -270, -120, -305, -120, 383, -178,
	383, 383, 211, 211, -241, -280, -124, -124, 320, 320,
	-178, 320, 320, -244, 44, 230, 383, -167, 383, 383,
	-68, 383, -143, -362, -308, -128, 101, -168, 69, -189,
	-112, 382, 382, 382, -106, -107, -310, -310, -32, -168,
	383, -165, 44, -242, -252, 383, 383, -341, -342, -135,
	-267, 381, -322, -136, 209, -241, -137, 382, -153, 382,
	-142, -165, 250, -123, 58, -135, -135, -165, 382, 382,
	190, 245, -143, -230, 383, -153, -230, 382, -308, -129,
	334, 210, 383, -135, -311, -311, 383, 383, -346, 245,
	270, -178, 383, 387, 30, 109, 383, -323, 196, -135,
	-168, -120, 383, -143, -118, 339, -305, 383, -178, -178,
	382, 382, 382, -153, -230, -153, -167, -130, 285, -233,
	383, 383, 383, -347, -348, 36, 329, 78, -241, -347,
	-342, -344, 117, -324, -327, -326, 219, 134, 231, 290,
	383, 383, -163, -241, 383, 383, -168, -168, -168, -153,
	383, -182, -108, -108, -348, 238, 129, 269, 238, 129,
	-135, -326, 219, -327, 219, 334, 97, -323, 383, 383,
	383, -230, -233, 26, -325, 206, 262, 49, 285, -325,
	-324, 382, 382, -125, 49, 262, -153, -348, 20, 211,
	94, -156, 232, -157, 232, 383, -305, 383, -305, 344,
	344, -158, 382, 186, 387, -155, -154, -159, -160, -241,
	94, 198, 315, -156, 382, 387, 383, 387, 382, -159,
	-156, -160, -159, 383, 383, 387, -155, -154, -157, 387,
	-157,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 308, 0, 159, 161, 163,
	165, -2, 168, 170, 172, 0, 0, 0, 183, 185,
	187, 189, 191, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 694, -2, 0, 288, 290, 299,
	301, 303, 305, 306, 0, 356, 358, 360, 362, 364,
	366, 368, 370, 372, 374, 376, 378, 380, 382, 384,
	385, 387, 389, 391, 0, 615, 617, 619, -2, 65,
	66, 67, 68, 69, 70, 78, 79, 80, 81, 72,
	74, 75, 77, 0, 732, -2, 743, 0, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 709, 711, 713,
	715, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	43, 49, 51, 53, 56, 58, 60, 62, 64, 0,
	0, 0, 0, 0, 0, 125, 272, 0, 1319, 1242,
	1248, 1249, 1273, 1274, 1275, 1292, 1293, 1294, 1295, 1296,
	1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
	1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
	1317, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
	1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
	1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,
	1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
	1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
	1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417,
	1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427,
	1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437,
	1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
	1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
	1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
	1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
	1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 151, 153, 154, 0, 0, 0, 1244, 1319, 160,
	162, 164, 166, 0, 174, 0, 0, 0, 0, 0,
	582, 169, 171, 173, 263, 1383, 265, 267, 0, 0,
	0, 0, 177, 178, 179, 180, 181, 182, 184, 186,
	188, 190, 192, 193, 0, 0, 0, 0, 0, 262,
	260, 215, 216, 0, 245, 246, 247, 248, 249, 251,
	219, 221, 222, 224, 226, 228, 230, 231, 233, 235,
	236, 238, 240, 241, 243, 0, 0, 0, 269, 275,
	276, 277, 279, 280, 281, 282, 283, 284, 285, 0,
	131, 0, 468, 258, 256, 0, 127, 0, 612, 0,
	271, 613, 614, 609, 610, 1410, 638, 289, 291, 300,
	302, 304, -2, -2, 1505, -2, 320, -2, 328, 1511,
	0, 331, 332, 335, -2, 211, 357, 359, 361, 363,
	365, 367, 369, 371, 373, 375, 377, 379, 381, 383,
	386, 388, 390, 392, 393, 0, 0, 0, 397, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, 0, -2, -2, 0, 0, -2, 0, 0, 396,
	398, 399, 400, 0, 616, 618, 620, 0, 572, 734,
	0, 0, -2, 707, 708, -2, 0, 738, 738, 738,
	0, 0, 708, 706, 0, 292, 0, 294, 0, 397,
	297, 298, 336, 337, 1227, 1228, 944, 0, 0, 0,
	0, 0, 0, 1046, 1048, 1476, 1505, 0, 1050, 1051,
	0, 1053, 1055, 1056, 0, 1059, 1060, 1212, 1244, 1258,
	1259, 1260, 1261, 0, 0, 1264, 0, 1266, 1267, 1268,
	1114, 1070, -2, -2, 1256, 872, 873, 874, 875, -2,
	1519, 1074, 1077, 1080, 1083, 1084, 1087, 1088, 0, 1460,
	1477, 1478, 1501, 1502, 1510, 1514, 1515, 1484, 1498, 1485,
	1472, 1482, 1496, 1325, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1282,
	906, 907, 912, 913, 1520, 1521, 1522, 1523, 1524, 1525,
	1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 915,
	640, 622, 631, 640, 624, 625, 626, 627, 628, 629,
	630, 633, 0, 724, 1389, 727, 1255, 725, 710, 712,
	0, 714, 0, 0, 718, 740, 739, 778, 779, 0,
	722, 723, 733, 794, 832, 809, 800, 0, 0, 2,
	71, 0, 1484, 832, 73, 0, 1484, 832, 76, 0,
	82, 0, 1484, 1247, 0, 1287, 1288, 1289, 1290, 1291,
	1519, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
	1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553,
	1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563,
	1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
	1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
	1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
	1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613,
	1614, 1615, 0, 0, 273, 274, 1252, 1250, 1251, 0,
	155, 156, 157, 158, 0, 0, 1245, 1221, 1219, 1220,
	167, 533, 1484, 556, 554, -2, 574, 533, 578, -2,
	731, 1484, 654, 264, 266, 0, 176, 0, 667, 0,
	669, 0, 684, 838, 117, 1484, 196, 209, 117, 1484,
	199, 117, 1484, 202, 1240, 117, 1484, 205, 206, 1484,
	208, 259, 0, 0, -2, 252, 254, 1283, 1284, 1285,
	1286, -2, 250, 220, 223, 225, 227, 229, 232, 234,
	237, 239, 242, 244, -2, 0, 0, 0, 467, 0,
	0, 0, 611, 0, 637, 307, 0, 317, 0, 319,
	1471, -2, -2, 323, 641, 645, 646, 647, 0, 0,
	0, 0, 0, 0, 0, 333, 212, 0, 394, 395,
	403, 404, 132, 133, 354, 355, 0, 407, 428, 440,
	0, 0, 411, 413, 466, 415, 0, 0, 417, 0,
	419, 0, 421, 0, 423, 0, 425, 427, 429, 441,
	431, 733, 433, 0, 435, 439, 0, 444, 0, 446,
	447, 448, 0, 0, 454, 0, 0, 401, 402, 117,
	836, 0, 0, 0, -2, 0, 751, 776, 0, 754,
	755, 0, 0, 0, 0, 736, 737, 0, 0, 0,
	696, 697, 293, 0, 296, 0, 0, 0, 0, 1147,
	1148, 1149, 1150, 1151, 1152, 1155, 1156, 1153, 1154, 1157,
	1158, 0, 0, 0, 0, 0, 1159, 0, 0, 0,
	0, 0, 0, 0, 0, 1160, 1161, 1162, 0, 0,
	1164, 0, 1166, 0, 0, 0, 0, 0, 0, 1226,
	0, 0, 1163, 949, 950, 951, 983, 984, 0, 1047,
	1223, 1216, 1049, 0, 1169, -2, 1170, 0, 0, 1052,
	1057, 1058, 1169, 0, 1211, -2, 0, 1263, 0, 941,
	1116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1192, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 891, 909, 920, 917, 916, 893, 0, 892,
	890, 0, 894, 0, 0, 0, 621, -2, 623, 0,
	635, 0, 726, 0, 0, 780, 783, 1232, 1236, 1237,
	783, 0, 1229, 0, 0, 0, 0, 829, 829, 829,
	827, 803, 0, 809, 0, -2, 833, 821, 0, -2,
	800, 0, 0, 834, 0, 83, 606, 96, 0, 606,
	606, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 823, 1243,
	0, 1217, 1218, 147, 0, 0, 1238, 1222, 474, 0,
	0, 553, 555, 557, 0, 0, 0, 0, 0, 0,
	568, 573, 0, 730, 0, 0, 0, 1484, 581, 1276,
	656, 0, 842, 0, 670, 0, 0, 839, 0, 194,
	0, 115, 116, 0, 197, 0, 200, 0, 0, 203,
	0, 0, 0, 1170, 733, 0, 0, 278, 0, 0,
	733, 0, 1172, 850, 851, 852, 853, 854, 941, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 903, 0, 878, 878, 878,
	895, 896, 904, 905, 910, 911, 922, 923, 925, 927,
	921, 921, 921, 918, 919, 823, 134, 0, 0, 0,
	0, -2, 325, 0, 643, 0, 648, 345, 346, 347,
	650, 651, 329, 348, 349, 350, 351, 352, 353, 0,
	550, 0, 552, 1269, 0, 326, 338, 327, 330, 0,
	213, 405, 406, 408, 409, 410, 414, 0, 463, 416,
	418, 420, 422, 424, 432, 436, 733, 442, 445, 449,
	450, 451, 452, 0, 0, 0, 571, 0, 309, 0,
	458, 0, 751, 776, 700, 750, 701, 775, 777, 752,
	753, 758, 762, 763, 766, 769, 770, 760, 944, 719,
	720, 721, 744, 745, 593, 0, 0, 295, 945, 846,
	847, 897, 898, 899, 900, 901, 946, 947, 0, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, -2,
	-2, -2, -2, -2, -2, -2, -2, 970, 971, 972,
	973, 974, 975, 976, 977, -2, -2, -2, 981, 982,
	-2, 1165, 1167, 0, 1226, 0, -2, 0, -2, -2,
	-2, -2, 995, 0, 997, 1000, 1002, 1004, 0, 0,
	0, 0, 1225, 1014, 1203, 0, 0, 1144, 1145, 1146,
	999, 0, 0, 1224, 1215, 0, 0, 1168, 1054, 0,
	0, 0, 1176, 1210, 1206, 0, 1061, 743, 0, 0,
	0, 0, 1068, 0, 1272, 928, 929, 930, 931, 932,
	933, 942, 1124, 0, 0, 0, 1075, 1076, 1078, 1079,
	1081, 1082, 1085, 1086, 0, 0, 0, 1092, 0, 1179,
	-2, -2, -2, -2, -2, -2, -2, 0, 1094, 0,
	1096, 1170, 1189, 0, 0, 1017, 0, 0, 0, 0,
	1505, 0, 1099, 1170, 1197, 0, 0, 0, 0, 0,
	1170, 0, 1202, 0, 0, 0, 0, 0, 1110, 0,
	1112, 0, 0, 0, 0, 0, 0, 634, 728, 0,
	0, 842, 0, 0, 0, 1235, 842, 0, 1231, 0,
	0, 0, 0, 0, 824, 828, 825, 826, 0, 0,
	809, 821, 791, 0, 0, 0, 798, 799, 820, 0,
	819, 808, -2, 0, 0, 0, 0, 0, 605, 98,
	1484, 0, 119, 0, 0, 523, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 1246,
	0, 137, 0, 1253, 0, 0, 0, 0, 0, 473,
	1252, 475, 477, 478, 479, 480, 1277, 0, 1277, 0,
	0, 558, 559, 0, 570, 0, 561, 562, 564, 569,
	563, 565, 0, 567, 0, 0, 0, 0, 658, 664,
	0, 757, 0, 682, 672, 0, 0, 0, 682, 686,
	687, 689, 690, 0, 0, 840, 210, 117, 117, 1241,
	117, 117, 207, 261, 0, 217, 253, 0, 0, 0,
	255, 257, 0, 843, 845, 0, 855, 0, 146, 0,
	0, 0, 0, 318, 0, 642, 649, 0, 342, 0,
	344, 551, 1271, 1270, 0, 214, 465, 286, 434, 437,
	460, 461, 462, 837, 0, 0, 459, 704, 705, 0,
	764, 0, 761, 767, 768, 0, 747, 591, 592, 0,
	0, 0, -2, -2, 0, 0, 0, 1015, -2, 996,
	998, 1001, 1003, 1005, 0, 0, 0, 0, 0, 0,
	0, 1016, 1169, 0, 1213, 1216, -2, 1171, 1174, 1175,
	0, 0, 1207, 0, 0, 0, 0, 742, 743, 743,
	743, 1067, 0, 0, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 1091, 0, 1093, 1095, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1020, 1021, 1022, 0, 1169,
	1098, 1195, 1196, 0, 0, 0, 0, 0, 0, 1104,
	0, 1201, 0, 0, 0, 1108, 1109, 1111, 0, 876,
	0, 902, 924, 926, 914, 733, 1254, 772, 1233, 823,
	782, 784, 1234, 772, 1230, 811, 0, 813, 0, 0,
	0, 815, 0, 804, 0, 806, 821, 796, 0, 0,
	789, 0, 788, 809, 817, 0, 0, 835, 97, 595,
	0, 0, 0, 100, 1484, 108, 0, 505, 0, 0,
	0, 0, 0, 608, 109, 1484, 117, 1484, 117, 110,
	84, 606, 85, 0, 0, 601, 0, 0, 594, 86,
	0, 603, 0, 0, 146, 0, 0, 148, 0, 1239,
	482, 532, 0, 0, 1277, 0, 471, 533, 560, 566,
	575, 577, 0, 0, 660, 664, 0, 663, 731, 682,
	756, 841, 665, 682, 0, 0, 0, 674, 671, 668,
	842, 0, 0, 0, 0, 195, 198, 201, 204, 1171,
	268, 0, 0, 1173, 0, 848, 0, 0, 126, 0,
	135, 270, 315, 316, 321, 340, 341, 343, 339, 0,
	0, 0, 0, 0, 0, 0, 746, 593, 0, 948,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 1204,
	0, 0, 0, 1215, -2, 1177, 1205, 1209, 0, 1062,
	0, 0, 0, 0, 1265, 934, 935, 936, 937, 938,
	939, 940, 0, 1122, 1123, 1127, 0, 0, 1073, 0,
	0, 1178, 1188, 1190, 1018, 1019, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, -2, -2, -2, 1036,
	1037, 1038, -2, -2, -2, 0, 0, 0, 1191, 0,
	0, 1193, 1194, 1198, 1199, 0, 1101, 1102, 1103, 1200,
	0, 0, 0, 908, 0, 0, 774, 0, 781, 0,
	774, 812, 0, 831, 814, 794, 805, 0, 802, 792,
	0, 793, 0, 821, 0, 0, 801, 0, 0, 0,
	0, 118, 503, 522, 0, 0, 584, 590, 590, 0,
	1071, 1072, 0, 0, 0, 102, 0, 0, 0, 0,
	106, 0, 112, 0, 0, 0, 91, 0, 0, 0,
	0, 90, 0, 0, 89, 124, 0, 0, 149, 487,
	0, 476, 0, 0, 0, 474, 0, 0, 0, 662,
	664, 0, 655, 656, 175, 666, 680, 681, 679, 0,
	682, 688, 685, 691, 0, 0, 128, 0, 0, 849,
	856, 144, 1373, 142, 139, 141, 287, 310, 311, 0,
	455, 456, 457, 759, 765, 748, 593, 0, 0, -2,
	0, 1008, -2, -2, 1140, 1171, 1214, 1208, 1262, 743,
	1063, 1065, 1066, 943, 1129, 1126, 0, 1113, 1089, 1090,
	1187, 0, 0, 0, 0, 1171, 1142, 1100, 0, 1106,
	1107, 877, 729, 1118, 0, 0, 785, 1118, 0, 809,
	807, 790, 786, 0, 797, 0, 818, 597, 599, 99,
	0, 504, 0, 507, 0, 0, 0, 0, 513, 514,
	0, 0, 0, 0, 524, 531, 0, 593, 1257, 0,
	593, 0, 0, 0, 0, 0, 114, 0, 0, 607,
	0, 117, 117, 596, 0, 0, 0, 0, 602, 0,
	604, 136, 0, 469, 486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 652, 664, 0, 657, 658, 0,
	0, 0, 673, 683, 0, 0, 0, 844, 0, 0,
	0, 0, 0, 313, 0, 749, -2, -2, 1009, 1141,
	0, 743, 0, 1115, -2, 0, 0, 0, 1143, 0,
	716, 0, 773, 771, 717, 830, 821, 0, 816, 101,
	0, 508, 509, 1277, 0, 512, 515, 0, 517, 1279,
	482, 0, 528, 529, 585, 586, 589, 587, 590, 743,
	526, 0, 103, 104, 113, 121, 105, 111, 0, 0,
	743, 0, 0, 822, 0, 0, 531, 0, 521, 482,
	472, 531, 0, 0, 659, 660, 0, 0, 0, 692,
	693, 0, 0, 0, 143, 0, 138, 140, 312, 0,
	1064, 1132, 0, -2, 0, 1044, 1105, 1117, 1119, 0,
	795, 787, 506, 510, 0, 0, 537, 0, 525, 0,
	593, 0, 0, 123, 0, 598, 600, 0, 0, 0,
	0, 0, 0, 482, 531, 470, 482, 0, 661, 662,
	0, 676, 842, 678, 0, 0, 145, 314, 0, 0,
	0, 1128, 1045, 0, 0, 0, 516, 542, 0, 0,
	0, 588, 1062, 533, 107, 0, 120, 0, 0, 0,
	0, 0, 0, 519, 482, 579, 0, 653, 0, 677,
	146, 146, 1125, 1130, 1133, -2, 1444, 1316, 0, 1131,
	1120, 1121, 0, 518, 538, 539, 0, 534, 535, 536,
	1278, 530, 537, 122, 93, 95, 0, 0, 0, 520,
	531, 842, 129, 130, 0, 1135, 1136, 1137, 1138, 1139,
	511, 540, 0, 541, 0, 0, 0, 542, 0, 0,
	485, 482, 675, 0, 543, 0, 546, 547, 0, 544,
	527, 0, 0, 481, 483, 484, 580, 1134, 545, 548,
	549, 0, 0, 0, 0, 488, 0, 489, 0, 0,
	0, 487, 0, 0, 0, 486, 492, 0, 495, 497,
	498, -2, 0, 490, 0, 0, 493, 0, 0, 0,
	491, 496, 0, 494, 487, 0, 486, 502, 500, 0,
	501,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 371, 3, 377, 372, 3,
	382, 383, 375, 373, 387, 374, 384, 376, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 391, 386,
	361, 363, 362, 365, 388, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 380, 3, 381, 378, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 389, 370, 390, 368,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 364, 57704, 366,
	57705, 367, 57706, 369, 57707, 379, 57708, 385, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:922
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:928
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:934
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:969
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:976
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:991
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1050
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1099
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1105
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1111
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1120
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1129
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1198
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1221
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1231
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1294
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1297
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1298
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1325
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1389
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1458
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1480
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1511
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1513
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1515
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1516
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1519
		{
			return helpWith(sqllex, "CREATE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1537
		{
			return helpWith(sqllex, "DELETE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1557
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1559
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "DROP")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1592
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1653
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "DELETE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			return helpWith(sqllex, "INSERT")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1729
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1732
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1733
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1740
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1741
		{ /* SKIP DOC */
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1828
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return helpWith(sqllex, "GRANT")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "RESET")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			return helpWith(sqllex, "RESET")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1973
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1978
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1981
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1985
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1988
		{ /* SKIP DOC */
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1989
		{ /* SKIP DOC */
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			return unimplemented(sqllex, "set local")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2049
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2121
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2124
		{
			return unimplemented(sqllex, "set from current")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2132
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2136
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = Low
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = Normal
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = High
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2237
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2238
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2241
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2242
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2243
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2245
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2247
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2252
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2254
		{
			return helpWith(sqllex, "SHOW")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2263
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.str = "client_encoding"
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2289
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2311
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2424
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2447
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2478
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2482
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2486
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2489
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2500
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2511
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2522
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2526
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2530
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2534
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2538
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2542
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2548
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2552
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2556
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2590
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2697
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2701
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = DropDefault
		}
	case 487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 488:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			return unimplemented(sqllex, "match full")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			return unimplemented(sqllex, "match partial")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			return unimplemented(sqllex, "match simple")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3025
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = NoAction
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = Restrict
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = Cascade
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = SetNull
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = SetDefault
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3116
		{
			node := &CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3123
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = []SequenceOption{}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = []SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptIncrement, IntVal: sqlDollar[2].union.intVal()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptIncrement, IntVal: sqlDollar[3].union.intVal(), OptionalWord: true}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMinValue, IntVal: sqlDollar[2].union.intVal()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMinValue, IntVal: nil}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMaxValue, IntVal: sqlDollar[2].union.intVal()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMaxValue, IntVal: nil}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptStart, IntVal: sqlDollar[2].union.intVal()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptStart, IntVal: sqlDollar[3].union.intVal(), OptionalWord: true}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptCache, IntVal: sqlDollar[2].union.intVal()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptCycle, BoolVal: true}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptCycle, BoolVal: false}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3149
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &val
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3166
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3177
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3181
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3202
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3242
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = true
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = false
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3272
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3273
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3276
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3277
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = Ascending
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = Descending
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3317
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3319
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = true
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = false
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3353
		{
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3364
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3375
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3386
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3390
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3391
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3392
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3410
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3415
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3428
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3433
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3441
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3448
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3451
		{
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3452
		{
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.str = ""
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.str = ""
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3511
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3513
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = ReadOnly
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = ReadWrite
		}
	case 652:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3577
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.str = ""
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.str = ""
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.str = ""
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.str = ""
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3620
		{
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3621
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3645
		{
			return helpWith(sqllex, "INSERT")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3662
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3704
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3708
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3716
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 683:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3739
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3743
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3744
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3881
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			return helpWith(sqllex, "SELECT")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3917
		{
			return helpWith(sqllex, "VALUES")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3918
		{
			return helpWith(sqllex, "TABLE")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3965
		{
			return helpWith(sqllex, "SELECT")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4009
		{
			return helpWith(sqllex, "TABLE")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4020
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4021
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4025
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4026
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4029
		{
			return unimplemented(sqllex, "cte")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4032
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4033
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4036
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4037
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4040
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4041
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = true
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = false
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = false
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = true
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4064
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4065
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4119
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4143
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4195
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4196
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4199
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4200
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = false
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = true
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4271
		{
			return helpWith(sqllex, "VALUES")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4273
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4288
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = &From{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4310
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4328
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4355
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4392
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4417
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = nil
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4458
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4464
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = true
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = false
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.str = astFullJoin
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.str = astLeftJoin
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.str = astRightJoin
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.str = astInnerJoin
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4575
		{
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4576
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4662
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4676
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4684
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4708
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4719
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = jsonbColType
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = jsonColType
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4777
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4808
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4817
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = nil
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4882
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4978
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 914:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5010
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5049
		{
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5050
		{
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = year
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = month
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = day
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = hour
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = minute
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = month
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = hour
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = minute
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = minute
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = nil
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = second
		}
	case 943:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5145
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5180
		{
			return unimplemented(sqllex, "at tz")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5388
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5402
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5406
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5454
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5494
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5522
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5526
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5590
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5627
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5640
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5644
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5653
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5657
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5661
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5665
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5677
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5680
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5681
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5694
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5705
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5721
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5722
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5726
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5735
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5737
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5741
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5744
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5753
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5754
		{
			return unimplemented(sqllex, "current role")
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5760
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5763
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5777
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5781
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5784
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5786
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5789
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5791
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5794
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5803
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5804
		{
			return unimplemented(sqllex, "treat")
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5806
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5814
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5818
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5826
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5841
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5843
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5846
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5850
		{
			return unimplemented(sqllex, "within group")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5851
		{
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5855
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5859
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5880
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5886
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5894
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5898
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5909
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.str = ""
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5934
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5948
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5949
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5950
		{
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5953
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5954
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5960
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5961
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5962
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5963
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5964
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5979
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5985
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = Any
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = Some
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = All
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = Plus
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = Minus
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = Mult
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = Div
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = Mod
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = Bitand
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6017
		{
			sqlVAL.union.val = Bitor
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = Pow
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = Bitxor
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6020
		{
			sqlVAL.union.val = LT
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6021
		{
			sqlVAL.union.val = GT
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = EQ
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = LE
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6024
		{
			sqlVAL.union.val = GE
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6025
		{
			sqlVAL.union.val = NE
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6029
		{
			sqlVAL.union.val = Like
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = NotLike
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = ILike
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = NotILike
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6044
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6050
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6060
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6080
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6084
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6116
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6120
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6130
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6137
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6162
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6166
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6170
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6174
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6180
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6186
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6192
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6196
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6200
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6210
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6221
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6228
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6232
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6238
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6244
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6248
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6255
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6261
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6265
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6272
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6278
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6284
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6290
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6294
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6300
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6304
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6310
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6319
		{
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6320
		{
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6329
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6335
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6339
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6348
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6354
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6358
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6364
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6373
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6377
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6381
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6389
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6399
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6403
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6409
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6413
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6424
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6428
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6434
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6438
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6451
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6455
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6459
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6463
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6469
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6473
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6479
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6482
		{
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6492
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6496
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6503
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6507
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6511
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6515
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6518
		{
			return unimplemented(sqllex, "func const")
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6520
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6524
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6527
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6529
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6533
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6537
		{
			sqlVAL.union.val = DNull
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6544
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6548
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6554
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6589
		{
			sqlVAL.str = ""
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6595
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6599
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
